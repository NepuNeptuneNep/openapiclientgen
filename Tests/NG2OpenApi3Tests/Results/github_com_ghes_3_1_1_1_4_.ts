import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	export interface Actions_enterprise_permissions {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions?: Actions_enterprise_permissionsAllowed_actions | null;

		/**
		 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_organizations: Actions_enterprise_permissionsEnabled_organizations;

		/** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
		selected_actions_url?: string | null;

		/** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
		selected_organizations_url?: string | null;
	}
	export interface Actions_enterprise_permissionsFormProperties {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions: FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>,

		/**
		 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_organizations: FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>,

		/** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
		selected_actions_url: FormControl<string | null | undefined>,

		/** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
		selected_organizations_url: FormControl<string | null | undefined>,
	}
	export function CreateActions_enterprise_permissionsFormGroup() {
		return new FormGroup<Actions_enterprise_permissionsFormProperties>({
			allowed_actions: new FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>(undefined),
			enabled_organizations: new FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>(undefined, [Validators.required]),
			selected_actions_url: new FormControl<string | null | undefined>(undefined),
			selected_organizations_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Actions_enterprise_permissionsAllowed_actions { all = 0, local_only = 1, selected = 2 }

	export enum Actions_enterprise_permissionsEnabled_organizations { all = 0, none = 1, selected = 2 }

	export interface Actions_organization_permissions {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions?: Actions_enterprise_permissionsAllowed_actions | null;

		/**
		 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_repositories: Actions_enterprise_permissionsEnabled_organizations;

		/** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
		selected_actions_url?: string | null;

		/** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
		selected_repositories_url?: string | null;
	}
	export interface Actions_organization_permissionsFormProperties {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions: FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>,

		/**
		 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_repositories: FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>,

		/** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
		selected_actions_url: FormControl<string | null | undefined>,

		/** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
		selected_repositories_url: FormControl<string | null | undefined>,
	}
	export function CreateActions_organization_permissionsFormGroup() {
		return new FormGroup<Actions_organization_permissionsFormProperties>({
			allowed_actions: new FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>(undefined),
			enabled_repositories: new FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>(undefined, [Validators.required]),
			selected_actions_url: new FormControl<string | null | undefined>(undefined),
			selected_repositories_url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The public key used for setting Actions Secrets. */
	export interface Actions_public_key {
		created_at?: string | null;
		id?: number | null;

		/**
		 * The Base64 encoded public key.
		 * Required
		 */
		key: string;

		/**
		 * The identifier for the key.
		 * Required
		 */
		key_id: string;
		title?: string | null;
		url?: string | null;
	}

	/** The public key used for setting Actions Secrets. */
	export interface Actions_public_keyFormProperties {
		created_at: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,

		/**
		 * The Base64 encoded public key.
		 * Required
		 */
		key: FormControl<string | null | undefined>,

		/**
		 * The identifier for the key.
		 * Required
		 */
		key_id: FormControl<string | null | undefined>,
		title: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateActions_public_keyFormGroup() {
		return new FormGroup<Actions_public_keyFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			key_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Actions_repository_permissions {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions?: Actions_enterprise_permissionsAllowed_actions | null;

		/**
		 * Whether GitHub Actions is enabled on the repository.
		 * Required
		 */
		enabled: boolean;

		/** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
		selected_actions_url?: string | null;
	}
	export interface Actions_repository_permissionsFormProperties {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions: FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>,

		/**
		 * Whether GitHub Actions is enabled on the repository.
		 * Required
		 */
		enabled: FormControl<boolean | null | undefined>,

		/** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
		selected_actions_url: FormControl<string | null | undefined>,
	}
	export function CreateActions_repository_permissionsFormGroup() {
		return new FormGroup<Actions_repository_permissionsFormProperties>({
			allowed_actions: new FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			selected_actions_url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Set secrets for GitHub Actions. */
	export interface Actions_secret {

		/** Required */
		created_at: Date;

		/**
		 * The name of the secret.
		 * Required
		 */
		name: string;

		/** Required */
		updated_at: Date;
	}

	/** Set secrets for GitHub Actions. */
	export interface Actions_secretFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The name of the secret.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateActions_secretFormGroup() {
		return new FormGroup<Actions_secretFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Actor */
	export interface Actor {

		/** Required */
		avatar_url: string;
		display_login?: string | null;

		/** Required */
		gravatar_id: string;

		/** Required */
		id: number;

		/** Required */
		login: string;

		/** Required */
		url: string;
	}

	/** Actor */
	export interface ActorFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		display_login: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateActorFormGroup() {
		return new FormGroup<ActorFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			display_login: new FormControl<string | null | undefined>(undefined),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Added to Project Issue Event */
	export interface Added_to_project_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;
		project_card?: Added_to_project_issue_eventProject_card;

		/** Required */
		url: string;
	}

	/** Added to Project Issue Event */
	export interface Added_to_project_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateAdded_to_project_issue_eventFormGroup() {
		return new FormGroup<Added_to_project_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Simple User */
	export interface Simple_user {

		/** Required */
		avatar_url: string;
		email?: string | null;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;
		name?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;
		starred_at?: string | null;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** Simple User */
	export interface Simple_userFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,
		starred_at: FormControl<string | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateSimple_userFormGroup() {
		return new FormGroup<Simple_userFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_at: new FormControl<string | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
	export interface Nullable_integration {
		client_id?: string | null;
		client_secret?: string | null;

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/**
		 * The list of events for the GitHub app
		 * Required
		 */
		events: Array<string>;

		/** Required */
		external_url: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the GitHub app
		 * Required
		 */
		id: number;

		/** The number of installations associated with the GitHub app */
		installations_count?: number | null;

		/**
		 * The name of the GitHub app
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Simple User
		 * Required
		 */
		owner: Nullable_simple_user;
		pem?: string | null;

		/**
		 * The set of permissions for the GitHub app
		 * Required
		 */
		permissions: Nullable_integrationPermissions;

		/** The slug name of the GitHub app */
		slug?: string | null;

		/** Required */
		updated_at: Date;
		webhook_secret?: string | null;
	}

	/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
	export interface Nullable_integrationFormProperties {
		client_id: FormControl<string | null | undefined>,
		client_secret: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		external_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the GitHub app
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** The number of installations associated with the GitHub app */
		installations_count: FormControl<number | null | undefined>,

		/**
		 * The name of the GitHub app
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		pem: FormControl<string | null | undefined>,

		/** The slug name of the GitHub app */
		slug: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,
		webhook_secret: FormControl<string | null | undefined>,
	}
	export function CreateNullable_integrationFormGroup() {
		return new FormGroup<Nullable_integrationFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_secret: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			external_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			installations_count: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pem: new FormControl<string | null | undefined>(undefined),
			slug: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			webhook_secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Simple User */
	export interface Nullable_simple_user {

		/** Required */
		avatar_url: string;
		email?: string | null;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;
		name?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;
		starred_at?: string | null;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** Simple User */
	export interface Nullable_simple_userFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,
		starred_at: FormControl<string | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_simple_userFormGroup() {
		return new FormGroup<Nullable_simple_userFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_at: new FormControl<string | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_integrationPermissions {
		checks?: string | null;
		contents?: string | null;
		deployments?: string | null;
		issues?: string | null;
		metadata?: string | null;
	}
	export interface Nullable_integrationPermissionsFormProperties {
		checks: FormControl<string | null | undefined>,
		contents: FormControl<string | null | undefined>,
		deployments: FormControl<string | null | undefined>,
		issues: FormControl<string | null | undefined>,
		metadata: FormControl<string | null | undefined>,
	}
	export function CreateNullable_integrationPermissionsFormGroup() {
		return new FormGroup<Nullable_integrationPermissionsFormProperties>({
			checks: new FormControl<string | null | undefined>(undefined),
			contents: new FormControl<string | null | undefined>(undefined),
			deployments: new FormControl<string | null | undefined>(undefined),
			issues: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Added_to_project_issue_eventProject_card {

		/** Required */
		column_name: string;

		/** Required */
		id: number;
		previous_column_name?: string | null;

		/** Required */
		project_id: number;

		/** Required */
		project_url: string;

		/** Required */
		url: string;
	}
	export interface Added_to_project_issue_eventProject_cardFormProperties {

		/** Required */
		column_name: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		previous_column_name: FormControl<string | null | undefined>,

		/** Required */
		project_id: FormControl<number | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateAdded_to_project_issue_eventProject_cardFormGroup() {
		return new FormGroup<Added_to_project_issue_eventProject_cardFormProperties>({
			column_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previous_column_name: new FormControl<string | null | undefined>(undefined),
			project_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The permissions policy that controls the actions that are allowed to run. */
	export enum Allowed_actions { all = 0, local_only = 1, selected = 2 }


	/** Enterprise global announcement */
	export interface Announcement {

		/**
		 * The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.1/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)."
		 * Required
		 */
		announcement: string;

		/** The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string. */
		expires_at?: Date | null;
	}

	/** Enterprise global announcement */
	export interface AnnouncementFormProperties {

		/**
		 * The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.1/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)."
		 * Required
		 */
		announcement: FormControl<string | null | undefined>,

		/** The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string. */
		expires_at: FormControl<Date | null | undefined>,
	}
	export function CreateAnnouncementFormGroup() {
		return new FormGroup<AnnouncementFormProperties>({
			announcement: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expires_at: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Api Overview */
	export interface Api_overview {
		dependabot?: Array<string>;
		installed_version?: string | null;
		packages?: Array<string>;

		/** Required */
		verifiable_password_authentication: boolean;
	}

	/** Api Overview */
	export interface Api_overviewFormProperties {
		installed_version: FormControl<string | null | undefined>,

		/** Required */
		verifiable_password_authentication: FormControl<boolean | null | undefined>,
	}
	export function CreateApi_overviewFormGroup() {
		return new FormGroup<Api_overviewFormProperties>({
			installed_version: new FormControl<string | null | undefined>(undefined),
			verifiable_password_authentication: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The permissions granted to the user-to-server access token. */
	export interface App_permissions {

		/** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. */
		actions?: App_permissionsActions | null;

		/** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. */
		administration?: App_permissionsActions | null;

		/** The level of permission to grant the access token for checks on code. */
		checks?: App_permissionsActions | null;

		/** The level of permission to grant the access token for notification of content references and creation content attachments. */
		content_references?: App_permissionsActions | null;

		/** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. */
		contents?: App_permissionsActions | null;

		/** The level of permission to grant the access token for deployments and deployment statuses. */
		deployments?: App_permissionsActions | null;

		/** The level of permission to grant the access token for managing repository environments. */
		environments?: App_permissionsActions | null;

		/** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. */
		issues?: App_permissionsActions | null;

		/** The level of permission to grant the access token for organization teams and members. */
		members?: App_permissionsActions | null;

		/** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. */
		metadata?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage access to an organization. */
		organization_administration?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage the post-receive hooks for an organization. */
		organization_hooks?: App_permissionsActions | null;

		/** The level of permission to grant the access token for organization packages published to GitHub Packages. */
		organization_packages?: App_permissionsActions | null;

		/** The level of permission to grant the access token for viewing an organization's plan. */
		organization_plan?: App_permissionsOrganization_plan | null;

		/** The level of permission to grant the access token to manage organization projects and projects beta (where available). */
		organization_projects?: App_permissionsOrganization_projects | null;

		/** The level of permission to grant the access token to manage organization secrets. */
		organization_secrets?: App_permissionsActions | null;

		/** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. */
		organization_self_hosted_runners?: App_permissionsActions | null;

		/** The level of permission to grant the access token to view and manage users blocked by the organization. */
		organization_user_blocking?: App_permissionsActions | null;

		/** The level of permission to grant the access token for packages published to GitHub Packages. */
		packages?: App_permissionsActions | null;

		/** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. */
		pages?: App_permissionsActions | null;

		/** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. */
		pull_requests?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage the post-receive hooks for a repository. */
		repository_hooks?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage repository projects, columns, and cards. */
		repository_projects?: App_permissionsOrganization_projects | null;

		/** The level of permission to grant the access token to view and manage secret scanning alerts. */
		secret_scanning_alerts?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage repository secrets. */
		secrets?: App_permissionsActions | null;

		/** The level of permission to grant the access token to view and manage security events like code scanning alerts. */
		security_events?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage just a single file. */
		single_file?: App_permissionsActions | null;

		/** The level of permission to grant the access token for commit statuses. */
		statuses?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage team discussions and related comments. */
		team_discussions?: App_permissionsActions | null;

		/** The level of permission to grant the access token to manage Dependabot alerts. */
		vulnerability_alerts?: App_permissionsActions | null;

		/** The level of permission to grant the access token to update GitHub Actions workflow files. */
		workflows?: App_permissionsWorkflows | null;
	}

	/** The permissions granted to the user-to-server access token. */
	export interface App_permissionsFormProperties {

		/** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. */
		actions: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. */
		administration: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for checks on code. */
		checks: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for notification of content references and creation content attachments. */
		content_references: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. */
		contents: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for deployments and deployment statuses. */
		deployments: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for managing repository environments. */
		environments: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. */
		issues: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for organization teams and members. */
		members: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. */
		metadata: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage access to an organization. */
		organization_administration: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage the post-receive hooks for an organization. */
		organization_hooks: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for organization packages published to GitHub Packages. */
		organization_packages: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for viewing an organization's plan. */
		organization_plan: FormControl<App_permissionsOrganization_plan | null | undefined>,

		/** The level of permission to grant the access token to manage organization projects and projects beta (where available). */
		organization_projects: FormControl<App_permissionsOrganization_projects | null | undefined>,

		/** The level of permission to grant the access token to manage organization secrets. */
		organization_secrets: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. */
		organization_self_hosted_runners: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to view and manage users blocked by the organization. */
		organization_user_blocking: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for packages published to GitHub Packages. */
		packages: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. */
		pages: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. */
		pull_requests: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage the post-receive hooks for a repository. */
		repository_hooks: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage repository projects, columns, and cards. */
		repository_projects: FormControl<App_permissionsOrganization_projects | null | undefined>,

		/** The level of permission to grant the access token to view and manage secret scanning alerts. */
		secret_scanning_alerts: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage repository secrets. */
		secrets: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to view and manage security events like code scanning alerts. */
		security_events: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage just a single file. */
		single_file: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token for commit statuses. */
		statuses: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage team discussions and related comments. */
		team_discussions: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to manage Dependabot alerts. */
		vulnerability_alerts: FormControl<App_permissionsActions | null | undefined>,

		/** The level of permission to grant the access token to update GitHub Actions workflow files. */
		workflows: FormControl<App_permissionsWorkflows | null | undefined>,
	}
	export function CreateApp_permissionsFormGroup() {
		return new FormGroup<App_permissionsFormProperties>({
			actions: new FormControl<App_permissionsActions | null | undefined>(undefined),
			administration: new FormControl<App_permissionsActions | null | undefined>(undefined),
			checks: new FormControl<App_permissionsActions | null | undefined>(undefined),
			content_references: new FormControl<App_permissionsActions | null | undefined>(undefined),
			contents: new FormControl<App_permissionsActions | null | undefined>(undefined),
			deployments: new FormControl<App_permissionsActions | null | undefined>(undefined),
			environments: new FormControl<App_permissionsActions | null | undefined>(undefined),
			issues: new FormControl<App_permissionsActions | null | undefined>(undefined),
			members: new FormControl<App_permissionsActions | null | undefined>(undefined),
			metadata: new FormControl<App_permissionsActions | null | undefined>(undefined),
			organization_administration: new FormControl<App_permissionsActions | null | undefined>(undefined),
			organization_hooks: new FormControl<App_permissionsActions | null | undefined>(undefined),
			organization_packages: new FormControl<App_permissionsActions | null | undefined>(undefined),
			organization_plan: new FormControl<App_permissionsOrganization_plan | null | undefined>(undefined),
			organization_projects: new FormControl<App_permissionsOrganization_projects | null | undefined>(undefined),
			organization_secrets: new FormControl<App_permissionsActions | null | undefined>(undefined),
			organization_self_hosted_runners: new FormControl<App_permissionsActions | null | undefined>(undefined),
			organization_user_blocking: new FormControl<App_permissionsActions | null | undefined>(undefined),
			packages: new FormControl<App_permissionsActions | null | undefined>(undefined),
			pages: new FormControl<App_permissionsActions | null | undefined>(undefined),
			pull_requests: new FormControl<App_permissionsActions | null | undefined>(undefined),
			repository_hooks: new FormControl<App_permissionsActions | null | undefined>(undefined),
			repository_projects: new FormControl<App_permissionsOrganization_projects | null | undefined>(undefined),
			secret_scanning_alerts: new FormControl<App_permissionsActions | null | undefined>(undefined),
			secrets: new FormControl<App_permissionsActions | null | undefined>(undefined),
			security_events: new FormControl<App_permissionsActions | null | undefined>(undefined),
			single_file: new FormControl<App_permissionsActions | null | undefined>(undefined),
			statuses: new FormControl<App_permissionsActions | null | undefined>(undefined),
			team_discussions: new FormControl<App_permissionsActions | null | undefined>(undefined),
			vulnerability_alerts: new FormControl<App_permissionsActions | null | undefined>(undefined),
			workflows: new FormControl<App_permissionsWorkflows | null | undefined>(undefined),
		});

	}

	export enum App_permissionsActions { read = 0, write = 1 }

	export enum App_permissionsOrganization_plan { read = 0 }

	export enum App_permissionsOrganization_projects { read = 0, write = 1, admin = 2 }

	export enum App_permissionsWorkflows { write = 0 }


	/** The authorization associated with an OAuth Access. */
	export interface Application_grant {

		/** Required */
		app: Application_grantApp;

		/** Required */
		created_at: Date;

		/** Required */
		id: number;

		/** Required */
		scopes: Array<string>;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** Simple User */
		user?: Nullable_simple_user;
	}

	/** The authorization associated with an OAuth Access. */
	export interface Application_grantFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateApplication_grantFormGroup() {
		return new FormGroup<Application_grantFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Application_grantApp {

		/** Required */
		client_id: string;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}
	export interface Application_grantAppFormProperties {

		/** Required */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateApplication_grantAppFormGroup() {
		return new FormGroup<Application_grantAppFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An artifact */
	export interface Artifact {

		/** Required */
		archive_download_url: string;

		/** Required */
		created_at: Date;

		/**
		 * Whether or not the artifact has expired.
		 * Required
		 */
		expired: boolean;

		/** Required */
		expires_at: Date;

		/** Required */
		id: number;

		/**
		 * The name of the artifact.
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * The size in bytes of the artifact.
		 * Required
		 */
		size_in_bytes: number;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
		workflow_run?: ArtifactWorkflow_run;
	}

	/** An artifact */
	export interface ArtifactFormProperties {

		/** Required */
		archive_download_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Whether or not the artifact has expired.
		 * Required
		 */
		expired: FormControl<boolean | null | undefined>,

		/** Required */
		expires_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of the artifact.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The size in bytes of the artifact.
		 * Required
		 */
		size_in_bytes: FormControl<number | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateArtifactFormGroup() {
		return new FormGroup<ArtifactFormProperties>({
			archive_download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			expired: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			expires_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size_in_bytes: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ArtifactWorkflow_run {
		head_branch?: string | null;
		head_repository_id?: number | null;
		head_sha?: string | null;
		id?: number | null;
		repository_id?: number | null;
	}
	export interface ArtifactWorkflow_runFormProperties {
		head_branch: FormControl<string | null | undefined>,
		head_repository_id: FormControl<number | null | undefined>,
		head_sha: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		repository_id: FormControl<number | null | undefined>,
	}
	export function CreateArtifactWorkflow_runFormGroup() {
		return new FormGroup<ArtifactWorkflow_runFormProperties>({
			head_branch: new FormControl<string | null | undefined>(undefined),
			head_repository_id: new FormControl<number | null | undefined>(undefined),
			head_sha: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			repository_id: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Assigned Issue Event */
	export interface Assigned_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Simple_user;

		/**
		 * Simple User
		 * Required
		 */
		assigner: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Integration;

		/** Required */
		url: string;
	}

	/** Assigned Issue Event */
	export interface Assigned_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateAssigned_issue_eventFormGroup() {
		return new FormGroup<Assigned_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
	export interface Integration {
		client_id?: string | null;
		client_secret?: string | null;

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/**
		 * The list of events for the GitHub app
		 * Required
		 */
		events: Array<string>;

		/** Required */
		external_url: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the GitHub app
		 * Required
		 */
		id: number;

		/** The number of installations associated with the GitHub app */
		installations_count?: number | null;

		/**
		 * The name of the GitHub app
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Simple User
		 * Required
		 */
		owner: Nullable_simple_user;
		pem?: string | null;

		/**
		 * The set of permissions for the GitHub app
		 * Required
		 */
		permissions: IntegrationPermissions;

		/** The slug name of the GitHub app */
		slug?: string | null;

		/** Required */
		updated_at: Date;
		webhook_secret?: string | null;
	}

	/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
	export interface IntegrationFormProperties {
		client_id: FormControl<string | null | undefined>,
		client_secret: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		external_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the GitHub app
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** The number of installations associated with the GitHub app */
		installations_count: FormControl<number | null | undefined>,

		/**
		 * The name of the GitHub app
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		pem: FormControl<string | null | undefined>,

		/** The slug name of the GitHub app */
		slug: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,
		webhook_secret: FormControl<string | null | undefined>,
	}
	export function CreateIntegrationFormGroup() {
		return new FormGroup<IntegrationFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_secret: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			external_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			installations_count: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pem: new FormControl<string | null | undefined>(undefined),
			slug: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			webhook_secret: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface IntegrationPermissions {
		checks?: string | null;
		contents?: string | null;
		deployments?: string | null;
		issues?: string | null;
		metadata?: string | null;
	}
	export interface IntegrationPermissionsFormProperties {
		checks: FormControl<string | null | undefined>,
		contents: FormControl<string | null | undefined>,
		deployments: FormControl<string | null | undefined>,
		issues: FormControl<string | null | undefined>,
		metadata: FormControl<string | null | undefined>,
	}
	export function CreateIntegrationPermissionsFormGroup() {
		return new FormGroup<IntegrationPermissionsFormProperties>({
			checks: new FormControl<string | null | undefined>(undefined),
			contents: new FormControl<string | null | undefined>(undefined),
			deployments: new FormControl<string | null | undefined>(undefined),
			issues: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Authentication Token */
	export interface Authentication_token {

		/**
		 * The time this token expires
		 * Required
		 */
		expires_at: Date;
		permissions?: string | null;

		/** The repositories this token has access to */
		repositories?: Array<Repository>;

		/** Describe whether all repositories have been selected or there's a selection involved */
		repository_selection?: Authentication_tokenRepository_selection | null;
		single_file?: string | null;

		/**
		 * The token used for authentication
		 * Required
		 */
		token: string;
	}

	/** Authentication Token */
	export interface Authentication_tokenFormProperties {

		/**
		 * The time this token expires
		 * Required
		 */
		expires_at: FormControl<Date | null | undefined>,
		permissions: FormControl<string | null | undefined>,

		/** Describe whether all repositories have been selected or there's a selection involved */
		repository_selection: FormControl<Authentication_tokenRepository_selection | null | undefined>,
		single_file: FormControl<string | null | undefined>,

		/**
		 * The token used for authentication
		 * Required
		 */
		token: FormControl<string | null | undefined>,
	}
	export function CreateAuthentication_tokenFormGroup() {
		return new FormGroup<Authentication_tokenFormProperties>({
			expires_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			permissions: new FormControl<string | null | undefined>(undefined),
			repository_selection: new FormControl<Authentication_tokenRepository_selection | null | undefined>(undefined),
			single_file: new FormControl<string | null | undefined>(undefined),
			token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A git repository */
	export interface Repository {

		/** Whether to allow forking this repo */
		allow_forking?: boolean | null;

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit?: boolean | null;

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge?: boolean | null;

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge?: boolean | null;

		/** Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging. */
		allow_update_branch?: boolean | null;

		/** Required */
		archive_url: string;

		/**
		 * Whether the repository is archived.
		 * Required
		 */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/**
		 * The default branch of the repository.
		 * Required
		 */
		default_branch: string;

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge?: boolean | null;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/**
		 * Whether downloads are enabled.
		 * Required
		 */
		has_downloads: boolean;

		/**
		 * Whether issues are enabled.
		 * Required
		 */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/**
		 * Whether projects are enabled.
		 * Required
		 */
		has_projects: boolean;

		/**
		 * Whether the wiki is enabled.
		 * Required
		 */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the repository
		 * Required
		 */
		id: number;

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/**
		 * The name of the repository.
		 * Required
		 */
		name: string;
		network_count?: number | null;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/** Simple User */
		organization?: Nullable_simple_user;

		/**
		 * Simple User
		 * Required
		 */
		owner: Simple_user;
		permissions?: RepositoryPermissions;

		/**
		 * Whether the repository is private or public.
		 * Required
		 */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		size: number;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;
		starred_at?: string | null;

		/** Required */
		statuses_url: string;
		subscribers_count?: number | null;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;
		template_repository?: RepositoryTemplate_repository;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}

	/** A git repository */
	export interface RepositoryFormProperties {

		/** Whether to allow forking this repo */
		allow_forking: FormControl<boolean | null | undefined>,

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit: FormControl<boolean | null | undefined>,

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge: FormControl<boolean | null | undefined>,

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging. */
		allow_update_branch: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/**
		 * Whether the repository is archived.
		 * Required
		 */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The default branch of the repository.
		 * Required
		 */
		default_branch: FormControl<string | null | undefined>,

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/**
		 * Whether downloads are enabled.
		 * Required
		 */
		has_downloads: FormControl<boolean | null | undefined>,

		/**
		 * Whether issues are enabled.
		 * Required
		 */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/**
		 * Whether projects are enabled.
		 * Required
		 */
		has_projects: FormControl<boolean | null | undefined>,

		/**
		 * Whether the wiki is enabled.
		 * Required
		 */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the repository
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/**
		 * The name of the repository.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
		network_count: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/**
		 * Whether the repository is private or public.
		 * Required
		 */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,
		starred_at: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,
		subscribers_count: FormControl<number | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateRepositoryFormGroup() {
		return new FormGroup<RepositoryFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_update_branch: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network_count: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			starred_at: new FormControl<string | null | undefined>(undefined),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_count: new FormControl<number | null | undefined>(undefined),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** License Simple */
	export interface Nullable_license_simple {
		html_url?: string | null;

		/** Required */
		key: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		spdx_id: string;

		/** Required */
		url: string;
	}

	/** License Simple */
	export interface Nullable_license_simpleFormProperties {
		html_url: FormControl<string | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		spdx_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_license_simpleFormGroup() {
		return new FormGroup<Nullable_license_simpleFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			spdx_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface RepositoryPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface RepositoryPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateRepositoryPermissionsFormGroup() {
		return new FormGroup<RepositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface RepositoryTemplate_repository {
		allow_merge_commit?: boolean | null;
		allow_rebase_merge?: boolean | null;
		allow_squash_merge?: boolean | null;
		allow_update_branch?: boolean | null;
		archive_url?: string | null;
		archived?: boolean | null;
		assignees_url?: string | null;
		blobs_url?: string | null;
		branches_url?: string | null;
		clone_url?: string | null;
		collaborators_url?: string | null;
		comments_url?: string | null;
		commits_url?: string | null;
		compare_url?: string | null;
		contents_url?: string | null;
		contributors_url?: string | null;
		created_at?: string | null;
		default_branch?: string | null;
		delete_branch_on_merge?: boolean | null;
		deployments_url?: string | null;
		description?: string | null;
		disabled?: boolean | null;
		downloads_url?: string | null;
		events_url?: string | null;
		fork?: boolean | null;
		forks_count?: number | null;
		forks_url?: string | null;
		full_name?: string | null;
		git_commits_url?: string | null;
		git_refs_url?: string | null;
		git_tags_url?: string | null;
		git_url?: string | null;
		has_downloads?: boolean | null;
		has_issues?: boolean | null;
		has_pages?: boolean | null;
		has_projects?: boolean | null;
		has_wiki?: boolean | null;
		homepage?: string | null;
		hooks_url?: string | null;
		html_url?: string | null;
		id?: number | null;
		is_template?: boolean | null;
		issue_comment_url?: string | null;
		issue_events_url?: string | null;
		issues_url?: string | null;
		keys_url?: string | null;
		labels_url?: string | null;
		language?: string | null;
		languages_url?: string | null;
		merges_url?: string | null;
		milestones_url?: string | null;
		mirror_url?: string | null;
		name?: string | null;
		network_count?: number | null;
		node_id?: string | null;
		notifications_url?: string | null;
		open_issues_count?: number | null;
		owner?: RepositoryTemplate_repositoryOwner;
		permissions?: RepositoryTemplate_repositoryPermissions;
		private?: boolean | null;
		pulls_url?: string | null;
		pushed_at?: string | null;
		releases_url?: string | null;
		size?: number | null;
		ssh_url?: string | null;
		stargazers_count?: number | null;
		stargazers_url?: string | null;
		statuses_url?: string | null;
		subscribers_count?: number | null;
		subscribers_url?: string | null;
		subscription_url?: string | null;
		svn_url?: string | null;
		tags_url?: string | null;
		teams_url?: string | null;
		temp_clone_token?: string | null;
		topics?: Array<string>;
		trees_url?: string | null;
		updated_at?: string | null;
		url?: string | null;
		visibility?: string | null;
		watchers_count?: number | null;
	}
	export interface RepositoryTemplate_repositoryFormProperties {
		allow_merge_commit: FormControl<boolean | null | undefined>,
		allow_rebase_merge: FormControl<boolean | null | undefined>,
		allow_squash_merge: FormControl<boolean | null | undefined>,
		allow_update_branch: FormControl<boolean | null | undefined>,
		archive_url: FormControl<string | null | undefined>,
		archived: FormControl<boolean | null | undefined>,
		assignees_url: FormControl<string | null | undefined>,
		blobs_url: FormControl<string | null | undefined>,
		branches_url: FormControl<string | null | undefined>,
		clone_url: FormControl<string | null | undefined>,
		collaborators_url: FormControl<string | null | undefined>,
		comments_url: FormControl<string | null | undefined>,
		commits_url: FormControl<string | null | undefined>,
		compare_url: FormControl<string | null | undefined>,
		contents_url: FormControl<string | null | undefined>,
		contributors_url: FormControl<string | null | undefined>,
		created_at: FormControl<string | null | undefined>,
		default_branch: FormControl<string | null | undefined>,
		delete_branch_on_merge: FormControl<boolean | null | undefined>,
		deployments_url: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,
		disabled: FormControl<boolean | null | undefined>,
		downloads_url: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		fork: FormControl<boolean | null | undefined>,
		forks_count: FormControl<number | null | undefined>,
		forks_url: FormControl<string | null | undefined>,
		full_name: FormControl<string | null | undefined>,
		git_commits_url: FormControl<string | null | undefined>,
		git_refs_url: FormControl<string | null | undefined>,
		git_tags_url: FormControl<string | null | undefined>,
		git_url: FormControl<string | null | undefined>,
		has_downloads: FormControl<boolean | null | undefined>,
		has_issues: FormControl<boolean | null | undefined>,
		has_pages: FormControl<boolean | null | undefined>,
		has_projects: FormControl<boolean | null | undefined>,
		has_wiki: FormControl<boolean | null | undefined>,
		homepage: FormControl<string | null | undefined>,
		hooks_url: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,
		issue_comment_url: FormControl<string | null | undefined>,
		issue_events_url: FormControl<string | null | undefined>,
		issues_url: FormControl<string | null | undefined>,
		keys_url: FormControl<string | null | undefined>,
		labels_url: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,
		languages_url: FormControl<string | null | undefined>,
		merges_url: FormControl<string | null | undefined>,
		milestones_url: FormControl<string | null | undefined>,
		mirror_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		network_count: FormControl<number | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		notifications_url: FormControl<string | null | undefined>,
		open_issues_count: FormControl<number | null | undefined>,
		private: FormControl<boolean | null | undefined>,
		pulls_url: FormControl<string | null | undefined>,
		pushed_at: FormControl<string | null | undefined>,
		releases_url: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		ssh_url: FormControl<string | null | undefined>,
		stargazers_count: FormControl<number | null | undefined>,
		stargazers_url: FormControl<string | null | undefined>,
		statuses_url: FormControl<string | null | undefined>,
		subscribers_count: FormControl<number | null | undefined>,
		subscribers_url: FormControl<string | null | undefined>,
		subscription_url: FormControl<string | null | undefined>,
		svn_url: FormControl<string | null | undefined>,
		tags_url: FormControl<string | null | undefined>,
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,
		trees_url: FormControl<string | null | undefined>,
		updated_at: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
		visibility: FormControl<string | null | undefined>,
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateRepositoryTemplate_repositoryFormGroup() {
		return new FormGroup<RepositoryTemplate_repositoryFormProperties>({
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_update_branch: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined),
			archived: new FormControl<boolean | null | undefined>(undefined),
			assignees_url: new FormControl<string | null | undefined>(undefined),
			blobs_url: new FormControl<string | null | undefined>(undefined),
			branches_url: new FormControl<string | null | undefined>(undefined),
			clone_url: new FormControl<string | null | undefined>(undefined),
			collaborators_url: new FormControl<string | null | undefined>(undefined),
			comments_url: new FormControl<string | null | undefined>(undefined),
			commits_url: new FormControl<string | null | undefined>(undefined),
			compare_url: new FormControl<string | null | undefined>(undefined),
			contents_url: new FormControl<string | null | undefined>(undefined),
			contributors_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			default_branch: new FormControl<string | null | undefined>(undefined),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			downloads_url: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			fork: new FormControl<boolean | null | undefined>(undefined),
			forks_count: new FormControl<number | null | undefined>(undefined),
			forks_url: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			git_commits_url: new FormControl<string | null | undefined>(undefined),
			git_refs_url: new FormControl<string | null | undefined>(undefined),
			git_tags_url: new FormControl<string | null | undefined>(undefined),
			git_url: new FormControl<string | null | undefined>(undefined),
			has_downloads: new FormControl<boolean | null | undefined>(undefined),
			has_issues: new FormControl<boolean | null | undefined>(undefined),
			has_pages: new FormControl<boolean | null | undefined>(undefined),
			has_projects: new FormControl<boolean | null | undefined>(undefined),
			has_wiki: new FormControl<boolean | null | undefined>(undefined),
			homepage: new FormControl<string | null | undefined>(undefined),
			hooks_url: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined),
			issue_events_url: new FormControl<string | null | undefined>(undefined),
			issues_url: new FormControl<string | null | undefined>(undefined),
			keys_url: new FormControl<string | null | undefined>(undefined),
			labels_url: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			languages_url: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined),
			milestones_url: new FormControl<string | null | undefined>(undefined),
			mirror_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			network_count: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			notifications_url: new FormControl<string | null | undefined>(undefined),
			open_issues_count: new FormControl<number | null | undefined>(undefined),
			private: new FormControl<boolean | null | undefined>(undefined),
			pulls_url: new FormControl<string | null | undefined>(undefined),
			pushed_at: new FormControl<string | null | undefined>(undefined),
			releases_url: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			ssh_url: new FormControl<string | null | undefined>(undefined),
			stargazers_count: new FormControl<number | null | undefined>(undefined),
			stargazers_url: new FormControl<string | null | undefined>(undefined),
			statuses_url: new FormControl<string | null | undefined>(undefined),
			subscribers_count: new FormControl<number | null | undefined>(undefined),
			subscribers_url: new FormControl<string | null | undefined>(undefined),
			subscription_url: new FormControl<string | null | undefined>(undefined),
			svn_url: new FormControl<string | null | undefined>(undefined),
			tags_url: new FormControl<string | null | undefined>(undefined),
			teams_url: new FormControl<string | null | undefined>(undefined),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RepositoryTemplate_repositoryOwner {
		avatar_url?: string | null;
		events_url?: string | null;
		followers_url?: string | null;
		following_url?: string | null;
		gists_url?: string | null;
		gravatar_id?: string | null;
		html_url?: string | null;
		id?: number | null;
		login?: string | null;
		node_id?: string | null;
		organizations_url?: string | null;
		received_events_url?: string | null;
		repos_url?: string | null;
		site_admin?: boolean | null;
		starred_url?: string | null;
		subscriptions_url?: string | null;
		type?: string | null;
		url?: string | null;
	}
	export interface RepositoryTemplate_repositoryOwnerFormProperties {
		avatar_url: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		followers_url: FormControl<string | null | undefined>,
		following_url: FormControl<string | null | undefined>,
		gists_url: FormControl<string | null | undefined>,
		gravatar_id: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		login: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		organizations_url: FormControl<string | null | undefined>,
		received_events_url: FormControl<string | null | undefined>,
		repos_url: FormControl<string | null | undefined>,
		site_admin: FormControl<boolean | null | undefined>,
		starred_url: FormControl<string | null | undefined>,
		subscriptions_url: FormControl<string | null | undefined>,
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateRepositoryTemplate_repositoryOwnerFormGroup() {
		return new FormGroup<RepositoryTemplate_repositoryOwnerFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			followers_url: new FormControl<string | null | undefined>(undefined),
			following_url: new FormControl<string | null | undefined>(undefined),
			gists_url: new FormControl<string | null | undefined>(undefined),
			gravatar_id: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			organizations_url: new FormControl<string | null | undefined>(undefined),
			received_events_url: new FormControl<string | null | undefined>(undefined),
			repos_url: new FormControl<string | null | undefined>(undefined),
			site_admin: new FormControl<boolean | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined),
			subscriptions_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RepositoryTemplate_repositoryPermissions {
		admin?: boolean | null;
		maintain?: boolean | null;
		pull?: boolean | null;
		push?: boolean | null;
		triage?: boolean | null;
	}
	export interface RepositoryTemplate_repositoryPermissionsFormProperties {
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,
		pull: FormControl<boolean | null | undefined>,
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateRepositoryTemplate_repositoryPermissionsFormGroup() {
		return new FormGroup<RepositoryTemplate_repositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined),
			push: new FormControl<boolean | null | undefined>(undefined),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum Authentication_tokenRepository_selection { all = 0, selected = 1 }


	/** How the author is associated with the repository. */
	export enum Author_association { COLLABORATOR = 0, CONTRIBUTOR = 1, FIRST_TIMER = 2, FIRST_TIME_CONTRIBUTOR = 3, MANNEQUIN = 4, MEMBER = 5, NONE = 6, OWNER = 7 }


	/** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
	export interface Authorization {

		/** Required */
		app: AuthorizationApp;

		/** Required */
		created_at: Date;

		/** Required */
		fingerprint: string;

		/** Required */
		hashed_token: string;

		/** Required */
		id: number;
		installation?: Nullable_scoped_installation;

		/** Required */
		note: string;

		/** Required */
		note_url: string;

		/**
		 * A list of scopes that this authorization is in.
		 * Required
		 */
		scopes: Array<string>;

		/** Required */
		token: string;

		/** Required */
		token_last_eight: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** Simple User */
		user?: Nullable_simple_user;
	}

	/** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
	export interface AuthorizationFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		fingerprint: FormControl<string | null | undefined>,

		/** Required */
		hashed_token: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		note: FormControl<string | null | undefined>,

		/** Required */
		note_url: FormControl<string | null | undefined>,

		/** Required */
		token: FormControl<string | null | undefined>,

		/** Required */
		token_last_eight: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateAuthorizationFormGroup() {
		return new FormGroup<AuthorizationFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			fingerprint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hashed_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			note_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			token_last_eight: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AuthorizationApp {

		/** Required */
		client_id: string;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}
	export interface AuthorizationAppFormProperties {

		/** Required */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateAuthorizationAppFormGroup() {
		return new FormGroup<AuthorizationAppFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_scoped_installation {

		/**
		 * Simple User
		 * Required
		 */
		account: Simple_user;
		has_multiple_single_files?: boolean | null;

		/**
		 * The permissions granted to the user-to-server access token.
		 * Required
		 */
		permissions: App_permissions;

		/** Required */
		repositories_url: string;

		/**
		 * Describe whether all repositories have been selected or there's a selection involved
		 * Required
		 */
		repository_selection: Authentication_tokenRepository_selection;

		/** Required */
		single_file_name: string;
		single_file_paths?: Array<string>;
	}
	export interface Nullable_scoped_installationFormProperties {
		has_multiple_single_files: FormControl<boolean | null | undefined>,

		/** Required */
		repositories_url: FormControl<string | null | undefined>,

		/**
		 * Describe whether all repositories have been selected or there's a selection involved
		 * Required
		 */
		repository_selection: FormControl<Authentication_tokenRepository_selection | null | undefined>,

		/** Required */
		single_file_name: FormControl<string | null | undefined>,
	}
	export function CreateNullable_scoped_installationFormGroup() {
		return new FormGroup<Nullable_scoped_installationFormProperties>({
			has_multiple_single_files: new FormControl<boolean | null | undefined>(undefined),
			repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_selection: new FormControl<Authentication_tokenRepository_selection | null | undefined>(undefined, [Validators.required]),
			single_file_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The status of auto merging a pull request. */
	export interface Auto_merge {

		/**
		 * Commit message for the merge commit.
		 * Required
		 */
		commit_message: string;

		/**
		 * Title for the merge commit message.
		 * Required
		 */
		commit_title: string;

		/**
		 * Simple User
		 * Required
		 */
		enabled_by: Simple_user;

		/**
		 * The merge method to use.
		 * Required
		 */
		merge_method: Auto_mergeMerge_method;
	}

	/** The status of auto merging a pull request. */
	export interface Auto_mergeFormProperties {

		/**
		 * Commit message for the merge commit.
		 * Required
		 */
		commit_message: FormControl<string | null | undefined>,

		/**
		 * Title for the merge commit message.
		 * Required
		 */
		commit_title: FormControl<string | null | undefined>,

		/**
		 * The merge method to use.
		 * Required
		 */
		merge_method: FormControl<Auto_mergeMerge_method | null | undefined>,
	}
	export function CreateAuto_mergeFormGroup() {
		return new FormGroup<Auto_mergeFormProperties>({
			commit_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merge_method: new FormControl<Auto_mergeMerge_method | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Auto_mergeMerge_method { merge = 0, squash = 1, rebase = 2 }


	/** Base Gist */
	export interface Base_gist {

		/** Required */
		comments: number;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/** Required */
		files: {[id: string]: Base_gistFiles };
		forks?: Array<string>;

		/** Required */
		forks_url: string;

		/** Required */
		git_pull_url: string;

		/** Required */
		git_push_url: string;
		history?: Array<string>;

		/** Required */
		html_url: string;

		/** Required */
		id: string;

		/** Required */
		node_id: string;

		/** Simple User */
		owner?: Simple_user;

		/** Required */
		public: boolean;
		truncated?: boolean | null;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Base Gist */
	export interface Base_gistFormProperties {

		/** Required */
		comments: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		files: FormControl<{[id: string]: Base_gistFiles } | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		git_pull_url: FormControl<string | null | undefined>,

		/** Required */
		git_push_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		public: FormControl<boolean | null | undefined>,
		truncated: FormControl<boolean | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateBase_gistFormGroup() {
		return new FormGroup<Base_gistFormProperties>({
			comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			files: new FormControl<{[id: string]: Base_gistFiles } | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_pull_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_push_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			truncated: new FormControl<boolean | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Base_gistFiles {
		filename?: string | null;
		language?: string | null;
		raw_url?: string | null;
		size?: number | null;
		type?: string | null;
	}
	export interface Base_gistFilesFormProperties {
		filename: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,
		raw_url: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		type: FormControl<string | null | undefined>,
	}
	export function CreateBase_gistFilesFormGroup() {
		return new FormGroup<Base_gistFilesFormProperties>({
			filename: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			raw_url: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Basic Error */
	export interface Basic_error {
		documentation_url?: string | null;
		message?: string | null;
		status?: string | null;
		url?: string | null;
	}

	/** Basic Error */
	export interface Basic_errorFormProperties {
		documentation_url: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		status: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateBasic_errorFormGroup() {
		return new FormGroup<Basic_errorFormProperties>({
			documentation_url: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Blob */
	export interface Blob {

		/** Required */
		content: string;

		/** Required */
		encoding: string;
		highlighted_content?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		url: string;
	}

	/** Blob */
	export interface BlobFormProperties {

		/** Required */
		content: FormControl<string | null | undefined>,

		/** Required */
		encoding: FormControl<string | null | undefined>,
		highlighted_content: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateBlobFormGroup() {
		return new FormGroup<BlobFormProperties>({
			content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			encoding: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			highlighted_content: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Branch Protection */
	export interface Branch_protection {
		allow_deletions?: Branch_protectionAllow_deletions;
		allow_force_pushes?: Branch_protectionAllow_force_pushes;
		block_creations?: Branch_protectionBlock_creations;
		enabled?: boolean | null;

		/** Protected Branch Admin Enforced */
		enforce_admins?: Protected_branch_admin_enforced;
		name?: string | null;
		protection_url?: string | null;
		required_conversation_resolution?: Branch_protectionRequired_conversation_resolution;
		required_linear_history?: Branch_protectionRequired_linear_history;

		/** Protected Branch Pull Request Review */
		required_pull_request_reviews?: Protected_branch_pull_request_review;
		required_signatures?: Branch_protectionRequired_signatures;

		/** Protected Branch Required Status Check */
		required_status_checks?: Protected_branch_required_status_check;

		/** Branch Restriction Policy */
		restrictions?: Branch_restriction_policy;
		url?: string | null;
	}

	/** Branch Protection */
	export interface Branch_protectionFormProperties {
		enabled: FormControl<boolean | null | undefined>,
		name: FormControl<string | null | undefined>,
		protection_url: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_protectionFormGroup() {
		return new FormGroup<Branch_protectionFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			protection_url: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Branch_protectionAllow_deletions {
		enabled?: boolean | null;
	}
	export interface Branch_protectionAllow_deletionsFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateBranch_protectionAllow_deletionsFormGroup() {
		return new FormGroup<Branch_protectionAllow_deletionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Branch_protectionAllow_force_pushes {
		enabled?: boolean | null;
	}
	export interface Branch_protectionAllow_force_pushesFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateBranch_protectionAllow_force_pushesFormGroup() {
		return new FormGroup<Branch_protectionAllow_force_pushesFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Branch_protectionBlock_creations {
		enabled?: boolean | null;
	}
	export interface Branch_protectionBlock_creationsFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateBranch_protectionBlock_creationsFormGroup() {
		return new FormGroup<Branch_protectionBlock_creationsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Protected Branch Admin Enforced */
	export interface Protected_branch_admin_enforced {

		/** Required */
		enabled: boolean;

		/** Required */
		url: string;
	}

	/** Protected Branch Admin Enforced */
	export interface Protected_branch_admin_enforcedFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branch_admin_enforcedFormGroup() {
		return new FormGroup<Protected_branch_admin_enforcedFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Branch_protectionRequired_conversation_resolution {
		enabled?: boolean | null;
	}
	export interface Branch_protectionRequired_conversation_resolutionFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateBranch_protectionRequired_conversation_resolutionFormGroup() {
		return new FormGroup<Branch_protectionRequired_conversation_resolutionFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Branch_protectionRequired_linear_history {
		enabled?: boolean | null;
	}
	export interface Branch_protectionRequired_linear_historyFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateBranch_protectionRequired_linear_historyFormGroup() {
		return new FormGroup<Branch_protectionRequired_linear_historyFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Protected Branch Pull Request Review */
	export interface Protected_branch_pull_request_review {

		/** Required */
		dismiss_stale_reviews: boolean;
		dismissal_restrictions?: Protected_branch_pull_request_reviewDismissal_restrictions;

		/** Required */
		require_code_owner_reviews: boolean;

		/**
		 * Minimum: 1
		 * Maximum: 6
		 */
		required_approving_review_count?: number | null;
		url?: string | null;
	}

	/** Protected Branch Pull Request Review */
	export interface Protected_branch_pull_request_reviewFormProperties {

		/** Required */
		dismiss_stale_reviews: FormControl<boolean | null | undefined>,

		/** Required */
		require_code_owner_reviews: FormControl<boolean | null | undefined>,

		/**
		 * Minimum: 1
		 * Maximum: 6
		 */
		required_approving_review_count: FormControl<number | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branch_pull_request_reviewFormGroup() {
		return new FormGroup<Protected_branch_pull_request_reviewFormProperties>({
			dismiss_stale_reviews: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			require_code_owner_reviews: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			required_approving_review_count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(6)]),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Protected_branch_pull_request_reviewDismissal_restrictions {

		/** The list of apps with review dismissal access. */
		apps?: Array<Integration>;

		/** The list of teams with review dismissal access. */
		teams?: Array<Team>;
		teams_url?: string | null;
		url?: string | null;

		/** The list of users with review dismissal access. */
		users?: Array<Simple_user>;
		users_url?: string | null;
	}
	export interface Protected_branch_pull_request_reviewDismissal_restrictionsFormProperties {
		teams_url: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
		users_url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branch_pull_request_reviewDismissal_restrictionsFormGroup() {
		return new FormGroup<Protected_branch_pull_request_reviewDismissal_restrictionsFormProperties>({
			teams_url: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			users_url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Team {

		/** Required */
		description: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		members_url: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Groups of organization members that gives permissions on specified repositories.
		 * Required
		 */
		parent: Nullable_team_simple;

		/** Required */
		permission: string;
		permissions?: TeamPermissions;
		privacy?: string | null;

		/** Required */
		repositories_url: string;

		/** Required */
		slug: string;

		/** Required */
		url: string;
	}

	/** Groups of organization members that gives permissions on specified repositories. */
	export interface TeamFormProperties {

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		members_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		permission: FormControl<string | null | undefined>,
		privacy: FormControl<string | null | undefined>,

		/** Required */
		repositories_url: FormControl<string | null | undefined>,

		/** Required */
		slug: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeamFormGroup() {
		return new FormGroup<TeamFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			permission: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			privacy: new FormControl<string | null | undefined>(undefined),
			repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slug: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Nullable_team_simple {

		/**
		 * Description of the team
		 * Required
		 */
		description: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the team
		 * Required
		 */
		id: number;

		/** Distinguished Name (DN) that team maps to within LDAP environment */
		ldap_dn?: string | null;

		/** Required */
		members_url: string;

		/**
		 * Name of the team
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Permission that the team will have for its repositories
		 * Required
		 */
		permission: string;

		/** The level of privacy this team should have */
		privacy?: string | null;

		/** Required */
		repositories_url: string;

		/** Required */
		slug: string;

		/**
		 * URL for the team
		 * Required
		 */
		url: string;
	}

	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Nullable_team_simpleFormProperties {

		/**
		 * Description of the team
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the team
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Distinguished Name (DN) that team maps to within LDAP environment */
		ldap_dn: FormControl<string | null | undefined>,

		/** Required */
		members_url: FormControl<string | null | undefined>,

		/**
		 * Name of the team
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Permission that the team will have for its repositories
		 * Required
		 */
		permission: FormControl<string | null | undefined>,

		/** The level of privacy this team should have */
		privacy: FormControl<string | null | undefined>,

		/** Required */
		repositories_url: FormControl<string | null | undefined>,

		/** Required */
		slug: FormControl<string | null | undefined>,

		/**
		 * URL for the team
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_team_simpleFormGroup() {
		return new FormGroup<Nullable_team_simpleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			permission: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			privacy: new FormControl<string | null | undefined>(undefined),
			repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slug: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamPermissions {

		/** Required */
		admin: boolean;

		/** Required */
		maintain: boolean;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;

		/** Required */
		triage: boolean;
	}
	export interface TeamPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,

		/** Required */
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,

		/** Required */
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateTeamPermissionsFormGroup() {
		return new FormGroup<TeamPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Branch_protectionRequired_signatures {

		/** Required */
		enabled: boolean;

		/** Required */
		url: string;
	}
	export interface Branch_protectionRequired_signaturesFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_protectionRequired_signaturesFormGroup() {
		return new FormGroup<Branch_protectionRequired_signaturesFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Protected Branch Required Status Check */
	export interface Protected_branch_required_status_check {

		/** Required */
		contexts: Array<string>;
		contexts_url?: string | null;
		enforcement_level?: string | null;
		strict?: boolean | null;
		url?: string | null;
	}

	/** Protected Branch Required Status Check */
	export interface Protected_branch_required_status_checkFormProperties {
		contexts_url: FormControl<string | null | undefined>,
		enforcement_level: FormControl<string | null | undefined>,
		strict: FormControl<boolean | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branch_required_status_checkFormGroup() {
		return new FormGroup<Protected_branch_required_status_checkFormProperties>({
			contexts_url: new FormControl<string | null | undefined>(undefined),
			enforcement_level: new FormControl<string | null | undefined>(undefined),
			strict: new FormControl<boolean | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Branch Restriction Policy */
	export interface Branch_restriction_policy {

		/** Required */
		Branch_restriction_policyApps: Array<Branch_restriction_policyApps>;

		/** Required */
		apps_url: string;

		/** Required */
		Branch_restriction_policyTeams: Array<Branch_restriction_policyTeams>;

		/** Required */
		teams_url: string;

		/** Required */
		url: string;

		/** Required */
		Branch_restriction_policyUsers: Array<Branch_restriction_policyUsers>;

		/** Required */
		users_url: string;
	}

	/** Branch Restriction Policy */
	export interface Branch_restriction_policyFormProperties {

		/** Required */
		apps_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		users_url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_restriction_policyFormGroup() {
		return new FormGroup<Branch_restriction_policyFormProperties>({
			apps_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			users_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Branch_restriction_policyApps {
		created_at?: string | null;
		description?: string | null;
		events?: Array<string>;
		external_url?: string | null;
		html_url?: string | null;
		id?: number | null;
		name?: string | null;
		node_id?: string | null;
		owner?: Branch_restriction_policyAppsOwner;
		permissions?: Branch_restriction_policyAppsPermissions;
		slug?: string | null;
		updated_at?: string | null;
	}
	export interface Branch_restriction_policyAppsFormProperties {
		created_at: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,
		external_url: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		slug: FormControl<string | null | undefined>,
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateBranch_restriction_policyAppsFormGroup() {
		return new FormGroup<Branch_restriction_policyAppsFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			external_url: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			slug: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Branch_restriction_policyAppsOwner {
		avatar_url?: string | null;
		description?: string | null;
		events_url?: string | null;
		followers_url?: string | null;
		following_url?: string | null;
		gists_url?: string | null;
		gravatar_id?: string | null;
		hooks_url?: string | null;
		html_url?: string | null;
		id?: number | null;
		issues_url?: string | null;
		login?: string | null;
		members_url?: string | null;
		node_id?: string | null;
		organizations_url?: string | null;
		public_members_url?: string | null;
		received_events_url?: string | null;
		repos_url?: string | null;
		site_admin?: boolean | null;
		starred_url?: string | null;
		subscriptions_url?: string | null;
		type?: string | null;
		url?: string | null;
	}
	export interface Branch_restriction_policyAppsOwnerFormProperties {
		avatar_url: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		followers_url: FormControl<string | null | undefined>,
		following_url: FormControl<string | null | undefined>,
		gists_url: FormControl<string | null | undefined>,
		gravatar_id: FormControl<string | null | undefined>,
		hooks_url: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		issues_url: FormControl<string | null | undefined>,
		login: FormControl<string | null | undefined>,
		members_url: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		organizations_url: FormControl<string | null | undefined>,
		public_members_url: FormControl<string | null | undefined>,
		received_events_url: FormControl<string | null | undefined>,
		repos_url: FormControl<string | null | undefined>,
		site_admin: FormControl<boolean | null | undefined>,
		starred_url: FormControl<string | null | undefined>,
		subscriptions_url: FormControl<string | null | undefined>,
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_restriction_policyAppsOwnerFormGroup() {
		return new FormGroup<Branch_restriction_policyAppsOwnerFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			followers_url: new FormControl<string | null | undefined>(undefined),
			following_url: new FormControl<string | null | undefined>(undefined),
			gists_url: new FormControl<string | null | undefined>(undefined),
			gravatar_id: new FormControl<string | null | undefined>(undefined),
			hooks_url: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			issues_url: new FormControl<string | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined),
			members_url: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			organizations_url: new FormControl<string | null | undefined>(undefined),
			public_members_url: new FormControl<string | null | undefined>(undefined),
			received_events_url: new FormControl<string | null | undefined>(undefined),
			repos_url: new FormControl<string | null | undefined>(undefined),
			site_admin: new FormControl<boolean | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined),
			subscriptions_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Branch_restriction_policyAppsPermissions {
		contents?: string | null;
		issues?: string | null;
		metadata?: string | null;
		single_file?: string | null;
	}
	export interface Branch_restriction_policyAppsPermissionsFormProperties {
		contents: FormControl<string | null | undefined>,
		issues: FormControl<string | null | undefined>,
		metadata: FormControl<string | null | undefined>,
		single_file: FormControl<string | null | undefined>,
	}
	export function CreateBranch_restriction_policyAppsPermissionsFormGroup() {
		return new FormGroup<Branch_restriction_policyAppsPermissionsFormProperties>({
			contents: new FormControl<string | null | undefined>(undefined),
			issues: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<string | null | undefined>(undefined),
			single_file: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Branch_restriction_policyTeams {
		description?: string | null;
		html_url?: string | null;
		id?: number | null;
		members_url?: string | null;
		name?: string | null;
		node_id?: string | null;
		parent?: string | null;
		permission?: string | null;
		privacy?: string | null;
		repositories_url?: string | null;
		slug?: string | null;
		url?: string | null;
	}
	export interface Branch_restriction_policyTeamsFormProperties {
		description: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		members_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		parent: FormControl<string | null | undefined>,
		permission: FormControl<string | null | undefined>,
		privacy: FormControl<string | null | undefined>,
		repositories_url: FormControl<string | null | undefined>,
		slug: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_restriction_policyTeamsFormGroup() {
		return new FormGroup<Branch_restriction_policyTeamsFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			members_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			parent: new FormControl<string | null | undefined>(undefined),
			permission: new FormControl<string | null | undefined>(undefined),
			privacy: new FormControl<string | null | undefined>(undefined),
			repositories_url: new FormControl<string | null | undefined>(undefined),
			slug: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Branch_restriction_policyUsers {
		avatar_url?: string | null;
		events_url?: string | null;
		followers_url?: string | null;
		following_url?: string | null;
		gists_url?: string | null;
		gravatar_id?: string | null;
		html_url?: string | null;
		id?: number | null;
		login?: string | null;
		node_id?: string | null;
		organizations_url?: string | null;
		received_events_url?: string | null;
		repos_url?: string | null;
		site_admin?: boolean | null;
		starred_url?: string | null;
		subscriptions_url?: string | null;
		type?: string | null;
		url?: string | null;
	}
	export interface Branch_restriction_policyUsersFormProperties {
		avatar_url: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		followers_url: FormControl<string | null | undefined>,
		following_url: FormControl<string | null | undefined>,
		gists_url: FormControl<string | null | undefined>,
		gravatar_id: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		login: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		organizations_url: FormControl<string | null | undefined>,
		received_events_url: FormControl<string | null | undefined>,
		repos_url: FormControl<string | null | undefined>,
		site_admin: FormControl<boolean | null | undefined>,
		starred_url: FormControl<string | null | undefined>,
		subscriptions_url: FormControl<string | null | undefined>,
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_restriction_policyUsersFormGroup() {
		return new FormGroup<Branch_restriction_policyUsersFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			followers_url: new FormControl<string | null | undefined>(undefined),
			following_url: new FormControl<string | null | undefined>(undefined),
			gists_url: new FormControl<string | null | undefined>(undefined),
			gravatar_id: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			organizations_url: new FormControl<string | null | undefined>(undefined),
			received_events_url: new FormControl<string | null | undefined>(undefined),
			repos_url: new FormControl<string | null | undefined>(undefined),
			site_admin: new FormControl<boolean | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined),
			subscriptions_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Branch Short */
	export interface Branch_short {

		/** Required */
		commit: Branch_shortCommit;

		/** Required */
		name: string;

		/** Required */
		protected: boolean;
	}

	/** Branch Short */
	export interface Branch_shortFormProperties {

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		protected: FormControl<boolean | null | undefined>,
	}
	export function CreateBranch_shortFormGroup() {
		return new FormGroup<Branch_shortFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			protected: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Branch_shortCommit {

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Branch_shortCommitFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateBranch_shortCommitFormGroup() {
		return new FormGroup<Branch_shortCommitFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Branch With Protection */
	export interface Branch_with_protection {

		/** Required */
		_links: Branch_with_protection_links;

		/**
		 * Commit
		 * Required
		 */
		commit: Commit;

		/** Required */
		name: string;
		pattern?: string | null;

		/** Required */
		protected: boolean;

		/**
		 * Branch Protection
		 * Required
		 */
		protection: Branch_protection;

		/** Required */
		protection_url: string;
		required_approving_review_count?: number | null;
	}

	/** Branch With Protection */
	export interface Branch_with_protectionFormProperties {

		/** Required */
		name: FormControl<string | null | undefined>,
		pattern: FormControl<string | null | undefined>,

		/** Required */
		protected: FormControl<boolean | null | undefined>,

		/** Required */
		protection_url: FormControl<string | null | undefined>,
		required_approving_review_count: FormControl<number | null | undefined>,
	}
	export function CreateBranch_with_protectionFormGroup() {
		return new FormGroup<Branch_with_protectionFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pattern: new FormControl<string | null | undefined>(undefined),
			protected: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			protection_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			required_approving_review_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Branch_with_protection_links {

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Branch_with_protection_linksFormProperties {

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateBranch_with_protection_linksFormGroup() {
		return new FormGroup<Branch_with_protection_linksFormProperties>({
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Commit */
	export interface Commit {

		/**
		 * Simple User
		 * Required
		 */
		author: Nullable_simple_user;

		/** Required */
		comments_url: string;

		/** Required */
		commit: CommitCommit;

		/**
		 * Simple User
		 * Required
		 */
		committer: Nullable_simple_user;
		files?: Array<Diff_entry>;

		/** Required */
		html_url: string;

		/** Required */
		node_id: string;

		/** Required */
		CommitParents: Array<CommitParents>;

		/** Required */
		sha: string;
		stats?: CommitStats;

		/** Required */
		url: string;
	}

	/** Commit */
	export interface CommitFormProperties {

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommitFormGroup() {
		return new FormGroup<CommitFormProperties>({
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CommitCommit {

		/**
		 * Metaproperties for Git author/committer information.
		 * Required
		 */
		author: Nullable_git_user;

		/** Required */
		comment_count: number;

		/**
		 * Metaproperties for Git author/committer information.
		 * Required
		 */
		committer: Nullable_git_user;

		/** Required */
		message: string;

		/** Required */
		tree: CommitCommitTree;

		/** Required */
		url: string;
		verification?: Verification;
	}
	export interface CommitCommitFormProperties {

		/** Required */
		comment_count: FormControl<number | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommitCommitFormGroup() {
		return new FormGroup<CommitCommitFormProperties>({
			comment_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metaproperties for Git author/committer information. */
	export interface Nullable_git_user {
		date?: string | null;
		email?: string | null;
		name?: string | null;
	}

	/** Metaproperties for Git author/committer information. */
	export interface Nullable_git_userFormProperties {
		date: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateNullable_git_userFormGroup() {
		return new FormGroup<Nullable_git_userFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitCommitTree {

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}
	export interface CommitCommitTreeFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommitCommitTreeFormGroup() {
		return new FormGroup<CommitCommitTreeFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Verification {

		/** Required */
		payload: string;

		/** Required */
		reason: string;

		/** Required */
		signature: string;

		/** Required */
		verified: boolean;
	}
	export interface VerificationFormProperties {

		/** Required */
		payload: FormControl<string | null | undefined>,

		/** Required */
		reason: FormControl<string | null | undefined>,

		/** Required */
		signature: FormControl<string | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateVerificationFormGroup() {
		return new FormGroup<VerificationFormProperties>({
			payload: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			signature: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Diff Entry */
	export interface Diff_entry {

		/** Required */
		additions: number;

		/** Required */
		blob_url: string;

		/** Required */
		changes: number;

		/** Required */
		contents_url: string;

		/** Required */
		deletions: number;

		/** Required */
		filename: string;
		patch?: string | null;
		previous_filename?: string | null;

		/** Required */
		raw_url: string;

		/** Required */
		sha: string;

		/** Required */
		status: Diff_entryStatus;
	}

	/** Diff Entry */
	export interface Diff_entryFormProperties {

		/** Required */
		additions: FormControl<number | null | undefined>,

		/** Required */
		blob_url: FormControl<string | null | undefined>,

		/** Required */
		changes: FormControl<number | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		deletions: FormControl<number | null | undefined>,

		/** Required */
		filename: FormControl<string | null | undefined>,
		patch: FormControl<string | null | undefined>,
		previous_filename: FormControl<string | null | undefined>,

		/** Required */
		raw_url: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		status: FormControl<Diff_entryStatus | null | undefined>,
	}
	export function CreateDiff_entryFormGroup() {
		return new FormGroup<Diff_entryFormProperties>({
			additions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			blob_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			changes: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deletions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			filename: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			patch: new FormControl<string | null | undefined>(undefined),
			previous_filename: new FormControl<string | null | undefined>(undefined),
			raw_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Diff_entryStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Diff_entryStatus { added = 0, removed = 1, modified = 2, renamed = 3, copied = 4, changed = 5, unchanged = 6 }

	export interface CommitParents {
		html_url?: string | null;

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}
	export interface CommitParentsFormProperties {
		html_url: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommitParentsFormGroup() {
		return new FormGroup<CommitParentsFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CommitStats {
		additions?: number | null;
		deletions?: number | null;
		total?: number | null;
	}
	export interface CommitStatsFormProperties {
		additions: FormControl<number | null | undefined>,
		deletions: FormControl<number | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateCommitStatsFormGroup() {
		return new FormGroup<CommitStatsFormProperties>({
			additions: new FormControl<number | null | undefined>(undefined),
			deletions: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Check Annotation */
	export interface Check_annotation {

		/** Required */
		annotation_level: string;

		/** Required */
		blob_href: string;

		/** Required */
		end_column: number;

		/** Required */
		end_line: number;

		/** Required */
		message: string;

		/** Required */
		path: string;

		/** Required */
		raw_details: string;

		/** Required */
		start_column: number;

		/** Required */
		start_line: number;

		/** Required */
		title: string;
	}

	/** Check Annotation */
	export interface Check_annotationFormProperties {

		/** Required */
		annotation_level: FormControl<string | null | undefined>,

		/** Required */
		blob_href: FormControl<string | null | undefined>,

		/** Required */
		end_column: FormControl<number | null | undefined>,

		/** Required */
		end_line: FormControl<number | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		raw_details: FormControl<string | null | undefined>,

		/** Required */
		start_column: FormControl<number | null | undefined>,

		/** Required */
		start_line: FormControl<number | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,
	}
	export function CreateCheck_annotationFormGroup() {
		return new FormGroup<Check_annotationFormProperties>({
			annotation_level: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blob_href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			end_column: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			end_line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			raw_details: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			start_column: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			start_line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A check performed on the code of a given code change */
	export interface Check_run {

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		app: Nullable_integration;

		/** Required */
		check_suite: Check_runCheck_suite;

		/** Required */
		completed_at: Date;

		/** Required */
		conclusion: Check_runConclusion;

		/** A deployment created as the result of an Actions check run from a workflow that references an environment */
		deployment?: Deployment_simple;

		/** Required */
		details_url: string;

		/** Required */
		external_id: string;

		/**
		 * The SHA of the commit that is being checked.
		 * Required
		 */
		head_sha: string;

		/** Required */
		html_url: string;

		/**
		 * The id of the check.
		 * Required
		 */
		id: number;

		/**
		 * The name of the check.
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		output: Check_runOutput;

		/** Required */
		pull_requests: Array<Pull_request_minimal>;

		/** Required */
		started_at: Date;

		/**
		 * The phase of the lifecycle that the check is currently in.
		 * Required
		 */
		status: Check_runStatus;

		/** Required */
		url: string;
	}

	/** A check performed on the code of a given code change */
	export interface Check_runFormProperties {

		/** Required */
		completed_at: FormControl<Date | null | undefined>,

		/** Required */
		conclusion: FormControl<Check_runConclusion | null | undefined>,

		/** Required */
		details_url: FormControl<string | null | undefined>,

		/** Required */
		external_id: FormControl<string | null | undefined>,

		/**
		 * The SHA of the commit that is being checked.
		 * Required
		 */
		head_sha: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * The id of the check.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of the check.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		started_at: FormControl<Date | null | undefined>,

		/**
		 * The phase of the lifecycle that the check is currently in.
		 * Required
		 */
		status: FormControl<Check_runStatus | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCheck_runFormGroup() {
		return new FormGroup<Check_runFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			conclusion: new FormControl<Check_runConclusion | null | undefined>(undefined, [Validators.required]),
			details_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			external_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			head_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			started_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Check_runStatus | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_runCheck_suite {

		/** Required */
		id: number;
	}
	export interface Check_runCheck_suiteFormProperties {

		/** Required */
		id: FormControl<number | null | undefined>,
	}
	export function CreateCheck_runCheck_suiteFormGroup() {
		return new FormGroup<Check_runCheck_suiteFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_runConclusion { success = 0, failure = 1, neutral = 2, cancelled = 3, skipped = 4, timed_out = 5, action_required = 6 }


	/** A deployment created as the result of an Actions check run from a workflow that references an environment */
	export interface Deployment_simple {

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/**
		 * Name for the target deployment environment.
		 * Required
		 */
		environment: string;

		/**
		 * Unique identifier of the deployment
		 * Required
		 */
		id: number;

		/** Required */
		node_id: string;
		original_environment?: string | null;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;

		/** Specifies if the given environment is one that end-users directly interact with. Default: false. */
		production_environment?: boolean | null;

		/** Required */
		repository_url: string;

		/** Required */
		statuses_url: string;

		/**
		 * Parameter to specify a task to execute
		 * Required
		 */
		task: string;

		/** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
		transient_environment?: boolean | null;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A deployment created as the result of an Actions check run from a workflow that references an environment */
	export interface Deployment_simpleFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Name for the target deployment environment.
		 * Required
		 */
		environment: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the deployment
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		original_environment: FormControl<string | null | undefined>,

		/** Specifies if the given environment is one that end-users directly interact with. Default: false. */
		production_environment: FormControl<boolean | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/**
		 * Parameter to specify a task to execute
		 * Required
		 */
		task: FormControl<string | null | undefined>,

		/** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
		transient_environment: FormControl<boolean | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateDeployment_simpleFormGroup() {
		return new FormGroup<Deployment_simpleFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_environment: new FormControl<string | null | undefined>(undefined),
			production_environment: new FormControl<boolean | null | undefined>(undefined),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			task: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transient_environment: new FormControl<boolean | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_runOutput {

		/** Required */
		annotations_count: number;

		/** Required */
		annotations_url: string;

		/** Required */
		summary: string;

		/** Required */
		text: string;

		/** Required */
		title: string;
	}
	export interface Check_runOutputFormProperties {

		/** Required */
		annotations_count: FormControl<number | null | undefined>,

		/** Required */
		annotations_url: FormControl<string | null | undefined>,

		/** Required */
		summary: FormControl<string | null | undefined>,

		/** Required */
		text: FormControl<string | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,
	}
	export function CreateCheck_runOutputFormGroup() {
		return new FormGroup<Check_runOutputFormProperties>({
			annotations_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			annotations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			summary: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			text: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_minimal {

		/** Required */
		base: Pull_request_minimalBase;

		/** Required */
		head: Pull_request_minimalHead;

		/** Required */
		id: number;

		/** Required */
		number: number;

		/** Required */
		url: string;
	}
	export interface Pull_request_minimalFormProperties {

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_minimalFormGroup() {
		return new FormGroup<Pull_request_minimalFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_minimalBase {

		/** Required */
		ref: string;

		/** Required */
		repo: Pull_request_minimalBaseRepo;

		/** Required */
		sha: string;
	}
	export interface Pull_request_minimalBaseFormProperties {

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_minimalBaseFormGroup() {
		return new FormGroup<Pull_request_minimalBaseFormProperties>({
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_minimalBaseRepo {

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}
	export interface Pull_request_minimalBaseRepoFormProperties {

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_minimalBaseRepoFormGroup() {
		return new FormGroup<Pull_request_minimalBaseRepoFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_minimalHead {

		/** Required */
		ref: string;

		/** Required */
		repo: Pull_request_minimalHeadRepo;

		/** Required */
		sha: string;
	}
	export interface Pull_request_minimalHeadFormProperties {

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_minimalHeadFormGroup() {
		return new FormGroup<Pull_request_minimalHeadFormProperties>({
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_minimalHeadRepo {

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}
	export interface Pull_request_minimalHeadRepoFormProperties {

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_minimalHeadRepoFormGroup() {
		return new FormGroup<Pull_request_minimalHeadRepoFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_runStatus { queued = 0, in_progress = 1, completed = 2 }


	/** A suite of checks performed on the code of a given code change */
	export interface Check_suite {

		/** Required */
		after: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		app: Nullable_integration;

		/** Required */
		before: string;

		/** Required */
		check_runs_url: string;

		/** Required */
		conclusion: Check_runConclusion;

		/** Required */
		created_at: Date;

		/** Required */
		head_branch: string;

		/**
		 * Simple Commit
		 * Required
		 */
		head_commit: Simple_commit;

		/**
		 * The SHA of the head commit that is being checked.
		 * Required
		 */
		head_sha: string;

		/** Required */
		id: number;

		/** Required */
		latest_check_runs_count: number;

		/** Required */
		node_id: string;

		/** Required */
		pull_requests: Array<Pull_request_minimal>;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;
		rerequestable?: boolean | null;
		runs_rerequestable?: boolean | null;

		/** Required */
		status: Check_runStatus;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A suite of checks performed on the code of a given code change */
	export interface Check_suiteFormProperties {

		/** Required */
		after: FormControl<string | null | undefined>,

		/** Required */
		before: FormControl<string | null | undefined>,

		/** Required */
		check_runs_url: FormControl<string | null | undefined>,

		/** Required */
		conclusion: FormControl<Check_runConclusion | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		head_branch: FormControl<string | null | undefined>,

		/**
		 * The SHA of the head commit that is being checked.
		 * Required
		 */
		head_sha: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		latest_check_runs_count: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		rerequestable: FormControl<boolean | null | undefined>,
		runs_rerequestable: FormControl<boolean | null | undefined>,

		/** Required */
		status: FormControl<Check_runStatus | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCheck_suiteFormGroup() {
		return new FormGroup<Check_suiteFormProperties>({
			after: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			before: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_runs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			conclusion: new FormControl<Check_runConclusion | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			head_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			head_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			latest_check_runs_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rerequestable: new FormControl<boolean | null | undefined>(undefined),
			runs_rerequestable: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<Check_runStatus | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Simple Commit */
	export interface Simple_commit {

		/** Required */
		author: Simple_commitAuthor;

		/** Required */
		committer: Simple_commitCommitter;

		/** Required */
		id: string;

		/** Required */
		message: string;

		/** Required */
		timestamp: Date;

		/** Required */
		tree_id: string;
	}

	/** Simple Commit */
	export interface Simple_commitFormProperties {

		/** Required */
		id: FormControl<string | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		timestamp: FormControl<Date | null | undefined>,

		/** Required */
		tree_id: FormControl<string | null | undefined>,
	}
	export function CreateSimple_commitFormGroup() {
		return new FormGroup<Simple_commitFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			tree_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simple_commitAuthor {

		/** Required */
		email: string;

		/** Required */
		name: string;
	}
	export interface Simple_commitAuthorFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateSimple_commitAuthorFormGroup() {
		return new FormGroup<Simple_commitAuthorFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simple_commitCommitter {

		/** Required */
		email: string;

		/** Required */
		name: string;
	}
	export interface Simple_commitCommitterFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateSimple_commitCommitterFormGroup() {
		return new FormGroup<Simple_commitCommitterFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Minimal Repository */
	export interface Minimal_repository {
		allow_forking?: boolean | null;

		/** Required */
		archive_url: string;
		archived?: boolean | null;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;
		clone_url?: string | null;

		/** Code Of Conduct */
		code_of_conduct?: Code_of_conduct;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;
		created_at?: Date | null;
		default_branch?: string | null;
		delete_branch_on_merge?: boolean | null;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;
		disabled?: boolean | null;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;
		forks?: number | null;
		forks_count?: number | null;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;
		git_url?: string | null;
		has_downloads?: boolean | null;
		has_issues?: boolean | null;
		has_pages?: boolean | null;
		has_projects?: boolean | null;
		has_wiki?: boolean | null;
		homepage?: string | null;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;
		language?: string | null;

		/** Required */
		languages_url: string;
		license?: Minimal_repositoryLicense;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;
		mirror_url?: string | null;

		/** Required */
		name: string;
		network_count?: number | null;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;
		open_issues?: number | null;
		open_issues_count?: number | null;

		/**
		 * Simple User
		 * Required
		 */
		owner: Simple_user;
		permissions?: Minimal_repositoryPermissions;

		/** Required */
		private: boolean;

		/** Required */
		pulls_url: string;
		pushed_at?: Date | null;

		/** Required */
		releases_url: string;
		size?: number | null;
		ssh_url?: string | null;
		stargazers_count?: number | null;

		/** Required */
		stargazers_url: string;

		/** Required */
		statuses_url: string;
		subscribers_count?: number | null;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;
		svn_url?: string | null;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;

		/** A git repository */
		template_repository?: Nullable_repository;
		topics?: Array<string>;

		/** Required */
		trees_url: string;
		updated_at?: Date | null;

		/** Required */
		url: string;
		visibility?: string | null;
		watchers?: number | null;
		watchers_count?: number | null;
	}

	/** Minimal Repository */
	export interface Minimal_repositoryFormProperties {
		allow_forking: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,
		created_at: FormControl<Date | null | undefined>,
		default_branch: FormControl<string | null | undefined>,
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,
		forks: FormControl<number | null | undefined>,
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,
		git_url: FormControl<string | null | undefined>,
		has_downloads: FormControl<boolean | null | undefined>,
		has_issues: FormControl<boolean | null | undefined>,
		has_pages: FormControl<boolean | null | undefined>,
		has_projects: FormControl<boolean | null | undefined>,
		has_wiki: FormControl<boolean | null | undefined>,
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,
		mirror_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
		network_count: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,
		open_issues: FormControl<number | null | undefined>,
		open_issues_count: FormControl<number | null | undefined>,

		/** Required */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		ssh_url: FormControl<string | null | undefined>,
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,
		subscribers_count: FormControl<number | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
		visibility: FormControl<string | null | undefined>,
		watchers: FormControl<number | null | undefined>,
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateMinimal_repositoryFormGroup() {
		return new FormGroup<Minimal_repositoryFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined),
			default_branch: new FormControl<string | null | undefined>(undefined),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined),
			forks_count: new FormControl<number | null | undefined>(undefined),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined),
			has_downloads: new FormControl<boolean | null | undefined>(undefined),
			has_issues: new FormControl<boolean | null | undefined>(undefined),
			has_pages: new FormControl<boolean | null | undefined>(undefined),
			has_projects: new FormControl<boolean | null | undefined>(undefined),
			has_wiki: new FormControl<boolean | null | undefined>(undefined),
			homepage: new FormControl<string | null | undefined>(undefined),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network_count: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined),
			open_issues_count: new FormControl<number | null | undefined>(undefined),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined),
			ssh_url: new FormControl<string | null | undefined>(undefined),
			stargazers_count: new FormControl<number | null | undefined>(undefined),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_count: new FormControl<number | null | undefined>(undefined),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined),
			watchers_count: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Code Of Conduct */
	export interface Code_of_conduct {
		body?: string | null;

		/** Required */
		html_url: string;

		/** Required */
		key: string;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}

	/** Code Of Conduct */
	export interface Code_of_conductFormProperties {
		body: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCode_of_conductFormGroup() {
		return new FormGroup<Code_of_conductFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Minimal_repositoryLicense {
		key?: string | null;
		name?: string | null;
		node_id?: string | null;
		spdx_id?: string | null;
		url?: string | null;
	}
	export interface Minimal_repositoryLicenseFormProperties {
		key: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		spdx_id: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateMinimal_repositoryLicenseFormGroup() {
		return new FormGroup<Minimal_repositoryLicenseFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			spdx_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Minimal_repositoryPermissions {
		admin?: boolean | null;
		maintain?: boolean | null;
		pull?: boolean | null;
		push?: boolean | null;
		triage?: boolean | null;
	}
	export interface Minimal_repositoryPermissionsFormProperties {
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,
		pull: FormControl<boolean | null | undefined>,
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateMinimal_repositoryPermissionsFormGroup() {
		return new FormGroup<Minimal_repositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined),
			push: new FormControl<boolean | null | undefined>(undefined),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A git repository */
	export interface Nullable_repository {

		/** Whether to allow forking this repo */
		allow_forking?: boolean | null;

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit?: boolean | null;

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge?: boolean | null;

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge?: boolean | null;

		/** Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging. */
		allow_update_branch?: boolean | null;

		/** Required */
		archive_url: string;

		/**
		 * Whether the repository is archived.
		 * Required
		 */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/**
		 * The default branch of the repository.
		 * Required
		 */
		default_branch: string;

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge?: boolean | null;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/**
		 * Whether downloads are enabled.
		 * Required
		 */
		has_downloads: boolean;

		/**
		 * Whether issues are enabled.
		 * Required
		 */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/**
		 * Whether projects are enabled.
		 * Required
		 */
		has_projects: boolean;

		/**
		 * Whether the wiki is enabled.
		 * Required
		 */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the repository
		 * Required
		 */
		id: number;

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/**
		 * The name of the repository.
		 * Required
		 */
		name: string;
		network_count?: number | null;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/** Simple User */
		organization?: Nullable_simple_user;

		/**
		 * Simple User
		 * Required
		 */
		owner: Simple_user;
		permissions?: Nullable_repositoryPermissions;

		/**
		 * Whether the repository is private or public.
		 * Required
		 */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		size: number;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;
		starred_at?: string | null;

		/** Required */
		statuses_url: string;
		subscribers_count?: number | null;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;
		template_repository?: Nullable_repositoryTemplate_repository;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}

	/** A git repository */
	export interface Nullable_repositoryFormProperties {

		/** Whether to allow forking this repo */
		allow_forking: FormControl<boolean | null | undefined>,

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit: FormControl<boolean | null | undefined>,

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge: FormControl<boolean | null | undefined>,

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging. */
		allow_update_branch: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/**
		 * Whether the repository is archived.
		 * Required
		 */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The default branch of the repository.
		 * Required
		 */
		default_branch: FormControl<string | null | undefined>,

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/**
		 * Whether downloads are enabled.
		 * Required
		 */
		has_downloads: FormControl<boolean | null | undefined>,

		/**
		 * Whether issues are enabled.
		 * Required
		 */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/**
		 * Whether projects are enabled.
		 * Required
		 */
		has_projects: FormControl<boolean | null | undefined>,

		/**
		 * Whether the wiki is enabled.
		 * Required
		 */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the repository
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/**
		 * The name of the repository.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
		network_count: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/**
		 * Whether the repository is private or public.
		 * Required
		 */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,
		starred_at: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,
		subscribers_count: FormControl<number | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateNullable_repositoryFormGroup() {
		return new FormGroup<Nullable_repositoryFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_update_branch: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network_count: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			starred_at: new FormControl<string | null | undefined>(undefined),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_count: new FormControl<number | null | undefined>(undefined),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_repositoryPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Nullable_repositoryPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateNullable_repositoryPermissionsFormGroup() {
		return new FormGroup<Nullable_repositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Nullable_repositoryTemplate_repository {
		allow_merge_commit?: boolean | null;
		allow_rebase_merge?: boolean | null;
		allow_squash_merge?: boolean | null;
		allow_update_branch?: boolean | null;
		archive_url?: string | null;
		archived?: boolean | null;
		assignees_url?: string | null;
		blobs_url?: string | null;
		branches_url?: string | null;
		clone_url?: string | null;
		collaborators_url?: string | null;
		comments_url?: string | null;
		commits_url?: string | null;
		compare_url?: string | null;
		contents_url?: string | null;
		contributors_url?: string | null;
		created_at?: string | null;
		default_branch?: string | null;
		delete_branch_on_merge?: boolean | null;
		deployments_url?: string | null;
		description?: string | null;
		disabled?: boolean | null;
		downloads_url?: string | null;
		events_url?: string | null;
		fork?: boolean | null;
		forks_count?: number | null;
		forks_url?: string | null;
		full_name?: string | null;
		git_commits_url?: string | null;
		git_refs_url?: string | null;
		git_tags_url?: string | null;
		git_url?: string | null;
		has_downloads?: boolean | null;
		has_issues?: boolean | null;
		has_pages?: boolean | null;
		has_projects?: boolean | null;
		has_wiki?: boolean | null;
		homepage?: string | null;
		hooks_url?: string | null;
		html_url?: string | null;
		id?: number | null;
		is_template?: boolean | null;
		issue_comment_url?: string | null;
		issue_events_url?: string | null;
		issues_url?: string | null;
		keys_url?: string | null;
		labels_url?: string | null;
		language?: string | null;
		languages_url?: string | null;
		merges_url?: string | null;
		milestones_url?: string | null;
		mirror_url?: string | null;
		name?: string | null;
		network_count?: number | null;
		node_id?: string | null;
		notifications_url?: string | null;
		open_issues_count?: number | null;
		owner?: Nullable_repositoryTemplate_repositoryOwner;
		permissions?: Nullable_repositoryTemplate_repositoryPermissions;
		private?: boolean | null;
		pulls_url?: string | null;
		pushed_at?: string | null;
		releases_url?: string | null;
		size?: number | null;
		ssh_url?: string | null;
		stargazers_count?: number | null;
		stargazers_url?: string | null;
		statuses_url?: string | null;
		subscribers_count?: number | null;
		subscribers_url?: string | null;
		subscription_url?: string | null;
		svn_url?: string | null;
		tags_url?: string | null;
		teams_url?: string | null;
		temp_clone_token?: string | null;
		topics?: Array<string>;
		trees_url?: string | null;
		updated_at?: string | null;
		url?: string | null;
		visibility?: string | null;
		watchers_count?: number | null;
	}
	export interface Nullable_repositoryTemplate_repositoryFormProperties {
		allow_merge_commit: FormControl<boolean | null | undefined>,
		allow_rebase_merge: FormControl<boolean | null | undefined>,
		allow_squash_merge: FormControl<boolean | null | undefined>,
		allow_update_branch: FormControl<boolean | null | undefined>,
		archive_url: FormControl<string | null | undefined>,
		archived: FormControl<boolean | null | undefined>,
		assignees_url: FormControl<string | null | undefined>,
		blobs_url: FormControl<string | null | undefined>,
		branches_url: FormControl<string | null | undefined>,
		clone_url: FormControl<string | null | undefined>,
		collaborators_url: FormControl<string | null | undefined>,
		comments_url: FormControl<string | null | undefined>,
		commits_url: FormControl<string | null | undefined>,
		compare_url: FormControl<string | null | undefined>,
		contents_url: FormControl<string | null | undefined>,
		contributors_url: FormControl<string | null | undefined>,
		created_at: FormControl<string | null | undefined>,
		default_branch: FormControl<string | null | undefined>,
		delete_branch_on_merge: FormControl<boolean | null | undefined>,
		deployments_url: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,
		disabled: FormControl<boolean | null | undefined>,
		downloads_url: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		fork: FormControl<boolean | null | undefined>,
		forks_count: FormControl<number | null | undefined>,
		forks_url: FormControl<string | null | undefined>,
		full_name: FormControl<string | null | undefined>,
		git_commits_url: FormControl<string | null | undefined>,
		git_refs_url: FormControl<string | null | undefined>,
		git_tags_url: FormControl<string | null | undefined>,
		git_url: FormControl<string | null | undefined>,
		has_downloads: FormControl<boolean | null | undefined>,
		has_issues: FormControl<boolean | null | undefined>,
		has_pages: FormControl<boolean | null | undefined>,
		has_projects: FormControl<boolean | null | undefined>,
		has_wiki: FormControl<boolean | null | undefined>,
		homepage: FormControl<string | null | undefined>,
		hooks_url: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,
		issue_comment_url: FormControl<string | null | undefined>,
		issue_events_url: FormControl<string | null | undefined>,
		issues_url: FormControl<string | null | undefined>,
		keys_url: FormControl<string | null | undefined>,
		labels_url: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,
		languages_url: FormControl<string | null | undefined>,
		merges_url: FormControl<string | null | undefined>,
		milestones_url: FormControl<string | null | undefined>,
		mirror_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		network_count: FormControl<number | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		notifications_url: FormControl<string | null | undefined>,
		open_issues_count: FormControl<number | null | undefined>,
		private: FormControl<boolean | null | undefined>,
		pulls_url: FormControl<string | null | undefined>,
		pushed_at: FormControl<string | null | undefined>,
		releases_url: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		ssh_url: FormControl<string | null | undefined>,
		stargazers_count: FormControl<number | null | undefined>,
		stargazers_url: FormControl<string | null | undefined>,
		statuses_url: FormControl<string | null | undefined>,
		subscribers_count: FormControl<number | null | undefined>,
		subscribers_url: FormControl<string | null | undefined>,
		subscription_url: FormControl<string | null | undefined>,
		svn_url: FormControl<string | null | undefined>,
		tags_url: FormControl<string | null | undefined>,
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,
		trees_url: FormControl<string | null | undefined>,
		updated_at: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
		visibility: FormControl<string | null | undefined>,
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateNullable_repositoryTemplate_repositoryFormGroup() {
		return new FormGroup<Nullable_repositoryTemplate_repositoryFormProperties>({
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_update_branch: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined),
			archived: new FormControl<boolean | null | undefined>(undefined),
			assignees_url: new FormControl<string | null | undefined>(undefined),
			blobs_url: new FormControl<string | null | undefined>(undefined),
			branches_url: new FormControl<string | null | undefined>(undefined),
			clone_url: new FormControl<string | null | undefined>(undefined),
			collaborators_url: new FormControl<string | null | undefined>(undefined),
			comments_url: new FormControl<string | null | undefined>(undefined),
			commits_url: new FormControl<string | null | undefined>(undefined),
			compare_url: new FormControl<string | null | undefined>(undefined),
			contents_url: new FormControl<string | null | undefined>(undefined),
			contributors_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			default_branch: new FormControl<string | null | undefined>(undefined),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			disabled: new FormControl<boolean | null | undefined>(undefined),
			downloads_url: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			fork: new FormControl<boolean | null | undefined>(undefined),
			forks_count: new FormControl<number | null | undefined>(undefined),
			forks_url: new FormControl<string | null | undefined>(undefined),
			full_name: new FormControl<string | null | undefined>(undefined),
			git_commits_url: new FormControl<string | null | undefined>(undefined),
			git_refs_url: new FormControl<string | null | undefined>(undefined),
			git_tags_url: new FormControl<string | null | undefined>(undefined),
			git_url: new FormControl<string | null | undefined>(undefined),
			has_downloads: new FormControl<boolean | null | undefined>(undefined),
			has_issues: new FormControl<boolean | null | undefined>(undefined),
			has_pages: new FormControl<boolean | null | undefined>(undefined),
			has_projects: new FormControl<boolean | null | undefined>(undefined),
			has_wiki: new FormControl<boolean | null | undefined>(undefined),
			homepage: new FormControl<string | null | undefined>(undefined),
			hooks_url: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined),
			issue_events_url: new FormControl<string | null | undefined>(undefined),
			issues_url: new FormControl<string | null | undefined>(undefined),
			keys_url: new FormControl<string | null | undefined>(undefined),
			labels_url: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			languages_url: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined),
			milestones_url: new FormControl<string | null | undefined>(undefined),
			mirror_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			network_count: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			notifications_url: new FormControl<string | null | undefined>(undefined),
			open_issues_count: new FormControl<number | null | undefined>(undefined),
			private: new FormControl<boolean | null | undefined>(undefined),
			pulls_url: new FormControl<string | null | undefined>(undefined),
			pushed_at: new FormControl<string | null | undefined>(undefined),
			releases_url: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			ssh_url: new FormControl<string | null | undefined>(undefined),
			stargazers_count: new FormControl<number | null | undefined>(undefined),
			stargazers_url: new FormControl<string | null | undefined>(undefined),
			statuses_url: new FormControl<string | null | undefined>(undefined),
			subscribers_count: new FormControl<number | null | undefined>(undefined),
			subscribers_url: new FormControl<string | null | undefined>(undefined),
			subscription_url: new FormControl<string | null | undefined>(undefined),
			svn_url: new FormControl<string | null | undefined>(undefined),
			tags_url: new FormControl<string | null | undefined>(undefined),
			teams_url: new FormControl<string | null | undefined>(undefined),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Nullable_repositoryTemplate_repositoryOwner {
		avatar_url?: string | null;
		events_url?: string | null;
		followers_url?: string | null;
		following_url?: string | null;
		gists_url?: string | null;
		gravatar_id?: string | null;
		html_url?: string | null;
		id?: number | null;
		login?: string | null;
		node_id?: string | null;
		organizations_url?: string | null;
		received_events_url?: string | null;
		repos_url?: string | null;
		site_admin?: boolean | null;
		starred_url?: string | null;
		subscriptions_url?: string | null;
		type?: string | null;
		url?: string | null;
	}
	export interface Nullable_repositoryTemplate_repositoryOwnerFormProperties {
		avatar_url: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		followers_url: FormControl<string | null | undefined>,
		following_url: FormControl<string | null | undefined>,
		gists_url: FormControl<string | null | undefined>,
		gravatar_id: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		login: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		organizations_url: FormControl<string | null | undefined>,
		received_events_url: FormControl<string | null | undefined>,
		repos_url: FormControl<string | null | undefined>,
		site_admin: FormControl<boolean | null | undefined>,
		starred_url: FormControl<string | null | undefined>,
		subscriptions_url: FormControl<string | null | undefined>,
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_repositoryTemplate_repositoryOwnerFormGroup() {
		return new FormGroup<Nullable_repositoryTemplate_repositoryOwnerFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			followers_url: new FormControl<string | null | undefined>(undefined),
			following_url: new FormControl<string | null | undefined>(undefined),
			gists_url: new FormControl<string | null | undefined>(undefined),
			gravatar_id: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			organizations_url: new FormControl<string | null | undefined>(undefined),
			received_events_url: new FormControl<string | null | undefined>(undefined),
			repos_url: new FormControl<string | null | undefined>(undefined),
			site_admin: new FormControl<boolean | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined),
			subscriptions_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Nullable_repositoryTemplate_repositoryPermissions {
		admin?: boolean | null;
		maintain?: boolean | null;
		pull?: boolean | null;
		push?: boolean | null;
		triage?: boolean | null;
	}
	export interface Nullable_repositoryTemplate_repositoryPermissionsFormProperties {
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,
		pull: FormControl<boolean | null | undefined>,
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateNullable_repositoryTemplate_repositoryPermissionsFormGroup() {
		return new FormGroup<Nullable_repositoryTemplate_repositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined),
			push: new FormControl<boolean | null | undefined>(undefined),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Check suite configuration preferences for a repository. */
	export interface Check_suite_preference {

		/** Required */
		preferences: Check_suite_preferencePreferences;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;
	}

	/** Check suite configuration preferences for a repository. */
	export interface Check_suite_preferenceFormProperties {
	}
	export function CreateCheck_suite_preferenceFormGroup() {
		return new FormGroup<Check_suite_preferenceFormProperties>({
		});

	}

	export interface Check_suite_preferencePreferences {
		Check_suite_preferencePreferencesAuto_trigger_checks?: Array<Check_suite_preferencePreferencesAuto_trigger_checks>;
	}
	export interface Check_suite_preferencePreferencesFormProperties {
	}
	export function CreateCheck_suite_preferencePreferencesFormGroup() {
		return new FormGroup<Check_suite_preferencePreferencesFormProperties>({
		});

	}

	export interface Check_suite_preferencePreferencesAuto_trigger_checks {

		/** Required */
		app_id: number;

		/** Required */
		setting: boolean;
	}
	export interface Check_suite_preferencePreferencesAuto_trigger_checksFormProperties {

		/** Required */
		app_id: FormControl<number | null | undefined>,

		/** Required */
		setting: FormControl<boolean | null | undefined>,
	}
	export function CreateCheck_suite_preferencePreferencesAuto_trigger_checksFormGroup() {
		return new FormGroup<Check_suite_preferencePreferencesAuto_trigger_checksFormProperties>({
			app_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			setting: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Code of Conduct Simple */
	export interface Code_of_conduct_simple {

		/** Required */
		html_url: string;

		/** Required */
		key: string;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}

	/** Code of Conduct Simple */
	export interface Code_of_conduct_simpleFormProperties {

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCode_of_conduct_simpleFormGroup() {
		return new FormGroup<Code_of_conduct_simpleFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Code_scanning_alert {

		/**
		 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		created_at: Date;

		/**
		 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		dismissed_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		dismissed_by: Nullable_simple_user;

		/**
		 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
		 * Required
		 */
		dismissed_reason: Code_scanning_alertDismissed_reason;

		/**
		 * The GitHub URL of the alert resource.
		 * Required
		 */
		html_url: string;
		instances?: any;

		/**
		 * The REST API URL for fetching the list of instances for an alert.
		 * Required
		 */
		instances_url: string;

		/** Required */
		most_recent_instance: Code_scanning_alert_instance;

		/**
		 * The security alert number.
		 * Required
		 */
		number: number;

		/** Required */
		rule: Code_scanning_alert_rule;

		/**
		 * State of a code scanning alert.
		 * Required
		 */
		state: Code_scanning_alert_instanceState;

		/** Required */
		tool: Code_scanning_analysis_tool;

		/**
		 * The REST API URL of the alert resource.
		 * Required
		 */
		url: string;
	}
	export interface Code_scanning_alertFormProperties {

		/**
		 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		dismissed_at: FormControl<Date | null | undefined>,

		/**
		 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
		 * Required
		 */
		dismissed_reason: FormControl<Code_scanning_alertDismissed_reason | null | undefined>,

		/**
		 * The GitHub URL of the alert resource.
		 * Required
		 */
		html_url: FormControl<string | null | undefined>,
		instances: FormControl<any | null | undefined>,

		/**
		 * The REST API URL for fetching the list of instances for an alert.
		 * Required
		 */
		instances_url: FormControl<string | null | undefined>,

		/**
		 * The security alert number.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/**
		 * State of a code scanning alert.
		 * Required
		 */
		state: FormControl<Code_scanning_alert_instanceState | null | undefined>,

		/**
		 * The REST API URL of the alert resource.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_alertFormGroup() {
		return new FormGroup<Code_scanning_alertFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			dismissed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			dismissed_reason: new FormControl<Code_scanning_alertDismissed_reason | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			instances: new FormControl<any | null | undefined>(undefined),
			instances_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Code_scanning_alert_instanceState | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Code_scanning_alertDismissed_reason { _null = 0, 'false positive' = 1, 'won\'t fix' = 2, 'used in tests' = 3 }

	export interface Code_scanning_alert_instance {

		/** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
		analysis_key?: string | null;

		/** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
		category?: string | null;

		/**
		 * Classifications that have been applied to the file that triggered the alert.
		 * For example identifying it as documentation, or a generated file.
		 */
		classifications?: Array<Code_scanning_alert_classification>;
		commit_sha?: string | null;

		/** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
		environment?: string | null;
		html_url?: string | null;

		/** Describe a region within a file for the alert. */
		location?: Code_scanning_alert_location;
		message?: Code_scanning_alert_instanceMessage;

		/**
		 * The full Git reference, formatted as `refs/heads/<branch name>`,
		 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
		 */
		ref?: string | null;

		/** State of a code scanning alert. */
		state?: Code_scanning_alert_instanceState | null;
	}
	export interface Code_scanning_alert_instanceFormProperties {

		/** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
		analysis_key: FormControl<string | null | undefined>,

		/** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
		category: FormControl<string | null | undefined>,
		commit_sha: FormControl<string | null | undefined>,

		/** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
		environment: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,

		/**
		 * The full Git reference, formatted as `refs/heads/<branch name>`,
		 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
		 */
		ref: FormControl<string | null | undefined>,

		/** State of a code scanning alert. */
		state: FormControl<Code_scanning_alert_instanceState | null | undefined>,
	}
	export function CreateCode_scanning_alert_instanceFormGroup() {
		return new FormGroup<Code_scanning_alert_instanceFormProperties>({
			analysis_key: new FormControl<string | null | undefined>(undefined),
			category: new FormControl<string | null | undefined>(undefined),
			commit_sha: new FormControl<string | null | undefined>(undefined),
			environment: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			ref: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<Code_scanning_alert_instanceState | null | undefined>(undefined),
		});

	}


	/** A classification of the file. For example to identify it as generated. */
	export enum Code_scanning_alert_classification { source = 0, generated = 1, test = 2, library = 3 }


	/** Describe a region within a file for the alert. */
	export interface Code_scanning_alert_location {
		end_column?: number | null;
		end_line?: number | null;
		path?: string | null;
		start_column?: number | null;
		start_line?: number | null;
	}

	/** Describe a region within a file for the alert. */
	export interface Code_scanning_alert_locationFormProperties {
		end_column: FormControl<number | null | undefined>,
		end_line: FormControl<number | null | undefined>,
		path: FormControl<string | null | undefined>,
		start_column: FormControl<number | null | undefined>,
		start_line: FormControl<number | null | undefined>,
	}
	export function CreateCode_scanning_alert_locationFormGroup() {
		return new FormGroup<Code_scanning_alert_locationFormProperties>({
			end_column: new FormControl<number | null | undefined>(undefined),
			end_line: new FormControl<number | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			start_column: new FormControl<number | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Code_scanning_alert_instanceMessage {
		text?: string | null;
	}
	export interface Code_scanning_alert_instanceMessageFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_alert_instanceMessageFormGroup() {
		return new FormGroup<Code_scanning_alert_instanceMessageFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Code_scanning_alert_instanceState { open = 0, closed = 1, dismissed = 2, fixed = 3 }

	export interface Code_scanning_alert_rule {

		/** A short description of the rule used to detect the alert. */
		description?: string | null;

		/** description of the rule used to detect the alert. */
		full_description?: string | null;

		/** Detailed documentation for the rule as GitHub Flavored Markdown. */
		help?: string | null;

		/** A unique identifier for the rule used to detect the alert. */
		id?: string | null;

		/** The name of the rule used to detect the alert. */
		name?: string | null;

		/** The severity of the alert. */
		severity?: Code_scanning_alert_ruleSeverity | null;

		/** A set of tags applicable for the rule. */
		tags?: Array<string>;
	}
	export interface Code_scanning_alert_ruleFormProperties {

		/** A short description of the rule used to detect the alert. */
		description: FormControl<string | null | undefined>,

		/** description of the rule used to detect the alert. */
		full_description: FormControl<string | null | undefined>,

		/** Detailed documentation for the rule as GitHub Flavored Markdown. */
		help: FormControl<string | null | undefined>,

		/** A unique identifier for the rule used to detect the alert. */
		id: FormControl<string | null | undefined>,

		/** The name of the rule used to detect the alert. */
		name: FormControl<string | null | undefined>,

		/** The severity of the alert. */
		severity: FormControl<Code_scanning_alert_ruleSeverity | null | undefined>,
	}
	export function CreateCode_scanning_alert_ruleFormGroup() {
		return new FormGroup<Code_scanning_alert_ruleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			full_description: new FormControl<string | null | undefined>(undefined),
			help: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			severity: new FormControl<Code_scanning_alert_ruleSeverity | null | undefined>(undefined),
		});

	}

	export enum Code_scanning_alert_ruleSeverity { none = 0, note = 1, warning = 2, error = 3 }

	export interface Code_scanning_analysis_tool {

		/** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
		guid?: string | null;

		/** The name of the tool used to generate the code scanning analysis. */
		name?: string | null;

		/** The version of the tool used to generate the code scanning analysis. */
		version?: string | null;
	}
	export interface Code_scanning_analysis_toolFormProperties {

		/** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
		guid: FormControl<string | null | undefined>,

		/** The name of the tool used to generate the code scanning analysis. */
		name: FormControl<string | null | undefined>,

		/** The version of the tool used to generate the code scanning analysis. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_analysis_toolFormGroup() {
		return new FormGroup<Code_scanning_analysis_toolFormProperties>({
			guid: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
	export enum Code_scanning_alert_dismissed_reason { _null = 0, 'false positive' = 1, 'won\'t fix' = 2, 'used in tests' = 3 }

	export interface Code_scanning_alert_items {

		/**
		 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		created_at: Date;

		/**
		 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		dismissed_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		dismissed_by: Nullable_simple_user;

		/**
		 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
		 * Required
		 */
		dismissed_reason: Code_scanning_alert_itemsDismissed_reason;

		/**
		 * The GitHub URL of the alert resource.
		 * Required
		 */
		html_url: string;

		/**
		 * The REST API URL for fetching the list of instances for an alert.
		 * Required
		 */
		instances_url: string;

		/** Required */
		most_recent_instance: Code_scanning_alert_instance;

		/**
		 * The security alert number.
		 * Required
		 */
		number: number;

		/** Required */
		rule: Code_scanning_alert_rule_summary;

		/**
		 * State of a code scanning alert.
		 * Required
		 */
		state: Code_scanning_alert_instanceState;

		/** Required */
		tool: Code_scanning_analysis_tool;

		/**
		 * The REST API URL of the alert resource.
		 * Required
		 */
		url: string;
	}
	export interface Code_scanning_alert_itemsFormProperties {

		/**
		 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		dismissed_at: FormControl<Date | null | undefined>,

		/**
		 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
		 * Required
		 */
		dismissed_reason: FormControl<Code_scanning_alert_itemsDismissed_reason | null | undefined>,

		/**
		 * The GitHub URL of the alert resource.
		 * Required
		 */
		html_url: FormControl<string | null | undefined>,

		/**
		 * The REST API URL for fetching the list of instances for an alert.
		 * Required
		 */
		instances_url: FormControl<string | null | undefined>,

		/**
		 * The security alert number.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/**
		 * State of a code scanning alert.
		 * Required
		 */
		state: FormControl<Code_scanning_alert_instanceState | null | undefined>,

		/**
		 * The REST API URL of the alert resource.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_alert_itemsFormGroup() {
		return new FormGroup<Code_scanning_alert_itemsFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			dismissed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			dismissed_reason: new FormControl<Code_scanning_alert_itemsDismissed_reason | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			instances_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Code_scanning_alert_instanceState | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Code_scanning_alert_itemsDismissed_reason { _null = 0, 'false positive' = 1, 'won\'t fix' = 2, 'used in tests' = 3 }

	export interface Code_scanning_alert_rule_summary {

		/** A short description of the rule used to detect the alert. */
		description?: string | null;

		/** A unique identifier for the rule used to detect the alert. */
		id?: string | null;

		/** The name of the rule used to detect the alert. */
		name?: string | null;

		/** The severity of the alert. */
		severity?: Code_scanning_alert_ruleSeverity | null;
	}
	export interface Code_scanning_alert_rule_summaryFormProperties {

		/** A short description of the rule used to detect the alert. */
		description: FormControl<string | null | undefined>,

		/** A unique identifier for the rule used to detect the alert. */
		id: FormControl<string | null | undefined>,

		/** The name of the rule used to detect the alert. */
		name: FormControl<string | null | undefined>,

		/** The severity of the alert. */
		severity: FormControl<Code_scanning_alert_ruleSeverity | null | undefined>,
	}
	export function CreateCode_scanning_alert_rule_summaryFormGroup() {
		return new FormGroup<Code_scanning_alert_rule_summaryFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			severity: new FormControl<Code_scanning_alert_ruleSeverity | null | undefined>(undefined),
		});

	}


	/** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
	export enum Code_scanning_alert_set_state { open = 0, dismissed = 1 }


	/** State of a code scanning alert. */
	export enum Code_scanning_alert_state { open = 0, closed = 1, dismissed = 2, fixed = 3 }

	export interface Code_scanning_analysis {

		/**
		 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
		 * Required
		 */
		analysis_key: string;

		/** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
		category?: string | null;

		/**
		 * The SHA of the commit to which the analysis you are uploading relates.
		 * Required
		 * Max length: 40
		 * Min length: 40
		 */
		commit_sha: string;

		/**
		 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		created_at: Date;

		/** Required */
		deletable: boolean;

		/**
		 * Identifies the variable values associated with the environment in which this analysis was performed.
		 * Required
		 */
		environment: string;

		/** Required */
		error: string;

		/**
		 * Unique identifier for this analysis.
		 * Required
		 */
		id: number;

		/**
		 * The full Git reference, formatted as `refs/heads/<branch name>`,
		 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
		 * Required
		 */
		ref: string;

		/**
		 * The total number of results in the analysis.
		 * Required
		 */
		results_count: number;

		/**
		 * The total number of rules used in the analysis.
		 * Required
		 */
		rules_count: number;

		/**
		 * An identifier for the upload.
		 * Required
		 */
		sarif_id: string;

		/** Required */
		tool: Code_scanning_analysis_tool;
		tool_name?: string | null;

		/**
		 * The REST API URL of the analysis resource.
		 * Required
		 */
		url: string;

		/**
		 * Warning generated when processing the analysis
		 * Required
		 */
		warning: string;
	}
	export interface Code_scanning_analysisFormProperties {

		/**
		 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
		 * Required
		 */
		analysis_key: FormControl<string | null | undefined>,

		/** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
		category: FormControl<string | null | undefined>,

		/**
		 * The SHA of the commit to which the analysis you are uploading relates.
		 * Required
		 * Max length: 40
		 * Min length: 40
		 */
		commit_sha: FormControl<string | null | undefined>,

		/**
		 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		deletable: FormControl<boolean | null | undefined>,

		/**
		 * Identifies the variable values associated with the environment in which this analysis was performed.
		 * Required
		 */
		environment: FormControl<string | null | undefined>,

		/** Required */
		error: FormControl<string | null | undefined>,

		/**
		 * Unique identifier for this analysis.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The full Git reference, formatted as `refs/heads/<branch name>`,
		 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
		 * Required
		 */
		ref: FormControl<string | null | undefined>,

		/**
		 * The total number of results in the analysis.
		 * Required
		 */
		results_count: FormControl<number | null | undefined>,

		/**
		 * The total number of rules used in the analysis.
		 * Required
		 */
		rules_count: FormControl<number | null | undefined>,

		/**
		 * An identifier for the upload.
		 * Required
		 */
		sarif_id: FormControl<string | null | undefined>,
		tool_name: FormControl<string | null | undefined>,

		/**
		 * The REST API URL of the analysis resource.
		 * Required
		 */
		url: FormControl<string | null | undefined>,

		/**
		 * Warning generated when processing the analysis
		 * Required
		 */
		warning: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_analysisFormGroup() {
		return new FormGroup<Code_scanning_analysisFormProperties>({
			analysis_key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			category: new FormControl<string | null | undefined>(undefined),
			commit_sha: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(40), Validators.maxLength(40), Validators.pattern('^[0-9a-fA-F]+$')]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			deletable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			results_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			rules_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sarif_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tool_name: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			warning: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Successful deletion of a code scanning analysis */
	export interface Code_scanning_analysis_deletion {

		/**
		 * Next deletable analysis in chain, with last analysis deletion confirmation
		 * Required
		 */
		confirm_delete_url: string;

		/**
		 * Next deletable analysis in chain, without last analysis deletion confirmation
		 * Required
		 */
		next_analysis_url: string;
	}

	/** Successful deletion of a code scanning analysis */
	export interface Code_scanning_analysis_deletionFormProperties {

		/**
		 * Next deletable analysis in chain, with last analysis deletion confirmation
		 * Required
		 */
		confirm_delete_url: FormControl<string | null | undefined>,

		/**
		 * Next deletable analysis in chain, without last analysis deletion confirmation
		 * Required
		 */
		next_analysis_url: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_analysis_deletionFormGroup() {
		return new FormGroup<Code_scanning_analysis_deletionFormProperties>({
			confirm_delete_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			next_analysis_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Code_scanning_sarifs_receipt {

		/** An identifier for the upload. */
		id?: string | null;

		/** The REST API URL for checking the status of the upload. */
		url?: string | null;
	}
	export interface Code_scanning_sarifs_receiptFormProperties {

		/** An identifier for the upload. */
		id: FormControl<string | null | undefined>,

		/** The REST API URL for checking the status of the upload. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanning_sarifs_receiptFormGroup() {
		return new FormGroup<Code_scanning_sarifs_receiptFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Code_scanning_sarifs_status {

		/** The REST API URL for getting the analyses associated with the upload. */
		analyses_url?: string | null;

		/** `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored. */
		processing_status?: Code_scanning_sarifs_statusProcessing_status | null;
	}
	export interface Code_scanning_sarifs_statusFormProperties {

		/** The REST API URL for getting the analyses associated with the upload. */
		analyses_url: FormControl<string | null | undefined>,

		/** `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored. */
		processing_status: FormControl<Code_scanning_sarifs_statusProcessing_status | null | undefined>,
	}
	export function CreateCode_scanning_sarifs_statusFormGroup() {
		return new FormGroup<Code_scanning_sarifs_statusFormProperties>({
			analyses_url: new FormControl<string | null | undefined>(undefined),
			processing_status: new FormControl<Code_scanning_sarifs_statusProcessing_status | null | undefined>(undefined),
		});

	}

	export enum Code_scanning_sarifs_statusProcessing_status { pending = 0, complete = 1 }


	/** Code Search Result Item */
	export interface Code_search_result_item {
		file_size?: number | null;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;
		language?: string | null;
		last_modified_at?: Date | null;
		line_numbers?: Array<string>;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;

		/** Required */
		score: number;

		/** Required */
		sha: string;
		Code_search_result_itemText_matches?: Array<Code_search_result_itemText_matches>;

		/** Required */
		url: string;
	}

	/** Code Search Result Item */
	export interface Code_search_result_itemFormProperties {
		file_size: FormControl<number | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,
		last_modified_at: FormControl<Date | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCode_search_result_itemFormGroup() {
		return new FormGroup<Code_search_result_itemFormProperties>({
			file_size: new FormControl<number | null | undefined>(undefined),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined),
			last_modified_at: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Code_search_result_itemText_matches {
		fragment?: string | null;
		Code_search_result_itemText_matchesMatches?: Array<Code_search_result_itemText_matchesMatches>;
		object_type?: string | null;
		object_url?: string | null;
		property?: string | null;
	}
	export interface Code_search_result_itemText_matchesFormProperties {
		fragment: FormControl<string | null | undefined>,
		object_type: FormControl<string | null | undefined>,
		object_url: FormControl<string | null | undefined>,
		property: FormControl<string | null | undefined>,
	}
	export function CreateCode_search_result_itemText_matchesFormGroup() {
		return new FormGroup<Code_search_result_itemText_matchesFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			object_type: new FormControl<string | null | undefined>(undefined),
			object_url: new FormControl<string | null | undefined>(undefined),
			property: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Code_search_result_itemText_matchesMatches {
		indices?: Array<number>;
		text?: string | null;
	}
	export interface Code_search_result_itemText_matchesMatchesFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateCode_search_result_itemText_matchesMatchesFormGroup() {
		return new FormGroup<Code_search_result_itemText_matchesMatchesFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Collaborator */
	export interface Collaborator {

		/** Required */
		avatar_url: string;
		email?: string | null;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;
		name?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;
		permissions?: CollaboratorPermissions;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** Collaborator */
	export interface CollaboratorFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCollaboratorFormGroup() {
		return new FormGroup<CollaboratorFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CollaboratorPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface CollaboratorPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateCollaboratorPermissionsFormGroup() {
		return new FormGroup<CollaboratorPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Combined Commit Status */
	export interface Combined_commit_status {

		/** Required */
		commit_url: string;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;

		/** Required */
		sha: string;

		/** Required */
		state: string;

		/** Required */
		statuses: Array<Simple_commit_status>;

		/** Required */
		total_count: number;

		/** Required */
		url: string;
	}

	/** Combined Commit Status */
	export interface Combined_commit_statusFormProperties {

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCombined_commit_statusFormGroup() {
		return new FormGroup<Combined_commit_statusFormProperties>({
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simple_commit_status {

		/** Required */
		avatar_url: string;

		/** Required */
		context: string;

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;
		required?: boolean | null;

		/** Required */
		state: string;

		/** Required */
		target_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}
	export interface Simple_commit_statusFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		context: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		required: FormControl<boolean | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,

		/** Required */
		target_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateSimple_commit_statusFormGroup() {
		return new FormGroup<Simple_commit_statusFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			context: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			required: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Commit Activity */
	export interface Commit_activity {

		/** Required */
		days: Array<number>;

		/** Required */
		total: number;

		/** Required */
		week: number;
	}

	/** Commit Activity */
	export interface Commit_activityFormProperties {

		/** Required */
		total: FormControl<number | null | undefined>,

		/** Required */
		week: FormControl<number | null | undefined>,
	}
	export function CreateCommit_activityFormGroup() {
		return new FormGroup<Commit_activityFormProperties>({
			total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			week: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Commit Comment */
	export interface Commit_comment {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/** Required */
		body: string;

		/** Required */
		commit_id: string;

		/** Required */
		created_at: Date;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		line: number;

		/** Required */
		node_id: string;

		/** Required */
		path: string;

		/** Required */
		position: number;
		reactions?: Reaction_rollup;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Commit Comment */
	export interface Commit_commentFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Required */
		body: FormControl<string | null | undefined>,

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		line: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		position: FormControl<number | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommit_commentFormGroup() {
		return new FormGroup<Commit_commentFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			position: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Reaction_rollup {

		/** Required */
		'+1': number;

		/** Required */
		'-1': number;

		/** Required */
		confused: number;

		/** Required */
		eyes: number;

		/** Required */
		heart: number;

		/** Required */
		hooray: number;

		/** Required */
		laugh: number;

		/** Required */
		rocket: number;

		/** Required */
		total_count: number;

		/** Required */
		url: string;
	}
	export interface Reaction_rollupFormProperties {

		/** Required */
		'+1': FormControl<number | null | undefined>,

		/** Required */
		'-1': FormControl<number | null | undefined>,

		/** Required */
		confused: FormControl<number | null | undefined>,

		/** Required */
		eyes: FormControl<number | null | undefined>,

		/** Required */
		heart: FormControl<number | null | undefined>,

		/** Required */
		hooray: FormControl<number | null | undefined>,

		/** Required */
		laugh: FormControl<number | null | undefined>,

		/** Required */
		rocket: FormControl<number | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReaction_rollupFormGroup() {
		return new FormGroup<Reaction_rollupFormProperties>({
			'+1': new FormControl<number | null | undefined>(undefined, [Validators.required]),
			'-1': new FormControl<number | null | undefined>(undefined, [Validators.required]),
			confused: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			eyes: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			heart: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			hooray: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			laugh: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			rocket: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Commit Comparison */
	export interface Commit_comparison {

		/** Required */
		ahead_by: number;

		/**
		 * Commit
		 * Required
		 */
		base_commit: Commit;

		/** Required */
		behind_by: number;

		/** Required */
		commits: Array<Commit>;

		/** Required */
		diff_url: string;
		files?: Array<Diff_entry>;

		/** Required */
		html_url: string;

		/**
		 * Commit
		 * Required
		 */
		merge_base_commit: Commit;

		/** Required */
		patch_url: string;

		/** Required */
		permalink_url: string;

		/** Required */
		status: Commit_comparisonStatus;

		/** Required */
		total_commits: number;

		/** Required */
		url: string;
	}

	/** Commit Comparison */
	export interface Commit_comparisonFormProperties {

		/** Required */
		ahead_by: FormControl<number | null | undefined>,

		/** Required */
		behind_by: FormControl<number | null | undefined>,

		/** Required */
		diff_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		patch_url: FormControl<string | null | undefined>,

		/** Required */
		permalink_url: FormControl<string | null | undefined>,

		/** Required */
		status: FormControl<Commit_comparisonStatus | null | undefined>,

		/** Required */
		total_commits: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommit_comparisonFormGroup() {
		return new FormGroup<Commit_comparisonFormProperties>({
			ahead_by: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			behind_by: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			diff_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			patch_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			permalink_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Commit_comparisonStatus | null | undefined>(undefined, [Validators.required]),
			total_commits: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Commit_comparisonStatus { diverged = 0, ahead = 1, behind = 2, identical = 3 }


	/** Commit Search Result Item */
	export interface Commit_search_result_item {

		/**
		 * Simple User
		 * Required
		 */
		author: Nullable_simple_user;

		/** Required */
		comments_url: string;

		/** Required */
		commit: Commit_search_result_itemCommit;

		/**
		 * Metaproperties for Git author/committer information.
		 * Required
		 */
		committer: Nullable_git_user;

		/** Required */
		html_url: string;

		/** Required */
		node_id: string;

		/** Required */
		Commit_search_result_itemParents: Array<Commit_search_result_itemParents>;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;

		/** Required */
		score: number;

		/** Required */
		sha: string;
		Commit_search_result_itemText_matches?: Array<Commit_search_result_itemText_matches>;

		/** Required */
		url: string;
	}

	/** Commit Search Result Item */
	export interface Commit_search_result_itemFormProperties {

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemFormGroup() {
		return new FormGroup<Commit_search_result_itemFormProperties>({
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Commit_search_result_itemCommit {

		/** Required */
		author: Commit_search_result_itemCommitAuthor;

		/** Required */
		comment_count: number;

		/**
		 * Metaproperties for Git author/committer information.
		 * Required
		 */
		committer: Nullable_git_user;

		/** Required */
		message: string;

		/** Required */
		tree: Commit_search_result_itemCommitTree;

		/** Required */
		url: string;
		verification?: Verification;
	}
	export interface Commit_search_result_itemCommitFormProperties {

		/** Required */
		comment_count: FormControl<number | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemCommitFormGroup() {
		return new FormGroup<Commit_search_result_itemCommitFormProperties>({
			comment_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Commit_search_result_itemCommitAuthor {

		/** Required */
		date: Date;

		/** Required */
		email: string;

		/** Required */
		name: string;
	}
	export interface Commit_search_result_itemCommitAuthorFormProperties {

		/** Required */
		date: FormControl<Date | null | undefined>,

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemCommitAuthorFormGroup() {
		return new FormGroup<Commit_search_result_itemCommitAuthorFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Commit_search_result_itemCommitTree {

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Commit_search_result_itemCommitTreeFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemCommitTreeFormGroup() {
		return new FormGroup<Commit_search_result_itemCommitTreeFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Commit_search_result_itemParents {
		html_url?: string | null;
		sha?: string | null;
		url?: string | null;
	}
	export interface Commit_search_result_itemParentsFormProperties {
		html_url: FormControl<string | null | undefined>,
		sha: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemParentsFormGroup() {
		return new FormGroup<Commit_search_result_itemParentsFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Commit_search_result_itemText_matches {
		fragment?: string | null;
		Commit_search_result_itemText_matchesMatches?: Array<Commit_search_result_itemText_matchesMatches>;
		object_type?: string | null;
		object_url?: string | null;
		property?: string | null;
	}
	export interface Commit_search_result_itemText_matchesFormProperties {
		fragment: FormControl<string | null | undefined>,
		object_type: FormControl<string | null | undefined>,
		object_url: FormControl<string | null | undefined>,
		property: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemText_matchesFormGroup() {
		return new FormGroup<Commit_search_result_itemText_matchesFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			object_type: new FormControl<string | null | undefined>(undefined),
			object_url: new FormControl<string | null | undefined>(undefined),
			property: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Commit_search_result_itemText_matchesMatches {
		indices?: Array<number>;
		text?: string | null;
	}
	export interface Commit_search_result_itemText_matchesMatchesFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateCommit_search_result_itemText_matchesMatchesFormGroup() {
		return new FormGroup<Commit_search_result_itemText_matchesMatchesFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Configuration_status {
		Configuration_statusProgress?: Array<Configuration_statusProgress>;
		status?: string | null;
	}
	export interface Configuration_statusFormProperties {
		status: FormControl<string | null | undefined>,
	}
	export function CreateConfiguration_statusFormGroup() {
		return new FormGroup<Configuration_statusFormProperties>({
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Configuration_statusProgress {

		/** Required */
		key: string;

		/** Required */
		status: string;
	}
	export interface Configuration_statusProgressFormProperties {

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		status: FormControl<string | null | undefined>,
	}
	export function CreateConfiguration_statusProgressFormGroup() {
		return new FormGroup<Configuration_statusProgressFormProperties>({
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_directoryElement {

		/** Required */
		_links: Content_directoryElement_links;
		content?: string | null;

		/** Required */
		download_url: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Content_directoryElementFormProperties {
		content: FormControl<string | null | undefined>,

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateContent_directoryElementFormGroup() {
		return new FormGroup<Content_directoryElementFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_directoryElement_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Content_directoryElement_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateContent_directoryElement_linksFormGroup() {
		return new FormGroup<Content_directoryElement_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Content File */
	export interface Content_file {

		/** Required */
		_links: Content_file_links;

		/** Required */
		content: string;

		/** Required */
		download_url: string;

		/** Required */
		encoding: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;
		submodule_git_url?: string | null;
		target?: string | null;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** Content File */
	export interface Content_fileFormProperties {

		/** Required */
		content: FormControl<string | null | undefined>,

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		encoding: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,
		submodule_git_url: FormControl<string | null | undefined>,
		target: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateContent_fileFormGroup() {
		return new FormGroup<Content_fileFormProperties>({
			content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			encoding: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			submodule_git_url: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_file_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Content_file_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateContent_file_linksFormGroup() {
		return new FormGroup<Content_file_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Content Reference attachments allow you to provide context around URLs posted in comments */
	export interface Content_reference_attachment {

		/**
		 * The body of the attachment
		 * Required
		 * Max length: 262144
		 */
		body: string;

		/**
		 * The ID of the attachment
		 * Required
		 */
		id: number;

		/** The node_id of the content attachment */
		node_id?: string | null;

		/**
		 * The title of the attachment
		 * Required
		 * Max length: 1024
		 */
		title: string;
	}

	/** Content Reference attachments allow you to provide context around URLs posted in comments */
	export interface Content_reference_attachmentFormProperties {

		/**
		 * The body of the attachment
		 * Required
		 * Max length: 262144
		 */
		body: FormControl<string | null | undefined>,

		/**
		 * The ID of the attachment
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** The node_id of the content attachment */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The title of the attachment
		 * Required
		 * Max length: 1024
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateContent_reference_attachmentFormGroup() {
		return new FormGroup<Content_reference_attachmentFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(262144)]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1024)]),
		});

	}


	/** An object describing a symlink */
	export interface Content_submodule {

		/** Required */
		_links: Content_submodule_links;

		/** Required */
		download_url: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		submodule_git_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** An object describing a symlink */
	export interface Content_submoduleFormProperties {

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		submodule_git_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateContent_submoduleFormGroup() {
		return new FormGroup<Content_submoduleFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			submodule_git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_submodule_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Content_submodule_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateContent_submodule_linksFormGroup() {
		return new FormGroup<Content_submodule_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object describing a symlink */
	export interface Content_symlink {

		/** Required */
		_links: Content_symlink_links;

		/** Required */
		download_url: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		target: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** An object describing a symlink */
	export interface Content_symlinkFormProperties {

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		target: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateContent_symlinkFormGroup() {
		return new FormGroup<Content_symlinkFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			target: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_symlink_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Content_symlink_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateContent_symlink_linksFormGroup() {
		return new FormGroup<Content_symlink_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Content Tree */
	export interface Content_tree {

		/** Required */
		_links: Content_tree_links;

		/** Required */
		download_url: string;
		Content_treeEntries?: Array<Content_treeEntries>;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** Content Tree */
	export interface Content_treeFormProperties {

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateContent_treeFormGroup() {
		return new FormGroup<Content_treeFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_tree_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Content_tree_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateContent_tree_linksFormGroup() {
		return new FormGroup<Content_tree_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_treeEntries {

		/** Required */
		_links: Content_treeEntries_links;
		content?: string | null;

		/** Required */
		download_url: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Content_treeEntriesFormProperties {
		content: FormControl<string | null | undefined>,

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateContent_treeEntriesFormGroup() {
		return new FormGroup<Content_treeEntriesFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Content_treeEntries_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface Content_treeEntries_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateContent_treeEntries_linksFormGroup() {
		return new FormGroup<Content_treeEntries_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contributor */
	export interface Contributor {
		avatar_url?: string | null;

		/** Required */
		contributions: number;
		email?: string | null;
		events_url?: string | null;
		followers_url?: string | null;
		following_url?: string | null;
		gists_url?: string | null;
		gravatar_id?: string | null;
		html_url?: string | null;
		id?: number | null;
		login?: string | null;
		name?: string | null;
		node_id?: string | null;
		organizations_url?: string | null;
		received_events_url?: string | null;
		repos_url?: string | null;
		site_admin?: boolean | null;
		starred_url?: string | null;
		subscriptions_url?: string | null;

		/** Required */
		type: string;
		url?: string | null;
	}

	/** Contributor */
	export interface ContributorFormProperties {
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		contributions: FormControl<number | null | undefined>,
		email: FormControl<string | null | undefined>,
		events_url: FormControl<string | null | undefined>,
		followers_url: FormControl<string | null | undefined>,
		following_url: FormControl<string | null | undefined>,
		gists_url: FormControl<string | null | undefined>,
		gravatar_id: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		login: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		organizations_url: FormControl<string | null | undefined>,
		received_events_url: FormControl<string | null | undefined>,
		repos_url: FormControl<string | null | undefined>,
		site_admin: FormControl<boolean | null | undefined>,
		starred_url: FormControl<string | null | undefined>,
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateContributorFormGroup() {
		return new FormGroup<ContributorFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined),
			followers_url: new FormControl<string | null | undefined>(undefined),
			following_url: new FormControl<string | null | undefined>(undefined),
			gists_url: new FormControl<string | null | undefined>(undefined),
			gravatar_id: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			organizations_url: new FormControl<string | null | undefined>(undefined),
			received_events_url: new FormControl<string | null | undefined>(undefined),
			repos_url: new FormControl<string | null | undefined>(undefined),
			site_admin: new FormControl<boolean | null | undefined>(undefined),
			starred_url: new FormControl<string | null | undefined>(undefined),
			subscriptions_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contributor Activity */
	export interface Contributor_activity {

		/**
		 * Simple User
		 * Required
		 */
		author: Nullable_simple_user;

		/** Required */
		total: number;

		/** Required */
		Contributor_activityWeeks: Array<Contributor_activityWeeks>;
	}

	/** Contributor Activity */
	export interface Contributor_activityFormProperties {

		/** Required */
		total: FormControl<number | null | undefined>,
	}
	export function CreateContributor_activityFormGroup() {
		return new FormGroup<Contributor_activityFormProperties>({
			total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Contributor_activityWeeks {
		a?: number | null;
		c?: number | null;
		d?: number | null;
		w?: number | null;
	}
	export interface Contributor_activityWeeksFormProperties {
		a: FormControl<number | null | undefined>,
		c: FormControl<number | null | undefined>,
		d: FormControl<number | null | undefined>,
		w: FormControl<number | null | undefined>,
	}
	export function CreateContributor_activityWeeksFormGroup() {
		return new FormGroup<Contributor_activityWeeksFormProperties>({
			a: new FormControl<number | null | undefined>(undefined),
			c: new FormControl<number | null | undefined>(undefined),
			d: new FormControl<number | null | undefined>(undefined),
			w: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Converted Note to Issue Issue Event */
	export interface Converted_note_to_issue_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Integration;
		project_card?: Converted_note_to_issue_issue_eventProject_card;

		/** Required */
		url: string;
	}

	/** Converted Note to Issue Issue Event */
	export interface Converted_note_to_issue_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateConverted_note_to_issue_issue_eventFormGroup() {
		return new FormGroup<Converted_note_to_issue_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Converted_note_to_issue_issue_eventProject_card {

		/** Required */
		column_name: string;

		/** Required */
		id: number;
		previous_column_name?: string | null;

		/** Required */
		project_id: number;

		/** Required */
		project_url: string;

		/** Required */
		url: string;
	}
	export interface Converted_note_to_issue_issue_eventProject_cardFormProperties {

		/** Required */
		column_name: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		previous_column_name: FormControl<string | null | undefined>,

		/** Required */
		project_id: FormControl<number | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateConverted_note_to_issue_issue_eventProject_cardFormGroup() {
		return new FormGroup<Converted_note_to_issue_issue_eventProject_cardFormProperties>({
			column_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previous_column_name: new FormControl<string | null | undefined>(undefined),
			project_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Demilestoned Issue Event */
	export interface Demilestoned_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		milestone: Demilestoned_issue_eventMilestone;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Demilestoned Issue Event */
	export interface Demilestoned_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateDemilestoned_issue_eventFormGroup() {
		return new FormGroup<Demilestoned_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Demilestoned_issue_eventMilestone {

		/** Required */
		title: string;
	}
	export interface Demilestoned_issue_eventMilestoneFormProperties {

		/** Required */
		title: FormControl<string | null | undefined>,
	}
	export function CreateDemilestoned_issue_eventMilestoneFormGroup() {
		return new FormGroup<Demilestoned_issue_eventMilestoneFormProperties>({
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An SSH key granting access to a single repository. */
	export interface Deploy_key {

		/** Required */
		created_at: string;

		/** Required */
		id: number;

		/** Required */
		key: string;

		/** Required */
		read_only: boolean;

		/** Required */
		title: string;

		/** Required */
		url: string;

		/** Required */
		verified: boolean;
	}

	/** An SSH key granting access to a single repository. */
	export interface Deploy_keyFormProperties {

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		read_only: FormControl<boolean | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateDeploy_keyFormGroup() {
		return new FormGroup<Deploy_keyFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			read_only: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A request for a specific ref(branch,sha,tag) to be deployed */
	export interface Deployment {

		/** Required */
		created_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/** Required */
		description: string;

		/**
		 * Name for the target deployment environment.
		 * Required
		 */
		environment: string;

		/**
		 * Unique identifier of the deployment
		 * Required
		 */
		id: number;

		/** Required */
		node_id: string;
		original_environment?: string | null;

		/** Required */
		payload: string;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;

		/** Specifies if the given environment is one that end-users directly interact with. Default: false. */
		production_environment?: boolean | null;

		/**
		 * The ref to deploy. This can be a branch, tag, or sha.
		 * Required
		 */
		ref: string;

		/** Required */
		repository_url: string;

		/** Required */
		sha: string;

		/** Required */
		statuses_url: string;

		/**
		 * Parameter to specify a task to execute
		 * Required
		 */
		task: string;

		/** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
		transient_environment?: boolean | null;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A request for a specific ref(branch,sha,tag) to be deployed */
	export interface DeploymentFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Name for the target deployment environment.
		 * Required
		 */
		environment: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the deployment
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		original_environment: FormControl<string | null | undefined>,

		/** Required */
		payload: FormControl<string | null | undefined>,

		/** Specifies if the given environment is one that end-users directly interact with. Default: false. */
		production_environment: FormControl<boolean | null | undefined>,

		/**
		 * The ref to deploy. This can be a branch, tag, or sha.
		 * Required
		 */
		ref: FormControl<string | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/**
		 * Parameter to specify a task to execute
		 * Required
		 */
		task: FormControl<string | null | undefined>,

		/** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
		transient_environment: FormControl<boolean | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateDeploymentFormGroup() {
		return new FormGroup<DeploymentFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_environment: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			production_environment: new FormControl<boolean | null | undefined>(undefined),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			task: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transient_environment: new FormControl<boolean | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The status of a deployment. */
	export interface Deployment_status {

		/** Required */
		created_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/** Required */
		deployment_url: string;

		/**
		 * A short description of the status.
		 * Required
		 * Max length: 140
		 */
		description: string;

		/** The environment of the deployment that the status is for. */
		environment?: string | null;

		/** The URL for accessing your environment. */
		environment_url?: string | null;

		/** Required */
		id: number;

		/** The URL to associate with this status. */
		log_url?: string | null;

		/** Required */
		node_id: string;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;

		/** Required */
		repository_url: string;

		/**
		 * The state of the status.
		 * Required
		 */
		state: Deployment_statusState;

		/**
		 * Deprecated: the URL to associate with this status.
		 * Required
		 */
		target_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** The status of a deployment. */
	export interface Deployment_statusFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		deployment_url: FormControl<string | null | undefined>,

		/**
		 * A short description of the status.
		 * Required
		 * Max length: 140
		 */
		description: FormControl<string | null | undefined>,

		/** The environment of the deployment that the status is for. */
		environment: FormControl<string | null | undefined>,

		/** The URL for accessing your environment. */
		environment_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** The URL to associate with this status. */
		log_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/**
		 * The state of the status.
		 * Required
		 */
		state: FormControl<Deployment_statusState | null | undefined>,

		/**
		 * Deprecated: the URL to associate with this status.
		 * Required
		 */
		target_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateDeployment_statusFormGroup() {
		return new FormGroup<Deployment_statusFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			deployment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(140)]),
			environment: new FormControl<string | null | undefined>(undefined),
			environment_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			log_url: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Deployment_statusState | null | undefined>(undefined, [Validators.required]),
			target_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Deployment_statusState { error = 0, failure = 1, inactive = 2, pending = 3, success = 4, queued = 5, in_progress = 6 }


	/** Email */
	export interface Email {

		/** Required */
		email: string;

		/** Required */
		primary: boolean;

		/** Required */
		verified: boolean;

		/** Required */
		visibility: string;
	}

	/** Email */
	export interface EmailFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		primary: FormControl<boolean | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,

		/** Required */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateEmailFormGroup() {
		return new FormGroup<EmailFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object without any properties. */
	export interface Empty_object {
	}

	/** An object without any properties. */
	export interface Empty_objectFormProperties {
	}
	export function CreateEmpty_objectFormGroup() {
		return new FormGroup<Empty_objectFormProperties>({
		});

	}


	/** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. */
	export enum Enabled_organizations { all = 0, none = 1, selected = 2 }


	/** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
	export enum Enabled_repositories { all = 0, none = 1, selected = 2 }


	/** An enterprise account */
	export interface Enterprise {

		/** Required */
		avatar_url: string;

		/** Required */
		created_at: Date;

		/** A short description of the enterprise. */
		description?: string | null;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the enterprise
		 * Required
		 */
		id: number;

		/**
		 * The name of the enterprise.
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * The slug url identifier for the enterprise.
		 * Required
		 */
		slug: string;

		/** Required */
		updated_at: Date;

		/** The enterprise's website URL. */
		website_url?: string | null;
	}

	/** An enterprise account */
	export interface EnterpriseFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** A short description of the enterprise. */
		description: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the enterprise
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of the enterprise.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The slug url identifier for the enterprise.
		 * Required
		 */
		slug: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** The enterprise's website URL. */
		website_url: FormControl<string | null | undefined>,
	}
	export function CreateEnterpriseFormGroup() {
		return new FormGroup<EnterpriseFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slug: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			website_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_comment_overview {

		/** Required */
		total_commit_comments: number;

		/** Required */
		total_gist_comments: number;

		/** Required */
		total_issue_comments: number;

		/** Required */
		total_pull_request_comments: number;
	}
	export interface Enterprise_comment_overviewFormProperties {

		/** Required */
		total_commit_comments: FormControl<number | null | undefined>,

		/** Required */
		total_gist_comments: FormControl<number | null | undefined>,

		/** Required */
		total_issue_comments: FormControl<number | null | undefined>,

		/** Required */
		total_pull_request_comments: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_comment_overviewFormGroup() {
		return new FormGroup<Enterprise_comment_overviewFormProperties>({
			total_commit_comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_gist_comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_issue_comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_pull_request_comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_gist_overview {

		/** Required */
		private_gists: number;

		/** Required */
		public_gists: number;

		/** Required */
		total_gists: number;
	}
	export interface Enterprise_gist_overviewFormProperties {

		/** Required */
		private_gists: FormControl<number | null | undefined>,

		/** Required */
		public_gists: FormControl<number | null | undefined>,

		/** Required */
		total_gists: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_gist_overviewFormGroup() {
		return new FormGroup<Enterprise_gist_overviewFormProperties>({
			private_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_hook_overview {

		/** Required */
		active_hooks: number;

		/** Required */
		inactive_hooks: number;

		/** Required */
		total_hooks: number;
	}
	export interface Enterprise_hook_overviewFormProperties {

		/** Required */
		active_hooks: FormControl<number | null | undefined>,

		/** Required */
		inactive_hooks: FormControl<number | null | undefined>,

		/** Required */
		total_hooks: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_hook_overviewFormGroup() {
		return new FormGroup<Enterprise_hook_overviewFormProperties>({
			active_hooks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			inactive_hooks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_hooks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_issue_overview {

		/** Required */
		closed_issues: number;

		/** Required */
		open_issues: number;

		/** Required */
		total_issues: number;
	}
	export interface Enterprise_issue_overviewFormProperties {

		/** Required */
		closed_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		total_issues: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_issue_overviewFormGroup() {
		return new FormGroup<Enterprise_issue_overviewFormProperties>({
			closed_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_milestone_overview {

		/** Required */
		closed_milestones: number;

		/** Required */
		open_milestones: number;

		/** Required */
		total_milestones: number;
	}
	export interface Enterprise_milestone_overviewFormProperties {

		/** Required */
		closed_milestones: FormControl<number | null | undefined>,

		/** Required */
		open_milestones: FormControl<number | null | undefined>,

		/** Required */
		total_milestones: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_milestone_overviewFormGroup() {
		return new FormGroup<Enterprise_milestone_overviewFormProperties>({
			closed_milestones: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_milestones: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_milestones: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_organization_overview {

		/** Required */
		disabled_orgs: number;

		/** Required */
		total_orgs: number;

		/** Required */
		total_team_members: number;

		/** Required */
		total_teams: number;
	}
	export interface Enterprise_organization_overviewFormProperties {

		/** Required */
		disabled_orgs: FormControl<number | null | undefined>,

		/** Required */
		total_orgs: FormControl<number | null | undefined>,

		/** Required */
		total_team_members: FormControl<number | null | undefined>,

		/** Required */
		total_teams: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_organization_overviewFormGroup() {
		return new FormGroup<Enterprise_organization_overviewFormProperties>({
			disabled_orgs: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_orgs: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_team_members: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_teams: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_overview {
		comments?: Enterprise_comment_overview;
		gists?: Enterprise_gist_overview;
		hooks?: Enterprise_hook_overview;
		issues?: Enterprise_issue_overview;
		milestones?: Enterprise_milestone_overview;
		orgs?: Enterprise_organization_overview;
		pages?: Enterprise_page_overview;
		pulls?: Enterprise_pull_request_overview;
		repos?: Enterprise_repository_overview;
		users?: Enterprise_user_overview;
	}
	export interface Enterprise_overviewFormProperties {
	}
	export function CreateEnterprise_overviewFormGroup() {
		return new FormGroup<Enterprise_overviewFormProperties>({
		});

	}

	export interface Enterprise_page_overview {

		/** Required */
		total_pages: number;
	}
	export interface Enterprise_page_overviewFormProperties {

		/** Required */
		total_pages: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_page_overviewFormGroup() {
		return new FormGroup<Enterprise_page_overviewFormProperties>({
			total_pages: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_pull_request_overview {

		/** Required */
		mergeable_pulls: number;

		/** Required */
		merged_pulls: number;

		/** Required */
		total_pulls: number;

		/** Required */
		unmergeable_pulls: number;
	}
	export interface Enterprise_pull_request_overviewFormProperties {

		/** Required */
		mergeable_pulls: FormControl<number | null | undefined>,

		/** Required */
		merged_pulls: FormControl<number | null | undefined>,

		/** Required */
		total_pulls: FormControl<number | null | undefined>,

		/** Required */
		unmergeable_pulls: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_pull_request_overviewFormGroup() {
		return new FormGroup<Enterprise_pull_request_overviewFormProperties>({
			mergeable_pulls: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			merged_pulls: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_pulls: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			unmergeable_pulls: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_repository_overview {

		/** Required */
		fork_repos: number;

		/** Required */
		org_repos: number;

		/** Required */
		root_repos: number;

		/** Required */
		total_pushes: number;

		/** Required */
		total_repos: number;

		/** Required */
		total_wikis: number;
	}
	export interface Enterprise_repository_overviewFormProperties {

		/** Required */
		fork_repos: FormControl<number | null | undefined>,

		/** Required */
		org_repos: FormControl<number | null | undefined>,

		/** Required */
		root_repos: FormControl<number | null | undefined>,

		/** Required */
		total_pushes: FormControl<number | null | undefined>,

		/** Required */
		total_repos: FormControl<number | null | undefined>,

		/** Required */
		total_wikis: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_repository_overviewFormGroup() {
		return new FormGroup<Enterprise_repository_overviewFormProperties>({
			fork_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			org_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			root_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_pushes: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_wikis: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_user_overview {

		/** Required */
		admin_users: number;

		/** Required */
		suspended_users: number;

		/** Required */
		total_users: number;
	}
	export interface Enterprise_user_overviewFormProperties {

		/** Required */
		admin_users: FormControl<number | null | undefined>,

		/** Required */
		suspended_users: FormControl<number | null | undefined>,

		/** Required */
		total_users: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_user_overviewFormGroup() {
		return new FormGroup<Enterprise_user_overviewFormProperties>({
			admin_users: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			suspended_users: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_users: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_settings {
		enterprise?: Enterprise_settingsEnterprise;
		run_list?: Array<string>;
	}
	export interface Enterprise_settingsFormProperties {
	}
	export function CreateEnterprise_settingsFormGroup() {
		return new FormGroup<Enterprise_settingsFormProperties>({
		});

	}

	export interface Enterprise_settingsEnterprise {
		admin_password?: string | null;
		assets?: string | null;
		auth_mode?: string | null;
		avatar?: Enterprise_settingsEnterpriseAvatar;
		cas?: Enterprise_settingsEnterpriseCas;
		collectd?: Enterprise_settingsEnterpriseCollectd;
		configuration_id?: number | null;
		configuration_run_count?: number | null;
		customer?: Enterprise_settingsEnterpriseCustomer;
		expire_sessions?: boolean | null;
		github_hostname?: string | null;
		github_oauth?: Enterprise_settingsEnterpriseGithub_oauth;
		github_ssl?: Enterprise_settingsEnterpriseGithub_ssl;
		http_proxy?: string | null;
		identicons_host?: string | null;
		ldap?: Enterprise_settingsEnterpriseLdap;
		license?: Enterprise_settingsEnterpriseLicense;
		load_balancer?: string | null;
		mapping?: Enterprise_settingsEnterpriseMapping;
		ntp?: Enterprise_settingsEnterpriseNtp;
		pages?: Enterprise_settingsEnterprisePages;
		private_mode?: boolean | null;
		public_pages?: boolean | null;
		saml?: Enterprise_settingsEnterpriseSaml;
		signup_enabled?: boolean | null;
		smtp?: Enterprise_settingsEnterpriseSmtp;
		snmp?: Enterprise_settingsEnterpriseSnmp;
		subdomain_isolation?: boolean | null;
		syslog?: Enterprise_settingsEnterpriseSyslog;
		timezone?: string | null;
	}
	export interface Enterprise_settingsEnterpriseFormProperties {
		admin_password: FormControl<string | null | undefined>,
		assets: FormControl<string | null | undefined>,
		auth_mode: FormControl<string | null | undefined>,
		configuration_id: FormControl<number | null | undefined>,
		configuration_run_count: FormControl<number | null | undefined>,
		expire_sessions: FormControl<boolean | null | undefined>,
		github_hostname: FormControl<string | null | undefined>,
		http_proxy: FormControl<string | null | undefined>,
		identicons_host: FormControl<string | null | undefined>,
		load_balancer: FormControl<string | null | undefined>,
		private_mode: FormControl<boolean | null | undefined>,
		public_pages: FormControl<boolean | null | undefined>,
		signup_enabled: FormControl<boolean | null | undefined>,
		subdomain_isolation: FormControl<boolean | null | undefined>,
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseFormProperties>({
			admin_password: new FormControl<string | null | undefined>(undefined),
			assets: new FormControl<string | null | undefined>(undefined),
			auth_mode: new FormControl<string | null | undefined>(undefined),
			configuration_id: new FormControl<number | null | undefined>(undefined),
			configuration_run_count: new FormControl<number | null | undefined>(undefined),
			expire_sessions: new FormControl<boolean | null | undefined>(undefined),
			github_hostname: new FormControl<string | null | undefined>(undefined),
			http_proxy: new FormControl<string | null | undefined>(undefined),
			identicons_host: new FormControl<string | null | undefined>(undefined),
			load_balancer: new FormControl<string | null | undefined>(undefined),
			private_mode: new FormControl<boolean | null | undefined>(undefined),
			public_pages: new FormControl<boolean | null | undefined>(undefined),
			signup_enabled: new FormControl<boolean | null | undefined>(undefined),
			subdomain_isolation: new FormControl<boolean | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseAvatar {
		enabled?: boolean | null;
		uri?: string | null;
	}
	export interface Enterprise_settingsEnterpriseAvatarFormProperties {
		enabled: FormControl<boolean | null | undefined>,
		uri: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseAvatarFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseAvatarFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseCas {
		url?: string | null;
	}
	export interface Enterprise_settingsEnterpriseCasFormProperties {
		url: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseCasFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseCasFormProperties>({
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseCollectd {
		enabled?: boolean | null;
		encryption?: string | null;
		password?: string | null;
		port?: number | null;
		server?: string | null;
		username?: string | null;
	}
	export interface Enterprise_settingsEnterpriseCollectdFormProperties {
		enabled: FormControl<boolean | null | undefined>,
		encryption: FormControl<string | null | undefined>,
		password: FormControl<string | null | undefined>,
		port: FormControl<number | null | undefined>,
		server: FormControl<string | null | undefined>,
		username: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseCollectdFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseCollectdFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			encryption: new FormControl<string | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			server: new FormControl<string | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseCustomer {
		email?: string | null;
		name?: string | null;
		public_key_data?: string | null;
		secret_key_data?: string | null;
		uuid?: string | null;
	}
	export interface Enterprise_settingsEnterpriseCustomerFormProperties {
		email: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		public_key_data: FormControl<string | null | undefined>,
		secret_key_data: FormControl<string | null | undefined>,
		uuid: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseCustomerFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseCustomerFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			public_key_data: new FormControl<string | null | undefined>(undefined),
			secret_key_data: new FormControl<string | null | undefined>(undefined),
			uuid: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseGithub_oauth {
		client_id?: string | null;
		client_secret?: string | null;
		organization_name?: string | null;
		organization_team?: string | null;
	}
	export interface Enterprise_settingsEnterpriseGithub_oauthFormProperties {
		client_id: FormControl<string | null | undefined>,
		client_secret: FormControl<string | null | undefined>,
		organization_name: FormControl<string | null | undefined>,
		organization_team: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseGithub_oauthFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseGithub_oauthFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_secret: new FormControl<string | null | undefined>(undefined),
			organization_name: new FormControl<string | null | undefined>(undefined),
			organization_team: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseGithub_ssl {
		cert?: string | null;
		enabled?: boolean | null;
		key?: string | null;
	}
	export interface Enterprise_settingsEnterpriseGithub_sslFormProperties {
		cert: FormControl<string | null | undefined>,
		enabled: FormControl<boolean | null | undefined>,
		key: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseGithub_sslFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseGithub_sslFormProperties>({
			cert: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseLdap {
		admin_group?: string | null;
		base?: Array<string>;
		bind_dn?: string | null;
		host?: string | null;
		method?: string | null;
		password?: string | null;
		port?: number | null;
		posix_support?: boolean | null;
		profile?: Enterprise_settingsEnterpriseLdapProfile;
		reconciliation?: Enterprise_settingsEnterpriseLdapReconciliation;
		recursive_group_search?: boolean | null;
		search_strategy?: string | null;
		sync_enabled?: boolean | null;
		team_sync_interval?: number | null;
		uid?: string | null;
		user_groups?: Array<string>;
		user_sync_emails?: boolean | null;
		user_sync_interval?: number | null;
		user_sync_keys?: boolean | null;
		virtual_attribute_enabled?: boolean | null;
	}
	export interface Enterprise_settingsEnterpriseLdapFormProperties {
		admin_group: FormControl<string | null | undefined>,
		bind_dn: FormControl<string | null | undefined>,
		host: FormControl<string | null | undefined>,
		method: FormControl<string | null | undefined>,
		password: FormControl<string | null | undefined>,
		port: FormControl<number | null | undefined>,
		posix_support: FormControl<boolean | null | undefined>,
		recursive_group_search: FormControl<boolean | null | undefined>,
		search_strategy: FormControl<string | null | undefined>,
		sync_enabled: FormControl<boolean | null | undefined>,
		team_sync_interval: FormControl<number | null | undefined>,
		uid: FormControl<string | null | undefined>,
		user_sync_emails: FormControl<boolean | null | undefined>,
		user_sync_interval: FormControl<number | null | undefined>,
		user_sync_keys: FormControl<boolean | null | undefined>,
		virtual_attribute_enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseLdapFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseLdapFormProperties>({
			admin_group: new FormControl<string | null | undefined>(undefined),
			bind_dn: new FormControl<string | null | undefined>(undefined),
			host: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<string | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			posix_support: new FormControl<boolean | null | undefined>(undefined),
			recursive_group_search: new FormControl<boolean | null | undefined>(undefined),
			search_strategy: new FormControl<string | null | undefined>(undefined),
			sync_enabled: new FormControl<boolean | null | undefined>(undefined),
			team_sync_interval: new FormControl<number | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
			user_sync_emails: new FormControl<boolean | null | undefined>(undefined),
			user_sync_interval: new FormControl<number | null | undefined>(undefined),
			user_sync_keys: new FormControl<boolean | null | undefined>(undefined),
			virtual_attribute_enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseLdapProfile {
		key?: string | null;
		mail?: string | null;
		name?: string | null;
		uid?: string | null;
	}
	export interface Enterprise_settingsEnterpriseLdapProfileFormProperties {
		key: FormControl<string | null | undefined>,
		mail: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		uid: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseLdapProfileFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseLdapProfileFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			mail: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseLdapReconciliation {
		org?: string | null;
		user?: string | null;
	}
	export interface Enterprise_settingsEnterpriseLdapReconciliationFormProperties {
		org: FormControl<string | null | undefined>,
		user: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseLdapReconciliationFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseLdapReconciliationFormProperties>({
			org: new FormControl<string | null | undefined>(undefined),
			user: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseLicense {
		cluster_support?: boolean | null;
		evaluation?: boolean | null;
		expire_at?: string | null;
		perpetual?: boolean | null;
		seats?: number | null;
		ssh_allowed?: boolean | null;
		support_key?: string | null;
		unlimited_seating?: boolean | null;
	}
	export interface Enterprise_settingsEnterpriseLicenseFormProperties {
		cluster_support: FormControl<boolean | null | undefined>,
		evaluation: FormControl<boolean | null | undefined>,
		expire_at: FormControl<string | null | undefined>,
		perpetual: FormControl<boolean | null | undefined>,
		seats: FormControl<number | null | undefined>,
		ssh_allowed: FormControl<boolean | null | undefined>,
		support_key: FormControl<string | null | undefined>,
		unlimited_seating: FormControl<boolean | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseLicenseFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseLicenseFormProperties>({
			cluster_support: new FormControl<boolean | null | undefined>(undefined),
			evaluation: new FormControl<boolean | null | undefined>(undefined),
			expire_at: new FormControl<string | null | undefined>(undefined),
			perpetual: new FormControl<boolean | null | undefined>(undefined),
			seats: new FormControl<number | null | undefined>(undefined),
			ssh_allowed: new FormControl<boolean | null | undefined>(undefined),
			support_key: new FormControl<string | null | undefined>(undefined),
			unlimited_seating: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseMapping {
		basemap?: string | null;
		enabled?: boolean | null;
		tileserver?: string | null;
		token?: string | null;
	}
	export interface Enterprise_settingsEnterpriseMappingFormProperties {
		basemap: FormControl<string | null | undefined>,
		enabled: FormControl<boolean | null | undefined>,
		tileserver: FormControl<string | null | undefined>,
		token: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseMappingFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseMappingFormProperties>({
			basemap: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			tileserver: new FormControl<string | null | undefined>(undefined),
			token: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseNtp {
		primary_server?: string | null;
		secondary_server?: string | null;
	}
	export interface Enterprise_settingsEnterpriseNtpFormProperties {
		primary_server: FormControl<string | null | undefined>,
		secondary_server: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseNtpFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseNtpFormProperties>({
			primary_server: new FormControl<string | null | undefined>(undefined),
			secondary_server: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterprisePages {
		enabled?: boolean | null;
	}
	export interface Enterprise_settingsEnterprisePagesFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterprisePagesFormGroup() {
		return new FormGroup<Enterprise_settingsEnterprisePagesFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseSaml {
		certificate?: string | null;
		certificate_path?: string | null;
		disable_admin_demote?: boolean | null;
		idp_initiated_sso?: boolean | null;
		issuer?: string | null;
		sso_url?: string | null;
	}
	export interface Enterprise_settingsEnterpriseSamlFormProperties {
		certificate: FormControl<string | null | undefined>,
		certificate_path: FormControl<string | null | undefined>,
		disable_admin_demote: FormControl<boolean | null | undefined>,
		idp_initiated_sso: FormControl<boolean | null | undefined>,
		issuer: FormControl<string | null | undefined>,
		sso_url: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseSamlFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseSamlFormProperties>({
			certificate: new FormControl<string | null | undefined>(undefined),
			certificate_path: new FormControl<string | null | undefined>(undefined),
			disable_admin_demote: new FormControl<boolean | null | undefined>(undefined),
			idp_initiated_sso: new FormControl<boolean | null | undefined>(undefined),
			issuer: new FormControl<string | null | undefined>(undefined),
			sso_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseSmtp {
		address?: string | null;
		authentication?: string | null;
		'discard-to-noreply-address'?: boolean | null;
		domain?: string | null;
		enable_starttls_auto?: boolean | null;
		enabled?: boolean | null;
		noreply_address?: string | null;
		password?: string | null;
		port?: string | null;
		support_address?: string | null;
		support_address_type?: string | null;
		user_name?: string | null;
		username?: string | null;
	}
	export interface Enterprise_settingsEnterpriseSmtpFormProperties {
		address: FormControl<string | null | undefined>,
		authentication: FormControl<string | null | undefined>,
		'discard-to-noreply-address': FormControl<boolean | null | undefined>,
		domain: FormControl<string | null | undefined>,
		enable_starttls_auto: FormControl<boolean | null | undefined>,
		enabled: FormControl<boolean | null | undefined>,
		noreply_address: FormControl<string | null | undefined>,
		password: FormControl<string | null | undefined>,
		port: FormControl<string | null | undefined>,
		support_address: FormControl<string | null | undefined>,
		support_address_type: FormControl<string | null | undefined>,
		user_name: FormControl<string | null | undefined>,
		username: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseSmtpFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseSmtpFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			authentication: new FormControl<string | null | undefined>(undefined),
			'discard-to-noreply-address': new FormControl<boolean | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			enable_starttls_auto: new FormControl<boolean | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			noreply_address: new FormControl<string | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<string | null | undefined>(undefined),
			support_address: new FormControl<string | null | undefined>(undefined),
			support_address_type: new FormControl<string | null | undefined>(undefined),
			user_name: new FormControl<string | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseSnmp {
		community?: string | null;
		enabled?: boolean | null;
	}
	export interface Enterprise_settingsEnterpriseSnmpFormProperties {
		community: FormControl<string | null | undefined>,
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseSnmpFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseSnmpFormProperties>({
			community: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Enterprise_settingsEnterpriseSyslog {
		enabled?: boolean | null;
		protocol_name?: string | null;
		server?: string | null;
	}
	export interface Enterprise_settingsEnterpriseSyslogFormProperties {
		enabled: FormControl<boolean | null | undefined>,
		protocol_name: FormControl<string | null | undefined>,
		server: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_settingsEnterpriseSyslogFormGroup() {
		return new FormGroup<Enterprise_settingsEnterpriseSyslogFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			protocol_name: new FormControl<string | null | undefined>(undefined),
			server: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Event */
	export interface Event {

		/**
		 * Actor
		 * Required
		 */
		actor: Actor;

		/** Required */
		created_at: Date;

		/** Required */
		id: string;

		/** Actor */
		org?: Actor;

		/** Required */
		payload: EventPayload;

		/** Required */
		public: boolean;

		/** Required */
		repo: EventRepo;

		/** Required */
		type: string;
	}

	/** Event */
	export interface EventFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<string | null | undefined>,

		/** Required */
		public: FormControl<boolean | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,
	}
	export function CreateEventFormGroup() {
		return new FormGroup<EventFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EventPayload {
		action?: string | null;

		/** Comments provide a way for people to collaborate on an issue. */
		comment?: Issue_comment;

		/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
		issue?: Issue;
		EventPayloadPages?: Array<EventPayloadPages>;
	}
	export interface EventPayloadFormProperties {
		action: FormControl<string | null | undefined>,
	}
	export function CreateEventPayloadFormGroup() {
		return new FormGroup<EventPayloadFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Comments provide a way for people to collaborate on an issue. */
	export interface Issue_comment {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/** Contents of the issue comment */
		body?: string | null;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		created_at: Date;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the issue comment
		 * Required
		 */
		id: number;

		/** Required */
		issue_url: string;

		/** Required */
		node_id: string;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;
		reactions?: Reaction_rollup;

		/** Required */
		updated_at: Date;

		/**
		 * URL for the issue comment
		 * Required
		 */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Comments provide a way for people to collaborate on an issue. */
	export interface Issue_commentFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Contents of the issue comment */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the issue comment
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		issue_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * URL for the issue comment
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssue_commentFormGroup() {
		return new FormGroup<Issue_commentFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			issue_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
	export interface Issue {
		active_lock_reason?: string | null;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Nullable_simple_user;
		assignees?: Array<Simple_user>;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/** Contents of the issue */
		body?: string | null;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		closed_at: Date;

		/** Simple User */
		closed_by?: Nullable_simple_user;

		/** Required */
		comments: number;

		/** Required */
		comments_url: string;

		/** Required */
		created_at: Date;
		draft?: boolean | null;

		/** Required */
		events_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/**
		 * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
		 * Required
		 */
		labels: Array<string>;

		/** Required */
		labels_url: string;

		/** Required */
		locked: boolean;

		/**
		 * A collection of related issues and pull requests.
		 * Required
		 */
		milestone: Nullable_milestone;

		/** Required */
		node_id: string;

		/**
		 * Number uniquely identifying the issue within its repository
		 * Required
		 */
		number: number;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;
		pull_request?: IssuePull_request;
		reactions?: Reaction_rollup;

		/** A git repository */
		repository?: Repository;

		/** Required */
		repository_url: string;

		/**
		 * State of the issue; either 'open' or 'closed'
		 * Required
		 */
		state: string;

		/** The reason for the current state */
		state_reason?: string | null;
		timeline_url?: string | null;

		/**
		 * Title of the issue
		 * Required
		 */
		title: string;

		/** Required */
		updated_at: Date;

		/**
		 * URL for the issue
		 * Required
		 */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
	export interface IssueFormProperties {
		active_lock_reason: FormControl<string | null | undefined>,

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Contents of the issue */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		comments: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		draft: FormControl<boolean | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		locked: FormControl<boolean | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Number uniquely identifying the issue within its repository
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/**
		 * State of the issue; either 'open' or 'closed'
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/** The reason for the current state */
		state_reason: FormControl<string | null | undefined>,
		timeline_url: FormControl<string | null | undefined>,

		/**
		 * Title of the issue
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * URL for the issue
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssueFormGroup() {
		return new FormGroup<IssueFormProperties>({
			active_lock_reason: new FormControl<string | null | undefined>(undefined),
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			draft: new FormControl<boolean | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			locked: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state_reason: new FormControl<string | null | undefined>(undefined),
			timeline_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A collection of related issues and pull requests. */
	export interface Nullable_milestone {

		/** Required */
		closed_at: Date;

		/** Required */
		closed_issues: number;

		/** Required */
		created_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/** Required */
		description: string;

		/** Required */
		due_on: Date;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		labels_url: string;

		/** Required */
		node_id: string;

		/**
		 * The number of the milestone.
		 * Required
		 */
		number: number;

		/** Required */
		open_issues: number;

		/**
		 * The state of the milestone.
		 * Required
		 */
		state: Nullable_milestoneState;

		/**
		 * The title of the milestone.
		 * Required
		 */
		title: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A collection of related issues and pull requests. */
	export interface Nullable_milestoneFormProperties {

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		closed_issues: FormControl<number | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		due_on: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The number of the milestone.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/**
		 * The state of the milestone.
		 * Required
		 */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/**
		 * The title of the milestone.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_milestoneFormGroup() {
		return new FormGroup<Nullable_milestoneFormProperties>({
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			closed_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			due_on: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Nullable_milestoneState { open = 0, closed = 1 }

	export interface IssuePull_request {

		/** Required */
		diff_url: string;

		/** Required */
		html_url: string;
		merged_at?: Date | null;

		/** Required */
		patch_url: string;

		/** Required */
		url: string;
	}
	export interface IssuePull_requestFormProperties {

		/** Required */
		diff_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,
		merged_at: FormControl<Date | null | undefined>,

		/** Required */
		patch_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssuePull_requestFormGroup() {
		return new FormGroup<IssuePull_requestFormProperties>({
			diff_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merged_at: new FormControl<Date | null | undefined>(undefined),
			patch_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EventPayloadPages {
		action?: string | null;
		html_url?: string | null;
		page_name?: string | null;
		sha?: string | null;
		summary?: string | null;
		title?: string | null;
	}
	export interface EventPayloadPagesFormProperties {
		action: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		page_name: FormControl<string | null | undefined>,
		sha: FormControl<string | null | undefined>,
		summary: FormControl<string | null | undefined>,
		title: FormControl<string | null | undefined>,
	}
	export function CreateEventPayloadPagesFormGroup() {
		return new FormGroup<EventPayloadPagesFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			page_name: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			summary: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface EventRepo {

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}
	export interface EventRepoFormProperties {

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateEventRepoFormGroup() {
		return new FormGroup<EventRepoFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Feed */
	export interface Feed {

		/** Required */
		_links: Feed_links;
		current_user_actor_url?: string | null;
		current_user_organization_url?: string | null;
		current_user_organization_urls?: Array<string>;
		current_user_public_url?: string | null;
		current_user_url?: string | null;
		security_advisories_url?: string | null;

		/** Required */
		timeline_url: string;

		/** Required */
		user_url: string;
	}

	/** Feed */
	export interface FeedFormProperties {
		current_user_actor_url: FormControl<string | null | undefined>,
		current_user_organization_url: FormControl<string | null | undefined>,
		current_user_public_url: FormControl<string | null | undefined>,
		current_user_url: FormControl<string | null | undefined>,
		security_advisories_url: FormControl<string | null | undefined>,

		/** Required */
		timeline_url: FormControl<string | null | undefined>,

		/** Required */
		user_url: FormControl<string | null | undefined>,
	}
	export function CreateFeedFormGroup() {
		return new FormGroup<FeedFormProperties>({
			current_user_actor_url: new FormControl<string | null | undefined>(undefined),
			current_user_organization_url: new FormControl<string | null | undefined>(undefined),
			current_user_public_url: new FormControl<string | null | undefined>(undefined),
			current_user_url: new FormControl<string | null | undefined>(undefined),
			security_advisories_url: new FormControl<string | null | undefined>(undefined),
			timeline_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Feed_links {

		/** Hypermedia Link with Type */
		current_user?: Link_with_type;

		/** Hypermedia Link with Type */
		current_user_actor?: Link_with_type;

		/** Hypermedia Link with Type */
		current_user_organization?: Link_with_type;
		current_user_organizations?: Array<Link_with_type>;

		/** Hypermedia Link with Type */
		current_user_public?: Link_with_type;

		/** Hypermedia Link with Type */
		security_advisories?: Link_with_type;

		/**
		 * Hypermedia Link with Type
		 * Required
		 */
		timeline: Link_with_type;

		/**
		 * Hypermedia Link with Type
		 * Required
		 */
		user: Link_with_type;
	}
	export interface Feed_linksFormProperties {
	}
	export function CreateFeed_linksFormGroup() {
		return new FormGroup<Feed_linksFormProperties>({
		});

	}


	/** Hypermedia Link with Type */
	export interface Link_with_type {

		/** Required */
		href: string;

		/** Required */
		type: string;
	}

	/** Hypermedia Link with Type */
	export interface Link_with_typeFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,
	}
	export function CreateLink_with_typeFormGroup() {
		return new FormGroup<Link_with_typeFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** File Commit */
	export interface File_commit {

		/** Required */
		commit: File_commitCommit;

		/** Required */
		content: File_commitContent;
	}

	/** File Commit */
	export interface File_commitFormProperties {
	}
	export function CreateFile_commitFormGroup() {
		return new FormGroup<File_commitFormProperties>({
		});

	}

	export interface File_commitCommit {
		author?: File_commitCommitAuthor;
		committer?: File_commitCommitCommitter;
		html_url?: string | null;
		message?: string | null;
		node_id?: string | null;
		File_commitCommitParents?: Array<File_commitCommitParents>;
		sha?: string | null;
		tree?: File_commitCommitTree;
		url?: string | null;
		verification?: File_commitCommitVerification;
	}
	export interface File_commitCommitFormProperties {
		html_url: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		sha: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitCommitFormGroup() {
		return new FormGroup<File_commitCommitFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface File_commitCommitAuthor {
		date?: string | null;
		email?: string | null;
		name?: string | null;
	}
	export interface File_commitCommitAuthorFormProperties {
		date: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitCommitAuthorFormGroup() {
		return new FormGroup<File_commitCommitAuthorFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface File_commitCommitCommitter {
		date?: string | null;
		email?: string | null;
		name?: string | null;
	}
	export interface File_commitCommitCommitterFormProperties {
		date: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitCommitCommitterFormGroup() {
		return new FormGroup<File_commitCommitCommitterFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface File_commitCommitParents {
		html_url?: string | null;
		sha?: string | null;
		url?: string | null;
	}
	export interface File_commitCommitParentsFormProperties {
		html_url: FormControl<string | null | undefined>,
		sha: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitCommitParentsFormGroup() {
		return new FormGroup<File_commitCommitParentsFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface File_commitCommitTree {
		sha?: string | null;
		url?: string | null;
	}
	export interface File_commitCommitTreeFormProperties {
		sha: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitCommitTreeFormGroup() {
		return new FormGroup<File_commitCommitTreeFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface File_commitCommitVerification {
		payload?: string | null;
		reason?: string | null;
		signature?: string | null;
		verified?: boolean | null;
	}
	export interface File_commitCommitVerificationFormProperties {
		payload: FormControl<string | null | undefined>,
		reason: FormControl<string | null | undefined>,
		signature: FormControl<string | null | undefined>,
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateFile_commitCommitVerificationFormGroup() {
		return new FormGroup<File_commitCommitVerificationFormProperties>({
			payload: new FormControl<string | null | undefined>(undefined),
			reason: new FormControl<string | null | undefined>(undefined),
			signature: new FormControl<string | null | undefined>(undefined),
			verified: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface File_commitContent {
		_links?: File_commitContent_links;
		download_url?: string | null;
		git_url?: string | null;
		html_url?: string | null;
		name?: string | null;
		path?: string | null;
		sha?: string | null;
		size?: number | null;
		type?: string | null;
		url?: string | null;
	}
	export interface File_commitContentFormProperties {
		download_url: FormControl<string | null | undefined>,
		git_url: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		path: FormControl<string | null | undefined>,
		sha: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitContentFormGroup() {
		return new FormGroup<File_commitContentFormProperties>({
			download_url: new FormControl<string | null | undefined>(undefined),
			git_url: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface File_commitContent_links {
		git?: string | null;
		html?: string | null;
		self?: string | null;
	}
	export interface File_commitContent_linksFormProperties {
		git: FormControl<string | null | undefined>,
		html: FormControl<string | null | undefined>,
		self: FormControl<string | null | undefined>,
	}
	export function CreateFile_commitContent_linksFormGroup() {
		return new FormGroup<File_commitContent_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined),
			html: new FormControl<string | null | undefined>(undefined),
			self: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Full Repository */
	export interface Full_repository {
		allow_forking?: boolean | null;
		allow_merge_commit?: boolean | null;
		allow_rebase_merge?: boolean | null;
		allow_squash_merge?: boolean | null;
		allow_update_branch?: boolean | null;

		/** Whether anonymous git access is allowed. */
		anonymous_access_enabled?: boolean | null;

		/** Required */
		archive_url: string;

		/** Required */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Code of Conduct Simple */
		code_of_conduct?: Code_of_conduct_simple;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		default_branch: string;
		delete_branch_on_merge?: boolean | null;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/** Required */
		has_downloads: boolean;

		/** Required */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/** Required */
		has_projects: boolean;

		/** Required */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/** Required */
		name: string;

		/** Required */
		network_count: number;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/** Simple User */
		organization?: Nullable_simple_user;

		/**
		 * Simple User
		 * Required
		 */
		owner: Simple_user;

		/** A git repository */
		parent?: Repository;
		permissions?: Full_repositoryPermissions;

		/** Required */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		size: number;

		/** A git repository */
		source?: Repository;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;

		/** Required */
		statuses_url: string;

		/** Required */
		subscribers_count: number;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;

		/** A git repository */
		template_repository?: Nullable_repository;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}

	/** Full Repository */
	export interface Full_repositoryFormProperties {
		allow_forking: FormControl<boolean | null | undefined>,
		allow_merge_commit: FormControl<boolean | null | undefined>,
		allow_rebase_merge: FormControl<boolean | null | undefined>,
		allow_squash_merge: FormControl<boolean | null | undefined>,
		allow_update_branch: FormControl<boolean | null | undefined>,

		/** Whether anonymous git access is allowed. */
		anonymous_access_enabled: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/** Required */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		default_branch: FormControl<string | null | undefined>,
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		has_downloads: FormControl<boolean | null | undefined>,

		/** Required */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/** Required */
		has_projects: FormControl<boolean | null | undefined>,

		/** Required */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		network_count: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/** Required */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/** Required */
		subscribers_count: FormControl<number | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateFull_repositoryFormGroup() {
		return new FormGroup<Full_repositoryFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_update_branch: new FormControl<boolean | null | undefined>(undefined),
			anonymous_access_enabled: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Full_repositoryPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Full_repositoryPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateFull_repositoryPermissionsFormGroup() {
		return new FormGroup<Full_repositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A comment made to a gist. */
	export interface Gist_comment {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/**
		 * The comment text.
		 * Required
		 * Max length: 65535
		 */
		body: string;

		/** Required */
		created_at: Date;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** A comment made to a gist. */
	export interface Gist_commentFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/**
		 * The comment text.
		 * Required
		 * Max length: 65535
		 */
		body: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGist_commentFormGroup() {
		return new FormGroup<Gist_commentFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(65535)]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Gist Commit */
	export interface Gist_commit {

		/** Required */
		change_status: Gist_commitChange_status;

		/** Required */
		committed_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;

		/** Required */
		version: string;
	}

	/** Gist Commit */
	export interface Gist_commitFormProperties {

		/** Required */
		committed_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGist_commitFormGroup() {
		return new FormGroup<Gist_commitFormProperties>({
			committed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			version: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Gist_commitChange_status {
		additions?: number | null;
		deletions?: number | null;
		total?: number | null;
	}
	export interface Gist_commitChange_statusFormProperties {
		additions: FormControl<number | null | undefined>,
		deletions: FormControl<number | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateGist_commitChange_statusFormGroup() {
		return new FormGroup<Gist_commitChange_statusFormProperties>({
			additions: new FormControl<number | null | undefined>(undefined),
			deletions: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Gist History */
	export interface Gist_history {
		change_status?: Gist_historyChange_status;
		committed_at?: Date | null;
		url?: string | null;

		/** Simple User */
		user?: Nullable_simple_user;
		version?: string | null;
	}

	/** Gist History */
	export interface Gist_historyFormProperties {
		committed_at: FormControl<Date | null | undefined>,
		url: FormControl<string | null | undefined>,
		version: FormControl<string | null | undefined>,
	}
	export function CreateGist_historyFormGroup() {
		return new FormGroup<Gist_historyFormProperties>({
			committed_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Gist_historyChange_status {
		additions?: number | null;
		deletions?: number | null;
		total?: number | null;
	}
	export interface Gist_historyChange_statusFormProperties {
		additions: FormControl<number | null | undefined>,
		deletions: FormControl<number | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateGist_historyChange_statusFormGroup() {
		return new FormGroup<Gist_historyChange_statusFormProperties>({
			additions: new FormControl<number | null | undefined>(undefined),
			deletions: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Gist Simple */
	export interface Gist_simple {
		comments?: number | null;
		comments_url?: string | null;
		commits_url?: string | null;
		created_at?: string | null;
		description?: string | null;
		files?: {[id: string]: Gist_simpleFiles };

		/** Gist */
		fork_of?: Gist_simpleFork_of;
		Gist_simpleForks?: Array<Gist_simpleForks>;
		forks_url?: string | null;
		git_pull_url?: string | null;
		git_push_url?: string | null;
		history?: Array<Gist_history>;
		html_url?: string | null;
		id?: string | null;
		node_id?: string | null;

		/** Simple User */
		owner?: Simple_user;
		public?: boolean | null;
		truncated?: boolean | null;
		updated_at?: string | null;
		url?: string | null;
		user?: string | null;
	}

	/** Gist Simple */
	export interface Gist_simpleFormProperties {
		comments: FormControl<number | null | undefined>,
		comments_url: FormControl<string | null | undefined>,
		commits_url: FormControl<string | null | undefined>,
		created_at: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,
		files: FormControl<{[id: string]: Gist_simpleFiles } | null | undefined>,
		forks_url: FormControl<string | null | undefined>,
		git_pull_url: FormControl<string | null | undefined>,
		git_push_url: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		public: FormControl<boolean | null | undefined>,
		truncated: FormControl<boolean | null | undefined>,
		updated_at: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
		user: FormControl<string | null | undefined>,
	}
	export function CreateGist_simpleFormGroup() {
		return new FormGroup<Gist_simpleFormProperties>({
			comments: new FormControl<number | null | undefined>(undefined),
			comments_url: new FormControl<string | null | undefined>(undefined),
			commits_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			files: new FormControl<{[id: string]: Gist_simpleFiles } | null | undefined>(undefined),
			forks_url: new FormControl<string | null | undefined>(undefined),
			git_pull_url: new FormControl<string | null | undefined>(undefined),
			git_push_url: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined),
			truncated: new FormControl<boolean | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			user: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Gist_simpleFiles {
		content?: string | null;
		filename?: string | null;
		language?: string | null;
		raw_url?: string | null;
		size?: number | null;
		truncated?: boolean | null;
		type?: string | null;
	}
	export interface Gist_simpleFilesFormProperties {
		content: FormControl<string | null | undefined>,
		filename: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,
		raw_url: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		truncated: FormControl<boolean | null | undefined>,
		type: FormControl<string | null | undefined>,
	}
	export function CreateGist_simpleFilesFormGroup() {
		return new FormGroup<Gist_simpleFilesFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			filename: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			raw_url: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			truncated: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Gist_simpleFork_of {

		/** Required */
		comments: number;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/** Required */
		files: {[id: string]: Gist_simpleFork_ofFiles };
		forks?: Array<string>;

		/** Required */
		forks_url: string;

		/** Required */
		git_pull_url: string;

		/** Required */
		git_push_url: string;
		history?: Array<string>;

		/** Required */
		html_url: string;

		/** Required */
		id: string;

		/** Required */
		node_id: string;

		/** Simple User */
		owner?: Nullable_simple_user;

		/** Required */
		public: boolean;
		truncated?: boolean | null;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}
	export interface Gist_simpleFork_ofFormProperties {

		/** Required */
		comments: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		files: FormControl<{[id: string]: Gist_simpleFork_ofFiles } | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		git_pull_url: FormControl<string | null | undefined>,

		/** Required */
		git_push_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		public: FormControl<boolean | null | undefined>,
		truncated: FormControl<boolean | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGist_simpleFork_ofFormGroup() {
		return new FormGroup<Gist_simpleFork_ofFormProperties>({
			comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			files: new FormControl<{[id: string]: Gist_simpleFork_ofFiles } | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_pull_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_push_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			truncated: new FormControl<boolean | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Gist_simpleFork_ofFiles {
		filename?: string | null;
		language?: string | null;
		raw_url?: string | null;
		size?: number | null;
		type?: string | null;
	}
	export interface Gist_simpleFork_ofFilesFormProperties {
		filename: FormControl<string | null | undefined>,
		language: FormControl<string | null | undefined>,
		raw_url: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		type: FormControl<string | null | undefined>,
	}
	export function CreateGist_simpleFork_ofFilesFormGroup() {
		return new FormGroup<Gist_simpleFork_ofFilesFormProperties>({
			filename: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined),
			raw_url: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Gist_simpleForks {
		created_at?: Date | null;
		id?: string | null;
		updated_at?: Date | null;
		url?: string | null;

		/** Public User */
		user?: Public_user;
	}
	export interface Gist_simpleForksFormProperties {
		created_at: FormControl<Date | null | undefined>,
		id: FormControl<string | null | undefined>,
		updated_at: FormControl<Date | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateGist_simpleForksFormGroup() {
		return new FormGroup<Gist_simpleForksFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Public User */
	export interface Public_user {

		/** Required */
		avatar_url: string;

		/** Required */
		bio: string;

		/** Required */
		blog: string;
		collaborators?: number | null;

		/** Required */
		company: string;

		/** Required */
		created_at: Date;
		disk_usage?: number | null;

		/** Required */
		email: string;

		/** Required */
		events_url: string;

		/** Required */
		followers: number;

		/** Required */
		followers_url: string;

		/** Required */
		following: number;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		hireable: boolean;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		location: string;

		/** Required */
		login: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;
		owned_private_repos?: number | null;
		plan?: Public_userPlan;
		private_gists?: number | null;

		/** Required */
		public_gists: number;

		/** Required */
		public_repos: number;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;
		suspended_at?: Date | null;
		total_private_repos?: number | null;
		twitter_username?: string | null;

		/** Required */
		type: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Public User */
	export interface Public_userFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		bio: FormControl<string | null | undefined>,

		/** Required */
		blog: FormControl<string | null | undefined>,
		collaborators: FormControl<number | null | undefined>,

		/** Required */
		company: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		disk_usage: FormControl<number | null | undefined>,

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers: FormControl<number | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following: FormControl<number | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		hireable: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		location: FormControl<string | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,
		owned_private_repos: FormControl<number | null | undefined>,
		private_gists: FormControl<number | null | undefined>,

		/** Required */
		public_gists: FormControl<number | null | undefined>,

		/** Required */
		public_repos: FormControl<number | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,
		suspended_at: FormControl<Date | null | undefined>,
		total_private_repos: FormControl<number | null | undefined>,
		twitter_username: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePublic_userFormGroup() {
		return new FormGroup<Public_userFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bio: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blog: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators: new FormControl<number | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			disk_usage: new FormControl<number | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hireable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			location: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			owned_private_repos: new FormControl<number | null | undefined>(undefined),
			private_gists: new FormControl<number | null | undefined>(undefined),
			public_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			suspended_at: new FormControl<Date | null | undefined>(undefined),
			total_private_repos: new FormControl<number | null | undefined>(undefined),
			twitter_username: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Public_userPlan {

		/** Required */
		collaborators: number;

		/** Required */
		name: string;

		/** Required */
		private_repos: number;

		/** Required */
		space: number;
	}
	export interface Public_userPlanFormProperties {

		/** Required */
		collaborators: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		private_repos: FormControl<number | null | undefined>,

		/** Required */
		space: FormControl<number | null | undefined>,
	}
	export function CreatePublic_userPlanFormGroup() {
		return new FormGroup<Public_userPlanFormProperties>({
			collaborators: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			space: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Low-level Git commit operations within a repository */
	export interface Git_commit {

		/**
		 * Identifying information for the git-user
		 * Required
		 */
		author: Git_commitAuthor;

		/**
		 * Identifying information for the git-user
		 * Required
		 */
		committer: Git_commitCommitter;

		/** Required */
		html_url: string;

		/**
		 * Message describing the purpose of the commit
		 * Required
		 */
		message: string;

		/** Required */
		node_id: string;

		/** Required */
		Git_commitParents: Array<Git_commitParents>;

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: string;

		/** Required */
		tree: Git_commitTree;

		/** Required */
		url: string;

		/** Required */
		verification: Git_commitVerification;
	}

	/** Low-level Git commit operations within a repository */
	export interface Git_commitFormProperties {

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Message describing the purpose of the commit
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_commitFormGroup() {
		return new FormGroup<Git_commitFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_commitAuthor {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: Date;

		/**
		 * Git email address of the user
		 * Required
		 */
		email: string;

		/**
		 * Name of the git user
		 * Required
		 */
		name: string;
	}
	export interface Git_commitAuthorFormProperties {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Git email address of the user
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * Name of the git user
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGit_commitAuthorFormGroup() {
		return new FormGroup<Git_commitAuthorFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_commitCommitter {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: Date;

		/**
		 * Git email address of the user
		 * Required
		 */
		email: string;

		/**
		 * Name of the git user
		 * Required
		 */
		name: string;
	}
	export interface Git_commitCommitterFormProperties {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Git email address of the user
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * Name of the git user
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGit_commitCommitterFormGroup() {
		return new FormGroup<Git_commitCommitterFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_commitParents {

		/** Required */
		html_url: string;

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Git_commitParentsFormProperties {

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_commitParentsFormGroup() {
		return new FormGroup<Git_commitParentsFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_commitTree {

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Git_commitTreeFormProperties {

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_commitTreeFormGroup() {
		return new FormGroup<Git_commitTreeFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_commitVerification {

		/** Required */
		payload: string;

		/** Required */
		reason: string;

		/** Required */
		signature: string;

		/** Required */
		verified: boolean;
	}
	export interface Git_commitVerificationFormProperties {

		/** Required */
		payload: FormControl<string | null | undefined>,

		/** Required */
		reason: FormControl<string | null | undefined>,

		/** Required */
		signature: FormControl<string | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateGit_commitVerificationFormGroup() {
		return new FormGroup<Git_commitVerificationFormProperties>({
			payload: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			signature: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Git references within a repository */
	export interface Git_ref {

		/** Required */
		node_id: string;

		/** Required */
		object: Git_refObject;

		/** Required */
		ref: string;

		/** Required */
		url: string;
	}

	/** Git references within a repository */
	export interface Git_refFormProperties {

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_refFormGroup() {
		return new FormGroup<Git_refFormProperties>({
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_refObject {

		/**
		 * SHA for the reference
		 * Required
		 * Max length: 40
		 * Min length: 40
		 */
		sha: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Git_refObjectFormProperties {

		/**
		 * SHA for the reference
		 * Required
		 * Max length: 40
		 * Min length: 40
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_refObjectFormGroup() {
		return new FormGroup<Git_refObjectFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(40), Validators.maxLength(40)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metadata for a Git tag */
	export interface Git_tag {

		/**
		 * Message describing the purpose of the tag
		 * Required
		 */
		message: string;

		/** Required */
		node_id: string;

		/** Required */
		object: Git_tagObject;

		/** Required */
		sha: string;

		/**
		 * Name of the tag
		 * Required
		 */
		tag: string;

		/** Required */
		tagger: Git_tagTagger;

		/**
		 * URL for the tag
		 * Required
		 */
		url: string;
		verification?: Verification;
	}

	/** Metadata for a Git tag */
	export interface Git_tagFormProperties {

		/**
		 * Message describing the purpose of the tag
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/**
		 * Name of the tag
		 * Required
		 */
		tag: FormControl<string | null | undefined>,

		/**
		 * URL for the tag
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_tagFormGroup() {
		return new FormGroup<Git_tagFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tag: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_tagObject {

		/** Required */
		sha: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Git_tagObjectFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_tagObjectFormGroup() {
		return new FormGroup<Git_tagObjectFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_tagTagger {

		/** Required */
		date: string;

		/** Required */
		email: string;

		/** Required */
		name: string;
	}
	export interface Git_tagTaggerFormProperties {

		/** Required */
		date: FormControl<string | null | undefined>,

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGit_tagTaggerFormGroup() {
		return new FormGroup<Git_tagTaggerFormProperties>({
			date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The hierarchy between files in a Git repository. */
	export interface Git_tree {

		/** Required */
		sha: string;

		/**
		 * Objects specifying a tree structure
		 * Required
		 */
		Git_treeTree: Array<Git_treeTree>;

		/** Required */
		truncated: boolean;

		/** Required */
		url: string;
	}

	/** The hierarchy between files in a Git repository. */
	export interface Git_treeFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		truncated: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_treeFormGroup() {
		return new FormGroup<Git_treeFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			truncated: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Git_treeTree {
		mode?: string | null;
		path?: string | null;
		sha?: string | null;
		size?: number | null;
		type?: string | null;
		url?: string | null;
	}
	export interface Git_treeTreeFormProperties {
		mode: FormControl<string | null | undefined>,
		path: FormControl<string | null | undefined>,
		sha: FormControl<string | null | undefined>,
		size: FormControl<number | null | undefined>,
		type: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateGit_treeTreeFormGroup() {
		return new FormGroup<Git_treeTreeFormProperties>({
			mode: new FormControl<string | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Gitignore Template */
	export interface Gitignore_template {

		/** Required */
		name: string;

		/** Required */
		source: string;
	}

	/** Gitignore Template */
	export interface Gitignore_templateFormProperties {

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		source: FormControl<string | null | undefined>,
	}
	export function CreateGitignore_templateFormGroup() {
		return new FormGroup<Gitignore_templateFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Global_hook {
		active?: boolean | null;
		config?: Global_hookConfig;
		created_at?: string | null;
		events?: Array<string>;
		id?: number | null;
		name?: string | null;
		ping_url?: string | null;
		type?: string | null;
		updated_at?: string | null;
		url?: string | null;
	}
	export interface Global_hookFormProperties {
		active: FormControl<boolean | null | undefined>,
		created_at: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		ping_url: FormControl<string | null | undefined>,
		type: FormControl<string | null | undefined>,
		updated_at: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateGlobal_hookFormGroup() {
		return new FormGroup<Global_hookFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			ping_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Global_hookConfig {
		content_type?: string | null;
		insecure_ssl?: string | null;
		secret?: string | null;
		url?: string | null;
	}
	export interface Global_hookConfigFormProperties {
		content_type: FormControl<string | null | undefined>,
		insecure_ssl: FormControl<string | null | undefined>,
		secret: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateGlobal_hookConfigFormGroup() {
		return new FormGroup<Global_hookConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			insecure_ssl: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Global_hook_2 {
		active?: boolean | null;
		config?: Global_hook_2Config;
		created_at?: string | null;
		events?: Array<string>;
		id?: number | null;
		name?: string | null;
		ping_url?: string | null;
		type?: string | null;
		updated_at?: string | null;
		url?: string | null;
	}
	export interface Global_hook_2FormProperties {
		active: FormControl<boolean | null | undefined>,
		created_at: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		ping_url: FormControl<string | null | undefined>,
		type: FormControl<string | null | undefined>,
		updated_at: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateGlobal_hook_2FormGroup() {
		return new FormGroup<Global_hook_2FormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			ping_url: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Global_hook_2Config {
		content_type?: string | null;
		insecure_ssl?: string | null;
		url?: string | null;
	}
	export interface Global_hook_2ConfigFormProperties {
		content_type: FormControl<string | null | undefined>,
		insecure_ssl: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateGlobal_hook_2ConfigFormGroup() {
		return new FormGroup<Global_hook_2ConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			insecure_ssl: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A unique encryption key */
	export interface Gpg_key {

		/** Required */
		can_certify: boolean;

		/** Required */
		can_encrypt_comms: boolean;

		/** Required */
		can_encrypt_storage: boolean;

		/** Required */
		can_sign: boolean;

		/** Required */
		created_at: Date;

		/** Required */
		Gpg_keyEmails: Array<Gpg_keyEmails>;

		/** Required */
		expires_at: Date;

		/** Required */
		id: number;

		/** Required */
		key_id: string;

		/** Required */
		primary_key_id: number;

		/** Required */
		public_key: string;

		/** Required */
		raw_key: string;

		/** Required */
		Gpg_keySubkeys: Array<Gpg_keySubkeys>;
	}

	/** A unique encryption key */
	export interface Gpg_keyFormProperties {

		/** Required */
		can_certify: FormControl<boolean | null | undefined>,

		/** Required */
		can_encrypt_comms: FormControl<boolean | null | undefined>,

		/** Required */
		can_encrypt_storage: FormControl<boolean | null | undefined>,

		/** Required */
		can_sign: FormControl<boolean | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		expires_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		key_id: FormControl<string | null | undefined>,

		/** Required */
		primary_key_id: FormControl<number | null | undefined>,

		/** Required */
		public_key: FormControl<string | null | undefined>,

		/** Required */
		raw_key: FormControl<string | null | undefined>,
	}
	export function CreateGpg_keyFormGroup() {
		return new FormGroup<Gpg_keyFormProperties>({
			can_certify: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			can_encrypt_comms: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			can_encrypt_storage: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			can_sign: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			expires_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			key_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary_key_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			raw_key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Gpg_keyEmails {
		email?: string | null;
		verified?: boolean | null;
	}
	export interface Gpg_keyEmailsFormProperties {
		email: FormControl<string | null | undefined>,
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateGpg_keyEmailsFormGroup() {
		return new FormGroup<Gpg_keyEmailsFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
			verified: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Gpg_keySubkeys {
		can_certify?: boolean | null;
		can_encrypt_comms?: boolean | null;
		can_encrypt_storage?: boolean | null;
		can_sign?: boolean | null;
		created_at?: string | null;
		emails?: Array<string>;
		expires_at?: string | null;
		id?: number | null;
		key_id?: string | null;
		primary_key_id?: number | null;
		public_key?: string | null;
		raw_key?: string | null;
		subkeys?: Array<string>;
	}
	export interface Gpg_keySubkeysFormProperties {
		can_certify: FormControl<boolean | null | undefined>,
		can_encrypt_comms: FormControl<boolean | null | undefined>,
		can_encrypt_storage: FormControl<boolean | null | undefined>,
		can_sign: FormControl<boolean | null | undefined>,
		created_at: FormControl<string | null | undefined>,
		expires_at: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		key_id: FormControl<string | null | undefined>,
		primary_key_id: FormControl<number | null | undefined>,
		public_key: FormControl<string | null | undefined>,
		raw_key: FormControl<string | null | undefined>,
	}
	export function CreateGpg_keySubkeysFormGroup() {
		return new FormGroup<Gpg_keySubkeysFormProperties>({
			can_certify: new FormControl<boolean | null | undefined>(undefined),
			can_encrypt_comms: new FormControl<boolean | null | undefined>(undefined),
			can_encrypt_storage: new FormControl<boolean | null | undefined>(undefined),
			can_sign: new FormControl<boolean | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			expires_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			key_id: new FormControl<string | null | undefined>(undefined),
			primary_key_id: new FormControl<number | null | undefined>(undefined),
			public_key: new FormControl<string | null | undefined>(undefined),
			raw_key: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Webhooks for repositories. */
	export interface Hook {

		/**
		 * Determines whether the hook is actually triggered on pushes.
		 * Required
		 */
		active: boolean;

		/** Required */
		config: HookConfig;

		/** Required */
		created_at: Date;

		/**
		 * Determines what events the hook is triggered for. Default: ['push'].
		 * Required
		 */
		events: Array<string>;

		/**
		 * Unique identifier of the webhook.
		 * Required
		 */
		id: number;

		/** Required */
		last_response: Hook_response;

		/**
		 * The name of a valid service, use 'web' for a webhook.
		 * Required
		 */
		name: string;

		/** Required */
		ping_url: string;

		/** Required */
		test_url: string;

		/** Required */
		type: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Webhooks for repositories. */
	export interface HookFormProperties {

		/**
		 * Determines whether the hook is actually triggered on pushes.
		 * Required
		 */
		active: FormControl<boolean | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Unique identifier of the webhook.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of a valid service, use 'web' for a webhook.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		ping_url: FormControl<string | null | undefined>,

		/** Required */
		test_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateHookFormGroup() {
		return new FormGroup<HookFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ping_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			test_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface HookConfig {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		digest?: string | null;
		email?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;
		password?: string | null;
		room?: string | null;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;
		subdomain?: string | null;
		token?: string | null;

		/** The URL to which the payloads will be delivered. */
		url?: string | null;
	}
	export interface HookConfigFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,
		digest: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,
		password: FormControl<string | null | undefined>,
		room: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,
		subdomain: FormControl<string | null | undefined>,
		token: FormControl<string | null | undefined>,

		/** The URL to which the payloads will be delivered. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateHookConfigFormGroup() {
		return new FormGroup<HookConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			digest: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			room: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			subdomain: new FormControl<string | null | undefined>(undefined),
			token: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Hook_response {

		/** Required */
		code: number;

		/** Required */
		message: string;

		/** Required */
		status: string;
	}
	export interface Hook_responseFormProperties {

		/** Required */
		code: FormControl<number | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		status: FormControl<string | null | undefined>,
	}
	export function CreateHook_responseFormGroup() {
		return new FormGroup<Hook_responseFormProperties>({
			code: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Hovercard */
	export interface Hovercard {

		/** Required */
		HovercardContexts: Array<HovercardContexts>;
	}

	/** Hovercard */
	export interface HovercardFormProperties {
	}
	export function CreateHovercardFormGroup() {
		return new FormGroup<HovercardFormProperties>({
		});

	}

	export interface HovercardContexts {

		/** Required */
		message: string;

		/** Required */
		octicon: string;
	}
	export interface HovercardContextsFormProperties {

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		octicon: FormControl<string | null | undefined>,
	}
	export function CreateHovercardContextsFormGroup() {
		return new FormGroup<HovercardContextsFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			octicon: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Installation */
	export interface Installation {

		/** Required */
		access_tokens_url: string;

		/** Required */
		account: Simple_user;

		/** Required */
		app_id: number;

		/** Required */
		app_slug: string;
		contact_email?: string | null;

		/** Required */
		created_at: Date;

		/** Required */
		events: Array<string>;
		has_multiple_single_files?: boolean | null;

		/** Required */
		html_url: string;

		/**
		 * The ID of the installation.
		 * Required
		 */
		id: number;

		/**
		 * The permissions granted to the user-to-server access token.
		 * Required
		 */
		permissions: App_permissions;

		/** Required */
		repositories_url: string;

		/**
		 * Describe whether all repositories have been selected or there's a selection involved
		 * Required
		 */
		repository_selection: Authentication_tokenRepository_selection;

		/** Required */
		single_file_name: string;
		single_file_paths?: Array<string>;

		/** Required */
		suspended_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		suspended_by: Nullable_simple_user;

		/**
		 * The ID of the user or organization this token is being scoped to.
		 * Required
		 */
		target_id: number;

		/** Required */
		target_type: string;

		/** Required */
		updated_at: Date;
	}

	/** Installation */
	export interface InstallationFormProperties {

		/** Required */
		access_tokens_url: FormControl<string | null | undefined>,

		/** Required */
		app_id: FormControl<number | null | undefined>,

		/** Required */
		app_slug: FormControl<string | null | undefined>,
		contact_email: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		has_multiple_single_files: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * The ID of the installation.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		repositories_url: FormControl<string | null | undefined>,

		/**
		 * Describe whether all repositories have been selected or there's a selection involved
		 * Required
		 */
		repository_selection: FormControl<Authentication_tokenRepository_selection | null | undefined>,

		/** Required */
		single_file_name: FormControl<string | null | undefined>,

		/** Required */
		suspended_at: FormControl<Date | null | undefined>,

		/**
		 * The ID of the user or organization this token is being scoped to.
		 * Required
		 */
		target_id: FormControl<number | null | undefined>,

		/** Required */
		target_type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateInstallationFormGroup() {
		return new FormGroup<InstallationFormProperties>({
			access_tokens_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			app_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			app_slug: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contact_email: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			has_multiple_single_files: new FormControl<boolean | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_selection: new FormControl<Authentication_tokenRepository_selection | null | undefined>(undefined, [Validators.required]),
			single_file_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			suspended_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			target_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			target_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Authentication token for a GitHub App installed on a user or org. */
	export interface Installation_token {

		/** Required */
		expires_at: string;
		has_multiple_single_files?: boolean | null;

		/** The permissions granted to the user-to-server access token. */
		permissions?: App_permissions;
		repositories?: Array<Repository>;
		repository_selection?: Authentication_tokenRepository_selection | null;
		single_file?: string | null;
		single_file_paths?: Array<string>;

		/** Required */
		token: string;
	}

	/** Authentication token for a GitHub App installed on a user or org. */
	export interface Installation_tokenFormProperties {

		/** Required */
		expires_at: FormControl<string | null | undefined>,
		has_multiple_single_files: FormControl<boolean | null | undefined>,
		repository_selection: FormControl<Authentication_tokenRepository_selection | null | undefined>,
		single_file: FormControl<string | null | undefined>,

		/** Required */
		token: FormControl<string | null | undefined>,
	}
	export function CreateInstallation_tokenFormGroup() {
		return new FormGroup<Installation_tokenFormProperties>({
			expires_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_multiple_single_files: new FormControl<boolean | null | undefined>(undefined),
			repository_selection: new FormControl<Authentication_tokenRepository_selection | null | undefined>(undefined),
			single_file: new FormControl<string | null | undefined>(undefined),
			token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issue Event */
	export interface Issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Nullable_simple_user;

		/** Simple User */
		assignee?: Nullable_simple_user;

		/** Simple User */
		assigner?: Nullable_simple_user;

		/** How the author is associated with the repository. */
		author_association?: Author_association | null;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: Date;
		dismissed_review?: Issue_event_dismissed_review;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
		issue?: Nullable_issue;

		/** Issue Event Label */
		label?: Issue_event_label;
		lock_reason?: string | null;

		/** Issue Event Milestone */
		milestone?: Issue_event_milestone;

		/** Required */
		node_id: string;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;

		/** Issue Event Project Card */
		project_card?: Issue_event_project_card;

		/** Issue Event Rename */
		rename?: Issue_event_rename;

		/** Simple User */
		requested_reviewer?: Nullable_simple_user;

		/** Groups of organization members that gives permissions on specified repositories. */
		requested_team?: Team;

		/** Simple User */
		review_requester?: Nullable_simple_user;

		/** Required */
		url: string;
	}

	/** Issue Event */
	export interface Issue_eventFormProperties {

		/** How the author is associated with the repository. */
		author_association: FormControl<Author_association | null | undefined>,

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		lock_reason: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssue_eventFormGroup() {
		return new FormGroup<Issue_eventFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined),
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lock_reason: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Issue_event_dismissed_review {
		dismissal_commit_id?: string | null;

		/** Required */
		dismissal_message: string;

		/** Required */
		review_id: number;

		/** Required */
		state: string;
	}
	export interface Issue_event_dismissed_reviewFormProperties {
		dismissal_commit_id: FormControl<string | null | undefined>,

		/** Required */
		dismissal_message: FormControl<string | null | undefined>,

		/** Required */
		review_id: FormControl<number | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,
	}
	export function CreateIssue_event_dismissed_reviewFormGroup() {
		return new FormGroup<Issue_event_dismissed_reviewFormProperties>({
			dismissal_commit_id: new FormControl<string | null | undefined>(undefined),
			dismissal_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
	export interface Nullable_issue {
		active_lock_reason?: string | null;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Nullable_simple_user;
		assignees?: Array<Simple_user>;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/** Contents of the issue */
		body?: string | null;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		closed_at: Date;

		/** Simple User */
		closed_by?: Nullable_simple_user;

		/** Required */
		comments: number;

		/** Required */
		comments_url: string;

		/** Required */
		created_at: Date;
		draft?: boolean | null;

		/** Required */
		events_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/**
		 * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
		 * Required
		 */
		labels: Array<string>;

		/** Required */
		labels_url: string;

		/** Required */
		locked: boolean;

		/**
		 * A collection of related issues and pull requests.
		 * Required
		 */
		milestone: Nullable_milestone;

		/** Required */
		node_id: string;

		/**
		 * Number uniquely identifying the issue within its repository
		 * Required
		 */
		number: number;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;
		pull_request?: Nullable_issuePull_request;
		reactions?: Reaction_rollup;

		/** A git repository */
		repository?: Repository;

		/** Required */
		repository_url: string;

		/**
		 * State of the issue; either 'open' or 'closed'
		 * Required
		 */
		state: string;

		/** The reason for the current state */
		state_reason?: string | null;
		timeline_url?: string | null;

		/**
		 * Title of the issue
		 * Required
		 */
		title: string;

		/** Required */
		updated_at: Date;

		/**
		 * URL for the issue
		 * Required
		 */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
	export interface Nullable_issueFormProperties {
		active_lock_reason: FormControl<string | null | undefined>,

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Contents of the issue */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		comments: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		draft: FormControl<boolean | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		locked: FormControl<boolean | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Number uniquely identifying the issue within its repository
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/**
		 * State of the issue; either 'open' or 'closed'
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/** The reason for the current state */
		state_reason: FormControl<string | null | undefined>,
		timeline_url: FormControl<string | null | undefined>,

		/**
		 * Title of the issue
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * URL for the issue
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_issueFormGroup() {
		return new FormGroup<Nullable_issueFormProperties>({
			active_lock_reason: new FormControl<string | null | undefined>(undefined),
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			draft: new FormControl<boolean | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			locked: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state_reason: new FormControl<string | null | undefined>(undefined),
			timeline_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_issuePull_request {

		/** Required */
		diff_url: string;

		/** Required */
		html_url: string;
		merged_at?: Date | null;

		/** Required */
		patch_url: string;

		/** Required */
		url: string;
	}
	export interface Nullable_issuePull_requestFormProperties {

		/** Required */
		diff_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,
		merged_at: FormControl<Date | null | undefined>,

		/** Required */
		patch_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_issuePull_requestFormGroup() {
		return new FormGroup<Nullable_issuePull_requestFormProperties>({
			diff_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merged_at: new FormControl<Date | null | undefined>(undefined),
			patch_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issue Event Label */
	export interface Issue_event_label {

		/** Required */
		color: string;

		/** Required */
		name: string;
	}

	/** Issue Event Label */
	export interface Issue_event_labelFormProperties {

		/** Required */
		color: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateIssue_event_labelFormGroup() {
		return new FormGroup<Issue_event_labelFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issue Event Milestone */
	export interface Issue_event_milestone {

		/** Required */
		title: string;
	}

	/** Issue Event Milestone */
	export interface Issue_event_milestoneFormProperties {

		/** Required */
		title: FormControl<string | null | undefined>,
	}
	export function CreateIssue_event_milestoneFormGroup() {
		return new FormGroup<Issue_event_milestoneFormProperties>({
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issue Event Project Card */
	export interface Issue_event_project_card {

		/** Required */
		column_name: string;

		/** Required */
		id: number;
		previous_column_name?: string | null;

		/** Required */
		project_id: number;

		/** Required */
		project_url: string;

		/** Required */
		url: string;
	}

	/** Issue Event Project Card */
	export interface Issue_event_project_cardFormProperties {

		/** Required */
		column_name: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		previous_column_name: FormControl<string | null | undefined>,

		/** Required */
		project_id: FormControl<number | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssue_event_project_cardFormGroup() {
		return new FormGroup<Issue_event_project_cardFormProperties>({
			column_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previous_column_name: new FormControl<string | null | undefined>(undefined),
			project_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issue Event Rename */
	export interface Issue_event_rename {

		/** Required */
		from: string;

		/** Required */
		to: string;
	}

	/** Issue Event Rename */
	export interface Issue_event_renameFormProperties {

		/** Required */
		from: FormControl<string | null | undefined>,

		/** Required */
		to: FormControl<string | null | undefined>,
	}
	export function CreateIssue_event_renameFormGroup() {
		return new FormGroup<Issue_event_renameFormProperties>({
			from: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			to: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Issue Event for Issue */
	export interface Issue_event_for_issue {
	}

	/** Issue Event for Issue */
	export interface Issue_event_for_issueFormProperties {
	}
	export function CreateIssue_event_for_issueFormGroup() {
		return new FormGroup<Issue_event_for_issueFormProperties>({
		});

	}


	/** Issue Search Result Item */
	export interface Issue_search_result_item {
		active_lock_reason?: string | null;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Nullable_simple_user;
		assignees?: Array<Simple_user>;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;
		body?: string | null;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		closed_at: Date;

		/** Required */
		comments: number;

		/** Required */
		comments_url: string;

		/** Required */
		created_at: Date;
		draft?: boolean | null;

		/** Required */
		events_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		Issue_search_result_itemLabels: Array<Issue_search_result_itemLabels>;

		/** Required */
		labels_url: string;

		/** Required */
		locked: boolean;

		/**
		 * A collection of related issues and pull requests.
		 * Required
		 */
		milestone: Nullable_milestone;

		/** Required */
		node_id: string;

		/** Required */
		number: number;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;
		pull_request?: Issue_search_result_itemPull_request;
		reactions?: Reaction_rollup;

		/** A git repository */
		repository?: Repository;

		/** Required */
		repository_url: string;

		/** Required */
		score: number;

		/** Required */
		state: string;
		state_reason?: string | null;
		Issue_search_result_itemText_matches?: Array<Issue_search_result_itemText_matches>;
		timeline_url?: string | null;

		/** Required */
		title: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Issue Search Result Item */
	export interface Issue_search_result_itemFormProperties {
		active_lock_reason: FormControl<string | null | undefined>,

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		comments: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		draft: FormControl<boolean | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		locked: FormControl<boolean | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,
		state_reason: FormControl<string | null | undefined>,
		timeline_url: FormControl<string | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssue_search_result_itemFormGroup() {
		return new FormGroup<Issue_search_result_itemFormProperties>({
			active_lock_reason: new FormControl<string | null | undefined>(undefined),
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			draft: new FormControl<boolean | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			locked: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state_reason: new FormControl<string | null | undefined>(undefined),
			timeline_url: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Issue_search_result_itemLabels {
		color?: string | null;
		default?: boolean | null;
		description?: string | null;
		id?: number | null;
		name?: string | null;
		node_id?: string | null;
		url?: string | null;
	}
	export interface Issue_search_result_itemLabelsFormProperties {
		color: FormControl<string | null | undefined>,
		default: FormControl<boolean | null | undefined>,
		description: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssue_search_result_itemLabelsFormGroup() {
		return new FormGroup<Issue_search_result_itemLabelsFormProperties>({
			color: new FormControl<string | null | undefined>(undefined),
			default: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Issue_search_result_itemPull_request {

		/** Required */
		diff_url: string;

		/** Required */
		html_url: string;
		merged_at?: Date | null;

		/** Required */
		patch_url: string;

		/** Required */
		url: string;
	}
	export interface Issue_search_result_itemPull_requestFormProperties {

		/** Required */
		diff_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,
		merged_at: FormControl<Date | null | undefined>,

		/** Required */
		patch_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIssue_search_result_itemPull_requestFormGroup() {
		return new FormGroup<Issue_search_result_itemPull_requestFormProperties>({
			diff_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merged_at: new FormControl<Date | null | undefined>(undefined),
			patch_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Issue_search_result_itemText_matches {
		fragment?: string | null;
		Issue_search_result_itemText_matchesMatches?: Array<Issue_search_result_itemText_matchesMatches>;
		object_type?: string | null;
		object_url?: string | null;
		property?: string | null;
	}
	export interface Issue_search_result_itemText_matchesFormProperties {
		fragment: FormControl<string | null | undefined>,
		object_type: FormControl<string | null | undefined>,
		object_url: FormControl<string | null | undefined>,
		property: FormControl<string | null | undefined>,
	}
	export function CreateIssue_search_result_itemText_matchesFormGroup() {
		return new FormGroup<Issue_search_result_itemText_matchesFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			object_type: new FormControl<string | null | undefined>(undefined),
			object_url: new FormControl<string | null | undefined>(undefined),
			property: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Issue_search_result_itemText_matchesMatches {
		indices?: Array<number>;
		text?: string | null;
	}
	export interface Issue_search_result_itemText_matchesMatchesFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateIssue_search_result_itemText_matchesMatchesFormGroup() {
		return new FormGroup<Issue_search_result_itemText_matchesMatchesFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information of a job execution in a workflow run */
	export interface Job {

		/** Required */
		check_run_url: string;

		/**
		 * The time that the job finished, in ISO 8601 format.
		 * Required
		 */
		completed_at: Date;

		/**
		 * The outcome of the job.
		 * Required
		 */
		conclusion: string;

		/**
		 * The SHA of the commit that is being run.
		 * Required
		 */
		head_sha: string;

		/** Required */
		html_url: string;

		/**
		 * The id of the job.
		 * Required
		 */
		id: number;

		/**
		 * The name of the job.
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * The id of the associated workflow run.
		 * Required
		 */
		run_id: number;

		/** Required */
		run_url: string;

		/**
		 * The time that the job started, in ISO 8601 format.
		 * Required
		 */
		started_at: Date;

		/**
		 * The phase of the lifecycle that the job is currently in.
		 * Required
		 */
		status: Check_runStatus;

		/** Steps in this job. */
		JobSteps?: Array<JobSteps>;

		/** Required */
		url: string;
	}

	/** Information of a job execution in a workflow run */
	export interface JobFormProperties {

		/** Required */
		check_run_url: FormControl<string | null | undefined>,

		/**
		 * The time that the job finished, in ISO 8601 format.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * The outcome of the job.
		 * Required
		 */
		conclusion: FormControl<string | null | undefined>,

		/**
		 * The SHA of the commit that is being run.
		 * Required
		 */
		head_sha: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * The id of the job.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of the job.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The id of the associated workflow run.
		 * Required
		 */
		run_id: FormControl<number | null | undefined>,

		/** Required */
		run_url: FormControl<string | null | undefined>,

		/**
		 * The time that the job started, in ISO 8601 format.
		 * Required
		 */
		started_at: FormControl<Date | null | undefined>,

		/**
		 * The phase of the lifecycle that the job is currently in.
		 * Required
		 */
		status: FormControl<Check_runStatus | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateJobFormGroup() {
		return new FormGroup<JobFormProperties>({
			check_run_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			conclusion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			head_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			run_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			run_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			started_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Check_runStatus | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface JobSteps {

		/** The time that the job finished, in ISO 8601 format. */
		completed_at?: Date | null;

		/**
		 * The outcome of the job.
		 * Required
		 */
		conclusion: string;

		/**
		 * The name of the job.
		 * Required
		 */
		name: string;

		/** Required */
		number: number;

		/** The time that the step started, in ISO 8601 format. */
		started_at?: Date | null;

		/**
		 * The phase of the lifecycle that the job is currently in.
		 * Required
		 */
		status: Check_runStatus;
	}
	export interface JobStepsFormProperties {

		/** The time that the job finished, in ISO 8601 format. */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * The outcome of the job.
		 * Required
		 */
		conclusion: FormControl<string | null | undefined>,

		/**
		 * The name of the job.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,

		/** The time that the step started, in ISO 8601 format. */
		started_at: FormControl<Date | null | undefined>,

		/**
		 * The phase of the lifecycle that the job is currently in.
		 * Required
		 */
		status: FormControl<Check_runStatus | null | undefined>,
	}
	export function CreateJobStepsFormGroup() {
		return new FormGroup<JobStepsFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			conclusion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			started_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<Check_runStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Key */
	export interface Key {

		/** Required */
		created_at: Date;

		/** Required */
		id: number;

		/** Required */
		key: string;

		/** Required */
		read_only: boolean;

		/** Required */
		title: string;

		/** Required */
		url: string;

		/** Required */
		verified: boolean;
	}

	/** Key */
	export interface KeyFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		read_only: FormControl<boolean | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateKeyFormGroup() {
		return new FormGroup<KeyFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			read_only: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Key Simple */
	export interface Key_simple {

		/** Required */
		id: number;

		/** Required */
		key: string;
	}

	/** Key Simple */
	export interface Key_simpleFormProperties {

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,
	}
	export function CreateKey_simpleFormGroup() {
		return new FormGroup<Key_simpleFormProperties>({
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Color-coded labels help you categorize and filter your issues (just like labels in Gmail). */
	export interface Label {

		/**
		 * 6-character hex code, without the leading #, identifying the color
		 * Required
		 */
		color: string;

		/** Required */
		default: boolean;

		/** Required */
		description: string;

		/** Required */
		id: number;

		/**
		 * The name of the label.
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * URL for the label
		 * Required
		 */
		url: string;
	}

	/** Color-coded labels help you categorize and filter your issues (just like labels in Gmail). */
	export interface LabelFormProperties {

		/**
		 * 6-character hex code, without the leading #, identifying the color
		 * Required
		 */
		color: FormControl<string | null | undefined>,

		/** Required */
		default: FormControl<boolean | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of the label.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * URL for the label
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLabelFormGroup() {
		return new FormGroup<LabelFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			default: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Label Search Result Item */
	export interface Label_search_result_item {

		/** Required */
		color: string;

		/** Required */
		default: boolean;

		/** Required */
		description: string;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		score: number;
		Label_search_result_itemText_matches?: Array<Label_search_result_itemText_matches>;

		/** Required */
		url: string;
	}

	/** Label Search Result Item */
	export interface Label_search_result_itemFormProperties {

		/** Required */
		color: FormControl<string | null | undefined>,

		/** Required */
		default: FormControl<boolean | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLabel_search_result_itemFormGroup() {
		return new FormGroup<Label_search_result_itemFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			default: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Label_search_result_itemText_matches {
		fragment?: string | null;
		Label_search_result_itemText_matchesMatches?: Array<Label_search_result_itemText_matchesMatches>;
		object_type?: string | null;
		object_url?: string | null;
		property?: string | null;
	}
	export interface Label_search_result_itemText_matchesFormProperties {
		fragment: FormControl<string | null | undefined>,
		object_type: FormControl<string | null | undefined>,
		object_url: FormControl<string | null | undefined>,
		property: FormControl<string | null | undefined>,
	}
	export function CreateLabel_search_result_itemText_matchesFormGroup() {
		return new FormGroup<Label_search_result_itemText_matchesFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			object_type: new FormControl<string | null | undefined>(undefined),
			object_url: new FormControl<string | null | undefined>(undefined),
			property: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Label_search_result_itemText_matchesMatches {
		indices?: Array<number>;
		text?: string | null;
	}
	export interface Label_search_result_itemText_matchesMatchesFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateLabel_search_result_itemText_matchesMatchesFormGroup() {
		return new FormGroup<Label_search_result_itemText_matchesMatchesFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Labeled Issue Event */
	export interface Labeled_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		label: Labeled_issue_eventLabel;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Labeled Issue Event */
	export interface Labeled_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLabeled_issue_eventFormGroup() {
		return new FormGroup<Labeled_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Labeled_issue_eventLabel {

		/** Required */
		color: string;

		/** Required */
		name: string;
	}
	export interface Labeled_issue_eventLabelFormProperties {

		/** Required */
		color: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateLabeled_issue_eventLabelFormGroup() {
		return new FormGroup<Labeled_issue_eventLabelFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Language */
	export interface Language {
	}

	/** Language */
	export interface LanguageFormProperties {
	}
	export function CreateLanguageFormGroup() {
		return new FormGroup<LanguageFormProperties>({
		});

	}

	export interface Ldap_mapping_team {
		description?: string | null;
		html_url?: string | null;
		id?: number | null;
		ldap_dn?: string | null;
		members_url?: string | null;
		name?: string | null;
		node_id?: string | null;
		parent?: any;
		permission?: string | null;
		privacy?: string | null;
		repositories_url?: string | null;
		slug?: string | null;
		url?: string | null;
	}
	export interface Ldap_mapping_teamFormProperties {
		description: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		ldap_dn: FormControl<string | null | undefined>,
		members_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
		parent: FormControl<any | null | undefined>,
		permission: FormControl<string | null | undefined>,
		privacy: FormControl<string | null | undefined>,
		repositories_url: FormControl<string | null | undefined>,
		slug: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateLdap_mapping_teamFormGroup() {
		return new FormGroup<Ldap_mapping_teamFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			members_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
			parent: new FormControl<any | null | undefined>(undefined),
			permission: new FormControl<string | null | undefined>(undefined),
			privacy: new FormControl<string | null | undefined>(undefined),
			repositories_url: new FormControl<string | null | undefined>(undefined),
			slug: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Ldap Private User */
	export interface Ldap_mapping_user {

		/** Required */
		avatar_url: string;

		/** Required */
		bio: string;

		/** Required */
		blog: string;
		business_plus?: boolean | null;

		/** Required */
		collaborators: number;

		/** Required */
		company: string;

		/** Required */
		created_at: Date;

		/** Required */
		disk_usage: number;

		/** Required */
		email: string;

		/** Required */
		events_url: string;

		/** Required */
		followers: number;

		/** Required */
		followers_url: string;

		/** Required */
		following: number;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		hireable: boolean;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		ldap_dn?: string | null;

		/** Required */
		location: string;

		/** Required */
		login: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		owned_private_repos: number;
		plan?: Ldap_mapping_userPlan;

		/** Required */
		private_gists: number;

		/** Required */
		public_gists: number;

		/** Required */
		public_repos: number;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;
		suspended_at?: Date | null;

		/** Required */
		total_private_repos: number;
		twitter_username?: string | null;

		/** Required */
		two_factor_authentication: boolean;

		/** Required */
		type: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Ldap Private User */
	export interface Ldap_mapping_userFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		bio: FormControl<string | null | undefined>,

		/** Required */
		blog: FormControl<string | null | undefined>,
		business_plus: FormControl<boolean | null | undefined>,

		/** Required */
		collaborators: FormControl<number | null | undefined>,

		/** Required */
		company: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		disk_usage: FormControl<number | null | undefined>,

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers: FormControl<number | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following: FormControl<number | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		hireable: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		ldap_dn: FormControl<string | null | undefined>,

		/** Required */
		location: FormControl<string | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		owned_private_repos: FormControl<number | null | undefined>,

		/** Required */
		private_gists: FormControl<number | null | undefined>,

		/** Required */
		public_gists: FormControl<number | null | undefined>,

		/** Required */
		public_repos: FormControl<number | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,
		suspended_at: FormControl<Date | null | undefined>,

		/** Required */
		total_private_repos: FormControl<number | null | undefined>,
		twitter_username: FormControl<string | null | undefined>,

		/** Required */
		two_factor_authentication: FormControl<boolean | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLdap_mapping_userFormGroup() {
		return new FormGroup<Ldap_mapping_userFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bio: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blog: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			business_plus: new FormControl<boolean | null | undefined>(undefined),
			collaborators: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			disk_usage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hireable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			owned_private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			suspended_at: new FormControl<Date | null | undefined>(undefined),
			total_private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			twitter_username: new FormControl<string | null | undefined>(undefined),
			two_factor_authentication: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Ldap_mapping_userPlan {

		/** Required */
		collaborators: number;

		/** Required */
		name: string;

		/** Required */
		private_repos: number;

		/** Required */
		space: number;
	}
	export interface Ldap_mapping_userPlanFormProperties {

		/** Required */
		collaborators: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		private_repos: FormControl<number | null | undefined>,

		/** Required */
		space: FormControl<number | null | undefined>,
	}
	export function CreateLdap_mapping_userPlanFormGroup() {
		return new FormGroup<Ldap_mapping_userPlanFormProperties>({
			collaborators: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			space: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** License */
	export interface License {

		/** Required */
		body: string;

		/** Required */
		conditions: Array<string>;

		/** Required */
		description: string;

		/** Required */
		featured: boolean;

		/** Required */
		html_url: string;

		/** Required */
		implementation: string;

		/** Required */
		key: string;

		/** Required */
		limitations: Array<string>;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		permissions: Array<string>;

		/** Required */
		spdx_id: string;

		/** Required */
		url: string;
	}

	/** License */
	export interface LicenseFormProperties {

		/** Required */
		body: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		featured: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		implementation: FormControl<string | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		spdx_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLicenseFormGroup() {
		return new FormGroup<LicenseFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			featured: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			implementation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			spdx_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** License Content */
	export interface License_content {

		/** Required */
		_links: License_content_links;

		/** Required */
		content: string;

		/** Required */
		download_url: string;

		/** Required */
		encoding: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** License Content */
	export interface License_contentFormProperties {

		/** Required */
		content: FormControl<string | null | undefined>,

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		encoding: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLicense_contentFormGroup() {
		return new FormGroup<License_contentFormProperties>({
			content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			encoding: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface License_content_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface License_content_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateLicense_content_linksFormGroup() {
		return new FormGroup<License_content_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface License_info {
		days_until_expiration?: number | null;
		expire_at?: string | null;
		kind?: string | null;
		seats?: string;
		seats_available?: string;
		seats_used?: number | null;
	}
	export interface License_infoFormProperties {
		days_until_expiration: FormControl<number | null | undefined>,
		expire_at: FormControl<string | null | undefined>,
		kind: FormControl<string | null | undefined>,
		seats: FormControl<string | null | undefined>,
		seats_available: FormControl<string | null | undefined>,
		seats_used: FormControl<number | null | undefined>,
	}
	export function CreateLicense_infoFormGroup() {
		return new FormGroup<License_infoFormProperties>({
			days_until_expiration: new FormControl<number | null | undefined>(undefined),
			expire_at: new FormControl<string | null | undefined>(undefined),
			kind: new FormControl<string | null | undefined>(undefined),
			seats: new FormControl<string | null | undefined>(undefined),
			seats_available: new FormControl<string | null | undefined>(undefined),
			seats_used: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** License Simple */
	export interface License_simple {
		html_url?: string | null;

		/** Required */
		key: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		spdx_id: string;

		/** Required */
		url: string;
	}

	/** License Simple */
	export interface License_simpleFormProperties {
		html_url: FormControl<string | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		spdx_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLicense_simpleFormGroup() {
		return new FormGroup<License_simpleFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			spdx_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Hypermedia Link */
	export interface Link {

		/** Required */
		href: string;
	}

	/** Hypermedia Link */
	export interface LinkFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreateLinkFormGroup() {
		return new FormGroup<LinkFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Locked Issue Event */
	export interface Locked_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		lock_reason: string;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Locked Issue Event */
	export interface Locked_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		lock_reason: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateLocked_issue_eventFormGroup() {
		return new FormGroup<Locked_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lock_reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Maintenance_status {
		Maintenance_statusConnection_services?: Array<Maintenance_statusConnection_services>;
		scheduled_time?: string | null;
		status?: string | null;
	}
	export interface Maintenance_statusFormProperties {
		scheduled_time: FormControl<string | null | undefined>,
		status: FormControl<string | null | undefined>,
	}
	export function CreateMaintenance_statusFormGroup() {
		return new FormGroup<Maintenance_statusFormProperties>({
			scheduled_time: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Maintenance_statusConnection_services {

		/** Required */
		name: string;

		/** Required */
		number: number;
	}
	export interface Maintenance_statusConnection_servicesFormProperties {

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,
	}
	export function CreateMaintenance_statusConnection_servicesFormGroup() {
		return new FormGroup<Maintenance_statusConnection_servicesFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A collection of related issues and pull requests. */
	export interface Milestone {

		/** Required */
		closed_at: Date;

		/** Required */
		closed_issues: number;

		/** Required */
		created_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/** Required */
		description: string;

		/** Required */
		due_on: Date;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		labels_url: string;

		/** Required */
		node_id: string;

		/**
		 * The number of the milestone.
		 * Required
		 */
		number: number;

		/** Required */
		open_issues: number;

		/**
		 * The state of the milestone.
		 * Required
		 */
		state: Nullable_milestoneState;

		/**
		 * The title of the milestone.
		 * Required
		 */
		title: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A collection of related issues and pull requests. */
	export interface MilestoneFormProperties {

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		closed_issues: FormControl<number | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		due_on: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The number of the milestone.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/**
		 * The state of the milestone.
		 * Required
		 */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/**
		 * The title of the milestone.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMilestoneFormGroup() {
		return new FormGroup<MilestoneFormProperties>({
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			closed_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			due_on: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Milestoned Issue Event */
	export interface Milestoned_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		milestone: Milestoned_issue_eventMilestone;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Milestoned Issue Event */
	export interface Milestoned_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMilestoned_issue_eventFormGroup() {
		return new FormGroup<Milestoned_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Milestoned_issue_eventMilestone {

		/** Required */
		title: string;
	}
	export interface Milestoned_issue_eventMilestoneFormProperties {

		/** Required */
		title: FormControl<string | null | undefined>,
	}
	export function CreateMilestoned_issue_eventMilestoneFormGroup() {
		return new FormGroup<Milestoned_issue_eventMilestoneFormProperties>({
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Moved Column in Project Issue Event */
	export interface Moved_column_in_project_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;
		project_card?: Moved_column_in_project_issue_eventProject_card;

		/** Required */
		url: string;
	}

	/** Moved Column in Project Issue Event */
	export interface Moved_column_in_project_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMoved_column_in_project_issue_eventFormGroup() {
		return new FormGroup<Moved_column_in_project_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Moved_column_in_project_issue_eventProject_card {

		/** Required */
		column_name: string;

		/** Required */
		id: number;
		previous_column_name?: string | null;

		/** Required */
		project_id: number;

		/** Required */
		project_url: string;

		/** Required */
		url: string;
	}
	export interface Moved_column_in_project_issue_eventProject_cardFormProperties {

		/** Required */
		column_name: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		previous_column_name: FormControl<string | null | undefined>,

		/** Required */
		project_id: FormControl<number | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMoved_column_in_project_issue_eventProject_cardFormGroup() {
		return new FormGroup<Moved_column_in_project_issue_eventProject_cardFormProperties>({
			column_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previous_column_name: new FormControl<string | null | undefined>(undefined),
			project_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
	export interface Nullable_authorization {

		/** Required */
		app: Nullable_authorizationApp;

		/** Required */
		created_at: Date;

		/** Required */
		fingerprint: string;

		/** Required */
		hashed_token: string;

		/** Required */
		id: number;
		installation?: Nullable_scoped_installation;

		/** Required */
		note: string;

		/** Required */
		note_url: string;

		/**
		 * A list of scopes that this authorization is in.
		 * Required
		 */
		scopes: Array<string>;

		/** Required */
		token: string;

		/** Required */
		token_last_eight: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** Simple User */
		user?: Nullable_simple_user;
	}

	/** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
	export interface Nullable_authorizationFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		fingerprint: FormControl<string | null | undefined>,

		/** Required */
		hashed_token: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		note: FormControl<string | null | undefined>,

		/** Required */
		note_url: FormControl<string | null | undefined>,

		/** Required */
		token: FormControl<string | null | undefined>,

		/** Required */
		token_last_eight: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_authorizationFormGroup() {
		return new FormGroup<Nullable_authorizationFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			fingerprint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hashed_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			note_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			token_last_eight: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_authorizationApp {

		/** Required */
		client_id: string;

		/** Required */
		name: string;

		/** Required */
		url: string;
	}
	export interface Nullable_authorizationAppFormProperties {

		/** Required */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_authorizationAppFormGroup() {
		return new FormGroup<Nullable_authorizationAppFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Collaborator */
	export interface Nullable_collaborator {

		/** Required */
		avatar_url: string;
		email?: string | null;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;
		name?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;
		permissions?: Nullable_collaboratorPermissions;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}

	/** Collaborator */
	export interface Nullable_collaboratorFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateNullable_collaboratorFormGroup() {
		return new FormGroup<Nullable_collaboratorFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_collaboratorPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Nullable_collaboratorPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateNullable_collaboratorPermissionsFormGroup() {
		return new FormGroup<Nullable_collaboratorPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Simple Commit */
	export interface Nullable_simple_commit {

		/** Required */
		author: Nullable_simple_commitAuthor;

		/** Required */
		committer: Nullable_simple_commitCommitter;

		/** Required */
		id: string;

		/** Required */
		message: string;

		/** Required */
		timestamp: Date;

		/** Required */
		tree_id: string;
	}

	/** Simple Commit */
	export interface Nullable_simple_commitFormProperties {

		/** Required */
		id: FormControl<string | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		timestamp: FormControl<Date | null | undefined>,

		/** Required */
		tree_id: FormControl<string | null | undefined>,
	}
	export function CreateNullable_simple_commitFormGroup() {
		return new FormGroup<Nullable_simple_commitFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			tree_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_simple_commitAuthor {

		/** Required */
		email: string;

		/** Required */
		name: string;
	}
	export interface Nullable_simple_commitAuthorFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateNullable_simple_commitAuthorFormGroup() {
		return new FormGroup<Nullable_simple_commitAuthorFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Nullable_simple_commitCommitter {

		/** Required */
		email: string;

		/** Required */
		name: string;
	}
	export interface Nullable_simple_commitCommitterFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateNullable_simple_commitCommitterFormGroup() {
		return new FormGroup<Nullable_simple_commitCommitterFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Org Hook */
	export interface Org_hook {

		/** Required */
		active: boolean;

		/** Required */
		config: Org_hookConfig;

		/** Required */
		created_at: Date;

		/** Required */
		events: Array<string>;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		ping_url: string;

		/** Required */
		type: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Org Hook */
	export interface Org_hookFormProperties {

		/** Required */
		active: FormControl<boolean | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		ping_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrg_hookFormGroup() {
		return new FormGroup<Org_hookFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ping_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Org_hookConfig {
		content_type?: string | null;
		insecure_ssl?: string | null;
		secret?: string | null;
		url?: string | null;
	}
	export interface Org_hookConfigFormProperties {
		content_type: FormControl<string | null | undefined>,
		insecure_ssl: FormControl<string | null | undefined>,
		secret: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrg_hookConfigFormGroup() {
		return new FormGroup<Org_hookConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			insecure_ssl: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Org Membership */
	export interface Org_membership {

		/**
		 * Organization Simple
		 * Required
		 */
		organization: Organization_simple;

		/** Required */
		organization_url: string;
		permissions?: Org_membershipPermissions;

		/**
		 * The user's membership type in the organization.
		 * Required
		 */
		role: Org_membershipRole;

		/**
		 * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
		 * Required
		 */
		state: Org_membershipState;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Org Membership */
	export interface Org_membershipFormProperties {

		/** Required */
		organization_url: FormControl<string | null | undefined>,

		/**
		 * The user's membership type in the organization.
		 * Required
		 */
		role: FormControl<Org_membershipRole | null | undefined>,

		/**
		 * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
		 * Required
		 */
		state: FormControl<Org_membershipState | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrg_membershipFormGroup() {
		return new FormGroup<Org_membershipFormProperties>({
			organization_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			role: new FormControl<Org_membershipRole | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Org_membershipState | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Organization Simple */
	export interface Organization_simple {

		/** Required */
		avatar_url: string;

		/** Required */
		description: string;

		/** Required */
		events_url: string;

		/** Required */
		hooks_url: string;

		/** Required */
		id: number;

		/** Required */
		issues_url: string;

		/** Required */
		login: string;

		/** Required */
		members_url: string;

		/** Required */
		node_id: string;

		/** Required */
		public_members_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		url: string;
	}

	/** Organization Simple */
	export interface Organization_simpleFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		members_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		public_members_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrganization_simpleFormGroup() {
		return new FormGroup<Organization_simpleFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public_members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Org_membershipPermissions {

		/** Required */
		can_create_repository: boolean;
	}
	export interface Org_membershipPermissionsFormProperties {

		/** Required */
		can_create_repository: FormControl<boolean | null | undefined>,
	}
	export function CreateOrg_membershipPermissionsFormGroup() {
		return new FormGroup<Org_membershipPermissionsFormProperties>({
			can_create_repository: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Org_membershipRole { admin = 0, member = 1, billing_manager = 2 }

	export enum Org_membershipState { active = 0, pending = 1 }

	export interface Org_pre_receive_hook {
		allow_downstream_configuration?: boolean | null;
		configuration_url?: string | null;
		enforcement?: string | null;
		id?: number | null;
		name?: string | null;
	}
	export interface Org_pre_receive_hookFormProperties {
		allow_downstream_configuration: FormControl<boolean | null | undefined>,
		configuration_url: FormControl<string | null | undefined>,
		enforcement: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateOrg_pre_receive_hookFormGroup() {
		return new FormGroup<Org_pre_receive_hookFormProperties>({
			allow_downstream_configuration: new FormControl<boolean | null | undefined>(undefined),
			configuration_url: new FormControl<string | null | undefined>(undefined),
			enforcement: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Secrets for GitHub Actions for an organization. */
	export interface Organization_actions_secret {

		/** Required */
		created_at: Date;

		/**
		 * The name of the secret.
		 * Required
		 */
		name: string;
		selected_repositories_url?: string | null;

		/** Required */
		updated_at: Date;

		/**
		 * Visibility of a secret
		 * Required
		 */
		visibility: Organization_actions_secretVisibility;
	}

	/** Secrets for GitHub Actions for an organization. */
	export interface Organization_actions_secretFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The name of the secret.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
		selected_repositories_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * Visibility of a secret
		 * Required
		 */
		visibility: FormControl<Organization_actions_secretVisibility | null | undefined>,
	}
	export function CreateOrganization_actions_secretFormGroup() {
		return new FormGroup<Organization_actions_secretFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			selected_repositories_url: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<Organization_actions_secretVisibility | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Organization_actions_secretVisibility { all = 0, private = 1, selected = 2 }


	/** Organization Full */
	export interface Organization_full {

		/** Required */
		avatar_url: string;
		billing_email?: string | null;
		blog?: string | null;
		collaborators?: number | null;
		company?: string | null;

		/** Required */
		created_at: Date;
		default_repository_permission?: string | null;

		/** Required */
		description: string;
		disk_usage?: number | null;
		email?: string | null;

		/** Required */
		events_url: string;

		/** Required */
		followers: number;

		/** Required */
		following: number;

		/** Required */
		has_organization_projects: boolean;

		/** Required */
		has_repository_projects: boolean;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		is_verified?: boolean | null;

		/** Required */
		issues_url: string;
		location?: string | null;

		/** Required */
		login: string;
		members_allowed_repository_creation_type?: string | null;
		members_can_create_internal_repositories?: boolean | null;
		members_can_create_pages?: boolean | null;
		members_can_create_private_pages?: boolean | null;
		members_can_create_private_repositories?: boolean | null;
		members_can_create_public_pages?: boolean | null;
		members_can_create_public_repositories?: boolean | null;
		members_can_create_repositories?: boolean | null;

		/** Required */
		members_url: string;
		name?: string | null;

		/** Required */
		node_id: string;
		owned_private_repos?: number | null;
		plan?: Organization_fullPlan;
		private_gists?: number | null;

		/** Required */
		public_gists: number;

		/** Required */
		public_members_url: string;

		/** Required */
		public_repos: number;

		/** Required */
		repos_url: string;
		total_private_repos?: number | null;
		twitter_username?: string | null;
		two_factor_requirement_enabled?: boolean | null;

		/** Required */
		type: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Organization Full */
	export interface Organization_fullFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		billing_email: FormControl<string | null | undefined>,
		blog: FormControl<string | null | undefined>,
		collaborators: FormControl<number | null | undefined>,
		company: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		default_repository_permission: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,
		disk_usage: FormControl<number | null | undefined>,
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers: FormControl<number | null | undefined>,

		/** Required */
		following: FormControl<number | null | undefined>,

		/** Required */
		has_organization_projects: FormControl<boolean | null | undefined>,

		/** Required */
		has_repository_projects: FormControl<boolean | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		is_verified: FormControl<boolean | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,
		location: FormControl<string | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,
		members_allowed_repository_creation_type: FormControl<string | null | undefined>,
		members_can_create_internal_repositories: FormControl<boolean | null | undefined>,
		members_can_create_pages: FormControl<boolean | null | undefined>,
		members_can_create_private_pages: FormControl<boolean | null | undefined>,
		members_can_create_private_repositories: FormControl<boolean | null | undefined>,
		members_can_create_public_pages: FormControl<boolean | null | undefined>,
		members_can_create_public_repositories: FormControl<boolean | null | undefined>,
		members_can_create_repositories: FormControl<boolean | null | undefined>,

		/** Required */
		members_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		owned_private_repos: FormControl<number | null | undefined>,
		private_gists: FormControl<number | null | undefined>,

		/** Required */
		public_gists: FormControl<number | null | undefined>,

		/** Required */
		public_members_url: FormControl<string | null | undefined>,

		/** Required */
		public_repos: FormControl<number | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,
		total_private_repos: FormControl<number | null | undefined>,
		twitter_username: FormControl<string | null | undefined>,
		two_factor_requirement_enabled: FormControl<boolean | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrganization_fullFormGroup() {
		return new FormGroup<Organization_fullFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			billing_email: new FormControl<string | null | undefined>(undefined),
			blog: new FormControl<string | null | undefined>(undefined),
			collaborators: new FormControl<number | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_repository_permission: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disk_usage: new FormControl<number | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			following: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			has_organization_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_repository_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_verified: new FormControl<boolean | null | undefined>(undefined),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			location: new FormControl<string | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			members_allowed_repository_creation_type: new FormControl<string | null | undefined>(undefined),
			members_can_create_internal_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_pages: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_private_pages: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_private_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_public_pages: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			owned_private_repos: new FormControl<number | null | undefined>(undefined),
			private_gists: new FormControl<number | null | undefined>(undefined),
			public_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total_private_repos: new FormControl<number | null | undefined>(undefined),
			twitter_username: new FormControl<string | null | undefined>(undefined),
			two_factor_requirement_enabled: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Organization_fullPlan {
		filled_seats?: number | null;

		/** Required */
		name: string;

		/** Required */
		private_repos: number;
		seats?: number | null;

		/** Required */
		space: number;
	}
	export interface Organization_fullPlanFormProperties {
		filled_seats: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		private_repos: FormControl<number | null | undefined>,
		seats: FormControl<number | null | undefined>,

		/** Required */
		space: FormControl<number | null | undefined>,
	}
	export function CreateOrganization_fullPlanFormGroup() {
		return new FormGroup<Organization_fullPlanFormProperties>({
			filled_seats: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			seats: new FormControl<number | null | undefined>(undefined),
			space: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for GitHub Pages for a repository. */
	export interface Page {

		/** The process in which the Page will be built. */
		build_type?: PageBuild_type | null;

		/**
		 * The Pages site's custom domain
		 * Required
		 */
		cname: string;

		/**
		 * Whether the Page has a custom 404 page.
		 * Required
		 */
		custom_404: boolean;

		/** The web address the Page can be accessed from. */
		html_url?: string | null;
		https_certificate?: Pages_https_certificate;

		/** Whether https is enabled on the domain */
		https_enforced?: boolean | null;

		/** The timestamp when a pending domain becomes unverified. */
		pending_domain_unverified_at?: Date | null;

		/** The state if the domain is verified */
		protected_domain_state?: PageProtected_domain_state | null;

		/**
		 * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
		 * Required
		 */
		public: boolean;
		source?: Pages_source_hash;

		/**
		 * The status of the most recent build of the Page.
		 * Required
		 */
		status: PageStatus;

		/**
		 * The API address for accessing this Page resource.
		 * Required
		 */
		url: string;
	}

	/** The configuration for GitHub Pages for a repository. */
	export interface PageFormProperties {

		/** The process in which the Page will be built. */
		build_type: FormControl<PageBuild_type | null | undefined>,

		/**
		 * The Pages site's custom domain
		 * Required
		 */
		cname: FormControl<string | null | undefined>,

		/**
		 * Whether the Page has a custom 404 page.
		 * Required
		 */
		custom_404: FormControl<boolean | null | undefined>,

		/** The web address the Page can be accessed from. */
		html_url: FormControl<string | null | undefined>,

		/** Whether https is enabled on the domain */
		https_enforced: FormControl<boolean | null | undefined>,

		/** The timestamp when a pending domain becomes unverified. */
		pending_domain_unverified_at: FormControl<Date | null | undefined>,

		/** The state if the domain is verified */
		protected_domain_state: FormControl<PageProtected_domain_state | null | undefined>,

		/**
		 * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
		 * Required
		 */
		public: FormControl<boolean | null | undefined>,

		/**
		 * The status of the most recent build of the Page.
		 * Required
		 */
		status: FormControl<PageStatus | null | undefined>,

		/**
		 * The API address for accessing this Page resource.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePageFormGroup() {
		return new FormGroup<PageFormProperties>({
			build_type: new FormControl<PageBuild_type | null | undefined>(undefined),
			cname: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			custom_404: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined),
			https_enforced: new FormControl<boolean | null | undefined>(undefined),
			pending_domain_unverified_at: new FormControl<Date | null | undefined>(undefined),
			protected_domain_state: new FormControl<PageProtected_domain_state | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PageStatus | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PageBuild_type { legacy = 0, workflow = 1 }

	export interface Pages_https_certificate {

		/** Required */
		description: string;

		/**
		 * Array of the domain set and its alternate name (if it is configured)
		 * Required
		 */
		domains: Array<string>;
		expires_at?: Date | null;

		/** Required */
		state: Pages_https_certificateState;
	}
	export interface Pages_https_certificateFormProperties {

		/** Required */
		description: FormControl<string | null | undefined>,
		expires_at: FormControl<Date | null | undefined>,

		/** Required */
		state: FormControl<Pages_https_certificateState | null | undefined>,
	}
	export function CreatePages_https_certificateFormGroup() {
		return new FormGroup<Pages_https_certificateFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expires_at: new FormControl<Date | null | undefined>(undefined),
			state: new FormControl<Pages_https_certificateState | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Pages_https_certificateState { new = 0, authorization_created = 1, authorization_pending = 2, authorized = 3, authorization_revoked = 4, issued = 5, uploaded = 6, approved = 7, errored = 8, bad_authz = 9, destroy_pending = 10, dns_changed = 11 }

	export enum PageProtected_domain_state { pending = 0, verified = 1, unverified = 2 }

	export interface Pages_source_hash {

		/** Required */
		branch: string;

		/** Required */
		path: string;
	}
	export interface Pages_source_hashFormProperties {

		/** Required */
		branch: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,
	}
	export function CreatePages_source_hashFormGroup() {
		return new FormGroup<Pages_source_hashFormProperties>({
			branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PageStatus { built = 0, building = 1, errored = 2 }


	/** Page Build */
	export interface Page_build {

		/** Required */
		commit: string;

		/** Required */
		created_at: Date;

		/** Required */
		duration: number;

		/** Required */
		error: Page_buildError;

		/**
		 * Simple User
		 * Required
		 */
		pusher: Nullable_simple_user;

		/** Required */
		status: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Page Build */
	export interface Page_buildFormProperties {

		/** Required */
		commit: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		duration: FormControl<number | null | undefined>,

		/** Required */
		status: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePage_buildFormGroup() {
		return new FormGroup<Page_buildFormProperties>({
			commit: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			duration: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Page_buildError {

		/** Required */
		message: string;
	}
	export interface Page_buildErrorFormProperties {

		/** Required */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePage_buildErrorFormGroup() {
		return new FormGroup<Page_buildErrorFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Page Build Status */
	export interface Page_build_status {

		/** Required */
		status: string;

		/** Required */
		url: string;
	}

	/** Page Build Status */
	export interface Page_build_statusFormProperties {

		/** Required */
		status: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePage_build_statusFormGroup() {
		return new FormGroup<Page_build_statusFormProperties>({
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Participation_stats {

		/** Required */
		all: Array<number>;

		/** Required */
		owner: Array<number>;
	}
	export interface Participation_statsFormProperties {
	}
	export function CreateParticipation_statsFormGroup() {
		return new FormGroup<Participation_statsFormProperties>({
		});

	}

	export interface Pre_receive_environment {
		created_at?: string | null;
		default_environment?: boolean | null;
		download?: Pre_receive_environmentDownload;
		hooks_count?: number | null;
		html_url?: string | null;
		id?: number | null;
		image_url?: string | null;
		name?: string | null;
		url?: string | null;
	}
	export interface Pre_receive_environmentFormProperties {
		created_at: FormControl<string | null | undefined>,
		default_environment: FormControl<boolean | null | undefined>,
		hooks_count: FormControl<number | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		image_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_environmentFormGroup() {
		return new FormGroup<Pre_receive_environmentFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			default_environment: new FormControl<boolean | null | undefined>(undefined),
			hooks_count: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Pre_receive_environmentDownload {
		downloaded_at?: string | null;
		message?: string | null;
		state?: string | null;
		url?: string | null;
	}
	export interface Pre_receive_environmentDownloadFormProperties {
		downloaded_at: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_environmentDownloadFormGroup() {
		return new FormGroup<Pre_receive_environmentDownloadFormProperties>({
			downloaded_at: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Pre_receive_environment_download_status {
		downloaded_at?: string | null;
		message?: string | null;
		state?: string | null;
		url?: string | null;
	}
	export interface Pre_receive_environment_download_statusFormProperties {
		downloaded_at: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_environment_download_statusFormGroup() {
		return new FormGroup<Pre_receive_environment_download_statusFormProperties>({
			downloaded_at: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Pre_receive_hook {
		allow_downstream_configuration?: boolean | null;
		enforcement?: string | null;
		environment?: Pre_receive_hookEnvironment;
		id?: number | null;
		name?: string | null;
		script?: string | null;
		script_repository?: Pre_receive_hookScript_repository;
	}
	export interface Pre_receive_hookFormProperties {
		allow_downstream_configuration: FormControl<boolean | null | undefined>,
		enforcement: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		script: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_hookFormGroup() {
		return new FormGroup<Pre_receive_hookFormProperties>({
			allow_downstream_configuration: new FormControl<boolean | null | undefined>(undefined),
			enforcement: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			script: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Pre_receive_hookEnvironment {
		created_at?: string | null;
		default_environment?: boolean | null;
		download?: Pre_receive_hookEnvironmentDownload;
		hooks_count?: number | null;
		html_url?: string | null;
		id?: number | null;
		image_url?: string | null;
		name?: string | null;
		url?: string | null;
	}
	export interface Pre_receive_hookEnvironmentFormProperties {
		created_at: FormControl<string | null | undefined>,
		default_environment: FormControl<boolean | null | undefined>,
		hooks_count: FormControl<number | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		image_url: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_hookEnvironmentFormGroup() {
		return new FormGroup<Pre_receive_hookEnvironmentFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			default_environment: new FormControl<boolean | null | undefined>(undefined),
			hooks_count: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Pre_receive_hookEnvironmentDownload {
		downloaded_at?: string | null;
		message?: string | null;
		state?: string | null;
		url?: string | null;
	}
	export interface Pre_receive_hookEnvironmentDownloadFormProperties {
		downloaded_at: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_hookEnvironmentDownloadFormGroup() {
		return new FormGroup<Pre_receive_hookEnvironmentDownloadFormProperties>({
			downloaded_at: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Pre_receive_hookScript_repository {
		full_name?: string | null;
		html_url?: string | null;
		id?: number | null;
		url?: string | null;
	}
	export interface Pre_receive_hookScript_repositoryFormProperties {
		full_name: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreatePre_receive_hookScript_repositoryFormGroup() {
		return new FormGroup<Pre_receive_hookScript_repositoryFormProperties>({
			full_name: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Private User */
	export interface Private_user {

		/** Required */
		avatar_url: string;

		/** Required */
		bio: string;

		/** Required */
		blog: string;
		business_plus?: boolean | null;

		/** Required */
		collaborators: number;

		/** Required */
		company: string;

		/** Required */
		created_at: Date;

		/** Required */
		disk_usage: number;

		/** Required */
		email: string;

		/** Required */
		events_url: string;

		/** Required */
		followers: number;

		/** Required */
		followers_url: string;

		/** Required */
		following: number;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		hireable: boolean;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		ldap_dn?: string | null;

		/** Required */
		location: string;

		/** Required */
		login: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		owned_private_repos: number;
		plan?: Private_userPlan;

		/** Required */
		private_gists: number;

		/** Required */
		public_gists: number;

		/** Required */
		public_repos: number;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;
		suspended_at?: Date | null;

		/** Required */
		total_private_repos: number;
		twitter_username?: string | null;

		/** Required */
		two_factor_authentication: boolean;

		/** Required */
		type: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Private User */
	export interface Private_userFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		bio: FormControl<string | null | undefined>,

		/** Required */
		blog: FormControl<string | null | undefined>,
		business_plus: FormControl<boolean | null | undefined>,

		/** Required */
		collaborators: FormControl<number | null | undefined>,

		/** Required */
		company: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		disk_usage: FormControl<number | null | undefined>,

		/** Required */
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers: FormControl<number | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following: FormControl<number | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		hireable: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		ldap_dn: FormControl<string | null | undefined>,

		/** Required */
		location: FormControl<string | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		owned_private_repos: FormControl<number | null | undefined>,

		/** Required */
		private_gists: FormControl<number | null | undefined>,

		/** Required */
		public_gists: FormControl<number | null | undefined>,

		/** Required */
		public_repos: FormControl<number | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,
		suspended_at: FormControl<Date | null | undefined>,

		/** Required */
		total_private_repos: FormControl<number | null | undefined>,
		twitter_username: FormControl<string | null | undefined>,

		/** Required */
		two_factor_authentication: FormControl<boolean | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePrivate_userFormGroup() {
		return new FormGroup<Private_userFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bio: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blog: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			business_plus: new FormControl<boolean | null | undefined>(undefined),
			collaborators: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			disk_usage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hireable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			owned_private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_gists: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			public_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			suspended_at: new FormControl<Date | null | undefined>(undefined),
			total_private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			twitter_username: new FormControl<string | null | undefined>(undefined),
			two_factor_authentication: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Private_userPlan {

		/** Required */
		collaborators: number;

		/** Required */
		name: string;

		/** Required */
		private_repos: number;

		/** Required */
		space: number;
	}
	export interface Private_userPlanFormProperties {

		/** Required */
		collaborators: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		private_repos: FormControl<number | null | undefined>,

		/** Required */
		space: FormControl<number | null | undefined>,
	}
	export function CreatePrivate_userPlanFormGroup() {
		return new FormGroup<Private_userPlanFormProperties>({
			collaborators: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private_repos: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			space: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Projects are a way to organize columns and cards of work. */
	export interface Project {

		/**
		 * Body of the project
		 * Required
		 */
		body: string;

		/** Required */
		columns_url: string;

		/** Required */
		created_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/**
		 * Name of the project
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		number: number;

		/** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
		organization_permission?: ProjectOrganization_permission | null;

		/** Required */
		owner_url: string;

		/** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
		private?: boolean | null;

		/**
		 * State of the project; either 'open' or 'closed'
		 * Required
		 */
		state: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Projects are a way to organize columns and cards of work. */
	export interface ProjectFormProperties {

		/**
		 * Body of the project
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** Required */
		columns_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/**
		 * Name of the project
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,

		/** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
		organization_permission: FormControl<ProjectOrganization_permission | null | undefined>,

		/** Required */
		owner_url: FormControl<string | null | undefined>,

		/** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
		private: FormControl<boolean | null | undefined>,

		/**
		 * State of the project; either 'open' or 'closed'
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProjectFormGroup() {
		return new FormGroup<ProjectFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			columns_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			organization_permission: new FormControl<ProjectOrganization_permission | null | undefined>(undefined),
			owner_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ProjectOrganization_permission { read = 0, write = 1, admin = 2, none = 3 }


	/** Project cards represent a scope of work. */
	export interface Project_card {

		/** Whether or not the card is archived */
		archived?: boolean | null;
		column_name?: string | null;

		/** Required */
		column_url: string;
		content_url?: string | null;

		/** Required */
		created_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/**
		 * The project card's ID
		 * Required
		 */
		id: number;

		/** Required */
		node_id: string;

		/** Required */
		note: string;
		project_id?: string | null;

		/** Required */
		project_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Project cards represent a scope of work. */
	export interface Project_cardFormProperties {

		/** Whether or not the card is archived */
		archived: FormControl<boolean | null | undefined>,
		column_name: FormControl<string | null | undefined>,

		/** Required */
		column_url: FormControl<string | null | undefined>,
		content_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The project card's ID
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		note: FormControl<string | null | undefined>,
		project_id: FormControl<string | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProject_cardFormGroup() {
		return new FormGroup<Project_cardFormProperties>({
			archived: new FormControl<boolean | null | undefined>(undefined),
			column_name: new FormControl<string | null | undefined>(undefined),
			column_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			content_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			project_id: new FormControl<string | null | undefined>(undefined),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Project Collaborator Permission */
	export interface Project_collaborator_permission {

		/** Required */
		permission: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Project Collaborator Permission */
	export interface Project_collaborator_permissionFormProperties {

		/** Required */
		permission: FormControl<string | null | undefined>,
	}
	export function CreateProject_collaborator_permissionFormGroup() {
		return new FormGroup<Project_collaborator_permissionFormProperties>({
			permission: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Project columns contain cards of work. */
	export interface Project_column {

		/** Required */
		cards_url: string;

		/** Required */
		created_at: Date;

		/**
		 * The unique identifier of the project column
		 * Required
		 */
		id: number;

		/**
		 * Name of the project column
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		project_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** Project columns contain cards of work. */
	export interface Project_columnFormProperties {

		/** Required */
		cards_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The unique identifier of the project column
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * Name of the project column
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProject_columnFormGroup() {
		return new FormGroup<Project_columnFormProperties>({
			cards_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Branch protections protect branches */
	export interface Protected_branch {
		allow_deletions?: Protected_branchAllow_deletions;
		allow_force_pushes?: Protected_branchAllow_force_pushes;
		block_creations?: Protected_branchBlock_creations;
		enforce_admins?: Protected_branchEnforce_admins;
		required_conversation_resolution?: Protected_branchRequired_conversation_resolution;
		required_linear_history?: Protected_branchRequired_linear_history;
		required_pull_request_reviews?: Protected_branchRequired_pull_request_reviews;
		required_signatures?: Protected_branchRequired_signatures;

		/** Status Check Policy */
		required_status_checks?: Status_check_policy;

		/** Branch Restriction Policy */
		restrictions?: Branch_restriction_policy;

		/** Required */
		url: string;
	}

	/** Branch protections protect branches */
	export interface Protected_branchFormProperties {

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branchFormGroup() {
		return new FormGroup<Protected_branchFormProperties>({
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchAllow_deletions {

		/** Required */
		enabled: boolean;
	}
	export interface Protected_branchAllow_deletionsFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateProtected_branchAllow_deletionsFormGroup() {
		return new FormGroup<Protected_branchAllow_deletionsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchAllow_force_pushes {

		/** Required */
		enabled: boolean;
	}
	export interface Protected_branchAllow_force_pushesFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateProtected_branchAllow_force_pushesFormGroup() {
		return new FormGroup<Protected_branchAllow_force_pushesFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchBlock_creations {

		/** Required */
		enabled: boolean;
	}
	export interface Protected_branchBlock_creationsFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateProtected_branchBlock_creationsFormGroup() {
		return new FormGroup<Protected_branchBlock_creationsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchEnforce_admins {

		/** Required */
		enabled: boolean;

		/** Required */
		url: string;
	}
	export interface Protected_branchEnforce_adminsFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branchEnforce_adminsFormGroup() {
		return new FormGroup<Protected_branchEnforce_adminsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchRequired_conversation_resolution {
		enabled?: boolean | null;
	}
	export interface Protected_branchRequired_conversation_resolutionFormProperties {
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateProtected_branchRequired_conversation_resolutionFormGroup() {
		return new FormGroup<Protected_branchRequired_conversation_resolutionFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Protected_branchRequired_linear_history {

		/** Required */
		enabled: boolean;
	}
	export interface Protected_branchRequired_linear_historyFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateProtected_branchRequired_linear_historyFormGroup() {
		return new FormGroup<Protected_branchRequired_linear_historyFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchRequired_pull_request_reviews {
		dismiss_stale_reviews?: boolean | null;
		dismissal_restrictions?: Protected_branchRequired_pull_request_reviewsDismissal_restrictions;
		require_code_owner_reviews?: boolean | null;
		required_approving_review_count?: number | null;

		/** Required */
		url: string;
	}
	export interface Protected_branchRequired_pull_request_reviewsFormProperties {
		dismiss_stale_reviews: FormControl<boolean | null | undefined>,
		require_code_owner_reviews: FormControl<boolean | null | undefined>,
		required_approving_review_count: FormControl<number | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branchRequired_pull_request_reviewsFormGroup() {
		return new FormGroup<Protected_branchRequired_pull_request_reviewsFormProperties>({
			dismiss_stale_reviews: new FormControl<boolean | null | undefined>(undefined),
			require_code_owner_reviews: new FormControl<boolean | null | undefined>(undefined),
			required_approving_review_count: new FormControl<number | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchRequired_pull_request_reviewsDismissal_restrictions {
		apps?: Array<Integration>;

		/** Required */
		teams: Array<Team>;

		/** Required */
		teams_url: string;

		/** Required */
		url: string;

		/** Required */
		users: Array<Simple_user>;

		/** Required */
		users_url: string;
	}
	export interface Protected_branchRequired_pull_request_reviewsDismissal_restrictionsFormProperties {

		/** Required */
		teams_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		users_url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branchRequired_pull_request_reviewsDismissal_restrictionsFormGroup() {
		return new FormGroup<Protected_branchRequired_pull_request_reviewsDismissal_restrictionsFormProperties>({
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			users_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Protected_branchRequired_signatures {

		/** Required */
		enabled: boolean;

		/** Required */
		url: string;
	}
	export interface Protected_branchRequired_signaturesFormProperties {

		/** Required */
		enabled: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateProtected_branchRequired_signaturesFormGroup() {
		return new FormGroup<Protected_branchRequired_signaturesFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Status Check Policy */
	export interface Status_check_policy {

		/** Required */
		contexts: Array<string>;

		/** Required */
		contexts_url: string;

		/** Required */
		strict: boolean;

		/** Required */
		url: string;
	}

	/** Status Check Policy */
	export interface Status_check_policyFormProperties {

		/** Required */
		contexts_url: FormControl<string | null | undefined>,

		/** Required */
		strict: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateStatus_check_policyFormGroup() {
		return new FormGroup<Status_check_policyFormProperties>({
			contexts_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			strict: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Public_key_full {

		/** Required */
		created_at: Date;

		/** Required */
		id: number;

		/** Required */
		key: string;

		/** Required */
		last_used: Date;

		/** Required */
		read_only: boolean;

		/** Required */
		repository_id: number;

		/** Required */
		title: string;

		/** Required */
		url: string;

		/** Required */
		user_id: number;

		/** Required */
		verified: boolean;
	}
	export interface Public_key_fullFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		last_used: FormControl<Date | null | undefined>,

		/** Required */
		read_only: FormControl<boolean | null | undefined>,

		/** Required */
		repository_id: FormControl<number | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		user_id: FormControl<number | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreatePublic_key_fullFormGroup() {
		return new FormGroup<Public_key_fullFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_used: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			read_only: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			repository_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. */
	export interface Pull_request {

		/** Required */
		_links: Pull_request_links;
		active_lock_reason?: string | null;

		/** Required */
		additions: number;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Nullable_simple_user;
		assignees?: Array<Simple_user>;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/**
		 * The status of auto merging a pull request.
		 * Required
		 */
		auto_merge: Auto_merge;

		/** Required */
		base: Pull_requestBase;

		/** Required */
		body: string;

		/** Required */
		changed_files: number;

		/** Required */
		closed_at: Date;

		/** Required */
		comments: number;

		/** Required */
		comments_url: string;

		/** Required */
		commits: number;

		/** Required */
		commits_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		deletions: number;

		/** Required */
		diff_url: string;

		/** Indicates whether or not the pull request is a draft. */
		draft?: boolean | null;

		/** Required */
		head: Pull_requestHead;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		issue_url: string;

		/** Required */
		Pull_requestLabels: Array<Pull_requestLabels>;

		/** Required */
		locked: boolean;

		/**
		 * Indicates whether maintainers can modify the pull request.
		 * Required
		 */
		maintainer_can_modify: boolean;

		/** Required */
		merge_commit_sha: string;

		/** Required */
		mergeable: boolean;

		/** Required */
		mergeable_state: string;

		/** Required */
		merged: boolean;

		/** Required */
		merged_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		merged_by: Nullable_simple_user;

		/**
		 * A collection of related issues and pull requests.
		 * Required
		 */
		milestone: Nullable_milestone;

		/** Required */
		node_id: string;

		/**
		 * Number uniquely identifying the pull request within its repository.
		 * Required
		 */
		number: number;

		/** Required */
		patch_url: string;
		rebaseable?: boolean | null;
		requested_reviewers?: Array<Simple_user>;
		requested_teams?: Array<Team_simple>;

		/** Required */
		review_comment_url: string;

		/** Required */
		review_comments: number;

		/** Required */
		review_comments_url: string;

		/**
		 * State of this Pull Request. Either `open` or `closed`.
		 * Required
		 */
		state: Nullable_milestoneState;

		/** Required */
		statuses_url: string;

		/**
		 * The title of the pull request.
		 * Required
		 */
		title: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. */
	export interface Pull_requestFormProperties {
		active_lock_reason: FormControl<string | null | undefined>,

		/** Required */
		additions: FormControl<number | null | undefined>,

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Required */
		body: FormControl<string | null | undefined>,

		/** Required */
		changed_files: FormControl<number | null | undefined>,

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		comments: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits: FormControl<number | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		deletions: FormControl<number | null | undefined>,

		/** Required */
		diff_url: FormControl<string | null | undefined>,

		/** Indicates whether or not the pull request is a draft. */
		draft: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		issue_url: FormControl<string | null | undefined>,

		/** Required */
		locked: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether maintainers can modify the pull request.
		 * Required
		 */
		maintainer_can_modify: FormControl<boolean | null | undefined>,

		/** Required */
		merge_commit_sha: FormControl<string | null | undefined>,

		/** Required */
		mergeable: FormControl<boolean | null | undefined>,

		/** Required */
		mergeable_state: FormControl<string | null | undefined>,

		/** Required */
		merged: FormControl<boolean | null | undefined>,

		/** Required */
		merged_at: FormControl<Date | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Number uniquely identifying the pull request within its repository.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/** Required */
		patch_url: FormControl<string | null | undefined>,
		rebaseable: FormControl<boolean | null | undefined>,

		/** Required */
		review_comment_url: FormControl<string | null | undefined>,

		/** Required */
		review_comments: FormControl<number | null | undefined>,

		/** Required */
		review_comments_url: FormControl<string | null | undefined>,

		/**
		 * State of this Pull Request. Either `open` or `closed`.
		 * Required
		 */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/**
		 * The title of the pull request.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestFormGroup() {
		return new FormGroup<Pull_requestFormProperties>({
			active_lock_reason: new FormControl<string | null | undefined>(undefined),
			additions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			changed_files: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			deletions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			diff_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			draft: new FormControl<boolean | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			issue_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			locked: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintainer_can_modify: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			merge_commit_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mergeable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			mergeable_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merged: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			merged_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			patch_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rebaseable: new FormControl<boolean | null | undefined>(undefined),
			review_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_comments: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			review_comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_links {

		/**
		 * Hypermedia Link
		 * Required
		 */
		comments: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		commits: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		html: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		issue: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		review_comment: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		review_comments: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		self: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		statuses: Link;
	}
	export interface Pull_request_linksFormProperties {
	}
	export function CreatePull_request_linksFormGroup() {
		return new FormGroup<Pull_request_linksFormProperties>({
		});

	}

	export interface Pull_requestBase {

		/** Required */
		label: string;

		/** Required */
		ref: string;

		/** Required */
		repo: Pull_requestBaseRepo;

		/** Required */
		sha: string;

		/** Required */
		user: Pull_requestBaseUser;
	}
	export interface Pull_requestBaseFormProperties {

		/** Required */
		label: FormControl<string | null | undefined>,

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestBaseFormGroup() {
		return new FormGroup<Pull_requestBaseFormProperties>({
			label: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestBaseRepo {
		allow_forking?: boolean | null;
		allow_merge_commit?: boolean | null;
		allow_rebase_merge?: boolean | null;
		allow_squash_merge?: boolean | null;

		/** Required */
		archive_url: string;

		/** Required */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		default_branch: string;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/** Required */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/** Required */
		has_downloads: boolean;

		/** Required */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/** Required */
		has_projects: boolean;

		/** Required */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/** Required */
		owner: Pull_requestBaseRepoOwner;
		permissions?: Pull_requestBaseRepoPermissions;

		/** Required */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		size: number;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;

		/** Required */
		statuses_url: string;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}
	export interface Pull_requestBaseRepoFormProperties {
		allow_forking: FormControl<boolean | null | undefined>,
		allow_merge_commit: FormControl<boolean | null | undefined>,
		allow_rebase_merge: FormControl<boolean | null | undefined>,
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/** Required */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		default_branch: FormControl<string | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		has_downloads: FormControl<boolean | null | undefined>,

		/** Required */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/** Required */
		has_projects: FormControl<boolean | null | undefined>,

		/** Required */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/** Required */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreatePull_requestBaseRepoFormGroup() {
		return new FormGroup<Pull_requestBaseRepoFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestBaseRepoOwner {

		/** Required */
		avatar_url: string;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Pull_requestBaseRepoOwnerFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestBaseRepoOwnerFormGroup() {
		return new FormGroup<Pull_requestBaseRepoOwnerFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestBaseRepoPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Pull_requestBaseRepoPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreatePull_requestBaseRepoPermissionsFormGroup() {
		return new FormGroup<Pull_requestBaseRepoPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Pull_requestBaseUser {

		/** Required */
		avatar_url: string;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Pull_requestBaseUserFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestBaseUserFormGroup() {
		return new FormGroup<Pull_requestBaseUserFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestHead {

		/** Required */
		label: string;

		/** Required */
		ref: string;

		/** Required */
		repo: Pull_requestHeadRepo;

		/** Required */
		sha: string;

		/** Required */
		user: Pull_requestHeadUser;
	}
	export interface Pull_requestHeadFormProperties {

		/** Required */
		label: FormControl<string | null | undefined>,

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestHeadFormGroup() {
		return new FormGroup<Pull_requestHeadFormProperties>({
			label: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestHeadRepo {
		allow_forking?: boolean | null;
		allow_merge_commit?: boolean | null;
		allow_rebase_merge?: boolean | null;
		allow_squash_merge?: boolean | null;

		/** Required */
		archive_url: string;

		/** Required */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		default_branch: string;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/** Required */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/** Required */
		has_downloads: boolean;

		/** Required */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/** Required */
		has_projects: boolean;

		/** Required */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/** Required */
		license: Pull_requestHeadRepoLicense;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/** Required */
		owner: Pull_requestHeadRepoOwner;
		permissions?: Pull_requestHeadRepoPermissions;

		/** Required */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		size: number;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;

		/** Required */
		statuses_url: string;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}
	export interface Pull_requestHeadRepoFormProperties {
		allow_forking: FormControl<boolean | null | undefined>,
		allow_merge_commit: FormControl<boolean | null | undefined>,
		allow_rebase_merge: FormControl<boolean | null | undefined>,
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/** Required */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		default_branch: FormControl<string | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		has_downloads: FormControl<boolean | null | undefined>,

		/** Required */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/** Required */
		has_projects: FormControl<boolean | null | undefined>,

		/** Required */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/** Required */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreatePull_requestHeadRepoFormGroup() {
		return new FormGroup<Pull_requestHeadRepoFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestHeadRepoLicense {

		/** Required */
		key: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		spdx_id: string;

		/** Required */
		url: string;
	}
	export interface Pull_requestHeadRepoLicenseFormProperties {

		/** Required */
		key: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		spdx_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestHeadRepoLicenseFormGroup() {
		return new FormGroup<Pull_requestHeadRepoLicenseFormProperties>({
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			spdx_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestHeadRepoOwner {

		/** Required */
		avatar_url: string;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Pull_requestHeadRepoOwnerFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestHeadRepoOwnerFormGroup() {
		return new FormGroup<Pull_requestHeadRepoOwnerFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestHeadRepoPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Pull_requestHeadRepoPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreatePull_requestHeadRepoPermissionsFormGroup() {
		return new FormGroup<Pull_requestHeadRepoPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Pull_requestHeadUser {

		/** Required */
		avatar_url: string;

		/** Required */
		events_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		login: string;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface Pull_requestHeadUserFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestHeadUserFormGroup() {
		return new FormGroup<Pull_requestHeadUserFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_requestLabels {

		/** Required */
		color: string;

		/** Required */
		default: boolean;

		/** Required */
		description: string;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		url: string;
	}
	export interface Pull_requestLabelsFormProperties {

		/** Required */
		color: FormControl<string | null | undefined>,

		/** Required */
		default: FormControl<boolean | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_requestLabelsFormGroup() {
		return new FormGroup<Pull_requestLabelsFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			default: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Team_simple {

		/**
		 * Description of the team
		 * Required
		 */
		description: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the team
		 * Required
		 */
		id: number;

		/** Distinguished Name (DN) that team maps to within LDAP environment */
		ldap_dn?: string | null;

		/** Required */
		members_url: string;

		/**
		 * Name of the team
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Permission that the team will have for its repositories
		 * Required
		 */
		permission: string;

		/** The level of privacy this team should have */
		privacy?: string | null;

		/** Required */
		repositories_url: string;

		/** Required */
		slug: string;

		/**
		 * URL for the team
		 * Required
		 */
		url: string;
	}

	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Team_simpleFormProperties {

		/**
		 * Description of the team
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the team
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Distinguished Name (DN) that team maps to within LDAP environment */
		ldap_dn: FormControl<string | null | undefined>,

		/** Required */
		members_url: FormControl<string | null | undefined>,

		/**
		 * Name of the team
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Permission that the team will have for its repositories
		 * Required
		 */
		permission: FormControl<string | null | undefined>,

		/** The level of privacy this team should have */
		privacy: FormControl<string | null | undefined>,

		/** Required */
		repositories_url: FormControl<string | null | undefined>,

		/** Required */
		slug: FormControl<string | null | undefined>,

		/**
		 * URL for the team
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeam_simpleFormGroup() {
		return new FormGroup<Team_simpleFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			permission: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			privacy: new FormControl<string | null | undefined>(undefined),
			repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slug: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Pull Request Merge Result */
	export interface Pull_request_merge_result {

		/** Required */
		merged: boolean;

		/** Required */
		message: string;

		/** Required */
		sha: string;
	}

	/** Pull Request Merge Result */
	export interface Pull_request_merge_resultFormProperties {

		/** Required */
		merged: FormControl<boolean | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_merge_resultFormGroup() {
		return new FormGroup<Pull_request_merge_resultFormProperties>({
			merged: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Pull Request Reviews are reviews on pull requests. */
	export interface Pull_request_review {

		/** Required */
		_links: Pull_request_review_links;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/**
		 * The text of the review.
		 * Required
		 */
		body: string;
		body_html?: string | null;
		body_text?: string | null;

		/**
		 * A commit SHA for the review.
		 * Required
		 */
		commit_id: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the review
		 * Required
		 */
		id: number;

		/** Required */
		node_id: string;

		/** Required */
		pull_request_url: string;

		/** Required */
		state: string;
		submitted_at?: Date | null;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Pull Request Reviews are reviews on pull requests. */
	export interface Pull_request_reviewFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/**
		 * The text of the review.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/**
		 * A commit SHA for the review.
		 * Required
		 */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the review
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		pull_request_url: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,
		submitted_at: FormControl<Date | null | undefined>,
	}
	export function CreatePull_request_reviewFormGroup() {
		return new FormGroup<Pull_request_reviewFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pull_request_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface Pull_request_review_links {

		/** Required */
		html: Pull_request_review_linksHtml;

		/** Required */
		pull_request: Pull_request_review_linksPull_request;
	}
	export interface Pull_request_review_linksFormProperties {
	}
	export function CreatePull_request_review_linksFormGroup() {
		return new FormGroup<Pull_request_review_linksFormProperties>({
		});

	}

	export interface Pull_request_review_linksHtml {

		/** Required */
		href: string;
	}
	export interface Pull_request_review_linksHtmlFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_review_linksHtmlFormGroup() {
		return new FormGroup<Pull_request_review_linksHtmlFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_review_linksPull_request {

		/** Required */
		href: string;
	}
	export interface Pull_request_review_linksPull_requestFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_review_linksPull_requestFormGroup() {
		return new FormGroup<Pull_request_review_linksPull_requestFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Pull Request Review Comments are comments on a portion of the Pull Request's diff. */
	export interface Pull_request_review_comment {

		/** Required */
		_links: Pull_request_review_comment_links;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/**
		 * The text of the comment.
		 * Required
		 */
		body: string;
		body_html?: string | null;
		body_text?: string | null;

		/**
		 * The SHA of the commit to which the comment applies.
		 * Required
		 */
		commit_id: string;

		/** Required */
		created_at: Date;

		/**
		 * The diff of the line that the comment refers to.
		 * Required
		 */
		diff_hunk: string;

		/**
		 * HTML URL for the pull request review comment.
		 * Required
		 */
		html_url: string;

		/**
		 * The ID of the pull request review comment.
		 * Required
		 */
		id: number;

		/** The comment ID to reply to. */
		in_reply_to_id?: number | null;

		/** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		line?: number | null;

		/**
		 * The node ID of the pull request review comment.
		 * Required
		 */
		node_id: string;

		/**
		 * The SHA of the original commit to which the comment applies.
		 * Required
		 */
		original_commit_id: string;

		/** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		original_line?: number | null;

		/**
		 * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
		 * Required
		 */
		original_position: number;

		/** The first line of the range for a multi-line comment. */
		original_start_line?: number | null;

		/**
		 * The relative path of the file to which the comment applies.
		 * Required
		 */
		path: string;

		/**
		 * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
		 * Required
		 */
		position: number;

		/**
		 * The ID of the pull request review to which the comment belongs.
		 * Required
		 */
		pull_request_review_id: number;

		/**
		 * URL for the pull request that the review comment belongs to.
		 * Required
		 */
		pull_request_url: string;
		reactions?: Reaction_rollup;

		/** The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment */
		side?: Pull_request_review_commentSide | null;

		/** The first line of the range for a multi-line comment. */
		start_line?: number | null;

		/** The side of the first line of the range for a multi-line comment. */
		start_side?: Pull_request_review_commentSide | null;

		/** Required */
		updated_at: Date;

		/**
		 * URL for the pull request review comment
		 * Required
		 */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Simple_user;
	}

	/** Pull Request Review Comments are comments on a portion of the Pull Request's diff. */
	export interface Pull_request_review_commentFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/**
		 * The text of the comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/**
		 * The SHA of the commit to which the comment applies.
		 * Required
		 */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The diff of the line that the comment refers to.
		 * Required
		 */
		diff_hunk: FormControl<string | null | undefined>,

		/**
		 * HTML URL for the pull request review comment.
		 * Required
		 */
		html_url: FormControl<string | null | undefined>,

		/**
		 * The ID of the pull request review comment.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** The comment ID to reply to. */
		in_reply_to_id: FormControl<number | null | undefined>,

		/** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		line: FormControl<number | null | undefined>,

		/**
		 * The node ID of the pull request review comment.
		 * Required
		 */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The SHA of the original commit to which the comment applies.
		 * Required
		 */
		original_commit_id: FormControl<string | null | undefined>,

		/** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		original_line: FormControl<number | null | undefined>,

		/**
		 * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
		 * Required
		 */
		original_position: FormControl<number | null | undefined>,

		/** The first line of the range for a multi-line comment. */
		original_start_line: FormControl<number | null | undefined>,

		/**
		 * The relative path of the file to which the comment applies.
		 * Required
		 */
		path: FormControl<string | null | undefined>,

		/**
		 * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
		 * Required
		 */
		position: FormControl<number | null | undefined>,

		/**
		 * The ID of the pull request review to which the comment belongs.
		 * Required
		 */
		pull_request_review_id: FormControl<number | null | undefined>,

		/**
		 * URL for the pull request that the review comment belongs to.
		 * Required
		 */
		pull_request_url: FormControl<string | null | undefined>,

		/** The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment */
		side: FormControl<Pull_request_review_commentSide | null | undefined>,

		/** The first line of the range for a multi-line comment. */
		start_line: FormControl<number | null | undefined>,

		/** The side of the first line of the range for a multi-line comment. */
		start_side: FormControl<Pull_request_review_commentSide | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * URL for the pull request review comment
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_review_commentFormGroup() {
		return new FormGroup<Pull_request_review_commentFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			diff_hunk: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			in_reply_to_id: new FormControl<number | null | undefined>(undefined),
			line: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_line: new FormControl<number | null | undefined>(undefined),
			original_position: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			original_start_line: new FormControl<number | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			position: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pull_request_review_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pull_request_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			side: new FormControl<Pull_request_review_commentSide | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined),
			start_side: new FormControl<Pull_request_review_commentSide | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_review_comment_links {

		/** Required */
		html: Pull_request_review_comment_linksHtml;

		/** Required */
		pull_request: Pull_request_review_comment_linksPull_request;

		/** Required */
		self: Pull_request_review_comment_linksSelf;
	}
	export interface Pull_request_review_comment_linksFormProperties {
	}
	export function CreatePull_request_review_comment_linksFormGroup() {
		return new FormGroup<Pull_request_review_comment_linksFormProperties>({
		});

	}

	export interface Pull_request_review_comment_linksHtml {

		/** Required */
		href: string;
	}
	export interface Pull_request_review_comment_linksHtmlFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_review_comment_linksHtmlFormGroup() {
		return new FormGroup<Pull_request_review_comment_linksHtmlFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_review_comment_linksPull_request {

		/** Required */
		href: string;
	}
	export interface Pull_request_review_comment_linksPull_requestFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_review_comment_linksPull_requestFormGroup() {
		return new FormGroup<Pull_request_review_comment_linksPull_requestFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_review_comment_linksSelf {

		/** Required */
		href: string;
	}
	export interface Pull_request_review_comment_linksSelfFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_review_comment_linksSelfFormGroup() {
		return new FormGroup<Pull_request_review_comment_linksSelfFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Pull_request_review_commentSide { LEFT = 0, RIGHT = 1 }


	/** Pull Request Review Request */
	export interface Pull_request_review_request {

		/** Required */
		teams: Array<Team>;

		/** Required */
		users: Array<Simple_user>;
	}

	/** Pull Request Review Request */
	export interface Pull_request_review_requestFormProperties {
	}
	export function CreatePull_request_review_requestFormGroup() {
		return new FormGroup<Pull_request_review_requestFormProperties>({
		});

	}


	/** Pull Request Simple */
	export interface Pull_request_simple {

		/** Required */
		_links: Pull_request_simple_links;
		active_lock_reason?: string | null;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Nullable_simple_user;
		assignees?: Array<Simple_user>;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/**
		 * The status of auto merging a pull request.
		 * Required
		 */
		auto_merge: Auto_merge;

		/** Required */
		base: Pull_request_simpleBase;

		/** Required */
		body: string;

		/** Required */
		closed_at: Date;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		diff_url: string;

		/** Indicates whether or not the pull request is a draft. */
		draft?: boolean | null;

		/** Required */
		head: Pull_request_simpleHead;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		issue_url: string;

		/** Required */
		Pull_request_simpleLabels: Array<Pull_request_simpleLabels>;

		/** Required */
		locked: boolean;

		/** Required */
		merge_commit_sha: string;

		/** Required */
		merged_at: Date;

		/**
		 * A collection of related issues and pull requests.
		 * Required
		 */
		milestone: Nullable_milestone;

		/** Required */
		node_id: string;

		/** Required */
		number: number;

		/** Required */
		patch_url: string;
		requested_reviewers?: Array<Simple_user>;
		requested_teams?: Array<Team>;

		/** Required */
		review_comment_url: string;

		/** Required */
		review_comments_url: string;

		/** Required */
		state: string;

		/** Required */
		statuses_url: string;

		/** Required */
		title: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Pull Request Simple */
	export interface Pull_request_simpleFormProperties {
		active_lock_reason: FormControl<string | null | undefined>,

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Required */
		body: FormControl<string | null | undefined>,

		/** Required */
		closed_at: FormControl<Date | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		diff_url: FormControl<string | null | undefined>,

		/** Indicates whether or not the pull request is a draft. */
		draft: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		issue_url: FormControl<string | null | undefined>,

		/** Required */
		locked: FormControl<boolean | null | undefined>,

		/** Required */
		merge_commit_sha: FormControl<string | null | undefined>,

		/** Required */
		merged_at: FormControl<Date | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,

		/** Required */
		patch_url: FormControl<string | null | undefined>,

		/** Required */
		review_comment_url: FormControl<string | null | undefined>,

		/** Required */
		review_comments_url: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_simpleFormGroup() {
		return new FormGroup<Pull_request_simpleFormProperties>({
			active_lock_reason: new FormControl<string | null | undefined>(undefined),
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			closed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			diff_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			draft: new FormControl<boolean | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			issue_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			locked: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			merge_commit_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merged_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			patch_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_simple_links {

		/**
		 * Hypermedia Link
		 * Required
		 */
		comments: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		commits: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		html: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		issue: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		review_comment: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		review_comments: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		self: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		statuses: Link;
	}
	export interface Pull_request_simple_linksFormProperties {
	}
	export function CreatePull_request_simple_linksFormGroup() {
		return new FormGroup<Pull_request_simple_linksFormProperties>({
		});

	}

	export interface Pull_request_simpleBase {

		/** Required */
		label: string;

		/** Required */
		ref: string;

		/**
		 * A git repository
		 * Required
		 */
		repo: Repository;

		/** Required */
		sha: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}
	export interface Pull_request_simpleBaseFormProperties {

		/** Required */
		label: FormControl<string | null | undefined>,

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_simpleBaseFormGroup() {
		return new FormGroup<Pull_request_simpleBaseFormProperties>({
			label: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_simpleHead {

		/** Required */
		label: string;

		/** Required */
		ref: string;

		/**
		 * A git repository
		 * Required
		 */
		repo: Repository;

		/** Required */
		sha: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}
	export interface Pull_request_simpleHeadFormProperties {

		/** Required */
		label: FormControl<string | null | undefined>,

		/** Required */
		ref: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_simpleHeadFormGroup() {
		return new FormGroup<Pull_request_simpleHeadFormProperties>({
			label: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pull_request_simpleLabels {

		/** Required */
		color: string;

		/** Required */
		default: boolean;

		/** Required */
		description: string;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		url: string;
	}
	export interface Pull_request_simpleLabelsFormProperties {

		/** Required */
		color: FormControl<string | null | undefined>,

		/** Required */
		default: FormControl<boolean | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreatePull_request_simpleLabelsFormGroup() {
		return new FormGroup<Pull_request_simpleLabelsFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			default: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Rate_limit {

		/** Required */
		limit: number;

		/** Required */
		remaining: number;

		/** Required */
		reset: number;

		/** Required */
		used: number;
	}
	export interface Rate_limitFormProperties {

		/** Required */
		limit: FormControl<number | null | undefined>,

		/** Required */
		remaining: FormControl<number | null | undefined>,

		/** Required */
		reset: FormControl<number | null | undefined>,

		/** Required */
		used: FormControl<number | null | undefined>,
	}
	export function CreateRate_limitFormGroup() {
		return new FormGroup<Rate_limitFormProperties>({
			limit: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			remaining: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			reset: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			used: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Rate Limit Overview */
	export interface Rate_limit_overview {

		/** Required */
		rate: Rate_limit;

		/** Required */
		resources: Rate_limit_overviewResources;
	}

	/** Rate Limit Overview */
	export interface Rate_limit_overviewFormProperties {
	}
	export function CreateRate_limit_overviewFormGroup() {
		return new FormGroup<Rate_limit_overviewFormProperties>({
		});

	}

	export interface Rate_limit_overviewResources {
		actions_runner_registration?: Rate_limit;
		code_scanning_upload?: Rate_limit;

		/** Required */
		core: Rate_limit;
		graphql?: Rate_limit;
		integration_manifest?: Rate_limit;
		scim?: Rate_limit;

		/** Required */
		search: Rate_limit;
		source_import?: Rate_limit;
	}
	export interface Rate_limit_overviewResourcesFormProperties {
	}
	export function CreateRate_limit_overviewResourcesFormGroup() {
		return new FormGroup<Rate_limit_overviewResourcesFormProperties>({
		});

	}


	/** Reactions to conversations provide a way to help people express their feelings more simply and effectively. */
	export interface Reaction {

		/**
		 * The reaction to use
		 * Required
		 */
		content: ReactionContent;

		/** Required */
		created_at: Date;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Reactions to conversations provide a way to help people express their feelings more simply and effectively. */
	export interface ReactionFormProperties {

		/**
		 * The reaction to use
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
	}
	export function CreateReactionFormGroup() {
		return new FormGroup<ReactionFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ReactionContent { _Plus1 = 0, _Minus1 = 1, laugh = 2, confused = 3, heart = 4, hooray = 5, rocket = 6, eyes = 7 }


	/** A release. */
	export interface Release {

		/** Required */
		assets: Array<Release_asset>;

		/** Required */
		assets_url: string;

		/**
		 * Simple User
		 * Required
		 */
		author: Simple_user;
		body?: string | null;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		created_at: Date;

		/**
		 * true to create a draft (unpublished) release, false to create a published one.
		 * Required
		 */
		draft: boolean;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Whether to identify the release as a prerelease or a full release.
		 * Required
		 */
		prerelease: boolean;

		/** Required */
		published_at: Date;
		reactions?: Reaction_rollup;

		/**
		 * The name of the tag.
		 * Required
		 */
		tag_name: string;

		/** Required */
		tarball_url: string;

		/**
		 * Specifies the commitish value that determines where the Git tag is created from.
		 * Required
		 */
		target_commitish: string;

		/** Required */
		upload_url: string;

		/** Required */
		url: string;

		/** Required */
		zipball_url: string;
	}

	/** A release. */
	export interface ReleaseFormProperties {

		/** Required */
		assets_url: FormControl<string | null | undefined>,
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * true to create a draft (unpublished) release, false to create a published one.
		 * Required
		 */
		draft: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Whether to identify the release as a prerelease or a full release.
		 * Required
		 */
		prerelease: FormControl<boolean | null | undefined>,

		/** Required */
		published_at: FormControl<Date | null | undefined>,

		/**
		 * The name of the tag.
		 * Required
		 */
		tag_name: FormControl<string | null | undefined>,

		/** Required */
		tarball_url: FormControl<string | null | undefined>,

		/**
		 * Specifies the commitish value that determines where the Git tag is created from.
		 * Required
		 */
		target_commitish: FormControl<string | null | undefined>,

		/** Required */
		upload_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** Required */
		zipball_url: FormControl<string | null | undefined>,
	}
	export function CreateReleaseFormGroup() {
		return new FormGroup<ReleaseFormProperties>({
			assets_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			draft: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			prerelease: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			published_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			tag_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tarball_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target_commitish: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			upload_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zipball_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data related to a release. */
	export interface Release_asset {

		/** Required */
		browser_download_url: string;

		/** Required */
		content_type: string;

		/** Required */
		created_at: Date;

		/** Required */
		download_count: number;

		/** Required */
		id: number;

		/** Required */
		label: string;

		/**
		 * The file name of the asset.
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		size: number;

		/**
		 * State of the release asset.
		 * Required
		 */
		state: Release_assetState;

		/** Required */
		updated_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		uploader: Nullable_simple_user;

		/** Required */
		url: string;
	}

	/** Data related to a release. */
	export interface Release_assetFormProperties {

		/** Required */
		browser_download_url: FormControl<string | null | undefined>,

		/** Required */
		content_type: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		download_count: FormControl<number | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		label: FormControl<string | null | undefined>,

		/**
		 * The file name of the asset.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/**
		 * State of the release asset.
		 * Required
		 */
		state: FormControl<Release_assetState | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateRelease_assetFormGroup() {
		return new FormGroup<Release_assetFormProperties>({
			browser_download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			content_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			download_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			label: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Release_assetState | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Release_assetState { uploaded = 0, open = 1 }


	/** Removed from Project Issue Event */
	export interface Removed_from_project_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;
		project_card?: Removed_from_project_issue_eventProject_card;

		/** Required */
		url: string;
	}

	/** Removed from Project Issue Event */
	export interface Removed_from_project_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateRemoved_from_project_issue_eventFormGroup() {
		return new FormGroup<Removed_from_project_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Removed_from_project_issue_eventProject_card {

		/** Required */
		column_name: string;

		/** Required */
		id: number;
		previous_column_name?: string | null;

		/** Required */
		project_id: number;

		/** Required */
		project_url: string;

		/** Required */
		url: string;
	}
	export interface Removed_from_project_issue_eventProject_cardFormProperties {

		/** Required */
		column_name: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		previous_column_name: FormControl<string | null | undefined>,

		/** Required */
		project_id: FormControl<number | null | undefined>,

		/** Required */
		project_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateRemoved_from_project_issue_eventProject_cardFormGroup() {
		return new FormGroup<Removed_from_project_issue_eventProject_cardFormProperties>({
			column_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			previous_column_name: new FormControl<string | null | undefined>(undefined),
			project_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			project_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Renamed Issue Event */
	export interface Renamed_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		rename: Renamed_issue_eventRename;

		/** Required */
		url: string;
	}

	/** Renamed Issue Event */
	export interface Renamed_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateRenamed_issue_eventFormGroup() {
		return new FormGroup<Renamed_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Renamed_issue_eventRename {

		/** Required */
		from: string;

		/** Required */
		to: string;
	}
	export interface Renamed_issue_eventRenameFormProperties {

		/** Required */
		from: FormControl<string | null | undefined>,

		/** Required */
		to: FormControl<string | null | undefined>,
	}
	export function CreateRenamed_issue_eventRenameFormGroup() {
		return new FormGroup<Renamed_issue_eventRenameFormProperties>({
			from: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			to: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Repo Search Result Item */
	export interface Repo_search_result_item {
		allow_forking?: boolean | null;
		allow_merge_commit?: boolean | null;
		allow_rebase_merge?: boolean | null;
		allow_squash_merge?: boolean | null;

		/** Required */
		archive_url: string;

		/** Required */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		default_branch: string;
		delete_branch_on_merge?: boolean | null;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/** Required */
		has_downloads: boolean;

		/** Required */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/** Required */
		has_projects: boolean;

		/** Required */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/**
		 * Simple User
		 * Required
		 */
		owner: Nullable_simple_user;
		permissions?: Repo_search_result_itemPermissions;

		/** Required */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		score: number;

		/** Required */
		size: number;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;

		/** Required */
		statuses_url: string;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;
		Repo_search_result_itemText_matches?: Array<Repo_search_result_itemText_matches>;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}

	/** Repo Search Result Item */
	export interface Repo_search_result_itemFormProperties {
		allow_forking: FormControl<boolean | null | undefined>,
		allow_merge_commit: FormControl<boolean | null | undefined>,
		allow_rebase_merge: FormControl<boolean | null | undefined>,
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/** Required */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		default_branch: FormControl<string | null | undefined>,
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		has_downloads: FormControl<boolean | null | undefined>,

		/** Required */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/** Required */
		has_projects: FormControl<boolean | null | undefined>,

		/** Required */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/** Required */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateRepo_search_result_itemFormGroup() {
		return new FormGroup<Repo_search_result_itemFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Repo_search_result_itemPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Repo_search_result_itemPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateRepo_search_result_itemPermissionsFormGroup() {
		return new FormGroup<Repo_search_result_itemPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Repo_search_result_itemText_matches {
		fragment?: string | null;
		Repo_search_result_itemText_matchesMatches?: Array<Repo_search_result_itemText_matchesMatches>;
		object_type?: string | null;
		object_url?: string | null;
		property?: string | null;
	}
	export interface Repo_search_result_itemText_matchesFormProperties {
		fragment: FormControl<string | null | undefined>,
		object_type: FormControl<string | null | undefined>,
		object_url: FormControl<string | null | undefined>,
		property: FormControl<string | null | undefined>,
	}
	export function CreateRepo_search_result_itemText_matchesFormGroup() {
		return new FormGroup<Repo_search_result_itemText_matchesFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			object_type: new FormControl<string | null | undefined>(undefined),
			object_url: new FormControl<string | null | undefined>(undefined),
			property: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Repo_search_result_itemText_matchesMatches {
		indices?: Array<number>;
		text?: string | null;
	}
	export interface Repo_search_result_itemText_matchesMatchesFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateRepo_search_result_itemText_matchesMatchesFormGroup() {
		return new FormGroup<Repo_search_result_itemText_matchesMatchesFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Repository Collaborator Permission */
	export interface Repository_collaborator_permission {

		/** Required */
		permission: string;

		/**
		 * Collaborator
		 * Required
		 */
		user: Nullable_collaborator;
	}

	/** Repository Collaborator Permission */
	export interface Repository_collaborator_permissionFormProperties {

		/** Required */
		permission: FormControl<string | null | undefined>,
	}
	export function CreateRepository_collaborator_permissionFormGroup() {
		return new FormGroup<Repository_collaborator_permissionFormProperties>({
			permission: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Repository invitations let you manage who you collaborate with. */
	export interface Repository_invitation {

		/** Required */
		created_at: Date;

		/** Whether or not the invitation has expired */
		expired?: boolean | null;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the repository invitation.
		 * Required
		 */
		id: number;

		/**
		 * Simple User
		 * Required
		 */
		invitee: Nullable_simple_user;

		/**
		 * Simple User
		 * Required
		 */
		inviter: Nullable_simple_user;

		/** Required */
		node_id: string;

		/**
		 * The permission associated with the invitation.
		 * Required
		 */
		permissions: Repository_invitationPermissions;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;

		/**
		 * URL for the repository invitation
		 * Required
		 */
		url: string;
	}

	/** Repository invitations let you manage who you collaborate with. */
	export interface Repository_invitationFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Whether or not the invitation has expired */
		expired: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the repository invitation.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The permission associated with the invitation.
		 * Required
		 */
		permissions: FormControl<Repository_invitationPermissions | null | undefined>,

		/**
		 * URL for the repository invitation
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateRepository_invitationFormGroup() {
		return new FormGroup<Repository_invitationFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			expired: new FormControl<boolean | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			permissions: new FormControl<Repository_invitationPermissions | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Repository_invitationPermissions { read = 0, write = 1, admin = 2, triage = 3, maintain = 4 }

	export interface Repository_pre_receive_hook {
		configuration_url?: string | null;
		enforcement?: string | null;
		id?: number | null;
		name?: string | null;
	}
	export interface Repository_pre_receive_hookFormProperties {
		configuration_url: FormControl<string | null | undefined>,
		enforcement: FormControl<string | null | undefined>,
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateRepository_pre_receive_hookFormGroup() {
		return new FormGroup<Repository_pre_receive_hookFormProperties>({
			configuration_url: new FormControl<string | null | undefined>(undefined),
			enforcement: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Repository invitations let you manage who you collaborate with. */
	export interface Repository_subscription {

		/** Required */
		created_at: Date;

		/**
		 * Determines if all notifications should be blocked from this repository.
		 * Required
		 */
		ignored: boolean;

		/** Required */
		reason: string;

		/** Required */
		repository_url: string;

		/**
		 * Determines if notifications should be received from this repository.
		 * Required
		 */
		subscribed: boolean;

		/** Required */
		url: string;
	}

	/** Repository invitations let you manage who you collaborate with. */
	export interface Repository_subscriptionFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Determines if all notifications should be blocked from this repository.
		 * Required
		 */
		ignored: FormControl<boolean | null | undefined>,

		/** Required */
		reason: FormControl<string | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/**
		 * Determines if notifications should be received from this repository.
		 * Required
		 */
		subscribed: FormControl<boolean | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateRepository_subscriptionFormGroup() {
		return new FormGroup<Repository_subscriptionFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ignored: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Legacy Review Comment */
	export interface Review_comment {

		/** Required */
		_links: Review_comment_links;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/** Required */
		body: string;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		commit_id: string;

		/** Required */
		created_at: Date;

		/** Required */
		diff_hunk: string;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		in_reply_to_id?: number | null;

		/** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		line?: number | null;

		/** Required */
		node_id: string;

		/** Required */
		original_commit_id: string;

		/** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		original_line?: number | null;

		/** Required */
		original_position: number;

		/** The original first line of the range for a multi-line comment. */
		original_start_line?: number | null;

		/** Required */
		path: string;

		/** Required */
		position: number;

		/** Required */
		pull_request_review_id: number;

		/** Required */
		pull_request_url: string;
		reactions?: Reaction_rollup;

		/** The side of the first line of the range for a multi-line comment. */
		side?: Pull_request_review_commentSide | null;

		/** The first line of the range for a multi-line comment. */
		start_line?: number | null;

		/** The side of the first line of the range for a multi-line comment. */
		start_side?: Pull_request_review_commentSide | null;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Legacy Review Comment */
	export interface Review_commentFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Required */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		diff_hunk: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		in_reply_to_id: FormControl<number | null | undefined>,

		/** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		line: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		original_commit_id: FormControl<string | null | undefined>,

		/** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
		original_line: FormControl<number | null | undefined>,

		/** Required */
		original_position: FormControl<number | null | undefined>,

		/** The original first line of the range for a multi-line comment. */
		original_start_line: FormControl<number | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		position: FormControl<number | null | undefined>,

		/** Required */
		pull_request_review_id: FormControl<number | null | undefined>,

		/** Required */
		pull_request_url: FormControl<string | null | undefined>,

		/** The side of the first line of the range for a multi-line comment. */
		side: FormControl<Pull_request_review_commentSide | null | undefined>,

		/** The first line of the range for a multi-line comment. */
		start_line: FormControl<number | null | undefined>,

		/** The side of the first line of the range for a multi-line comment. */
		start_side: FormControl<Pull_request_review_commentSide | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReview_commentFormGroup() {
		return new FormGroup<Review_commentFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			diff_hunk: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			in_reply_to_id: new FormControl<number | null | undefined>(undefined),
			line: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_line: new FormControl<number | null | undefined>(undefined),
			original_position: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			original_start_line: new FormControl<number | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			position: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pull_request_review_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pull_request_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			side: new FormControl<Pull_request_review_commentSide | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined),
			start_side: new FormControl<Pull_request_review_commentSide | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Review_comment_links {

		/**
		 * Hypermedia Link
		 * Required
		 */
		html: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		pull_request: Link;

		/**
		 * Hypermedia Link
		 * Required
		 */
		self: Link;
	}
	export interface Review_comment_linksFormProperties {
	}
	export function CreateReview_comment_linksFormGroup() {
		return new FormGroup<Review_comment_linksFormProperties>({
		});

	}


	/** Review Dismissed Issue Event */
	export interface Review_dismissed_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		dismissed_review: Review_dismissed_issue_eventDismissed_review;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Review Dismissed Issue Event */
	export interface Review_dismissed_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReview_dismissed_issue_eventFormGroup() {
		return new FormGroup<Review_dismissed_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Review_dismissed_issue_eventDismissed_review {
		dismissal_commit_id?: string | null;

		/** Required */
		dismissal_message: string;

		/** Required */
		review_id: number;

		/** Required */
		state: string;
	}
	export interface Review_dismissed_issue_eventDismissed_reviewFormProperties {
		dismissal_commit_id: FormControl<string | null | undefined>,

		/** Required */
		dismissal_message: FormControl<string | null | undefined>,

		/** Required */
		review_id: FormControl<number | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,
	}
	export function CreateReview_dismissed_issue_eventDismissed_reviewFormGroup() {
		return new FormGroup<Review_dismissed_issue_eventDismissed_reviewFormProperties>({
			dismissal_commit_id: new FormControl<string | null | undefined>(undefined),
			dismissal_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Review Request Removed Issue Event */
	export interface Review_request_removed_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Simple User */
		requested_reviewer?: Simple_user;

		/** Groups of organization members that gives permissions on specified repositories. */
		requested_team?: Team;

		/**
		 * Simple User
		 * Required
		 */
		review_requester: Simple_user;

		/** Required */
		url: string;
	}

	/** Review Request Removed Issue Event */
	export interface Review_request_removed_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReview_request_removed_issue_eventFormGroup() {
		return new FormGroup<Review_request_removed_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Review Requested Issue Event */
	export interface Review_requested_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Simple User */
		requested_reviewer?: Simple_user;

		/** Groups of organization members that gives permissions on specified repositories. */
		requested_team?: Team;

		/**
		 * Simple User
		 * Required
		 */
		review_requester: Simple_user;

		/** Required */
		url: string;
	}

	/** Review Requested Issue Event */
	export interface Review_requested_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReview_requested_issue_eventFormGroup() {
		return new FormGroup<Review_requested_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Root {

		/** Required */
		authorizations_url: string;

		/** Required */
		code_search_url: string;

		/** Required */
		commit_search_url: string;

		/** Required */
		current_user_authorizations_html_url: string;

		/** Required */
		current_user_repositories_url: string;

		/** Required */
		current_user_url: string;

		/** Required */
		emails_url: string;

		/** Required */
		emojis_url: string;

		/** Required */
		events_url: string;

		/** Required */
		feeds_url: string;

		/** Required */
		followers_url: string;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		hub_url: string;

		/** Required */
		issue_search_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		label_search_url: string;

		/** Required */
		notifications_url: string;

		/** Required */
		organization_repositories_url: string;

		/** Required */
		organization_teams_url: string;

		/** Required */
		organization_url: string;

		/** Required */
		public_gists_url: string;

		/** Required */
		rate_limit_url: string;

		/** Required */
		repository_search_url: string;

		/** Required */
		repository_url: string;

		/** Required */
		starred_gists_url: string;

		/** Required */
		starred_url: string;
		topic_search_url?: string | null;

		/** Required */
		user_organizations_url: string;

		/** Required */
		user_repositories_url: string;

		/** Required */
		user_search_url: string;

		/** Required */
		user_url: string;
	}
	export interface RootFormProperties {

		/** Required */
		authorizations_url: FormControl<string | null | undefined>,

		/** Required */
		code_search_url: FormControl<string | null | undefined>,

		/** Required */
		commit_search_url: FormControl<string | null | undefined>,

		/** Required */
		current_user_authorizations_html_url: FormControl<string | null | undefined>,

		/** Required */
		current_user_repositories_url: FormControl<string | null | undefined>,

		/** Required */
		current_user_url: FormControl<string | null | undefined>,

		/** Required */
		emails_url: FormControl<string | null | undefined>,

		/** Required */
		emojis_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		feeds_url: FormControl<string | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		hub_url: FormControl<string | null | undefined>,

		/** Required */
		issue_search_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		label_search_url: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		organization_repositories_url: FormControl<string | null | undefined>,

		/** Required */
		organization_teams_url: FormControl<string | null | undefined>,

		/** Required */
		organization_url: FormControl<string | null | undefined>,

		/** Required */
		public_gists_url: FormControl<string | null | undefined>,

		/** Required */
		rate_limit_url: FormControl<string | null | undefined>,

		/** Required */
		repository_search_url: FormControl<string | null | undefined>,

		/** Required */
		repository_url: FormControl<string | null | undefined>,

		/** Required */
		starred_gists_url: FormControl<string | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,
		topic_search_url: FormControl<string | null | undefined>,

		/** Required */
		user_organizations_url: FormControl<string | null | undefined>,

		/** Required */
		user_repositories_url: FormControl<string | null | undefined>,

		/** Required */
		user_search_url: FormControl<string | null | undefined>,

		/** Required */
		user_url: FormControl<string | null | undefined>,
	}
	export function CreateRootFormGroup() {
		return new FormGroup<RootFormProperties>({
			authorizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			code_search_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_search_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			current_user_authorizations_html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			current_user_repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			current_user_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			emails_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			emojis_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			feeds_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hub_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_search_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			label_search_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organization_repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organization_teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organization_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public_gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rate_limit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_search_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			starred_gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			topic_search_url: new FormControl<string | null | undefined>(undefined),
			user_organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_search_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A self hosted runner */
	export interface Runner {

		/** Required */
		busy: boolean;

		/**
		 * The id of the runner.
		 * Required
		 */
		id: number;

		/** Required */
		labels: Array<Runner_label>;

		/**
		 * The name of the runner.
		 * Required
		 */
		name: string;

		/**
		 * The Operating System of the runner.
		 * Required
		 */
		os: string;

		/**
		 * The status of the runner.
		 * Required
		 */
		status: string;
	}

	/** A self hosted runner */
	export interface RunnerFormProperties {

		/** Required */
		busy: FormControl<boolean | null | undefined>,

		/**
		 * The id of the runner.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The name of the runner.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The Operating System of the runner.
		 * Required
		 */
		os: FormControl<string | null | undefined>,

		/**
		 * The status of the runner.
		 * Required
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateRunnerFormGroup() {
		return new FormGroup<RunnerFormProperties>({
			busy: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			os: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A label for a self hosted runner */
	export interface Runner_label {

		/** Unique identifier of the label. */
		id?: number | null;

		/**
		 * Name of the label.
		 * Required
		 */
		name: string;

		/** The type of label. Read-only labels are applied automatically when the runner is configured. */
		type?: Runner_labelType | null;
	}

	/** A label for a self hosted runner */
	export interface Runner_labelFormProperties {

		/** Unique identifier of the label. */
		id: FormControl<number | null | undefined>,

		/**
		 * Name of the label.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The type of label. Read-only labels are applied automatically when the runner is configured. */
		type: FormControl<Runner_labelType | null | undefined>,
	}
	export function CreateRunner_labelFormGroup() {
		return new FormGroup<Runner_labelFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Runner_labelType | null | undefined>(undefined),
		});

	}

	export enum Runner_labelType { 'read-only' = 0, custom = 1 }


	/** Runner Application */
	export interface Runner_application {

		/** Required */
		architecture: string;

		/** Required */
		download_url: string;

		/** Required */
		filename: string;

		/** Required */
		os: string;
		sha256_checksum?: string | null;

		/** A short lived bearer token used to download the runner, if needed. */
		temp_download_token?: string | null;
	}

	/** Runner Application */
	export interface Runner_applicationFormProperties {

		/** Required */
		architecture: FormControl<string | null | undefined>,

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		filename: FormControl<string | null | undefined>,

		/** Required */
		os: FormControl<string | null | undefined>,
		sha256_checksum: FormControl<string | null | undefined>,

		/** A short lived bearer token used to download the runner, if needed. */
		temp_download_token: FormControl<string | null | undefined>,
	}
	export function CreateRunner_applicationFormGroup() {
		return new FormGroup<Runner_applicationFormProperties>({
			architecture: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			filename: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			os: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha256_checksum: new FormControl<string | null | undefined>(undefined),
			temp_download_token: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Runner_groups_enterprise {

		/** Required */
		allows_public_repositories: boolean;

		/** Required */
		default: boolean;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		runners_url: string;
		selected_organizations_url?: string | null;

		/** Required */
		visibility: string;
	}
	export interface Runner_groups_enterpriseFormProperties {

		/** Required */
		allows_public_repositories: FormControl<boolean | null | undefined>,

		/** Required */
		default: FormControl<boolean | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		runners_url: FormControl<string | null | undefined>,
		selected_organizations_url: FormControl<string | null | undefined>,

		/** Required */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateRunner_groups_enterpriseFormGroup() {
		return new FormGroup<Runner_groups_enterpriseFormProperties>({
			allows_public_repositories: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			default: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			runners_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			selected_organizations_url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Runner_groups_org {

		/** Required */
		allows_public_repositories: boolean;

		/** Required */
		default: boolean;

		/** Required */
		id: number;

		/** Required */
		inherited: boolean;
		inherited_allows_public_repositories?: boolean | null;

		/** Required */
		name: string;

		/** Required */
		runners_url: string;

		/** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
		selected_repositories_url?: string | null;

		/** Required */
		visibility: string;
	}
	export interface Runner_groups_orgFormProperties {

		/** Required */
		allows_public_repositories: FormControl<boolean | null | undefined>,

		/** Required */
		default: FormControl<boolean | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		inherited: FormControl<boolean | null | undefined>,
		inherited_allows_public_repositories: FormControl<boolean | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		runners_url: FormControl<string | null | undefined>,

		/** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
		selected_repositories_url: FormControl<string | null | undefined>,

		/** Required */
		visibility: FormControl<string | null | undefined>,
	}
	export function CreateRunner_groups_orgFormGroup() {
		return new FormGroup<Runner_groups_orgFormProperties>({
			allows_public_repositories: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			default: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			inherited: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			inherited_allows_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			runners_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			selected_repositories_url: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Scim Error */
	export interface Scim_error {
		detail?: string | null;
		documentation_url?: string | null;
		message?: string | null;
		schemas?: Array<string>;
		scimType?: string | null;
		status?: number | null;
	}

	/** Scim Error */
	export interface Scim_errorFormProperties {
		detail: FormControl<string | null | undefined>,
		documentation_url: FormControl<string | null | undefined>,
		message: FormControl<string | null | undefined>,
		scimType: FormControl<string | null | undefined>,
		status: FormControl<number | null | undefined>,
	}
	export function CreateScim_errorFormGroup() {
		return new FormGroup<Scim_errorFormProperties>({
			detail: new FormControl<string | null | undefined>(undefined),
			documentation_url: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			scimType: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Search_result_text_matchesElement {
		fragment?: string | null;
		Search_result_text_matchesElementMatches?: Array<Search_result_text_matchesElementMatches>;
		object_type?: string | null;
		object_url?: string | null;
		property?: string | null;
	}
	export interface Search_result_text_matchesElementFormProperties {
		fragment: FormControl<string | null | undefined>,
		object_type: FormControl<string | null | undefined>,
		object_url: FormControl<string | null | undefined>,
		property: FormControl<string | null | undefined>,
	}
	export function CreateSearch_result_text_matchesElementFormGroup() {
		return new FormGroup<Search_result_text_matchesElementFormProperties>({
			fragment: new FormControl<string | null | undefined>(undefined),
			object_type: new FormControl<string | null | undefined>(undefined),
			object_url: new FormControl<string | null | undefined>(undefined),
			property: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Search_result_text_matchesElementMatches {
		indices?: Array<number>;
		text?: string | null;
	}
	export interface Search_result_text_matchesElementMatchesFormProperties {
		text: FormControl<string | null | undefined>,
	}
	export function CreateSearch_result_text_matchesElementMatchesFormGroup() {
		return new FormGroup<Search_result_text_matchesElementMatchesFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Secret_scanning_alert {

		/** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
		created_at?: Date | null;

		/** The GitHub URL of the alert resource. */
		html_url?: string | null;

		/** The REST API URL of the code locations for this alert. */
		locations_url?: string | null;

		/** The security alert number. */
		number?: number | null;

		/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
		resolution?: Secret_scanning_alertResolution | null;

		/** The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
		resolved_at?: Date | null;

		/** Simple User */
		resolved_by?: Nullable_simple_user;

		/** The secret that was detected. */
		secret?: string | null;

		/** The type of secret that secret scanning detected. */
		secret_type?: string | null;

		/** Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */
		state?: Secret_scanning_alertState | null;

		/** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
		updated_at?: Date | null;

		/** The REST API URL of the alert resource. */
		url?: string | null;
	}
	export interface Secret_scanning_alertFormProperties {

		/** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
		created_at: FormControl<Date | null | undefined>,

		/** The GitHub URL of the alert resource. */
		html_url: FormControl<string | null | undefined>,

		/** The REST API URL of the code locations for this alert. */
		locations_url: FormControl<string | null | undefined>,

		/** The security alert number. */
		number: FormControl<number | null | undefined>,

		/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
		resolution: FormControl<Secret_scanning_alertResolution | null | undefined>,

		/** The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
		resolved_at: FormControl<Date | null | undefined>,

		/** The secret that was detected. */
		secret: FormControl<string | null | undefined>,

		/** The type of secret that secret scanning detected. */
		secret_type: FormControl<string | null | undefined>,

		/** Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */
		state: FormControl<Secret_scanning_alertState | null | undefined>,

		/** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
		updated_at: FormControl<Date | null | undefined>,

		/** The REST API URL of the alert resource. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateSecret_scanning_alertFormGroup() {
		return new FormGroup<Secret_scanning_alertFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			locations_url: new FormControl<string | null | undefined>(undefined),
			number: new FormControl<number | null | undefined>(undefined),
			resolution: new FormControl<Secret_scanning_alertResolution | null | undefined>(undefined),
			resolved_at: new FormControl<Date | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			secret_type: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<Secret_scanning_alertState | null | undefined>(undefined),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Secret_scanning_alertResolution { _null = 0, false_positive = 1, wont_fix = 2, revoked = 3, used_in_tests = 4 }

	export enum Secret_scanning_alertState { open = 0, resolved = 1 }


	/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
	export enum Secret_scanning_alert_resolution { _null = 0, false_positive = 1, wont_fix = 2, revoked = 3, used_in_tests = 4 }


	/** Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */
	export enum Secret_scanning_alert_state { open = 0, resolved = 1 }

	export interface Selected_actions {

		/**
		 * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
		 * Required
		 */
		github_owned_allowed: boolean;

		/**
		 * Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
		 * Required
		 */
		patterns_allowed: Array<string>;
	}
	export interface Selected_actionsFormProperties {

		/**
		 * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
		 * Required
		 */
		github_owned_allowed: FormControl<boolean | null | undefined>,
	}
	export function CreateSelected_actionsFormGroup() {
		return new FormGroup<Selected_actionsFormProperties>({
			github_owned_allowed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Short Blob */
	export interface Short_blob {

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}

	/** Short Blob */
	export interface Short_blobFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateShort_blobFormGroup() {
		return new FormGroup<Short_blobFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Short Branch */
	export interface Short_branch {

		/** Required */
		commit: Short_branchCommit;

		/** Required */
		name: string;

		/** Required */
		protected: boolean;

		/** Branch Protection */
		protection?: Branch_protection;
		protection_url?: string | null;
	}

	/** Short Branch */
	export interface Short_branchFormProperties {

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		protected: FormControl<boolean | null | undefined>,
		protection_url: FormControl<string | null | undefined>,
	}
	export function CreateShort_branchFormGroup() {
		return new FormGroup<Short_branchFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			protected: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			protection_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Short_branchCommit {

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Short_branchCommitFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateShort_branchCommitFormGroup() {
		return new FormGroup<Short_branchCommitFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Ssh_key {
		key?: string | null;
		'pretty-print'?: string | null;
	}
	export interface Ssh_keyFormProperties {
		key: FormControl<string | null | undefined>,
		'pretty-print': FormControl<string | null | undefined>,
	}
	export function CreateSsh_keyFormGroup() {
		return new FormGroup<Ssh_keyFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			'pretty-print': new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Stargazer */
	export interface Stargazer {

		/** Required */
		starred_at: Date;

		/**
		 * Simple User
		 * Required
		 */
		user: Nullable_simple_user;
	}

	/** Stargazer */
	export interface StargazerFormProperties {

		/** Required */
		starred_at: FormControl<Date | null | undefined>,
	}
	export function CreateStargazerFormGroup() {
		return new FormGroup<StargazerFormProperties>({
			starred_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Starred Repository */
	export interface Starred_repository {

		/**
		 * A git repository
		 * Required
		 */
		repo: Repository;

		/** Required */
		starred_at: Date;
	}

	/** Starred Repository */
	export interface Starred_repositoryFormProperties {

		/** Required */
		starred_at: FormControl<Date | null | undefined>,
	}
	export function CreateStarred_repositoryFormGroup() {
		return new FormGroup<Starred_repositoryFormProperties>({
			starred_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** State Change Issue Event */
	export interface State_change_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;
		state_reason?: string | null;

		/** Required */
		url: string;
	}

	/** State Change Issue Event */
	export interface State_change_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,
		state_reason: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateState_change_issue_eventFormGroup() {
		return new FormGroup<State_change_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state_reason: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The status of a commit. */
	export interface Status {

		/** Required */
		avatar_url: string;

		/** Required */
		context: string;

		/** Required */
		created_at: string;

		/**
		 * Simple User
		 * Required
		 */
		creator: Nullable_simple_user;

		/** Required */
		description: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/** Required */
		state: string;

		/** Required */
		target_url: string;

		/** Required */
		updated_at: string;

		/** Required */
		url: string;
	}

	/** The status of a commit. */
	export interface StatusFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,

		/** Required */
		context: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,

		/** Required */
		target_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateStatusFormGroup() {
		return new FormGroup<StatusFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			context: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Tag */
	export interface Tag {

		/** Required */
		commit: TagCommit;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		tarball_url: string;

		/** Required */
		zipball_url: string;
	}

	/** Tag */
	export interface TagFormProperties {

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		tarball_url: FormControl<string | null | undefined>,

		/** Required */
		zipball_url: FormControl<string | null | undefined>,
	}
	export function CreateTagFormGroup() {
		return new FormGroup<TagFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tarball_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zipball_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TagCommit {

		/** Required */
		sha: string;

		/** Required */
		url: string;
	}
	export interface TagCommitFormProperties {

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTagCommitFormGroup() {
		return new FormGroup<TagCommitFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A team discussion is a persistent record of a free-form conversation within a team. */
	export interface Team_discussion {

		/**
		 * Simple User
		 * Required
		 */
		author: Nullable_simple_user;

		/**
		 * The main text of the discussion.
		 * Required
		 */
		body: string;

		/** Required */
		body_html: string;

		/**
		 * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
		 * Required
		 */
		body_version: string;

		/** Required */
		comments_count: number;

		/** Required */
		comments_url: string;

		/** Required */
		created_at: Date;

		/** Required */
		html_url: string;

		/** Required */
		last_edited_at: Date;

		/** Required */
		node_id: string;

		/**
		 * The unique sequence number of a team discussion.
		 * Required
		 */
		number: number;

		/**
		 * Whether or not this discussion should be pinned for easy retrieval.
		 * Required
		 */
		pinned: boolean;

		/**
		 * Whether or not this discussion should be restricted to team members and organization administrators.
		 * Required
		 */
		private: boolean;
		reactions?: Reaction_rollup;

		/** Required */
		team_url: string;

		/**
		 * The title of the discussion.
		 * Required
		 */
		title: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A team discussion is a persistent record of a free-form conversation within a team. */
	export interface Team_discussionFormProperties {

		/**
		 * The main text of the discussion.
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** Required */
		body_html: FormControl<string | null | undefined>,

		/**
		 * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
		 * Required
		 */
		body_version: FormControl<string | null | undefined>,

		/** Required */
		comments_count: FormControl<number | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		last_edited_at: FormControl<Date | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The unique sequence number of a team discussion.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/**
		 * Whether or not this discussion should be pinned for easy retrieval.
		 * Required
		 */
		pinned: FormControl<boolean | null | undefined>,

		/**
		 * Whether or not this discussion should be restricted to team members and organization administrators.
		 * Required
		 */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		team_url: FormControl<string | null | undefined>,

		/**
		 * The title of the discussion.
		 * Required
		 */
		title: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeam_discussionFormGroup() {
		return new FormGroup<Team_discussionFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_version: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_edited_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pinned: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			team_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A reply to a discussion within a team. */
	export interface Team_discussion_comment {

		/**
		 * Simple User
		 * Required
		 */
		author: Nullable_simple_user;

		/**
		 * The main text of the comment.
		 * Required
		 */
		body: string;

		/** Required */
		body_html: string;

		/**
		 * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
		 * Required
		 */
		body_version: string;

		/** Required */
		created_at: Date;

		/** Required */
		discussion_url: string;

		/** Required */
		html_url: string;

		/** Required */
		last_edited_at: Date;

		/** Required */
		node_id: string;

		/**
		 * The unique sequence number of a team discussion comment.
		 * Required
		 */
		number: number;
		reactions?: Reaction_rollup;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A reply to a discussion within a team. */
	export interface Team_discussion_commentFormProperties {

		/**
		 * The main text of the comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** Required */
		body_html: FormControl<string | null | undefined>,

		/**
		 * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
		 * Required
		 */
		body_version: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		discussion_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		last_edited_at: FormControl<Date | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The unique sequence number of a team discussion comment.
		 * Required
		 */
		number: FormControl<number | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeam_discussion_commentFormGroup() {
		return new FormGroup<Team_discussion_commentFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_version: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			discussion_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_edited_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Team_full {

		/** Required */
		created_at: Date;

		/** Required */
		description: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the team
		 * Required
		 */
		id: number;

		/** Distinguished Name (DN) that team maps to within LDAP environment */
		ldap_dn?: string | null;

		/** Required */
		members_count: number;

		/** Required */
		members_url: string;

		/**
		 * Name of the team
		 * Required
		 */
		name: string;

		/** Required */
		node_id: string;

		/**
		 * Organization Full
		 * Required
		 */
		organization: Organization_full;

		/** Groups of organization members that gives permissions on specified repositories. */
		parent?: Nullable_team_simple;

		/**
		 * Permission that the team will have for its repositories
		 * Required
		 */
		permission: string;

		/** The level of privacy this team should have */
		privacy?: Team_fullPrivacy | null;

		/** Required */
		repos_count: number;

		/** Required */
		repositories_url: string;

		/** Required */
		slug: string;

		/** Required */
		updated_at: Date;

		/**
		 * URL for the team
		 * Required
		 */
		url: string;
	}

	/** Groups of organization members that gives permissions on specified repositories. */
	export interface Team_fullFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the team
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Distinguished Name (DN) that team maps to within LDAP environment */
		ldap_dn: FormControl<string | null | undefined>,

		/** Required */
		members_count: FormControl<number | null | undefined>,

		/** Required */
		members_url: FormControl<string | null | undefined>,

		/**
		 * Name of the team
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * Permission that the team will have for its repositories
		 * Required
		 */
		permission: FormControl<string | null | undefined>,

		/** The level of privacy this team should have */
		privacy: FormControl<Team_fullPrivacy | null | undefined>,

		/** Required */
		repos_count: FormControl<number | null | undefined>,

		/** Required */
		repositories_url: FormControl<string | null | undefined>,

		/** Required */
		slug: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * URL for the team
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeam_fullFormGroup() {
		return new FormGroup<Team_fullFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			members_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			members_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			permission: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			privacy: new FormControl<Team_fullPrivacy | null | undefined>(undefined),
			repos_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repositories_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slug: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Team_fullPrivacy { closed = 0, secret = 1 }


	/** Team Membership */
	export interface Team_membership {

		/**
		 * The role of the user in the team.
		 * Required
		 */
		role: Team_membershipRole;

		/**
		 * The state of the user's membership in the team.
		 * Required
		 */
		state: Org_membershipState;

		/** Required */
		url: string;
	}

	/** Team Membership */
	export interface Team_membershipFormProperties {

		/**
		 * The role of the user in the team.
		 * Required
		 */
		role: FormControl<Team_membershipRole | null | undefined>,

		/**
		 * The state of the user's membership in the team.
		 * Required
		 */
		state: FormControl<Org_membershipState | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeam_membershipFormGroup() {
		return new FormGroup<Team_membershipFormProperties>({
			role: new FormControl<Team_membershipRole | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<Org_membershipState | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Team_membershipRole { member = 0, maintainer = 1 }


	/** A team's access to a project. */
	export interface Team_project {

		/** Required */
		body: string;

		/** Required */
		columns_url: string;

		/** Required */
		created_at: string;

		/**
		 * Simple User
		 * Required
		 */
		creator: Simple_user;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		number: number;

		/** The organization permission for this project. Only present when owner is an organization. */
		organization_permission?: string | null;

		/** Required */
		owner_url: string;

		/** Required */
		permissions: Team_projectPermissions;

		/** Whether the project is private or not. Only present when owner is an organization. */
		private?: boolean | null;

		/** Required */
		state: string;

		/** Required */
		updated_at: string;

		/** Required */
		url: string;
	}

	/** A team's access to a project. */
	export interface Team_projectFormProperties {

		/** Required */
		body: FormControl<string | null | undefined>,

		/** Required */
		columns_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		number: FormControl<number | null | undefined>,

		/** The organization permission for this project. Only present when owner is an organization. */
		organization_permission: FormControl<string | null | undefined>,

		/** Required */
		owner_url: FormControl<string | null | undefined>,

		/** Whether the project is private or not. Only present when owner is an organization. */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTeam_projectFormGroup() {
		return new FormGroup<Team_projectFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			columns_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			organization_permission: new FormControl<string | null | undefined>(undefined),
			owner_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Team_projectPermissions {

		/** Required */
		admin: boolean;

		/** Required */
		read: boolean;

		/** Required */
		write: boolean;
	}
	export interface Team_projectPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,

		/** Required */
		read: FormControl<boolean | null | undefined>,

		/** Required */
		write: FormControl<boolean | null | undefined>,
	}
	export function CreateTeam_projectPermissionsFormGroup() {
		return new FormGroup<Team_projectPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			read: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			write: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A team's access to a repository. */
	export interface Team_repository {

		/** Whether to allow forking this repo */
		allow_forking?: boolean | null;

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit?: boolean | null;

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge?: boolean | null;

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge?: boolean | null;

		/** Required */
		archive_url: string;

		/**
		 * Whether the repository is archived.
		 * Required
		 */
		archived: boolean;

		/** Required */
		assignees_url: string;

		/** Required */
		blobs_url: string;

		/** Required */
		branches_url: string;

		/** Required */
		clone_url: string;

		/** Required */
		collaborators_url: string;

		/** Required */
		comments_url: string;

		/** Required */
		commits_url: string;

		/** Required */
		compare_url: string;

		/** Required */
		contents_url: string;

		/** Required */
		contributors_url: string;

		/** Required */
		created_at: Date;

		/**
		 * The default branch of the repository.
		 * Required
		 */
		default_branch: string;

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge?: boolean | null;

		/** Required */
		deployments_url: string;

		/** Required */
		description: string;

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: boolean;

		/** Required */
		downloads_url: string;

		/** Required */
		events_url: string;

		/** Required */
		fork: boolean;

		/** Required */
		forks: number;

		/** Required */
		forks_count: number;

		/** Required */
		forks_url: string;

		/** Required */
		full_name: string;

		/** Required */
		git_commits_url: string;

		/** Required */
		git_refs_url: string;

		/** Required */
		git_tags_url: string;

		/** Required */
		git_url: string;

		/**
		 * Whether downloads are enabled.
		 * Required
		 */
		has_downloads: boolean;

		/**
		 * Whether issues are enabled.
		 * Required
		 */
		has_issues: boolean;

		/** Required */
		has_pages: boolean;

		/**
		 * Whether projects are enabled.
		 * Required
		 */
		has_projects: boolean;

		/**
		 * Whether the wiki is enabled.
		 * Required
		 */
		has_wiki: boolean;

		/** Required */
		homepage: string;

		/** Required */
		hooks_url: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the repository
		 * Required
		 */
		id: number;

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template?: boolean | null;

		/** Required */
		issue_comment_url: string;

		/** Required */
		issue_events_url: string;

		/** Required */
		issues_url: string;

		/** Required */
		keys_url: string;

		/** Required */
		labels_url: string;

		/** Required */
		language: string;

		/** Required */
		languages_url: string;

		/**
		 * License Simple
		 * Required
		 */
		license: Nullable_license_simple;
		master_branch?: string | null;

		/** Required */
		merges_url: string;

		/** Required */
		milestones_url: string;

		/** Required */
		mirror_url: string;

		/**
		 * The name of the repository.
		 * Required
		 */
		name: string;
		network_count?: number | null;

		/** Required */
		node_id: string;

		/** Required */
		notifications_url: string;

		/** Required */
		open_issues: number;

		/** Required */
		open_issues_count: number;

		/**
		 * Simple User
		 * Required
		 */
		owner: Nullable_simple_user;
		permissions?: Team_repositoryPermissions;

		/**
		 * Whether the repository is private or public.
		 * Required
		 */
		private: boolean;

		/** Required */
		pulls_url: string;

		/** Required */
		pushed_at: Date;

		/** Required */
		releases_url: string;

		/** Required */
		size: number;

		/** Required */
		ssh_url: string;

		/** Required */
		stargazers_count: number;

		/** Required */
		stargazers_url: string;

		/** Required */
		statuses_url: string;
		subscribers_count?: number | null;

		/** Required */
		subscribers_url: string;

		/** Required */
		subscription_url: string;

		/** Required */
		svn_url: string;

		/** Required */
		tags_url: string;

		/** Required */
		teams_url: string;
		temp_clone_token?: string | null;

		/** A git repository */
		template_repository?: Nullable_repository;
		topics?: Array<string>;

		/** Required */
		trees_url: string;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;

		/** The repository visibility: public, private, or internal. */
		visibility?: string | null;

		/** Required */
		watchers: number;

		/** Required */
		watchers_count: number;
	}

	/** A team's access to a repository. */
	export interface Team_repositoryFormProperties {

		/** Whether to allow forking this repo */
		allow_forking: FormControl<boolean | null | undefined>,

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit: FormControl<boolean | null | undefined>,

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge: FormControl<boolean | null | undefined>,

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Required */
		archive_url: FormControl<string | null | undefined>,

		/**
		 * Whether the repository is archived.
		 * Required
		 */
		archived: FormControl<boolean | null | undefined>,

		/** Required */
		assignees_url: FormControl<string | null | undefined>,

		/** Required */
		blobs_url: FormControl<string | null | undefined>,

		/** Required */
		branches_url: FormControl<string | null | undefined>,

		/** Required */
		clone_url: FormControl<string | null | undefined>,

		/** Required */
		collaborators_url: FormControl<string | null | undefined>,

		/** Required */
		comments_url: FormControl<string | null | undefined>,

		/** Required */
		commits_url: FormControl<string | null | undefined>,

		/** Required */
		compare_url: FormControl<string | null | undefined>,

		/** Required */
		contents_url: FormControl<string | null | undefined>,

		/** Required */
		contributors_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The default branch of the repository.
		 * Required
		 */
		default_branch: FormControl<string | null | undefined>,

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** Required */
		deployments_url: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/**
		 * Returns whether or not this repository disabled.
		 * Required
		 */
		disabled: FormControl<boolean | null | undefined>,

		/** Required */
		downloads_url: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,

		/** Required */
		fork: FormControl<boolean | null | undefined>,

		/** Required */
		forks: FormControl<number | null | undefined>,

		/** Required */
		forks_count: FormControl<number | null | undefined>,

		/** Required */
		forks_url: FormControl<string | null | undefined>,

		/** Required */
		full_name: FormControl<string | null | undefined>,

		/** Required */
		git_commits_url: FormControl<string | null | undefined>,

		/** Required */
		git_refs_url: FormControl<string | null | undefined>,

		/** Required */
		git_tags_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/**
		 * Whether downloads are enabled.
		 * Required
		 */
		has_downloads: FormControl<boolean | null | undefined>,

		/**
		 * Whether issues are enabled.
		 * Required
		 */
		has_issues: FormControl<boolean | null | undefined>,

		/** Required */
		has_pages: FormControl<boolean | null | undefined>,

		/**
		 * Whether projects are enabled.
		 * Required
		 */
		has_projects: FormControl<boolean | null | undefined>,

		/**
		 * Whether the wiki is enabled.
		 * Required
		 */
		has_wiki: FormControl<boolean | null | undefined>,

		/** Required */
		homepage: FormControl<string | null | undefined>,

		/** Required */
		hooks_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the repository
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template: FormControl<boolean | null | undefined>,

		/** Required */
		issue_comment_url: FormControl<string | null | undefined>,

		/** Required */
		issue_events_url: FormControl<string | null | undefined>,

		/** Required */
		issues_url: FormControl<string | null | undefined>,

		/** Required */
		keys_url: FormControl<string | null | undefined>,

		/** Required */
		labels_url: FormControl<string | null | undefined>,

		/** Required */
		language: FormControl<string | null | undefined>,

		/** Required */
		languages_url: FormControl<string | null | undefined>,
		master_branch: FormControl<string | null | undefined>,

		/** Required */
		merges_url: FormControl<string | null | undefined>,

		/** Required */
		milestones_url: FormControl<string | null | undefined>,

		/** Required */
		mirror_url: FormControl<string | null | undefined>,

		/**
		 * The name of the repository.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
		network_count: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		notifications_url: FormControl<string | null | undefined>,

		/** Required */
		open_issues: FormControl<number | null | undefined>,

		/** Required */
		open_issues_count: FormControl<number | null | undefined>,

		/**
		 * Whether the repository is private or public.
		 * Required
		 */
		private: FormControl<boolean | null | undefined>,

		/** Required */
		pulls_url: FormControl<string | null | undefined>,

		/** Required */
		pushed_at: FormControl<Date | null | undefined>,

		/** Required */
		releases_url: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		ssh_url: FormControl<string | null | undefined>,

		/** Required */
		stargazers_count: FormControl<number | null | undefined>,

		/** Required */
		stargazers_url: FormControl<string | null | undefined>,

		/** Required */
		statuses_url: FormControl<string | null | undefined>,
		subscribers_count: FormControl<number | null | undefined>,

		/** Required */
		subscribers_url: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		svn_url: FormControl<string | null | undefined>,

		/** Required */
		tags_url: FormControl<string | null | undefined>,

		/** Required */
		teams_url: FormControl<string | null | undefined>,
		temp_clone_token: FormControl<string | null | undefined>,

		/** Required */
		trees_url: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,

		/** The repository visibility: public, private, or internal. */
		visibility: FormControl<string | null | undefined>,

		/** Required */
		watchers: FormControl<number | null | undefined>,

		/** Required */
		watchers_count: FormControl<number | null | undefined>,
	}
	export function CreateTeam_repositoryFormGroup() {
		return new FormGroup<Team_repositoryFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			archive_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			assignees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			blobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branches_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			clone_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			collaborators_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			comments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compare_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contents_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributors_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			default_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			deployments_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			disabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			downloads_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fork: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			forks: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			forks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			full_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_commits_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_refs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_downloads: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_issues: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_pages: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_projects: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_wiki: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			homepage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hooks_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			issue_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issues_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keys_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			labels_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			languages_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			master_branch: new FormControl<string | null | undefined>(undefined),
			merges_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			milestones_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mirror_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network_count: new FormControl<number | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			notifications_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			open_issues: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			open_issues_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pulls_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			releases_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ssh_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stargazers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			stargazers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statuses_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscribers_count: new FormControl<number | null | undefined>(undefined),
			subscribers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			svn_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tags_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teams_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			temp_clone_token: new FormControl<string | null | undefined>(undefined),
			trees_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<string | null | undefined>(undefined),
			watchers: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchers_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Team_repositoryPermissions {

		/** Required */
		admin: boolean;
		maintain?: boolean | null;

		/** Required */
		pull: boolean;

		/** Required */
		push: boolean;
		triage?: boolean | null;
	}
	export interface Team_repositoryPermissionsFormProperties {

		/** Required */
		admin: FormControl<boolean | null | undefined>,
		maintain: FormControl<boolean | null | undefined>,

		/** Required */
		pull: FormControl<boolean | null | undefined>,

		/** Required */
		push: FormControl<boolean | null | undefined>,
		triage: FormControl<boolean | null | undefined>,
	}
	export function CreateTeam_repositoryPermissionsFormGroup() {
		return new FormGroup<Team_repositoryPermissionsFormProperties>({
			admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			maintain: new FormControl<boolean | null | undefined>(undefined),
			pull: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			push: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			triage: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Thread */
	export interface Thread {

		/** Required */
		id: string;

		/** Required */
		last_read_at: string;

		/** Required */
		reason: string;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;

		/** Required */
		subject: ThreadSubject;

		/** Required */
		subscription_url: string;

		/** Required */
		unread: boolean;

		/** Required */
		updated_at: string;

		/** Required */
		url: string;
	}

	/** Thread */
	export interface ThreadFormProperties {

		/** Required */
		id: FormControl<string | null | undefined>,

		/** Required */
		last_read_at: FormControl<string | null | undefined>,

		/** Required */
		reason: FormControl<string | null | undefined>,

		/** Required */
		subscription_url: FormControl<string | null | undefined>,

		/** Required */
		unread: FormControl<boolean | null | undefined>,

		/** Required */
		updated_at: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateThreadFormGroup() {
		return new FormGroup<ThreadFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_read_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unread: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ThreadSubject {

		/** Required */
		latest_comment_url: string;

		/** Required */
		title: string;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface ThreadSubjectFormProperties {

		/** Required */
		latest_comment_url: FormControl<string | null | undefined>,

		/** Required */
		title: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateThreadSubjectFormGroup() {
		return new FormGroup<ThreadSubjectFormProperties>({
			latest_comment_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Thread Subscription */
	export interface Thread_subscription {

		/** Required */
		created_at: Date;

		/** Required */
		ignored: boolean;

		/** Required */
		reason: string;
		repository_url?: string | null;

		/** Required */
		subscribed: boolean;
		thread_url?: string | null;

		/** Required */
		url: string;
	}

	/** Thread Subscription */
	export interface Thread_subscriptionFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		ignored: FormControl<boolean | null | undefined>,

		/** Required */
		reason: FormControl<string | null | undefined>,
		repository_url: FormControl<string | null | undefined>,

		/** Required */
		subscribed: FormControl<boolean | null | undefined>,
		thread_url: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateThread_subscriptionFormGroup() {
		return new FormGroup<Thread_subscriptionFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ignored: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_url: new FormControl<string | null | undefined>(undefined),
			subscribed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			thread_url: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Timeline Assigned Issue Event */
	export interface Timeline_assigned_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Timeline Assigned Issue Event */
	export interface Timeline_assigned_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_assigned_issue_eventFormGroup() {
		return new FormGroup<Timeline_assigned_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Timeline Comment Event */
	export interface Timeline_comment_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/** Contents of the issue comment */
		body?: string | null;
		body_html?: string | null;
		body_text?: string | null;

		/** Required */
		created_at: Date;

		/** Required */
		event: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the issue comment
		 * Required
		 */
		id: number;

		/** Required */
		issue_url: string;

		/** Required */
		node_id: string;

		/** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
		performed_via_github_app?: Nullable_integration;
		reactions?: Reaction_rollup;

		/** Required */
		updated_at: Date;

		/**
		 * URL for the issue comment
		 * Required
		 */
		url: string;

		/**
		 * Simple User
		 * Required
		 */
		user: Simple_user;
	}

	/** Timeline Comment Event */
	export interface Timeline_comment_eventFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/** Contents of the issue comment */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the issue comment
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		issue_url: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * URL for the issue comment
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_comment_eventFormGroup() {
		return new FormGroup<Timeline_comment_eventFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			issue_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Timeline Commit Commented Event */
	export interface Timeline_commit_commented_event {
		comments?: Array<Commit_comment>;
		commit_id?: string | null;
		event?: string | null;
		node_id?: string | null;
	}

	/** Timeline Commit Commented Event */
	export interface Timeline_commit_commented_eventFormProperties {
		commit_id: FormControl<string | null | undefined>,
		event: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_commit_commented_eventFormGroup() {
		return new FormGroup<Timeline_commit_commented_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined),
			event: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Timeline Committed Event */
	export interface Timeline_committed_event {

		/**
		 * Identifying information for the git-user
		 * Required
		 */
		author: Timeline_committed_eventAuthor;

		/**
		 * Identifying information for the git-user
		 * Required
		 */
		committer: Timeline_committed_eventCommitter;
		event?: string | null;

		/** Required */
		html_url: string;

		/**
		 * Message describing the purpose of the commit
		 * Required
		 */
		message: string;

		/** Required */
		node_id: string;

		/** Required */
		Timeline_committed_eventParents: Array<Timeline_committed_eventParents>;

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: string;

		/** Required */
		tree: Timeline_committed_eventTree;

		/** Required */
		url: string;

		/** Required */
		verification: Timeline_committed_eventVerification;
	}

	/** Timeline Committed Event */
	export interface Timeline_committed_eventFormProperties {
		event: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Message describing the purpose of the commit
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_committed_eventFormGroup() {
		return new FormGroup<Timeline_committed_eventFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_committed_eventAuthor {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: Date;

		/**
		 * Git email address of the user
		 * Required
		 */
		email: string;

		/**
		 * Name of the git user
		 * Required
		 */
		name: string;
	}
	export interface Timeline_committed_eventAuthorFormProperties {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Git email address of the user
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * Name of the git user
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_committed_eventAuthorFormGroup() {
		return new FormGroup<Timeline_committed_eventAuthorFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_committed_eventCommitter {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: Date;

		/**
		 * Git email address of the user
		 * Required
		 */
		email: string;

		/**
		 * Name of the git user
		 * Required
		 */
		name: string;
	}
	export interface Timeline_committed_eventCommitterFormProperties {

		/**
		 * Timestamp of the commit
		 * Required
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * Git email address of the user
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * Name of the git user
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_committed_eventCommitterFormGroup() {
		return new FormGroup<Timeline_committed_eventCommitterFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_committed_eventParents {

		/** Required */
		html_url: string;

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Timeline_committed_eventParentsFormProperties {

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_committed_eventParentsFormGroup() {
		return new FormGroup<Timeline_committed_eventParentsFormProperties>({
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_committed_eventTree {

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: string;

		/** Required */
		url: string;
	}
	export interface Timeline_committed_eventTreeFormProperties {

		/**
		 * SHA for the commit
		 * Required
		 */
		sha: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_committed_eventTreeFormGroup() {
		return new FormGroup<Timeline_committed_eventTreeFormProperties>({
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_committed_eventVerification {

		/** Required */
		payload: string;

		/** Required */
		reason: string;

		/** Required */
		signature: string;

		/** Required */
		verified: boolean;
	}
	export interface Timeline_committed_eventVerificationFormProperties {

		/** Required */
		payload: FormControl<string | null | undefined>,

		/** Required */
		reason: FormControl<string | null | undefined>,

		/** Required */
		signature: FormControl<string | null | undefined>,

		/** Required */
		verified: FormControl<boolean | null | undefined>,
	}
	export function CreateTimeline_committed_eventVerificationFormGroup() {
		return new FormGroup<Timeline_committed_eventVerificationFormProperties>({
			payload: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			signature: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verified: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Timeline Cross Referenced Event */
	export interface Timeline_cross_referenced_event {

		/** Simple User */
		actor?: Simple_user;

		/** Required */
		created_at: Date;

		/** Required */
		event: string;

		/** Required */
		source: Timeline_cross_referenced_eventSource;

		/** Required */
		updated_at: Date;
	}

	/** Timeline Cross Referenced Event */
	export interface Timeline_cross_referenced_eventFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateTimeline_cross_referenced_eventFormGroup() {
		return new FormGroup<Timeline_cross_referenced_eventFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_cross_referenced_eventSource {

		/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
		issue?: Issue;
		type?: string | null;
	}
	export interface Timeline_cross_referenced_eventSourceFormProperties {
		type: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_cross_referenced_eventSourceFormGroup() {
		return new FormGroup<Timeline_cross_referenced_eventSourceFormProperties>({
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Timeline Event */
	export interface Timeline_issue_events {
	}

	/** Timeline Event */
	export interface Timeline_issue_eventsFormProperties {
	}
	export function CreateTimeline_issue_eventsFormGroup() {
		return new FormGroup<Timeline_issue_eventsFormProperties>({
		});

	}


	/** Timeline Line Commented Event */
	export interface Timeline_line_commented_event {
		comments?: Array<Pull_request_review_comment>;
		event?: string | null;
		node_id?: string | null;
	}

	/** Timeline Line Commented Event */
	export interface Timeline_line_commented_eventFormProperties {
		event: FormControl<string | null | undefined>,
		node_id: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_line_commented_eventFormGroup() {
		return new FormGroup<Timeline_line_commented_eventFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Timeline Reviewed Event */
	export interface Timeline_reviewed_event {

		/** Required */
		_links: Timeline_reviewed_event_links;

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: Author_association;

		/**
		 * The text of the review.
		 * Required
		 */
		body: string;
		body_html?: string | null;
		body_text?: string | null;

		/**
		 * A commit SHA for the review.
		 * Required
		 */
		commit_id: string;

		/** Required */
		event: string;

		/** Required */
		html_url: string;

		/**
		 * Unique identifier of the review
		 * Required
		 */
		id: number;

		/** Required */
		node_id: string;

		/** Required */
		pull_request_url: string;

		/** Required */
		state: string;
		submitted_at?: Date | null;

		/**
		 * Simple User
		 * Required
		 */
		user: Simple_user;
	}

	/** Timeline Reviewed Event */
	export interface Timeline_reviewed_eventFormProperties {

		/**
		 * How the author is associated with the repository.
		 * Required
		 */
		author_association: FormControl<Author_association | null | undefined>,

		/**
		 * The text of the review.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
		body_html: FormControl<string | null | undefined>,
		body_text: FormControl<string | null | undefined>,

		/**
		 * A commit SHA for the review.
		 * Required
		 */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * Unique identifier of the review
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		pull_request_url: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,
		submitted_at: FormControl<Date | null | undefined>,
	}
	export function CreateTimeline_reviewed_eventFormGroup() {
		return new FormGroup<Timeline_reviewed_eventFormProperties>({
			author_association: new FormControl<Author_association | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body_html: new FormControl<string | null | undefined>(undefined),
			body_text: new FormControl<string | null | undefined>(undefined),
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pull_request_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			submitted_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface Timeline_reviewed_event_links {

		/** Required */
		html: Timeline_reviewed_event_linksHtml;

		/** Required */
		pull_request: Timeline_reviewed_event_linksPull_request;
	}
	export interface Timeline_reviewed_event_linksFormProperties {
	}
	export function CreateTimeline_reviewed_event_linksFormGroup() {
		return new FormGroup<Timeline_reviewed_event_linksFormProperties>({
		});

	}

	export interface Timeline_reviewed_event_linksHtml {

		/** Required */
		href: string;
	}
	export interface Timeline_reviewed_event_linksHtmlFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_reviewed_event_linksHtmlFormGroup() {
		return new FormGroup<Timeline_reviewed_event_linksHtmlFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Timeline_reviewed_event_linksPull_request {

		/** Required */
		href: string;
	}
	export interface Timeline_reviewed_event_linksPull_requestFormProperties {

		/** Required */
		href: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_reviewed_event_linksPull_requestFormGroup() {
		return new FormGroup<Timeline_reviewed_event_linksPull_requestFormProperties>({
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Timeline Unassigned Issue Event */
	export interface Timeline_unassigned_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Timeline Unassigned Issue Event */
	export interface Timeline_unassigned_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateTimeline_unassigned_issue_eventFormGroup() {
		return new FormGroup<Timeline_unassigned_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A topic aggregates entities that are related to a subject. */
	export interface Topic {

		/** Required */
		names: Array<string>;
	}

	/** A topic aggregates entities that are related to a subject. */
	export interface TopicFormProperties {
	}
	export function CreateTopicFormGroup() {
		return new FormGroup<TopicFormProperties>({
		});

	}


	/** Topic Search Result Item */
	export interface Topic_search_result_item {
		Topic_search_result_itemAliases?: Array<Topic_search_result_itemAliases>;

		/** Required */
		created_at: Date;

		/** Required */
		created_by: string;

		/** Required */
		curated: boolean;

		/** Required */
		description: string;

		/** Required */
		display_name: string;

		/** Required */
		featured: boolean;
		logo_url?: string | null;

		/** Required */
		name: string;
		Topic_search_result_itemRelated?: Array<Topic_search_result_itemRelated>;

		/** Required */
		released: string;
		repository_count?: number | null;

		/** Required */
		score: number;

		/** Required */
		short_description: string;
		text_matches?: Array<Search_result_text_matchesElement>;

		/** Required */
		updated_at: Date;
	}

	/** Topic Search Result Item */
	export interface Topic_search_result_itemFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		created_by: FormControl<string | null | undefined>,

		/** Required */
		curated: FormControl<boolean | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		display_name: FormControl<string | null | undefined>,

		/** Required */
		featured: FormControl<boolean | null | undefined>,
		logo_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		released: FormControl<string | null | undefined>,
		repository_count: FormControl<number | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		short_description: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateTopic_search_result_itemFormGroup() {
		return new FormGroup<Topic_search_result_itemFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			curated: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			display_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			featured: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			logo_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			released: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repository_count: new FormControl<number | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			short_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Topic_search_result_itemAliases {
		topic_relation?: Topic_search_result_itemAliasesTopic_relation;
	}
	export interface Topic_search_result_itemAliasesFormProperties {
	}
	export function CreateTopic_search_result_itemAliasesFormGroup() {
		return new FormGroup<Topic_search_result_itemAliasesFormProperties>({
		});

	}

	export interface Topic_search_result_itemAliasesTopic_relation {
		id?: number | null;
		name?: string | null;
		relation_type?: string | null;
		topic_id?: number | null;
	}
	export interface Topic_search_result_itemAliasesTopic_relationFormProperties {
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		relation_type: FormControl<string | null | undefined>,
		topic_id: FormControl<number | null | undefined>,
	}
	export function CreateTopic_search_result_itemAliasesTopic_relationFormGroup() {
		return new FormGroup<Topic_search_result_itemAliasesTopic_relationFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			relation_type: new FormControl<string | null | undefined>(undefined),
			topic_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Topic_search_result_itemRelated {
		topic_relation?: Topic_search_result_itemRelatedTopic_relation;
	}
	export interface Topic_search_result_itemRelatedFormProperties {
	}
	export function CreateTopic_search_result_itemRelatedFormGroup() {
		return new FormGroup<Topic_search_result_itemRelatedFormProperties>({
		});

	}

	export interface Topic_search_result_itemRelatedTopic_relation {
		id?: number | null;
		name?: string | null;
		relation_type?: string | null;
		topic_id?: number | null;
	}
	export interface Topic_search_result_itemRelatedTopic_relationFormProperties {
		id: FormControl<number | null | undefined>,
		name: FormControl<string | null | undefined>,
		relation_type: FormControl<string | null | undefined>,
		topic_id: FormControl<number | null | undefined>,
	}
	export function CreateTopic_search_result_itemRelatedTopic_relationFormGroup() {
		return new FormGroup<Topic_search_result_itemRelatedTopic_relationFormProperties>({
			id: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			relation_type: new FormControl<string | null | undefined>(undefined),
			topic_id: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Unassigned Issue Event */
	export interface Unassigned_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/**
		 * Simple User
		 * Required
		 */
		assignee: Simple_user;

		/**
		 * Simple User
		 * Required
		 */
		assigner: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Unassigned Issue Event */
	export interface Unassigned_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateUnassigned_issue_eventFormGroup() {
		return new FormGroup<Unassigned_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Unlabeled Issue Event */
	export interface Unlabeled_issue_event {

		/**
		 * Simple User
		 * Required
		 */
		actor: Simple_user;

		/** Required */
		commit_id: string;

		/** Required */
		commit_url: string;

		/** Required */
		created_at: string;

		/** Required */
		event: string;

		/** Required */
		id: number;

		/** Required */
		label: Unlabeled_issue_eventLabel;

		/** Required */
		node_id: string;

		/**
		 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
		 * Required
		 */
		performed_via_github_app: Nullable_integration;

		/** Required */
		url: string;
	}

	/** Unlabeled Issue Event */
	export interface Unlabeled_issue_eventFormProperties {

		/** Required */
		commit_id: FormControl<string | null | undefined>,

		/** Required */
		commit_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<string | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateUnlabeled_issue_eventFormGroup() {
		return new FormGroup<Unlabeled_issue_eventFormProperties>({
			commit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Unlabeled_issue_eventLabel {

		/** Required */
		color: string;

		/** Required */
		name: string;
	}
	export interface Unlabeled_issue_eventLabelFormProperties {

		/** Required */
		color: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,
	}
	export function CreateUnlabeled_issue_eventLabelFormGroup() {
		return new FormGroup<Unlabeled_issue_eventLabelFormProperties>({
			color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** User Search Result Item */
	export interface User_search_result_item {

		/** Required */
		avatar_url: string;
		bio?: string | null;
		blog?: string | null;
		company?: string | null;
		created_at?: Date | null;
		email?: string | null;

		/** Required */
		events_url: string;
		followers?: number | null;

		/** Required */
		followers_url: string;
		following?: number | null;

		/** Required */
		following_url: string;

		/** Required */
		gists_url: string;

		/** Required */
		gravatar_id: string;
		hireable?: boolean | null;

		/** Required */
		html_url: string;

		/** Required */
		id: number;
		location?: string | null;

		/** Required */
		login: string;
		name?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		organizations_url: string;
		public_gists?: number | null;
		public_repos?: number | null;

		/** Required */
		received_events_url: string;

		/** Required */
		repos_url: string;

		/** Required */
		score: number;

		/** Required */
		site_admin: boolean;

		/** Required */
		starred_url: string;

		/** Required */
		subscriptions_url: string;
		suspended_at?: Date | null;
		text_matches?: Array<Search_result_text_matchesElement>;

		/** Required */
		type: string;
		updated_at?: Date | null;

		/** Required */
		url: string;
	}

	/** User Search Result Item */
	export interface User_search_result_itemFormProperties {

		/** Required */
		avatar_url: FormControl<string | null | undefined>,
		bio: FormControl<string | null | undefined>,
		blog: FormControl<string | null | undefined>,
		company: FormControl<string | null | undefined>,
		created_at: FormControl<Date | null | undefined>,
		email: FormControl<string | null | undefined>,

		/** Required */
		events_url: FormControl<string | null | undefined>,
		followers: FormControl<number | null | undefined>,

		/** Required */
		followers_url: FormControl<string | null | undefined>,
		following: FormControl<number | null | undefined>,

		/** Required */
		following_url: FormControl<string | null | undefined>,

		/** Required */
		gists_url: FormControl<string | null | undefined>,

		/** Required */
		gravatar_id: FormControl<string | null | undefined>,
		hireable: FormControl<boolean | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,
		location: FormControl<string | null | undefined>,

		/** Required */
		login: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		organizations_url: FormControl<string | null | undefined>,
		public_gists: FormControl<number | null | undefined>,
		public_repos: FormControl<number | null | undefined>,

		/** Required */
		received_events_url: FormControl<string | null | undefined>,

		/** Required */
		repos_url: FormControl<string | null | undefined>,

		/** Required */
		score: FormControl<number | null | undefined>,

		/** Required */
		site_admin: FormControl<boolean | null | undefined>,

		/** Required */
		starred_url: FormControl<string | null | undefined>,

		/** Required */
		subscriptions_url: FormControl<string | null | undefined>,
		suspended_at: FormControl<Date | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateUser_search_result_itemFormGroup() {
		return new FormGroup<User_search_result_itemFormProperties>({
			avatar_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bio: new FormControl<string | null | undefined>(undefined),
			blog: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			followers: new FormControl<number | null | undefined>(undefined),
			followers_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			following: new FormControl<number | null | undefined>(undefined),
			following_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gists_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gravatar_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hireable: new FormControl<boolean | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			location: new FormControl<string | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizations_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			public_gists: new FormControl<number | null | undefined>(undefined),
			public_repos: new FormControl<number | null | undefined>(undefined),
			received_events_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repos_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			site_admin: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			starred_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscriptions_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			suspended_at: new FormControl<Date | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Validation Error */
	export interface Validation_error {

		/** Required */
		documentation_url: string;
		Validation_errorErrors?: Array<Validation_errorErrors>;

		/** Required */
		message: string;
	}

	/** Validation Error */
	export interface Validation_errorFormProperties {

		/** Required */
		documentation_url: FormControl<string | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,
	}
	export function CreateValidation_errorFormGroup() {
		return new FormGroup<Validation_errorFormProperties>({
			documentation_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Validation_errorErrors {

		/** Required */
		code: string;
		field?: string | null;
		index?: number | null;
		message?: string | null;
		resource?: string | null;
		value?: string;
	}
	export interface Validation_errorErrorsFormProperties {

		/** Required */
		code: FormControl<string | null | undefined>,
		field: FormControl<string | null | undefined>,
		index: FormControl<number | null | undefined>,
		message: FormControl<string | null | undefined>,
		resource: FormControl<string | null | undefined>,
		value: FormControl<string | null | undefined>,
	}
	export function CreateValidation_errorErrorsFormGroup() {
		return new FormGroup<Validation_errorErrorsFormProperties>({
			code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			field: new FormControl<string | null | undefined>(undefined),
			index: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
			resource: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Validation Error Simple */
	export interface Validation_error_simple {

		/** Required */
		documentation_url: string;
		errors?: Array<string>;

		/** Required */
		message: string;
	}

	/** Validation Error Simple */
	export interface Validation_error_simpleFormProperties {

		/** Required */
		documentation_url: FormControl<string | null | undefined>,

		/** Required */
		message: FormControl<string | null | undefined>,
	}
	export function CreateValidation_error_simpleFormGroup() {
		return new FormGroup<Validation_error_simpleFormProperties>({
			documentation_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration object of the webhook */
	export interface Webhook_config {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/** The URL to which the payloads will be delivered. */
		url?: string | null;
	}

	/** Configuration object of the webhook */
	export interface Webhook_configFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/** The URL to which the payloads will be delivered. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateWebhook_configFormGroup() {
		return new FormGroup<Webhook_configFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Webhook_config_insecure_ssl {
	}
	export interface Webhook_config_insecure_sslFormProperties {
	}
	export function CreateWebhook_config_insecure_sslFormGroup() {
		return new FormGroup<Webhook_config_insecure_sslFormProperties>({
		});

	}


	/** A GitHub Actions workflow */
	export interface Workflow {

		/** Required */
		badge_url: string;

		/** Required */
		created_at: Date;
		deleted_at?: Date | null;

		/** Required */
		html_url: string;

		/** Required */
		id: number;

		/** Required */
		name: string;

		/** Required */
		node_id: string;

		/** Required */
		path: string;

		/** Required */
		state: WorkflowState;

		/** Required */
		updated_at: Date;

		/** Required */
		url: string;
	}

	/** A GitHub Actions workflow */
	export interface WorkflowFormProperties {

		/** Required */
		badge_url: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,
		deleted_at: FormControl<Date | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		id: FormControl<number | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<WorkflowState | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateWorkflowFormGroup() {
		return new FormGroup<WorkflowFormProperties>({
			badge_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			deleted_at: new FormControl<Date | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<WorkflowState | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum WorkflowState { active = 0, deleted = 1, disabled_fork = 2, disabled_inactivity = 3, disabled_manually = 4 }


	/** An invocation of a workflow */
	export interface Workflow_run {

		/**
		 * The URL to the artifacts for the workflow run.
		 * Required
		 */
		artifacts_url: string;

		/**
		 * The URL to cancel the workflow run.
		 * Required
		 */
		cancel_url: string;

		/** The ID of the associated check suite. */
		check_suite_id?: number | null;

		/** The node ID of the associated check suite. */
		check_suite_node_id?: string | null;

		/**
		 * The URL to the associated check suite.
		 * Required
		 */
		check_suite_url: string;

		/** Required */
		conclusion: string;

		/** Required */
		created_at: Date;

		/** Required */
		event: string;

		/** Required */
		head_branch: string;

		/**
		 * Simple Commit
		 * Required
		 */
		head_commit: Nullable_simple_commit;

		/**
		 * Minimal Repository
		 * Required
		 */
		head_repository: Minimal_repository;
		head_repository_id?: number | null;

		/**
		 * The SHA of the head commit that points to the version of the workflow being run.
		 * Required
		 */
		head_sha: string;

		/** Required */
		html_url: string;

		/**
		 * The ID of the workflow run.
		 * Required
		 */
		id: number;

		/**
		 * The URL to the jobs for the workflow run.
		 * Required
		 */
		jobs_url: string;

		/**
		 * The URL to download the logs for the workflow run.
		 * Required
		 */
		logs_url: string;

		/** The name of the workflow run. */
		name?: string | null;

		/** Required */
		node_id: string;

		/** Required */
		pull_requests: Array<Pull_request_minimal>;

		/**
		 * Minimal Repository
		 * Required
		 */
		repository: Minimal_repository;

		/**
		 * The URL to rerun the workflow run.
		 * Required
		 */
		rerun_url: string;

		/**
		 * The auto incrementing run number for the workflow run.
		 * Required
		 */
		run_number: number;

		/** Required */
		status: string;

		/** Required */
		updated_at: Date;

		/**
		 * The URL to the workflow run.
		 * Required
		 */
		url: string;

		/**
		 * The ID of the parent workflow.
		 * Required
		 */
		workflow_id: number;

		/**
		 * The URL to the workflow.
		 * Required
		 */
		workflow_url: string;
	}

	/** An invocation of a workflow */
	export interface Workflow_runFormProperties {

		/**
		 * The URL to the artifacts for the workflow run.
		 * Required
		 */
		artifacts_url: FormControl<string | null | undefined>,

		/**
		 * The URL to cancel the workflow run.
		 * Required
		 */
		cancel_url: FormControl<string | null | undefined>,

		/** The ID of the associated check suite. */
		check_suite_id: FormControl<number | null | undefined>,

		/** The node ID of the associated check suite. */
		check_suite_node_id: FormControl<string | null | undefined>,

		/**
		 * The URL to the associated check suite.
		 * Required
		 */
		check_suite_url: FormControl<string | null | undefined>,

		/** Required */
		conclusion: FormControl<string | null | undefined>,

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/** Required */
		event: FormControl<string | null | undefined>,

		/** Required */
		head_branch: FormControl<string | null | undefined>,
		head_repository_id: FormControl<number | null | undefined>,

		/**
		 * The SHA of the head commit that points to the version of the workflow being run.
		 * Required
		 */
		head_sha: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/**
		 * The ID of the workflow run.
		 * Required
		 */
		id: FormControl<number | null | undefined>,

		/**
		 * The URL to the jobs for the workflow run.
		 * Required
		 */
		jobs_url: FormControl<string | null | undefined>,

		/**
		 * The URL to download the logs for the workflow run.
		 * Required
		 */
		logs_url: FormControl<string | null | undefined>,

		/** The name of the workflow run. */
		name: FormControl<string | null | undefined>,

		/** Required */
		node_id: FormControl<string | null | undefined>,

		/**
		 * The URL to rerun the workflow run.
		 * Required
		 */
		rerun_url: FormControl<string | null | undefined>,

		/**
		 * The auto incrementing run number for the workflow run.
		 * Required
		 */
		run_number: FormControl<number | null | undefined>,

		/** Required */
		status: FormControl<string | null | undefined>,

		/** Required */
		updated_at: FormControl<Date | null | undefined>,

		/**
		 * The URL to the workflow run.
		 * Required
		 */
		url: FormControl<string | null | undefined>,

		/**
		 * The ID of the parent workflow.
		 * Required
		 */
		workflow_id: FormControl<number | null | undefined>,

		/**
		 * The URL to the workflow.
		 * Required
		 */
		workflow_url: FormControl<string | null | undefined>,
	}
	export function CreateWorkflow_runFormGroup() {
		return new FormGroup<Workflow_runFormProperties>({
			artifacts_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cancel_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_suite_id: new FormControl<number | null | undefined>(undefined),
			check_suite_node_id: new FormControl<string | null | undefined>(undefined),
			check_suite_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			conclusion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			event: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			head_branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			head_repository_id: new FormControl<number | null | undefined>(undefined),
			head_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			jobs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			logs_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined),
			node_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rerun_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			run_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			workflow_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			workflow_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * GitHub API Root
		 * Get Hypermedia links to resources accessible in GitHub's REST API
		 * Get 
		 * @return {Root} Response
		 */
		MetaSlashroot(): Observable<Root> {
			return this.http.get<Root>(this.baseUri + '', {});
		}

		/**
		 * List global webhooks
		 * Get admin/hooks
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Global_hook>} Response
		 */
		Enterprise_adminSlashlist_global_webhooks(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Global_hook>> {
			return this.http.get<Array<Global_hook>>(this.baseUri + 'admin/hooks?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a global webhook
		 * Post admin/hooks
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_global_webhook(requestBody: Enterprise_adminSlashcreate_global_webhookPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/hooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a global webhook
		 * Delete admin/hooks/{hook_id}
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_global_webhook(hook_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/hooks/' + hook_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a global webhook
		 * Get admin/hooks/{hook_id}
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Global_hook} Response
		 */
		Enterprise_adminSlashget_global_webhook(hook_id: number): Observable<Global_hook> {
			return this.http.get<Global_hook>(this.baseUri + 'admin/hooks/' + hook_id, {});
		}

		/**
		 * Update a global webhook
		 * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
		 * Patch admin/hooks/{hook_id}
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Global_hook_2} Response
		 */
		Enterprise_adminSlashupdate_global_webhook(hook_id: number, requestBody: Enterprise_adminSlashupdate_global_webhookPatchBody): Observable<Global_hook_2> {
			return this.http.patch<Global_hook_2>(this.baseUri + 'admin/hooks/' + hook_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Ping a global webhook
		 * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.1/webhooks/#ping-event) to be sent to the webhook.
		 * Post admin/hooks/{hook_id}/pings
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		Enterprise_adminSlashping_global_webhook(hook_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/hooks/' + hook_id + '/pings', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List public keys
		 * Get admin/keys
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {string} since Only show public keys accessed after the given time.
		 * @return {Array<Public_key_full>} Response
		 */
		Enterprise_adminSlashlist_public_keys(per_page: number | null | undefined, page: number | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, sort: Enterprise_adminSlashlist_public_keysSort | null | undefined, since: string | null | undefined): Observable<Array<Public_key_full>> {
			return this.http.get<Array<Public_key_full>>(this.baseUri + 'admin/keys?per_page=' + per_page + '&page=' + page + '&direction=' + direction + '&sort=' + sort + '&since=' + (since == null ? '' : encodeURIComponent(since)), {});
		}

		/**
		 * Delete a public key
		 * Delete admin/keys/{key_ids}
		 * @param {string} key_ids The unique identifier of the key.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_public_key(key_ids: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/keys/' + (key_ids == null ? '' : encodeURIComponent(key_ids)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Update LDAP mapping for a team
		 * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
		 * If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
		 * Patch admin/ldap/teams/{team_id}/mapping
		 * @param {number} team_id The unique identifier of the team.
		 * @return {Ldap_mapping_team} Response
		 */
		Enterprise_adminSlashupdate_ldap_mapping_for_team(team_id: number, requestBody: Enterprise_adminSlashupdate_ldap_mapping_for_teamPatchBody): Observable<Ldap_mapping_team> {
			return this.http.patch<Ldap_mapping_team>(this.baseUri + 'admin/ldap/teams/' + team_id + '/mapping', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sync LDAP mapping for a team
		 * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
		 * Post admin/ldap/teams/{team_id}/sync
		 * @param {number} team_id The unique identifier of the team.
		 * @return {void} 
		 */
		Enterprise_adminSlashsync_ldap_mapping_for_team(team_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/ldap/teams/' + team_id + '/sync', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Update LDAP mapping for a user
		 * Patch admin/ldap/users/{username}/mapping
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Ldap_mapping_user} Response
		 */
		Enterprise_adminSlashupdate_ldap_mapping_for_user(username: string, requestBody: Enterprise_adminSlashupdate_ldap_mapping_for_userPatchBody): Observable<Ldap_mapping_user> {
			return this.http.patch<Ldap_mapping_user>(this.baseUri + 'admin/ldap/users/' + (username == null ? '' : encodeURIComponent(username)) + '/mapping', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sync LDAP mapping for a user
		 * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
		 * Post admin/ldap/users/{username}/sync
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashsync_ldap_mapping_for_user(username: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/ldap/users/' + (username == null ? '' : encodeURIComponent(username)) + '/sync', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create an organization
		 * Post admin/organizations
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_org(requestBody: Enterprise_adminSlashcreate_orgPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/organizations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Update an organization name
		 * Patch admin/organizations/{org}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		Enterprise_adminSlashupdate_org_name(org: string, requestBody: Enterprise_adminSlashupdate_org_namePatchBody): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + 'admin/organizations/' + (org == null ? '' : encodeURIComponent(org)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List pre-receive environments
		 * Get admin/pre-receive-environments
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @return {Array<Pre_receive_environment>} Response
		 */
		Enterprise_adminSlashlist_pre_receive_environments(per_page: number | null | undefined, page: number | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, sort: Enterprise_adminSlashlist_pre_receive_environmentsSort | null | undefined): Observable<Array<Pre_receive_environment>> {
			return this.http.get<Array<Pre_receive_environment>>(this.baseUri + 'admin/pre-receive-environments?per_page=' + per_page + '&page=' + page + '&direction=' + direction + '&sort=' + sort, {});
		}

		/**
		 * Create a pre-receive environment
		 * Post admin/pre-receive-environments
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_pre_receive_environment(requestBody: Enterprise_adminSlashcreate_pre_receive_environmentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/pre-receive-environments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a pre-receive environment
		 * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
		 * The possible error messages are:
		 * *   _Cannot modify or delete the default environment_
		 * *   _Cannot delete environment that has hooks_
		 * *   _Cannot delete environment when download is in progress_
		 * Delete admin/pre-receive-environments/{pre_receive_environment_id}
		 * @param {number} pre_receive_environment_id The unique identifier of the pre-receive environment.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_pre_receive_environment(pre_receive_environment_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/pre-receive-environments/' + pre_receive_environment_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a pre-receive environment
		 * Get admin/pre-receive-environments/{pre_receive_environment_id}
		 * @param {number} pre_receive_environment_id The unique identifier of the pre-receive environment.
		 * @return {Pre_receive_environment} Response
		 */
		Enterprise_adminSlashget_pre_receive_environment(pre_receive_environment_id: number): Observable<Pre_receive_environment> {
			return this.http.get<Pre_receive_environment>(this.baseUri + 'admin/pre-receive-environments/' + pre_receive_environment_id, {});
		}

		/**
		 * Update a pre-receive environment
		 * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
		 * Patch admin/pre-receive-environments/{pre_receive_environment_id}
		 * @param {number} pre_receive_environment_id The unique identifier of the pre-receive environment.
		 * @return {Pre_receive_environment} Response
		 */
		Enterprise_adminSlashupdate_pre_receive_environment(pre_receive_environment_id: number, requestBody: Enterprise_adminSlashupdate_pre_receive_environmentPatchBody): Observable<Pre_receive_environment> {
			return this.http.patch<Pre_receive_environment>(this.baseUri + 'admin/pre-receive-environments/' + pre_receive_environment_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Start a pre-receive environment download
		 * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
		 * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
		 * The possible error messages are:
		 * * _Cannot modify or delete the default environment_
		 * * _Can not start a new download when a download is in progress_
		 * Post admin/pre-receive-environments/{pre_receive_environment_id}/downloads
		 * @param {number} pre_receive_environment_id The unique identifier of the pre-receive environment.
		 * @return {void} 
		 */
		Enterprise_adminSlashstart_pre_receive_environment_download(pre_receive_environment_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/pre-receive-environments/' + pre_receive_environment_id + '/downloads', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the download status for a pre-receive environment
		 * In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
		 * Get admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest
		 * @param {number} pre_receive_environment_id The unique identifier of the pre-receive environment.
		 * @return {Pre_receive_environment_download_status} Response
		 */
		Enterprise_adminSlashget_download_status_for_pre_receive_environment(pre_receive_environment_id: number): Observable<Pre_receive_environment_download_status> {
			return this.http.get<Pre_receive_environment_download_status>(this.baseUri + 'admin/pre-receive-environments/' + pre_receive_environment_id + '/downloads/latest', {});
		}

		/**
		 * List pre-receive hooks
		 * Get admin/pre-receive-hooks
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {Enterprise_adminSlashlist_pre_receive_environmentsSort} sort The property to sort the results by.
		 * @return {Array<Pre_receive_hook>} Response
		 */
		Enterprise_adminSlashlist_pre_receive_hooks(per_page: number | null | undefined, page: number | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, sort: Enterprise_adminSlashlist_pre_receive_environmentsSort | null | undefined): Observable<Array<Pre_receive_hook>> {
			return this.http.get<Array<Pre_receive_hook>>(this.baseUri + 'admin/pre-receive-hooks?per_page=' + per_page + '&page=' + page + '&direction=' + direction + '&sort=' + sort, {});
		}

		/**
		 * Create a pre-receive hook
		 * Post admin/pre-receive-hooks
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_pre_receive_hook(requestBody: Enterprise_adminSlashcreate_pre_receive_hookPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/pre-receive-hooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a pre-receive hook
		 * Delete admin/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_pre_receive_hook(pre_receive_hook_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/pre-receive-hooks/' + pre_receive_hook_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a pre-receive hook
		 * Get admin/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Pre_receive_hook} Response
		 */
		Enterprise_adminSlashget_pre_receive_hook(pre_receive_hook_id: number): Observable<Pre_receive_hook> {
			return this.http.get<Pre_receive_hook>(this.baseUri + 'admin/pre-receive-hooks/' + pre_receive_hook_id, {});
		}

		/**
		 * Update a pre-receive hook
		 * Patch admin/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Pre_receive_hook} Response
		 */
		Enterprise_adminSlashupdate_pre_receive_hook(pre_receive_hook_id: number, requestBody: Enterprise_adminSlashupdate_pre_receive_hookPatchBody): Observable<Pre_receive_hook> {
			return this.http.patch<Pre_receive_hook>(this.baseUri + 'admin/pre-receive-hooks/' + pre_receive_hook_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List personal access tokens
		 * Lists personal access tokens for all users, including admin users.
		 * Get admin/tokens
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Authorization>} Response
		 */
		Enterprise_adminSlashlist_personal_access_tokens(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Authorization>> {
			return this.http.get<Array<Authorization>>(this.baseUri + 'admin/tokens?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a personal access token
		 * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
		 * Delete admin/tokens/{token_id}
		 * @param {number} token_id The unique identifier of the token.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_personal_access_token(token_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/tokens/' + token_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a user
		 * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
		 * The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
		 * If the login name or email address is already associated with an account, the server will return a `422` response.
		 * Post admin/users
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_user(requestBody: Enterprise_adminSlashcreate_userPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'admin/users', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a user
		 * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
		 * You can delete any user account except your own.
		 * Delete admin/users/{username}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_user(username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/users/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Update the username for a user
		 * Patch admin/users/{username}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashupdate_username_for_user(username: string, requestBody: Enterprise_adminSlashupdate_username_for_userPatchBody): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + 'admin/users/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete an impersonation OAuth token
		 * Delete admin/users/{username}/authorizations
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_impersonation_o_auth_token(username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'admin/users/' + (username == null ? '' : encodeURIComponent(username)) + '/authorizations', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create an impersonation OAuth token
		 * Post admin/users/{username}/authorizations
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Authorization} Response when getting an existing impersonation OAuth token
		 */
		Enterprise_adminSlashcreate_impersonation_o_auth_token(username: string, requestBody: Enterprise_adminSlashcreate_impersonation_o_auth_tokenPostBody): Observable<Authorization> {
			return this.http.post<Authorization>(this.baseUri + 'admin/users/' + (username == null ? '' : encodeURIComponent(username)) + '/authorizations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get the authenticated app
		 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.1/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Get app
		 * @return {Integration} Response
		 */
		AppsSlashget_authenticated(): Observable<Integration> {
			return this.http.get<Integration>(this.baseUri + 'app', {});
		}

		/**
		 * Create a GitHub App from a manifest
		 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
		 * Post app-manifests/{code}/conversions
		 * @return {void} 
		 */
		AppsSlashcreate_from_manifest(code: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'app-manifests/' + (code == null ? '' : encodeURIComponent(code)) + '/conversions', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a webhook configuration for an app
		 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Get app/hook/config
		 * @return {Webhook_config} Response
		 */
		AppsSlashget_webhook_config_for_app(): Observable<Webhook_config> {
			return this.http.get<Webhook_config>(this.baseUri + 'app/hook/config', {});
		}

		/**
		 * Update a webhook configuration for an app
		 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Patch app/hook/config
		 * @return {Webhook_config} Response
		 */
		AppsSlashupdate_webhook_config_for_app(requestBody: AppsSlashupdate_webhook_config_for_appPatchBody): Observable<Webhook_config> {
			return this.http.patch<Webhook_config>(this.baseUri + 'app/hook/config', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List installations for the authenticated app
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * The permissions the installation has are included under the `permissions` key.
		 * Get app/installations
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @return {Array<Installation>} The permissions the installation has are included under the `permissions` key.
		 */
		AppsSlashlist_installations(per_page: number | null | undefined, page: number | null | undefined, since: Date | null | undefined, outdated: string | null | undefined): Observable<Array<Installation>> {
			return this.http.get<Array<Installation>>(this.baseUri + 'app/installations?per_page=' + per_page + '&page=' + page + '&since=' + since?.toISOString() + '&outdated=' + (outdated == null ? '' : encodeURIComponent(outdated)), {});
		}

		/**
		 * Delete an installation for the authenticated app
		 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/enterprise-server@3.1/rest/reference/apps/#suspend-an-app-installation)" endpoint.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Delete app/installations/{installation_id}
		 * @param {number} installation_id The unique identifier of the installation.
		 * @return {void} 
		 */
		AppsSlashdelete_installation(installation_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'app/installations/' + installation_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get an installation for the authenticated app
		 * Enables an authenticated GitHub App to find an installation's information using the installation id.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Get app/installations/{installation_id}
		 * @param {number} installation_id The unique identifier of the installation.
		 * @return {Installation} Response
		 */
		AppsSlashget_installation(installation_id: number): Observable<Installation> {
			return this.http.get<Installation>(this.baseUri + 'app/installations/' + installation_id, {});
		}

		/**
		 * Create an installation access token for an app
		 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Post app/installations/{installation_id}/access_tokens
		 * @param {number} installation_id The unique identifier of the installation.
		 * @return {void} 
		 */
		AppsSlashcreate_installation_access_token(installation_id: number, requestBody: AppsSlashcreate_installation_access_tokenPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'app/installations/' + installation_id + '/access_tokens', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Unsuspend an app installation
		 * Removes a GitHub App installation suspension.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Delete app/installations/{installation_id}/suspended
		 * @param {number} installation_id The unique identifier of the installation.
		 * @return {void} 
		 */
		AppsSlashunsuspend_installation(installation_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'app/installations/' + installation_id + '/suspended', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Suspend an app installation
		 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Put app/installations/{installation_id}/suspended
		 * @param {number} installation_id The unique identifier of the installation.
		 * @return {void} 
		 */
		AppsSlashsuspend_installation(installation_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'app/installations/' + installation_id + '/suspended', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List your grants
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
		 * Get applications/grants
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {string} client_id The client ID of your GitHub app.
		 * @return {Array<Application_grant>} Response
		 */
		Oauth_authorizationsSlashlist_grants(per_page: number | null | undefined, page: number | null | undefined, client_id: string | null | undefined): Observable<Array<Application_grant>> {
			return this.http.get<Array<Application_grant>>(this.baseUri + 'applications/grants?per_page=' + per_page + '&page=' + page + '&client_id=' + (client_id == null ? '' : encodeURIComponent(client_id)), {});
		}

		/**
		 * Delete a grant
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
		 * Delete applications/grants/{grant_id}
		 * @param {number} grant_id The unique identifier of the grant.
		 * @return {void} 
		 */
		Oauth_authorizationsSlashdelete_grant(grant_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'applications/grants/' + grant_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a single grant
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * Get applications/grants/{grant_id}
		 * @param {number} grant_id The unique identifier of the grant.
		 * @return {Application_grant} Response
		 */
		Oauth_authorizationsSlashget_grant(grant_id: number): Observable<Application_grant> {
			return this.http.get<Application_grant>(this.baseUri + 'applications/grants/' + grant_id, {});
		}

		/**
		 * Delete an app authorization
		 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
		 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
		 * Delete applications/{client_id}/grant
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {void} 
		 */
		AppsSlashdelete_authorization(client_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/grant', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Revoke a grant for an application
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
		 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
		 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub Enterprise Server](https://github.com/settings/applications#authorized).
		 * Delete applications/{client_id}/grants/{access_token}
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {void} 
		 */
		AppsSlashrevoke_grant_for_application(client_id: string, access_token: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/grants/' + (access_token == null ? '' : encodeURIComponent(access_token)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete an app token
		 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
		 * Delete applications/{client_id}/token
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {void} 
		 */
		AppsSlashdelete_token(client_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/token', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Reset a token
		 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
		 * Patch applications/{client_id}/token
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Authorization} Response
		 */
		AppsSlashreset_token(client_id: string, requestBody: AppsSlashreset_tokenPatchBody): Observable<Authorization> {
			return this.http.patch<Authorization>(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/token', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Check a token
		 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
		 * Post applications/{client_id}/token
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Authorization} Response
		 */
		AppsSlashcheck_token(client_id: string, requestBody: AppsSlashcheck_tokenPostBody): Observable<Authorization> {
			return this.http.post<Authorization>(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/token', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a scoped access token
		 * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
		 * Post applications/{client_id}/token/scoped
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Authorization} Response
		 */
		AppsSlashscope_token(client_id: string, requestBody: AppsSlashscope_tokenPostBody): Observable<Authorization> {
			return this.http.post<Authorization>(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/token/scoped', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Revoke an authorization for an application
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
		 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
		 * Delete applications/{client_id}/tokens/{access_token}
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {void} 
		 */
		AppsSlashrevoke_authorization_for_application(client_id: string, access_token: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/tokens/' + (access_token == null ? '' : encodeURIComponent(access_token)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check an authorization
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
		 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
		 * Get applications/{client_id}/tokens/{access_token}
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Nullable_authorization} Response
		 */
		AppsSlashcheck_authorization(client_id: string, access_token: string): Observable<Nullable_authorization> {
			return this.http.get<Nullable_authorization>(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/tokens/' + (access_token == null ? '' : encodeURIComponent(access_token)), {});
		}

		/**
		 * Reset an authorization
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
		 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
		 * Post applications/{client_id}/tokens/{access_token}
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Authorization} Response
		 */
		AppsSlashreset_authorization(client_id: string, access_token: string): Observable<Authorization> {
			return this.http.post<Authorization>(this.baseUri + 'applications/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/tokens/' + (access_token == null ? '' : encodeURIComponent(access_token)), null, {});
		}

		/**
		 * Get an app
		 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
		 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
		 * Get apps/{app_slug}
		 * @return {Integration} Response
		 */
		AppsSlashget_by_slug(app_slug: string): Observable<Integration> {
			return this.http.get<Integration>(this.baseUri + 'apps/' + (app_slug == null ? '' : encodeURIComponent(app_slug)), {});
		}

		/**
		 * List your authorizations
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * Get authorizations
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {string} client_id The client ID of your GitHub app.
		 * @return {Array<Authorization>} Response
		 */
		Oauth_authorizationsSlashlist_authorizations(per_page: number | null | undefined, page: number | null | undefined, client_id: string | null | undefined): Observable<Array<Authorization>> {
			return this.http.get<Array<Authorization>>(this.baseUri + 'authorizations?per_page=' + per_page + '&page=' + page + '&client_id=' + (client_id == null ? '' : encodeURIComponent(client_id)), {});
		}

		/**
		 * Create a new authorization
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
		 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
		 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
		 * You can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
		 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
		 * Post authorizations
		 * @return {void} 
		 */
		Oauth_authorizationsSlashcreate_authorization(requestBody: Oauth_authorizationsSlashcreate_authorizationPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'authorizations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get-or-create an authorization for a specific app
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
		 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
		 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * Put authorizations/clients/{client_id}
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Authorization} if returning an existing token
		 */
		Oauth_authorizationsSlashget_or_create_authorization_for_app(client_id: string, requestBody: Oauth_authorizationsSlashget_or_create_authorization_for_appPutBody): Observable<Authorization> {
			return this.http.put<Authorization>(this.baseUri + 'authorizations/clients/' + (client_id == null ? '' : encodeURIComponent(client_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get-or-create an authorization for a specific app and fingerprint
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
		 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
		 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
		 * Put authorizations/clients/{client_id}/{fingerprint}
		 * @param {string} client_id The client ID of the GitHub app.
		 * @return {Authorization} if returning an existing token
		 */
		Oauth_authorizationsSlashget_or_create_authorization_for_app_and_fingerprint(client_id: string, fingerprint: string, requestBody: Oauth_authorizationsSlashget_or_create_authorization_for_app_and_fingerprintPutBody): Observable<Authorization> {
			return this.http.put<Authorization>(this.baseUri + 'authorizations/clients/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/' + (fingerprint == null ? '' : encodeURIComponent(fingerprint)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete an authorization
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * Delete authorizations/{authorization_id}
		 * @param {number} authorization_id The unique identifier of the authorization.
		 * @return {void} 
		 */
		Oauth_authorizationsSlashdelete_authorization(authorization_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'authorizations/' + authorization_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a single authorization
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * Get authorizations/{authorization_id}
		 * @param {number} authorization_id The unique identifier of the authorization.
		 * @return {Authorization} Response
		 */
		Oauth_authorizationsSlashget_authorization(authorization_id: number): Observable<Authorization> {
			return this.http.get<Authorization>(this.baseUri + 'authorizations/' + authorization_id, {});
		}

		/**
		 * Update an existing authorization
		 * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
		 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
		 * You can only send one of these scope keys at a time.
		 * Patch authorizations/{authorization_id}
		 * @param {number} authorization_id The unique identifier of the authorization.
		 * @return {Authorization} Response
		 */
		Oauth_authorizationsSlashupdate_authorization(authorization_id: number, requestBody: Oauth_authorizationsSlashupdate_authorizationPatchBody): Observable<Authorization> {
			return this.http.patch<Authorization>(this.baseUri + 'authorizations/' + authorization_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get all codes of conduct
		 * Get codes_of_conduct
		 * @return {Array<Code_of_conduct>} Response
		 */
		Codes_of_conductSlashget_all_codes_of_conduct(): Observable<Array<Code_of_conduct>> {
			return this.http.get<Array<Code_of_conduct>>(this.baseUri + 'codes_of_conduct', {});
		}

		/**
		 * Get a code of conduct
		 * Get codes_of_conduct/{key}
		 * @return {Code_of_conduct} Response
		 */
		Codes_of_conductSlashget_conduct_code(key: string): Observable<Code_of_conduct> {
			return this.http.get<Code_of_conduct>(this.baseUri + 'codes_of_conduct/' + (key == null ? '' : encodeURIComponent(key)), {});
		}

		/**
		 * Get emojis
		 * Lists all the emojis available to use on GitHub Enterprise Server.
		 * Get emojis
		 * @return {{[id: string]: string }} Response
		 */
		EmojisSlashget(): Observable<{[id: string]: string }> {
			return this.http.get<{[id: string]: string }>(this.baseUri + 'emojis', {});
		}

		/**
		 * Remove the global announcement banner
		 * Removes the global announcement banner in your enterprise.
		 * Delete enterprise/announcement
		 * @return {void} 
		 */
		Enterprise_adminSlashremove_announcement(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'enterprise/announcement', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the global announcement banner
		 * Gets the current message and expiration date of the global announcement banner in your enterprise.
		 * Get enterprise/announcement
		 * @return {Announcement} Response
		 */
		Enterprise_adminSlashget_announcement(): Observable<Announcement> {
			return this.http.get<Announcement>(this.baseUri + 'enterprise/announcement', {});
		}

		/**
		 * Set the global announcement banner
		 * Sets the message and expiration time for the global announcement banner in your enterprise.
		 * Patch enterprise/announcement
		 * @return {Announcement} Response
		 */
		Enterprise_adminSlashset_announcement(requestBody: Announcement): Observable<Announcement> {
			return this.http.patch<Announcement>(this.baseUri + 'enterprise/announcement', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get license information
		 * Get enterprise/settings/license
		 * @return {License_info} Response
		 */
		Enterprise_adminSlashget_license_information(): Observable<License_info> {
			return this.http.get<License_info>(this.baseUri + 'enterprise/settings/license', {});
		}

		/**
		 * Get all statistics
		 * Get enterprise/stats/all
		 * @return {Enterprise_overview} Response
		 */
		Enterprise_adminSlashget_all_stats(): Observable<Enterprise_overview> {
			return this.http.get<Enterprise_overview>(this.baseUri + 'enterprise/stats/all', {});
		}

		/**
		 * Get comment statistics
		 * Get enterprise/stats/comments
		 * @return {Enterprise_comment_overview} Response
		 */
		Enterprise_adminSlashget_comment_stats(): Observable<Enterprise_comment_overview> {
			return this.http.get<Enterprise_comment_overview>(this.baseUri + 'enterprise/stats/comments', {});
		}

		/**
		 * Get gist statistics
		 * Get enterprise/stats/gists
		 * @return {Enterprise_gist_overview} Response
		 */
		Enterprise_adminSlashget_gist_stats(): Observable<Enterprise_gist_overview> {
			return this.http.get<Enterprise_gist_overview>(this.baseUri + 'enterprise/stats/gists', {});
		}

		/**
		 * Get hooks statistics
		 * Get enterprise/stats/hooks
		 * @return {Enterprise_hook_overview} Response
		 */
		Enterprise_adminSlashget_hooks_stats(): Observable<Enterprise_hook_overview> {
			return this.http.get<Enterprise_hook_overview>(this.baseUri + 'enterprise/stats/hooks', {});
		}

		/**
		 * Get issue statistics
		 * Get enterprise/stats/issues
		 * @return {Enterprise_issue_overview} Response
		 */
		Enterprise_adminSlashget_issue_stats(): Observable<Enterprise_issue_overview> {
			return this.http.get<Enterprise_issue_overview>(this.baseUri + 'enterprise/stats/issues', {});
		}

		/**
		 * Get milestone statistics
		 * Get enterprise/stats/milestones
		 * @return {Enterprise_milestone_overview} Response
		 */
		Enterprise_adminSlashget_milestone_stats(): Observable<Enterprise_milestone_overview> {
			return this.http.get<Enterprise_milestone_overview>(this.baseUri + 'enterprise/stats/milestones', {});
		}

		/**
		 * Get organization statistics
		 * Get enterprise/stats/orgs
		 * @return {Enterprise_organization_overview} Response
		 */
		Enterprise_adminSlashget_org_stats(): Observable<Enterprise_organization_overview> {
			return this.http.get<Enterprise_organization_overview>(this.baseUri + 'enterprise/stats/orgs', {});
		}

		/**
		 * Get pages statistics
		 * Get enterprise/stats/pages
		 * @return {Enterprise_page_overview} Response
		 */
		Enterprise_adminSlashget_pages_stats(): Observable<Enterprise_page_overview> {
			return this.http.get<Enterprise_page_overview>(this.baseUri + 'enterprise/stats/pages', {});
		}

		/**
		 * Get pull request statistics
		 * Get enterprise/stats/pulls
		 * @return {Enterprise_pull_request_overview} Response
		 */
		Enterprise_adminSlashget_pull_request_stats(): Observable<Enterprise_pull_request_overview> {
			return this.http.get<Enterprise_pull_request_overview>(this.baseUri + 'enterprise/stats/pulls', {});
		}

		/**
		 * Get repository statistics
		 * Get enterprise/stats/repos
		 * @return {Enterprise_repository_overview} Response
		 */
		Enterprise_adminSlashget_repo_stats(): Observable<Enterprise_repository_overview> {
			return this.http.get<Enterprise_repository_overview>(this.baseUri + 'enterprise/stats/repos', {});
		}

		/**
		 * Get users statistics
		 * Get enterprise/stats/users
		 * @return {Enterprise_user_overview} Response
		 */
		Enterprise_adminSlashget_user_stats(): Observable<Enterprise_user_overview> {
			return this.http.get<Enterprise_user_overview>(this.baseUri + 'enterprise/stats/users', {});
		}

		/**
		 * Get GitHub Actions permissions for an enterprise
		 * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/permissions
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {Actions_enterprise_permissions} Response
		 */
		Enterprise_adminSlashget_github_actions_permissions_enterprise(enterprise: string): Observable<Actions_enterprise_permissions> {
			return this.http.get<Actions_enterprise_permissions>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions', {});
		}

		/**
		 * Set GitHub Actions permissions for an enterprise
		 * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/permissions
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {void} 
		 */
		Enterprise_adminSlashset_github_actions_permissions_enterprise(enterprise: string, requestBody: Enterprise_adminSlashset_github_actions_permissions_enterprisePutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List selected organizations enabled for GitHub Actions in an enterprise
		 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/permissions/organizations
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturn} Response
		 */
		Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterprise(enterprise: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturn> {
			return this.http.get<Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturn>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions/organizations&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Set selected organizations enabled for GitHub Actions in an enterprise
		 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/permissions/organizations
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {void} 
		 */
		Enterprise_adminSlashset_selected_organizations_enabled_github_actions_enterprise(enterprise: string, requestBody: Enterprise_adminSlashset_selected_organizations_enabled_github_actions_enterprisePutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions/organizations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Disable a selected organization for GitHub Actions in an enterprise
		 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Delete enterprises/{enterprise}/actions/permissions/organizations/{org_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} org_id The unique identifier of the organization.
		 * @return {void} 
		 */
		Enterprise_adminSlashdisable_selected_organization_github_actions_enterprise(enterprise: string, org_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions/organizations/' + org_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Enable a selected organization for GitHub Actions in an enterprise
		 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/permissions/organizations/{org_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} org_id The unique identifier of the organization.
		 * @return {void} 
		 */
		Enterprise_adminSlashenable_selected_organization_github_actions_enterprise(enterprise: string, org_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions/organizations/' + org_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get allowed actions for an enterprise
		 * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/permissions/selected-actions
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {Selected_actions} Response
		 */
		Enterprise_adminSlashget_allowed_actions_enterprise(enterprise: string): Observable<Selected_actions> {
			return this.http.get<Selected_actions>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions/selected-actions', {});
		}

		/**
		 * Set allowed actions for an enterprise
		 * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/permissions/selected-actions
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {void} 
		 */
		Enterprise_adminSlashset_allowed_actions_enterprise(enterprise: string, requestBody: Selected_actions): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/permissions/selected-actions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runner groups for an enterprise
		 * Lists all self-hosted runner groups for an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runner-groups
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturn} Response
		 */
		Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterprise(enterprise: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturn> {
			return this.http.get<Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturn>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a self-hosted runner group for an enterprise
		 * Creates a new self-hosted runner group for an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Post enterprises/{enterprise}/actions/runner-groups
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprise(enterprise: string, requestBody: Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a self-hosted runner group from an enterprise
		 * Deletes a self-hosted runner group for an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Delete enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_self_hosted_runner_group_from_enterprise(enterprise: string, runner_group_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a self-hosted runner group for an enterprise
		 * Gets a specific self-hosted runner group for an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {Runner_groups_enterprise} Response
		 */
		Enterprise_adminSlashget_self_hosted_runner_group_for_enterprise(enterprise: string, runner_group_id: number): Observable<Runner_groups_enterprise> {
			return this.http.get<Runner_groups_enterprise>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id, {});
		}

		/**
		 * Update a self-hosted runner group for an enterprise
		 * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Patch enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {Runner_groups_enterprise} Response
		 */
		Enterprise_adminSlashupdate_self_hosted_runner_group_for_enterprise(enterprise: string, runner_group_id: number, requestBody: Enterprise_adminSlashupdate_self_hosted_runner_group_for_enterprisePatchBody): Observable<Runner_groups_enterprise> {
			return this.http.patch<Runner_groups_enterprise>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List organization access to a self-hosted runner group in an enterprise
		 * Lists the organizations with access to a self-hosted runner group.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturn} Response
		 */
		Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterprise(enterprise: string, runner_group_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturn> {
			return this.http.get<Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturn>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/organizations&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Set organization access for a self-hosted runner group in an enterprise
		 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {void} 
		 */
		Enterprise_adminSlashset_org_access_to_self_hosted_runner_group_in_enterprise(enterprise: string, runner_group_id: number, requestBody: Enterprise_adminSlashset_org_access_to_self_hosted_runner_group_in_enterprisePutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/organizations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove organization access to a self-hosted runner group in an enterprise
		 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Delete enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} org_id The unique identifier of the organization.
		 * @return {void} 
		 */
		Enterprise_adminSlashremove_org_access_to_self_hosted_runner_group_in_enterprise(enterprise: string, runner_group_id: number, org_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/organizations/' + org_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add organization access to a self-hosted runner group in an enterprise
		 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} org_id The unique identifier of the organization.
		 * @return {void} 
		 */
		Enterprise_adminSlashadd_org_access_to_self_hosted_runner_group_in_enterprise(enterprise: string, runner_group_id: number, org_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/organizations/' + org_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runners in a group for an enterprise
		 * Lists the self-hosted runners that are in a specific enterprise group.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturn} Response
		 */
		Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterprise(enterprise: string, runner_group_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturn> {
			return this.http.get<Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturn>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/runners&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Set self-hosted runners in a group for an enterprise
		 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {void} 
		 */
		Enterprise_adminSlashset_self_hosted_runners_in_group_for_enterprise(enterprise: string, runner_group_id: number, requestBody: Enterprise_adminSlashset_self_hosted_runners_in_group_for_enterprisePutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/runners', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove a self-hosted runner from a group for an enterprise
		 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Delete enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		Enterprise_adminSlashremove_self_hosted_runner_from_group_for_enterprise(enterprise: string, runner_group_id: number, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/runners/' + runner_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add a self-hosted runner to a group for an enterprise
		 * Adds a self-hosted runner to a runner group configured in an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise`
		 * scope to use this endpoint.
		 * Put enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		Enterprise_adminSlashadd_self_hosted_runner_to_group_for_enterprise(enterprise: string, runner_group_id: number, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runner-groups/' + runner_group_id + '/runners/' + runner_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runners for an enterprise
		 * Lists all self-hosted runners configured for an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runners
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Enterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturn} Response
		 */
		Enterprise_adminSlashlist_self_hosted_runners_for_enterprise(enterprise: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Enterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturn> {
			return this.http.get<Enterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturn>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runners&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List runner applications for an enterprise
		 * Lists binaries for the runner application that you can download and run.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runners/downloads
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {Array<Runner_application>} Response
		 */
		Enterprise_adminSlashlist_runner_applications_for_enterprise(enterprise: string): Observable<Array<Runner_application>> {
			return this.http.get<Array<Runner_application>>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runners/downloads', {});
		}

		/**
		 * Create a registration token for an enterprise
		 * Returns a token that you can pass to the `config` script. The token expires after one hour.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * #### Example using registration token
		 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
		 * ```
		 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
		 * ```
		 * Post enterprises/{enterprise}/actions/runners/registration-token
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_registration_token_for_enterprise(enterprise: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runners/registration-token', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a remove token for an enterprise
		 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * #### Example using remove token
		 * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
		 * endpoint.
		 * ```
		 * ./config.sh remove --token TOKEN
		 * ```
		 * Post enterprises/{enterprise}/actions/runners/remove-token
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @return {void} 
		 */
		Enterprise_adminSlashcreate_remove_token_for_enterprise(enterprise: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runners/remove-token', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a self-hosted runner from an enterprise
		 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Delete enterprises/{enterprise}/actions/runners/{runner_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		Enterprise_adminSlashdelete_self_hosted_runner_from_enterprise(enterprise: string, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runners/' + runner_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a self-hosted runner for an enterprise
		 * Gets a specific self-hosted runner configured in an enterprise.
		 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
		 * Get enterprises/{enterprise}/actions/runners/{runner_id}
		 * @param {string} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {Runner} Response
		 */
		Enterprise_adminSlashget_self_hosted_runner_for_enterprise(enterprise: string, runner_id: number): Observable<Runner> {
			return this.http.get<Runner>(this.baseUri + 'enterprises/' + (enterprise == null ? '' : encodeURIComponent(enterprise)) + '/actions/runners/' + runner_id, {});
		}

		/**
		 * List public events
		 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
		 * Get events
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_public_events(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'events?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get feeds
		 * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
		 * *   **Timeline**: The GitHub Enterprise Server global public timeline
		 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia)
		 * *   **Current user public**: The public timeline for the authenticated user
		 * *   **Current user**: The private timeline for the authenticated user
		 * *   **Current user actor**: The private timeline for activity created by the authenticated user
		 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
		 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.
		 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
		 * Get feeds
		 * @return {Feed} Response
		 */
		ActivitySlashget_feeds(): Observable<Feed> {
			return this.http.get<Feed>(this.baseUri + 'feeds', {});
		}

		/**
		 * List gists for the authenticated user
		 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
		 * Get gists
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Base_gist>} Response
		 */
		GistsSlashlist(since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Base_gist>> {
			return this.http.get<Array<Base_gist>>(this.baseUri + 'gists?since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a gist
		 * Allows you to add a new gist with one or more files.
		 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
		 * Post gists
		 * @return {void} 
		 */
		GistsSlashcreate(requestBody: GistsSlashcreatePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'gists', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List public gists
		 * List public gists sorted by most recently updated to least recently updated.
		 * Note: With [pagination](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
		 * Get gists/public
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Base_gist>} Response
		 */
		GistsSlashlist_public(since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Base_gist>> {
			return this.http.get<Array<Base_gist>>(this.baseUri + 'gists/public?since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List starred gists
		 * List the authenticated user's starred gists:
		 * Get gists/starred
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Base_gist>} Response
		 */
		GistsSlashlist_starred(since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Base_gist>> {
			return this.http.get<Array<Base_gist>>(this.baseUri + 'gists/starred?since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a gist
		 * Delete gists/{gist_id}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {void} 
		 */
		GistsSlashdelete(gist_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a gist
		 * Get gists/{gist_id}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {Gist_simple} Response
		 */
		GistsSlashget(gist_id: string): Observable<Gist_simple> {
			return this.http.get<Gist_simple>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)), {});
		}

		/**
		 * Update a gist
		 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
		 * Patch gists/{gist_id}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {Gist_simple} Response
		 */
		GistsSlashupdate(gist_id: string, requestBody: GistsSlashupdatePatchBody): Observable<Gist_simple> {
			return this.http.patch<Gist_simple>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List gist comments
		 * Get gists/{gist_id}/comments
		 * @param {string} gist_id The unique identifier of the gist.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Gist_comment>} Response
		 */
		GistsSlashlist_comments(gist_id: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Gist_comment>> {
			return this.http.get<Array<Gist_comment>>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/comments&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a gist comment
		 * Post gists/{gist_id}/comments
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {void} 
		 */
		GistsSlashcreate_comment(gist_id: string, requestBody: GistsSlashcreate_commentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/comments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a gist comment
		 * Delete gists/{gist_id}/comments/{comment_id}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {void} 
		 */
		GistsSlashdelete_comment(gist_id: string, comment_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/comments/' + comment_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a gist comment
		 * Get gists/{gist_id}/comments/{comment_id}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Gist_comment} Response
		 */
		GistsSlashget_comment(gist_id: string, comment_id: number): Observable<Gist_comment> {
			return this.http.get<Gist_comment>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/comments/' + comment_id, {});
		}

		/**
		 * Update a gist comment
		 * Patch gists/{gist_id}/comments/{comment_id}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Gist_comment} Response
		 */
		GistsSlashupdate_comment(gist_id: string, comment_id: number, requestBody: GistsSlashupdate_commentPatchBody): Observable<Gist_comment> {
			return this.http.patch<Gist_comment>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/comments/' + comment_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List gist commits
		 * Get gists/{gist_id}/commits
		 * @param {string} gist_id The unique identifier of the gist.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Gist_commit>} Response
		 */
		GistsSlashlist_commits(gist_id: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Gist_commit>> {
			return this.http.get<Array<Gist_commit>>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/commits&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List gist forks
		 * Get gists/{gist_id}/forks
		 * @param {string} gist_id The unique identifier of the gist.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Gist_simple>} Response
		 */
		GistsSlashlist_forks(gist_id: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Gist_simple>> {
			return this.http.get<Array<Gist_simple>>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/forks&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Fork a gist
		 * **Note**: This was previously `/gists/:gist_id/fork`.
		 * Post gists/{gist_id}/forks
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {void} 
		 */
		GistsSlashfork(gist_id: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/forks', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Unstar a gist
		 * Delete gists/{gist_id}/star
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {void} 
		 */
		GistsSlashunstar(gist_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/star', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check if a gist is starred
		 * Get gists/{gist_id}/star
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {void} 
		 */
		GistsSlashcheck_is_starred(gist_id: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/star', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Star a gist
		 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put gists/{gist_id}/star
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {void} 
		 */
		GistsSlashstar(gist_id: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/star', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a gist revision
		 * Get gists/{gist_id}/{sha}
		 * @param {string} gist_id The unique identifier of the gist.
		 * @return {Gist_simple} Response
		 */
		GistsSlashget_revision(gist_id: string, sha: string): Observable<Gist_simple> {
			return this.http.get<Gist_simple>(this.baseUri + 'gists/' + (gist_id == null ? '' : encodeURIComponent(gist_id)) + '/' + (sha == null ? '' : encodeURIComponent(sha)), {});
		}

		/**
		 * Get all gitignore templates
		 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-for-the-authenticated-user).
		 * Get gitignore/templates
		 * @return {Array<string>} Response
		 */
		GitignoreSlashget_all_templates(): Observable<Array<string>> {
			return this.http.get<Array<string>>(this.baseUri + 'gitignore/templates', {});
		}

		/**
		 * Get a gitignore template
		 * The API also allows fetching the source of a single template.
		 * Use the raw [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) to get the raw contents.
		 * Get gitignore/templates/{name}
		 * @return {Gitignore_template} Response
		 */
		GitignoreSlashget_template(name: string): Observable<Gitignore_template> {
			return this.http.get<Gitignore_template>(this.baseUri + 'gitignore/templates/' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * List repositories accessible to the app installation
		 * List repositories that an app installation can access.
		 * You must use an [installation access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
		 * Get installation/repositories
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {AppsSlashlist_repos_accessible_to_installationReturn} Response
		 */
		AppsSlashlist_repos_accessible_to_installation(per_page: number | null | undefined, page: number | null | undefined): Observable<AppsSlashlist_repos_accessible_to_installationReturn> {
			return this.http.get<AppsSlashlist_repos_accessible_to_installationReturn>(this.baseUri + 'installation/repositories?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Revoke an installation access token
		 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
		 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.1/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
		 * You must use an [installation access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
		 * Delete installation/token
		 * @return {void} 
		 */
		AppsSlashrevoke_installation_access_token(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'installation/token', { observe: 'response', responseType: 'text' });
		}

		/**
		 * List issues assigned to the authenticated user
		 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
		 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
		 * necessarily assigned to you.
		 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
		 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
		 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
		 * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)" endpoint.
		 * Get issues
		 * @param {IssuesSlashlistFilter} filter Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
		 * @param {IssuesSlashlistState} state Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
		 * @param {string} labels A list of comma separated label names. Example: `bug,ui,@high`
		 * @param {IssuesSlashlistSort} sort What to sort results by. Can be either `created`, `updated`, `comments`.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue>} Response
		 */
		IssuesSlashlist(filter: IssuesSlashlistFilter | null | undefined, state: IssuesSlashlistState | null | undefined, labels: string | null | undefined, sort: IssuesSlashlistSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, collab: boolean | null | undefined, orgs: boolean | null | undefined, owned: boolean | null | undefined, pulls: boolean | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue>> {
			return this.http.get<Array<Issue>>(this.baseUri + 'issues?filter=' + filter + '&state=' + state + '&labels=' + (labels == null ? '' : encodeURIComponent(labels)) + '&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&collab=' + collab + '&orgs=' + orgs + '&owned=' + owned + '&pulls=' + pulls + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get all commonly used licenses
		 * Get licenses
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<License_simple>} Response
		 */
		LicensesSlashget_all_commonly_used(featured: boolean | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<License_simple>> {
			return this.http.get<Array<License_simple>>(this.baseUri + 'licenses?featured=' + featured + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get a license
		 * Get licenses/{license}
		 * @return {License} Response
		 */
		LicensesSlashget(license: string): Observable<License> {
			return this.http.get<License>(this.baseUri + 'licenses/' + (license == null ? '' : encodeURIComponent(license)), {});
		}

		/**
		 * Render a Markdown document
		 * Post markdown
		 * @return {void} Response
		 */
		MarkdownSlashrender(requestBody: MarkdownSlashrenderPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'markdown', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get GitHub Enterprise Server meta information
		 * Get meta
		 * @return {Api_overview} Response
		 */
		MetaSlashget(): Observable<Api_overview> {
			return this.http.get<Api_overview>(this.baseUri + 'meta', {});
		}

		/**
		 * List public events for a network of repositories
		 * Get networks/{owner}/{repo}/events
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_public_events_for_repo_network(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'networks/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List notifications for the authenticated user
		 * List all notifications for the current user, sorted by most recently updated.
		 * Get notifications
		 * @param {boolean} all If `true`, show notifications marked as read.
		 * @param {boolean} participating If `true`, only shows notifications in which the user is directly participating or mentioned.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {Date} before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Thread>} Response
		 */
		ActivitySlashlist_notifications_for_authenticated_user(all: boolean | null | undefined, participating: boolean | null | undefined, since: Date | null | undefined, before: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Thread>> {
			return this.http.get<Array<Thread>>(this.baseUri + 'notifications?all=' + all + '&participating=' + participating + '&since=' + since?.toISOString() + '&before=' + before?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Mark notifications as read
		 * Marks all notifications as "read" removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
		 * Put notifications
		 * @return {void} 
		 */
		ActivitySlashmark_notifications_as_read(requestBody: ActivitySlashmark_notifications_as_readPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'notifications', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a thread
		 * Get notifications/threads/{thread_id}
		 * @param {number} thread_id The unique identifier of the pull request thread.
		 * @return {Thread} Response
		 */
		ActivitySlashget_thread(thread_id: number): Observable<Thread> {
			return this.http.get<Thread>(this.baseUri + 'notifications/threads/' + thread_id, {});
		}

		/**
		 * Mark a thread as read
		 * Patch notifications/threads/{thread_id}
		 * @param {number} thread_id The unique identifier of the pull request thread.
		 * @return {void} 
		 */
		ActivitySlashmark_thread_as_read(thread_id: number): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + 'notifications/threads/' + thread_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a thread subscription
		 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
		 * Delete notifications/threads/{thread_id}/subscription
		 * @param {number} thread_id The unique identifier of the pull request thread.
		 * @return {void} 
		 */
		ActivitySlashdelete_thread_subscription(thread_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'notifications/threads/' + thread_id + '/subscription', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a thread subscription for the authenticated user
		 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#get-a-repository-subscription).
		 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
		 * Get notifications/threads/{thread_id}/subscription
		 * @param {number} thread_id The unique identifier of the pull request thread.
		 * @return {Thread_subscription} Response
		 */
		ActivitySlashget_thread_subscription_for_authenticated_user(thread_id: number): Observable<Thread_subscription> {
			return this.http.get<Thread_subscription>(this.baseUri + 'notifications/threads/' + thread_id + '/subscription', {});
		}

		/**
		 * Set a thread subscription
		 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
		 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
		 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#delete-a-thread-subscription) endpoint.
		 * Put notifications/threads/{thread_id}/subscription
		 * @param {number} thread_id The unique identifier of the pull request thread.
		 * @return {Thread_subscription} Response
		 */
		ActivitySlashset_thread_subscription(thread_id: number, requestBody: ActivitySlashset_thread_subscriptionPutBody): Observable<Thread_subscription> {
			return this.http.put<Thread_subscription>(this.baseUri + 'notifications/threads/' + thread_id + '/subscription', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Octocat
		 * Get the octocat as ASCII art
		 * Get octocat
		 * @param {string} s The words to show in Octocat's speech bubble
		 * @return {void} Response
		 */
		MetaSlashget_octocat(s: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'octocat?s=' + (s == null ? '' : encodeURIComponent(s)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * List organizations
		 * Lists all organizations, in the order that they were created on GitHub Enterprise Server.
		 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
		 * Get organizations
		 * @param {number} since An organization ID. Only return organizations with an ID greater than this ID.
		 * @param {number} per_page The number of results per page (max 100).
		 * @return {Array<Organization_simple>} Response
		 */
		OrgsSlashlist(since: number | null | undefined, per_page: number | null | undefined): Observable<Array<Organization_simple>> {
			return this.http.get<Array<Organization_simple>>(this.baseUri + 'organizations?since=' + since + '&per_page=' + per_page, {});
		}

		/**
		 * Get an organization
		 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
		 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below."
		 * Get orgs/{org}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Organization_full} Response
		 */
		OrgsSlashget(org: string): Observable<Organization_full> {
			return this.http.get<Organization_full>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)), {});
		}

		/**
		 * Update an organization
		 * **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
		 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
		 * Patch orgs/{org}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Organization_full} Response
		 */
		OrgsSlashupdate(org: string, requestBody: OrgsSlashupdatePatchBody): Observable<Organization_full> {
			return this.http.patch<Organization_full>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get GitHub Actions permissions for an organization
		 * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Get orgs/{org}/actions/permissions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Actions_organization_permissions} Response
		 */
		ActionsSlashget_github_actions_permissions_organization(org: string): Observable<Actions_organization_permissions> {
			return this.http.get<Actions_organization_permissions>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions', {});
		}

		/**
		 * Set GitHub Actions permissions for an organization
		 * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
		 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Put orgs/{org}/actions/permissions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashset_github_actions_permissions_organization(org: string, requestBody: ActionsSlashset_github_actions_permissions_organizationPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List selected repositories enabled for GitHub Actions in an organization
		 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Get orgs/{org}/actions/permissions/repositories
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturn} Response
		 */
		ActionsSlashlist_selected_repositories_enabled_github_actions_organization(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturn> {
			return this.http.get<ActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions/repositories&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Set selected repositories enabled for GitHub Actions in an organization
		 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Put orgs/{org}/actions/permissions/repositories
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashset_selected_repositories_enabled_github_actions_organization(org: string, requestBody: ActionsSlashset_selected_repositories_enabled_github_actions_organizationPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions/repositories', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Disable a selected repository for GitHub Actions in an organization
		 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Delete orgs/{org}/actions/permissions/repositories/{repository_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} repository_id The unique identifier of the repository.
		 * @return {void} 
		 */
		ActionsSlashdisable_selected_repository_github_actions_organization(org: string, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions/repositories/' + repository_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Enable a selected repository for GitHub Actions in an organization
		 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Put orgs/{org}/actions/permissions/repositories/{repository_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} repository_id The unique identifier of the repository.
		 * @return {void} 
		 */
		ActionsSlashenable_selected_repository_github_actions_organization(org: string, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions/repositories/' + repository_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get allowed actions for an organization
		 * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Get orgs/{org}/actions/permissions/selected-actions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Selected_actions} Response
		 */
		ActionsSlashget_allowed_actions_organization(org: string): Observable<Selected_actions> {
			return this.http.get<Selected_actions>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions/selected-actions', {});
		}

		/**
		 * Set allowed actions for an organization
		 * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
		 * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
		 * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
		 * Put orgs/{org}/actions/permissions/selected-actions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashset_allowed_actions_organization(org: string, requestBody: Selected_actions): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/permissions/selected-actions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runner groups for an organization
		 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runner-groups
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_self_hosted_runner_groups_for_orgReturn} Response
		 */
		ActionsSlashlist_self_hosted_runner_groups_for_org(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_self_hosted_runner_groups_for_orgReturn> {
			return this.http.get<ActionsSlashlist_self_hosted_runner_groups_for_orgReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a self-hosted runner group for an organization
		 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
		 * Creates a new self-hosted runner group for an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Post orgs/{org}/actions/runner-groups
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashcreate_self_hosted_runner_group_for_org(org: string, requestBody: ActionsSlashcreate_self_hosted_runner_group_for_orgPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a self-hosted runner group from an organization
		 * Deletes a self-hosted runner group for an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Delete orgs/{org}/actions/runner-groups/{runner_group_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {void} 
		 */
		ActionsSlashdelete_self_hosted_runner_group_from_org(org: string, runner_group_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a self-hosted runner group for an organization
		 * Gets a specific self-hosted runner group for an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runner-groups/{runner_group_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {Runner_groups_org} Response
		 */
		ActionsSlashget_self_hosted_runner_group_for_org(org: string, runner_group_id: number): Observable<Runner_groups_org> {
			return this.http.get<Runner_groups_org>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id, {});
		}

		/**
		 * Update a self-hosted runner group for an organization
		 * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Patch orgs/{org}/actions/runner-groups/{runner_group_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {Runner_groups_org} Response
		 */
		ActionsSlashupdate_self_hosted_runner_group_for_org(org: string, runner_group_id: number, requestBody: ActionsSlashupdate_self_hosted_runner_group_for_orgPatchBody): Observable<Runner_groups_org> {
			return this.http.patch<Runner_groups_org>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List repository access to a self-hosted runner group in an organization
		 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
		 * Lists the repositories with access to a self-hosted runner group configured in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @return {ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturn} Response
		 */
		ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_org(org: string, runner_group_id: number, page: number | null | undefined, per_page: number | null | undefined): Observable<ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturn> {
			return this.http.get<ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/repositories&page=' + page + '&per_page=' + per_page, {});
		}

		/**
		 * Set repository access for a self-hosted runner group in an organization
		 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Put orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {void} 
		 */
		ActionsSlashset_repo_access_to_self_hosted_runner_group_in_org(org: string, runner_group_id: number, requestBody: ActionsSlashset_repo_access_to_self_hosted_runner_group_in_orgPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/repositories', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove repository access to a self-hosted runner group in an organization
		 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Delete orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} repository_id The unique identifier of the repository.
		 * @return {void} 
		 */
		ActionsSlashremove_repo_access_to_self_hosted_runner_group_in_org(org: string, runner_group_id: number, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/repositories/' + repository_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add repository access to a self-hosted runner group in an organization
		 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Put orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} repository_id The unique identifier of the repository.
		 * @return {void} 
		 */
		ActionsSlashadd_repo_access_to_self_hosted_runner_group_in_org(org: string, runner_group_id: number, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/repositories/' + repository_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runners in a group for an organization
		 * Lists self-hosted runners that are in a specific organization group.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runner-groups/{runner_group_id}/runners
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_self_hosted_runners_in_group_for_orgReturn} Response
		 */
		ActionsSlashlist_self_hosted_runners_in_group_for_org(org: string, runner_group_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_self_hosted_runners_in_group_for_orgReturn> {
			return this.http.get<ActionsSlashlist_self_hosted_runners_in_group_for_orgReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/runners&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Set self-hosted runners in a group for an organization
		 * Replaces the list of self-hosted runners that are part of an organization runner group.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Put orgs/{org}/actions/runner-groups/{runner_group_id}/runners
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @return {void} 
		 */
		ActionsSlashset_self_hosted_runners_in_group_for_org(org: string, runner_group_id: number, requestBody: ActionsSlashset_self_hosted_runners_in_group_for_orgPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/runners', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove a self-hosted runner from a group for an organization
		 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Delete orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		ActionsSlashremove_self_hosted_runner_from_group_for_org(org: string, runner_group_id: number, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/runners/' + runner_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add a self-hosted runner to a group for an organization
		 * Adds a self-hosted runner to a runner group configured in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Put orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_group_id Unique identifier of the self-hosted runner group.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		ActionsSlashadd_self_hosted_runner_to_group_for_org(org: string, runner_group_id: number, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runner-groups/' + runner_group_id + '/runners/' + runner_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runners for an organization
		 * Lists all self-hosted runners configured in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runners
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_self_hosted_runners_for_orgReturn} Response
		 */
		ActionsSlashlist_self_hosted_runners_for_org(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_self_hosted_runners_for_orgReturn> {
			return this.http.get<ActionsSlashlist_self_hosted_runners_for_orgReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runners&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List runner applications for an organization
		 * Lists binaries for the runner application that you can download and run.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runners/downloads
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Array<Runner_application>} Response
		 */
		ActionsSlashlist_runner_applications_for_org(org: string): Observable<Array<Runner_application>> {
			return this.http.get<Array<Runner_application>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runners/downloads', {});
		}

		/**
		 * Create a registration token for an organization
		 * Returns a token that you can pass to the `config` script. The token expires after one hour.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * #### Example using registration token
		 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
		 * ```
		 * ./config.sh --url https://github.com/octo-org --token TOKEN
		 * ```
		 * Post orgs/{org}/actions/runners/registration-token
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashcreate_registration_token_for_org(org: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runners/registration-token', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a remove token for an organization
		 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * #### Example using remove token
		 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
		 * endpoint.
		 * ```
		 * ./config.sh remove --token TOKEN
		 * ```
		 * Post orgs/{org}/actions/runners/remove-token
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashcreate_remove_token_for_org(org: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runners/remove-token', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a self-hosted runner from an organization
		 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Delete orgs/{org}/actions/runners/{runner_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		ActionsSlashdelete_self_hosted_runner_from_org(org: string, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runners/' + runner_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a self-hosted runner for an organization
		 * Gets a specific self-hosted runner configured in an organization.
		 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
		 * Get orgs/{org}/actions/runners/{runner_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {Runner} Response
		 */
		ActionsSlashget_self_hosted_runner_for_org(org: string, runner_id: number): Observable<Runner> {
			return this.http.get<Runner>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/runners/' + runner_id, {});
		}

		/**
		 * List organization secrets
		 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Get orgs/{org}/actions/secrets
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_org_secretsReturn} Response
		 */
		ActionsSlashlist_org_secrets(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_org_secretsReturn> {
			return this.http.get<ActionsSlashlist_org_secretsReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get an organization public key
		 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Get orgs/{org}/actions/secrets/public-key
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Actions_public_key} Response
		 */
		ActionsSlashget_org_public_key(org: string): Observable<Actions_public_key> {
			return this.http.get<Actions_public_key>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/public-key', {});
		}

		/**
		 * Delete an organization secret
		 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Delete orgs/{org}/actions/secrets/{secret_name}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashdelete_org_secret(org: string, secret_name: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get an organization secret
		 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Get orgs/{org}/actions/secrets/{secret_name}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {Organization_actions_secret} Response
		 */
		ActionsSlashget_org_secret(org: string, secret_name: string): Observable<Organization_actions_secret> {
			return this.http.get<Organization_actions_secret>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)), {});
		}

		/**
		 * Create or update an organization secret
		 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
		 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
		 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
		 * use this endpoint.
		 * #### Example encrypting a secret using Node.js
		 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
		 * ```
		 * const sodium = require('tweetsodium');
		 * const key = "base64-encoded-public-key";
		 * const value = "plain-text-secret";
		 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
		 * const messageBytes = Buffer.from(value);
		 * const keyBytes = Buffer.from(key, 'base64');
		 * // Encrypt using LibSodium.
		 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
		 * // Base64 the encrypted secret
		 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
		 * console.log(encrypted);
		 * ```
		 * #### Example encrypting a secret using Python
		 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
		 * ```
		 * from base64 import b64encode
		 * from nacl import encoding, public
		 * def encrypt(public_key: str, secret_value: str) -> str:
		 * """Encrypt a Unicode string using the public key."""
		 * public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
		 * sealed_box = public.SealedBox(public_key)
		 * encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
		 * return b64encode(encrypted).decode("utf-8")
		 * ```
		 * #### Example encrypting a secret using C#
		 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
		 * ```
		 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
		 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
		 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
		 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
		 * ```
		 * #### Example encrypting a secret using Ruby
		 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
		 * ```ruby
		 * require "rbnacl"
		 * require "base64"
		 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
		 * public_key = RbNaCl::PublicKey.new(key)
		 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
		 * encrypted_secret = box.encrypt("my_secret")
		 * # Print the base64 encoded secret
		 * puts Base64.strict_encode64(encrypted_secret)
		 * ```
		 * Put orgs/{org}/actions/secrets/{secret_name}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashcreate_or_update_org_secret(org: string, secret_name: string, requestBody: ActionsSlashcreate_or_update_org_secretPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List selected repositories for an organization secret
		 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Get orgs/{org}/actions/secrets/{secret_name}/repositories
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @return {ActionsSlashlist_selected_repos_for_org_secretReturn} Response
		 */
		ActionsSlashlist_selected_repos_for_org_secret(org: string, secret_name: string, page: number | null | undefined, per_page: number | null | undefined): Observable<ActionsSlashlist_selected_repos_for_org_secretReturn> {
			return this.http.get<ActionsSlashlist_selected_repos_for_org_secretReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)) + '/repositories&page=' + page + '&per_page=' + per_page, {});
		}

		/**
		 * Set selected repositories for an organization secret
		 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Put orgs/{org}/actions/secrets/{secret_name}/repositories
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashset_selected_repos_for_org_secret(org: string, secret_name: string, requestBody: ActionsSlashset_selected_repos_for_org_secretPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)) + '/repositories', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove selected repository from an organization secret
		 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Delete orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashremove_selected_repo_from_org_secret(org: string, secret_name: string, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)) + '/repositories/' + repository_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add selected repository to an organization secret
		 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
		 * Put orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashadd_selected_repo_to_org_secret(org: string, secret_name: string, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)) + '/repositories/' + repository_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List public organization events
		 * Get orgs/{org}/events
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_public_org_events(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List organization webhooks
		 * Get orgs/{org}/hooks
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Org_hook>} Response
		 */
		OrgsSlashlist_webhooks(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Org_hook>> {
			return this.http.get<Array<Org_hook>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create an organization webhook
		 * Here's how you can create a hook that posts payloads in JSON format:
		 * Post orgs/{org}/hooks
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		OrgsSlashcreate_webhook(org: string, requestBody: OrgsSlashcreate_webhookPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete an organization webhook
		 * Delete orgs/{org}/hooks/{hook_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		OrgsSlashdelete_webhook(org: string, hook_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks/' + hook_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get an organization webhook
		 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
		 * Get orgs/{org}/hooks/{hook_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Org_hook} Response
		 */
		OrgsSlashget_webhook(org: string, hook_id: number): Observable<Org_hook> {
			return this.http.get<Org_hook>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks/' + hook_id, {});
		}

		/**
		 * Update an organization webhook
		 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
		 * Patch orgs/{org}/hooks/{hook_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Org_hook} Response
		 */
		OrgsSlashupdate_webhook(org: string, hook_id: number, requestBody: OrgsSlashupdate_webhookPatchBody): Observable<Org_hook> {
			return this.http.patch<Org_hook>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks/' + hook_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get a webhook configuration for an organization
		 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
		 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
		 * Get orgs/{org}/hooks/{hook_id}/config
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Webhook_config} Response
		 */
		OrgsSlashget_webhook_config_for_org(org: string, hook_id: number): Observable<Webhook_config> {
			return this.http.get<Webhook_config>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks/' + hook_id + '/config', {});
		}

		/**
		 * Update a webhook configuration for an organization
		 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
		 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
		 * Patch orgs/{org}/hooks/{hook_id}/config
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Webhook_config} Response
		 */
		OrgsSlashupdate_webhook_config_for_org(org: string, hook_id: number, requestBody: OrgsSlashupdate_webhook_config_for_orgPatchBody): Observable<Webhook_config> {
			return this.http.patch<Webhook_config>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks/' + hook_id + '/config', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Ping an organization webhook
		 * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.1/webhooks/#ping-event) to be sent to the hook.
		 * Post orgs/{org}/hooks/{hook_id}/pings
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		OrgsSlashping_webhook(org: string, hook_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/hooks/' + hook_id + '/pings', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get an organization installation for the authenticated app
		 * Enables an authenticated GitHub App to find the organization's installation information.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Get orgs/{org}/installation
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Installation} Response
		 */
		AppsSlashget_org_installation(org: string): Observable<Installation> {
			return this.http.get<Installation>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/installation', {});
		}

		/**
		 * List app installations for an organization
		 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
		 * Get orgs/{org}/installations
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {OrgsSlashlist_app_installationsReturn} Response
		 */
		OrgsSlashlist_app_installations(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<OrgsSlashlist_app_installationsReturn> {
			return this.http.get<OrgsSlashlist_app_installationsReturn>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/installations&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List organization issues assigned to the authenticated user
		 * List issues in an organization assigned to the authenticated user.
		 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
		 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
		 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
		 * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)" endpoint.
		 * Get orgs/{org}/issues
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {IssuesSlashlistFilter} filter Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
		 * @param {IssuesSlashlistState} state Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
		 * @param {string} labels A list of comma separated label names. Example: `bug,ui,@high`
		 * @param {IssuesSlashlistSort} sort What to sort results by. Can be either `created`, `updated`, `comments`.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue>} Response
		 */
		IssuesSlashlist_for_org(org: string, filter: IssuesSlashlistFilter | null | undefined, state: IssuesSlashlistState | null | undefined, labels: string | null | undefined, sort: IssuesSlashlistSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue>> {
			return this.http.get<Array<Issue>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/issues&filter=' + filter + '&state=' + state + '&labels=' + (labels == null ? '' : encodeURIComponent(labels)) + '&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List organization members
		 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
		 * Get orgs/{org}/members
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {OrgsSlashlist_membersFilter} filter Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
		 * @param {OrgsSlashlist_membersRole} role Filter members returned by their role.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		OrgsSlashlist_members(org: string, filter: OrgsSlashlist_membersFilter | null | undefined, role: OrgsSlashlist_membersRole | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/members&filter=' + filter + '&role=' + role + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove an organization member
		 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
		 * Delete orgs/{org}/members/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashremove_member(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/members/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check organization membership for a user
		 * Check if a user is, publicly or privately, a member of the organization.
		 * Get orgs/{org}/members/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashcheck_membership_for_user(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/members/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove organization membership for a user
		 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
		 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
		 * Delete orgs/{org}/memberships/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashremove_membership_for_user(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get organization membership for a user
		 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
		 * Get orgs/{org}/memberships/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Org_membership} Response
		 */
		OrgsSlashget_membership_for_user(org: string, username: string): Observable<Org_membership> {
			return this.http.get<Org_membership>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), {});
		}

		/**
		 * Set organization membership for a user
		 * Only authenticated organization owners can add a member to the organization or update the member's role.
		 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
		 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
		 * **Rate limits**
		 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
		 * Put orgs/{org}/memberships/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Org_membership} Response
		 */
		OrgsSlashset_membership_for_user(org: string, username: string, requestBody: OrgsSlashset_membership_for_userPutBody): Observable<Org_membership> {
			return this.http.put<Org_membership>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List outside collaborators for an organization
		 * List all users who are outside collaborators of an organization.
		 * Get orgs/{org}/outside_collaborators
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {OrgsSlashlist_membersFilter} filter Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		OrgsSlashlist_outside_collaborators(org: string, filter: OrgsSlashlist_membersFilter | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/outside_collaborators&filter=' + filter + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove outside collaborator from an organization
		 * Removing a user from this list will remove them from all the organization's repositories.
		 * Delete orgs/{org}/outside_collaborators/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashremove_outside_collaborator(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/outside_collaborators/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Convert an organization member to outside collaborator
		 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/enterprise-server@3.1/articles/converting-an-organization-member-to-an-outside-collaborator/)".
		 * Put orgs/{org}/outside_collaborators/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashconvert_member_to_outside_collaborator(org: string, username: string, requestBody: OrgsSlashconvert_member_to_outside_collaboratorPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/outside_collaborators/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List pre-receive hooks for an organization
		 * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
		 * Get orgs/{org}/pre-receive-hooks
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {Enterprise_adminSlashlist_pre_receive_environmentsSort} sort The sort order for the response collection.
		 * @return {Array<Org_pre_receive_hook>} Response
		 */
		Enterprise_adminSlashlist_pre_receive_hooks_for_org(org: string, per_page: number | null | undefined, page: number | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, sort: Enterprise_adminSlashlist_pre_receive_environmentsSort | null | undefined): Observable<Array<Org_pre_receive_hook>> {
			return this.http.get<Array<Org_pre_receive_hook>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/pre-receive-hooks&per_page=' + per_page + '&page=' + page + '&direction=' + direction + '&sort=' + sort, {});
		}

		/**
		 * Remove pre-receive hook enforcement for an organization
		 * Removes any overrides for this hook at the org level for this org.
		 * Delete orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Org_pre_receive_hook} Response
		 */
		Enterprise_adminSlashremove_pre_receive_hook_enforcement_for_org(org: string, pre_receive_hook_id: number): Observable<Org_pre_receive_hook> {
			return this.http.delete<Org_pre_receive_hook>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/pre-receive-hooks/' + pre_receive_hook_id, {});
		}

		/**
		 * Get a pre-receive hook for an organization
		 * Get orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Org_pre_receive_hook} Response
		 */
		Enterprise_adminSlashget_pre_receive_hook_for_org(org: string, pre_receive_hook_id: number): Observable<Org_pre_receive_hook> {
			return this.http.get<Org_pre_receive_hook>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/pre-receive-hooks/' + pre_receive_hook_id, {});
		}

		/**
		 * Update pre-receive hook enforcement for an organization
		 * For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
		 * Patch orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Org_pre_receive_hook} Response
		 */
		Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_org(org: string, pre_receive_hook_id: number, requestBody: Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_orgPatchBody): Observable<Org_pre_receive_hook> {
			return this.http.patch<Org_pre_receive_hook>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/pre-receive-hooks/' + pre_receive_hook_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List organization projects
		 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
		 * Get orgs/{org}/projects
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {IssuesSlashlistState} state Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Project>} Response
		 */
		ProjectsSlashlist_for_org(org: string, state: IssuesSlashlistState | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Project>> {
			return this.http.get<Array<Project>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/projects&state=' + state + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create an organization project
		 * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
		 * Post orgs/{org}/projects
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ProjectsSlashcreate_for_org(org: string, requestBody: ProjectsSlashcreate_for_orgPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/projects', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List public organization members
		 * Members of an organization can choose to have their membership publicized or not.
		 * Get orgs/{org}/public_members
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		OrgsSlashlist_public_members(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/public_members&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove public organization membership for the authenticated user
		 * Delete orgs/{org}/public_members/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashremove_public_membership_for_authenticated_user(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/public_members/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check public organization membership for a user
		 * Get orgs/{org}/public_members/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashcheck_public_membership_for_user(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/public_members/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Set public organization membership for the authenticated user
		 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
		 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put orgs/{org}/public_members/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		OrgsSlashset_public_membership_for_authenticated_user(org: string, username: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/public_members/' + (username == null ? '' : encodeURIComponent(username)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List organization repositories
		 * Lists repositories for the specified organization.
		 * Get orgs/{org}/repos
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {ReposSlashlist_for_orgType} type Specifies the types of repositories you want returned. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token.
		 * @param {ReposSlashlist_for_orgSort} sort The property to sort the results by.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		ReposSlashlist_for_org(org: string, type: ReposSlashlist_for_orgType | null | undefined, sort: ReposSlashlist_for_orgSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/repos&type=' + type + '&sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create an organization repository
		 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
		 * **OAuth scope requirements**
		 * When using [OAuth](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
		 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
		 * *   `repo` scope to create a private repository
		 * Post orgs/{org}/repos
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_in_org(org: string, requestBody: ReposSlashcreate_in_orgPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/repos', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List teams
		 * Lists all teams in an organization that are visible to the authenticated user.
		 * Get orgs/{org}/teams
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team>} Response
		 */
		TeamsSlashlist(org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team>> {
			return this.http.get<Array<Team>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a team
		 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
		 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
		 * Post orgs/{org}/teams
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {void} 
		 */
		TeamsSlashcreate(org: string, requestBody: TeamsSlashcreatePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a team
		 * To delete a team, the authenticated user must be an organization owner or team maintainer.
		 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
		 * Delete orgs/{org}/teams/{team_slug}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @return {void} 
		 */
		TeamsSlashdelete_in_org(org: string, team_slug: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a team by name
		 * Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
		 * Get orgs/{org}/teams/{team_slug}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @return {Team_full} Response
		 */
		TeamsSlashget_by_name(org: string, team_slug: string): Observable<Team_full> {
			return this.http.get<Team_full>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)), {});
		}

		/**
		 * Update a team
		 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
		 * Patch orgs/{org}/teams/{team_slug}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @return {void} 
		 */
		TeamsSlashupdate_in_org(org: string, team_slug: string, requestBody: TeamsSlashupdate_in_orgPatchBody): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List discussions
		 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
		 * Get orgs/{org}/teams/{team_slug}/discussions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {string} pinned Pinned discussions only filter
		 * @return {Array<Team_discussion>} Response
		 */
		TeamsSlashlist_discussions_in_org(org: string, team_slug: string, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined, pinned: string | null | undefined): Observable<Array<Team_discussion>> {
			return this.http.get<Array<Team_discussion>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions&direction=' + direction + '&per_page=' + per_page + '&page=' + page + '&pinned=' + (pinned == null ? '' : encodeURIComponent(pinned)), {});
		}

		/**
		 * Create a discussion
		 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
		 * Post orgs/{org}/teams/{team_slug}/discussions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @return {void} 
		 */
		TeamsSlashcreate_discussion_in_org(org: string, team_slug: string, requestBody: TeamsSlashcreate_discussion_in_orgPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a discussion
		 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
		 * Delete orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {void} 
		 */
		TeamsSlashdelete_discussion_in_org(org: string, team_slug: string, discussion_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a discussion
		 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
		 * Get orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {Team_discussion} Response
		 */
		TeamsSlashget_discussion_in_org(org: string, team_slug: string, discussion_number: number): Observable<Team_discussion> {
			return this.http.get<Team_discussion>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number, {});
		}

		/**
		 * Update a discussion
		 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
		 * Patch orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {Team_discussion} Response
		 */
		TeamsSlashupdate_discussion_in_org(org: string, team_slug: string, discussion_number: number, requestBody: TeamsSlashupdate_discussion_in_orgPatchBody): Observable<Team_discussion> {
			return this.http.patch<Team_discussion>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List discussion comments
		 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
		 * Get orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team_discussion_comment>} Response
		 */
		TeamsSlashlist_discussion_comments_in_org(org: string, team_slug: string, discussion_number: number, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team_discussion_comment>> {
			return this.http.get<Array<Team_discussion_comment>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a discussion comment
		 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
		 * Post orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {void} 
		 */
		TeamsSlashcreate_discussion_comment_in_org(org: string, team_slug: string, discussion_number: number, requestBody: TeamsSlashcreate_discussion_comment_in_orgPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a discussion comment
		 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
		 * Delete orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {void} 
		 */
		TeamsSlashdelete_discussion_comment_in_org(org: string, team_slug: string, discussion_number: number, comment_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments/' + comment_number, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a discussion comment
		 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
		 * Get orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {Team_discussion_comment} Response
		 */
		TeamsSlashget_discussion_comment_in_org(org: string, team_slug: string, discussion_number: number, comment_number: number): Observable<Team_discussion_comment> {
			return this.http.get<Team_discussion_comment>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments/' + comment_number, {});
		}

		/**
		 * Update a discussion comment
		 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
		 * Patch orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {Team_discussion_comment} Response
		 */
		TeamsSlashupdate_discussion_comment_in_org(org: string, team_slug: string, discussion_number: number, comment_number: number, requestBody: TeamsSlashupdate_discussion_comment_in_orgPatchBody): Observable<Team_discussion_comment> {
			return this.http.patch<Team_discussion_comment>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments/' + comment_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reactions for a team discussion comment
		 * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
		 * Get orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_team_discussion_comment_in_org(org: string, team_slug: string, discussion_number: number, comment_number: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments/' + comment_number + '/reactions&content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for a team discussion comment
		 * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
		 * Post orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {Reaction} Response when the reaction type has already been added to this team discussion comment
		 */
		ReactionsSlashcreate_for_team_discussion_comment_in_org(org: string, team_slug: string, discussion_number: number, comment_number: number, requestBody: ReactionsSlashcreate_for_team_discussion_comment_in_orgPostBody): Observable<Reaction> {
			return this.http.post<Reaction>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments/' + comment_number + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete team discussion comment reaction
		 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
		 * Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Delete orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_for_team_discussion_comment(org: string, team_slug: string, discussion_number: number, comment_number: number, reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/comments/' + comment_number + '/reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List reactions for a team discussion
		 * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
		 * Get orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_team_discussion_in_org(org: string, team_slug: string, discussion_number: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/reactions&content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for a team discussion
		 * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
		 * Post orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {Reaction} Response
		 */
		ReactionsSlashcreate_for_team_discussion_in_org(org: string, team_slug: string, discussion_number: number, requestBody: ReactionsSlashcreate_for_team_discussion_in_orgPostBody): Observable<Reaction> {
			return this.http.post<Reaction>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete team discussion reaction
		 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
		 * Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Delete orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_for_team_discussion(org: string, team_slug: string, discussion_number: number, reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/discussions/' + discussion_number + '/reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List team members
		 * Team members will include the members of child teams.
		 * To list members in a team, the team must be visible to the authenticated user.
		 * Get orgs/{org}/teams/{team_slug}/members
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {TeamsSlashlist_members_in_orgRole} role Filters members returned by their role in the team.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		TeamsSlashlist_members_in_org(org: string, team_slug: string, role: TeamsSlashlist_members_in_orgRole | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/members&role=' + role + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove team membership for a user
		 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
		 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
		 * Delete orgs/{org}/teams/{team_slug}/memberships/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		TeamsSlashremove_membership_for_user_in_org(org: string, team_slug: string, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get team membership for a user
		 * Team members will include the members of child teams.
		 * To get a user's membership with a team, the team must be visible to the authenticated user.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
		 * **Note:**
		 * The response contains the `state` of the membership and the member's `role`.
		 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-team).
		 * Get orgs/{org}/teams/{team_slug}/memberships/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Team_membership} Response
		 */
		TeamsSlashget_membership_for_user_in_org(org: string, team_slug: string, username: string): Observable<Team_membership> {
			return this.http.get<Team_membership>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), {});
		}

		/**
		 * Add or update team membership for a user
		 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
		 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
		 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
		 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
		 * Put orgs/{org}/teams/{team_slug}/memberships/{username}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Team_membership} Response
		 */
		TeamsSlashadd_or_update_membership_for_user_in_org(org: string, team_slug: string, username: string, requestBody: TeamsSlashadd_or_update_membership_for_user_in_orgPutBody): Observable<Team_membership> {
			return this.http.put<Team_membership>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List team projects
		 * Lists the organization projects for a team.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
		 * Get orgs/{org}/teams/{team_slug}/projects
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team_project>} Response
		 */
		TeamsSlashlist_projects_in_org(org: string, team_slug: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team_project>> {
			return this.http.get<Array<Team_project>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/projects&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove a project from a team
		 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
		 * Delete orgs/{org}/teams/{team_slug}/projects/{project_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} project_id The unique identifier of the project.
		 * @return {void} 
		 */
		TeamsSlashremove_project_in_org(org: string, team_slug: string, project_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/projects/' + project_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check team permissions for a project
		 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
		 * Get orgs/{org}/teams/{team_slug}/projects/{project_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} project_id The unique identifier of the project.
		 * @return {Team_project} Response
		 */
		TeamsSlashcheck_permissions_for_project_in_org(org: string, team_slug: string, project_id: number): Observable<Team_project> {
			return this.http.get<Team_project>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/projects/' + project_id, {});
		}

		/**
		 * Add or update team project permissions
		 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
		 * Put orgs/{org}/teams/{team_slug}/projects/{project_id}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} project_id The unique identifier of the project.
		 * @return {void} 
		 */
		TeamsSlashadd_or_update_project_permissions_in_org(org: string, team_slug: string, project_id: number, requestBody: TeamsSlashadd_or_update_project_permissions_in_orgPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/projects/' + project_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List team repositories
		 * Lists a team's repositories visible to the authenticated user.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
		 * Get orgs/{org}/teams/{team_slug}/repos
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		TeamsSlashlist_repos_in_org(org: string, team_slug: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/repos&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove a repository from a team
		 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
		 * Delete orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		TeamsSlashremove_repo_in_org(org: string, team_slug: string, owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check team permissions for a repository
		 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
		 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
		 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
		 * Get orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Team_repository} Alternative response with repository permissions
		 */
		TeamsSlashcheck_permissions_for_repo_in_org(org: string, team_slug: string, owner: string, repo: string): Observable<Team_repository> {
			return this.http.get<Team_repository>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), {});
		}

		/**
		 * Add or update team repository permissions
		 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
		 * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
		 * Put orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		TeamsSlashadd_or_update_repo_permissions_in_org(org: string, team_slug: string, owner: string, repo: string, requestBody: TeamsSlashadd_or_update_repo_permissions_in_orgPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List child teams
		 * Lists the child teams of the team specified by `{team_slug}`.
		 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
		 * Get orgs/{org}/teams/{team_slug}/teams
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {string} team_slug The slug of the team name.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team>} if child teams exist
		 */
		TeamsSlashlist_child_in_org(org: string, team_slug: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team>> {
			return this.http.get<Array<Team>>(this.baseUri + 'orgs/' + (org == null ? '' : encodeURIComponent(org)) + '/teams/' + (team_slug == null ? '' : encodeURIComponent(team_slug)) + '/teams&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a project card
		 * Delete projects/columns/cards/{card_id}
		 * @param {number} card_id The unique identifier of the card.
		 * @return {void} 
		 */
		ProjectsSlashdelete_card(card_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/columns/cards/' + card_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a project card
		 * Get projects/columns/cards/{card_id}
		 * @param {number} card_id The unique identifier of the card.
		 * @return {Project_card} Response
		 */
		ProjectsSlashget_card(card_id: number): Observable<Project_card> {
			return this.http.get<Project_card>(this.baseUri + 'projects/columns/cards/' + card_id, {});
		}

		/**
		 * Update an existing project card
		 * Patch projects/columns/cards/{card_id}
		 * @param {number} card_id The unique identifier of the card.
		 * @return {Project_card} Response
		 */
		ProjectsSlashupdate_card(card_id: number, requestBody: ProjectsSlashupdate_cardPatchBody): Observable<Project_card> {
			return this.http.patch<Project_card>(this.baseUri + 'projects/columns/cards/' + card_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Move a project card
		 * Post projects/columns/cards/{card_id}/moves
		 * @param {number} card_id The unique identifier of the card.
		 * @return {void} 
		 */
		ProjectsSlashmove_card(card_id: number, requestBody: ProjectsSlashmove_cardPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'projects/columns/cards/' + card_id + '/moves', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a project column
		 * Delete projects/columns/{column_id}
		 * @param {number} column_id The unique identifier of the column.
		 * @return {void} 
		 */
		ProjectsSlashdelete_column(column_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/columns/' + column_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a project column
		 * Get projects/columns/{column_id}
		 * @param {number} column_id The unique identifier of the column.
		 * @return {Project_column} Response
		 */
		ProjectsSlashget_column(column_id: number): Observable<Project_column> {
			return this.http.get<Project_column>(this.baseUri + 'projects/columns/' + column_id, {});
		}

		/**
		 * Update an existing project column
		 * Patch projects/columns/{column_id}
		 * @param {number} column_id The unique identifier of the column.
		 * @return {Project_column} Response
		 */
		ProjectsSlashupdate_column(column_id: number, requestBody: ProjectsSlashupdate_columnPatchBody): Observable<Project_column> {
			return this.http.patch<Project_column>(this.baseUri + 'projects/columns/' + column_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List project cards
		 * Get projects/columns/{column_id}/cards
		 * @param {number} column_id The unique identifier of the column.
		 * @param {ProjectsSlashlist_cardsArchived_state} archived_state Filters the project cards that are returned by the card's state.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Project_card>} Response
		 */
		ProjectsSlashlist_cards(column_id: number, archived_state: ProjectsSlashlist_cardsArchived_state | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Project_card>> {
			return this.http.get<Array<Project_card>>(this.baseUri + 'projects/columns/' + column_id + '/cards?archived_state=' + archived_state + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a project card
		 * Post projects/columns/{column_id}/cards
		 * @param {number} column_id The unique identifier of the column.
		 * @return {void} 
		 */
		ProjectsSlashcreate_card(column_id: number, requestBody: ProjectsSlashcreate_cardPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'projects/columns/' + column_id + '/cards', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Move a project column
		 * Post projects/columns/{column_id}/moves
		 * @param {number} column_id The unique identifier of the column.
		 * @return {void} 
		 */
		ProjectsSlashmove_column(column_id: number, requestBody: ProjectsSlashmove_columnPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'projects/columns/' + column_id + '/moves', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a project
		 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
		 * Delete projects/{project_id}
		 * @param {number} project_id The unique identifier of the project.
		 * @return {void} 
		 */
		ProjectsSlashdelete(project_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/' + project_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a project
		 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
		 * Get projects/{project_id}
		 * @param {number} project_id The unique identifier of the project.
		 * @return {Project} Response
		 */
		ProjectsSlashget(project_id: number): Observable<Project> {
			return this.http.get<Project>(this.baseUri + 'projects/' + project_id, {});
		}

		/**
		 * Update a project
		 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
		 * Patch projects/{project_id}
		 * @param {number} project_id The unique identifier of the project.
		 * @return {Project} Response
		 */
		ProjectsSlashupdate(project_id: number, requestBody: ProjectsSlashupdatePatchBody): Observable<Project> {
			return this.http.patch<Project>(this.baseUri + 'projects/' + project_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List project collaborators
		 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
		 * Get projects/{project_id}/collaborators
		 * @param {number} project_id The unique identifier of the project.
		 * @param {ProjectsSlashlist_collaboratorsAffiliation} affiliation Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		ProjectsSlashlist_collaborators(project_id: number, affiliation: ProjectsSlashlist_collaboratorsAffiliation | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'projects/' + project_id + '/collaborators?affiliation=' + affiliation + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove user as a collaborator
		 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
		 * Delete projects/{project_id}/collaborators/{username}
		 * @param {number} project_id The unique identifier of the project.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		ProjectsSlashremove_collaborator(project_id: number, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'projects/' + project_id + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add project collaborator
		 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
		 * Put projects/{project_id}/collaborators/{username}
		 * @param {number} project_id The unique identifier of the project.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		ProjectsSlashadd_collaborator(project_id: number, username: string, requestBody: ProjectsSlashadd_collaboratorPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'projects/' + project_id + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get project permission for a user
		 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
		 * Get projects/{project_id}/collaborators/{username}/permission
		 * @param {number} project_id The unique identifier of the project.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Project_collaborator_permission} Response
		 */
		ProjectsSlashget_permission_for_user(project_id: number, username: string): Observable<Project_collaborator_permission> {
			return this.http.get<Project_collaborator_permission>(this.baseUri + 'projects/' + project_id + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)) + '/permission', {});
		}

		/**
		 * List project columns
		 * Get projects/{project_id}/columns
		 * @param {number} project_id The unique identifier of the project.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Project_column>} Response
		 */
		ProjectsSlashlist_columns(project_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Project_column>> {
			return this.http.get<Array<Project_column>>(this.baseUri + 'projects/' + project_id + '/columns?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a project column
		 * Post projects/{project_id}/columns
		 * @param {number} project_id The unique identifier of the project.
		 * @return {void} 
		 */
		ProjectsSlashcreate_column(project_id: number, requestBody: ProjectsSlashcreate_columnPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'projects/' + project_id + '/columns', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get rate limit status for the authenticated user
		 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
		 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
		 * Get rate_limit
		 * @return {Rate_limit_overview} Response
		 */
		Rate_limitSlashget(): Observable<Rate_limit_overview> {
			return this.http.get<Rate_limit_overview>(this.baseUri + 'rate_limit', {});
		}

		/**
		 * Delete a reaction (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
		 * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments).
		 * Delete reactions/{reaction_id}
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_legacy(reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a repository
		 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
		 * If an organization owner has configured the organization to prevent members from deleting organization-owned
		 * repositories, you will get a `403 Forbidden` response.
		 * Delete repos/{owner}/{repo}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashdelete(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a repository
		 * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
		 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
		 * Get repos/{owner}/{repo}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Full_repository} Response
		 */
		ReposSlashget(owner: string, repo: string): Observable<Full_repository> {
			return this.http.get<Full_repository>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), {});
		}

		/**
		 * Update a repository
		 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#replace-all-repository-topics) endpoint.
		 * Patch repos/{owner}/{repo}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Full_repository} Response
		 */
		ReposSlashupdate(owner: string, repo: string, requestBody: ReposSlashupdatePatchBody): Observable<Full_repository> {
			return this.http.patch<Full_repository>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List artifacts for a repository
		 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/artifacts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_artifacts_for_repoReturn} Response
		 */
		ActionsSlashlist_artifacts_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_artifacts_for_repoReturn> {
			return this.http.get<ActionsSlashlist_artifacts_for_repoReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/artifacts&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete an artifact
		 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
		 * Delete repos/{owner}/{repo}/actions/artifacts/{artifact_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} artifact_id The unique identifier of the artifact.
		 * @return {void} 
		 */
		ActionsSlashdelete_artifact(owner: string, repo: string, artifact_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/artifacts/' + artifact_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get an artifact
		 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/artifacts/{artifact_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} artifact_id The unique identifier of the artifact.
		 * @return {Artifact} Response
		 */
		ActionsSlashget_artifact(owner: string, repo: string, artifact_id: number): Observable<Artifact> {
			return this.http.get<Artifact>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/artifacts/' + artifact_id, {});
		}

		/**
		 * Download an artifact
		 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
		 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
		 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
		 * GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} artifact_id The unique identifier of the artifact.
		 * @return {void} 
		 */
		ActionsSlashdownload_artifact(owner: string, repo: string, artifact_id: number, archive_format: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/artifacts/' + artifact_id + '/' + (archive_format == null ? '' : encodeURIComponent(archive_format)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a job for a workflow run
		 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/jobs/{job_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} job_id The unique identifier of the job.
		 * @return {Job} Response
		 */
		ActionsSlashget_job_for_workflow_run(owner: string, repo: string, job_id: number): Observable<Job> {
			return this.http.get<Job>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/jobs/' + job_id, {});
		}

		/**
		 * Download job logs for a workflow run
		 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
		 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
		 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
		 * have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/jobs/{job_id}/logs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} job_id The unique identifier of the job.
		 * @return {void} 
		 */
		ActionsSlashdownload_job_logs_for_workflow_run(owner: string, repo: string, job_id: number): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/jobs/' + job_id + '/logs', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get GitHub Actions permissions for a repository
		 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
		 * Get repos/{owner}/{repo}/actions/permissions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Actions_repository_permissions} Response
		 */
		ActionsSlashget_github_actions_permissions_repository(owner: string, repo: string): Observable<Actions_repository_permissions> {
			return this.http.get<Actions_repository_permissions>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/permissions', {});
		}

		/**
		 * Set GitHub Actions permissions for a repository
		 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
		 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
		 * Put repos/{owner}/{repo}/actions/permissions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashset_github_actions_permissions_repository(owner: string, repo: string, requestBody: ActionsSlashset_github_actions_permissions_repositoryPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get allowed actions for a repository
		 * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
		 * Get repos/{owner}/{repo}/actions/permissions/selected-actions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Selected_actions} Response
		 */
		ActionsSlashget_allowed_actions_repository(owner: string, repo: string): Observable<Selected_actions> {
			return this.http.get<Selected_actions>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/permissions/selected-actions', {});
		}

		/**
		 * Set allowed actions for a repository
		 * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
		 * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
		 * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
		 * Put repos/{owner}/{repo}/actions/permissions/selected-actions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashset_allowed_actions_repository(owner: string, repo: string, requestBody: Selected_actions): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/permissions/selected-actions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List self-hosted runners for a repository
		 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/runners
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_self_hosted_runners_for_repoReturn} Response
		 */
		ActionsSlashlist_self_hosted_runners_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_self_hosted_runners_for_repoReturn> {
			return this.http.get<ActionsSlashlist_self_hosted_runners_for_repoReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runners&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List runner applications for a repository
		 * Lists binaries for the runner application that you can download and run.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/runners/downloads
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Array<Runner_application>} Response
		 */
		ActionsSlashlist_runner_applications_for_repo(owner: string, repo: string): Observable<Array<Runner_application>> {
			return this.http.get<Array<Runner_application>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runners/downloads', {});
		}

		/**
		 * Create a registration token for a repository
		 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
		 * using an access token with the `repo` scope to use this endpoint.
		 * #### Example using registration token
		 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
		 * ```
		 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
		 * ```
		 * Post repos/{owner}/{repo}/actions/runners/registration-token
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashcreate_registration_token_for_repo(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runners/registration-token', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a remove token for a repository
		 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint.
		 * #### Example using remove token
		 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
		 * ```
		 * ./config.sh remove --token TOKEN
		 * ```
		 * Post repos/{owner}/{repo}/actions/runners/remove-token
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActionsSlashcreate_remove_token_for_repo(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runners/remove-token', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a self-hosted runner from a repository
		 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
		 * You must authenticate using an access token with the `repo`
		 * scope to use this endpoint.
		 * Delete repos/{owner}/{repo}/actions/runners/{runner_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {void} 
		 */
		ActionsSlashdelete_self_hosted_runner_from_repo(owner: string, repo: string, runner_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runners/' + runner_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a self-hosted runner for a repository
		 * Gets a specific self-hosted runner configured in a repository.
		 * You must authenticate using an access token with the `repo` scope to use this
		 * endpoint.
		 * Get repos/{owner}/{repo}/actions/runners/{runner_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} runner_id Unique identifier of the self-hosted runner.
		 * @return {Runner} Response
		 */
		ActionsSlashget_self_hosted_runner_for_repo(owner: string, repo: string, runner_id: number): Observable<Runner> {
			return this.http.get<Runner>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runners/' + runner_id, {});
		}

		/**
		 * List workflow runs for a repository
		 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).
		 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/runs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} actor Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
		 * @param {string} branch Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
		 * @param {string} event Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
		 * @param {ActionsSlashlist_workflow_runs_for_repoStatus} status Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run)."
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Date} created Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
		 * @param {boolean} exclude_pull_requests If `true` pull requests are omitted from the response (empty array).
		 * @return {ActionsSlashlist_workflow_runs_for_repoReturn} Response
		 */
		ActionsSlashlist_workflow_runs_for_repo(owner: string, repo: string, actor: string | null | undefined, branch: string | null | undefined, event: string | null | undefined, status: ActionsSlashlist_workflow_runs_for_repoStatus | null | undefined, per_page: number | null | undefined, page: number | null | undefined, created: Date | null | undefined, exclude_pull_requests: boolean | null | undefined): Observable<ActionsSlashlist_workflow_runs_for_repoReturn> {
			return this.http.get<ActionsSlashlist_workflow_runs_for_repoReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs&actor=' + (actor == null ? '' : encodeURIComponent(actor)) + '&branch=' + (branch == null ? '' : encodeURIComponent(branch)) + '&event=' + (event == null ? '' : encodeURIComponent(event)) + '&status=' + status + '&per_page=' + per_page + '&page=' + page + '&created=' + created?.toISOString() + '&exclude_pull_requests=' + exclude_pull_requests, {});
		}

		/**
		 * Delete a workflow run
		 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
		 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
		 * this endpoint.
		 * Delete repos/{owner}/{repo}/actions/runs/{run_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @return {void} 
		 */
		ActionsSlashdelete_workflow_run(owner: string, repo: string, run_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a workflow run
		 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/runs/{run_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @param {boolean} exclude_pull_requests If `true` pull requests are omitted from the response (empty array).
		 * @return {Workflow_run} Response
		 */
		ActionsSlashget_workflow_run(owner: string, repo: string, run_id: number, exclude_pull_requests: boolean | null | undefined): Observable<Workflow_run> {
			return this.http.get<Workflow_run>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '&exclude_pull_requests=' + exclude_pull_requests, {});
		}

		/**
		 * List workflow run artifacts
		 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_workflow_run_artifactsReturn} Response
		 */
		ActionsSlashlist_workflow_run_artifacts(owner: string, repo: string, run_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_workflow_run_artifactsReturn> {
			return this.http.get<ActionsSlashlist_workflow_run_artifactsReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '/artifacts&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Cancel a workflow run
		 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
		 * Post repos/{owner}/{repo}/actions/runs/{run_id}/cancel
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @return {void} 
		 */
		ActionsSlashcancel_workflow_run(owner: string, repo: string, run_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '/cancel', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List jobs for a workflow run
		 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).
		 * Get repos/{owner}/{repo}/actions/runs/{run_id}/jobs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @param {ActionsSlashlist_jobs_for_workflow_runFilter} filter Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_jobs_for_workflow_runReturn} Response
		 */
		ActionsSlashlist_jobs_for_workflow_run(owner: string, repo: string, run_id: number, filter: ActionsSlashlist_jobs_for_workflow_runFilter | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_jobs_for_workflow_runReturn> {
			return this.http.get<ActionsSlashlist_jobs_for_workflow_runReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '/jobs&filter=' + filter + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete workflow run logs
		 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
		 * Delete repos/{owner}/{repo}/actions/runs/{run_id}/logs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @return {void} 
		 */
		ActionsSlashdelete_workflow_run_logs(owner: string, repo: string, run_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '/logs', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Download workflow run logs
		 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
		 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
		 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
		 * the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/runs/{run_id}/logs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @return {void} 
		 */
		ActionsSlashdownload_workflow_run_logs(owner: string, repo: string, run_id: number): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '/logs', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Re-run a workflow
		 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
		 * Post repos/{owner}/{repo}/actions/runs/{run_id}/rerun
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} run_id The unique identifier of the workflow run.
		 * @return {void} 
		 */
		ActionsSlashre_run_workflow(owner: string, repo: string, run_id: number, requestBody: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/runs/' + run_id + '/rerun', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List repository secrets
		 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/secrets
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_repo_secretsReturn} Response
		 */
		ActionsSlashlist_repo_secrets(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_repo_secretsReturn> {
			return this.http.get<ActionsSlashlist_repo_secretsReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/secrets&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get a repository public key
		 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/secrets/public-key
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Actions_public_key} Response
		 */
		ActionsSlashget_repo_public_key(owner: string, repo: string): Observable<Actions_public_key> {
			return this.http.get<Actions_public_key>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/secrets/public-key', {});
		}

		/**
		 * Delete a repository secret
		 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
		 * Delete repos/{owner}/{repo}/actions/secrets/{secret_name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashdelete_repo_secret(owner: string, repo: string, secret_name: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a repository secret
		 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/secrets/{secret_name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {Actions_secret} Response
		 */
		ActionsSlashget_repo_secret(owner: string, repo: string, secret_name: string): Observable<Actions_secret> {
			return this.http.get<Actions_secret>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)), {});
		}

		/**
		 * Create or update a repository secret
		 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
		 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
		 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
		 * this endpoint.
		 * #### Example encrypting a secret using Node.js
		 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
		 * ```
		 * const sodium = require('tweetsodium');
		 * const key = "base64-encoded-public-key";
		 * const value = "plain-text-secret";
		 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
		 * const messageBytes = Buffer.from(value);
		 * const keyBytes = Buffer.from(key, 'base64');
		 * // Encrypt using LibSodium.
		 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
		 * // Base64 the encrypted secret
		 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
		 * console.log(encrypted);
		 * ```
		 * #### Example encrypting a secret using Python
		 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
		 * ```
		 * from base64 import b64encode
		 * from nacl import encoding, public
		 * def encrypt(public_key: str, secret_value: str) -> str:
		 * """Encrypt a Unicode string using the public key."""
		 * public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
		 * sealed_box = public.SealedBox(public_key)
		 * encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
		 * return b64encode(encrypted).decode("utf-8")
		 * ```
		 * #### Example encrypting a secret using C#
		 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
		 * ```
		 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
		 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
		 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
		 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
		 * ```
		 * #### Example encrypting a secret using Ruby
		 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
		 * ```ruby
		 * require "rbnacl"
		 * require "base64"
		 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
		 * public_key = RbNaCl::PublicKey.new(key)
		 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
		 * encrypted_secret = box.encrypt("my_secret")
		 * # Print the base64 encoded secret
		 * puts Base64.strict_encode64(encrypted_secret)
		 * ```
		 * Put repos/{owner}/{repo}/actions/secrets/{secret_name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} secret_name The name of the secret.
		 * @return {void} 
		 */
		ActionsSlashcreate_or_update_repo_secret(owner: string, repo: string, secret_name: string, requestBody: ActionsSlashcreate_or_update_repo_secretPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/secrets/' + (secret_name == null ? '' : encodeURIComponent(secret_name)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List repository workflows
		 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/workflows
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ActionsSlashlist_repo_workflowsReturn} Response
		 */
		ActionsSlashlist_repo_workflows(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<ActionsSlashlist_repo_workflowsReturn> {
			return this.http.get<ActionsSlashlist_repo_workflowsReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/workflows&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get a workflow
		 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
		 * Get repos/{owner}/{repo}/actions/workflows/{workflow_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} workflow_id The ID of the workflow. You can also pass the workflow file name as a string.
		 * @return {Workflow} Response
		 */
		ActionsSlashget_workflow(owner: string, repo: string, workflow_id: number): Observable<Workflow> {
			return this.http.get<Workflow>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/workflows/' + workflow_id, {});
		}

		/**
		 * Disable a workflow
		 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
		 * Put repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} workflow_id The ID of the workflow. You can also pass the workflow file name as a string.
		 * @return {void} 
		 */
		ActionsSlashdisable_workflow(owner: string, repo: string, workflow_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/workflows/' + workflow_id + '/disable', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a workflow dispatch event
		 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
		 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
		 * Post repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} workflow_id The ID of the workflow. You can also pass the workflow file name as a string.
		 * @return {void} 
		 */
		ActionsSlashcreate_workflow_dispatch(owner: string, repo: string, workflow_id: number, requestBody: ActionsSlashcreate_workflow_dispatchPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/workflows/' + workflow_id + '/dispatches', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Enable a workflow
		 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
		 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
		 * Put repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} workflow_id The ID of the workflow. You can also pass the workflow file name as a string.
		 * @return {void} 
		 */
		ActionsSlashenable_workflow(owner: string, repo: string, workflow_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/workflows/' + workflow_id + '/enable', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List workflow runs
		 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).
		 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
		 * Get repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} workflow_id The ID of the workflow. You can also pass the workflow file name as a string.
		 * @param {string} actor Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
		 * @param {string} branch Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
		 * @param {string} event Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
		 * @param {ActionsSlashlist_workflow_runs_for_repoStatus} status Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run)."
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Date} created Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
		 * @param {boolean} exclude_pull_requests If `true` pull requests are omitted from the response (empty array).
		 * @return {ActionsSlashlist_workflow_runsReturn} Response
		 */
		ActionsSlashlist_workflow_runs(owner: string, repo: string, workflow_id: number, actor: string | null | undefined, branch: string | null | undefined, event: string | null | undefined, status: ActionsSlashlist_workflow_runs_for_repoStatus | null | undefined, per_page: number | null | undefined, page: number | null | undefined, created: Date | null | undefined, exclude_pull_requests: boolean | null | undefined): Observable<ActionsSlashlist_workflow_runsReturn> {
			return this.http.get<ActionsSlashlist_workflow_runsReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/actions/workflows/' + workflow_id + '/runs&actor=' + (actor == null ? '' : encodeURIComponent(actor)) + '&branch=' + (branch == null ? '' : encodeURIComponent(branch)) + '&event=' + (event == null ? '' : encodeURIComponent(event)) + '&status=' + status + '&per_page=' + per_page + '&page=' + page + '&created=' + created?.toISOString() + '&exclude_pull_requests=' + exclude_pull_requests, {});
		}

		/**
		 * List assignees
		 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
		 * Get repos/{owner}/{repo}/assignees
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		IssuesSlashlist_assignees(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/assignees&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Check if a user can be assigned
		 * Checks if a user has permission to be assigned to an issue in this repository.
		 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
		 * Otherwise a `404` status code is returned.
		 * Get repos/{owner}/{repo}/assignees/{assignee}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		IssuesSlashcheck_user_can_be_assigned(owner: string, repo: string, assignee: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/assignees/' + (assignee == null ? '' : encodeURIComponent(assignee)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * List branches
		 * Get repos/{owner}/{repo}/branches
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {boolean} _protected Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Short_branch>} Response
		 */
		ReposSlashlist_branches(owner: string, repo: string, _protected: boolean | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Short_branch>> {
			return this.http.get<Array<Short_branch>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches&_protected=' + _protected + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get a branch
		 * Get repos/{owner}/{repo}/branches/{branch}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Branch_with_protection} Response
		 */
		ReposSlashget_branch(owner: string, repo: string, branch: string): Observable<Branch_with_protection> {
			return this.http.get<Branch_with_protection>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)), {});
		}

		/**
		 * Delete branch protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashdelete_branch_protection(owner: string, repo: string, branch: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get branch protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Branch_protection} Response
		 */
		ReposSlashget_branch_protection(owner: string, repo: string, branch: string): Observable<Branch_protection> {
			return this.http.get<Branch_protection>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection', {});
		}

		/**
		 * Update branch protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Protecting a branch requires admin or owner permissions to the repository.
		 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
		 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
		 * Put repos/{owner}/{repo}/branches/{branch}/protection
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch} Response
		 */
		ReposSlashupdate_branch_protection(owner: string, repo: string, branch: string, requestBody: ReposSlashupdate_branch_protectionPutBody): Observable<Protected_branch> {
			return this.http.put<Protected_branch>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete admin branch protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashdelete_admin_branch_protection(owner: string, repo: string, branch: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/enforce_admins', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get admin branch protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch_admin_enforced} Response
		 */
		ReposSlashget_admin_branch_protection(owner: string, repo: string, branch: string): Observable<Protected_branch_admin_enforced> {
			return this.http.get<Protected_branch_admin_enforced>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/enforce_admins', {});
		}

		/**
		 * Set admin branch protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
		 * Post repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch_admin_enforced} Response
		 */
		ReposSlashset_admin_branch_protection(owner: string, repo: string, branch: string): Observable<Protected_branch_admin_enforced> {
			return this.http.post<Protected_branch_admin_enforced>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/enforce_admins', null, {});
		}

		/**
		 * Delete pull request review protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashdelete_pull_request_review_protection(owner: string, repo: string, branch: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_pull_request_reviews', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get pull request review protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch_pull_request_review} Response
		 */
		ReposSlashget_pull_request_review_protection(owner: string, repo: string, branch: string): Observable<Protected_branch_pull_request_review> {
			return this.http.get<Protected_branch_pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_pull_request_reviews', {});
		}

		/**
		 * Update pull request review protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
		 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
		 * Patch repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch_pull_request_review} Response
		 */
		ReposSlashupdate_pull_request_review_protection(owner: string, repo: string, branch: string, requestBody: ReposSlashupdate_pull_request_review_protectionPatchBody): Observable<Protected_branch_pull_request_review> {
			return this.http.patch<Protected_branch_pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_pull_request_reviews', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete commit signature protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashdelete_commit_signature_protection(owner: string, repo: string, branch: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_signatures', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get commit signature protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
		 * **Note**: You must enable branch protection to require signed commits.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch_admin_enforced} Response
		 */
		ReposSlashget_commit_signature_protection(owner: string, repo: string, branch: string): Observable<Protected_branch_admin_enforced> {
			return this.http.get<Protected_branch_admin_enforced>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_signatures', {});
		}

		/**
		 * Create commit signature protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
		 * Post repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Protected_branch_admin_enforced} Response
		 */
		ReposSlashcreate_commit_signature_protection(owner: string, repo: string, branch: string): Observable<Protected_branch_admin_enforced> {
			return this.http.post<Protected_branch_admin_enforced>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_signatures', null, {});
		}

		/**
		 * Remove status check protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashremove_status_check_protection(owner: string, repo: string, branch: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get status checks protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Status_check_policy} Response
		 */
		ReposSlashget_status_checks_protection(owner: string, repo: string, branch: string): Observable<Status_check_policy> {
			return this.http.get<Status_check_policy>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks', {});
		}

		/**
		 * Update status check protection
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
		 * Patch repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Status_check_policy} Response
		 */
		ReposSlashupdate_status_check_protection(owner: string, repo: string, branch: string, requestBody: ReposSlashupdate_status_check_protectionPatchBody): Observable<Status_check_policy> {
			return this.http.patch<Status_check_policy>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove status check contexts
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<string>} Response
		 */
		ReposSlashremove_status_check_contexts(owner: string, repo: string, branch: string): Observable<Array<string>> {
			return this.http.delete<Array<string>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks/contexts', {});
		}

		/**
		 * Get all status check contexts
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<string>} Response
		 */
		ReposSlashget_all_status_check_contexts(owner: string, repo: string, branch: string): Observable<Array<string>> {
			return this.http.get<Array<string>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks/contexts', {});
		}

		/**
		 * Add status check contexts
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Post repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<string>} Response
		 */
		ReposSlashadd_status_check_contexts(owner: string, repo: string, branch: string, requestBody: ReposSlashadd_status_check_contextsPostBody): Observable<Array<string>> {
			return this.http.post<Array<string>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks/contexts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set status check contexts
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Put repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<string>} Response
		 */
		ReposSlashset_status_check_contexts(owner: string, repo: string, branch: string, requestBody: ReposSlashset_status_check_contextsPutBody): Observable<Array<string>> {
			return this.http.put<Array<string>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/required_status_checks/contexts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Disables the ability to restrict who can push to this branch.
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/restrictions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashdelete_access_restrictions(owner: string, repo: string, branch: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Lists who has access to this protected branch.
		 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/restrictions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Branch_restriction_policy} Response
		 */
		ReposSlashget_access_restrictions(owner: string, repo: string, branch: string): Observable<Branch_restriction_policy> {
			return this.http.get<Branch_restriction_policy>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions', {});
		}

		/**
		 * Remove app access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
		 * | Type    | Description                                                                                                                                                |
		 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Integration>} Response
		 */
		ReposSlashremove_app_access_restrictions(owner: string, repo: string, branch: string): Observable<Array<Integration>> {
			return this.http.delete<Array<Integration>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/apps', {});
		}

		/**
		 * Get apps with access to the protected branch
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Integration>} Response
		 */
		ReposSlashget_apps_with_access_to_protected_branch(owner: string, repo: string, branch: string): Observable<Array<Integration>> {
			return this.http.get<Array<Integration>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/apps', {});
		}

		/**
		 * Add app access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
		 * | Type    | Description                                                                                                                                                |
		 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Post repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Integration>} Response
		 */
		ReposSlashadd_app_access_restrictions(owner: string, repo: string, branch: string, requestBody: ReposSlashadd_app_access_restrictionsPostBody): Observable<Array<Integration>> {
			return this.http.post<Array<Integration>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/apps', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set app access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
		 * | Type    | Description                                                                                                                                                |
		 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Put repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Integration>} Response
		 */
		ReposSlashset_app_access_restrictions(owner: string, repo: string, branch: string, requestBody: ReposSlashset_app_access_restrictionsPutBody): Observable<Array<Integration>> {
			return this.http.put<Array<Integration>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/apps', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove team access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
		 * | Type    | Description                                                                                                                                         |
		 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Team>} Response
		 */
		ReposSlashremove_team_access_restrictions(owner: string, repo: string, branch: string): Observable<Array<Team>> {
			return this.http.delete<Array<Team>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/teams', {});
		}

		/**
		 * Get teams with access to the protected branch
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Lists the teams who have push access to this branch. The list includes child teams.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Team>} Response
		 */
		ReposSlashget_teams_with_access_to_protected_branch(owner: string, repo: string, branch: string): Observable<Array<Team>> {
			return this.http.get<Array<Team>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/teams', {});
		}

		/**
		 * Add team access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Grants the specified teams push access for this branch. You can also give push access to child teams.
		 * | Type    | Description                                                                                                                                |
		 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
		 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Post repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Team>} Response
		 */
		ReposSlashadd_team_access_restrictions(owner: string, repo: string, branch: string, requestBody: ReposSlashadd_team_access_restrictionsPostBody): Observable<Array<Team>> {
			return this.http.post<Array<Team>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/teams', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set team access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
		 * | Type    | Description                                                                                                                                |
		 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
		 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Put repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Team>} Response
		 */
		ReposSlashset_team_access_restrictions(owner: string, repo: string, branch: string, requestBody: ReposSlashset_team_access_restrictionsPutBody): Observable<Array<Team>> {
			return this.http.put<Array<Team>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/teams', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove user access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Removes the ability of a user to push to this branch.
		 * | Type    | Description                                                                                                                                   |
		 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Delete repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Simple_user>} Response
		 */
		ReposSlashremove_user_access_restrictions(owner: string, repo: string, branch: string): Observable<Array<Simple_user>> {
			return this.http.delete<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/users', {});
		}

		/**
		 * Get users with access to the protected branch
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Lists the people who have push access to this branch.
		 * Get repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Simple_user>} Response
		 */
		ReposSlashget_users_with_access_to_protected_branch(owner: string, repo: string, branch: string): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/users', {});
		}

		/**
		 * Add user access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Grants the specified people push access for this branch.
		 * | Type    | Description                                                                                                                   |
		 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Post repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Simple_user>} Response
		 */
		ReposSlashadd_user_access_restrictions(owner: string, repo: string, branch: string, requestBody: ReposSlashadd_user_access_restrictionsPostBody): Observable<Array<Simple_user>> {
			return this.http.post<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/users', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set user access restrictions
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
		 * | Type    | Description                                                                                                                   |
		 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
		 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
		 * Put repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {Array<Simple_user>} Response
		 */
		ReposSlashset_user_access_restrictions(owner: string, repo: string, branch: string, requestBody: ReposSlashset_user_access_restrictionsPutBody): Observable<Array<Simple_user>> {
			return this.http.put<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/protection/restrictions/users', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Rename a branch
		 * Renames a branch in a repository.
		 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/enterprise-server@3.1/github/administering-a-repository/renaming-a-branch)".
		 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
		 * To rename a non-default branch:
		 * * Users must have push access.
		 * * GitHub Apps must have the `contents:write` repository permission.
		 * To rename the default branch:
		 * * Users must have admin or owner permissions.
		 * * GitHub Apps must have the `administration:write` repository permission.
		 * Post repos/{owner}/{repo}/branches/{branch}/rename
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} branch The name of the branch.
		 * @return {void} 
		 */
		ReposSlashrename_branch(owner: string, repo: string, branch: string, requestBody: ReposSlashrename_branchPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/branches/' + (branch == null ? '' : encodeURIComponent(branch)) + '/rename', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a check run
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
		 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
		 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
		 * Post repos/{owner}/{repo}/check-runs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ChecksSlashcreate(owner: string, repo: string, requestBody: ChecksSlashcreatePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-runs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a check run
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
		 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
		 * Get repos/{owner}/{repo}/check-runs/{check_run_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} check_run_id The unique identifier of the check run.
		 * @return {Check_run} Response
		 */
		ChecksSlashget(owner: string, repo: string, check_run_id: number): Observable<Check_run> {
			return this.http.get<Check_run>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-runs/' + check_run_id, {});
		}

		/**
		 * Update a check run
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
		 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
		 * Patch repos/{owner}/{repo}/check-runs/{check_run_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} check_run_id The unique identifier of the check run.
		 * @return {Check_run} Response
		 */
		ChecksSlashupdate(owner: string, repo: string, check_run_id: number, requestBody: ChecksSlashupdatePatchBody): Observable<Check_run> {
			return this.http.patch<Check_run>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-runs/' + check_run_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List check run annotations
		 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
		 * Get repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} check_run_id The unique identifier of the check run.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Check_annotation>} Response
		 */
		ChecksSlashlist_annotations(owner: string, repo: string, check_run_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Check_annotation>> {
			return this.http.get<Array<Check_annotation>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-runs/' + check_run_id + '/annotations&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a check suite
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
		 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
		 * Post repos/{owner}/{repo}/check-suites
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Check_suite} Response when the suite already exists
		 */
		ChecksSlashcreate_suite(owner: string, repo: string, requestBody: ChecksSlashcreate_suitePostBody): Observable<Check_suite> {
			return this.http.post<Check_suite>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-suites', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update repository preferences for check suites
		 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
		 * Patch repos/{owner}/{repo}/check-suites/preferences
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Check_suite_preference} Response
		 */
		ChecksSlashset_suites_preferences(owner: string, repo: string, requestBody: ChecksSlashset_suites_preferencesPatchBody): Observable<Check_suite_preference> {
			return this.http.patch<Check_suite_preference>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-suites/preferences', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get a check suite
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
		 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
		 * Get repos/{owner}/{repo}/check-suites/{check_suite_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} check_suite_id The unique identifier of the check suite.
		 * @return {Check_suite} Response
		 */
		ChecksSlashget_suite(owner: string, repo: string, check_suite_id: number): Observable<Check_suite> {
			return this.http.get<Check_suite>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-suites/' + check_suite_id, {});
		}

		/**
		 * List check runs in a check suite
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
		 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
		 * Get repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} check_suite_id The unique identifier of the check suite.
		 * @param {string} check_name Returns check runs with the specified `name`.
		 * @param {Check_runStatus} status Returns check runs with the specified `status`.
		 * @param {ActionsSlashlist_jobs_for_workflow_runFilter} filter Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ChecksSlashlist_for_suiteReturn} Response
		 */
		ChecksSlashlist_for_suite(owner: string, repo: string, check_suite_id: number, check_name: string | null | undefined, status: Check_runStatus | null | undefined, filter: ActionsSlashlist_jobs_for_workflow_runFilter | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<ChecksSlashlist_for_suiteReturn> {
			return this.http.get<ChecksSlashlist_for_suiteReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-suites/' + check_suite_id + '/check-runs&check_name=' + (check_name == null ? '' : encodeURIComponent(check_name)) + '&status=' + status + '&filter=' + filter + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Rerequest a check suite
		 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
		 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
		 * Post repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} check_suite_id The unique identifier of the check suite.
		 * @return {void} 
		 */
		ChecksSlashrerequest_suite(owner: string, repo: string, check_suite_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/check-suites/' + check_suite_id + '/rerequest', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List code scanning alerts for a repository
		 * Lists all open code scanning alerts for the default branch (usually `main`
		 * or `master`). You must use an access token with the `security_events` scope to use
		 * this endpoint. GitHub Apps must have the `security_events` read permission to use
		 * this endpoint.
		 * The response includes a `most_recent_instance` object.
		 * This provides details of the most recent instance of this alert
		 * for the default branch or for the specified Git reference
		 * (if you used `ref` in the request).
		 * Get repos/{owner}/{repo}/code-scanning/alerts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
		 * @param {string} tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {string} ref The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
		 * @param {Code_scanning_alert_instanceState} state Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
		 * @return {Array<Code_scanning_alert_items>} Response
		 */
		Code_scanningSlashlist_alerts_for_repo(owner: string, repo: string, tool_name: string | null | undefined, tool_guid: string | null | undefined, page: number | null | undefined, per_page: number | null | undefined, ref: string | null | undefined, state: Code_scanning_alert_instanceState | null | undefined): Observable<Array<Code_scanning_alert_items>> {
			return this.http.get<Array<Code_scanning_alert_items>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/alerts&tool_name=' + (tool_name == null ? '' : encodeURIComponent(tool_name)) + '&tool_guid=' + (tool_guid == null ? '' : encodeURIComponent(tool_guid)) + '&page=' + page + '&per_page=' + per_page + '&ref=' + (ref == null ? '' : encodeURIComponent(ref)) + '&state=' + state, {});
		}

		/**
		 * Get a code scanning alert
		 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
		 * **Deprecation notice**:
		 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
		 * Get repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} alert_number The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
		 * @return {Code_scanning_alert} Response
		 */
		Code_scanningSlashget_alert(owner: string, repo: string, alert_number: number): Observable<Code_scanning_alert> {
			return this.http.get<Code_scanning_alert>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/alerts/' + alert_number, {});
		}

		/**
		 * Update a code scanning alert
		 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
		 * Patch repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} alert_number The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
		 * @return {Code_scanning_alert} Response
		 */
		Code_scanningSlashupdate_alert(owner: string, repo: string, alert_number: number, requestBody: Code_scanningSlashupdate_alertPatchBody): Observable<Code_scanning_alert> {
			return this.http.patch<Code_scanning_alert>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/alerts/' + alert_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List instances of a code scanning alert
		 * Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
		 * Get repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} alert_number The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {string} ref The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
		 * @return {Array<Code_scanning_alert_instance>} Response
		 */
		Code_scanningSlashlist_alert_instances(owner: string, repo: string, alert_number: number, page: number | null | undefined, per_page: number | null | undefined, ref: string | null | undefined): Observable<Array<Code_scanning_alert_instance>> {
			return this.http.get<Array<Code_scanning_alert_instance>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/alerts/' + alert_number + '/instances&page=' + page + '&per_page=' + per_page + '&ref=' + (ref == null ? '' : encodeURIComponent(ref)), {});
		}

		/**
		 * List code scanning analyses for a repository
		 * Lists the details of all code scanning analyses for a repository,
		 * starting with the most recent.
		 * The response is paginated and you can use the `page` and `per_page` parameters
		 * to list the analyses you're interested in.
		 * By default 30 analyses are listed per page.
		 * The `rules_count` field in the response give the number of rules
		 * that were run in the analysis.
		 * For very old analyses this data is not available,
		 * and `0` is returned in this field.
		 * You must use an access token with the `security_events` scope to use this endpoint.
		 * GitHub Apps must have the `security_events` read permission to use this endpoint.
		 * **Deprecation notice**:
		 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
		 * Get repos/{owner}/{repo}/code-scanning/analyses
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
		 * @param {string} tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {string} ref The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
		 * @param {string} sarif_id Filter analyses belonging to the same SARIF upload.
		 * @return {Array<Code_scanning_analysis>} Response
		 */
		Code_scanningSlashlist_recent_analyses(owner: string, repo: string, tool_name: string | null | undefined, tool_guid: string | null | undefined, page: number | null | undefined, per_page: number | null | undefined, ref: string | null | undefined, sarif_id: string | null | undefined): Observable<Array<Code_scanning_analysis>> {
			return this.http.get<Array<Code_scanning_analysis>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/analyses&tool_name=' + (tool_name == null ? '' : encodeURIComponent(tool_name)) + '&tool_guid=' + (tool_guid == null ? '' : encodeURIComponent(tool_guid)) + '&page=' + page + '&per_page=' + per_page + '&ref=' + (ref == null ? '' : encodeURIComponent(ref)) + '&sarif_id=' + (sarif_id == null ? '' : encodeURIComponent(sarif_id)), {});
		}

		/**
		 * Delete a code scanning analysis from a repository
		 * Deletes a specified code scanning analysis from a repository. For
		 * private repositories, you must use an access token with the `repo` scope. For public repositories,
		 * you must use an access token with `public_repo` and `repo:security_events` scopes.
		 * GitHub Apps must have the `security_events` write permission to use this endpoint.
		 * You can delete one analysis at a time.
		 * To delete a series of analyses, start with the most recent analysis and work backwards.
		 * Conceptually, the process is similar to the undo function in a text editor.
		 * **Note**: The ability to delete analyses was introduced in GitHub Enterprise Server 3.1.
		 * You can delete analyses that were generated prior to installing this release,
		 * however, if you do so, you will lose information about fixed alerts for all such analyses,
		 * for the relevant code scanning tool.
		 * We recommend that you only delete analyses that were generated with earlier releases
		 * if you don't need the details of fixed alerts from pre-3.1 releases.
		 * When you list the analyses for a repository,
		 * one or more will be identified as deletable in the response:
		 * ```
		 * "deletable": true
		 * ```
		 * An analysis is deletable when it's the most recent in a set of analyses.
		 * Typically, a repository will have multiple sets of analyses
		 * for each enabled code scanning tool,
		 * where a set is determined by a unique combination of analysis values:
		 * * `ref`
		 * * `tool`
		 * * `analysis_key`
		 * * `environment`
		 * If you attempt to delete an analysis that is not the most recent in a set,
		 * you'll get a 400 response with the message:
		 * ```
		 * Analysis specified is not deletable.
		 * ```
		 * The response from a successful `DELETE` operation provides you with
		 * two alternative URLs for deleting the next analysis in the set
		 * (see the example default response below).
		 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
		 * in the set. This is a useful option if you want to preserve at least one analysis
		 * for the specified tool in your repository.
		 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
		 * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
		 * in the 200 response is `null`.
		 * As an example of the deletion process,
		 * let's imagine that you added a workflow that configured a particular code scanning tool
		 * to analyze the code in a repository. This tool has added 15 analyses:
		 * 10 on the default branch, and another 5 on a topic branch.
		 * You therefore have two separate sets of analyses for this tool.
		 * You've now decided that you want to remove all of the analyses for the tool.
		 * To do this you must make 15 separate deletion requests.
		 * To start, you must find the deletable analysis for one of the sets,
		 * step through deleting the analyses in that set,
		 * and then repeat the process for the second set.
		 * The procedure therefore consists of a nested loop:
		 * **Outer loop**:
		 * * List the analyses for the repository, filtered by tool.
		 * * Parse this list to find a deletable analysis. If found:
		 * **Inner loop**:
		 * * Delete the identified analysis.
		 * * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
		 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
		 * Delete repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} analysis_id The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
		 * @param {string} confirm_delete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
		 * @return {Code_scanning_analysis_deletion} Response
		 */
		Code_scanningSlashdelete_analysis(owner: string, repo: string, analysis_id: number, confirm_delete: string | null | undefined): Observable<Code_scanning_analysis_deletion> {
			return this.http.delete<Code_scanning_analysis_deletion>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/analyses/' + analysis_id + '&confirm_delete=' + (confirm_delete == null ? '' : encodeURIComponent(confirm_delete)), {});
		}

		/**
		 * Get a code scanning analysis for a repository
		 * Gets a specified code scanning analysis for a repository.
		 * You must use an access token with the `security_events` scope to use this endpoint.
		 * GitHub Apps must have the `security_events` read permission to use this endpoint.
		 * The default JSON response contains fields that describe the analysis.
		 * This includes the Git reference and commit SHA to which the analysis relates,
		 * the datetime of the analysis, the name of the code scanning tool,
		 * and the number of alerts.
		 * The `rules_count` field in the default response give the number of rules
		 * that were run in the analysis.
		 * For very old analyses this data is not available,
		 * and `0` is returned in this field.
		 * If you use the Accept header `application/sarif+json`,
		 * the response contains the analysis data that was uploaded.
		 * This is formatted as
		 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
		 * **Deprecation notice**:
		 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
		 * Get repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} analysis_id The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
		 * @return {Code_scanning_analysis} Response
		 */
		Code_scanningSlashget_analysis(owner: string, repo: string, analysis_id: number): Observable<Code_scanning_analysis> {
			return this.http.get<Code_scanning_analysis>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/analyses/' + analysis_id, {});
		}

		/**
		 * Upload an analysis as SARIF data
		 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
		 * There are two places where you can upload code scanning results.
		 * - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
		 * - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
		 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
		 * ```
		 * gzip -c analysis-data.sarif | base64 -w0
		 * ```
		 * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
		 * The `202 Accepted`, response includes an `id` value.
		 * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
		 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
		 * Post repos/{owner}/{repo}/code-scanning/sarifs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		Code_scanningSlashupload_sarif(owner: string, repo: string, requestBody: Code_scanningSlashupload_sarifPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/sarifs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get information about a SARIF upload
		 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
		 * Get repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} sarif_id The SARIF ID obtained after uploading.
		 * @return {Code_scanning_sarifs_status} Response
		 */
		Code_scanningSlashget_sarif(owner: string, repo: string, sarif_id: string): Observable<Code_scanning_sarifs_status> {
			return this.http.get<Code_scanning_sarifs_status>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/code-scanning/sarifs/' + (sarif_id == null ? '' : encodeURIComponent(sarif_id)), {});
		}

		/**
		 * List repository collaborators
		 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
		 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
		 * Team members will include the members of child teams.
		 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
		 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
		 * endpoint.
		 * Get repos/{owner}/{repo}/collaborators
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {ProjectsSlashlist_collaboratorsAffiliation} affiliation Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Collaborator>} Response
		 */
		ReposSlashlist_collaborators(owner: string, repo: string, affiliation: ProjectsSlashlist_collaboratorsAffiliation | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Collaborator>> {
			return this.http.get<Array<Collaborator>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/collaborators&affiliation=' + affiliation + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove a repository collaborator
		 * Delete repos/{owner}/{repo}/collaborators/{username}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		ReposSlashremove_collaborator(owner: string, repo: string, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check if a user is a repository collaborator
		 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
		 * Team members will include the members of child teams.
		 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
		 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
		 * endpoint.
		 * Get repos/{owner}/{repo}/collaborators/{username}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		ReposSlashcheck_collaborator(owner: string, repo: string, username: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add a repository collaborator
		 * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/enterprise-server@3.1/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
		 * ```
		 * Cannot assign {member} permission of {role name}
		 * ```
		 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#invitations).
		 * **Updating an existing collaborator's permission level**
		 * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
		 * **Rate limits**
		 * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
		 * Put repos/{owner}/{repo}/collaborators/{username}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		ReposSlashadd_collaborator(owner: string, repo: string, username: string, requestBody: ReposSlashadd_collaboratorPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get repository permissions for a user
		 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
		 * Get repos/{owner}/{repo}/collaborators/{username}/permission
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Repository_collaborator_permission} if user has admin permissions
		 */
		ReposSlashget_collaborator_permission_level(owner: string, repo: string, username: string): Observable<Repository_collaborator_permission> {
			return this.http.get<Repository_collaborator_permission>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/collaborators/' + (username == null ? '' : encodeURIComponent(username)) + '/permission', {});
		}

		/**
		 * List commit comments for a repository
		 * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/).
		 * Comments are ordered by ascending ID.
		 * Get repos/{owner}/{repo}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Commit_comment>} Response
		 */
		ReposSlashlist_commit_comments_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Commit_comment>> {
			return this.http.get<Array<Commit_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a commit comment
		 * Delete repos/{owner}/{repo}/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {void} 
		 */
		ReposSlashdelete_commit_comment(owner: string, repo: string, comment_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments/' + comment_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a commit comment
		 * Get repos/{owner}/{repo}/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Commit_comment} Response
		 */
		ReposSlashget_commit_comment(owner: string, repo: string, comment_id: number): Observable<Commit_comment> {
			return this.http.get<Commit_comment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments/' + comment_id, {});
		}

		/**
		 * Update a commit comment
		 * Patch repos/{owner}/{repo}/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Commit_comment} Response
		 */
		ReposSlashupdate_commit_comment(owner: string, repo: string, comment_id: number, requestBody: ReposSlashupdate_commit_commentPatchBody): Observable<Commit_comment> {
			return this.http.patch<Commit_comment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments/' + comment_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reactions for a commit comment
		 * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments).
		 * Get repos/{owner}/{repo}/comments/{comment_id}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_commit_comment(owner: string, repo: string, comment_id: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments/' + comment_id + '/reactions&content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for a commit comment
		 * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
		 * Post repos/{owner}/{repo}/comments/{comment_id}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Reaction} Reaction exists
		 */
		ReactionsSlashcreate_for_commit_comment(owner: string, repo: string, comment_id: number, requestBody: ReactionsSlashcreate_for_commit_commentPostBody): Observable<Reaction> {
			return this.http.post<Reaction>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments/' + comment_id + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete a commit comment reaction
		 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
		 * Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments).
		 * Delete repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_for_commit_comment(owner: string, repo: string, comment_id: number, reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/comments/' + comment_id + '/reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List commits
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Get repos/{owner}/{repo}/commits
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} sha SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
		 * @param {string} path Only commits containing this file path will be returned.
		 * @param {string} author GitHub login or email address by which to filter by commit author.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {Date} until Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Commit>} Response
		 */
		ReposSlashlist_commits(owner: string, repo: string, sha: string | null | undefined, path: string | null | undefined, author: string | null | undefined, since: Date | null | undefined, until: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Commit>> {
			return this.http.get<Array<Commit>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits&sha=' + (sha == null ? '' : encodeURIComponent(sha)) + '&path=' + (path == null ? '' : encodeURIComponent(path)) + '&author=' + (author == null ? '' : encodeURIComponent(author)) + '&since=' + since?.toISOString() + '&until=' + until?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List branches for HEAD commit
		 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
		 * Get repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} commit_sha The SHA of the commit.
		 * @return {Array<Branch_short>} Response
		 */
		ReposSlashlist_branches_for_head_commit(owner: string, repo: string, commit_sha: string): Observable<Array<Branch_short>> {
			return this.http.get<Array<Branch_short>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (commit_sha == null ? '' : encodeURIComponent(commit_sha)) + '/branches-where-head', {});
		}

		/**
		 * List commit comments
		 * Use the `:commit_sha` to specify the commit that will have its comments listed.
		 * Get repos/{owner}/{repo}/commits/{commit_sha}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} commit_sha The SHA of the commit.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Commit_comment>} Response
		 */
		ReposSlashlist_comments_for_commit(owner: string, repo: string, commit_sha: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Commit_comment>> {
			return this.http.get<Array<Commit_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (commit_sha == null ? '' : encodeURIComponent(commit_sha)) + '/comments&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a commit comment
		 * Create a comment for a commit using its `:commit_sha`.
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/commits/{commit_sha}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} commit_sha The SHA of the commit.
		 * @return {void} 
		 */
		ReposSlashcreate_commit_comment(owner: string, repo: string, commit_sha: string, requestBody: ReposSlashcreate_commit_commentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (commit_sha == null ? '' : encodeURIComponent(commit_sha)) + '/comments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List pull requests associated with a commit
		 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests) endpoint.
		 * Get repos/{owner}/{repo}/commits/{commit_sha}/pulls
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} commit_sha The SHA of the commit.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Pull_request_simple>} Response
		 */
		ReposSlashlist_pull_requests_associated_with_commit(owner: string, repo: string, commit_sha: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Pull_request_simple>> {
			return this.http.get<Array<Pull_request_simple>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (commit_sha == null ? '' : encodeURIComponent(commit_sha)) + '/pulls&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get a commit
		 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
		 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
		 * You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
		 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Get repos/{owner}/{repo}/commits/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {string} ref ref parameter
		 * @return {Commit} Response
		 */
		ReposSlashget_commit(owner: string, repo: string, page: number | null | undefined, per_page: number | null | undefined, ref: string): Observable<Commit> {
			return this.http.get<Commit>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (ref == null ? '' : encodeURIComponent(ref)) + '&page=' + page + '&per_page=' + per_page, {});
		}

		/**
		 * List check runs for a Git reference
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
		 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
		 * Get repos/{owner}/{repo}/commits/{ref}/check-runs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @param {string} check_name Returns check runs with the specified `name`.
		 * @param {Check_runStatus} status Returns check runs with the specified `status`.
		 * @param {ActionsSlashlist_jobs_for_workflow_runFilter} filter Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ChecksSlashlist_for_refReturn} Response
		 */
		ChecksSlashlist_for_ref(owner: string, repo: string, ref: string, check_name: string | null | undefined, status: Check_runStatus | null | undefined, filter: ActionsSlashlist_jobs_for_workflow_runFilter | null | undefined, per_page: number | null | undefined, page: number | null | undefined, app_id: number | null | undefined): Observable<ChecksSlashlist_for_refReturn> {
			return this.http.get<ChecksSlashlist_for_refReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (ref == null ? '' : encodeURIComponent(ref)) + '/check-runs&check_name=' + (check_name == null ? '' : encodeURIComponent(check_name)) + '&status=' + status + '&filter=' + filter + '&per_page=' + per_page + '&page=' + page + '&app_id=' + app_id, {});
		}

		/**
		 * List check suites for a Git reference
		 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
		 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
		 * Get repos/{owner}/{repo}/commits/{ref}/check-suites
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @param {number} app_id Filters check suites by GitHub App `id`.
		 * @param {string} check_name Returns check runs with the specified `name`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {ChecksSlashlist_suites_for_refReturn} Response
		 */
		ChecksSlashlist_suites_for_ref(owner: string, repo: string, ref: string, app_id: number | null | undefined, check_name: string | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<ChecksSlashlist_suites_for_refReturn> {
			return this.http.get<ChecksSlashlist_suites_for_refReturn>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (ref == null ? '' : encodeURIComponent(ref)) + '/check-suites&app_id=' + app_id + '&check_name=' + (check_name == null ? '' : encodeURIComponent(check_name)) + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get the combined status for a specific reference
		 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
		 * Additionally, a combined `state` is returned. The `state` is one of:
		 * *   **failure** if any of the contexts report as `error` or `failure`
		 * *   **pending** if there are no statuses or a context is `pending`
		 * *   **success** if the latest status for all contexts is `success`
		 * Get repos/{owner}/{repo}/commits/{ref}/status
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Combined_commit_status} Response
		 */
		ReposSlashget_combined_status_for_ref(owner: string, repo: string, ref: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Combined_commit_status> {
			return this.http.get<Combined_commit_status>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (ref == null ? '' : encodeURIComponent(ref)) + '/status&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List commit statuses for a reference
		 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
		 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
		 * Get repos/{owner}/{repo}/commits/{ref}/statuses
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Status>} Response
		 */
		ReposSlashlist_commit_statuses_for_ref(owner: string, repo: string, ref: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Status>> {
			return this.http.get<Array<Status>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/commits/' + (ref == null ? '' : encodeURIComponent(ref)) + '/statuses&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Compare two commits
		 * The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
		 * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
		 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
		 * **Working with large comparisons**
		 * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits) to enumerate all commits in the range.
		 * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
		 * to generate. You can typically resolve this error by using a smaller commit range.
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Get repos/{owner}/{repo}/compare/{basehead}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} basehead The base branch and head branch to compare. This parameter expects the format `{base}...{head}`.
		 * @return {Commit_comparison} Response
		 */
		ReposSlashcompare_commits(owner: string, repo: string, basehead: string): Observable<Commit_comparison> {
			return this.http.get<Commit_comparison>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/compare/' + (basehead == null ? '' : encodeURIComponent(basehead)), {});
		}

		/**
		 * Create a content attachment
		 * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#content_reference) to create an attachment.
		 * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/enterprise-server@3.1/apps/using-content-attachments/)" for details about content attachments.
		 * You must use an [installation access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
		 * Post repos/{owner}/{repo}/content_references/{content_reference_id}/attachments
		 * @param {string} owner The owner of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
		 * @param {string} repo The name of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
		 * @param {number} content_reference_id The `id` of the `content_reference` event.
		 * @return {Content_reference_attachment} Response
		 */
		AppsSlashcreate_content_attachment(owner: string, repo: string, content_reference_id: number, requestBody: AppsSlashcreate_content_attachmentPostBody): Observable<Content_reference_attachment> {
			return this.http.post<Content_reference_attachment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/content_references/' + content_reference_id + '/attachments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete a file
		 * Deletes a file in a repository.
		 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
		 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
		 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
		 * Delete repos/{owner}/{repo}/contents/{path}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} path path parameter
		 * @return {File_commit} Response
		 */
		ReposSlashdelete_file(owner: string, repo: string, path: string): Observable<File_commit> {
			return this.http.delete<File_commit>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/contents/' + (path == null ? '' : encodeURIComponent(path)), {});
		}

		/**
		 * Get repository content
		 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
		 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
		 * Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) for
		 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
		 * type](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
		 * object format.
		 * **Note**:
		 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.1/rest/reference/git#trees).
		 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
		 * API](https://docs.github.com/enterprise-server@3.1/rest/reference/git#get-a-tree).
		 * *   This API supports files up to 1 megabyte in size.
		 * #### If the content is a directory
		 * The response will be an array of objects, one object for each item in the directory.
		 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
		 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
		 * In the next major version of the API, the type will be returned as "submodule".
		 * #### If the content is a symlink
		 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
		 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
		 * describing the symlink itself.
		 * #### If the content is a submodule
		 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
		 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
		 * the submodule at that specific commit.
		 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
		 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
		 * Get repos/{owner}/{repo}/contents/{path}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} path path parameter
		 * @param {string} ref The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
		 * @return {Array<ReposSlashget_contentReturn>} Response
		 */
		ReposSlashget_content(owner: string, repo: string, path: string, ref: string | null | undefined): Observable<Array<ReposSlashget_contentReturn>> {
			return this.http.get<Array<ReposSlashget_contentReturn>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/contents/' + (path == null ? '' : encodeURIComponent(path)) + '&ref=' + (ref == null ? '' : encodeURIComponent(ref)), {});
		}

		/**
		 * Create or update file contents
		 * Creates a new file or replaces an existing file in a repository.
		 * Put repos/{owner}/{repo}/contents/{path}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} path path parameter
		 * @return {File_commit} Response
		 */
		ReposSlashcreate_or_update_file_contents(owner: string, repo: string, path: string, requestBody: ReposSlashcreate_or_update_file_contentsPutBody): Observable<File_commit> {
			return this.http.put<File_commit>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/contents/' + (path == null ? '' : encodeURIComponent(path)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List repository contributors
		 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
		 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
		 * Get repos/{owner}/{repo}/contributors
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} anon Set to `1` or `true` to include anonymous contributors in results.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Contributor>} if repository contains content
		 */
		ReposSlashlist_contributors(owner: string, repo: string, anon: string | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Contributor>> {
			return this.http.get<Array<Contributor>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/contributors&anon=' + (anon == null ? '' : encodeURIComponent(anon)) + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List deployments
		 * Simple filtering of deployments is available via query parameters:
		 * Get repos/{owner}/{repo}/deployments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} sha The SHA recorded at creation time.
		 * @param {string} ref The name of the ref. This can be a branch, tag, or SHA.
		 * @param {string} task The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
		 * @param {string} environment The name of the environment that was deployed to (e.g., `staging` or `production`).
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Deployment>} Response
		 */
		ReposSlashlist_deployments(owner: string, repo: string, sha: string | null | undefined, ref: string | null | undefined, task: string | null | undefined, environment: string | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Deployment>> {
			return this.http.get<Array<Deployment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments&sha=' + (sha == null ? '' : encodeURIComponent(sha)) + '&ref=' + (ref == null ? '' : encodeURIComponent(ref)) + '&task=' + (task == null ? '' : encodeURIComponent(task)) + '&environment=' + (environment == null ? '' : encodeURIComponent(environment)) + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a deployment
		 * Deployments offer a few configurable parameters with certain defaults.
		 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
		 * before we merge a pull request.
		 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
		 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
		 * makes it easier to track which environments have requested deployments. The default environment is `production`.
		 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
		 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
		 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
		 * return a failure response.
		 * By default, [commit statuses](https://docs.github.com/enterprise-server@3.1/rest/commits/statuses) for every submitted context must be in a `success`
		 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
		 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
		 * not require any contexts or create any commit statuses, the deployment will always succeed.
		 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
		 * field that will be passed on when a deployment event is dispatched.
		 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
		 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
		 * application with debugging enabled.
		 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
		 * #### Merged branch response
		 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
		 * a deployment. This auto-merge happens when:
		 * *   Auto-merge option is enabled in the repository
		 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
		 * *   There are no merge conflicts
		 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
		 * response.
		 * #### Merge conflict response
		 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
		 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
		 * #### Failed commit status checks
		 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
		 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
		 * Post repos/{owner}/{repo}/deployments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_deployment(owner: string, repo: string, requestBody: ReposSlashcreate_deploymentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a deployment
		 * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
		 * To set a deployment as inactive, you must:
		 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
		 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
		 * For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@3.1/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-deployment-status)."
		 * Delete repos/{owner}/{repo}/deployments/{deployment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} deployment_id deployment_id parameter
		 * @return {void} 
		 */
		ReposSlashdelete_deployment(owner: string, repo: string, deployment_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments/' + deployment_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a deployment
		 * Get repos/{owner}/{repo}/deployments/{deployment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} deployment_id deployment_id parameter
		 * @return {Deployment} Response
		 */
		ReposSlashget_deployment(owner: string, repo: string, deployment_id: number): Observable<Deployment> {
			return this.http.get<Deployment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments/' + deployment_id, {});
		}

		/**
		 * List deployment statuses
		 * Users with pull access can view deployment statuses for a deployment:
		 * Get repos/{owner}/{repo}/deployments/{deployment_id}/statuses
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} deployment_id deployment_id parameter
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Deployment_status>} Response
		 */
		ReposSlashlist_deployment_statuses(owner: string, repo: string, deployment_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Deployment_status>> {
			return this.http.get<Array<Deployment_status>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments/' + deployment_id + '/statuses&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a deployment status
		 * Users with `push` access can create deployment statuses for a given deployment.
		 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
		 * Post repos/{owner}/{repo}/deployments/{deployment_id}/statuses
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} deployment_id deployment_id parameter
		 * @return {void} 
		 */
		ReposSlashcreate_deployment_status(owner: string, repo: string, deployment_id: number, requestBody: ReposSlashcreate_deployment_statusPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments/' + deployment_id + '/statuses', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a deployment status
		 * Users with pull access can view a deployment status for a deployment:
		 * Get repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} deployment_id deployment_id parameter
		 * @return {Deployment_status} Response
		 */
		ReposSlashget_deployment_status(owner: string, repo: string, deployment_id: number, status_id: number): Observable<Deployment_status> {
			return this.http.get<Deployment_status>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/deployments/' + deployment_id + '/statuses/' + status_id, {});
		}

		/**
		 * Create a repository dispatch event
		 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#repository_dispatch)."
		 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
		 * This endpoint requires write access to the repository by providing either:
		 * - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
		 * - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
		 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
		 * Post repos/{owner}/{repo}/dispatches
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_dispatch_event(owner: string, repo: string, requestBody: ReposSlashcreate_dispatch_eventPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/dispatches', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List repository events
		 * Get repos/{owner}/{repo}/events
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_repo_events(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List forks
		 * Get repos/{owner}/{repo}/forks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {ReposSlashlist_forksSort} sort The sort order. Can be either `newest`, `oldest`, or `stargazers`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		ReposSlashlist_forks(owner: string, repo: string, sort: ReposSlashlist_forksSort | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/forks&sort=' + sort + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a fork
		 * Create a fork for the authenticated user.
		 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
		 * Post repos/{owner}/{repo}/forks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_fork(owner: string, repo: string, requestBody: ReposSlashcreate_forkPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/forks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a blob
		 * Post repos/{owner}/{repo}/git/blobs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		GitSlashcreate_blob(owner: string, repo: string, requestBody: GitSlashcreate_blobPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/blobs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a blob
		 * The `content` in the response will always be Base64 encoded.
		 * _Note_: This API supports blobs up to 100 megabytes in size.
		 * Get repos/{owner}/{repo}/git/blobs/{file_sha}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Blob} Response
		 */
		GitSlashget_blob(owner: string, repo: string, file_sha: string): Observable<Blob> {
			return this.http.get<Blob>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/blobs/' + (file_sha == null ? '' : encodeURIComponent(file_sha)), {});
		}

		/**
		 * Create a commit
		 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Post repos/{owner}/{repo}/git/commits
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		GitSlashcreate_commit(owner: string, repo: string, requestBody: GitSlashcreate_commitPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/commits', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a commit
		 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Get repos/{owner}/{repo}/git/commits/{commit_sha}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} commit_sha The SHA of the commit.
		 * @return {Git_commit} Response
		 */
		GitSlashget_commit(owner: string, repo: string, commit_sha: string): Observable<Git_commit> {
			return this.http.get<Git_commit>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/commits/' + (commit_sha == null ? '' : encodeURIComponent(commit_sha)), {});
		}

		/**
		 * List matching references
		 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
		 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
		 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
		 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
		 * Get repos/{owner}/{repo}/git/matching-refs/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Git_ref>} Response
		 */
		GitSlashlist_matching_refs(owner: string, repo: string, ref: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Git_ref>> {
			return this.http.get<Array<Git_ref>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/matching-refs/' + (ref == null ? '' : encodeURIComponent(ref)) + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get a reference
		 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
		 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
		 * Get repos/{owner}/{repo}/git/ref/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @return {Git_ref} Response
		 */
		GitSlashget_ref(owner: string, repo: string, ref: string): Observable<Git_ref> {
			return this.http.get<Git_ref>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/ref/' + (ref == null ? '' : encodeURIComponent(ref)), {});
		}

		/**
		 * Create a reference
		 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
		 * Post repos/{owner}/{repo}/git/refs
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		GitSlashcreate_ref(owner: string, repo: string, requestBody: GitSlashcreate_refPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/refs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a reference
		 * Delete repos/{owner}/{repo}/git/refs/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @return {void} 
		 */
		GitSlashdelete_ref(owner: string, repo: string, ref: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/refs/' + (ref == null ? '' : encodeURIComponent(ref)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Update a reference
		 * Patch repos/{owner}/{repo}/git/refs/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref ref parameter
		 * @return {Git_ref} Response
		 */
		GitSlashupdate_ref(owner: string, repo: string, ref: string, requestBody: GitSlashupdate_refPatchBody): Observable<Git_ref> {
			return this.http.patch<Git_ref>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/refs/' + (ref == null ? '' : encodeURIComponent(ref)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a tag object
		 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.1/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.1/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Post repos/{owner}/{repo}/git/tags
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		GitSlashcreate_tag(owner: string, repo: string, requestBody: GitSlashcreate_tagPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/tags', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a tag
		 * **Signature verification object**
		 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
		 * | Name | Type | Description |
		 * | ---- | ---- | ----------- |
		 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
		 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
		 * | `signature` | `string` | The signature that was extracted from the commit. |
		 * | `payload` | `string` | The value that was signed. |
		 * These are the possible values for `reason` in the `verification` object:
		 * | Value | Description |
		 * | ----- | ----------- |
		 * | `expired_key` | The key that made the signature is expired. |
		 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
		 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
		 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
		 * | `unsigned` | The object does not include a signature. |
		 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
		 * | `no_user` | No user was associated with the `committer` email address in the commit. |
		 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
		 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
		 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
		 * | `malformed_signature` | There was an error parsing the signature. |
		 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
		 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
		 * Get repos/{owner}/{repo}/git/tags/{tag_sha}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Git_tag} Response
		 */
		GitSlashget_tag(owner: string, repo: string, tag_sha: string): Observable<Git_tag> {
			return this.http.get<Git_tag>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/tags/' + (tag_sha == null ? '' : encodeURIComponent(tag_sha)), {});
		}

		/**
		 * Create a tree
		 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
		 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@3.1/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@3.1/rest/reference/git#update-a-reference)."
		 * Post repos/{owner}/{repo}/git/trees
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		GitSlashcreate_tree(owner: string, repo: string, requestBody: GitSlashcreate_treePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/trees', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a tree
		 * Returns a single tree using the SHA1 value for that tree.
		 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
		 * Get repos/{owner}/{repo}/git/trees/{tree_sha}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} recursive Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
		 * @return {Git_tree} Response
		 */
		GitSlashget_tree(owner: string, repo: string, tree_sha: string, recursive: string | null | undefined): Observable<Git_tree> {
			return this.http.get<Git_tree>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/git/trees/' + (tree_sha == null ? '' : encodeURIComponent(tree_sha)) + '&recursive=' + (recursive == null ? '' : encodeURIComponent(recursive)), {});
		}

		/**
		 * List repository webhooks
		 * Get repos/{owner}/{repo}/hooks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Hook>} Response
		 */
		ReposSlashlist_webhooks(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Hook>> {
			return this.http.get<Array<Hook>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a repository webhook
		 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
		 * share the same `config` as long as those webhooks do not have any `events` that overlap.
		 * Post repos/{owner}/{repo}/hooks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_webhook(owner: string, repo: string, requestBody: ReposSlashcreate_webhookPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a repository webhook
		 * Delete repos/{owner}/{repo}/hooks/{hook_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		ReposSlashdelete_webhook(owner: string, repo: string, hook_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a repository webhook
		 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
		 * Get repos/{owner}/{repo}/hooks/{hook_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Hook} Response
		 */
		ReposSlashget_webhook(owner: string, repo: string, hook_id: number): Observable<Hook> {
			return this.http.get<Hook>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id, {});
		}

		/**
		 * Update a repository webhook
		 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
		 * Patch repos/{owner}/{repo}/hooks/{hook_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Hook} Response
		 */
		ReposSlashupdate_webhook(owner: string, repo: string, hook_id: number, requestBody: ReposSlashupdate_webhookPatchBody): Observable<Hook> {
			return this.http.patch<Hook>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get a webhook configuration for a repository
		 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
		 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
		 * Get repos/{owner}/{repo}/hooks/{hook_id}/config
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Webhook_config} Response
		 */
		ReposSlashget_webhook_config_for_repo(owner: string, repo: string, hook_id: number): Observable<Webhook_config> {
			return this.http.get<Webhook_config>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id + '/config', {});
		}

		/**
		 * Update a webhook configuration for a repository
		 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
		 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
		 * Patch repos/{owner}/{repo}/hooks/{hook_id}/config
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {Webhook_config} Response
		 */
		ReposSlashupdate_webhook_config_for_repo(owner: string, repo: string, hook_id: number, requestBody: ReposSlashupdate_webhook_config_for_repoPatchBody): Observable<Webhook_config> {
			return this.http.patch<Webhook_config>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id + '/config', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Ping a repository webhook
		 * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.1/webhooks/#ping-event) to be sent to the hook.
		 * Post repos/{owner}/{repo}/hooks/{hook_id}/pings
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		ReposSlashping_webhook(owner: string, repo: string, hook_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id + '/pings', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Test the push repository webhook
		 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
		 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
		 * Post repos/{owner}/{repo}/hooks/{hook_id}/tests
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} hook_id The unique identifier of the hook.
		 * @return {void} 
		 */
		ReposSlashtest_push_webhook(owner: string, repo: string, hook_id: number): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/hooks/' + hook_id + '/tests', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a repository installation for the authenticated app
		 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Get repos/{owner}/{repo}/installation
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Installation} Response
		 */
		AppsSlashget_repo_installation(owner: string, repo: string): Observable<Installation> {
			return this.http.get<Installation>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/installation', {});
		}

		/**
		 * List repository invitations
		 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
		 * Get repos/{owner}/{repo}/invitations
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Repository_invitation>} Response
		 */
		ReposSlashlist_invitations(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Repository_invitation>> {
			return this.http.get<Array<Repository_invitation>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/invitations&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a repository invitation
		 * Delete repos/{owner}/{repo}/invitations/{invitation_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} invitation_id The unique identifier of the invitation.
		 * @return {void} 
		 */
		ReposSlashdelete_invitation(owner: string, repo: string, invitation_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/invitations/' + invitation_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Update a repository invitation
		 * Patch repos/{owner}/{repo}/invitations/{invitation_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} invitation_id The unique identifier of the invitation.
		 * @return {Repository_invitation} Response
		 */
		ReposSlashupdate_invitation(owner: string, repo: string, invitation_id: number, requestBody: ReposSlashupdate_invitationPatchBody): Observable<Repository_invitation> {
			return this.http.patch<Repository_invitation>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/invitations/' + invitation_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List repository issues
		 * List issues in a repository.
		 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
		 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
		 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
		 * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)" endpoint.
		 * Get repos/{owner}/{repo}/issues
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} milestone If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
		 * @param {IssuesSlashlistState} state Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
		 * @param {string} assignee Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
		 * @param {string} creator The user that created the issue.
		 * @param {string} mentioned A user that's mentioned in the issue.
		 * @param {string} labels A list of comma separated label names. Example: `bug,ui,@high`
		 * @param {IssuesSlashlistSort} sort What to sort results by. Can be either `created`, `updated`, `comments`.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue>} Response
		 */
		IssuesSlashlist_for_repo(owner: string, repo: string, milestone: string | null | undefined, state: IssuesSlashlistState | null | undefined, assignee: string | null | undefined, creator: string | null | undefined, mentioned: string | null | undefined, labels: string | null | undefined, sort: IssuesSlashlistSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue>> {
			return this.http.get<Array<Issue>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues&milestone=' + (milestone == null ? '' : encodeURIComponent(milestone)) + '&state=' + state + '&assignee=' + (assignee == null ? '' : encodeURIComponent(assignee)) + '&creator=' + (creator == null ? '' : encodeURIComponent(creator)) + '&mentioned=' + (mentioned == null ? '' : encodeURIComponent(mentioned)) + '&labels=' + (labels == null ? '' : encodeURIComponent(labels)) + '&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create an issue
		 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
		 * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/issues
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		IssuesSlashcreate(owner: string, repo: string, requestBody: IssuesSlashcreatePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List issue comments for a repository
		 * By default, Issue Comments are ordered by ascending ID.
		 * Get repos/{owner}/{repo}/issues/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {IssuesSlashlist_comments_for_repoSort} sort The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction Either `asc` or `desc`. Ignored without the `sort` parameter.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue_comment>} Response
		 */
		IssuesSlashlist_comments_for_repo(owner: string, repo: string, sort: IssuesSlashlist_comments_for_repoSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue_comment>> {
			return this.http.get<Array<Issue_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete an issue comment
		 * Delete repos/{owner}/{repo}/issues/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {void} 
		 */
		IssuesSlashdelete_comment(owner: string, repo: string, comment_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments/' + comment_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get an issue comment
		 * Get repos/{owner}/{repo}/issues/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Issue_comment} Response
		 */
		IssuesSlashget_comment(owner: string, repo: string, comment_id: number): Observable<Issue_comment> {
			return this.http.get<Issue_comment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments/' + comment_id, {});
		}

		/**
		 * Update an issue comment
		 * Patch repos/{owner}/{repo}/issues/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Issue_comment} Response
		 */
		IssuesSlashupdate_comment(owner: string, repo: string, comment_id: number, requestBody: IssuesSlashupdate_commentPatchBody): Observable<Issue_comment> {
			return this.http.patch<Issue_comment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments/' + comment_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reactions for an issue comment
		 * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments).
		 * Get repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_issue_comment(owner: string, repo: string, comment_id: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments/' + comment_id + '/reactions&content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for an issue comment
		 * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
		 * Post repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Reaction} Reaction exists
		 */
		ReactionsSlashcreate_for_issue_comment(owner: string, repo: string, comment_id: number, requestBody: ReactionsSlashcreate_for_issue_commentPostBody): Observable<Reaction> {
			return this.http.post<Reaction>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments/' + comment_id + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete an issue comment reaction
		 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
		 * Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments).
		 * Delete repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_for_issue_comment(owner: string, repo: string, comment_id: number, reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/comments/' + comment_id + '/reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List issue events for a repository
		 * Get repos/{owner}/{repo}/issues/events
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue_event>} Response
		 */
		IssuesSlashlist_events_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue_event>> {
			return this.http.get<Array<Issue_event>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get an issue event
		 * Get repos/{owner}/{repo}/issues/events/{event_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Issue_event} Response
		 */
		IssuesSlashget_event(owner: string, repo: string, event_id: number): Observable<Issue_event> {
			return this.http.get<Issue_event>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/events/' + event_id, {});
		}

		/**
		 * Get an issue
		 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
		 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
		 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
		 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
		 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
		 * to the [`issues`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#issues) webhook.
		 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
		 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
		 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
		 * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)" endpoint.
		 * Get repos/{owner}/{repo}/issues/{issue_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Issue} Response
		 */
		IssuesSlashget(owner: string, repo: string, issue_number: number): Observable<Issue> {
			return this.http.get<Issue>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number, {});
		}

		/**
		 * Update an issue
		 * Issue owners and users with push access can edit an issue.
		 * Patch repos/{owner}/{repo}/issues/{issue_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Issue} Response
		 */
		IssuesSlashupdate(owner: string, repo: string, issue_number: number, requestBody: IssuesSlashupdatePatchBody): Observable<Issue> {
			return this.http.patch<Issue>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove assignees from an issue
		 * Removes one or more assignees from an issue.
		 * Delete repos/{owner}/{repo}/issues/{issue_number}/assignees
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Issue} Response
		 */
		IssuesSlashremove_assignees(owner: string, repo: string, issue_number: number): Observable<Issue> {
			return this.http.delete<Issue>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/assignees', {});
		}

		/**
		 * Add assignees to an issue
		 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
		 * Post repos/{owner}/{repo}/issues/{issue_number}/assignees
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {void} 
		 */
		IssuesSlashadd_assignees(owner: string, repo: string, issue_number: number, requestBody: IssuesSlashadd_assigneesPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/assignees', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List issue comments
		 * Issue Comments are ordered by ascending ID.
		 * Get repos/{owner}/{repo}/issues/{issue_number}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue_comment>} Response
		 */
		IssuesSlashlist_comments(owner: string, repo: string, issue_number: number, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue_comment>> {
			return this.http.get<Array<Issue_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/comments&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create an issue comment
		 * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/issues/{issue_number}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {void} 
		 */
		IssuesSlashcreate_comment(owner: string, repo: string, issue_number: number, requestBody: IssuesSlashcreate_commentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/comments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List issue events
		 * Get repos/{owner}/{repo}/issues/{issue_number}/events
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue_event_for_issue>} Response
		 */
		IssuesSlashlist_events(owner: string, repo: string, issue_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue_event_for_issue>> {
			return this.http.get<Array<Issue_event_for_issue>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove all labels from an issue
		 * Delete repos/{owner}/{repo}/issues/{issue_number}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {void} 
		 */
		IssuesSlashremove_all_labels(owner: string, repo: string, issue_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/labels', { observe: 'response', responseType: 'text' });
		}

		/**
		 * List labels for an issue
		 * Get repos/{owner}/{repo}/issues/{issue_number}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Label>} Response
		 */
		IssuesSlashlist_labels_on_issue(owner: string, repo: string, issue_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Label>> {
			return this.http.get<Array<Label>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/labels&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Add labels to an issue
		 * Post repos/{owner}/{repo}/issues/{issue_number}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Array<Label>} Response
		 */
		IssuesSlashadd_labels(owner: string, repo: string, issue_number: number, requestBody: IssuesSlashadd_labelsPostBody): Observable<Array<Label>> {
			return this.http.post<Array<Label>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/labels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set labels for an issue
		 * Removes any previous labels and sets the new labels for an issue.
		 * Put repos/{owner}/{repo}/issues/{issue_number}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Array<Label>} Response
		 */
		IssuesSlashset_labels(owner: string, repo: string, issue_number: number, requestBody: IssuesSlashset_labelsPutBody): Observable<Array<Label>> {
			return this.http.put<Array<Label>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/labels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove a label from an issue
		 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
		 * Delete repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Array<Label>} Response
		 */
		IssuesSlashremove_label(owner: string, repo: string, issue_number: number, name: string): Observable<Array<Label>> {
			return this.http.delete<Array<Label>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/labels/' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Unlock an issue
		 * Users with push access can unlock an issue's conversation.
		 * Delete repos/{owner}/{repo}/issues/{issue_number}/lock
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {void} 
		 */
		IssuesSlashunlock(owner: string, repo: string, issue_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/lock', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Lock an issue
		 * Users with push access can lock an issue or pull request's conversation.
		 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put repos/{owner}/{repo}/issues/{issue_number}/lock
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {void} 
		 */
		IssuesSlashlock(owner: string, repo: string, issue_number: number, requestBody: IssuesSlashlockPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/lock', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List reactions for an issue
		 * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues).
		 * Get repos/{owner}/{repo}/issues/{issue_number}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_issue(owner: string, repo: string, issue_number: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/reactions&content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for an issue
		 * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
		 * Post repos/{owner}/{repo}/issues/{issue_number}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @return {Reaction} Response
		 */
		ReactionsSlashcreate_for_issue(owner: string, repo: string, issue_number: number, requestBody: ReactionsSlashcreate_for_issuePostBody): Observable<Reaction> {
			return this.http.post<Reaction>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete an issue reaction
		 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
		 * Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues/).
		 * Delete repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_for_issue(owner: string, repo: string, issue_number: number, reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List timeline events for an issue
		 * Get repos/{owner}/{repo}/issues/{issue_number}/timeline
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} issue_number The number that identifies the issue.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Timeline_issue_events>} Response
		 */
		IssuesSlashlist_events_for_timeline(owner: string, repo: string, issue_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Timeline_issue_events>> {
			return this.http.get<Array<Timeline_issue_events>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/issues/' + issue_number + '/timeline&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List deploy keys
		 * Get repos/{owner}/{repo}/keys
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Deploy_key>} Response
		 */
		ReposSlashlist_deploy_keys(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Deploy_key>> {
			return this.http.get<Array<Deploy_key>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/keys&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a deploy key
		 * You can create a read-only deploy key.
		 * Post repos/{owner}/{repo}/keys
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_deploy_key(owner: string, repo: string, requestBody: ReposSlashcreate_deploy_keyPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/keys', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a deploy key
		 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
		 * Delete repos/{owner}/{repo}/keys/{key_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} key_id The unique identifier of the key.
		 * @return {void} 
		 */
		ReposSlashdelete_deploy_key(owner: string, repo: string, key_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/keys/' + key_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a deploy key
		 * Get repos/{owner}/{repo}/keys/{key_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} key_id The unique identifier of the key.
		 * @return {Deploy_key} Response
		 */
		ReposSlashget_deploy_key(owner: string, repo: string, key_id: number): Observable<Deploy_key> {
			return this.http.get<Deploy_key>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/keys/' + key_id, {});
		}

		/**
		 * List labels for a repository
		 * Get repos/{owner}/{repo}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Label>} Response
		 */
		IssuesSlashlist_labels_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Label>> {
			return this.http.get<Array<Label>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/labels&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a label
		 * Post repos/{owner}/{repo}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		IssuesSlashcreate_label(owner: string, repo: string, requestBody: IssuesSlashcreate_labelPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/labels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a label
		 * Delete repos/{owner}/{repo}/labels/{name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		IssuesSlashdelete_label(owner: string, repo: string, name: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/labels/' + (name == null ? '' : encodeURIComponent(name)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a label
		 * Get repos/{owner}/{repo}/labels/{name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Label} Response
		 */
		IssuesSlashget_label(owner: string, repo: string, name: string): Observable<Label> {
			return this.http.get<Label>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/labels/' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Update a label
		 * Patch repos/{owner}/{repo}/labels/{name}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Label} Response
		 */
		IssuesSlashupdate_label(owner: string, repo: string, name: string, requestBody: IssuesSlashupdate_labelPatchBody): Observable<Label> {
			return this.http.patch<Label>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/labels/' + (name == null ? '' : encodeURIComponent(name)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List repository languages
		 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
		 * Get repos/{owner}/{repo}/languages
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Language} Response
		 */
		ReposSlashlist_languages(owner: string, repo: string): Observable<Language> {
			return this.http.get<Language>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/languages', {});
		}

		/**
		 * Get the license for a repository
		 * This method returns the contents of the repository's license file, if one is detected.
		 * Similar to [Get repository content](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
		 * Get repos/{owner}/{repo}/license
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {License_content} Response
		 */
		LicensesSlashget_for_repo(owner: string, repo: string): Observable<License_content> {
			return this.http.get<License_content>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/license', {});
		}

		/**
		 * Merge a branch
		 * Post repos/{owner}/{repo}/merges
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashmerge(owner: string, repo: string, requestBody: ReposSlashmergePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/merges', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List milestones
		 * Get repos/{owner}/{repo}/milestones
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {IssuesSlashlistState} state The state of the milestone. Either `open`, `closed`, or `all`.
		 * @param {IssuesSlashlist_milestonesSort} sort What to sort results by. Either `due_on` or `completeness`.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction of the sort. Either `asc` or `desc`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Milestone>} Response
		 */
		IssuesSlashlist_milestones(owner: string, repo: string, state: IssuesSlashlistState | null | undefined, sort: IssuesSlashlist_milestonesSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Milestone>> {
			return this.http.get<Array<Milestone>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/milestones&state=' + state + '&sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a milestone
		 * Post repos/{owner}/{repo}/milestones
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		IssuesSlashcreate_milestone(owner: string, repo: string, requestBody: IssuesSlashcreate_milestonePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/milestones', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a milestone
		 * Delete repos/{owner}/{repo}/milestones/{milestone_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} milestone_number The number that identifies the milestone.
		 * @return {void} 
		 */
		IssuesSlashdelete_milestone(owner: string, repo: string, milestone_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/milestones/' + milestone_number, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a milestone
		 * Get repos/{owner}/{repo}/milestones/{milestone_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} milestone_number The number that identifies the milestone.
		 * @return {Milestone} Response
		 */
		IssuesSlashget_milestone(owner: string, repo: string, milestone_number: number): Observable<Milestone> {
			return this.http.get<Milestone>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/milestones/' + milestone_number, {});
		}

		/**
		 * Update a milestone
		 * Patch repos/{owner}/{repo}/milestones/{milestone_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} milestone_number The number that identifies the milestone.
		 * @return {Milestone} Response
		 */
		IssuesSlashupdate_milestone(owner: string, repo: string, milestone_number: number, requestBody: IssuesSlashupdate_milestonePatchBody): Observable<Milestone> {
			return this.http.patch<Milestone>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/milestones/' + milestone_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List labels for issues in a milestone
		 * Get repos/{owner}/{repo}/milestones/{milestone_number}/labels
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} milestone_number The number that identifies the milestone.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Label>} Response
		 */
		IssuesSlashlist_labels_for_milestone(owner: string, repo: string, milestone_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Label>> {
			return this.http.get<Array<Label>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/milestones/' + milestone_number + '/labels&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List repository notifications for the authenticated user
		 * List all notifications for the current user.
		 * Get repos/{owner}/{repo}/notifications
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {boolean} all If `true`, show notifications marked as read.
		 * @param {boolean} participating If `true`, only shows notifications in which the user is directly participating or mentioned.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {Date} before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Thread>} Response
		 */
		ActivitySlashlist_repo_notifications_for_authenticated_user(owner: string, repo: string, all: boolean | null | undefined, participating: boolean | null | undefined, since: Date | null | undefined, before: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Thread>> {
			return this.http.get<Array<Thread>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/notifications&all=' + all + '&participating=' + participating + '&since=' + since?.toISOString() + '&before=' + before?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Mark repository notifications as read
		 * Marks all notifications in a repository as "read" removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
		 * Put repos/{owner}/{repo}/notifications
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActivitySlashmark_repo_notifications_as_read(owner: string, repo: string, requestBody: ActivitySlashmark_repo_notifications_as_readPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/notifications', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a GitHub Enterprise Server Pages site
		 * Delete repos/{owner}/{repo}/pages
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashdelete_pages_site(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a GitHub Enterprise Server Pages site
		 * Get repos/{owner}/{repo}/pages
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Page} Response
		 */
		ReposSlashget_pages(owner: string, repo: string): Observable<Page> {
			return this.http.get<Page>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages', {});
		}

		/**
		 * Create a GitHub Enterprise Server Pages site
		 * Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
		 * Post repos/{owner}/{repo}/pages
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_pages_site(owner: string, repo: string, requestBody: ReposSlashcreate_pages_sitePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Update information about a GitHub Enterprise Server Pages site
		 * Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
		 * Put repos/{owner}/{repo}/pages
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashupdate_information_about_pages_site(owner: string, repo: string, requestBody: ReposSlashupdate_information_about_pages_sitePutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List GitHub Enterprise Server Pages builds
		 * Get repos/{owner}/{repo}/pages/builds
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Page_build>} Response
		 */
		ReposSlashlist_pages_builds(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Page_build>> {
			return this.http.get<Array<Page_build>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages/builds&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Request a GitHub Enterprise Server Pages build
		 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
		 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
		 * Post repos/{owner}/{repo}/pages/builds
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashrequest_pages_build(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages/builds', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get latest Pages build
		 * Get repos/{owner}/{repo}/pages/builds/latest
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Page_build} Response
		 */
		ReposSlashget_latest_pages_build(owner: string, repo: string): Observable<Page_build> {
			return this.http.get<Page_build>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages/builds/latest', {});
		}

		/**
		 * Get GitHub Enterprise Server Pages build
		 * Get repos/{owner}/{repo}/pages/builds/{build_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Page_build} Response
		 */
		ReposSlashget_pages_build(owner: string, repo: string, build_id: number): Observable<Page_build> {
			return this.http.get<Page_build>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pages/builds/' + build_id, {});
		}

		/**
		 * List pre-receive hooks for a repository
		 * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
		 * Get repos/{owner}/{repo}/pre-receive-hooks
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @return {Array<Repository_pre_receive_hook>} Response
		 */
		Enterprise_adminSlashlist_pre_receive_hooks_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, sort: Enterprise_adminSlashlist_pre_receive_environmentsSort | null | undefined): Observable<Array<Repository_pre_receive_hook>> {
			return this.http.get<Array<Repository_pre_receive_hook>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pre-receive-hooks&per_page=' + per_page + '&page=' + page + '&direction=' + direction + '&sort=' + sort, {});
		}

		/**
		 * Remove pre-receive hook enforcement for a repository
		 * Deletes any overridden enforcement on this repository for the specified hook.
		 * Responds with effective values inherited from owner and/or global level.
		 * Delete repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Repository_pre_receive_hook} Responds with effective values inherited from owner and/or global level.
		 */
		Enterprise_adminSlashremove_pre_receive_hook_enforcement_for_repo(owner: string, repo: string, pre_receive_hook_id: number): Observable<Repository_pre_receive_hook> {
			return this.http.delete<Repository_pre_receive_hook>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pre-receive-hooks/' + pre_receive_hook_id, {});
		}

		/**
		 * Get a pre-receive hook for a repository
		 * Get repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Repository_pre_receive_hook} Response
		 */
		Enterprise_adminSlashget_pre_receive_hook_for_repo(owner: string, repo: string, pre_receive_hook_id: number): Observable<Repository_pre_receive_hook> {
			return this.http.get<Repository_pre_receive_hook>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pre-receive-hooks/' + pre_receive_hook_id, {});
		}

		/**
		 * Update pre-receive hook enforcement for a repository
		 * For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
		 * Patch repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pre_receive_hook_id The unique identifier of the pre-receive hook.
		 * @return {Repository_pre_receive_hook} Response
		 */
		Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repo(owner: string, repo: string, pre_receive_hook_id: number, requestBody: Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBody): Observable<Repository_pre_receive_hook> {
			return this.http.patch<Repository_pre_receive_hook>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pre-receive-hooks/' + pre_receive_hook_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List repository projects
		 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
		 * Get repos/{owner}/{repo}/projects
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {IssuesSlashlistState} state Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Project>} Response
		 */
		ProjectsSlashlist_for_repo(owner: string, repo: string, state: IssuesSlashlistState | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Project>> {
			return this.http.get<Array<Project>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/projects&state=' + state + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a repository project
		 * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
		 * Post repos/{owner}/{repo}/projects
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ProjectsSlashcreate_for_repo(owner: string, repo: string, requestBody: ProjectsSlashcreate_for_repoPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/projects', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List pull requests
		 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Get repos/{owner}/{repo}/pulls
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {IssuesSlashlistState} state Either `open`, `closed`, or `all` to filter by state.
		 * @param {string} head Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
		 * @param {string} base Filter pulls by base branch name. Example: `gh-pages`.
		 * @param {PullsSlashlistSort} sort What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Pull_request_simple>} Response
		 */
		PullsSlashlist(owner: string, repo: string, state: IssuesSlashlistState | null | undefined, head: string | null | undefined, base: string | null | undefined, sort: PullsSlashlistSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Pull_request_simple>> {
			return this.http.get<Array<Pull_request_simple>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls&state=' + state + '&head=' + (head == null ? '' : encodeURIComponent(head)) + '&base=' + (base == null ? '' : encodeURIComponent(base)) + '&sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a pull request
		 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
		 * You can create a new pull request.
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/pulls
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		PullsSlashcreate(owner: string, repo: string, requestBody: PullsSlashcreatePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List review comments in a repository
		 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
		 * Get repos/{owner}/{repo}/pulls/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction Can be either `asc` or `desc`. Ignored without `sort` parameter.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Pull_request_review_comment>} Response
		 */
		PullsSlashlist_review_comments_for_repo(owner: string, repo: string, sort: PullsSlashlist_review_comments_for_repoSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Pull_request_review_comment>> {
			return this.http.get<Array<Pull_request_review_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a review comment for a pull request
		 * Deletes a review comment.
		 * Delete repos/{owner}/{repo}/pulls/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {void} 
		 */
		PullsSlashdelete_review_comment(owner: string, repo: string, comment_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments/' + comment_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a review comment for a pull request
		 * Provides details for a review comment.
		 * Get repos/{owner}/{repo}/pulls/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Pull_request_review_comment} Response
		 */
		PullsSlashget_review_comment(owner: string, repo: string, comment_id: number): Observable<Pull_request_review_comment> {
			return this.http.get<Pull_request_review_comment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments/' + comment_id, {});
		}

		/**
		 * Update a review comment for a pull request
		 * Enables you to edit a review comment.
		 * Patch repos/{owner}/{repo}/pulls/comments/{comment_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Pull_request_review_comment} Response
		 */
		PullsSlashupdate_review_comment(owner: string, repo: string, comment_id: number, requestBody: PullsSlashupdate_review_commentPatchBody): Observable<Pull_request_review_comment> {
			return this.http.patch<Pull_request_review_comment>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments/' + comment_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reactions for a pull request review comment
		 * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#review-comments).
		 * Get repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_pull_request_review_comment(owner: string, repo: string, comment_id: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments/' + comment_id + '/reactions&content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for a pull request review comment
		 * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
		 * Post repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {Reaction} Reaction exists
		 */
		ReactionsSlashcreate_for_pull_request_review_comment(owner: string, repo: string, comment_id: number, requestBody: ReactionsSlashcreate_for_pull_request_review_commentPostBody): Observable<Reaction> {
			return this.http.post<Reaction>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments/' + comment_id + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete a pull request comment reaction
		 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
		 * Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#review-comments).
		 * Delete repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @param {number} reaction_id The unique identifier of the reaction.
		 * @return {void} 
		 */
		ReactionsSlashdelete_for_pull_request_comment(owner: string, repo: string, comment_id: number, reaction_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/comments/' + comment_id + '/reactions/' + reaction_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a pull request
		 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * Lists details of a pull request by providing its number.
		 * When you get, [create](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
		 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
		 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
		 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
		 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
		 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
		 * Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
		 * Get repos/{owner}/{repo}/pulls/{pull_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {Pull_request} Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
		 */
		PullsSlashget(owner: string, repo: string, pull_number: number): Observable<Pull_request> {
			return this.http.get<Pull_request>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number, {});
		}

		/**
		 * Update a pull request
		 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
		 * Patch repos/{owner}/{repo}/pulls/{pull_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {Pull_request} Response
		 */
		PullsSlashupdate(owner: string, repo: string, pull_number: number, requestBody: PullsSlashupdatePatchBody): Observable<Pull_request> {
			return this.http.patch<Pull_request>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List review comments on a pull request
		 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {IssuesSlashlist_comments_for_repoSort} sort The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction Can be either `asc` or `desc`. Ignored without `sort` parameter.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Pull_request_review_comment>} Response
		 */
		PullsSlashlist_review_comments(owner: string, repo: string, pull_number: number, sort: IssuesSlashlist_comments_for_repoSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Pull_request_review_comment>> {
			return this.http.get<Array<Pull_request_review_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/comments&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a review comment for a pull request
		 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
		 * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
		 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/pulls/{pull_number}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {void} 
		 */
		PullsSlashcreate_review_comment(owner: string, repo: string, pull_number: number, requestBody: PullsSlashcreate_review_commentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/comments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a reply for a review comment
		 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} comment_id The unique identifier of the comment.
		 * @return {void} 
		 */
		PullsSlashcreate_reply_for_review_comment(owner: string, repo: string, pull_number: number, comment_id: number, requestBody: PullsSlashcreate_reply_for_review_commentPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/comments/' + comment_id + '/replies', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List commits on a pull request
		 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits) endpoint.
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/commits
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Commit>} Response
		 */
		PullsSlashlist_commits(owner: string, repo: string, pull_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Commit>> {
			return this.http.get<Array<Commit>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/commits&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List pull requests files
		 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/files
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Diff_entry>} Response
		 */
		PullsSlashlist_files(owner: string, repo: string, pull_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Diff_entry>> {
			return this.http.get<Array<Diff_entry>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/files&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Check if a pull request has been merged
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/merge
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {void} 
		 */
		PullsSlashcheck_if_merged(owner: string, repo: string, pull_number: number): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/merge', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Merge a pull request
		 * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Put repos/{owner}/{repo}/pulls/{pull_number}/merge
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {Pull_request_merge_result} if merge was successful
		 */
		PullsSlashmerge(owner: string, repo: string, pull_number: number, requestBody: PullsSlashmergePutBody): Observable<Pull_request_merge_result> {
			return this.http.put<Pull_request_merge_result>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/merge', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove requested reviewers from a pull request
		 * Delete repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {Pull_request_simple} Response
		 */
		PullsSlashremove_requested_reviewers(owner: string, repo: string, pull_number: number): Observable<Pull_request_simple> {
			return this.http.delete<Pull_request_simple>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/requested_reviewers', {});
		}

		/**
		 * List requested reviewers for a pull request
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Pull_request_review_request} Response
		 */
		PullsSlashlist_requested_reviewers(owner: string, repo: string, pull_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Pull_request_review_request> {
			return this.http.get<Pull_request_review_request>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/requested_reviewers&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Request reviewers for a pull request
		 * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {void} 
		 */
		PullsSlashrequest_reviewers(owner: string, repo: string, pull_number: number, requestBody: PullsSlashrequest_reviewersPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/requested_reviewers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List reviews for a pull request
		 * The list of reviews returns in chronological order.
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/reviews
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Pull_request_review>} The list of reviews returns in chronological order.
		 */
		PullsSlashlist_reviews(owner: string, repo: string, pull_number: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Pull_request_review>> {
			return this.http.get<Array<Pull_request_review>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a review for a pull request
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
		 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request) endpoint.
		 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
		 * Post repos/{owner}/{repo}/pulls/{pull_number}/reviews
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {Pull_request_review} Response
		 */
		PullsSlashcreate_review(owner: string, repo: string, pull_number: number, requestBody: PullsSlashcreate_reviewPostBody): Observable<Pull_request_review> {
			return this.http.post<Pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete a pending review for a pull request
		 * Delete repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} review_id The unique identifier of the review.
		 * @return {Pull_request_review} Response
		 */
		PullsSlashdelete_pending_review(owner: string, repo: string, pull_number: number, review_id: number): Observable<Pull_request_review> {
			return this.http.delete<Pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews/' + review_id, {});
		}

		/**
		 * Get a review for a pull request
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} review_id The unique identifier of the review.
		 * @return {Pull_request_review} Response
		 */
		PullsSlashget_review(owner: string, repo: string, pull_number: number, review_id: number): Observable<Pull_request_review> {
			return this.http.get<Pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews/' + review_id, {});
		}

		/**
		 * Update a review for a pull request
		 * Update the review summary comment with new text.
		 * Put repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} review_id The unique identifier of the review.
		 * @return {Pull_request_review} Response
		 */
		PullsSlashupdate_review(owner: string, repo: string, pull_number: number, review_id: number, requestBody: PullsSlashupdate_reviewPutBody): Observable<Pull_request_review> {
			return this.http.put<Pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews/' + review_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List comments for a pull request review
		 * List comments for a specific pull request review.
		 * Get repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} review_id The unique identifier of the review.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Review_comment>} Response
		 */
		PullsSlashlist_comments_for_review(owner: string, repo: string, pull_number: number, review_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Review_comment>> {
			return this.http.get<Array<Review_comment>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews/' + review_id + '/comments&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Dismiss a review for a pull request
		 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
		 * Put repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} review_id The unique identifier of the review.
		 * @return {Pull_request_review} Response
		 */
		PullsSlashdismiss_review(owner: string, repo: string, pull_number: number, review_id: number, requestBody: PullsSlashdismiss_reviewPutBody): Observable<Pull_request_review> {
			return this.http.put<Pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews/' + review_id + '/dismissals', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Submit a review for a pull request
		 * Post repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @param {number} review_id The unique identifier of the review.
		 * @return {Pull_request_review} Response
		 */
		PullsSlashsubmit_review(owner: string, repo: string, pull_number: number, review_id: number, requestBody: PullsSlashsubmit_reviewPostBody): Observable<Pull_request_review> {
			return this.http.post<Pull_request_review>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/reviews/' + review_id + '/events', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update a pull request branch
		 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
		 * Put repos/{owner}/{repo}/pulls/{pull_number}/update-branch
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} pull_number The number that identifies the pull request.
		 * @return {void} 
		 */
		PullsSlashupdate_branch(owner: string, repo: string, pull_number: number, requestBody: PullsSlashupdate_branchPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/pulls/' + pull_number + '/update-branch', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a repository README
		 * Gets the preferred README for a repository.
		 * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
		 * Get repos/{owner}/{repo}/readme
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} ref The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
		 * @return {Content_file} Response
		 */
		ReposSlashget_readme(owner: string, repo: string, ref: string | null | undefined): Observable<Content_file> {
			return this.http.get<Content_file>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/readme&ref=' + (ref == null ? '' : encodeURIComponent(ref)), {});
		}

		/**
		 * Get a repository README for a directory
		 * Gets the README from a repository directory.
		 * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
		 * Get repos/{owner}/{repo}/readme/{dir}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} dir The alternate path to look for a README file
		 * @param {string} ref The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
		 * @return {Content_file} Response
		 */
		ReposSlashget_readme_in_directory(owner: string, repo: string, dir: string, ref: string | null | undefined): Observable<Content_file> {
			return this.http.get<Content_file>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/readme/' + (dir == null ? '' : encodeURIComponent(dir)) + '&ref=' + (ref == null ? '' : encodeURIComponent(ref)), {});
		}

		/**
		 * List releases
		 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-repository-tags).
		 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
		 * Get repos/{owner}/{repo}/releases
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Release>} Response
		 */
		ReposSlashlist_releases(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Release>> {
			return this.http.get<Array<Release>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a release
		 * Users with push access to the repository can create a release.
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post repos/{owner}/{repo}/releases
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_release(owner: string, repo: string, requestBody: ReposSlashcreate_releasePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a release asset
		 * Delete repos/{owner}/{repo}/releases/assets/{asset_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} asset_id The unique identifier of the asset.
		 * @return {void} 
		 */
		ReposSlashdelete_release_asset(owner: string, repo: string, asset_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/assets/' + asset_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a release asset
		 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
		 * Get repos/{owner}/{repo}/releases/assets/{asset_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} asset_id The unique identifier of the asset.
		 * @return {Release_asset} To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
		 */
		ReposSlashget_release_asset(owner: string, repo: string, asset_id: number): Observable<Release_asset> {
			return this.http.get<Release_asset>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/assets/' + asset_id, {});
		}

		/**
		 * Update a release asset
		 * Users with push access to the repository can edit a release asset.
		 * Patch repos/{owner}/{repo}/releases/assets/{asset_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} asset_id The unique identifier of the asset.
		 * @return {Release_asset} Response
		 */
		ReposSlashupdate_release_asset(owner: string, repo: string, asset_id: number, requestBody: ReposSlashupdate_release_assetPatchBody): Observable<Release_asset> {
			return this.http.patch<Release_asset>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/assets/' + asset_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get the latest release
		 * View the latest published full release for the repository.
		 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
		 * Get repos/{owner}/{repo}/releases/latest
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Release} Response
		 */
		ReposSlashget_latest_release(owner: string, repo: string): Observable<Release> {
			return this.http.get<Release>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/latest', {});
		}

		/**
		 * Get a release by tag name
		 * Get a published release with the specified tag.
		 * Get repos/{owner}/{repo}/releases/tags/{tag}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {string} tag tag parameter
		 * @return {Release} Response
		 */
		ReposSlashget_release_by_tag(owner: string, repo: string, tag: string): Observable<Release> {
			return this.http.get<Release>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/tags/' + (tag == null ? '' : encodeURIComponent(tag)), {});
		}

		/**
		 * Delete a release
		 * Users with push access to the repository can delete a release.
		 * Delete repos/{owner}/{repo}/releases/{release_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} release_id The unique identifier of the release.
		 * @return {void} 
		 */
		ReposSlashdelete_release(owner: string, repo: string, release_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/' + release_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a release
		 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia).
		 * Get repos/{owner}/{repo}/releases/{release_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} release_id The unique identifier of the release.
		 * @return {Release} **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia).
		 */
		ReposSlashget_release(owner: string, repo: string, release_id: number): Observable<Release> {
			return this.http.get<Release>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/' + release_id, {});
		}

		/**
		 * Update a release
		 * Users with push access to the repository can edit a release.
		 * Patch repos/{owner}/{repo}/releases/{release_id}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} release_id The unique identifier of the release.
		 * @return {Release} Response
		 */
		ReposSlashupdate_release(owner: string, repo: string, release_id: number, requestBody: ReposSlashupdate_releasePatchBody): Observable<Release> {
			return this.http.patch<Release>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/' + release_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List release assets
		 * Get repos/{owner}/{repo}/releases/{release_id}/assets
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} release_id The unique identifier of the release.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Release_asset>} Response
		 */
		ReposSlashlist_release_assets(owner: string, repo: string, release_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Release_asset>> {
			return this.http.get<Array<Release_asset>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/releases/' + release_id + '/assets&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List secret scanning alerts for a repository
		 * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
		 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
		 * Get repos/{owner}/{repo}/secret-scanning/alerts
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {Secret_scanning_alertState} state Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
		 * @param {string} secret_type A comma-separated list of secret types to return. By default all secret types are returned.
		 * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.1/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
		 * for a complete list of secret types.
		 * @param {string} resolution A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @return {Array<Secret_scanning_alert>} Response
		 */
		Secret_scanningSlashlist_alerts_for_repo(owner: string, repo: string, state: Secret_scanning_alertState | null | undefined, secret_type: string | null | undefined, resolution: string | null | undefined, page: number | null | undefined, per_page: number | null | undefined): Observable<Array<Secret_scanning_alert>> {
			return this.http.get<Array<Secret_scanning_alert>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/secret-scanning/alerts&state=' + state + '&secret_type=' + (secret_type == null ? '' : encodeURIComponent(secret_type)) + '&resolution=' + (resolution == null ? '' : encodeURIComponent(resolution)) + '&page=' + page + '&per_page=' + per_page, {});
		}

		/**
		 * Get a secret scanning alert
		 * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
		 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
		 * Get repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} alert_number The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
		 * @return {Secret_scanning_alert} Response
		 */
		Secret_scanningSlashget_alert(owner: string, repo: string, alert_number: number): Observable<Secret_scanning_alert> {
			return this.http.get<Secret_scanning_alert>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/secret-scanning/alerts/' + alert_number, {});
		}

		/**
		 * Update a secret scanning alert
		 * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
		 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
		 * Patch repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} alert_number The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
		 * @return {Secret_scanning_alert} Response
		 */
		Secret_scanningSlashupdate_alert(owner: string, repo: string, alert_number: number, requestBody: Secret_scanningSlashupdate_alertPatchBody): Observable<Secret_scanning_alert> {
			return this.http.patch<Secret_scanning_alert>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/secret-scanning/alerts/' + alert_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List stargazers
		 * Lists the people that have starred the repository.
		 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:
		 * Get repos/{owner}/{repo}/stargazers
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		ActivitySlashlist_stargazers_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/stargazers&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get the weekly commit activity
		 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
		 * Get repos/{owner}/{repo}/stats/code_frequency
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Array<Array<number>>} Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
		 */
		ReposSlashget_code_frequency_stats(owner: string, repo: string): Observable<Array<Array<number>>> {
			return this.http.get<Array<Array<number>>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/stats/code_frequency', {});
		}

		/**
		 * Get the last year of commit activity
		 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
		 * Get repos/{owner}/{repo}/stats/commit_activity
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Array<Commit_activity>} Response
		 */
		ReposSlashget_commit_activity_stats(owner: string, repo: string): Observable<Array<Commit_activity>> {
			return this.http.get<Array<Commit_activity>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/stats/commit_activity', {});
		}

		/**
		 * Get all contributor commit activity
		 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
		 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
		 * *   `a` - Number of additions
		 * *   `d` - Number of deletions
		 * *   `c` - Number of commits
		 * Get repos/{owner}/{repo}/stats/contributors
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Array<Contributor_activity>} *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
		 * *   `a` - Number of additions
		 * *   `d` - Number of deletions
		 * *   `c` - Number of commits
		 */
		ReposSlashget_contributors_stats(owner: string, repo: string): Observable<Array<Contributor_activity>> {
			return this.http.get<Array<Contributor_activity>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/stats/contributors', {});
		}

		/**
		 * Get the weekly commit count
		 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
		 * The array order is oldest week (index 0) to most recent week.
		 * Get repos/{owner}/{repo}/stats/participation
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Participation_stats} The array order is oldest week (index 0) to most recent week.
		 */
		ReposSlashget_participation_stats(owner: string, repo: string): Observable<Participation_stats> {
			return this.http.get<Participation_stats>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/stats/participation', {});
		}

		/**
		 * Get the hourly commit count for each day
		 * Each array contains the day number, hour number, and number of commits:
		 * *   `0-6`: Sunday - Saturday
		 * *   `0-23`: Hour of day
		 * *   Number of commits
		 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
		 * Get repos/{owner}/{repo}/stats/punch_card
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Array<Array<number>>} For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
		 */
		ReposSlashget_punch_card_stats(owner: string, repo: string): Observable<Array<Array<number>>> {
			return this.http.get<Array<Array<number>>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/stats/punch_card', {});
		}

		/**
		 * Create a commit status
		 * Users with push access in a repository can create commit statuses for a given SHA.
		 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
		 * Post repos/{owner}/{repo}/statuses/{sha}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashcreate_commit_status(owner: string, repo: string, sha: string, requestBody: ReposSlashcreate_commit_statusPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/statuses/' + (sha == null ? '' : encodeURIComponent(sha)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List watchers
		 * Lists the people watching the specified repository.
		 * Get repos/{owner}/{repo}/subscribers
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		ActivitySlashlist_watchers_for_repo(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/subscribers&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Delete a repository subscription
		 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#set-a-repository-subscription).
		 * Delete repos/{owner}/{repo}/subscription
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActivitySlashdelete_repo_subscription(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/subscription', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a repository subscription
		 * Get repos/{owner}/{repo}/subscription
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Repository_subscription} if you subscribe to the repository
		 */
		ActivitySlashget_repo_subscription(owner: string, repo: string): Observable<Repository_subscription> {
			return this.http.get<Repository_subscription>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/subscription', {});
		}

		/**
		 * Set a repository subscription
		 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#delete-a-repository-subscription) completely.
		 * Put repos/{owner}/{repo}/subscription
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Repository_subscription} Response
		 */
		ActivitySlashset_repo_subscription(owner: string, repo: string, requestBody: ActivitySlashset_repo_subscriptionPutBody): Observable<Repository_subscription> {
			return this.http.put<Repository_subscription>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/subscription', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List repository tags
		 * Get repos/{owner}/{repo}/tags
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Tag>} Response
		 */
		ReposSlashlist_tags(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Tag>> {
			return this.http.get<Array<Tag>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/tags&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Download a repository archive (tar)
		 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
		 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
		 * the `Location` header to make a second `GET` request.
		 * **Note**: For private repositories, these links are temporary and expire after five minutes.
		 * Get repos/{owner}/{repo}/tarball/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashdownload_tarball_archive(owner: string, repo: string, ref: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/tarball/' + (ref == null ? '' : encodeURIComponent(ref)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * List repository teams
		 * Get repos/{owner}/{repo}/teams
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team>} Response
		 */
		ReposSlashlist_teams(owner: string, repo: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team>> {
			return this.http.get<Array<Team>>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/teams&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get all repository topics
		 * Get repos/{owner}/{repo}/topics
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @param {number} page Page number of the results to fetch.
		 * @param {number} per_page The number of results per page (max 100).
		 * @return {Topic} Response
		 */
		ReposSlashget_all_topics(owner: string, repo: string, page: number | null | undefined, per_page: number | null | undefined): Observable<Topic> {
			return this.http.get<Topic>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/topics&page=' + page + '&per_page=' + per_page, {});
		}

		/**
		 * Replace all repository topics
		 * Put repos/{owner}/{repo}/topics
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Topic} Response
		 */
		ReposSlashreplace_all_topics(owner: string, repo: string, requestBody: ReposSlashreplace_all_topicsPutBody): Observable<Topic> {
			return this.http.put<Topic>(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/topics', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Transfer a repository
		 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
		 * Post repos/{owner}/{repo}/transfer
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashtransfer(owner: string, repo: string, requestBody: ReposSlashtransferPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/transfer', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Download a repository archive (zip)
		 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
		 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
		 * the `Location` header to make a second `GET` request.
		 * **Note**: For private repositories, these links are temporary and expire after five minutes.
		 * Get repos/{owner}/{repo}/zipball/{ref}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ReposSlashdownload_zipball_archive(owner: string, repo: string, ref: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)) + '/zipball/' + (ref == null ? '' : encodeURIComponent(ref)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a repository using a template
		 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
		 * **OAuth scope requirements**
		 * When using [OAuth](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
		 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
		 * *   `repo` scope to create a private repository
		 * Post repos/{template_owner}/{template_repo}/generate
		 * @return {void} 
		 */
		ReposSlashcreate_using_template(template_owner: string, template_repo: string, requestBody: ReposSlashcreate_using_templatePostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'repos/' + (template_owner == null ? '' : encodeURIComponent(template_owner)) + '/' + (template_repo == null ? '' : encodeURIComponent(template_repo)) + '/generate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List public repositories
		 * Lists all public repositories in the order that they were created.
		 * Note:
		 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
		 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
		 * Get repositories
		 * @param {number} since A repository ID. Only return repositories with an ID greater than this ID.
		 * @param {ReposSlashlist_publicVisibility} visibility Specifies the types of repositories to return. This endpoint will only list repositories available to all users on the enterprise.
		 * @return {Array<Minimal_repository>} Response
		 */
		ReposSlashlist_public(since: number | null | undefined, visibility: ReposSlashlist_publicVisibility | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'repositories?since=' + since + '&visibility=' + visibility, {});
		}

		/**
		 * Search code
		 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).
		 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
		 * `q=addClass+in:file+language:js+repo:jquery/jquery`
		 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
		 * #### Considerations for code search
		 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
		 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
		 * *   Only files smaller than 384 KB are searchable.
		 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
		 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
		 * Get search/code
		 * @param {string} q The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
		 * @param {SearchSlashcodeSort} sort Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: [best match](https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results)
		 * @param {SearchSlashcodeOrder} order Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashcodeReturn} Response
		 */
		SearchSlashcode(q: string, sort: SearchSlashcodeSort | null | undefined, order: SearchSlashcodeOrder | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashcodeReturn> {
			return this.http.get<SearchSlashcodeReturn>(this.baseUri + 'search/code?q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Search commits
		 * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).
		 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
		 * metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
		 * `q=repo:octocat/Spoon-Knife+css`
		 * Get search/commits
		 * @param {string} q The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
		 * @param {SearchSlashcommitsSort} sort Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results)
		 * @param {SearchSlashcodeOrder} order Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashcommitsReturn} Response
		 */
		SearchSlashcommits(q: string, sort: SearchSlashcommitsSort | null | undefined, order: SearchSlashcodeOrder | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashcommitsReturn> {
			return this.http.get<SearchSlashcommitsReturn>(this.baseUri + 'search/commits?q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Search issues and pull requests
		 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).
		 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
		 * search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
		 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
		 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
		 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
		 * Get search/issues
		 * @param {string} q The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
		 * @param {SearchSlashissues_and_pull_requestsSort} sort Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results)
		 * @param {SearchSlashcodeOrder} order Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashissues_and_pull_requestsReturn} Response
		 */
		SearchSlashissues_and_pull_requests(q: string, sort: SearchSlashissues_and_pull_requestsSort | null | undefined, order: SearchSlashcodeOrder | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashissues_and_pull_requestsReturn> {
			return this.http.get<SearchSlashissues_and_pull_requestsReturn>(this.baseUri + 'search/issues?q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Search labels
		 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).
		 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
		 * `q=bug+defect+enhancement&repository_id=64778136`
		 * The labels that best match the query appear first in the search results.
		 * Get search/labels
		 * @param {number} repository_id The id of the repository.
		 * @param {string} q The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query).
		 * @param {IssuesSlashlist_comments_for_repoSort} sort Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results)
		 * @param {SearchSlashcodeOrder} order Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashlabelsReturn} Response
		 */
		SearchSlashlabels(repository_id: number, q: string, sort: IssuesSlashlist_comments_for_repoSort | null | undefined, order: SearchSlashcodeOrder | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashlabelsReturn> {
			return this.http.get<SearchSlashlabelsReturn>(this.baseUri + 'search/labels?repository_id=' + repository_id + '&q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Search repositories
		 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).
		 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
		 * `q=tetris+language:assembly&sort=stars&order=desc`
		 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
		 * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
		 * `q=topic:ruby+topic:rails`
		 * Get search/repositories
		 * @param {string} q The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
		 * @param {SearchSlashreposSort} sort Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results)
		 * @param {SearchSlashcodeOrder} order Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashreposReturn} Response
		 */
		SearchSlashrepos(q: string, sort: SearchSlashreposSort | null | undefined, order: SearchSlashcodeOrder | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashreposReturn> {
			return this.http.get<SearchSlashreposReturn>(this.baseUri + 'search/repositories?q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Search topics
		 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
		 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
		 * `q=ruby+is:featured`
		 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
		 * Get search/topics
		 * @param {string} q The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query).
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashtopicsReturn} Response
		 */
		SearchSlashtopics(q: string, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashtopicsReturn> {
			return this.http.get<SearchSlashtopicsReturn>(this.baseUri + 'search/topics?q=' + (q == null ? '' : encodeURIComponent(q)) + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Search users
		 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).
		 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).
		 * For example, if you're looking for a list of popular users, you might try this query:
		 * `q=tom+repos:%3E42+followers:%3E1000`
		 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
		 * Get search/users
		 * @param {string} q The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
		 * @param {SearchSlashusersSort} sort Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub Enterprise Server. Default: [best match](https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results)
		 * @param {SearchSlashcodeOrder} order Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {SearchSlashusersReturn} Response
		 */
		SearchSlashusers(q: string, sort: SearchSlashusersSort | null | undefined, order: SearchSlashcodeOrder | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<SearchSlashusersReturn> {
			return this.http.get<SearchSlashusersReturn>(this.baseUri + 'search/users?q=' + (q == null ? '' : encodeURIComponent(q)) + '&sort=' + sort + '&order=' + order + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get the configuration status
		 * This endpoint allows you to check the status of the most recent configuration process:
		 * Note that you may need to wait several seconds after you start a process before you can check its status.
		 * The different statuses are:
		 * | Status        | Description                       |
		 * | ------------- | --------------------------------- |
		 * | `PENDING`     | The job has not started yet       |
		 * | `CONFIGURING` | The job is running                |
		 * | `DONE`        | The job has finished correctly    |
		 * | `FAILED`      | The job has finished unexpectedly |
		 * Get setup/api/configcheck
		 * @return {Configuration_status} Response
		 */
		Enterprise_adminSlashget_configuration_status(): Observable<Configuration_status> {
			return this.http.get<Configuration_status>(this.baseUri + 'setup/api/configcheck', {});
		}

		/**
		 * Start a configuration process
		 * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
		 * Post setup/api/configure
		 * @return {void} 
		 */
		Enterprise_adminSlashstart_configuration_process(): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'setup/api/configure', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the maintenance status
		 * Check your installation's maintenance status:
		 * Get setup/api/maintenance
		 * @return {Maintenance_status} Response
		 */
		Enterprise_adminSlashget_maintenance_status(): Observable<Maintenance_status> {
			return this.http.get<Maintenance_status>(this.baseUri + 'setup/api/maintenance', {});
		}

		/**
		 * Get settings
		 * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#set-settings).
		 * **Note:** You cannot retrieve the management console password with the Enterprise administration API.
		 * Get setup/api/settings
		 * @return {Enterprise_settings} Response
		 */
		Enterprise_adminSlashget_settings(): Observable<Enterprise_settings> {
			return this.http.get<Enterprise_settings>(this.baseUri + 'setup/api/settings', {});
		}

		/**
		 * Remove an authorized SSH key
		 * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
		 * Delete setup/api/settings/authorized-keys
		 * @return {Array<Ssh_key>} Response
		 */
		Enterprise_adminSlashremove_authorized_ssh_key(): Observable<Array<Ssh_key>> {
			return this.http.delete<Array<Ssh_key>>(this.baseUri + 'setup/api/settings/authorized-keys', {});
		}

		/**
		 * Get all authorized SSH keys
		 * Get setup/api/settings/authorized-keys
		 * @return {Array<Ssh_key>} Response
		 */
		Enterprise_adminSlashget_all_authorized_ssh_keys(): Observable<Array<Ssh_key>> {
			return this.http.get<Array<Ssh_key>>(this.baseUri + 'setup/api/settings/authorized-keys', {});
		}

		/**
		 * Delete a team (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#delete-a-team) endpoint.
		 * To delete a team, the authenticated user must be an organization owner or team maintainer.
		 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
		 * Delete teams/{team_id}
		 * @param {number} team_id The unique identifier of the team.
		 * @return {void} 
		 */
		TeamsSlashdelete_legacy(team_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a team (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-team-by-name) endpoint.
		 * Get teams/{team_id}
		 * @param {number} team_id The unique identifier of the team.
		 * @return {Team_full} Response
		 */
		TeamsSlashget_legacy(team_id: number): Observable<Team_full> {
			return this.http.get<Team_full>(this.baseUri + 'teams/' + team_id, {});
		}

		/**
		 * Update a team (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#update-a-team) endpoint.
		 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
		 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
		 * Patch teams/{team_id}
		 * @param {number} team_id The unique identifier of the team.
		 * @return {Team_full} Response when the updated information already exists
		 */
		TeamsSlashupdate_legacy(team_id: number, requestBody: TeamsSlashupdate_legacyPatchBody): Observable<Team_full> {
			return this.http.patch<Team_full>(this.baseUri + 'teams/' + team_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List discussions (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-discussions) endpoint.
		 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get teams/{team_id}/discussions
		 * @param {number} team_id The unique identifier of the team.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team_discussion>} Response
		 */
		TeamsSlashlist_discussions_legacy(team_id: number, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team_discussion>> {
			return this.http.get<Array<Team_discussion>>(this.baseUri + 'teams/' + team_id + '/discussions?direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a discussion (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-discussion) endpoint.
		 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post teams/{team_id}/discussions
		 * @param {number} team_id The unique identifier of the team.
		 * @return {void} 
		 */
		TeamsSlashcreate_discussion_legacy(team_id: number, requestBody: TeamsSlashcreate_discussion_legacyPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'teams/' + team_id + '/discussions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a discussion (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#delete-a-discussion) endpoint.
		 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Delete teams/{team_id}/discussions/{discussion_number}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {void} 
		 */
		TeamsSlashdelete_discussion_legacy(team_id: number, discussion_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a discussion (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-discussion) endpoint.
		 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get teams/{team_id}/discussions/{discussion_number}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {Team_discussion} Response
		 */
		TeamsSlashget_discussion_legacy(team_id: number, discussion_number: number): Observable<Team_discussion> {
			return this.http.get<Team_discussion>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number, {});
		}

		/**
		 * Update a discussion (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#update-a-discussion) endpoint.
		 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Patch teams/{team_id}/discussions/{discussion_number}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {Team_discussion} Response
		 */
		TeamsSlashupdate_discussion_legacy(team_id: number, discussion_number: number, requestBody: TeamsSlashupdate_discussion_legacyPatchBody): Observable<Team_discussion> {
			return this.http.patch<Team_discussion>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List discussion comments (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-discussion-comments) endpoint.
		 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get teams/{team_id}/discussions/{discussion_number}/comments
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team_discussion_comment>} Response
		 */
		TeamsSlashlist_discussion_comments_legacy(team_id: number, discussion_number: number, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team_discussion_comment>> {
			return this.http.get<Array<Team_discussion_comment>>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments?direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a discussion comment (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-discussion-comment) endpoint.
		 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
		 * Post teams/{team_id}/discussions/{discussion_number}/comments
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {void} 
		 */
		TeamsSlashcreate_discussion_comment_legacy(team_id: number, discussion_number: number, requestBody: TeamsSlashcreate_discussion_comment_legacyPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a discussion comment (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#delete-a-discussion-comment) endpoint.
		 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Delete teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {void} 
		 */
		TeamsSlashdelete_discussion_comment_legacy(team_id: number, discussion_number: number, comment_number: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments/' + comment_number, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a discussion comment (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-discussion-comment) endpoint.
		 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {Team_discussion_comment} Response
		 */
		TeamsSlashget_discussion_comment_legacy(team_id: number, discussion_number: number, comment_number: number): Observable<Team_discussion_comment> {
			return this.http.get<Team_discussion_comment>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments/' + comment_number, {});
		}

		/**
		 * Update a discussion comment (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#update-a-discussion-comment) endpoint.
		 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Patch teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {Team_discussion_comment} Response
		 */
		TeamsSlashupdate_discussion_comment_legacy(team_id: number, discussion_number: number, comment_number: number, requestBody: TeamsSlashupdate_discussion_comment_legacyPatchBody): Observable<Team_discussion_comment> {
			return this.http.patch<Team_discussion_comment>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments/' + comment_number, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reactions for a team discussion comment (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
		 * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_team_discussion_comment_legacy(team_id: number, discussion_number: number, comment_number: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments/' + comment_number + '/reactions?content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for a team discussion comment (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
		 * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
		 * Post teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {number} comment_number The number that identifies the comment.
		 * @return {void} 
		 */
		ReactionsSlashcreate_for_team_discussion_comment_legacy(team_id: number, discussion_number: number, comment_number: number, requestBody: ReactionsSlashcreate_for_team_discussion_comment_legacyPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/comments/' + comment_number + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List reactions for a team discussion (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
		 * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get teams/{team_id}/discussions/{discussion_number}/reactions
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @param {ReactionContent} content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Reaction>} Response
		 */
		ReactionsSlashlist_for_team_discussion_legacy(team_id: number, discussion_number: number, content: ReactionContent | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Reaction>> {
			return this.http.get<Array<Reaction>>(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/reactions?content=' + content + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create reaction for a team discussion (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
		 * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
		 * Post teams/{team_id}/discussions/{discussion_number}/reactions
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} discussion_number The number that identifies the discussion.
		 * @return {void} 
		 */
		ReactionsSlashcreate_for_team_discussion_legacy(team_id: number, discussion_number: number, requestBody: ReactionsSlashcreate_for_team_discussion_legacyPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'teams/' + team_id + '/discussions/' + discussion_number + '/reactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List team members (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-members) endpoint.
		 * Team members will include the members of child teams.
		 * Get teams/{team_id}/members
		 * @param {number} team_id The unique identifier of the team.
		 * @param {TeamsSlashlist_members_in_orgRole} role Filters members returned by their role in the team.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		TeamsSlashlist_members_legacy(team_id: number, role: TeamsSlashlist_members_in_orgRole | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'teams/' + team_id + '/members?role=' + role + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove team member (Legacy)
		 * The "Remove team member" endpoint (described below) is deprecated.
		 * We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
		 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
		 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
		 * Delete teams/{team_id}/members/{username}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		TeamsSlashremove_member_legacy(team_id: number, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id + '/members/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get team member (Legacy)
		 * The "Get team member" endpoint (described below) is deprecated.
		 * We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
		 * To list members in a team, the team must be visible to the authenticated user.
		 * Get teams/{team_id}/members/{username}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		TeamsSlashget_member_legacy(team_id: number, username: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'teams/' + team_id + '/members/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add team member (Legacy)
		 * The "Add team member" endpoint (described below) is deprecated.
		 * We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
		 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
		 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
		 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put teams/{team_id}/members/{username}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		TeamsSlashadd_member_legacy(team_id: number, username: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'teams/' + team_id + '/members/' + (username == null ? '' : encodeURIComponent(username)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove team membership for a user (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
		 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
		 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
		 * Delete teams/{team_id}/memberships/{username}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		TeamsSlashremove_membership_for_user_legacy(team_id: number, username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get team membership for a user (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-team-membership-for-a-user) endpoint.
		 * Team members will include the members of child teams.
		 * To get a user's membership with a team, the team must be visible to the authenticated user.
		 * **Note:**
		 * The response contains the `state` of the membership and the member's `role`.
		 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-team).
		 * Get teams/{team_id}/memberships/{username}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Team_membership} Response
		 */
		TeamsSlashget_membership_for_user_legacy(team_id: number, username: string): Observable<Team_membership> {
			return this.http.get<Team_membership>(this.baseUri + 'teams/' + team_id + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), {});
		}

		/**
		 * Add or update team membership for a user (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
		 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
		 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
		 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
		 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
		 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
		 * Put teams/{team_id}/memberships/{username}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Team_membership} Response
		 */
		TeamsSlashadd_or_update_membership_for_user_legacy(team_id: number, username: string, requestBody: TeamsSlashadd_or_update_membership_for_user_legacyPutBody): Observable<Team_membership> {
			return this.http.put<Team_membership>(this.baseUri + 'teams/' + team_id + '/memberships/' + (username == null ? '' : encodeURIComponent(username)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List team projects (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-projects) endpoint.
		 * Lists the organization projects for a team.
		 * Get teams/{team_id}/projects
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team_project>} Response
		 */
		TeamsSlashlist_projects_legacy(team_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team_project>> {
			return this.http.get<Array<Team_project>>(this.baseUri + 'teams/' + team_id + '/projects?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove a project from a team (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-a-project-from-a-team) endpoint.
		 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
		 * Delete teams/{team_id}/projects/{project_id}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} project_id The unique identifier of the project.
		 * @return {void} 
		 */
		TeamsSlashremove_project_legacy(team_id: number, project_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id + '/projects/' + project_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check team permissions for a project (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
		 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
		 * Get teams/{team_id}/projects/{project_id}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} project_id The unique identifier of the project.
		 * @return {Team_project} Response
		 */
		TeamsSlashcheck_permissions_for_project_legacy(team_id: number, project_id: number): Observable<Team_project> {
			return this.http.get<Team_project>(this.baseUri + 'teams/' + team_id + '/projects/' + project_id, {});
		}

		/**
		 * Add or update team project permissions (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
		 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
		 * Put teams/{team_id}/projects/{project_id}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} project_id The unique identifier of the project.
		 * @return {void} 
		 */
		TeamsSlashadd_or_update_project_permissions_legacy(team_id: number, project_id: number, requestBody: TeamsSlashadd_or_update_project_permissions_legacyPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'teams/' + team_id + '/projects/' + project_id, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List team repositories (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-repositories) endpoint.
		 * Get teams/{team_id}/repos
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		TeamsSlashlist_repos_legacy(team_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'teams/' + team_id + '/repos?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove a repository from a team (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
		 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
		 * Delete teams/{team_id}/repos/{owner}/{repo}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		TeamsSlashremove_repo_legacy(team_id: number, owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'teams/' + team_id + '/repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check team permissions for a repository (Legacy)
		 * **Note**: Repositories inherited through a parent team will also be checked.
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
		 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:
		 * Get teams/{team_id}/repos/{owner}/{repo}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {Team_repository} Alternative response with extra repository information
		 */
		TeamsSlashcheck_permissions_for_repo_legacy(team_id: number, owner: string, repo: string): Observable<Team_repository> {
			return this.http.get<Team_repository>(this.baseUri + 'teams/' + team_id + '/repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), {});
		}

		/**
		 * Add or update team repository permissions (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
		 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
		 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put teams/{team_id}/repos/{owner}/{repo}
		 * @param {number} team_id The unique identifier of the team.
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		TeamsSlashadd_or_update_repo_permissions_legacy(team_id: number, owner: string, repo: string, requestBody: TeamsSlashadd_or_update_repo_permissions_legacyPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'teams/' + team_id + '/repos/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List child teams (Legacy)
		 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-child-teams) endpoint.
		 * Get teams/{team_id}/teams
		 * @param {number} team_id The unique identifier of the team.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team>} if child teams exist
		 */
		TeamsSlashlist_child_legacy(team_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team>> {
			return this.http.get<Array<Team>>(this.baseUri + 'teams/' + team_id + '/teams?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get the authenticated user
		 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
		 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
		 * Get user
		 * @return {Private_user} Response
		 */
		UsersSlashget_authenticated(): Observable<Private_user> {
			return this.http.get<Private_user>(this.baseUri + 'user', {});
		}

		/**
		 * Update the authenticated user
		 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
		 * Patch user
		 * @return {Private_user} Response
		 */
		UsersSlashupdate_authenticated(requestBody: UsersSlashupdate_authenticatedPatchBody): Observable<Private_user> {
			return this.http.patch<Private_user>(this.baseUri + 'user', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete an email address for the authenticated user
		 * This endpoint is accessible with the `user` scope.
		 * Delete user/emails
		 * @return {void} 
		 */
		UsersSlashdelete_email_for_authenticated_user(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/emails', { observe: 'response', responseType: 'text' });
		}

		/**
		 * List email addresses for the authenticated user
		 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
		 * Get user/emails
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Email>} Response
		 */
		UsersSlashlist_emails_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Email>> {
			return this.http.get<Array<Email>>(this.baseUri + 'user/emails?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Add an email address for the authenticated user
		 * This endpoint is accessible with the `user` scope.
		 * Post user/emails
		 * @return {void} 
		 */
		UsersSlashadd_email_for_authenticated_user(requestBody: UsersSlashadd_email_for_authenticated_userPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'user/emails', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List followers of the authenticated user
		 * Lists the people following the authenticated user.
		 * Get user/followers
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		UsersSlashlist_followers_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'user/followers?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List the people the authenticated user follows
		 * Lists the people who the authenticated user follows.
		 * Get user/following
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		UsersSlashlist_followed_by_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'user/following?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Unfollow a user
		 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
		 * Delete user/following/{username}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		UsersSlashunfollow(username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/following/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check if a person is followed by the authenticated user
		 * Get user/following/{username}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		UsersSlashcheck_person_is_followed_by_authenticated(username: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'user/following/' + (username == null ? '' : encodeURIComponent(username)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Follow a user
		 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
		 * Put user/following/{username}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		UsersSlashfollow(username: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'user/following/' + (username == null ? '' : encodeURIComponent(username)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List GPG keys for the authenticated user
		 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get user/gpg_keys
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Gpg_key>} Response
		 */
		UsersSlashlist_gpg_keys_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Gpg_key>> {
			return this.http.get<Array<Gpg_key>>(this.baseUri + 'user/gpg_keys?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a GPG key for the authenticated user
		 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Post user/gpg_keys
		 * @return {void} 
		 */
		UsersSlashcreate_gpg_key_for_authenticated_user(requestBody: UsersSlashcreate_gpg_key_for_authenticated_userPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'user/gpg_keys', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a GPG key for the authenticated user
		 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Delete user/gpg_keys/{gpg_key_id}
		 * @param {number} gpg_key_id The unique identifier of the GPG key.
		 * @return {void} 
		 */
		UsersSlashdelete_gpg_key_for_authenticated_user(gpg_key_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/gpg_keys/' + gpg_key_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a GPG key for the authenticated user
		 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get user/gpg_keys/{gpg_key_id}
		 * @param {number} gpg_key_id The unique identifier of the GPG key.
		 * @return {Gpg_key} Response
		 */
		UsersSlashget_gpg_key_for_authenticated_user(gpg_key_id: number): Observable<Gpg_key> {
			return this.http.get<Gpg_key>(this.baseUri + 'user/gpg_keys/' + gpg_key_id, {});
		}

		/**
		 * List app installations accessible to the user access token
		 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
		 * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
		 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
		 * You can find the permissions for the installation under the `permissions` key.
		 * Get user/installations
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {AppsSlashlist_installations_for_authenticated_userReturn} You can find the permissions for the installation under the `permissions` key.
		 */
		AppsSlashlist_installations_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<AppsSlashlist_installations_for_authenticated_userReturn> {
			return this.http.get<AppsSlashlist_installations_for_authenticated_userReturn>(this.baseUri + 'user/installations?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List repositories accessible to the user access token
		 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
		 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
		 * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
		 * The access the user has to each repository is included in the hash under the `permissions` key.
		 * Get user/installations/{installation_id}/repositories
		 * @param {number} installation_id The unique identifier of the installation.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {AppsSlashlist_installation_repos_for_authenticated_userReturn} The access the user has to each repository is included in the hash under the `permissions` key.
		 */
		AppsSlashlist_installation_repos_for_authenticated_user(installation_id: number, per_page: number | null | undefined, page: number | null | undefined): Observable<AppsSlashlist_installation_repos_for_authenticated_userReturn> {
			return this.http.get<AppsSlashlist_installation_repos_for_authenticated_userReturn>(this.baseUri + 'user/installations/' + installation_id + '/repositories?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Remove a repository from an app installation
		 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
		 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.1/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
		 * Delete user/installations/{installation_id}/repositories/{repository_id}
		 * @param {number} installation_id The unique identifier of the installation.
		 * @param {number} repository_id The unique identifier of the repository.
		 * @return {void} 
		 */
		AppsSlashremove_repo_from_installation_for_authenticated_user(installation_id: number, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/installations/' + installation_id + '/repositories/' + repository_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add a repository to an app installation
		 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
		 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.1/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
		 * Put user/installations/{installation_id}/repositories/{repository_id}
		 * @param {number} installation_id The unique identifier of the installation.
		 * @param {number} repository_id The unique identifier of the repository.
		 * @return {void} 
		 */
		AppsSlashadd_repo_to_installation_for_authenticated_user(installation_id: number, repository_id: number): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'user/installations/' + installation_id + '/repositories/' + repository_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List user account issues assigned to the authenticated user
		 * List issues across owned and member repositories assigned to the authenticated user.
		 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
		 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
		 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
		 * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)" endpoint.
		 * Get user/issues
		 * @param {IssuesSlashlistFilter} filter Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
		 * @param {IssuesSlashlistState} state Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
		 * @param {string} labels A list of comma separated label names. Example: `bug,ui,@high`
		 * @param {IssuesSlashlistSort} sort What to sort results by. Can be either `created`, `updated`, `comments`.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Issue>} Response
		 */
		IssuesSlashlist_for_authenticated_user(filter: IssuesSlashlistFilter | null | undefined, state: IssuesSlashlistState | null | undefined, labels: string | null | undefined, sort: IssuesSlashlistSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Issue>> {
			return this.http.get<Array<Issue>>(this.baseUri + 'user/issues?filter=' + filter + '&state=' + state + '&labels=' + (labels == null ? '' : encodeURIComponent(labels)) + '&sort=' + sort + '&direction=' + direction + '&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List public SSH keys for the authenticated user
		 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get user/keys
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Key>} Response
		 */
		UsersSlashlist_public_ssh_keys_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Key>> {
			return this.http.get<Array<Key>>(this.baseUri + 'user/keys?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a public SSH key for the authenticated user
		 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Post user/keys
		 * @return {void} 
		 */
		UsersSlashcreate_public_ssh_key_for_authenticated_user(requestBody: UsersSlashcreate_public_ssh_key_for_authenticated_userPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'user/keys', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a public SSH key for the authenticated user
		 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Delete user/keys/{key_id}
		 * @param {number} key_id The unique identifier of the key.
		 * @return {void} 
		 */
		UsersSlashdelete_public_ssh_key_for_authenticated_user(key_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/keys/' + key_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get a public SSH key for the authenticated user
		 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
		 * Get user/keys/{key_id}
		 * @param {number} key_id The unique identifier of the key.
		 * @return {Key} Response
		 */
		UsersSlashget_public_ssh_key_for_authenticated_user(key_id: number): Observable<Key> {
			return this.http.get<Key>(this.baseUri + 'user/keys/' + key_id, {});
		}

		/**
		 * List organization memberships for the authenticated user
		 * Get user/memberships/orgs
		 * @param {Org_membershipState} state Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Org_membership>} Response
		 */
		OrgsSlashlist_memberships_for_authenticated_user(state: Org_membershipState | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Org_membership>> {
			return this.http.get<Array<Org_membership>>(this.baseUri + 'user/memberships/orgs?state=' + state + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get an organization membership for the authenticated user
		 * Get user/memberships/orgs/{org}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Org_membership} Response
		 */
		OrgsSlashget_membership_for_authenticated_user(org: string): Observable<Org_membership> {
			return this.http.get<Org_membership>(this.baseUri + 'user/memberships/orgs/' + (org == null ? '' : encodeURIComponent(org)), {});
		}

		/**
		 * Update an organization membership for the authenticated user
		 * Patch user/memberships/orgs/{org}
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @return {Org_membership} Response
		 */
		OrgsSlashupdate_membership_for_authenticated_user(org: string, requestBody: OrgsSlashupdate_membership_for_authenticated_userPatchBody): Observable<Org_membership> {
			return this.http.patch<Org_membership>(this.baseUri + 'user/memberships/orgs/' + (org == null ? '' : encodeURIComponent(org)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List organizations for the authenticated user
		 * List organizations for the authenticated user.
		 * **OAuth scope requirements**
		 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
		 * Get user/orgs
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Organization_simple>} Response
		 */
		OrgsSlashlist_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Organization_simple>> {
			return this.http.get<Array<Organization_simple>>(this.baseUri + 'user/orgs?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Create a user project
		 * Post user/projects
		 * @return {void} 
		 */
		ProjectsSlashcreate_for_authenticated_user(requestBody: ProjectsSlashcreate_for_authenticated_userPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'user/projects', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List public email addresses for the authenticated user
		 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.1/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
		 * Get user/public_emails
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Email>} Response
		 */
		UsersSlashlist_public_emails_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Email>> {
			return this.http.get<Array<Email>>(this.baseUri + 'user/public_emails?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List repositories for the authenticated user
		 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
		 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
		 * Get user/repos
		 * @param {ReposSlashlist_for_authenticated_userVisibility} visibility Limit results to repositories with the specified visibility.
		 * @param {string} affiliation Comma-separated list of values. Can include:  
		 * \* `owner`: Repositories that are owned by the authenticated user.  
		 * \* `collaborator`: Repositories that the user has been added to as a collaborator.  
		 * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
		 * @param {ReposSlashlist_for_authenticated_userType} type Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
		 * @param {ReposSlashlist_for_orgSort} sort The property to sort the results by.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {Date} before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @return {Array<Repository>} Response
		 */
		ReposSlashlist_for_authenticated_user(visibility: ReposSlashlist_for_authenticated_userVisibility | null | undefined, affiliation: string | null | undefined, type: ReposSlashlist_for_authenticated_userType | null | undefined, sort: ReposSlashlist_for_orgSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined, since: Date | null | undefined, before: Date | null | undefined): Observable<Array<Repository>> {
			return this.http.get<Array<Repository>>(this.baseUri + 'user/repos?visibility=' + visibility + '&affiliation=' + (affiliation == null ? '' : encodeURIComponent(affiliation)) + '&type=' + type + '&sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page + '&since=' + since?.toISOString() + '&before=' + before?.toISOString(), {});
		}

		/**
		 * Create a repository for the authenticated user
		 * Creates a new repository for the authenticated user.
		 * **OAuth scope requirements**
		 * When using [OAuth](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
		 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
		 * *   `repo` scope to create a private repository.
		 * Post user/repos
		 * @return {void} 
		 */
		ReposSlashcreate_for_authenticated_user(requestBody: ReposSlashcreate_for_authenticated_userPostBody): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'user/repos', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List repository invitations for the authenticated user
		 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
		 * Get user/repository_invitations
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Repository_invitation>} Response
		 */
		ReposSlashlist_invitations_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Repository_invitation>> {
			return this.http.get<Array<Repository_invitation>>(this.baseUri + 'user/repository_invitations?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Decline a repository invitation
		 * Delete user/repository_invitations/{invitation_id}
		 * @param {number} invitation_id The unique identifier of the invitation.
		 * @return {void} 
		 */
		ReposSlashdecline_invitation_for_authenticated_user(invitation_id: number): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/repository_invitations/' + invitation_id, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Accept a repository invitation
		 * Patch user/repository_invitations/{invitation_id}
		 * @param {number} invitation_id The unique identifier of the invitation.
		 * @return {void} 
		 */
		ReposSlashaccept_invitation_for_authenticated_user(invitation_id: number): Observable<HttpResponse<string>> {
			return this.http.patch(this.baseUri + 'user/repository_invitations/' + invitation_id, null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List repositories starred by the authenticated user
		 * Lists repositories the authenticated user has starred.
		 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:
		 * Get user/starred
		 * @param {IssuesSlashlist_comments_for_repoSort} sort The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Repository>} Response
		 */
		ActivitySlashlist_repos_starred_by_authenticated_user(sort: IssuesSlashlist_comments_for_repoSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Repository>> {
			return this.http.get<Array<Repository>>(this.baseUri + 'user/starred?sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Unstar a repository for the authenticated user
		 * Delete user/starred/{owner}/{repo}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActivitySlashunstar_repo_for_authenticated_user(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'user/starred/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Check if a repository is starred by the authenticated user
		 * Get user/starred/{owner}/{repo}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActivitySlashcheck_repo_is_starred_by_authenticated_user(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'user/starred/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Star a repository for the authenticated user
		 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put user/starred/{owner}/{repo}
		 * @param {string} owner The account owner of the repository. The name is not case sensitive.
		 * @param {string} repo The name of the repository. The name is not case sensitive.
		 * @return {void} 
		 */
		ActivitySlashstar_repo_for_authenticated_user(owner: string, repo: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'user/starred/' + (owner == null ? '' : encodeURIComponent(owner)) + '/' + (repo == null ? '' : encodeURIComponent(repo)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List repositories watched by the authenticated user
		 * Lists repositories the authenticated user is watching.
		 * Get user/subscriptions
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		ActivitySlashlist_watched_repos_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'user/subscriptions?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List teams for the authenticated user
		 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/).
		 * Get user/teams
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Team_full>} Response
		 */
		TeamsSlashlist_for_authenticated_user(per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Team_full>> {
			return this.http.get<Array<Team_full>>(this.baseUri + 'user/teams?per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List users
		 * Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.
		 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
		 * Get users
		 * @param {number} since A user ID. Only return users with an ID greater than this ID.
		 * @param {number} per_page The number of results per page (max 100).
		 * @return {Array<Simple_user>} Response
		 */
		UsersSlashlist(since: number | null | undefined, per_page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'users?since=' + since + '&per_page=' + per_page, {});
		}

		/**
		 * Get a user
		 * Provides publicly available information about someone with a GitHub account.
		 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"
		 * The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#authentication).
		 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@3.1/rest/reference/users#emails)".
		 * Get users/{username}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Private_user} Response
		 */
		UsersSlashget_by_username(username: string): Observable<Private_user> {
			return this.http.get<Private_user>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)), {});
		}

		/**
		 * List events for the authenticated user
		 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
		 * Get users/{username}/events
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_events_for_authenticated_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List organization events for the authenticated user
		 * This is the user's organization dashboard. You must be authenticated as the user to view this.
		 * Get users/{username}/events/orgs/{org}
		 * @param {string} username The handle for the GitHub user account.
		 * @param {string} org The organization name. The name is not case sensitive.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_org_events_for_authenticated_user(username: string, org: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/events/orgs/' + (org == null ? '' : encodeURIComponent(org)) + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List public events for a user
		 * Get users/{username}/events/public
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_public_events_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/events/public&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List followers of a user
		 * Lists the people following the specified user.
		 * Get users/{username}/followers
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		UsersSlashlist_followers_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/followers&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List the people a user follows
		 * Lists the people who the specified user follows.
		 * Get users/{username}/following
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Simple_user>} Response
		 */
		UsersSlashlist_following_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Simple_user>> {
			return this.http.get<Array<Simple_user>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/following&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Check if a user follows another user
		 * Get users/{username}/following/{target_user}
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		UsersSlashcheck_following_for_user(username: string, target_user: string): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/following/' + (target_user == null ? '' : encodeURIComponent(target_user)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * List gists for a user
		 * Lists public gists for the specified user:
		 * Get users/{username}/gists
		 * @param {string} username The handle for the GitHub user account.
		 * @param {Date} since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Base_gist>} Response
		 */
		GistsSlashlist_for_user(username: string, since: Date | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Base_gist>> {
			return this.http.get<Array<Base_gist>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/gists&since=' + since?.toISOString() + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List GPG keys for a user
		 * Lists the GPG keys for a user. This information is accessible by anyone.
		 * Get users/{username}/gpg_keys
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Gpg_key>} Response
		 */
		UsersSlashlist_gpg_keys_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Gpg_key>> {
			return this.http.get<Array<Gpg_key>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/gpg_keys&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Get contextual information for a user
		 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
		 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
		 * ```shell
		 * curl -u username:token
		 * https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
		 * ```
		 * Get users/{username}/hovercard
		 * @param {string} username The handle for the GitHub user account.
		 * @param {UsersSlashget_context_for_userSubject_type} subject_type Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
		 * @param {string} subject_id Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
		 * @return {Hovercard} Response
		 */
		UsersSlashget_context_for_user(username: string, subject_type: UsersSlashget_context_for_userSubject_type | null | undefined, subject_id: string | null | undefined): Observable<Hovercard> {
			return this.http.get<Hovercard>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/hovercard&subject_type=' + subject_type + '&subject_id=' + (subject_id == null ? '' : encodeURIComponent(subject_id)), {});
		}

		/**
		 * Get a user installation for the authenticated app
		 * Enables an authenticated GitHub App to find the user’s installation information.
		 * You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
		 * Get users/{username}/installation
		 * @param {string} username The handle for the GitHub user account.
		 * @return {Installation} Response
		 */
		AppsSlashget_user_installation(username: string): Observable<Installation> {
			return this.http.get<Installation>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/installation', {});
		}

		/**
		 * List public keys for a user
		 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
		 * Get users/{username}/keys
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Key_simple>} Response
		 */
		UsersSlashlist_public_keys_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Key_simple>> {
			return this.http.get<Array<Key_simple>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/keys&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List organizations for a user
		 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
		 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
		 * Get users/{username}/orgs
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Organization_simple>} Response
		 */
		OrgsSlashlist_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Organization_simple>> {
			return this.http.get<Array<Organization_simple>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/orgs&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List user projects
		 * Get users/{username}/projects
		 * @param {string} username The handle for the GitHub user account.
		 * @param {IssuesSlashlistState} state Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Project>} Response
		 */
		ProjectsSlashlist_for_user(username: string, state: IssuesSlashlistState | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Project>> {
			return this.http.get<Array<Project>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/projects&state=' + state + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List events received by the authenticated user
		 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
		 * Get users/{username}/received_events
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_received_events_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/received_events&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List public events received by a user
		 * Get users/{username}/received_events/public
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Event>} Response
		 */
		ActivitySlashlist_received_public_events_for_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Event>> {
			return this.http.get<Array<Event>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/received_events/public&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List repositories for a user
		 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
		 * Get users/{username}/repos
		 * @param {string} username The handle for the GitHub user account.
		 * @param {ReposSlashlist_for_userType} type Limit results to repositories of the specified type.
		 * @param {ReposSlashlist_for_orgSort} sort The property to sort the results by.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		ReposSlashlist_for_user(username: string, type: ReposSlashlist_for_userType | null | undefined, sort: ReposSlashlist_for_orgSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/repos&type=' + type + '&sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Demote a site administrator
		 * You can demote any user account except your own.
		 * Delete users/{username}/site_admin
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashdemote_site_administrator(username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/site_admin', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Promote a user to be a site administrator
		 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put users/{username}/site_admin
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashpromote_user_to_be_site_administrator(username: string): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/site_admin', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List repositories starred by a user
		 * Lists repositories a user has starred.
		 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:
		 * Get users/{username}/starred
		 * @param {string} username The handle for the GitHub user account.
		 * @param {IssuesSlashlist_comments_for_repoSort} sort The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
		 * @param {Enterprise_adminSlashlist_public_keysDirection} direction The direction to sort the results by.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Starred_repository>} Response
		 */
		ActivitySlashlist_repos_starred_by_user(username: string, sort: IssuesSlashlist_comments_for_repoSort | null | undefined, direction: Enterprise_adminSlashlist_public_keysDirection | null | undefined, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Starred_repository>> {
			return this.http.get<Array<Starred_repository>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/starred&sort=' + sort + '&direction=' + direction + '&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * List repositories watched by a user
		 * Lists repositories a user is watching.
		 * Get users/{username}/subscriptions
		 * @param {string} username The handle for the GitHub user account.
		 * @param {number} per_page The number of results per page (max 100).
		 * @param {number} page Page number of the results to fetch.
		 * @return {Array<Minimal_repository>} Response
		 */
		ActivitySlashlist_repos_watched_by_user(username: string, per_page: number | null | undefined, page: number | null | undefined): Observable<Array<Minimal_repository>> {
			return this.http.get<Array<Minimal_repository>>(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/subscriptions&per_page=' + per_page + '&page=' + page, {});
		}

		/**
		 * Unsuspend a user
		 * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
		 * Delete users/{username}/suspended
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashunsuspend_user(username: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/suspended', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Suspend a user
		 * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
		 * You can suspend any user account except your own.
		 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
		 * Put users/{username}/suspended
		 * @param {string} username The handle for the GitHub user account.
		 * @return {void} 
		 */
		Enterprise_adminSlashsuspend_user(username: string, requestBody: Enterprise_adminSlashsuspend_userPutBody): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'users/' + (username == null ? '' : encodeURIComponent(username)) + '/suspended', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get the Zen of GitHub
		 * Get a random sentence from the Zen of GitHub
		 * Get zen
		 * @return {string} Response
		 */
		MetaSlashget_zen(): Observable<string> {
			return this.http.get(this.baseUri + 'zen', { responseType: 'text' });
		}
	}

	export interface Enterprise_adminSlashcreate_global_webhookPostBody {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active?: boolean | null;

		/**
		 * Key/value pairs to provide settings for this webhook.
		 * Required
		 */
		config: Enterprise_adminSlashcreate_global_webhookPostBodyConfig;

		/** The [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
		events?: Array<string>;

		/**
		 * Must be passed as "web".
		 * Required
		 */
		name: string;
	}
	export interface Enterprise_adminSlashcreate_global_webhookPostBodyFormProperties {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active: FormControl<boolean | null | undefined>,

		/**
		 * Must be passed as "web".
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_global_webhookPostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_global_webhookPostBodyFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashcreate_global_webhookPostBodyConfig {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;

		/** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
		insecure_ssl?: string | null;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header. */
		secret?: string | null;

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: string;
	}
	export interface Enterprise_adminSlashcreate_global_webhookPostBodyConfigFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
		insecure_ssl: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_global_webhookPostBodyConfigFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_global_webhookPostBodyConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			insecure_ssl: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashupdate_global_webhookPatchBody {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active?: boolean | null;

		/** Key/value pairs to provide settings for this webhook. */
		config?: Enterprise_adminSlashupdate_global_webhookPatchBodyConfig;

		/** The [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
		events?: Array<string>;
	}
	export interface Enterprise_adminSlashupdate_global_webhookPatchBodyFormProperties {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active: FormControl<boolean | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_global_webhookPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_global_webhookPatchBodyFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashupdate_global_webhookPatchBodyConfig {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;

		/** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
		insecure_ssl?: string | null;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header. */
		secret?: string | null;

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: string;
	}
	export interface Enterprise_adminSlashupdate_global_webhookPatchBodyConfigFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
		insecure_ssl: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_global_webhookPatchBodyConfigFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_global_webhookPatchBodyConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			insecure_ssl: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Enterprise_adminSlashlist_public_keysDirection { asc = 0, desc = 1 }

	export enum Enterprise_adminSlashlist_public_keysSort { created = 0, updated = 1, accessed = 2 }

	export interface Enterprise_adminSlashupdate_ldap_mapping_for_teamPatchBody {

		/**
		 * The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.
		 * Required
		 */
		ldap_dn: string;
	}
	export interface Enterprise_adminSlashupdate_ldap_mapping_for_teamPatchBodyFormProperties {

		/**
		 * The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.
		 * Required
		 */
		ldap_dn: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_ldap_mapping_for_teamPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_ldap_mapping_for_teamPatchBodyFormProperties>({
			ldap_dn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashupdate_ldap_mapping_for_userPatchBody {

		/**
		 * The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.
		 * Required
		 */
		ldap_dn: string;
	}
	export interface Enterprise_adminSlashupdate_ldap_mapping_for_userPatchBodyFormProperties {

		/**
		 * The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.
		 * Required
		 */
		ldap_dn: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_ldap_mapping_for_userPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_ldap_mapping_for_userPatchBodyFormProperties>({
			ldap_dn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashcreate_orgPostBody {

		/**
		 * The login of the user who will manage this organization.
		 * Required
		 */
		admin: string;

		/**
		 * The organization's username.
		 * Required
		 */
		login: string;

		/** The organization's display name. */
		profile_name?: string | null;
	}
	export interface Enterprise_adminSlashcreate_orgPostBodyFormProperties {

		/**
		 * The login of the user who will manage this organization.
		 * Required
		 */
		admin: FormControl<string | null | undefined>,

		/**
		 * The organization's username.
		 * Required
		 */
		login: FormControl<string | null | undefined>,

		/** The organization's display name. */
		profile_name: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_orgPostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_orgPostBodyFormProperties>({
			admin: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			profile_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashupdate_org_namePatchBody {

		/**
		 * The organization's new name.
		 * Required
		 */
		login: string;
	}
	export interface Enterprise_adminSlashupdate_org_namePatchBodyFormProperties {

		/**
		 * The organization's new name.
		 * Required
		 */
		login: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_org_namePatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_org_namePatchBodyFormProperties>({
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Enterprise_adminSlashlist_pre_receive_environmentsSort { created = 0, updated = 1, name = 2 }

	export interface Enterprise_adminSlashcreate_pre_receive_environmentPostBody {

		/**
		 * URL from which to download a tarball of this environment.
		 * Required
		 */
		image_url: string;

		/**
		 * The new pre-receive environment's name.
		 * Required
		 */
		name: string;
	}
	export interface Enterprise_adminSlashcreate_pre_receive_environmentPostBodyFormProperties {

		/**
		 * URL from which to download a tarball of this environment.
		 * Required
		 */
		image_url: FormControl<string | null | undefined>,

		/**
		 * The new pre-receive environment's name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_pre_receive_environmentPostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_pre_receive_environmentPostBodyFormProperties>({
			image_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashupdate_pre_receive_environmentPatchBody {

		/** URL from which to download a tarball of this environment. */
		image_url?: string | null;

		/** This pre-receive environment's new name. */
		name?: string | null;
	}
	export interface Enterprise_adminSlashupdate_pre_receive_environmentPatchBodyFormProperties {

		/** URL from which to download a tarball of this environment. */
		image_url: FormControl<string | null | undefined>,

		/** This pre-receive environment's new name. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_pre_receive_environmentPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_pre_receive_environmentPatchBodyFormProperties>({
			image_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashcreate_pre_receive_hookPostBody {

		/** Whether enforcement can be overridden at the org or repo level. default: `false` */
		allow_downstream_configuration?: boolean | null;

		/** The state of enforcement for this hook. default: `disabled` */
		enforcement?: string | null;

		/**
		 * The pre-receive environment where the script is executed.
		 * Required
		 */
		environment: string;

		/**
		 * The name of the hook.
		 * Required
		 */
		name: string;

		/**
		 * The script that the hook runs.
		 * Required
		 */
		script: string;

		/**
		 * The GitHub repository where the script is kept.
		 * Required
		 */
		script_repository: string;
	}
	export interface Enterprise_adminSlashcreate_pre_receive_hookPostBodyFormProperties {

		/** Whether enforcement can be overridden at the org or repo level. default: `false` */
		allow_downstream_configuration: FormControl<boolean | null | undefined>,

		/** The state of enforcement for this hook. default: `disabled` */
		enforcement: FormControl<string | null | undefined>,

		/**
		 * The pre-receive environment where the script is executed.
		 * Required
		 */
		environment: FormControl<string | null | undefined>,

		/**
		 * The name of the hook.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The script that the hook runs.
		 * Required
		 */
		script: FormControl<string | null | undefined>,

		/**
		 * The GitHub repository where the script is kept.
		 * Required
		 */
		script_repository: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_pre_receive_hookPostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_pre_receive_hookPostBodyFormProperties>({
			allow_downstream_configuration: new FormControl<boolean | null | undefined>(undefined),
			enforcement: new FormControl<string | null | undefined>(undefined),
			environment: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			script: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			script_repository: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashupdate_pre_receive_hookPatchBody {

		/** Whether enforcement can be overridden at the org or repo level. */
		allow_downstream_configuration?: boolean | null;

		/** The state of enforcement for this hook. */
		enforcement?: string | null;

		/** The pre-receive environment where the script is executed. */
		environment?: string | null;

		/** The name of the hook. */
		name?: string | null;

		/** The script that the hook runs. */
		script?: string | null;

		/** The GitHub repository where the script is kept. */
		script_repository?: string | null;
	}
	export interface Enterprise_adminSlashupdate_pre_receive_hookPatchBodyFormProperties {

		/** Whether enforcement can be overridden at the org or repo level. */
		allow_downstream_configuration: FormControl<boolean | null | undefined>,

		/** The state of enforcement for this hook. */
		enforcement: FormControl<string | null | undefined>,

		/** The pre-receive environment where the script is executed. */
		environment: FormControl<string | null | undefined>,

		/** The name of the hook. */
		name: FormControl<string | null | undefined>,

		/** The script that the hook runs. */
		script: FormControl<string | null | undefined>,

		/** The GitHub repository where the script is kept. */
		script_repository: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_pre_receive_hookPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_pre_receive_hookPatchBodyFormProperties>({
			allow_downstream_configuration: new FormControl<boolean | null | undefined>(undefined),
			enforcement: new FormControl<string | null | undefined>(undefined),
			environment: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			script: new FormControl<string | null | undefined>(undefined),
			script_repository: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashcreate_userPostBody {

		/**
		 * **Required for built-in authentication.** The user's email
		 * address. This parameter can be omitted when using CAS, LDAP, or SAML.
		 * For more information, see "[About authentication for your enterprise](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise)."
		 */
		email?: string | null;

		/**
		 * The user's username.
		 * Required
		 */
		login: string;
	}
	export interface Enterprise_adminSlashcreate_userPostBodyFormProperties {

		/**
		 * **Required for built-in authentication.** The user's email
		 * address. This parameter can be omitted when using CAS, LDAP, or SAML.
		 * For more information, see "[About authentication for your enterprise](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise)."
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The user's username.
		 * Required
		 */
		login: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_userPostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_userPostBodyFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashupdate_username_for_userPatchBody {

		/**
		 * The user's new username.
		 * Required
		 */
		login: string;
	}
	export interface Enterprise_adminSlashupdate_username_for_userPatchBodyFormProperties {

		/**
		 * The user's new username.
		 * Required
		 */
		login: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_username_for_userPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_username_for_userPatchBodyFormProperties>({
			login: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashcreate_impersonation_o_auth_tokenPostBody {

		/** A list of [scopes](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
		scopes?: Array<string>;
	}
	export interface Enterprise_adminSlashcreate_impersonation_o_auth_tokenPostBodyFormProperties {
	}
	export function CreateEnterprise_adminSlashcreate_impersonation_o_auth_tokenPostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_impersonation_o_auth_tokenPostBodyFormProperties>({
		});

	}

	export interface AppsSlashupdate_webhook_config_for_appPatchBody {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/** The URL to which the payloads will be delivered. */
		url?: string | null;
	}
	export interface AppsSlashupdate_webhook_config_for_appPatchBodyFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/** The URL to which the payloads will be delivered. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateAppsSlashupdate_webhook_config_for_appPatchBodyFormGroup() {
		return new FormGroup<AppsSlashupdate_webhook_config_for_appPatchBodyFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AppsSlashcreate_installation_access_tokenPostBody {

		/** The permissions granted to the user-to-server access token. */
		permissions?: App_permissions;

		/** List of repository names that the token should have access to */
		repositories?: Array<string>;

		/** List of repository IDs that the token should have access to */
		repository_ids?: Array<number>;
	}
	export interface AppsSlashcreate_installation_access_tokenPostBodyFormProperties {
	}
	export function CreateAppsSlashcreate_installation_access_tokenPostBodyFormGroup() {
		return new FormGroup<AppsSlashcreate_installation_access_tokenPostBodyFormProperties>({
		});

	}

	export interface AppsSlashreset_tokenPatchBody {

		/**
		 * The access_token of the OAuth application.
		 * Required
		 */
		access_token: string;
	}
	export interface AppsSlashreset_tokenPatchBodyFormProperties {

		/**
		 * The access_token of the OAuth application.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,
	}
	export function CreateAppsSlashreset_tokenPatchBodyFormGroup() {
		return new FormGroup<AppsSlashreset_tokenPatchBodyFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AppsSlashcheck_tokenPostBody {

		/**
		 * The access_token of the OAuth application.
		 * Required
		 */
		access_token: string;
	}
	export interface AppsSlashcheck_tokenPostBodyFormProperties {

		/**
		 * The access_token of the OAuth application.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,
	}
	export function CreateAppsSlashcheck_tokenPostBodyFormGroup() {
		return new FormGroup<AppsSlashcheck_tokenPostBodyFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AppsSlashscope_tokenPostBody {

		/**
		 * The OAuth access token used to authenticate to the GitHub API.
		 * Required
		 */
		access_token: string;

		/** The permissions granted to the user-to-server access token. */
		permissions?: App_permissions;

		/** The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */
		repositories?: Array<string>;

		/** The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified. */
		repository_ids?: Array<number>;

		/** The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified. */
		target?: string | null;

		/** The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified. */
		target_id?: number | null;
	}
	export interface AppsSlashscope_tokenPostBodyFormProperties {

		/**
		 * The OAuth access token used to authenticate to the GitHub API.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified. */
		target: FormControl<string | null | undefined>,

		/** The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified. */
		target_id: FormControl<number | null | undefined>,
	}
	export function CreateAppsSlashscope_tokenPostBodyFormGroup() {
		return new FormGroup<AppsSlashscope_tokenPostBodyFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target: new FormControl<string | null | undefined>(undefined),
			target_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Oauth_authorizationsSlashcreate_authorizationPostBody {

		/**
		 * The OAuth app client key for which to create the token.
		 * Max length: 20
		 */
		client_id?: string | null;

		/**
		 * The OAuth app client secret for which to create the token.
		 * Max length: 40
		 */
		client_secret?: string | null;

		/** A unique string to distinguish an authorization from others created for the same client ID and user. */
		fingerprint?: string | null;

		/** A note to remind you what the OAuth token is for. */
		note?: string | null;

		/** A URL to remind you what app the OAuth token is for. */
		note_url?: string | null;

		/** A list of scopes that this authorization is in. */
		scopes?: Array<string>;
	}
	export interface Oauth_authorizationsSlashcreate_authorizationPostBodyFormProperties {

		/**
		 * The OAuth app client key for which to create the token.
		 * Max length: 20
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The OAuth app client secret for which to create the token.
		 * Max length: 40
		 */
		client_secret: FormControl<string | null | undefined>,

		/** A unique string to distinguish an authorization from others created for the same client ID and user. */
		fingerprint: FormControl<string | null | undefined>,

		/** A note to remind you what the OAuth token is for. */
		note: FormControl<string | null | undefined>,

		/** A URL to remind you what app the OAuth token is for. */
		note_url: FormControl<string | null | undefined>,
	}
	export function CreateOauth_authorizationsSlashcreate_authorizationPostBodyFormGroup() {
		return new FormGroup<Oauth_authorizationsSlashcreate_authorizationPostBodyFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(20)]),
			client_secret: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Oauth_authorizationsSlashget_or_create_authorization_for_appPutBody {

		/**
		 * The OAuth app client secret for which to create the token.
		 * Required
		 * Max length: 40
		 */
		client_secret: string;

		/** A unique string to distinguish an authorization from others created for the same client ID and user. */
		fingerprint?: string | null;

		/** A note to remind you what the OAuth token is for. */
		note?: string | null;

		/** A URL to remind you what app the OAuth token is for. */
		note_url?: string | null;

		/** A list of scopes that this authorization is in. */
		scopes?: Array<string>;
	}
	export interface Oauth_authorizationsSlashget_or_create_authorization_for_appPutBodyFormProperties {

		/**
		 * The OAuth app client secret for which to create the token.
		 * Required
		 * Max length: 40
		 */
		client_secret: FormControl<string | null | undefined>,

		/** A unique string to distinguish an authorization from others created for the same client ID and user. */
		fingerprint: FormControl<string | null | undefined>,

		/** A note to remind you what the OAuth token is for. */
		note: FormControl<string | null | undefined>,

		/** A URL to remind you what app the OAuth token is for. */
		note_url: FormControl<string | null | undefined>,
	}
	export function CreateOauth_authorizationsSlashget_or_create_authorization_for_appPutBodyFormGroup() {
		return new FormGroup<Oauth_authorizationsSlashget_or_create_authorization_for_appPutBodyFormProperties>({
			client_secret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Oauth_authorizationsSlashget_or_create_authorization_for_app_and_fingerprintPutBody {

		/**
		 * The OAuth app client secret for which to create the token.
		 * Required
		 * Max length: 40
		 */
		client_secret: string;

		/** A note to remind you what the OAuth token is for. */
		note?: string | null;

		/** A URL to remind you what app the OAuth token is for. */
		note_url?: string | null;

		/** A list of scopes that this authorization is in. */
		scopes?: Array<string>;
	}
	export interface Oauth_authorizationsSlashget_or_create_authorization_for_app_and_fingerprintPutBodyFormProperties {

		/**
		 * The OAuth app client secret for which to create the token.
		 * Required
		 * Max length: 40
		 */
		client_secret: FormControl<string | null | undefined>,

		/** A note to remind you what the OAuth token is for. */
		note: FormControl<string | null | undefined>,

		/** A URL to remind you what app the OAuth token is for. */
		note_url: FormControl<string | null | undefined>,
	}
	export function CreateOauth_authorizationsSlashget_or_create_authorization_for_app_and_fingerprintPutBodyFormGroup() {
		return new FormGroup<Oauth_authorizationsSlashget_or_create_authorization_for_app_and_fingerprintPutBodyFormProperties>({
			client_secret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			note: new FormControl<string | null | undefined>(undefined),
			note_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Oauth_authorizationsSlashupdate_authorizationPatchBody {

		/** A list of scopes to add to this authorization. */
		add_scopes?: Array<string>;

		/** A unique string to distinguish an authorization from others created for the same client ID and user. */
		fingerprint?: string | null;

		/** A note to remind you what the OAuth token is for. */
		note?: string | null;

		/** A URL to remind you what app the OAuth token is for. */
		note_url?: string | null;

		/** A list of scopes to remove from this authorization. */
		remove_scopes?: Array<string>;

		/** A list of scopes that this authorization is in. */
		scopes?: Array<string>;
	}
	export interface Oauth_authorizationsSlashupdate_authorizationPatchBodyFormProperties {

		/** A unique string to distinguish an authorization from others created for the same client ID and user. */
		fingerprint: FormControl<string | null | undefined>,

		/** A note to remind you what the OAuth token is for. */
		note: FormControl<string | null | undefined>,

		/** A URL to remind you what app the OAuth token is for. */
		note_url: FormControl<string | null | undefined>,
	}
	export function CreateOauth_authorizationsSlashupdate_authorizationPatchBodyFormGroup() {
		return new FormGroup<Oauth_authorizationsSlashupdate_authorizationPatchBodyFormProperties>({
			fingerprint: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			note_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashset_github_actions_permissions_enterprisePutBody {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions?: Actions_enterprise_permissionsAllowed_actions | null;

		/**
		 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_organizations: Actions_enterprise_permissionsEnabled_organizations;
	}
	export interface Enterprise_adminSlashset_github_actions_permissions_enterprisePutBodyFormProperties {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions: FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>,

		/**
		 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_organizations: FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>,
	}
	export function CreateEnterprise_adminSlashset_github_actions_permissions_enterprisePutBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashset_github_actions_permissions_enterprisePutBodyFormProperties>({
			allowed_actions: new FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>(undefined),
			enabled_organizations: new FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturn {

		/** Required */
		organizations: Array<Organization_simple>;

		/** Required */
		total_count: number;
	}
	export interface Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturnFormGroup() {
		return new FormGroup<Enterprise_adminSlashlist_selected_organizations_enabled_github_actions_enterpriseReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashset_selected_organizations_enabled_github_actions_enterprisePutBody {

		/**
		 * List of organization IDs to enable for GitHub Actions.
		 * Required
		 */
		selected_organization_ids: Array<number>;
	}
	export interface Enterprise_adminSlashset_selected_organizations_enabled_github_actions_enterprisePutBodyFormProperties {
	}
	export function CreateEnterprise_adminSlashset_selected_organizations_enabled_github_actions_enterprisePutBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashset_selected_organizations_enabled_github_actions_enterprisePutBodyFormProperties>({
		});

	}

	export interface Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturn {

		/** Required */
		runner_groups: Array<Runner_groups_enterprise>;

		/** Required */
		total_count: number;
	}
	export interface Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturnFormGroup() {
		return new FormGroup<Enterprise_adminSlashlist_self_hosted_runner_groups_for_enterpriseReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBody {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories?: boolean | null;

		/**
		 * Name of the runner group.
		 * Required
		 */
		name: string;

		/** List of runner IDs to add to the runner group. */
		runners?: Array<number>;

		/** List of organization IDs that can access the runner group. */
		selected_organization_ids?: Array<number>;

		/** Visibility of a runner group. You can select all organizations or select individual organization. */
		visibility?: Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility | null;
	}
	export interface Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyFormProperties {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories: FormControl<boolean | null | undefined>,

		/**
		 * Name of the runner group.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Visibility of a runner group. You can select all organizations or select individual organization. */
		visibility: FormControl<Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility | null | undefined>,
	}
	export function CreateEnterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyFormProperties>({
			allows_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility | null | undefined>(undefined),
		});

	}

	export enum Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility { selected = 0, all = 1 }

	export interface Enterprise_adminSlashupdate_self_hosted_runner_group_for_enterprisePatchBody {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories?: boolean | null;

		/** Name of the runner group. */
		name?: string | null;

		/** Visibility of a runner group. You can select all organizations or select individual organizations. */
		visibility?: Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility | null;
	}
	export interface Enterprise_adminSlashupdate_self_hosted_runner_group_for_enterprisePatchBodyFormProperties {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories: FormControl<boolean | null | undefined>,

		/** Name of the runner group. */
		name: FormControl<string | null | undefined>,

		/** Visibility of a runner group. You can select all organizations or select individual organizations. */
		visibility: FormControl<Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_self_hosted_runner_group_for_enterprisePatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_self_hosted_runner_group_for_enterprisePatchBodyFormProperties>({
			allows_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<Enterprise_adminSlashcreate_self_hosted_runner_group_for_enterprisePostBodyVisibility | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturn {

		/** Required */
		organizations: Array<Organization_simple>;

		/** Required */
		total_count: number;
	}
	export interface Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturnFormGroup() {
		return new FormGroup<Enterprise_adminSlashlist_org_access_to_self_hosted_runner_group_in_enterpriseReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashset_org_access_to_self_hosted_runner_group_in_enterprisePutBody {

		/**
		 * List of organization IDs that can access the runner group.
		 * Required
		 */
		selected_organization_ids: Array<number>;
	}
	export interface Enterprise_adminSlashset_org_access_to_self_hosted_runner_group_in_enterprisePutBodyFormProperties {
	}
	export function CreateEnterprise_adminSlashset_org_access_to_self_hosted_runner_group_in_enterprisePutBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashset_org_access_to_self_hosted_runner_group_in_enterprisePutBodyFormProperties>({
		});

	}

	export interface Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturn {

		/** Required */
		runners: Array<Runner>;

		/** Required */
		total_count: number;
	}
	export interface Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturnFormGroup() {
		return new FormGroup<Enterprise_adminSlashlist_self_hosted_runners_in_group_for_enterpriseReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Enterprise_adminSlashset_self_hosted_runners_in_group_for_enterprisePutBody {

		/**
		 * List of runner IDs to add to the runner group.
		 * Required
		 */
		runners: Array<number>;
	}
	export interface Enterprise_adminSlashset_self_hosted_runners_in_group_for_enterprisePutBodyFormProperties {
	}
	export function CreateEnterprise_adminSlashset_self_hosted_runners_in_group_for_enterprisePutBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashset_self_hosted_runners_in_group_for_enterprisePutBodyFormProperties>({
		});

	}

	export interface Enterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturn {
		runners?: Array<Runner>;
		total_count?: number | null;
	}
	export interface Enterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturnFormProperties {
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateEnterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturnFormGroup() {
		return new FormGroup<Enterprise_adminSlashlist_self_hosted_runners_for_enterpriseReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GistsSlashcreatePostBody {

		/** Description of the gist */
		description?: string | null;

		/**
		 * Names and content for the files that make up the gist
		 * Required
		 */
		files: {[id: string]: GistsSlashcreatePostBodyFiles };
		public?: boolean | null;
	}
	export interface GistsSlashcreatePostBodyFormProperties {

		/** Description of the gist */
		description: FormControl<string | null | undefined>,

		/**
		 * Names and content for the files that make up the gist
		 * Required
		 */
		files: FormControl<{[id: string]: GistsSlashcreatePostBodyFiles } | null | undefined>,
		public: FormControl<boolean | null | undefined>,
	}
	export function CreateGistsSlashcreatePostBodyFormGroup() {
		return new FormGroup<GistsSlashcreatePostBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			files: new FormControl<{[id: string]: GistsSlashcreatePostBodyFiles } | null | undefined>(undefined, [Validators.required]),
			public: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface GistsSlashcreatePostBodyFiles {

		/**
		 * Content of the file
		 * Required
		 */
		content: string;
	}
	export interface GistsSlashcreatePostBodyFilesFormProperties {

		/**
		 * Content of the file
		 * Required
		 */
		content: FormControl<string | null | undefined>,
	}
	export function CreateGistsSlashcreatePostBodyFilesFormGroup() {
		return new FormGroup<GistsSlashcreatePostBodyFilesFormProperties>({
			content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GistsSlashupdatePatchBody {

		/** Description of the gist */
		description?: string | null;

		/** Names of files to be updated */
		files?: {[id: string]: GistsSlashupdatePatchBodyFiles };
	}
	export interface GistsSlashupdatePatchBodyFormProperties {

		/** Description of the gist */
		description: FormControl<string | null | undefined>,

		/** Names of files to be updated */
		files: FormControl<{[id: string]: GistsSlashupdatePatchBodyFiles } | null | undefined>,
	}
	export function CreateGistsSlashupdatePatchBodyFormGroup() {
		return new FormGroup<GistsSlashupdatePatchBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			files: new FormControl<{[id: string]: GistsSlashupdatePatchBodyFiles } | null | undefined>(undefined),
		});

	}

	export interface GistsSlashupdatePatchBodyFiles {

		/** The new content of the file */
		content?: string | null;

		/** The new filename for the file */
		filename?: string | null;
	}
	export interface GistsSlashupdatePatchBodyFilesFormProperties {

		/** The new content of the file */
		content: FormControl<string | null | undefined>,

		/** The new filename for the file */
		filename: FormControl<string | null | undefined>,
	}
	export function CreateGistsSlashupdatePatchBodyFilesFormGroup() {
		return new FormGroup<GistsSlashupdatePatchBodyFilesFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			filename: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GistsSlashcreate_commentPostBody {

		/**
		 * The comment text.
		 * Required
		 * Max length: 65535
		 */
		body: string;
	}
	export interface GistsSlashcreate_commentPostBodyFormProperties {

		/**
		 * The comment text.
		 * Required
		 * Max length: 65535
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateGistsSlashcreate_commentPostBodyFormGroup() {
		return new FormGroup<GistsSlashcreate_commentPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(65535)]),
		});

	}

	export interface GistsSlashupdate_commentPatchBody {

		/**
		 * The comment text.
		 * Required
		 * Max length: 65535
		 */
		body: string;
	}
	export interface GistsSlashupdate_commentPatchBodyFormProperties {

		/**
		 * The comment text.
		 * Required
		 * Max length: 65535
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateGistsSlashupdate_commentPatchBodyFormGroup() {
		return new FormGroup<GistsSlashupdate_commentPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(65535)]),
		});

	}

	export interface AppsSlashlist_repos_accessible_to_installationReturn {

		/** Required */
		repositories: Array<Repository>;
		repository_selection?: string | null;

		/** Required */
		total_count: number;
	}
	export interface AppsSlashlist_repos_accessible_to_installationReturnFormProperties {
		repository_selection: FormControl<string | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateAppsSlashlist_repos_accessible_to_installationReturnFormGroup() {
		return new FormGroup<AppsSlashlist_repos_accessible_to_installationReturnFormProperties>({
			repository_selection: new FormControl<string | null | undefined>(undefined),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum IssuesSlashlistFilter { assigned = 0, created = 1, mentioned = 2, subscribed = 3, repos = 4, all = 5 }

	export enum IssuesSlashlistState { open = 0, closed = 1, all = 2 }

	export enum IssuesSlashlistSort { created = 0, updated = 1, comments = 2 }

	export interface MarkdownSlashrenderPostBody {

		/** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
		context?: string | null;

		/** The rendering mode. Can be either `markdown` or `gfm`. */
		mode?: MarkdownSlashrenderPostBodyMode | null;

		/**
		 * The Markdown text to render in HTML.
		 * Required
		 */
		text: string;
	}
	export interface MarkdownSlashrenderPostBodyFormProperties {

		/** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
		context: FormControl<string | null | undefined>,

		/** The rendering mode. Can be either `markdown` or `gfm`. */
		mode: FormControl<MarkdownSlashrenderPostBodyMode | null | undefined>,

		/**
		 * The Markdown text to render in HTML.
		 * Required
		 */
		text: FormControl<string | null | undefined>,
	}
	export function CreateMarkdownSlashrenderPostBodyFormGroup() {
		return new FormGroup<MarkdownSlashrenderPostBodyFormProperties>({
			context: new FormControl<string | null | undefined>(undefined),
			mode: new FormControl<MarkdownSlashrenderPostBodyMode | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum MarkdownSlashrenderPostBodyMode { markdown = 0, gfm = 1 }

	export interface ActivitySlashmark_notifications_as_readPutBody {

		/** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */
		last_read_at?: Date | null;

		/** Whether the notification has been read. */
		read?: boolean | null;
	}
	export interface ActivitySlashmark_notifications_as_readPutBodyFormProperties {

		/** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */
		last_read_at: FormControl<Date | null | undefined>,

		/** Whether the notification has been read. */
		read: FormControl<boolean | null | undefined>,
	}
	export function CreateActivitySlashmark_notifications_as_readPutBodyFormGroup() {
		return new FormGroup<ActivitySlashmark_notifications_as_readPutBodyFormProperties>({
			last_read_at: new FormControl<Date | null | undefined>(undefined),
			read: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ActivitySlashset_thread_subscriptionPutBody {

		/** Whether to block all notifications from a thread. */
		ignored?: boolean | null;
	}
	export interface ActivitySlashset_thread_subscriptionPutBodyFormProperties {

		/** Whether to block all notifications from a thread. */
		ignored: FormControl<boolean | null | undefined>,
	}
	export function CreateActivitySlashset_thread_subscriptionPutBodyFormGroup() {
		return new FormGroup<ActivitySlashset_thread_subscriptionPutBodyFormProperties>({
			ignored: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface OrgsSlashupdatePatchBody {

		/** Billing email address. This address is not publicized. */
		billing_email?: string | null;
		blog?: string | null;

		/** The company name. */
		company?: string | null;

		/** Default permission level members have for organization repositories. */
		default_repository_permission?: ProjectOrganization_permission | null;

		/** The description of the company. */
		description?: string | null;

		/** The publicly visible email address. */
		email?: string | null;

		/** Whether an organization can use organization projects. */
		has_organization_projects?: boolean | null;

		/** Whether repositories that belong to the organization can use repository projects. */
		has_repository_projects?: boolean | null;

		/** The location. */
		location?: string | null;

		/**
		 * Specifies which types of repositories non-admin organization members can create.
		 * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
		 */
		members_allowed_repository_creation_type?: OrgsSlashupdatePatchBodyMembers_allowed_repository_creation_type | null;

		/** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
		members_can_create_internal_repositories?: boolean | null;

		/** Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted. */
		members_can_create_pages?: boolean | null;

		/** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
		members_can_create_private_repositories?: boolean | null;

		/** Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
		members_can_create_public_repositories?: boolean | null;

		/** Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. */
		members_can_create_repositories?: boolean | null;

		/** The shorthand name of the company. */
		name?: string | null;

		/** The Twitter username of the company. */
		twitter_username?: string | null;
	}
	export interface OrgsSlashupdatePatchBodyFormProperties {

		/** Billing email address. This address is not publicized. */
		billing_email: FormControl<string | null | undefined>,
		blog: FormControl<string | null | undefined>,

		/** The company name. */
		company: FormControl<string | null | undefined>,

		/** Default permission level members have for organization repositories. */
		default_repository_permission: FormControl<ProjectOrganization_permission | null | undefined>,

		/** The description of the company. */
		description: FormControl<string | null | undefined>,

		/** The publicly visible email address. */
		email: FormControl<string | null | undefined>,

		/** Whether an organization can use organization projects. */
		has_organization_projects: FormControl<boolean | null | undefined>,

		/** Whether repositories that belong to the organization can use repository projects. */
		has_repository_projects: FormControl<boolean | null | undefined>,

		/** The location. */
		location: FormControl<string | null | undefined>,

		/**
		 * Specifies which types of repositories non-admin organization members can create.
		 * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
		 */
		members_allowed_repository_creation_type: FormControl<OrgsSlashupdatePatchBodyMembers_allowed_repository_creation_type | null | undefined>,

		/** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
		members_can_create_internal_repositories: FormControl<boolean | null | undefined>,

		/** Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted. */
		members_can_create_pages: FormControl<boolean | null | undefined>,

		/** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
		members_can_create_private_repositories: FormControl<boolean | null | undefined>,

		/** Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
		members_can_create_public_repositories: FormControl<boolean | null | undefined>,

		/** Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. */
		members_can_create_repositories: FormControl<boolean | null | undefined>,

		/** The shorthand name of the company. */
		name: FormControl<string | null | undefined>,

		/** The Twitter username of the company. */
		twitter_username: FormControl<string | null | undefined>,
	}
	export function CreateOrgsSlashupdatePatchBodyFormGroup() {
		return new FormGroup<OrgsSlashupdatePatchBodyFormProperties>({
			billing_email: new FormControl<string | null | undefined>(undefined),
			blog: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			default_repository_permission: new FormControl<ProjectOrganization_permission | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			has_organization_projects: new FormControl<boolean | null | undefined>(undefined),
			has_repository_projects: new FormControl<boolean | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			members_allowed_repository_creation_type: new FormControl<OrgsSlashupdatePatchBodyMembers_allowed_repository_creation_type | null | undefined>(undefined),
			members_can_create_internal_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_pages: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_private_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			members_can_create_repositories: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			twitter_username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum OrgsSlashupdatePatchBodyMembers_allowed_repository_creation_type { all = 0, private = 1, none = 2 }

	export interface ActionsSlashset_github_actions_permissions_organizationPutBody {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions?: Actions_enterprise_permissionsAllowed_actions | null;

		/**
		 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_repositories: Actions_enterprise_permissionsEnabled_organizations;
	}
	export interface ActionsSlashset_github_actions_permissions_organizationPutBodyFormProperties {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions: FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>,

		/**
		 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
		 * Required
		 */
		enabled_repositories: FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>,
	}
	export function CreateActionsSlashset_github_actions_permissions_organizationPutBodyFormGroup() {
		return new FormGroup<ActionsSlashset_github_actions_permissions_organizationPutBodyFormProperties>({
			allowed_actions: new FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>(undefined),
			enabled_repositories: new FormControl<Actions_enterprise_permissionsEnabled_organizations | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturn {

		/** Required */
		repositories: Array<Repository>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_selected_repositories_enabled_github_actions_organizationReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashset_selected_repositories_enabled_github_actions_organizationPutBody {

		/**
		 * List of repository IDs to enable for GitHub Actions.
		 * Required
		 */
		selected_repository_ids: Array<number>;
	}
	export interface ActionsSlashset_selected_repositories_enabled_github_actions_organizationPutBodyFormProperties {
	}
	export function CreateActionsSlashset_selected_repositories_enabled_github_actions_organizationPutBodyFormGroup() {
		return new FormGroup<ActionsSlashset_selected_repositories_enabled_github_actions_organizationPutBodyFormProperties>({
		});

	}

	export interface ActionsSlashlist_self_hosted_runner_groups_for_orgReturn {

		/** Required */
		runner_groups: Array<Runner_groups_org>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_self_hosted_runner_groups_for_orgReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_self_hosted_runner_groups_for_orgReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_self_hosted_runner_groups_for_orgReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashcreate_self_hosted_runner_group_for_orgPostBody {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories?: boolean | null;

		/**
		 * Name of the runner group.
		 * Required
		 */
		name: string;

		/** List of runner IDs to add to the runner group. */
		runners?: Array<number>;

		/** List of repository IDs that can access the runner group. */
		selected_repository_ids?: Array<number>;

		/** Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. */
		visibility?: ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility | null;
	}
	export interface ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyFormProperties {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories: FormControl<boolean | null | undefined>,

		/**
		 * Name of the runner group.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. */
		visibility: FormControl<ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility | null | undefined>,
	}
	export function CreateActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyFormGroup() {
		return new FormGroup<ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyFormProperties>({
			allows_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility | null | undefined>(undefined),
		});

	}

	export enum ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility { selected = 0, all = 1, private = 2 }

	export interface ActionsSlashupdate_self_hosted_runner_group_for_orgPatchBody {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories?: boolean | null;

		/**
		 * Name of the runner group.
		 * Required
		 */
		name: string;

		/** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. */
		visibility?: ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility | null;
	}
	export interface ActionsSlashupdate_self_hosted_runner_group_for_orgPatchBodyFormProperties {

		/** Whether the runner group can be used by `public` repositories. */
		allows_public_repositories: FormControl<boolean | null | undefined>,

		/**
		 * Name of the runner group.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. */
		visibility: FormControl<ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility | null | undefined>,
	}
	export function CreateActionsSlashupdate_self_hosted_runner_group_for_orgPatchBodyFormGroup() {
		return new FormGroup<ActionsSlashupdate_self_hosted_runner_group_for_orgPatchBodyFormProperties>({
			allows_public_repositories: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			visibility: new FormControl<ActionsSlashcreate_self_hosted_runner_group_for_orgPostBodyVisibility | null | undefined>(undefined),
		});

	}

	export interface ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturn {

		/** Required */
		repositories: Array<Minimal_repository>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_repo_access_to_self_hosted_runner_group_in_orgReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashset_repo_access_to_self_hosted_runner_group_in_orgPutBody {

		/**
		 * List of repository IDs that can access the runner group.
		 * Required
		 */
		selected_repository_ids: Array<number>;
	}
	export interface ActionsSlashset_repo_access_to_self_hosted_runner_group_in_orgPutBodyFormProperties {
	}
	export function CreateActionsSlashset_repo_access_to_self_hosted_runner_group_in_orgPutBodyFormGroup() {
		return new FormGroup<ActionsSlashset_repo_access_to_self_hosted_runner_group_in_orgPutBodyFormProperties>({
		});

	}

	export interface ActionsSlashlist_self_hosted_runners_in_group_for_orgReturn {

		/** Required */
		runners: Array<Runner>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_self_hosted_runners_in_group_for_orgReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_self_hosted_runners_in_group_for_orgReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_self_hosted_runners_in_group_for_orgReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashset_self_hosted_runners_in_group_for_orgPutBody {

		/**
		 * List of runner IDs to add to the runner group.
		 * Required
		 */
		runners: Array<number>;
	}
	export interface ActionsSlashset_self_hosted_runners_in_group_for_orgPutBodyFormProperties {
	}
	export function CreateActionsSlashset_self_hosted_runners_in_group_for_orgPutBodyFormGroup() {
		return new FormGroup<ActionsSlashset_self_hosted_runners_in_group_for_orgPutBodyFormProperties>({
		});

	}

	export interface ActionsSlashlist_self_hosted_runners_for_orgReturn {

		/** Required */
		runners: Array<Runner>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_self_hosted_runners_for_orgReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_self_hosted_runners_for_orgReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_self_hosted_runners_for_orgReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_org_secretsReturn {

		/** Required */
		secrets: Array<Organization_actions_secret>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_org_secretsReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_org_secretsReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_org_secretsReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashcreate_or_update_org_secretPutBody {

		/** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key) endpoint. */
		encrypted_value?: string | null;

		/** ID of the key you used to encrypt the secret. */
		key_id?: string | null;

		/** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
		selected_repository_ids?: Array<number>;

		/**
		 * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
		 * Required
		 */
		visibility: Organization_actions_secretVisibility;
	}
	export interface ActionsSlashcreate_or_update_org_secretPutBodyFormProperties {

		/** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key) endpoint. */
		encrypted_value: FormControl<string | null | undefined>,

		/** ID of the key you used to encrypt the secret. */
		key_id: FormControl<string | null | undefined>,

		/**
		 * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
		 * Required
		 */
		visibility: FormControl<Organization_actions_secretVisibility | null | undefined>,
	}
	export function CreateActionsSlashcreate_or_update_org_secretPutBodyFormGroup() {
		return new FormGroup<ActionsSlashcreate_or_update_org_secretPutBodyFormProperties>({
			encrypted_value: new FormControl<string | null | undefined>(undefined, [Validators.pattern('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$')]),
			key_id: new FormControl<string | null | undefined>(undefined),
			visibility: new FormControl<Organization_actions_secretVisibility | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_selected_repos_for_org_secretReturn {

		/** Required */
		repositories: Array<Minimal_repository>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_selected_repos_for_org_secretReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_selected_repos_for_org_secretReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_selected_repos_for_org_secretReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashset_selected_repos_for_org_secretPutBody {

		/**
		 * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
		 * Required
		 */
		selected_repository_ids: Array<number>;
	}
	export interface ActionsSlashset_selected_repos_for_org_secretPutBodyFormProperties {
	}
	export function CreateActionsSlashset_selected_repos_for_org_secretPutBodyFormGroup() {
		return new FormGroup<ActionsSlashset_selected_repos_for_org_secretPutBodyFormProperties>({
		});

	}

	export interface OrgsSlashcreate_webhookPostBody {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active?: boolean | null;

		/**
		 * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#create-hook-config-params).
		 * Required
		 */
		config: OrgsSlashcreate_webhookPostBodyConfig;

		/** Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for. */
		events?: Array<string>;

		/**
		 * Must be passed as "web".
		 * Required
		 */
		name: string;
	}
	export interface OrgsSlashcreate_webhookPostBodyFormProperties {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active: FormControl<boolean | null | undefined>,

		/**
		 * Must be passed as "web".
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateOrgsSlashcreate_webhookPostBodyFormGroup() {
		return new FormGroup<OrgsSlashcreate_webhookPostBodyFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface OrgsSlashcreate_webhookPostBodyConfig {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;
		password?: string | null;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: string;
		username?: string | null;
	}
	export interface OrgsSlashcreate_webhookPostBodyConfigFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,
		password: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
		username: FormControl<string | null | undefined>,
	}
	export function CreateOrgsSlashcreate_webhookPostBodyConfigFormGroup() {
		return new FormGroup<OrgsSlashcreate_webhookPostBodyConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OrgsSlashupdate_webhookPatchBody {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active?: boolean | null;

		/** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#update-hook-config-params). */
		config?: OrgsSlashupdate_webhookPatchBodyConfig;

		/** Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for. */
		events?: Array<string>;
		name?: string | null;
	}
	export interface OrgsSlashupdate_webhookPatchBodyFormProperties {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active: FormControl<boolean | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateOrgsSlashupdate_webhookPatchBodyFormGroup() {
		return new FormGroup<OrgsSlashupdate_webhookPatchBodyFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OrgsSlashupdate_webhookPatchBodyConfig {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: string;
	}
	export interface OrgsSlashupdate_webhookPatchBodyConfigFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrgsSlashupdate_webhookPatchBodyConfigFormGroup() {
		return new FormGroup<OrgsSlashupdate_webhookPatchBodyConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface OrgsSlashupdate_webhook_config_for_orgPatchBody {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/** The URL to which the payloads will be delivered. */
		url?: string | null;
	}
	export interface OrgsSlashupdate_webhook_config_for_orgPatchBodyFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/** The URL to which the payloads will be delivered. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateOrgsSlashupdate_webhook_config_for_orgPatchBodyFormGroup() {
		return new FormGroup<OrgsSlashupdate_webhook_config_for_orgPatchBodyFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OrgsSlashlist_app_installationsReturn {

		/** Required */
		installations: Array<Installation>;

		/** Required */
		total_count: number;
	}
	export interface OrgsSlashlist_app_installationsReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateOrgsSlashlist_app_installationsReturnFormGroup() {
		return new FormGroup<OrgsSlashlist_app_installationsReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum OrgsSlashlist_membersFilter { '2fa_disabled' = 0, all = 1 }

	export enum OrgsSlashlist_membersRole { all = 0, admin = 1, member = 2 }

	export interface OrgsSlashset_membership_for_userPutBody {

		/**
		 * The role to give the user in the organization. Can be one of:
		 * \* `admin` - The user will become an owner of the organization.
		 * \* `member` - The user will become a non-owner member of the organization.
		 */
		role?: OrgsSlashset_membership_for_userPutBodyRole | null;
	}
	export interface OrgsSlashset_membership_for_userPutBodyFormProperties {

		/**
		 * The role to give the user in the organization. Can be one of:
		 * \* `admin` - The user will become an owner of the organization.
		 * \* `member` - The user will become a non-owner member of the organization.
		 */
		role: FormControl<OrgsSlashset_membership_for_userPutBodyRole | null | undefined>,
	}
	export function CreateOrgsSlashset_membership_for_userPutBodyFormGroup() {
		return new FormGroup<OrgsSlashset_membership_for_userPutBodyFormProperties>({
			role: new FormControl<OrgsSlashset_membership_for_userPutBodyRole | null | undefined>(undefined),
		});

	}

	export enum OrgsSlashset_membership_for_userPutBodyRole { admin = 0, member = 1 }

	export interface OrgsSlashconvert_member_to_outside_collaboratorPutBody {

		/** When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued. */
		async?: boolean | null;
	}
	export interface OrgsSlashconvert_member_to_outside_collaboratorPutBodyFormProperties {

		/** When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued. */
		async: FormControl<boolean | null | undefined>,
	}
	export function CreateOrgsSlashconvert_member_to_outside_collaboratorPutBodyFormGroup() {
		return new FormGroup<OrgsSlashconvert_member_to_outside_collaboratorPutBodyFormProperties>({
			async: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_orgPatchBody {

		/** Whether repositories can override enforcement. */
		allow_downstream_configuration?: boolean | null;

		/** The state of enforcement for the hook on this repository. */
		enforcement?: string | null;
	}
	export interface Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_orgPatchBodyFormProperties {

		/** Whether repositories can override enforcement. */
		allow_downstream_configuration: FormControl<boolean | null | undefined>,

		/** The state of enforcement for the hook on this repository. */
		enforcement: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_pre_receive_hook_enforcement_for_orgPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_orgPatchBodyFormProperties>({
			allow_downstream_configuration: new FormControl<boolean | null | undefined>(undefined),
			enforcement: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ProjectsSlashcreate_for_orgPostBody {

		/** The description of the project. */
		body?: string | null;

		/**
		 * The name of the project.
		 * Required
		 */
		name: string;
	}
	export interface ProjectsSlashcreate_for_orgPostBodyFormProperties {

		/** The description of the project. */
		body: FormControl<string | null | undefined>,

		/**
		 * The name of the project.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashcreate_for_orgPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashcreate_for_orgPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ReposSlashlist_for_orgType { all = 0, public = 1, private = 2, forks = 3, sources = 4, member = 5, internal = 6 }

	export enum ReposSlashlist_for_orgSort { created = 0, updated = 1, pushed = 2, full_name = 3 }

	export interface ReposSlashcreate_in_orgPostBody {

		/** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
		allow_merge_commit?: boolean | null;

		/** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
		allow_rebase_merge?: boolean | null;

		/** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
		allow_squash_merge?: boolean | null;

		/** Pass `true` to create an initial commit with empty README. */
		auto_init?: boolean | null;

		/** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
		delete_branch_on_merge?: boolean | null;

		/** A short description of the repository. */
		description?: string | null;

		/** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
		gitignore_template?: string | null;

		/** Either `true` to enable issues for this repository or `false` to disable them. */
		has_issues?: boolean | null;

		/** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
		has_projects?: boolean | null;

		/** Either `true` to enable the wiki for this repository or `false` to disable it. */
		has_wiki?: boolean | null;

		/** A URL with more information about the repository. */
		homepage?: string | null;

		/** Either `true` to make this repo available as a template repository or `false` to prevent it. */
		is_template?: boolean | null;

		/** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
		license_template?: string | null;

		/**
		 * The name of the repository.
		 * Required
		 */
		name: string;

		/** Whether the repository is private. */
		private?: boolean | null;

		/** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
		team_id?: number | null;

		/** Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. */
		use_squash_pr_title_as_default?: boolean | null;

		/**
		 * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
		 * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
		 */
		visibility?: ReposSlashcreate_in_orgPostBodyVisibility | null;
	}
	export interface ReposSlashcreate_in_orgPostBodyFormProperties {

		/** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
		allow_merge_commit: FormControl<boolean | null | undefined>,

		/** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
		allow_rebase_merge: FormControl<boolean | null | undefined>,

		/** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Pass `true` to create an initial commit with empty README. */
		auto_init: FormControl<boolean | null | undefined>,

		/** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** A short description of the repository. */
		description: FormControl<string | null | undefined>,

		/** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
		gitignore_template: FormControl<string | null | undefined>,

		/** Either `true` to enable issues for this repository or `false` to disable them. */
		has_issues: FormControl<boolean | null | undefined>,

		/** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
		has_projects: FormControl<boolean | null | undefined>,

		/** Either `true` to enable the wiki for this repository or `false` to disable it. */
		has_wiki: FormControl<boolean | null | undefined>,

		/** A URL with more information about the repository. */
		homepage: FormControl<string | null | undefined>,

		/** Either `true` to make this repo available as a template repository or `false` to prevent it. */
		is_template: FormControl<boolean | null | undefined>,

		/** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
		license_template: FormControl<string | null | undefined>,

		/**
		 * The name of the repository.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Whether the repository is private. */
		private: FormControl<boolean | null | undefined>,

		/** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
		team_id: FormControl<number | null | undefined>,

		/** Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. */
		use_squash_pr_title_as_default: FormControl<boolean | null | undefined>,

		/**
		 * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
		 * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
		 */
		visibility: FormControl<ReposSlashcreate_in_orgPostBodyVisibility | null | undefined>,
	}
	export function CreateReposSlashcreate_in_orgPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_in_orgPostBodyFormProperties>({
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			auto_init: new FormControl<boolean | null | undefined>(undefined),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			gitignore_template: new FormControl<string | null | undefined>(undefined),
			has_issues: new FormControl<boolean | null | undefined>(undefined),
			has_projects: new FormControl<boolean | null | undefined>(undefined),
			has_wiki: new FormControl<boolean | null | undefined>(undefined),
			homepage: new FormControl<string | null | undefined>(undefined),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			license_template: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined),
			team_id: new FormControl<number | null | undefined>(undefined),
			use_squash_pr_title_as_default: new FormControl<boolean | null | undefined>(undefined),
			visibility: new FormControl<ReposSlashcreate_in_orgPostBodyVisibility | null | undefined>(undefined),
		});

	}

	export enum ReposSlashcreate_in_orgPostBodyVisibility { public = 0, private = 1, internal = 2 }

	export interface TeamsSlashcreatePostBody {

		/** The description of the team. */
		description?: string | null;

		/** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)." */
		ldap_dn?: string | null;

		/** List GitHub IDs for organization members who will become team maintainers. */
		maintainers?: Array<string>;

		/**
		 * The name of the team.
		 * Required
		 */
		name: string;

		/** The ID of a team to set as the parent team. */
		parent_team_id?: number | null;

		/** **Deprecated**. The permission that new repositories will be added to the team with when none is specified. */
		permission?: TeamsSlashcreatePostBodyPermission | null;

		/**
		 * The level of privacy this team should have. The options are:
		 * **For a non-nested team:**
		 * \* `secret` - only visible to organization owners and members of this team.
		 * \* `closed` - visible to all members of this organization.
		 * Default: `secret`
		 * **For a parent or child team:**
		 * \* `closed` - visible to all members of this organization.
		 * Default for child team: `closed`
		 */
		privacy?: TeamsSlashcreatePostBodyPrivacy | null;

		/** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
		repo_names?: Array<string>;
	}
	export interface TeamsSlashcreatePostBodyFormProperties {

		/** The description of the team. */
		description: FormControl<string | null | undefined>,

		/** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)." */
		ldap_dn: FormControl<string | null | undefined>,

		/**
		 * The name of the team.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The ID of a team to set as the parent team. */
		parent_team_id: FormControl<number | null | undefined>,

		/** **Deprecated**. The permission that new repositories will be added to the team with when none is specified. */
		permission: FormControl<TeamsSlashcreatePostBodyPermission | null | undefined>,

		/**
		 * The level of privacy this team should have. The options are:
		 * **For a non-nested team:**
		 * \* `secret` - only visible to organization owners and members of this team.
		 * \* `closed` - visible to all members of this organization.
		 * Default: `secret`
		 * **For a parent or child team:**
		 * \* `closed` - visible to all members of this organization.
		 * Default for child team: `closed`
		 */
		privacy: FormControl<TeamsSlashcreatePostBodyPrivacy | null | undefined>,
	}
	export function CreateTeamsSlashcreatePostBodyFormGroup() {
		return new FormGroup<TeamsSlashcreatePostBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			ldap_dn: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			parent_team_id: new FormControl<number | null | undefined>(undefined),
			permission: new FormControl<TeamsSlashcreatePostBodyPermission | null | undefined>(undefined),
			privacy: new FormControl<TeamsSlashcreatePostBodyPrivacy | null | undefined>(undefined),
		});

	}

	export enum TeamsSlashcreatePostBodyPermission { pull = 0, push = 1 }

	export enum TeamsSlashcreatePostBodyPrivacy { secret = 0, closed = 1 }

	export interface TeamsSlashupdate_in_orgPatchBody {

		/** The description of the team. */
		description?: string | null;

		/** The name of the team. */
		name?: string | null;

		/** The ID of a team to set as the parent team. */
		parent_team_id?: number | null;

		/** **Deprecated**. The permission that new repositories will be added to the team with when none is specified. */
		permission?: TeamsSlashupdate_in_orgPatchBodyPermission | null;

		/**
		 * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
		 * **For a non-nested team:**
		 * \* `secret` - only visible to organization owners and members of this team.
		 * \* `closed` - visible to all members of this organization.
		 * **For a parent or child team:**
		 * \* `closed` - visible to all members of this organization.
		 */
		privacy?: TeamsSlashcreatePostBodyPrivacy | null;
	}
	export interface TeamsSlashupdate_in_orgPatchBodyFormProperties {

		/** The description of the team. */
		description: FormControl<string | null | undefined>,

		/** The name of the team. */
		name: FormControl<string | null | undefined>,

		/** The ID of a team to set as the parent team. */
		parent_team_id: FormControl<number | null | undefined>,

		/** **Deprecated**. The permission that new repositories will be added to the team with when none is specified. */
		permission: FormControl<TeamsSlashupdate_in_orgPatchBodyPermission | null | undefined>,

		/**
		 * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
		 * **For a non-nested team:**
		 * \* `secret` - only visible to organization owners and members of this team.
		 * \* `closed` - visible to all members of this organization.
		 * **For a parent or child team:**
		 * \* `closed` - visible to all members of this organization.
		 */
		privacy: FormControl<TeamsSlashcreatePostBodyPrivacy | null | undefined>,
	}
	export function CreateTeamsSlashupdate_in_orgPatchBodyFormGroup() {
		return new FormGroup<TeamsSlashupdate_in_orgPatchBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parent_team_id: new FormControl<number | null | undefined>(undefined),
			permission: new FormControl<TeamsSlashupdate_in_orgPatchBodyPermission | null | undefined>(undefined),
			privacy: new FormControl<TeamsSlashcreatePostBodyPrivacy | null | undefined>(undefined),
		});

	}

	export enum TeamsSlashupdate_in_orgPatchBodyPermission { pull = 0, push = 1, admin = 2 }

	export interface TeamsSlashcreate_discussion_in_orgPostBody {

		/**
		 * The discussion post's body text.
		 * Required
		 */
		body: string;

		/** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
		private?: boolean | null;

		/**
		 * The discussion post's title.
		 * Required
		 */
		title: string;
	}
	export interface TeamsSlashcreate_discussion_in_orgPostBodyFormProperties {

		/**
		 * The discussion post's body text.
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
		private: FormControl<boolean | null | undefined>,

		/**
		 * The discussion post's title.
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashcreate_discussion_in_orgPostBodyFormGroup() {
		return new FormGroup<TeamsSlashcreate_discussion_in_orgPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamsSlashupdate_discussion_in_orgPatchBody {

		/** The discussion post's body text. */
		body?: string | null;

		/** The discussion post's title. */
		title?: string | null;
	}
	export interface TeamsSlashupdate_discussion_in_orgPatchBodyFormProperties {

		/** The discussion post's body text. */
		body: FormControl<string | null | undefined>,

		/** The discussion post's title. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashupdate_discussion_in_orgPatchBodyFormGroup() {
		return new FormGroup<TeamsSlashupdate_discussion_in_orgPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashcreate_discussion_comment_in_orgPostBody {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: string;
	}
	export interface TeamsSlashcreate_discussion_comment_in_orgPostBodyFormProperties {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashcreate_discussion_comment_in_orgPostBodyFormGroup() {
		return new FormGroup<TeamsSlashcreate_discussion_comment_in_orgPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamsSlashupdate_discussion_comment_in_orgPatchBody {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: string;
	}
	export interface TeamsSlashupdate_discussion_comment_in_orgPatchBodyFormProperties {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashupdate_discussion_comment_in_orgPatchBodyFormGroup() {
		return new FormGroup<TeamsSlashupdate_discussion_comment_in_orgPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_team_discussion_comment_in_orgPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion comment.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_team_discussion_comment_in_orgPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion comment.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_team_discussion_comment_in_orgPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_team_discussion_comment_in_orgPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_team_discussion_in_orgPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_team_discussion_in_orgPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_team_discussion_in_orgPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_team_discussion_in_orgPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TeamsSlashlist_members_in_orgRole { member = 0, maintainer = 1, all = 2 }

	export interface TeamsSlashadd_or_update_membership_for_user_in_orgPutBody {

		/** The role that this user should have in the team. */
		role?: Team_membershipRole | null;
	}
	export interface TeamsSlashadd_or_update_membership_for_user_in_orgPutBodyFormProperties {

		/** The role that this user should have in the team. */
		role: FormControl<Team_membershipRole | null | undefined>,
	}
	export function CreateTeamsSlashadd_or_update_membership_for_user_in_orgPutBodyFormGroup() {
		return new FormGroup<TeamsSlashadd_or_update_membership_for_user_in_orgPutBodyFormProperties>({
			role: new FormControl<Team_membershipRole | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashadd_or_update_project_permissions_in_orgPutBody {

		/** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)." */
		permission?: App_permissionsOrganization_projects | null;
	}
	export interface TeamsSlashadd_or_update_project_permissions_in_orgPutBodyFormProperties {

		/** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)." */
		permission: FormControl<App_permissionsOrganization_projects | null | undefined>,
	}
	export function CreateTeamsSlashadd_or_update_project_permissions_in_orgPutBodyFormGroup() {
		return new FormGroup<TeamsSlashadd_or_update_project_permissions_in_orgPutBodyFormProperties>({
			permission: new FormControl<App_permissionsOrganization_projects | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashadd_or_update_repo_permissions_in_orgPutBody {

		/** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
		permission?: TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission | null;
	}
	export interface TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyFormProperties {

		/** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
		permission: FormControl<TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission | null | undefined>,
	}
	export function CreateTeamsSlashadd_or_update_repo_permissions_in_orgPutBodyFormGroup() {
		return new FormGroup<TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyFormProperties>({
			permission: new FormControl<TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission | null | undefined>(undefined),
		});

	}

	export enum TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission { pull = 0, push = 1, admin = 2, maintain = 3, triage = 4 }

	export interface ProjectsSlashupdate_cardPatchBody {

		/** Whether or not the card is archived */
		archived?: boolean | null;

		/** The project card's note */
		note?: string | null;
	}
	export interface ProjectsSlashupdate_cardPatchBodyFormProperties {

		/** Whether or not the card is archived */
		archived: FormControl<boolean | null | undefined>,

		/** The project card's note */
		note: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashupdate_cardPatchBodyFormGroup() {
		return new FormGroup<ProjectsSlashupdate_cardPatchBodyFormProperties>({
			archived: new FormControl<boolean | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ProjectsSlashmove_cardPostBody {

		/** The unique identifier of the column the card should be moved to */
		column_id?: number | null;

		/**
		 * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
		 * Required
		 */
		position: string;
	}
	export interface ProjectsSlashmove_cardPostBodyFormProperties {

		/** The unique identifier of the column the card should be moved to */
		column_id: FormControl<number | null | undefined>,

		/**
		 * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
		 * Required
		 */
		position: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashmove_cardPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashmove_cardPostBodyFormProperties>({
			column_id: new FormControl<number | null | undefined>(undefined),
			position: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.pattern('^(?:top|bottom|after:\d+)$')]),
		});

	}

	export interface ProjectsSlashupdate_columnPatchBody {

		/**
		 * Name of the project column
		 * Required
		 */
		name: string;
	}
	export interface ProjectsSlashupdate_columnPatchBodyFormProperties {

		/**
		 * Name of the project column
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashupdate_columnPatchBodyFormGroup() {
		return new FormGroup<ProjectsSlashupdate_columnPatchBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ProjectsSlashlist_cardsArchived_state { all = 0, archived = 1, not_archived = 2 }

	export interface ProjectsSlashcreate_cardPostBody {

		/**
		 * The project card's note
		 * Required
		 */
		note: string;
	}
	export interface ProjectsSlashcreate_cardPostBodyFormProperties {

		/**
		 * The project card's note
		 * Required
		 */
		note: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashcreate_cardPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashcreate_cardPostBodyFormProperties>({
			note: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ProjectsSlashmove_columnPostBody {

		/**
		 * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
		 * Required
		 */
		position: string;
	}
	export interface ProjectsSlashmove_columnPostBodyFormProperties {

		/**
		 * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
		 * Required
		 */
		position: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashmove_columnPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashmove_columnPostBodyFormProperties>({
			position: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.pattern('^(?:first|last|after:\d+)$')]),
		});

	}

	export interface ProjectsSlashupdatePatchBody {

		/** Body of the project */
		body?: string | null;

		/** Name of the project */
		name?: string | null;

		/** The baseline permission that all organization members have on this project */
		organization_permission?: ProjectOrganization_permission | null;

		/** Whether or not this project can be seen by everyone. */
		private?: boolean | null;

		/** State of the project; either 'open' or 'closed' */
		state?: string | null;
	}
	export interface ProjectsSlashupdatePatchBodyFormProperties {

		/** Body of the project */
		body: FormControl<string | null | undefined>,

		/** Name of the project */
		name: FormControl<string | null | undefined>,

		/** The baseline permission that all organization members have on this project */
		organization_permission: FormControl<ProjectOrganization_permission | null | undefined>,

		/** Whether or not this project can be seen by everyone. */
		private: FormControl<boolean | null | undefined>,

		/** State of the project; either 'open' or 'closed' */
		state: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashupdatePatchBodyFormGroup() {
		return new FormGroup<ProjectsSlashupdatePatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			organization_permission: new FormControl<ProjectOrganization_permission | null | undefined>(undefined),
			private: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProjectsSlashlist_collaboratorsAffiliation { outside = 0, direct = 1, all = 2 }

	export interface ProjectsSlashadd_collaboratorPutBody {

		/** The permission to grant the collaborator. */
		permission?: App_permissionsOrganization_projects | null;
	}
	export interface ProjectsSlashadd_collaboratorPutBodyFormProperties {

		/** The permission to grant the collaborator. */
		permission: FormControl<App_permissionsOrganization_projects | null | undefined>,
	}
	export function CreateProjectsSlashadd_collaboratorPutBodyFormGroup() {
		return new FormGroup<ProjectsSlashadd_collaboratorPutBodyFormProperties>({
			permission: new FormControl<App_permissionsOrganization_projects | null | undefined>(undefined),
		});

	}

	export interface ProjectsSlashcreate_columnPostBody {

		/**
		 * Name of the project column
		 * Required
		 */
		name: string;
	}
	export interface ProjectsSlashcreate_columnPostBodyFormProperties {

		/**
		 * Name of the project column
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashcreate_columnPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashcreate_columnPostBodyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashupdatePatchBody {

		/** Either `true` to allow private forks, or `false` to prevent private forks. */
		allow_forking?: boolean | null;

		/** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
		allow_merge_commit?: boolean | null;

		/** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
		allow_rebase_merge?: boolean | null;

		/** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
		allow_squash_merge?: boolean | null;

		/** Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise. */
		allow_update_branch?: boolean | null;

		/** `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */
		archived?: boolean | null;

		/** Updates the default branch for this repository. */
		default_branch?: string | null;

		/** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
		delete_branch_on_merge?: boolean | null;

		/** A short description of the repository. */
		description?: string | null;

		/** Either `true` to enable issues for this repository or `false` to disable them. */
		has_issues?: boolean | null;

		/** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
		has_projects?: boolean | null;

		/** Either `true` to enable the wiki for this repository or `false` to disable it. */
		has_wiki?: boolean | null;

		/** A URL with more information about the repository. */
		homepage?: string | null;

		/** Either `true` to make this repo available as a template repository or `false` to prevent it. */
		is_template?: boolean | null;

		/** The name of the repository. */
		name?: string | null;

		/**
		 * Either `true` to make the repository private or `false` to make it public. Default: `false`.
		 * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
		 */
		private?: boolean | null;

		/** Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. */
		use_squash_pr_title_as_default?: boolean | null;

		/** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header. */
		visibility?: ReposSlashcreate_in_orgPostBodyVisibility | null;
	}
	export interface ReposSlashupdatePatchBodyFormProperties {

		/** Either `true` to allow private forks, or `false` to prevent private forks. */
		allow_forking: FormControl<boolean | null | undefined>,

		/** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
		allow_merge_commit: FormControl<boolean | null | undefined>,

		/** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
		allow_rebase_merge: FormControl<boolean | null | undefined>,

		/** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise. */
		allow_update_branch: FormControl<boolean | null | undefined>,

		/** `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */
		archived: FormControl<boolean | null | undefined>,

		/** Updates the default branch for this repository. */
		default_branch: FormControl<string | null | undefined>,

		/** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** A short description of the repository. */
		description: FormControl<string | null | undefined>,

		/** Either `true` to enable issues for this repository or `false` to disable them. */
		has_issues: FormControl<boolean | null | undefined>,

		/** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
		has_projects: FormControl<boolean | null | undefined>,

		/** Either `true` to enable the wiki for this repository or `false` to disable it. */
		has_wiki: FormControl<boolean | null | undefined>,

		/** A URL with more information about the repository. */
		homepage: FormControl<string | null | undefined>,

		/** Either `true` to make this repo available as a template repository or `false` to prevent it. */
		is_template: FormControl<boolean | null | undefined>,

		/** The name of the repository. */
		name: FormControl<string | null | undefined>,

		/**
		 * Either `true` to make the repository private or `false` to make it public. Default: `false`.
		 * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
		 */
		private: FormControl<boolean | null | undefined>,

		/** Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. */
		use_squash_pr_title_as_default: FormControl<boolean | null | undefined>,

		/** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header. */
		visibility: FormControl<ReposSlashcreate_in_orgPostBodyVisibility | null | undefined>,
	}
	export function CreateReposSlashupdatePatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdatePatchBodyFormProperties>({
			allow_forking: new FormControl<boolean | null | undefined>(undefined),
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_update_branch: new FormControl<boolean | null | undefined>(undefined),
			archived: new FormControl<boolean | null | undefined>(undefined),
			default_branch: new FormControl<string | null | undefined>(undefined),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			has_issues: new FormControl<boolean | null | undefined>(undefined),
			has_projects: new FormControl<boolean | null | undefined>(undefined),
			has_wiki: new FormControl<boolean | null | undefined>(undefined),
			homepage: new FormControl<string | null | undefined>(undefined),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			private: new FormControl<boolean | null | undefined>(undefined),
			use_squash_pr_title_as_default: new FormControl<boolean | null | undefined>(undefined),
			visibility: new FormControl<ReposSlashcreate_in_orgPostBodyVisibility | null | undefined>(undefined),
		});

	}

	export interface ActionsSlashlist_artifacts_for_repoReturn {

		/** Required */
		artifacts: Array<Artifact>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_artifacts_for_repoReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_artifacts_for_repoReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_artifacts_for_repoReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashset_github_actions_permissions_repositoryPutBody {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions?: Actions_enterprise_permissionsAllowed_actions | null;

		/**
		 * Whether GitHub Actions is enabled on the repository.
		 * Required
		 */
		enabled: boolean;
	}
	export interface ActionsSlashset_github_actions_permissions_repositoryPutBodyFormProperties {

		/** The permissions policy that controls the actions that are allowed to run. */
		allowed_actions: FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>,

		/**
		 * Whether GitHub Actions is enabled on the repository.
		 * Required
		 */
		enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateActionsSlashset_github_actions_permissions_repositoryPutBodyFormGroup() {
		return new FormGroup<ActionsSlashset_github_actions_permissions_repositoryPutBodyFormProperties>({
			allowed_actions: new FormControl<Actions_enterprise_permissionsAllowed_actions | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_self_hosted_runners_for_repoReturn {

		/** Required */
		runners: Array<Runner>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_self_hosted_runners_for_repoReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_self_hosted_runners_for_repoReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_self_hosted_runners_for_repoReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ActionsSlashlist_workflow_runs_for_repoStatus { completed = 0, action_required = 1, cancelled = 2, failure = 3, neutral = 4, skipped = 5, stale = 6, success = 7, timed_out = 8, in_progress = 9, queued = 10, requested = 11, waiting = 12 }

	export interface ActionsSlashlist_workflow_runs_for_repoReturn {

		/** Required */
		total_count: number;

		/** Required */
		workflow_runs: Array<Workflow_run>;
	}
	export interface ActionsSlashlist_workflow_runs_for_repoReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_workflow_runs_for_repoReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_workflow_runs_for_repoReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_workflow_run_artifactsReturn {

		/** Required */
		artifacts: Array<Artifact>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_workflow_run_artifactsReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_workflow_run_artifactsReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_workflow_run_artifactsReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ActionsSlashlist_jobs_for_workflow_runFilter { latest = 0, all = 1 }

	export interface ActionsSlashlist_jobs_for_workflow_runReturn {

		/** Required */
		jobs: Array<Job>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_jobs_for_workflow_runReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_jobs_for_workflow_runReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_jobs_for_workflow_runReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_repo_secretsReturn {

		/** Required */
		secrets: Array<Actions_secret>;

		/** Required */
		total_count: number;
	}
	export interface ActionsSlashlist_repo_secretsReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_repo_secretsReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_repo_secretsReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashcreate_or_update_repo_secretPutBody {

		/** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key) endpoint. */
		encrypted_value?: string | null;

		/** ID of the key you used to encrypt the secret. */
		key_id?: string | null;
	}
	export interface ActionsSlashcreate_or_update_repo_secretPutBodyFormProperties {

		/** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key) endpoint. */
		encrypted_value: FormControl<string | null | undefined>,

		/** ID of the key you used to encrypt the secret. */
		key_id: FormControl<string | null | undefined>,
	}
	export function CreateActionsSlashcreate_or_update_repo_secretPutBodyFormGroup() {
		return new FormGroup<ActionsSlashcreate_or_update_repo_secretPutBodyFormProperties>({
			encrypted_value: new FormControl<string | null | undefined>(undefined, [Validators.pattern('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$')]),
			key_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ActionsSlashlist_repo_workflowsReturn {

		/** Required */
		total_count: number;

		/** Required */
		workflows: Array<Workflow>;
	}
	export interface ActionsSlashlist_repo_workflowsReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_repo_workflowsReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_repo_workflowsReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashcreate_workflow_dispatchPostBody {

		/** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
		inputs?: {[id: string]: string };

		/**
		 * The git reference for the workflow. The reference can be a branch or tag name.
		 * Required
		 */
		ref: string;
	}
	export interface ActionsSlashcreate_workflow_dispatchPostBodyFormProperties {

		/** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
		inputs: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * The git reference for the workflow. The reference can be a branch or tag name.
		 * Required
		 */
		ref: FormControl<string | null | undefined>,
	}
	export function CreateActionsSlashcreate_workflow_dispatchPostBodyFormGroup() {
		return new FormGroup<ActionsSlashcreate_workflow_dispatchPostBodyFormProperties>({
			inputs: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ActionsSlashlist_workflow_runsReturn {

		/** Required */
		total_count: number;

		/** Required */
		workflow_runs: Array<Workflow_run>;
	}
	export interface ActionsSlashlist_workflow_runsReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateActionsSlashlist_workflow_runsReturnFormGroup() {
		return new FormGroup<ActionsSlashlist_workflow_runsReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashupdate_branch_protectionPutBody {

		/** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
		allow_deletions?: boolean | null;

		/** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
		allow_force_pushes?: boolean | null;

		/** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
		block_creations?: boolean | null;

		/** The list of status checks to require in order to merge into this branch. */
		contexts?: Array<string>;

		/**
		 * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
		 * Required
		 */
		enforce_admins: boolean;

		/** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
		required_conversation_resolution?: boolean | null;

		/** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
		required_linear_history?: boolean | null;

		/**
		 * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
		 * Required
		 */
		required_pull_request_reviews: ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviews;

		/**
		 * Require status checks to pass before merging. Set to `null` to disable.
		 * Required
		 */
		required_status_checks: ReposSlashupdate_branch_protectionPutBodyRequired_status_checks;

		/**
		 * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
		 * Required
		 */
		restrictions: ReposSlashupdate_branch_protectionPutBodyRestrictions;
	}
	export interface ReposSlashupdate_branch_protectionPutBodyFormProperties {

		/** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
		allow_deletions: FormControl<boolean | null | undefined>,

		/** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
		allow_force_pushes: FormControl<boolean | null | undefined>,

		/** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
		block_creations: FormControl<boolean | null | undefined>,

		/**
		 * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
		 * Required
		 */
		enforce_admins: FormControl<boolean | null | undefined>,

		/** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
		required_conversation_resolution: FormControl<boolean | null | undefined>,

		/** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
		required_linear_history: FormControl<boolean | null | undefined>,
	}
	export function CreateReposSlashupdate_branch_protectionPutBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_branch_protectionPutBodyFormProperties>({
			allow_deletions: new FormControl<boolean | null | undefined>(undefined),
			allow_force_pushes: new FormControl<boolean | null | undefined>(undefined),
			block_creations: new FormControl<boolean | null | undefined>(undefined),
			enforce_admins: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			required_conversation_resolution: new FormControl<boolean | null | undefined>(undefined),
			required_linear_history: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviews {

		/** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
		dismiss_stale_reviews?: boolean | null;

		/** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
		dismissal_restrictions?: ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsDismissal_restrictions;

		/** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
		require_code_owner_reviews?: boolean | null;

		/** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
		required_approving_review_count?: number | null;
	}
	export interface ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsFormProperties {

		/** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
		dismiss_stale_reviews: FormControl<boolean | null | undefined>,

		/** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
		require_code_owner_reviews: FormControl<boolean | null | undefined>,

		/** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
		required_approving_review_count: FormControl<number | null | undefined>,
	}
	export function CreateReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsFormGroup() {
		return new FormGroup<ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsFormProperties>({
			dismiss_stale_reviews: new FormControl<boolean | null | undefined>(undefined),
			require_code_owner_reviews: new FormControl<boolean | null | undefined>(undefined),
			required_approving_review_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsDismissal_restrictions {

		/** The list of app `slug`s with dismissal access */
		apps?: Array<string>;

		/** The list of team `slug`s with dismissal access */
		teams?: Array<string>;

		/** The list of user `login`s with dismissal access */
		users?: Array<string>;
	}
	export interface ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsDismissal_restrictionsFormProperties {
	}
	export function CreateReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsDismissal_restrictionsFormGroup() {
		return new FormGroup<ReposSlashupdate_branch_protectionPutBodyRequired_pull_request_reviewsDismissal_restrictionsFormProperties>({
		});

	}

	export interface ReposSlashupdate_branch_protectionPutBodyRequired_status_checks {

		/** The list of status checks to require in order to merge into this branch. */
		ReposSlashupdate_branch_protectionPutBodyRequired_status_checksChecks?: Array<ReposSlashupdate_branch_protectionPutBodyRequired_status_checksChecks>;

		/**
		 * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
		 * Required
		 */
		contexts: Array<string>;

		/**
		 * Require branches to be up to date before merging.
		 * Required
		 */
		strict: boolean;
	}
	export interface ReposSlashupdate_branch_protectionPutBodyRequired_status_checksFormProperties {

		/**
		 * Require branches to be up to date before merging.
		 * Required
		 */
		strict: FormControl<boolean | null | undefined>,
	}
	export function CreateReposSlashupdate_branch_protectionPutBodyRequired_status_checksFormGroup() {
		return new FormGroup<ReposSlashupdate_branch_protectionPutBodyRequired_status_checksFormProperties>({
			strict: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashupdate_branch_protectionPutBodyRequired_status_checksChecks {

		/** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
		app_id?: number | null;

		/**
		 * The name of the required check
		 * Required
		 */
		context: string;
	}
	export interface ReposSlashupdate_branch_protectionPutBodyRequired_status_checksChecksFormProperties {

		/** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
		app_id: FormControl<number | null | undefined>,

		/**
		 * The name of the required check
		 * Required
		 */
		context: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashupdate_branch_protectionPutBodyRequired_status_checksChecksFormGroup() {
		return new FormGroup<ReposSlashupdate_branch_protectionPutBodyRequired_status_checksChecksFormProperties>({
			app_id: new FormControl<number | null | undefined>(undefined),
			context: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashupdate_branch_protectionPutBodyRestrictions {

		/** The list of app `slug`s with push access */
		apps?: Array<string>;

		/**
		 * The list of team `slug`s with push access
		 * Required
		 */
		teams: Array<string>;

		/**
		 * The list of user `login`s with push access
		 * Required
		 */
		users: Array<string>;
	}
	export interface ReposSlashupdate_branch_protectionPutBodyRestrictionsFormProperties {
	}
	export function CreateReposSlashupdate_branch_protectionPutBodyRestrictionsFormGroup() {
		return new FormGroup<ReposSlashupdate_branch_protectionPutBodyRestrictionsFormProperties>({
		});

	}

	export interface ReposSlashupdate_pull_request_review_protectionPatchBody {

		/** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
		dismiss_stale_reviews?: boolean | null;

		/** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
		dismissal_restrictions?: ReposSlashupdate_pull_request_review_protectionPatchBodyDismissal_restrictions;

		/** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
		require_code_owner_reviews?: boolean | null;

		/** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
		required_approving_review_count?: number | null;
	}
	export interface ReposSlashupdate_pull_request_review_protectionPatchBodyFormProperties {

		/** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
		dismiss_stale_reviews: FormControl<boolean | null | undefined>,

		/** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
		require_code_owner_reviews: FormControl<boolean | null | undefined>,

		/** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
		required_approving_review_count: FormControl<number | null | undefined>,
	}
	export function CreateReposSlashupdate_pull_request_review_protectionPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_pull_request_review_protectionPatchBodyFormProperties>({
			dismiss_stale_reviews: new FormControl<boolean | null | undefined>(undefined),
			require_code_owner_reviews: new FormControl<boolean | null | undefined>(undefined),
			required_approving_review_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_pull_request_review_protectionPatchBodyDismissal_restrictions {

		/** The list of app `slug`s with dismissal access */
		apps?: Array<string>;

		/** The list of team `slug`s with dismissal access */
		teams?: Array<string>;

		/** The list of user `login`s with dismissal access */
		users?: Array<string>;
	}
	export interface ReposSlashupdate_pull_request_review_protectionPatchBodyDismissal_restrictionsFormProperties {
	}
	export function CreateReposSlashupdate_pull_request_review_protectionPatchBodyDismissal_restrictionsFormGroup() {
		return new FormGroup<ReposSlashupdate_pull_request_review_protectionPatchBodyDismissal_restrictionsFormProperties>({
		});

	}

	export interface ReposSlashupdate_status_check_protectionPatchBody {

		/** The list of status checks to require in order to merge into this branch */
		contexts?: Array<string>;

		/** Require branches to be up to date before merging. */
		strict?: boolean | null;
	}
	export interface ReposSlashupdate_status_check_protectionPatchBodyFormProperties {

		/** Require branches to be up to date before merging. */
		strict: FormControl<boolean | null | undefined>,
	}
	export function CreateReposSlashupdate_status_check_protectionPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_status_check_protectionPatchBodyFormProperties>({
			strict: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ReposSlashadd_status_check_contextsPostBody {

		/**
		 * contexts parameter
		 * Required
		 */
		contexts: Array<string>;
	}
	export interface ReposSlashadd_status_check_contextsPostBodyFormProperties {
	}
	export function CreateReposSlashadd_status_check_contextsPostBodyFormGroup() {
		return new FormGroup<ReposSlashadd_status_check_contextsPostBodyFormProperties>({
		});

	}

	export interface ReposSlashset_status_check_contextsPutBody {

		/**
		 * contexts parameter
		 * Required
		 */
		contexts: Array<string>;
	}
	export interface ReposSlashset_status_check_contextsPutBodyFormProperties {
	}
	export function CreateReposSlashset_status_check_contextsPutBodyFormGroup() {
		return new FormGroup<ReposSlashset_status_check_contextsPutBodyFormProperties>({
		});

	}

	export interface ReposSlashadd_app_access_restrictionsPostBody {

		/**
		 * apps parameter
		 * Required
		 */
		apps: Array<string>;
	}
	export interface ReposSlashadd_app_access_restrictionsPostBodyFormProperties {
	}
	export function CreateReposSlashadd_app_access_restrictionsPostBodyFormGroup() {
		return new FormGroup<ReposSlashadd_app_access_restrictionsPostBodyFormProperties>({
		});

	}

	export interface ReposSlashset_app_access_restrictionsPutBody {

		/**
		 * apps parameter
		 * Required
		 */
		apps: Array<string>;
	}
	export interface ReposSlashset_app_access_restrictionsPutBodyFormProperties {
	}
	export function CreateReposSlashset_app_access_restrictionsPutBodyFormGroup() {
		return new FormGroup<ReposSlashset_app_access_restrictionsPutBodyFormProperties>({
		});

	}

	export interface ReposSlashadd_team_access_restrictionsPostBody {

		/**
		 * teams parameter
		 * Required
		 */
		teams: Array<string>;
	}
	export interface ReposSlashadd_team_access_restrictionsPostBodyFormProperties {
	}
	export function CreateReposSlashadd_team_access_restrictionsPostBodyFormGroup() {
		return new FormGroup<ReposSlashadd_team_access_restrictionsPostBodyFormProperties>({
		});

	}

	export interface ReposSlashset_team_access_restrictionsPutBody {

		/**
		 * teams parameter
		 * Required
		 */
		teams: Array<string>;
	}
	export interface ReposSlashset_team_access_restrictionsPutBodyFormProperties {
	}
	export function CreateReposSlashset_team_access_restrictionsPutBodyFormGroup() {
		return new FormGroup<ReposSlashset_team_access_restrictionsPutBodyFormProperties>({
		});

	}

	export interface ReposSlashadd_user_access_restrictionsPostBody {

		/**
		 * users parameter
		 * Required
		 */
		users: Array<string>;
	}
	export interface ReposSlashadd_user_access_restrictionsPostBodyFormProperties {
	}
	export function CreateReposSlashadd_user_access_restrictionsPostBodyFormGroup() {
		return new FormGroup<ReposSlashadd_user_access_restrictionsPostBodyFormProperties>({
		});

	}

	export interface ReposSlashset_user_access_restrictionsPutBody {

		/**
		 * users parameter
		 * Required
		 */
		users: Array<string>;
	}
	export interface ReposSlashset_user_access_restrictionsPutBodyFormProperties {
	}
	export function CreateReposSlashset_user_access_restrictionsPutBodyFormGroup() {
		return new FormGroup<ReposSlashset_user_access_restrictionsPutBodyFormProperties>({
		});

	}

	export interface ReposSlashrename_branchPostBody {

		/**
		 * The new name of the branch.
		 * Required
		 */
		new_name: string;
	}
	export interface ReposSlashrename_branchPostBodyFormProperties {

		/**
		 * The new name of the branch.
		 * Required
		 */
		new_name: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashrename_branchPostBodyFormGroup() {
		return new FormGroup<ReposSlashrename_branchPostBodyFormProperties>({
			new_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashcreatePostBody {

		/**
		 * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions)."
		 * Maximum items: 3
		 */
		ChecksSlashcreatePostBodyActions?: Array<ChecksSlashcreatePostBodyActions>;

		/** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		completed_at?: Date | null;

		/**
		 * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
		 * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
		 */
		conclusion?: ChecksSlashcreatePostBodyConclusion | null;

		/** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
		details_url?: string | null;

		/** A reference for the run on the integrator's system. */
		external_id?: string | null;

		/**
		 * The SHA of the commit.
		 * Required
		 */
		head_sha: string;

		/**
		 * The name of the check. For example, "code-coverage".
		 * Required
		 */
		name: string;

		/** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#output-object) description. */
		output?: ChecksSlashcreatePostBodyOutput;

		/** The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		started_at?: Date | null;

		/** The current status. */
		status?: Check_runStatus | null;
	}
	export interface ChecksSlashcreatePostBodyFormProperties {

		/** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
		 * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
		 */
		conclusion: FormControl<ChecksSlashcreatePostBodyConclusion | null | undefined>,

		/** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
		details_url: FormControl<string | null | undefined>,

		/** A reference for the run on the integrator's system. */
		external_id: FormControl<string | null | undefined>,

		/**
		 * The SHA of the commit.
		 * Required
		 */
		head_sha: FormControl<string | null | undefined>,

		/**
		 * The name of the check. For example, "code-coverage".
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		started_at: FormControl<Date | null | undefined>,

		/** The current status. */
		status: FormControl<Check_runStatus | null | undefined>,
	}
	export function CreateChecksSlashcreatePostBodyFormGroup() {
		return new FormGroup<ChecksSlashcreatePostBodyFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			conclusion: new FormControl<ChecksSlashcreatePostBodyConclusion | null | undefined>(undefined),
			details_url: new FormControl<string | null | undefined>(undefined),
			external_id: new FormControl<string | null | undefined>(undefined),
			head_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			started_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<Check_runStatus | null | undefined>(undefined),
		});

	}

	export interface ChecksSlashcreatePostBodyActions {

		/**
		 * A short explanation of what this action would do. The maximum size is 40 characters.
		 * Required
		 * Max length: 40
		 */
		description: string;

		/**
		 * A reference for the action on the integrator's system. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		identifier: string;

		/**
		 * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		label: string;
	}
	export interface ChecksSlashcreatePostBodyActionsFormProperties {

		/**
		 * A short explanation of what this action would do. The maximum size is 40 characters.
		 * Required
		 * Max length: 40
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * A reference for the action on the integrator's system. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		identifier: FormControl<string | null | undefined>,

		/**
		 * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		label: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashcreatePostBodyActionsFormGroup() {
		return new FormGroup<ChecksSlashcreatePostBodyActionsFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			identifier: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(20)]),
			label: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(20)]),
		});

	}

	export enum ChecksSlashcreatePostBodyConclusion { action_required = 0, cancelled = 1, failure = 2, neutral = 3, success = 4, skipped = 5, stale = 6, timed_out = 7 }

	export interface ChecksSlashcreatePostBodyOutput {

		/**
		 * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object) description for details about how to use this parameter.
		 * Maximum items: 50
		 */
		ChecksSlashcreatePostBodyOutputAnnotations?: Array<ChecksSlashcreatePostBodyOutputAnnotations>;

		/** Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#images-object) description for details. */
		ChecksSlashcreatePostBodyOutputImages?: Array<ChecksSlashcreatePostBodyOutputImages>;

		/**
		 * The summary of the check run. This parameter supports Markdown.
		 * Required
		 * Max length: 65535
		 */
		summary: string;

		/**
		 * The details of the check run. This parameter supports Markdown.
		 * Max length: 65535
		 */
		text?: string | null;

		/**
		 * The title of the check run.
		 * Required
		 */
		title: string;
	}
	export interface ChecksSlashcreatePostBodyOutputFormProperties {

		/**
		 * The summary of the check run. This parameter supports Markdown.
		 * Required
		 * Max length: 65535
		 */
		summary: FormControl<string | null | undefined>,

		/**
		 * The details of the check run. This parameter supports Markdown.
		 * Max length: 65535
		 */
		text: FormControl<string | null | undefined>,

		/**
		 * The title of the check run.
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashcreatePostBodyOutputFormGroup() {
		return new FormGroup<ChecksSlashcreatePostBodyOutputFormProperties>({
			summary: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(65535)]),
			text: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(65535)]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashcreatePostBodyOutputAnnotations {

		/**
		 * The level of the annotation.
		 * Required
		 */
		annotation_level: ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level;

		/** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		end_column?: number | null;

		/**
		 * The end line of the annotation.
		 * Required
		 */
		end_line: number;

		/**
		 * A short description of the feedback for these lines of code. The maximum size is 64 KB.
		 * Required
		 */
		message: string;

		/**
		 * The path of the file to add an annotation to. For example, `assets/css/main.css`.
		 * Required
		 */
		path: string;

		/** Details about this annotation. The maximum size is 64 KB. */
		raw_details?: string | null;

		/** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		start_column?: number | null;

		/**
		 * The start line of the annotation.
		 * Required
		 */
		start_line: number;

		/** The title that represents the annotation. The maximum size is 255 characters. */
		title?: string | null;
	}
	export interface ChecksSlashcreatePostBodyOutputAnnotationsFormProperties {

		/**
		 * The level of the annotation.
		 * Required
		 */
		annotation_level: FormControl<ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level | null | undefined>,

		/** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		end_column: FormControl<number | null | undefined>,

		/**
		 * The end line of the annotation.
		 * Required
		 */
		end_line: FormControl<number | null | undefined>,

		/**
		 * A short description of the feedback for these lines of code. The maximum size is 64 KB.
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * The path of the file to add an annotation to. For example, `assets/css/main.css`.
		 * Required
		 */
		path: FormControl<string | null | undefined>,

		/** Details about this annotation. The maximum size is 64 KB. */
		raw_details: FormControl<string | null | undefined>,

		/** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		start_column: FormControl<number | null | undefined>,

		/**
		 * The start line of the annotation.
		 * Required
		 */
		start_line: FormControl<number | null | undefined>,

		/** The title that represents the annotation. The maximum size is 255 characters. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashcreatePostBodyOutputAnnotationsFormGroup() {
		return new FormGroup<ChecksSlashcreatePostBodyOutputAnnotationsFormProperties>({
			annotation_level: new FormControl<ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level | null | undefined>(undefined, [Validators.required]),
			end_column: new FormControl<number | null | undefined>(undefined),
			end_line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			raw_details: new FormControl<string | null | undefined>(undefined),
			start_column: new FormControl<number | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level { notice = 0, warning = 1, failure = 2 }

	export interface ChecksSlashcreatePostBodyOutputImages {

		/**
		 * The alternative text for the image.
		 * Required
		 */
		alt: string;

		/** A short image description. */
		caption?: string | null;

		/**
		 * The full URL of the image.
		 * Required
		 */
		image_url: string;
	}
	export interface ChecksSlashcreatePostBodyOutputImagesFormProperties {

		/**
		 * The alternative text for the image.
		 * Required
		 */
		alt: FormControl<string | null | undefined>,

		/** A short image description. */
		caption: FormControl<string | null | undefined>,

		/**
		 * The full URL of the image.
		 * Required
		 */
		image_url: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashcreatePostBodyOutputImagesFormGroup() {
		return new FormGroup<ChecksSlashcreatePostBodyOutputImagesFormProperties>({
			alt: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			caption: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashupdatePatchBody {

		/**
		 * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions)."
		 * Maximum items: 3
		 */
		ChecksSlashupdatePatchBodyActions?: Array<ChecksSlashupdatePatchBodyActions>;

		/** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		completed_at?: Date | null;

		/**
		 * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
		 * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
		 */
		conclusion?: ChecksSlashcreatePostBodyConclusion | null;

		/** The URL of the integrator's site that has the full details of the check. */
		details_url?: string | null;

		/** A reference for the run on the integrator's system. */
		external_id?: string | null;

		/** The name of the check. For example, "code-coverage". */
		name?: string | null;

		/** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#output-object-1) description. */
		output?: ChecksSlashupdatePatchBodyOutput;

		/** This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		started_at?: Date | null;

		/** The current status. */
		status?: Check_runStatus | null;
	}
	export interface ChecksSlashupdatePatchBodyFormProperties {

		/** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
		 * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
		 */
		conclusion: FormControl<ChecksSlashcreatePostBodyConclusion | null | undefined>,

		/** The URL of the integrator's site that has the full details of the check. */
		details_url: FormControl<string | null | undefined>,

		/** A reference for the run on the integrator's system. */
		external_id: FormControl<string | null | undefined>,

		/** The name of the check. For example, "code-coverage". */
		name: FormControl<string | null | undefined>,

		/** This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		started_at: FormControl<Date | null | undefined>,

		/** The current status. */
		status: FormControl<Check_runStatus | null | undefined>,
	}
	export function CreateChecksSlashupdatePatchBodyFormGroup() {
		return new FormGroup<ChecksSlashupdatePatchBodyFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			conclusion: new FormControl<ChecksSlashcreatePostBodyConclusion | null | undefined>(undefined),
			details_url: new FormControl<string | null | undefined>(undefined),
			external_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			started_at: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<Check_runStatus | null | undefined>(undefined),
		});

	}

	export interface ChecksSlashupdatePatchBodyActions {

		/**
		 * A short explanation of what this action would do. The maximum size is 40 characters.
		 * Required
		 * Max length: 40
		 */
		description: string;

		/**
		 * A reference for the action on the integrator's system. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		identifier: string;

		/**
		 * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		label: string;
	}
	export interface ChecksSlashupdatePatchBodyActionsFormProperties {

		/**
		 * A short explanation of what this action would do. The maximum size is 40 characters.
		 * Required
		 * Max length: 40
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * A reference for the action on the integrator's system. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		identifier: FormControl<string | null | undefined>,

		/**
		 * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
		 * Required
		 * Max length: 20
		 */
		label: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashupdatePatchBodyActionsFormGroup() {
		return new FormGroup<ChecksSlashupdatePatchBodyActionsFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			identifier: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(20)]),
			label: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(20)]),
		});

	}

	export interface ChecksSlashupdatePatchBodyOutput {

		/**
		 * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1) description for details.
		 * Maximum items: 50
		 */
		ChecksSlashupdatePatchBodyOutputAnnotations?: Array<ChecksSlashupdatePatchBodyOutputAnnotations>;

		/** Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1) description for details. */
		ChecksSlashupdatePatchBodyOutputImages?: Array<ChecksSlashupdatePatchBodyOutputImages>;

		/**
		 * Can contain Markdown.
		 * Required
		 * Max length: 65535
		 */
		summary: string;

		/**
		 * Can contain Markdown.
		 * Max length: 65535
		 */
		text?: string | null;

		/** **Required**. */
		title?: string | null;
	}
	export interface ChecksSlashupdatePatchBodyOutputFormProperties {

		/**
		 * Can contain Markdown.
		 * Required
		 * Max length: 65535
		 */
		summary: FormControl<string | null | undefined>,

		/**
		 * Can contain Markdown.
		 * Max length: 65535
		 */
		text: FormControl<string | null | undefined>,

		/** **Required**. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashupdatePatchBodyOutputFormGroup() {
		return new FormGroup<ChecksSlashupdatePatchBodyOutputFormProperties>({
			summary: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(65535)]),
			text: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(65535)]),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ChecksSlashupdatePatchBodyOutputAnnotations {

		/**
		 * The level of the annotation.
		 * Required
		 */
		annotation_level: ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level;

		/** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		end_column?: number | null;

		/**
		 * The end line of the annotation.
		 * Required
		 */
		end_line: number;

		/**
		 * A short description of the feedback for these lines of code. The maximum size is 64 KB.
		 * Required
		 */
		message: string;

		/**
		 * The path of the file to add an annotation to. For example, `assets/css/main.css`.
		 * Required
		 */
		path: string;

		/** Details about this annotation. The maximum size is 64 KB. */
		raw_details?: string | null;

		/** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		start_column?: number | null;

		/**
		 * The start line of the annotation.
		 * Required
		 */
		start_line: number;

		/** The title that represents the annotation. The maximum size is 255 characters. */
		title?: string | null;
	}
	export interface ChecksSlashupdatePatchBodyOutputAnnotationsFormProperties {

		/**
		 * The level of the annotation.
		 * Required
		 */
		annotation_level: FormControl<ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level | null | undefined>,

		/** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		end_column: FormControl<number | null | undefined>,

		/**
		 * The end line of the annotation.
		 * Required
		 */
		end_line: FormControl<number | null | undefined>,

		/**
		 * A short description of the feedback for these lines of code. The maximum size is 64 KB.
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * The path of the file to add an annotation to. For example, `assets/css/main.css`.
		 * Required
		 */
		path: FormControl<string | null | undefined>,

		/** Details about this annotation. The maximum size is 64 KB. */
		raw_details: FormControl<string | null | undefined>,

		/** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
		start_column: FormControl<number | null | undefined>,

		/**
		 * The start line of the annotation.
		 * Required
		 */
		start_line: FormControl<number | null | undefined>,

		/** The title that represents the annotation. The maximum size is 255 characters. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashupdatePatchBodyOutputAnnotationsFormGroup() {
		return new FormGroup<ChecksSlashupdatePatchBodyOutputAnnotationsFormProperties>({
			annotation_level: new FormControl<ChecksSlashcreatePostBodyOutputAnnotationsAnnotation_level | null | undefined>(undefined, [Validators.required]),
			end_column: new FormControl<number | null | undefined>(undefined),
			end_line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			raw_details: new FormControl<string | null | undefined>(undefined),
			start_column: new FormControl<number | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ChecksSlashupdatePatchBodyOutputImages {

		/**
		 * The alternative text for the image.
		 * Required
		 */
		alt: string;

		/** A short image description. */
		caption?: string | null;

		/**
		 * The full URL of the image.
		 * Required
		 */
		image_url: string;
	}
	export interface ChecksSlashupdatePatchBodyOutputImagesFormProperties {

		/**
		 * The alternative text for the image.
		 * Required
		 */
		alt: FormControl<string | null | undefined>,

		/** A short image description. */
		caption: FormControl<string | null | undefined>,

		/**
		 * The full URL of the image.
		 * Required
		 */
		image_url: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashupdatePatchBodyOutputImagesFormGroup() {
		return new FormGroup<ChecksSlashupdatePatchBodyOutputImagesFormProperties>({
			alt: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			caption: new FormControl<string | null | undefined>(undefined),
			image_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashcreate_suitePostBody {

		/**
		 * The sha of the head commit.
		 * Required
		 */
		head_sha: string;
	}
	export interface ChecksSlashcreate_suitePostBodyFormProperties {

		/**
		 * The sha of the head commit.
		 * Required
		 */
		head_sha: FormControl<string | null | undefined>,
	}
	export function CreateChecksSlashcreate_suitePostBodyFormGroup() {
		return new FormGroup<ChecksSlashcreate_suitePostBodyFormProperties>({
			head_sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashset_suites_preferencesPatchBody {

		/** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#auto_trigger_checks-object) description for details. */
		ChecksSlashset_suites_preferencesPatchBodyAuto_trigger_checks?: Array<ChecksSlashset_suites_preferencesPatchBodyAuto_trigger_checks>;
	}
	export interface ChecksSlashset_suites_preferencesPatchBodyFormProperties {
	}
	export function CreateChecksSlashset_suites_preferencesPatchBodyFormGroup() {
		return new FormGroup<ChecksSlashset_suites_preferencesPatchBodyFormProperties>({
		});

	}

	export interface ChecksSlashset_suites_preferencesPatchBodyAuto_trigger_checks {

		/**
		 * The `id` of the GitHub App.
		 * Required
		 */
		app_id: number;

		/**
		 * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
		 * Required
		 */
		setting: boolean;
	}
	export interface ChecksSlashset_suites_preferencesPatchBodyAuto_trigger_checksFormProperties {

		/**
		 * The `id` of the GitHub App.
		 * Required
		 */
		app_id: FormControl<number | null | undefined>,

		/**
		 * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
		 * Required
		 */
		setting: FormControl<boolean | null | undefined>,
	}
	export function CreateChecksSlashset_suites_preferencesPatchBodyAuto_trigger_checksFormGroup() {
		return new FormGroup<ChecksSlashset_suites_preferencesPatchBodyAuto_trigger_checksFormProperties>({
			app_id: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			setting: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashlist_for_suiteReturn {

		/** Required */
		check_runs: Array<Check_run>;

		/** Required */
		total_count: number;
	}
	export interface ChecksSlashlist_for_suiteReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateChecksSlashlist_for_suiteReturnFormGroup() {
		return new FormGroup<ChecksSlashlist_for_suiteReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Code_scanningSlashupdate_alertPatchBody {

		/** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
		dismissed_reason?: Code_scanningSlashupdate_alertPatchBodyDismissed_reason | null;

		/**
		 * Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
		 * Required
		 */
		state: Code_scanning_alert_set_state;
	}
	export interface Code_scanningSlashupdate_alertPatchBodyFormProperties {

		/** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
		dismissed_reason: FormControl<Code_scanningSlashupdate_alertPatchBodyDismissed_reason | null | undefined>,

		/**
		 * Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
		 * Required
		 */
		state: FormControl<Code_scanning_alert_set_state | null | undefined>,
	}
	export function CreateCode_scanningSlashupdate_alertPatchBodyFormGroup() {
		return new FormGroup<Code_scanningSlashupdate_alertPatchBodyFormProperties>({
			dismissed_reason: new FormControl<Code_scanningSlashupdate_alertPatchBodyDismissed_reason | null | undefined>(undefined),
			state: new FormControl<Code_scanning_alert_set_state | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Code_scanningSlashupdate_alertPatchBodyDismissed_reason { _null = 0, 'false positive' = 1, 'won\'t fix' = 2, 'used in tests' = 3 }

	export interface Code_scanningSlashupload_sarifPostBody {

		/**
		 * The base directory used in the analysis, as it appears in the SARIF file.
		 * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
		 */
		checkout_uri?: string | null;

		/**
		 * The SHA of the commit to which the analysis you are uploading relates.
		 * Required
		 * Max length: 40
		 * Min length: 40
		 */
		commit_sha: string;

		/**
		 * The full Git reference, formatted as `refs/heads/<branch name>`,
		 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
		 * Required
		 */
		ref: string;

		/**
		 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning)."
		 * Required
		 */
		sarif: string;

		/** The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		started_at?: Date | null;

		/** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
		tool_name?: string | null;
	}
	export interface Code_scanningSlashupload_sarifPostBodyFormProperties {

		/**
		 * The base directory used in the analysis, as it appears in the SARIF file.
		 * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
		 */
		checkout_uri: FormControl<string | null | undefined>,

		/**
		 * The SHA of the commit to which the analysis you are uploading relates.
		 * Required
		 * Max length: 40
		 * Min length: 40
		 */
		commit_sha: FormControl<string | null | undefined>,

		/**
		 * The full Git reference, formatted as `refs/heads/<branch name>`,
		 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
		 * Required
		 */
		ref: FormControl<string | null | undefined>,

		/**
		 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning)."
		 * Required
		 */
		sarif: FormControl<string | null | undefined>,

		/** The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		started_at: FormControl<Date | null | undefined>,

		/** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
		tool_name: FormControl<string | null | undefined>,
	}
	export function CreateCode_scanningSlashupload_sarifPostBodyFormGroup() {
		return new FormGroup<Code_scanningSlashupload_sarifPostBodyFormProperties>({
			checkout_uri: new FormControl<string | null | undefined>(undefined),
			commit_sha: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(40), Validators.maxLength(40), Validators.pattern('^[0-9a-fA-F]+$')]),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sarif: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			started_at: new FormControl<Date | null | undefined>(undefined),
			tool_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashadd_collaboratorPutBody {

		/** The permission to grant the collaborator. **Only valid on organization-owned repositories.** */
		permission?: TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission | null;
	}
	export interface ReposSlashadd_collaboratorPutBodyFormProperties {

		/** The permission to grant the collaborator. **Only valid on organization-owned repositories.** */
		permission: FormControl<TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission | null | undefined>,
	}
	export function CreateReposSlashadd_collaboratorPutBodyFormGroup() {
		return new FormGroup<ReposSlashadd_collaboratorPutBodyFormProperties>({
			permission: new FormControl<TeamsSlashadd_or_update_repo_permissions_in_orgPutBodyPermission | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_commit_commentPatchBody {

		/**
		 * The contents of the comment
		 * Required
		 */
		body: string;
	}
	export interface ReposSlashupdate_commit_commentPatchBodyFormProperties {

		/**
		 * The contents of the comment
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashupdate_commit_commentPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_commit_commentPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_commit_commentPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the commit comment.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_commit_commentPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the commit comment.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_commit_commentPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_commit_commentPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashcreate_commit_commentPostBody {

		/**
		 * The contents of the comment.
		 * Required
		 */
		body: string;

		/** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
		line?: number | null;

		/** Relative path of the file to comment on. */
		path?: string | null;

		/** Line index in the diff to comment on. */
		position?: number | null;
	}
	export interface ReposSlashcreate_commit_commentPostBodyFormProperties {

		/**
		 * The contents of the comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
		line: FormControl<number | null | undefined>,

		/** Relative path of the file to comment on. */
		path: FormControl<string | null | undefined>,

		/** Line index in the diff to comment on. */
		position: FormControl<number | null | undefined>,
	}
	export function CreateReposSlashcreate_commit_commentPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_commit_commentPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line: new FormControl<number | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			position: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ChecksSlashlist_for_refReturn {

		/** Required */
		check_runs: Array<Check_run>;

		/** Required */
		total_count: number;
	}
	export interface ChecksSlashlist_for_refReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateChecksSlashlist_for_refReturnFormGroup() {
		return new FormGroup<ChecksSlashlist_for_refReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ChecksSlashlist_suites_for_refReturn {

		/** Required */
		check_suites: Array<Check_suite>;

		/** Required */
		total_count: number;
	}
	export interface ChecksSlashlist_suites_for_refReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateChecksSlashlist_suites_for_refReturnFormGroup() {
		return new FormGroup<ChecksSlashlist_suites_for_refReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AppsSlashcreate_content_attachmentPostBody {

		/**
		 * The body of the attachment
		 * Required
		 * Max length: 262144
		 */
		body: string;

		/**
		 * The title of the attachment
		 * Required
		 * Max length: 1024
		 */
		title: string;
	}
	export interface AppsSlashcreate_content_attachmentPostBodyFormProperties {

		/**
		 * The body of the attachment
		 * Required
		 * Max length: 262144
		 */
		body: FormControl<string | null | undefined>,

		/**
		 * The title of the attachment
		 * Required
		 * Max length: 1024
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateAppsSlashcreate_content_attachmentPostBodyFormGroup() {
		return new FormGroup<AppsSlashcreate_content_attachmentPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(262144)]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1024)]),
		});

	}

	export interface ReposSlashget_contentReturn {

		/** Required */
		_links: ReposSlashget_contentReturn_links;
		content?: string | null;

		/** Required */
		download_url: string;

		/** Required */
		git_url: string;

		/** Required */
		html_url: string;

		/** Required */
		name: string;

		/** Required */
		path: string;

		/** Required */
		sha: string;

		/** Required */
		size: number;

		/** Required */
		type: string;

		/** Required */
		url: string;
	}
	export interface ReposSlashget_contentReturnFormProperties {
		content: FormControl<string | null | undefined>,

		/** Required */
		download_url: FormControl<string | null | undefined>,

		/** Required */
		git_url: FormControl<string | null | undefined>,

		/** Required */
		html_url: FormControl<string | null | undefined>,

		/** Required */
		name: FormControl<string | null | undefined>,

		/** Required */
		path: FormControl<string | null | undefined>,

		/** Required */
		sha: FormControl<string | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Required */
		type: FormControl<string | null | undefined>,

		/** Required */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashget_contentReturnFormGroup() {
		return new FormGroup<ReposSlashget_contentReturnFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			git_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashget_contentReturn_links {

		/** Required */
		git: string;

		/** Required */
		html: string;

		/** Required */
		self: string;
	}
	export interface ReposSlashget_contentReturn_linksFormProperties {

		/** Required */
		git: FormControl<string | null | undefined>,

		/** Required */
		html: FormControl<string | null | undefined>,

		/** Required */
		self: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashget_contentReturn_linksFormGroup() {
		return new FormGroup<ReposSlashget_contentReturn_linksFormProperties>({
			git: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			html: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			self: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashcreate_or_update_file_contentsPutBody {

		/** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
		author?: ReposSlashcreate_or_update_file_contentsPutBodyAuthor;

		/** The branch name. Default: the repository’s default branch (usually `master`) */
		branch?: string | null;

		/** The person that committed the file. Default: the authenticated user. */
		committer?: ReposSlashcreate_or_update_file_contentsPutBodyCommitter;

		/**
		 * The new file content, using Base64 encoding.
		 * Required
		 */
		content: string;

		/**
		 * The commit message.
		 * Required
		 */
		message: string;

		/** **Required if you are updating a file**. The blob SHA of the file being replaced. */
		sha?: string | null;
	}
	export interface ReposSlashcreate_or_update_file_contentsPutBodyFormProperties {

		/** The branch name. Default: the repository’s default branch (usually `master`) */
		branch: FormControl<string | null | undefined>,

		/**
		 * The new file content, using Base64 encoding.
		 * Required
		 */
		content: FormControl<string | null | undefined>,

		/**
		 * The commit message.
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/** **Required if you are updating a file**. The blob SHA of the file being replaced. */
		sha: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_or_update_file_contentsPutBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_or_update_file_contentsPutBodyFormProperties>({
			branch: new FormControl<string | null | undefined>(undefined),
			content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashcreate_or_update_file_contentsPutBodyAuthor {
		date?: string | null;

		/**
		 * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
		 * Required
		 */
		email: string;

		/**
		 * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
		 * Required
		 */
		name: string;
	}
	export interface ReposSlashcreate_or_update_file_contentsPutBodyAuthorFormProperties {
		date: FormControl<string | null | undefined>,

		/**
		 * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_or_update_file_contentsPutBodyAuthorFormGroup() {
		return new FormGroup<ReposSlashcreate_or_update_file_contentsPutBodyAuthorFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashcreate_or_update_file_contentsPutBodyCommitter {
		date?: string | null;

		/**
		 * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
		 * Required
		 */
		email: string;

		/**
		 * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
		 * Required
		 */
		name: string;
	}
	export interface ReposSlashcreate_or_update_file_contentsPutBodyCommitterFormProperties {
		date: FormControl<string | null | undefined>,

		/**
		 * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_or_update_file_contentsPutBodyCommitterFormGroup() {
		return new FormGroup<ReposSlashcreate_or_update_file_contentsPutBodyCommitterFormProperties>({
			date: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashcreate_deploymentPostBody {

		/** Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch. */
		auto_merge?: boolean | null;

		/** Short description of the deployment. */
		description?: string | null;

		/** Name for the target deployment environment (e.g., `production`, `staging`, `qa`). */
		environment?: string | null;
		payload?: string;

		/**
		 * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		production_environment?: boolean | null;

		/**
		 * The ref to deploy. This can be a branch, tag, or SHA.
		 * Required
		 */
		ref: string;

		/** The [status](https://docs.github.com/enterprise-server@3.1/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
		required_contexts?: Array<string>;

		/** Specifies a task to execute (e.g., `deploy` or `deploy:migrations`). */
		task?: string | null;

		/**
		 * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		transient_environment?: boolean | null;
	}
	export interface ReposSlashcreate_deploymentPostBodyFormProperties {

		/** Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch. */
		auto_merge: FormControl<boolean | null | undefined>,

		/** Short description of the deployment. */
		description: FormControl<string | null | undefined>,

		/** Name for the target deployment environment (e.g., `production`, `staging`, `qa`). */
		environment: FormControl<string | null | undefined>,
		payload: FormControl<string | null | undefined>,

		/**
		 * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		production_environment: FormControl<boolean | null | undefined>,

		/**
		 * The ref to deploy. This can be a branch, tag, or SHA.
		 * Required
		 */
		ref: FormControl<string | null | undefined>,

		/** Specifies a task to execute (e.g., `deploy` or `deploy:migrations`). */
		task: FormControl<string | null | undefined>,

		/**
		 * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		transient_environment: FormControl<boolean | null | undefined>,
	}
	export function CreateReposSlashcreate_deploymentPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_deploymentPostBodyFormProperties>({
			auto_merge: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			environment: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<string | null | undefined>(undefined),
			production_environment: new FormControl<boolean | null | undefined>(undefined),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			task: new FormControl<string | null | undefined>(undefined),
			transient_environment: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ReposSlashcreate_deployment_statusPostBody {

		/**
		 * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		auto_inactive?: boolean | null;

		/** A short description of the status. The maximum description length is 140 characters. */
		description?: string | null;

		/** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. */
		environment?: ReposSlashcreate_deployment_statusPostBodyEnvironment | null;

		/**
		 * Sets the URL for accessing your environment. Default: `""`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		environment_url?: string | null;

		/**
		 * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		log_url?: string | null;

		/**
		 * The state of the status. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
		 * Required
		 */
		state: ReposSlashcreate_deployment_statusPostBodyState;

		/** The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`. */
		target_url?: string | null;
	}
	export interface ReposSlashcreate_deployment_statusPostBodyFormProperties {

		/**
		 * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		auto_inactive: FormControl<boolean | null | undefined>,

		/** A short description of the status. The maximum description length is 140 characters. */
		description: FormControl<string | null | undefined>,

		/** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. */
		environment: FormControl<ReposSlashcreate_deployment_statusPostBodyEnvironment | null | undefined>,

		/**
		 * Sets the URL for accessing your environment. Default: `""`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		environment_url: FormControl<string | null | undefined>,

		/**
		 * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
		 * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.
		 */
		log_url: FormControl<string | null | undefined>,

		/**
		 * The state of the status. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
		 * Required
		 */
		state: FormControl<ReposSlashcreate_deployment_statusPostBodyState | null | undefined>,

		/** The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`. */
		target_url: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_deployment_statusPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_deployment_statusPostBodyFormProperties>({
			auto_inactive: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			environment: new FormControl<ReposSlashcreate_deployment_statusPostBodyEnvironment | null | undefined>(undefined),
			environment_url: new FormControl<string | null | undefined>(undefined),
			log_url: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<ReposSlashcreate_deployment_statusPostBodyState | null | undefined>(undefined, [Validators.required]),
			target_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ReposSlashcreate_deployment_statusPostBodyEnvironment { production = 0, staging = 1, qa = 2 }

	export enum ReposSlashcreate_deployment_statusPostBodyState { error = 0, failure = 1, inactive = 2, in_progress = 3, queued = 4, pending = 5, success = 6 }

	export interface ReposSlashcreate_dispatch_eventPostBody {

		/** JSON payload with extra information about the webhook event that your action or worklow may use. */
		client_payload?: string | null;

		/**
		 * A custom webhook event name. Must be 100 characters or fewer.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		event_type: string;
	}
	export interface ReposSlashcreate_dispatch_eventPostBodyFormProperties {

		/** JSON payload with extra information about the webhook event that your action or worklow may use. */
		client_payload: FormControl<string | null | undefined>,

		/**
		 * A custom webhook event name. Must be 100 characters or fewer.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		event_type: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_dispatch_eventPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_dispatch_eventPostBodyFormProperties>({
			client_payload: new FormControl<string | null | undefined>(undefined),
			event_type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(100)]),
		});

	}

	export enum ReposSlashlist_forksSort { newest = 0, oldest = 1, stargazers = 2, watchers = 3 }

	export interface ReposSlashcreate_forkPostBody {

		/** Optional parameter to specify the organization name if forking into an organization. */
		organization?: string | null;
	}
	export interface ReposSlashcreate_forkPostBodyFormProperties {

		/** Optional parameter to specify the organization name if forking into an organization. */
		organization: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_forkPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_forkPostBodyFormProperties>({
			organization: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GitSlashcreate_blobPostBody {

		/**
		 * The new blob's content.
		 * Required
		 */
		content: string;

		/** The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported. */
		encoding?: string | null;
	}
	export interface GitSlashcreate_blobPostBodyFormProperties {

		/**
		 * The new blob's content.
		 * Required
		 */
		content: FormControl<string | null | undefined>,

		/** The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported. */
		encoding: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_blobPostBodyFormGroup() {
		return new FormGroup<GitSlashcreate_blobPostBodyFormProperties>({
			content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			encoding: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GitSlashcreate_commitPostBody {

		/** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
		author?: GitSlashcreate_commitPostBodyAuthor;

		/** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
		committer?: GitSlashcreate_commitPostBodyCommitter;

		/**
		 * The commit message
		 * Required
		 */
		message: string;

		/** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
		parents?: Array<string>;

		/** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
		signature?: string | null;

		/**
		 * The SHA of the tree object this commit points to
		 * Required
		 */
		tree: string;
	}
	export interface GitSlashcreate_commitPostBodyFormProperties {

		/**
		 * The commit message
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
		signature: FormControl<string | null | undefined>,

		/**
		 * The SHA of the tree object this commit points to
		 * Required
		 */
		tree: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_commitPostBodyFormGroup() {
		return new FormGroup<GitSlashcreate_commitPostBodyFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			signature: new FormControl<string | null | undefined>(undefined),
			tree: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GitSlashcreate_commitPostBodyAuthor {

		/** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		date?: Date | null;

		/**
		 * The email of the author (or committer) of the commit
		 * Required
		 */
		email: string;

		/**
		 * The name of the author (or committer) of the commit
		 * Required
		 */
		name: string;
	}
	export interface GitSlashcreate_commitPostBodyAuthorFormProperties {

		/** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		date: FormControl<Date | null | undefined>,

		/**
		 * The email of the author (or committer) of the commit
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The name of the author (or committer) of the commit
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_commitPostBodyAuthorFormGroup() {
		return new FormGroup<GitSlashcreate_commitPostBodyAuthorFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GitSlashcreate_commitPostBodyCommitter {

		/** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		date?: Date | null;

		/** The email of the author (or committer) of the commit */
		email?: string | null;

		/** The name of the author (or committer) of the commit */
		name?: string | null;
	}
	export interface GitSlashcreate_commitPostBodyCommitterFormProperties {

		/** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		date: FormControl<Date | null | undefined>,

		/** The email of the author (or committer) of the commit */
		email: FormControl<string | null | undefined>,

		/** The name of the author (or committer) of the commit */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_commitPostBodyCommitterFormGroup() {
		return new FormGroup<GitSlashcreate_commitPostBodyCommitterFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GitSlashcreate_refPostBody {
		key?: string | null;

		/**
		 * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
		 * Required
		 */
		ref: string;

		/**
		 * The SHA1 value for this reference.
		 * Required
		 */
		sha: string;
	}
	export interface GitSlashcreate_refPostBodyFormProperties {
		key: FormControl<string | null | undefined>,

		/**
		 * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
		 * Required
		 */
		ref: FormControl<string | null | undefined>,

		/**
		 * The SHA1 value for this reference.
		 * Required
		 */
		sha: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_refPostBodyFormGroup() {
		return new FormGroup<GitSlashcreate_refPostBodyFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
			ref: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GitSlashupdate_refPatchBody {

		/** Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work. */
		force?: boolean | null;

		/**
		 * The SHA1 value to set this reference to
		 * Required
		 */
		sha: string;
	}
	export interface GitSlashupdate_refPatchBodyFormProperties {

		/** Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work. */
		force: FormControl<boolean | null | undefined>,

		/**
		 * The SHA1 value to set this reference to
		 * Required
		 */
		sha: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashupdate_refPatchBodyFormGroup() {
		return new FormGroup<GitSlashupdate_refPatchBodyFormProperties>({
			force: new FormControl<boolean | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GitSlashcreate_tagPostBody {

		/**
		 * The tag message.
		 * Required
		 */
		message: string;

		/**
		 * The SHA of the git object this is tagging.
		 * Required
		 */
		object: string;

		/**
		 * The tag's name. This is typically a version (e.g., "v0.0.1").
		 * Required
		 */
		tag: string;

		/** An object with information about the individual creating the tag. */
		tagger?: GitSlashcreate_tagPostBodyTagger;

		/**
		 * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
		 * Required
		 */
		type: GitSlashcreate_tagPostBodyType;
	}
	export interface GitSlashcreate_tagPostBodyFormProperties {

		/**
		 * The tag message.
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * The SHA of the git object this is tagging.
		 * Required
		 */
		object: FormControl<string | null | undefined>,

		/**
		 * The tag's name. This is typically a version (e.g., "v0.0.1").
		 * Required
		 */
		tag: FormControl<string | null | undefined>,

		/**
		 * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
		 * Required
		 */
		type: FormControl<GitSlashcreate_tagPostBodyType | null | undefined>,
	}
	export function CreateGitSlashcreate_tagPostBodyFormGroup() {
		return new FormGroup<GitSlashcreate_tagPostBodyFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			object: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tag: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<GitSlashcreate_tagPostBodyType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GitSlashcreate_tagPostBodyTagger {

		/** When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		date?: Date | null;

		/**
		 * The email of the author of the tag
		 * Required
		 */
		email: string;

		/**
		 * The name of the author of the tag
		 * Required
		 */
		name: string;
	}
	export interface GitSlashcreate_tagPostBodyTaggerFormProperties {

		/** When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		date: FormControl<Date | null | undefined>,

		/**
		 * The email of the author of the tag
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The name of the author of the tag
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_tagPostBodyTaggerFormGroup() {
		return new FormGroup<GitSlashcreate_tagPostBodyTaggerFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum GitSlashcreate_tagPostBodyType { commit = 0, tree = 1, blob = 2 }

	export interface GitSlashcreate_treePostBody {

		/**
		 * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
		 * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
		 */
		base_tree?: string | null;

		/**
		 * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
		 * Required
		 */
		GitSlashcreate_treePostBodyTree: Array<GitSlashcreate_treePostBodyTree>;
	}
	export interface GitSlashcreate_treePostBodyFormProperties {

		/**
		 * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
		 * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
		 */
		base_tree: FormControl<string | null | undefined>,
	}
	export function CreateGitSlashcreate_treePostBodyFormGroup() {
		return new FormGroup<GitSlashcreate_treePostBodyFormProperties>({
			base_tree: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GitSlashcreate_treePostBodyTree {

		/**
		 * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
		 * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
		 */
		content?: string | null;

		/** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
		mode?: GitSlashcreate_treePostBodyTreeMode | null;

		/** The file referenced in the tree. */
		path?: string | null;

		/**
		 * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
		 * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
		 */
		sha?: string | null;

		/** Either `blob`, `tree`, or `commit`. */
		type?: GitSlashcreate_treePostBodyTreeType | null;
	}
	export interface GitSlashcreate_treePostBodyTreeFormProperties {

		/**
		 * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
		 * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
		 */
		content: FormControl<string | null | undefined>,

		/** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
		mode: FormControl<GitSlashcreate_treePostBodyTreeMode | null | undefined>,

		/** The file referenced in the tree. */
		path: FormControl<string | null | undefined>,

		/**
		 * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
		 * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
		 */
		sha: FormControl<string | null | undefined>,

		/** Either `blob`, `tree`, or `commit`. */
		type: FormControl<GitSlashcreate_treePostBodyTreeType | null | undefined>,
	}
	export function CreateGitSlashcreate_treePostBodyTreeFormGroup() {
		return new FormGroup<GitSlashcreate_treePostBodyTreeFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			mode: new FormControl<GitSlashcreate_treePostBodyTreeMode | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GitSlashcreate_treePostBodyTreeType | null | undefined>(undefined),
		});

	}

	export enum GitSlashcreate_treePostBodyTreeMode { _100644 = 0, _100755 = 1, _040000 = 2, _160000 = 3, _120000 = 4 }

	export enum GitSlashcreate_treePostBodyTreeType { blob = 0, tree = 1, commit = 2 }

	export interface ReposSlashcreate_webhookPostBody {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active?: boolean | null;

		/** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-hook-config-params). */
		config?: ReposSlashcreate_webhookPostBodyConfig;

		/** Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for. */
		events?: Array<string>;

		/** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
		name?: string | null;
	}
	export interface ReposSlashcreate_webhookPostBodyFormProperties {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active: FormControl<boolean | null | undefined>,

		/** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_webhookPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_webhookPostBodyFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashcreate_webhookPostBodyConfig {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		digest?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;
		token?: string | null;

		/** The URL to which the payloads will be delivered. */
		url?: string | null;
	}
	export interface ReposSlashcreate_webhookPostBodyConfigFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,
		digest: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,
		token: FormControl<string | null | undefined>,

		/** The URL to which the payloads will be delivered. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_webhookPostBodyConfigFormGroup() {
		return new FormGroup<ReposSlashcreate_webhookPostBodyConfigFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			digest: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			token: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_webhookPatchBody {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active?: boolean | null;

		/** Determines a list of events to be added to the list of events that the Hook triggers for. */
		add_events?: Array<string>;

		/** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-hook-config-params). */
		config?: ReposSlashupdate_webhookPatchBodyConfig;

		/** Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events. */
		events?: Array<string>;

		/** Determines a list of events to be removed from the list of events that the Hook triggers for. */
		remove_events?: Array<string>;
	}
	export interface ReposSlashupdate_webhookPatchBodyFormProperties {

		/** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
		active: FormControl<boolean | null | undefined>,
	}
	export function CreateReposSlashupdate_webhookPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_webhookPatchBodyFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_webhookPatchBodyConfig {
		address?: string | null;

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;
		room?: string | null;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: string;
	}
	export interface ReposSlashupdate_webhookPatchBodyConfigFormProperties {
		address: FormControl<string | null | undefined>,

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,
		room: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the payloads will be delivered.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashupdate_webhookPatchBodyConfigFormGroup() {
		return new FormGroup<ReposSlashupdate_webhookPatchBodyConfigFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			content_type: new FormControl<string | null | undefined>(undefined),
			room: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashupdate_webhook_config_for_repoPatchBody {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type?: string | null;
		insecure_ssl?: Webhook_config_insecure_ssl;

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret?: string | null;

		/** The URL to which the payloads will be delivered. */
		url?: string | null;
	}
	export interface ReposSlashupdate_webhook_config_for_repoPatchBodyFormProperties {

		/** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
		content_type: FormControl<string | null | undefined>,

		/** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers). */
		secret: FormControl<string | null | undefined>,

		/** The URL to which the payloads will be delivered. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashupdate_webhook_config_for_repoPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_webhook_config_for_repoPatchBodyFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_invitationPatchBody {

		/** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
		permissions?: ReposSlashupdate_invitationPatchBodyPermissions | null;
	}
	export interface ReposSlashupdate_invitationPatchBodyFormProperties {

		/** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
		permissions: FormControl<ReposSlashupdate_invitationPatchBodyPermissions | null | undefined>,
	}
	export function CreateReposSlashupdate_invitationPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_invitationPatchBodyFormProperties>({
			permissions: new FormControl<ReposSlashupdate_invitationPatchBodyPermissions | null | undefined>(undefined),
		});

	}

	export enum ReposSlashupdate_invitationPatchBodyPermissions { read = 0, write = 1, maintain = 2, triage = 3, admin = 4 }

	export interface IssuesSlashcreatePostBody {

		/** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
		assignee?: string | null;

		/** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
		assignees?: Array<string>;

		/** The contents of the issue. */
		body?: string | null;

		/** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
		labels?: Array<string>;
		milestone?: string;

		/**
		 * The title of the issue.
		 * Required
		 */
		title: string;
	}
	export interface IssuesSlashcreatePostBodyFormProperties {

		/** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
		assignee: FormControl<string | null | undefined>,

		/** The contents of the issue. */
		body: FormControl<string | null | undefined>,
		milestone: FormControl<string | null | undefined>,

		/**
		 * The title of the issue.
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashcreatePostBodyFormGroup() {
		return new FormGroup<IssuesSlashcreatePostBodyFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined),
			body: new FormControl<string | null | undefined>(undefined),
			milestone: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum IssuesSlashlist_comments_for_repoSort { created = 0, updated = 1 }

	export interface IssuesSlashupdate_commentPatchBody {

		/**
		 * The contents of the comment.
		 * Required
		 */
		body: string;
	}
	export interface IssuesSlashupdate_commentPatchBodyFormProperties {

		/**
		 * The contents of the comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashupdate_commentPatchBodyFormGroup() {
		return new FormGroup<IssuesSlashupdate_commentPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_issue_commentPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the issue comment.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_issue_commentPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the issue comment.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_issue_commentPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_issue_commentPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface IssuesSlashupdatePatchBody {

		/** Login for the user that this issue should be assigned to. **This field is deprecated.** */
		assignee?: string | null;

		/** Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
		assignees?: Array<string>;

		/** The contents of the issue. */
		body?: string | null;

		/** Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
		labels?: Array<string>;
		milestone?: string;

		/** State of the issue. Either `open` or `closed`. */
		state?: Nullable_milestoneState | null;

		/** The title of the issue. */
		title?: string;
	}
	export interface IssuesSlashupdatePatchBodyFormProperties {

		/** Login for the user that this issue should be assigned to. **This field is deprecated.** */
		assignee: FormControl<string | null | undefined>,

		/** The contents of the issue. */
		body: FormControl<string | null | undefined>,
		milestone: FormControl<string | null | undefined>,

		/** State of the issue. Either `open` or `closed`. */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/** The title of the issue. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashupdatePatchBodyFormGroup() {
		return new FormGroup<IssuesSlashupdatePatchBodyFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined),
			body: new FormControl<string | null | undefined>(undefined),
			milestone: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface IssuesSlashadd_assigneesPostBody {

		/** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
		assignees?: Array<string>;
	}
	export interface IssuesSlashadd_assigneesPostBodyFormProperties {
	}
	export function CreateIssuesSlashadd_assigneesPostBodyFormGroup() {
		return new FormGroup<IssuesSlashadd_assigneesPostBodyFormProperties>({
		});

	}

	export interface IssuesSlashcreate_commentPostBody {

		/**
		 * The contents of the comment.
		 * Required
		 */
		body: string;
	}
	export interface IssuesSlashcreate_commentPostBodyFormProperties {

		/**
		 * The contents of the comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashcreate_commentPostBodyFormGroup() {
		return new FormGroup<IssuesSlashcreate_commentPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface IssuesSlashadd_labelsPostBody {

		/**
		 * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#set-labels-for-an-issue)."
		 * Minimum items: 1
		 */
		labels?: Array<string>;
	}
	export interface IssuesSlashadd_labelsPostBodyFormProperties {
	}
	export function CreateIssuesSlashadd_labelsPostBodyFormGroup() {
		return new FormGroup<IssuesSlashadd_labelsPostBodyFormProperties>({
		});

	}

	export interface IssuesSlashset_labelsPutBody {

		/**
		 * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#add-labels-to-an-issue)."
		 * Minimum items: 1
		 */
		labels?: Array<string>;
	}
	export interface IssuesSlashset_labelsPutBodyFormProperties {
	}
	export function CreateIssuesSlashset_labelsPutBodyFormGroup() {
		return new FormGroup<IssuesSlashset_labelsPutBodyFormProperties>({
		});

	}

	export interface IssuesSlashlockPutBody {

		/**
		 * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
		 * \* `off-topic`
		 * \* `too heated`
		 * \* `resolved`
		 * \* `spam`
		 */
		lock_reason?: IssuesSlashlockPutBodyLock_reason | null;
	}
	export interface IssuesSlashlockPutBodyFormProperties {

		/**
		 * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
		 * \* `off-topic`
		 * \* `too heated`
		 * \* `resolved`
		 * \* `spam`
		 */
		lock_reason: FormControl<IssuesSlashlockPutBodyLock_reason | null | undefined>,
	}
	export function CreateIssuesSlashlockPutBodyFormGroup() {
		return new FormGroup<IssuesSlashlockPutBodyFormProperties>({
			lock_reason: new FormControl<IssuesSlashlockPutBodyLock_reason | null | undefined>(undefined),
		});

	}

	export enum IssuesSlashlockPutBodyLock_reason { 'off-topic' = 0, 'too heated' = 1, resolved = 2, spam = 3 }

	export interface ReactionsSlashcreate_for_issuePostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the issue.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_issuePostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the issue.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_issuePostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_issuePostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashcreate_deploy_keyPostBody {

		/**
		 * The contents of the key.
		 * Required
		 */
		key: string;

		/**
		 * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
		 * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
		 */
		read_only?: boolean | null;

		/** A name for the key. */
		title?: string | null;
	}
	export interface ReposSlashcreate_deploy_keyPostBodyFormProperties {

		/**
		 * The contents of the key.
		 * Required
		 */
		key: FormControl<string | null | undefined>,

		/**
		 * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
		 * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
		 */
		read_only: FormControl<boolean | null | undefined>,

		/** A name for the key. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_deploy_keyPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_deploy_keyPostBodyFormProperties>({
			key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			read_only: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface IssuesSlashcreate_labelPostBody {

		/** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
		color?: string | null;

		/** A short description of the label. Must be 100 characters or fewer. */
		description?: string | null;

		/**
		 * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
		 * Required
		 */
		name: string;
	}
	export interface IssuesSlashcreate_labelPostBodyFormProperties {

		/** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
		color: FormControl<string | null | undefined>,

		/** A short description of the label. Must be 100 characters or fewer. */
		description: FormControl<string | null | undefined>,

		/**
		 * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashcreate_labelPostBodyFormGroup() {
		return new FormGroup<IssuesSlashcreate_labelPostBodyFormProperties>({
			color: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface IssuesSlashupdate_labelPatchBody {

		/** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
		color?: string | null;

		/** A short description of the label. Must be 100 characters or fewer. */
		description?: string | null;

		/** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
		new_name?: string | null;
	}
	export interface IssuesSlashupdate_labelPatchBodyFormProperties {

		/** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
		color: FormControl<string | null | undefined>,

		/** A short description of the label. Must be 100 characters or fewer. */
		description: FormControl<string | null | undefined>,

		/** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
		new_name: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashupdate_labelPatchBodyFormGroup() {
		return new FormGroup<IssuesSlashupdate_labelPatchBodyFormProperties>({
			color: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			new_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashmergePostBody {

		/**
		 * The name of the base branch that the head will be merged into.
		 * Required
		 */
		base: string;

		/** Commit message to use for the merge commit. If omitted, a default message will be used. */
		commit_message?: string | null;

		/**
		 * The head to merge. This can be a branch name or a commit SHA1.
		 * Required
		 */
		head: string;
	}
	export interface ReposSlashmergePostBodyFormProperties {

		/**
		 * The name of the base branch that the head will be merged into.
		 * Required
		 */
		base: FormControl<string | null | undefined>,

		/** Commit message to use for the merge commit. If omitted, a default message will be used. */
		commit_message: FormControl<string | null | undefined>,

		/**
		 * The head to merge. This can be a branch name or a commit SHA1.
		 * Required
		 */
		head: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashmergePostBodyFormGroup() {
		return new FormGroup<ReposSlashmergePostBodyFormProperties>({
			base: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_message: new FormControl<string | null | undefined>(undefined),
			head: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum IssuesSlashlist_milestonesSort { due_on = 0, completeness = 1 }

	export interface IssuesSlashcreate_milestonePostBody {

		/** A description of the milestone. */
		description?: string | null;

		/** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		due_on?: Date | null;

		/** The state of the milestone. Either `open` or `closed`. */
		state?: Nullable_milestoneState | null;

		/**
		 * The title of the milestone.
		 * Required
		 */
		title: string;
	}
	export interface IssuesSlashcreate_milestonePostBodyFormProperties {

		/** A description of the milestone. */
		description: FormControl<string | null | undefined>,

		/** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		due_on: FormControl<Date | null | undefined>,

		/** The state of the milestone. Either `open` or `closed`. */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/**
		 * The title of the milestone.
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashcreate_milestonePostBodyFormGroup() {
		return new FormGroup<IssuesSlashcreate_milestonePostBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			due_on: new FormControl<Date | null | undefined>(undefined),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface IssuesSlashupdate_milestonePatchBody {

		/** A description of the milestone. */
		description?: string | null;

		/** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		due_on?: Date | null;

		/** The state of the milestone. Either `open` or `closed`. */
		state?: Nullable_milestoneState | null;

		/** The title of the milestone. */
		title?: string | null;
	}
	export interface IssuesSlashupdate_milestonePatchBodyFormProperties {

		/** A description of the milestone. */
		description: FormControl<string | null | undefined>,

		/** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
		due_on: FormControl<Date | null | undefined>,

		/** The state of the milestone. Either `open` or `closed`. */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/** The title of the milestone. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateIssuesSlashupdate_milestonePatchBodyFormGroup() {
		return new FormGroup<IssuesSlashupdate_milestonePatchBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			due_on: new FormControl<Date | null | undefined>(undefined),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ActivitySlashmark_repo_notifications_as_readPutBody {

		/** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */
		last_read_at?: Date | null;
	}
	export interface ActivitySlashmark_repo_notifications_as_readPutBodyFormProperties {

		/** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */
		last_read_at: FormControl<Date | null | undefined>,
	}
	export function CreateActivitySlashmark_repo_notifications_as_readPutBodyFormGroup() {
		return new FormGroup<ActivitySlashmark_repo_notifications_as_readPutBodyFormProperties>({
			last_read_at: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ReposSlashcreate_pages_sitePostBody {

		/** The source branch and directory used to publish your Pages site. */
		source?: ReposSlashcreate_pages_sitePostBodySource;
	}
	export interface ReposSlashcreate_pages_sitePostBodyFormProperties {
	}
	export function CreateReposSlashcreate_pages_sitePostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_pages_sitePostBodyFormProperties>({
		});

	}

	export interface ReposSlashcreate_pages_sitePostBodySource {

		/**
		 * The repository branch used to publish your site's source files.
		 * Required
		 */
		branch: string;

		/** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/` */
		path?: ReposSlashcreate_pages_sitePostBodySourcePath | null;
	}
	export interface ReposSlashcreate_pages_sitePostBodySourceFormProperties {

		/**
		 * The repository branch used to publish your site's source files.
		 * Required
		 */
		branch: FormControl<string | null | undefined>,

		/** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/` */
		path: FormControl<ReposSlashcreate_pages_sitePostBodySourcePath | null | undefined>,
	}
	export function CreateReposSlashcreate_pages_sitePostBodySourceFormGroup() {
		return new FormGroup<ReposSlashcreate_pages_sitePostBodySourceFormProperties>({
			branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			path: new FormControl<ReposSlashcreate_pages_sitePostBodySourcePath | null | undefined>(undefined),
		});

	}

	export enum ReposSlashcreate_pages_sitePostBodySourcePath { '/' = 0, '/docs' = 1 }

	export interface ReposSlashupdate_information_about_pages_sitePutBody {

		/** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)." */
		cname?: string | null;

		/** Specify whether HTTPS should be enforced for the repository. */
		https_enforced?: boolean | null;

		/** Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */
		public?: boolean | null;
		source?: ReposSlashupdate_information_about_pages_sitePutBodySource;
	}
	export interface ReposSlashupdate_information_about_pages_sitePutBodyFormProperties {

		/** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)." */
		cname: FormControl<string | null | undefined>,

		/** Specify whether HTTPS should be enforced for the repository. */
		https_enforced: FormControl<boolean | null | undefined>,

		/** Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */
		public: FormControl<boolean | null | undefined>,
		source: FormControl<ReposSlashupdate_information_about_pages_sitePutBodySource | null | undefined>,
	}
	export function CreateReposSlashupdate_information_about_pages_sitePutBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_information_about_pages_sitePutBodyFormProperties>({
			cname: new FormControl<string | null | undefined>(undefined),
			https_enforced: new FormControl<boolean | null | undefined>(undefined),
			public: new FormControl<boolean | null | undefined>(undefined),
			source: new FormControl<ReposSlashupdate_information_about_pages_sitePutBodySource | null | undefined>(undefined),
		});

	}

	export enum ReposSlashupdate_information_about_pages_sitePutBodySource { 'gh-pages' = 0, master = 1, 'master /docs' = 2 }

	export interface Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBody {

		/** The state of enforcement for the hook on this repository. */
		enforcement?: Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyEnforcement | null;
	}
	export interface Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyFormProperties {

		/** The state of enforcement for the hook on this repository. */
		enforcement: FormControl<Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyEnforcement | null | undefined>,
	}
	export function CreateEnterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyFormProperties>({
			enforcement: new FormControl<Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyEnforcement | null | undefined>(undefined),
		});

	}

	export enum Enterprise_adminSlashupdate_pre_receive_hook_enforcement_for_repoPatchBodyEnforcement { enabled = 0, disabled = 1, testing = 2 }

	export interface ProjectsSlashcreate_for_repoPostBody {

		/** The description of the project. */
		body?: string | null;

		/**
		 * The name of the project.
		 * Required
		 */
		name: string;
	}
	export interface ProjectsSlashcreate_for_repoPostBodyFormProperties {

		/** The description of the project. */
		body: FormControl<string | null | undefined>,

		/**
		 * The name of the project.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashcreate_for_repoPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashcreate_for_repoPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PullsSlashlistSort { created = 0, updated = 1, popularity = 2, 'long-running' = 3 }

	export interface PullsSlashcreatePostBody {

		/**
		 * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
		 * Required
		 */
		base: string;

		/** The contents of the pull request. */
		body?: string | null;

		/** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
		draft?: boolean | null;

		/**
		 * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
		 * Required
		 */
		head: string;
		issue?: number | null;

		/** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
		maintainer_can_modify?: boolean | null;

		/** The title of the new pull request. */
		title?: string | null;
	}
	export interface PullsSlashcreatePostBodyFormProperties {

		/**
		 * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
		 * Required
		 */
		base: FormControl<string | null | undefined>,

		/** The contents of the pull request. */
		body: FormControl<string | null | undefined>,

		/** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
		draft: FormControl<boolean | null | undefined>,

		/**
		 * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
		 * Required
		 */
		head: FormControl<string | null | undefined>,
		issue: FormControl<number | null | undefined>,

		/** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
		maintainer_can_modify: FormControl<boolean | null | undefined>,

		/** The title of the new pull request. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashcreatePostBodyFormGroup() {
		return new FormGroup<PullsSlashcreatePostBodyFormProperties>({
			base: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			body: new FormControl<string | null | undefined>(undefined),
			draft: new FormControl<boolean | null | undefined>(undefined),
			head: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issue: new FormControl<number | null | undefined>(undefined),
			maintainer_can_modify: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PullsSlashlist_review_comments_for_repoSort { created = 0, updated = 1, created_at = 2 }

	export interface PullsSlashupdate_review_commentPatchBody {

		/**
		 * The text of the reply to the review comment.
		 * Required
		 */
		body: string;
	}
	export interface PullsSlashupdate_review_commentPatchBodyFormProperties {

		/**
		 * The text of the reply to the review comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashupdate_review_commentPatchBodyFormGroup() {
		return new FormGroup<PullsSlashupdate_review_commentPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_pull_request_review_commentPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the pull request review comment.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_pull_request_review_commentPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the pull request review comment.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_pull_request_review_commentPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_pull_request_review_commentPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PullsSlashupdatePatchBody {

		/** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
		base?: string | null;

		/** The contents of the pull request. */
		body?: string | null;

		/** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
		maintainer_can_modify?: boolean | null;

		/** State of this Pull Request. Either `open` or `closed`. */
		state?: Nullable_milestoneState | null;

		/** The title of the pull request. */
		title?: string | null;
	}
	export interface PullsSlashupdatePatchBodyFormProperties {

		/** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
		base: FormControl<string | null | undefined>,

		/** The contents of the pull request. */
		body: FormControl<string | null | undefined>,

		/** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
		maintainer_can_modify: FormControl<boolean | null | undefined>,

		/** State of this Pull Request. Either `open` or `closed`. */
		state: FormControl<Nullable_milestoneState | null | undefined>,

		/** The title of the pull request. */
		title: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashupdatePatchBodyFormGroup() {
		return new FormGroup<PullsSlashupdatePatchBodyFormProperties>({
			base: new FormControl<string | null | undefined>(undefined),
			body: new FormControl<string | null | undefined>(undefined),
			maintainer_can_modify: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<Nullable_milestoneState | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PullsSlashcreate_review_commentPostBody {

		/**
		 * The text of the review comment.
		 * Required
		 */
		body: string;

		/** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
		commit_id?: string | null;

		/** The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. */
		in_reply_to?: number | null;

		/** **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
		line?: number | null;

		/** The relative path to the file that necessitates a comment. */
		path?: string | null;

		/** **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */
		position?: number | null;

		/** **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
		side?: Pull_request_review_commentSide | null;

		/** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
		start_line?: number | null;

		/** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
		start_side?: PullsSlashcreate_review_commentPostBodyStart_side | null;
	}
	export interface PullsSlashcreate_review_commentPostBodyFormProperties {

		/**
		 * The text of the review comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
		commit_id: FormControl<string | null | undefined>,

		/** The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. */
		in_reply_to: FormControl<number | null | undefined>,

		/** **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
		line: FormControl<number | null | undefined>,

		/** The relative path to the file that necessitates a comment. */
		path: FormControl<string | null | undefined>,

		/** **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */
		position: FormControl<number | null | undefined>,

		/** **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
		side: FormControl<Pull_request_review_commentSide | null | undefined>,

		/** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
		start_line: FormControl<number | null | undefined>,

		/** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
		start_side: FormControl<PullsSlashcreate_review_commentPostBodyStart_side | null | undefined>,
	}
	export function CreatePullsSlashcreate_review_commentPostBodyFormGroup() {
		return new FormGroup<PullsSlashcreate_review_commentPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commit_id: new FormControl<string | null | undefined>(undefined),
			in_reply_to: new FormControl<number | null | undefined>(undefined),
			line: new FormControl<number | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined),
			position: new FormControl<number | null | undefined>(undefined),
			side: new FormControl<Pull_request_review_commentSide | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined),
			start_side: new FormControl<PullsSlashcreate_review_commentPostBodyStart_side | null | undefined>(undefined),
		});

	}

	export enum PullsSlashcreate_review_commentPostBodyStart_side { LEFT = 0, RIGHT = 1, side = 2 }

	export interface PullsSlashcreate_reply_for_review_commentPostBody {

		/**
		 * The text of the review comment.
		 * Required
		 */
		body: string;
	}
	export interface PullsSlashcreate_reply_for_review_commentPostBodyFormProperties {

		/**
		 * The text of the review comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashcreate_reply_for_review_commentPostBodyFormGroup() {
		return new FormGroup<PullsSlashcreate_reply_for_review_commentPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PullsSlashmergePutBody {

		/** Extra detail to append to automatic commit message. */
		commit_message?: string | null;

		/** Title for the automatic commit message. */
		commit_title?: string | null;

		/** Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`. */
		merge_method?: Auto_mergeMerge_method | null;

		/** SHA that pull request head must match to allow merge. */
		sha?: string | null;
	}
	export interface PullsSlashmergePutBodyFormProperties {

		/** Extra detail to append to automatic commit message. */
		commit_message: FormControl<string | null | undefined>,

		/** Title for the automatic commit message. */
		commit_title: FormControl<string | null | undefined>,

		/** Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`. */
		merge_method: FormControl<Auto_mergeMerge_method | null | undefined>,

		/** SHA that pull request head must match to allow merge. */
		sha: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashmergePutBodyFormGroup() {
		return new FormGroup<PullsSlashmergePutBodyFormProperties>({
			commit_message: new FormControl<string | null | undefined>(undefined),
			commit_title: new FormControl<string | null | undefined>(undefined),
			merge_method: new FormControl<Auto_mergeMerge_method | null | undefined>(undefined),
			sha: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PullsSlashrequest_reviewersPostBody {

		/** An array of user `login`s that will be requested. */
		reviewers?: Array<string>;

		/** An array of team `slug`s that will be requested. */
		team_reviewers?: Array<string>;
	}
	export interface PullsSlashrequest_reviewersPostBodyFormProperties {
	}
	export function CreatePullsSlashrequest_reviewersPostBodyFormGroup() {
		return new FormGroup<PullsSlashrequest_reviewersPostBodyFormProperties>({
		});

	}

	export interface PullsSlashcreate_reviewPostBody {

		/** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
		body?: string | null;

		/** Use the following table to specify the location, destination, and contents of the draft review comment. */
		PullsSlashcreate_reviewPostBodyComments?: Array<PullsSlashcreate_reviewPostBodyComments>;

		/** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
		commit_id?: string | null;

		/** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready. */
		event?: PullsSlashcreate_reviewPostBodyEvent | null;
	}
	export interface PullsSlashcreate_reviewPostBodyFormProperties {

		/** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
		body: FormControl<string | null | undefined>,

		/** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
		commit_id: FormControl<string | null | undefined>,

		/** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready. */
		event: FormControl<PullsSlashcreate_reviewPostBodyEvent | null | undefined>,
	}
	export function CreatePullsSlashcreate_reviewPostBodyFormGroup() {
		return new FormGroup<PullsSlashcreate_reviewPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			commit_id: new FormControl<string | null | undefined>(undefined),
			event: new FormControl<PullsSlashcreate_reviewPostBodyEvent | null | undefined>(undefined),
		});

	}

	export interface PullsSlashcreate_reviewPostBodyComments {

		/**
		 * Text of the review comment.
		 * Required
		 */
		body: string;
		line?: number | null;

		/**
		 * The relative path to the file that necessitates a review comment.
		 * Required
		 */
		path: string;

		/** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
		position?: number | null;
		side?: string | null;
		start_line?: number | null;
		start_side?: string | null;
	}
	export interface PullsSlashcreate_reviewPostBodyCommentsFormProperties {

		/**
		 * Text of the review comment.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
		line: FormControl<number | null | undefined>,

		/**
		 * The relative path to the file that necessitates a review comment.
		 * Required
		 */
		path: FormControl<string | null | undefined>,

		/** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
		position: FormControl<number | null | undefined>,
		side: FormControl<string | null | undefined>,
		start_line: FormControl<number | null | undefined>,
		start_side: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashcreate_reviewPostBodyCommentsFormGroup() {
		return new FormGroup<PullsSlashcreate_reviewPostBodyCommentsFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line: new FormControl<number | null | undefined>(undefined),
			path: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			position: new FormControl<number | null | undefined>(undefined),
			side: new FormControl<string | null | undefined>(undefined),
			start_line: new FormControl<number | null | undefined>(undefined),
			start_side: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PullsSlashcreate_reviewPostBodyEvent { APPROVE = 0, REQUEST_CHANGES = 1, COMMENT = 2 }

	export interface PullsSlashupdate_reviewPutBody {

		/**
		 * The body text of the pull request review.
		 * Required
		 */
		body: string;
	}
	export interface PullsSlashupdate_reviewPutBodyFormProperties {

		/**
		 * The body text of the pull request review.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashupdate_reviewPutBodyFormGroup() {
		return new FormGroup<PullsSlashupdate_reviewPutBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PullsSlashdismiss_reviewPutBody {
		event?: string | null;

		/**
		 * The message for the pull request review dismissal
		 * Required
		 */
		message: string;
	}
	export interface PullsSlashdismiss_reviewPutBodyFormProperties {
		event: FormControl<string | null | undefined>,

		/**
		 * The message for the pull request review dismissal
		 * Required
		 */
		message: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashdismiss_reviewPutBodyFormGroup() {
		return new FormGroup<PullsSlashdismiss_reviewPutBodyFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PullsSlashsubmit_reviewPostBody {

		/** The body text of the pull request review */
		body?: string | null;

		/**
		 * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
		 * Required
		 */
		event: PullsSlashcreate_reviewPostBodyEvent;
	}
	export interface PullsSlashsubmit_reviewPostBodyFormProperties {

		/** The body text of the pull request review */
		body: FormControl<string | null | undefined>,

		/**
		 * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
		 * Required
		 */
		event: FormControl<PullsSlashcreate_reviewPostBodyEvent | null | undefined>,
	}
	export function CreatePullsSlashsubmit_reviewPostBodyFormGroup() {
		return new FormGroup<PullsSlashsubmit_reviewPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			event: new FormControl<PullsSlashcreate_reviewPostBodyEvent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PullsSlashupdate_branchPutBody {

		/** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
		expected_head_sha?: string | null;
	}
	export interface PullsSlashupdate_branchPutBodyFormProperties {

		/** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
		expected_head_sha: FormControl<string | null | undefined>,
	}
	export function CreatePullsSlashupdate_branchPutBodyFormGroup() {
		return new FormGroup<PullsSlashupdate_branchPutBodyFormProperties>({
			expected_head_sha: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashcreate_releasePostBody {

		/** Text describing the contents of the tag. */
		body?: string | null;

		/** `true` to create a draft (unpublished) release, `false` to create a published one. */
		draft?: boolean | null;

		/** The name of the release. */
		name?: string | null;

		/** `true` to identify the release as a prerelease. `false` to identify the release as a full release. */
		prerelease?: boolean | null;

		/**
		 * The name of the tag.
		 * Required
		 */
		tag_name: string;

		/** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
		target_commitish?: string | null;
	}
	export interface ReposSlashcreate_releasePostBodyFormProperties {

		/** Text describing the contents of the tag. */
		body: FormControl<string | null | undefined>,

		/** `true` to create a draft (unpublished) release, `false` to create a published one. */
		draft: FormControl<boolean | null | undefined>,

		/** The name of the release. */
		name: FormControl<string | null | undefined>,

		/** `true` to identify the release as a prerelease. `false` to identify the release as a full release. */
		prerelease: FormControl<boolean | null | undefined>,

		/**
		 * The name of the tag.
		 * Required
		 */
		tag_name: FormControl<string | null | undefined>,

		/** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
		target_commitish: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_releasePostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_releasePostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			draft: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			prerelease: new FormControl<boolean | null | undefined>(undefined),
			tag_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target_commitish: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_release_assetPatchBody {

		/** An alternate short description of the asset. Used in place of the filename. */
		label?: string | null;

		/** The file name of the asset. */
		name?: string | null;
		state?: string | null;
	}
	export interface ReposSlashupdate_release_assetPatchBodyFormProperties {

		/** An alternate short description of the asset. Used in place of the filename. */
		label: FormControl<string | null | undefined>,

		/** The file name of the asset. */
		name: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashupdate_release_assetPatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_release_assetPatchBodyFormProperties>({
			label: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ReposSlashupdate_releasePatchBody {

		/** Text describing the contents of the tag. */
		body?: string | null;

		/** `true` makes the release a draft, and `false` publishes the release. */
		draft?: boolean | null;

		/** The name of the release. */
		name?: string | null;

		/** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
		prerelease?: boolean | null;

		/** The name of the tag. */
		tag_name?: string | null;

		/** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
		target_commitish?: string | null;
	}
	export interface ReposSlashupdate_releasePatchBodyFormProperties {

		/** Text describing the contents of the tag. */
		body: FormControl<string | null | undefined>,

		/** `true` makes the release a draft, and `false` publishes the release. */
		draft: FormControl<boolean | null | undefined>,

		/** The name of the release. */
		name: FormControl<string | null | undefined>,

		/** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
		prerelease: FormControl<boolean | null | undefined>,

		/** The name of the tag. */
		tag_name: FormControl<string | null | undefined>,

		/** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
		target_commitish: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashupdate_releasePatchBodyFormGroup() {
		return new FormGroup<ReposSlashupdate_releasePatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			draft: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			prerelease: new FormControl<boolean | null | undefined>(undefined),
			tag_name: new FormControl<string | null | undefined>(undefined),
			target_commitish: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Secret_scanningSlashupdate_alertPatchBody {

		/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
		resolution?: Secret_scanningSlashupdate_alertPatchBodyResolution | null;

		/**
		 * Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
		 * Required
		 */
		state: Secret_scanning_alertState;
	}
	export interface Secret_scanningSlashupdate_alertPatchBodyFormProperties {

		/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
		resolution: FormControl<Secret_scanningSlashupdate_alertPatchBodyResolution | null | undefined>,

		/**
		 * Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
		 * Required
		 */
		state: FormControl<Secret_scanning_alertState | null | undefined>,
	}
	export function CreateSecret_scanningSlashupdate_alertPatchBodyFormGroup() {
		return new FormGroup<Secret_scanningSlashupdate_alertPatchBodyFormProperties>({
			resolution: new FormControl<Secret_scanningSlashupdate_alertPatchBodyResolution | null | undefined>(undefined),
			state: new FormControl<Secret_scanning_alertState | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Secret_scanningSlashupdate_alertPatchBodyResolution { _null = 0, false_positive = 1, wont_fix = 2, revoked = 3, used_in_tests = 4 }

	export interface ReposSlashcreate_commit_statusPostBody {

		/** A string label to differentiate this status from the status of other systems. This field is case-insensitive. */
		context?: string | null;

		/** A short description of the status. */
		description?: string | null;

		/**
		 * The state of the status.
		 * Required
		 */
		state: ReposSlashcreate_commit_statusPostBodyState;

		/**
		 * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
		 * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
		 * `http://ci.example.com/user/repo/build/sha`
		 */
		target_url?: string | null;
	}
	export interface ReposSlashcreate_commit_statusPostBodyFormProperties {

		/** A string label to differentiate this status from the status of other systems. This field is case-insensitive. */
		context: FormControl<string | null | undefined>,

		/** A short description of the status. */
		description: FormControl<string | null | undefined>,

		/**
		 * The state of the status.
		 * Required
		 */
		state: FormControl<ReposSlashcreate_commit_statusPostBodyState | null | undefined>,

		/**
		 * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
		 * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
		 * `http://ci.example.com/user/repo/build/sha`
		 */
		target_url: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashcreate_commit_statusPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_commit_statusPostBodyFormProperties>({
			context: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<ReposSlashcreate_commit_statusPostBodyState | null | undefined>(undefined, [Validators.required]),
			target_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ReposSlashcreate_commit_statusPostBodyState { error = 0, failure = 1, pending = 2, success = 3 }

	export interface ActivitySlashset_repo_subscriptionPutBody {

		/** Determines if all notifications should be blocked from this repository. */
		ignored?: boolean | null;

		/** Determines if notifications should be received from this repository. */
		subscribed?: boolean | null;
	}
	export interface ActivitySlashset_repo_subscriptionPutBodyFormProperties {

		/** Determines if all notifications should be blocked from this repository. */
		ignored: FormControl<boolean | null | undefined>,

		/** Determines if notifications should be received from this repository. */
		subscribed: FormControl<boolean | null | undefined>,
	}
	export function CreateActivitySlashset_repo_subscriptionPutBodyFormGroup() {
		return new FormGroup<ActivitySlashset_repo_subscriptionPutBodyFormProperties>({
			ignored: new FormControl<boolean | null | undefined>(undefined),
			subscribed: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ReposSlashreplace_all_topicsPutBody {

		/**
		 * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
		 * Required
		 */
		names: Array<string>;
	}
	export interface ReposSlashreplace_all_topicsPutBodyFormProperties {
	}
	export function CreateReposSlashreplace_all_topicsPutBodyFormGroup() {
		return new FormGroup<ReposSlashreplace_all_topicsPutBodyFormProperties>({
		});

	}

	export interface ReposSlashtransferPostBody {

		/**
		 * The username or organization name the repository will be transferred to.
		 * Required
		 */
		new_owner: string;

		/** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
		team_ids?: Array<number>;
	}
	export interface ReposSlashtransferPostBodyFormProperties {

		/**
		 * The username or organization name the repository will be transferred to.
		 * Required
		 */
		new_owner: FormControl<string | null | undefined>,
	}
	export function CreateReposSlashtransferPostBodyFormGroup() {
		return new FormGroup<ReposSlashtransferPostBodyFormProperties>({
			new_owner: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReposSlashcreate_using_templatePostBody {

		/** A short description of the new repository. */
		description?: string | null;

		/** Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`. */
		include_all_branches?: boolean | null;

		/**
		 * The name of the new repository.
		 * Required
		 */
		name: string;

		/** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
		owner?: string | null;

		/** Either `true` to create a new private repository or `false` to create a new public one. */
		private?: boolean | null;
	}
	export interface ReposSlashcreate_using_templatePostBodyFormProperties {

		/** A short description of the new repository. */
		description: FormControl<string | null | undefined>,

		/** Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`. */
		include_all_branches: FormControl<boolean | null | undefined>,

		/**
		 * The name of the new repository.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
		owner: FormControl<string | null | undefined>,

		/** Either `true` to create a new private repository or `false` to create a new public one. */
		private: FormControl<boolean | null | undefined>,
	}
	export function CreateReposSlashcreate_using_templatePostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_using_templatePostBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			include_all_branches: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			owner: new FormControl<string | null | undefined>(undefined),
			private: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum ReposSlashlist_publicVisibility { all = 0, public = 1 }

	export enum SearchSlashcodeSort { indexed = 0 }

	export enum SearchSlashcodeOrder { desc = 0, asc = 1 }

	export interface SearchSlashcodeReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<Code_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashcodeReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashcodeReturnFormGroup() {
		return new FormGroup<SearchSlashcodeReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SearchSlashcommitsSort { 'author-date' = 0, 'committer-date' = 1 }

	export interface SearchSlashcommitsReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<Commit_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashcommitsReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashcommitsReturnFormGroup() {
		return new FormGroup<SearchSlashcommitsReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SearchSlashissues_and_pull_requestsSort { comments = 0, reactions = 1, 'reactions-+1' = 2, 'reactions--1' = 3, 'reactions-smile' = 4, 'reactions-thinking_face' = 5, 'reactions-heart' = 6, 'reactions-tada' = 7, interactions = 8, created = 9, updated = 10 }

	export interface SearchSlashissues_and_pull_requestsReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<Issue_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashissues_and_pull_requestsReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashissues_and_pull_requestsReturnFormGroup() {
		return new FormGroup<SearchSlashissues_and_pull_requestsReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface SearchSlashlabelsReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<Label_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashlabelsReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashlabelsReturnFormGroup() {
		return new FormGroup<SearchSlashlabelsReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SearchSlashreposSort { stars = 0, forks = 1, 'help-wanted-issues' = 2, updated = 3 }

	export interface SearchSlashreposReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<Repo_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashreposReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashreposReturnFormGroup() {
		return new FormGroup<SearchSlashreposReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface SearchSlashtopicsReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<Topic_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashtopicsReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashtopicsReturnFormGroup() {
		return new FormGroup<SearchSlashtopicsReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SearchSlashusersSort { followers = 0, repositories = 1, joined = 2 }

	export interface SearchSlashusersReturn {

		/** Required */
		incomplete_results: boolean;

		/** Required */
		items: Array<User_search_result_item>;

		/** Required */
		total_count: number;
	}
	export interface SearchSlashusersReturnFormProperties {

		/** Required */
		incomplete_results: FormControl<boolean | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateSearchSlashusersReturnFormGroup() {
		return new FormGroup<SearchSlashusersReturnFormProperties>({
			incomplete_results: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamsSlashupdate_legacyPatchBody {

		/** The description of the team. */
		description?: string | null;

		/**
		 * The name of the team.
		 * Required
		 */
		name: string;

		/** The ID of a team to set as the parent team. */
		parent_team_id?: number | null;

		/** **Deprecated**. The permission that new repositories will be added to the team with when none is specified. */
		permission?: TeamsSlashupdate_in_orgPatchBodyPermission | null;

		/**
		 * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
		 * **For a non-nested team:**
		 * \* `secret` - only visible to organization owners and members of this team.
		 * \* `closed` - visible to all members of this organization.
		 * **For a parent or child team:**
		 * \* `closed` - visible to all members of this organization.
		 */
		privacy?: TeamsSlashcreatePostBodyPrivacy | null;
	}
	export interface TeamsSlashupdate_legacyPatchBodyFormProperties {

		/** The description of the team. */
		description: FormControl<string | null | undefined>,

		/**
		 * The name of the team.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The ID of a team to set as the parent team. */
		parent_team_id: FormControl<number | null | undefined>,

		/** **Deprecated**. The permission that new repositories will be added to the team with when none is specified. */
		permission: FormControl<TeamsSlashupdate_in_orgPatchBodyPermission | null | undefined>,

		/**
		 * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
		 * **For a non-nested team:**
		 * \* `secret` - only visible to organization owners and members of this team.
		 * \* `closed` - visible to all members of this organization.
		 * **For a parent or child team:**
		 * \* `closed` - visible to all members of this organization.
		 */
		privacy: FormControl<TeamsSlashcreatePostBodyPrivacy | null | undefined>,
	}
	export function CreateTeamsSlashupdate_legacyPatchBodyFormGroup() {
		return new FormGroup<TeamsSlashupdate_legacyPatchBodyFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			parent_team_id: new FormControl<number | null | undefined>(undefined),
			permission: new FormControl<TeamsSlashupdate_in_orgPatchBodyPermission | null | undefined>(undefined),
			privacy: new FormControl<TeamsSlashcreatePostBodyPrivacy | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashcreate_discussion_legacyPostBody {

		/**
		 * The discussion post's body text.
		 * Required
		 */
		body: string;

		/** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
		private?: boolean | null;

		/**
		 * The discussion post's title.
		 * Required
		 */
		title: string;
	}
	export interface TeamsSlashcreate_discussion_legacyPostBodyFormProperties {

		/**
		 * The discussion post's body text.
		 * Required
		 */
		body: FormControl<string | null | undefined>,

		/** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
		private: FormControl<boolean | null | undefined>,

		/**
		 * The discussion post's title.
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashcreate_discussion_legacyPostBodyFormGroup() {
		return new FormGroup<TeamsSlashcreate_discussion_legacyPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamsSlashupdate_discussion_legacyPatchBody {

		/** The discussion post's body text. */
		body?: string | null;

		/** The discussion post's title. */
		title?: string | null;
	}
	export interface TeamsSlashupdate_discussion_legacyPatchBodyFormProperties {

		/** The discussion post's body text. */
		body: FormControl<string | null | undefined>,

		/** The discussion post's title. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashupdate_discussion_legacyPatchBodyFormGroup() {
		return new FormGroup<TeamsSlashupdate_discussion_legacyPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashcreate_discussion_comment_legacyPostBody {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: string;
	}
	export interface TeamsSlashcreate_discussion_comment_legacyPostBodyFormProperties {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashcreate_discussion_comment_legacyPostBodyFormGroup() {
		return new FormGroup<TeamsSlashcreate_discussion_comment_legacyPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamsSlashupdate_discussion_comment_legacyPatchBody {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: string;
	}
	export interface TeamsSlashupdate_discussion_comment_legacyPatchBodyFormProperties {

		/**
		 * The discussion comment's body text.
		 * Required
		 */
		body: FormControl<string | null | undefined>,
	}
	export function CreateTeamsSlashupdate_discussion_comment_legacyPatchBodyFormGroup() {
		return new FormGroup<TeamsSlashupdate_discussion_comment_legacyPatchBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_team_discussion_comment_legacyPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion comment.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_team_discussion_comment_legacyPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion comment.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_team_discussion_comment_legacyPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_team_discussion_comment_legacyPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReactionsSlashcreate_for_team_discussion_legacyPostBody {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion.
		 * Required
		 */
		content: ReactionContent;
	}
	export interface ReactionsSlashcreate_for_team_discussion_legacyPostBodyFormProperties {

		/**
		 * The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion.
		 * Required
		 */
		content: FormControl<ReactionContent | null | undefined>,
	}
	export function CreateReactionsSlashcreate_for_team_discussion_legacyPostBodyFormGroup() {
		return new FormGroup<ReactionsSlashcreate_for_team_discussion_legacyPostBodyFormProperties>({
			content: new FormControl<ReactionContent | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TeamsSlashadd_or_update_membership_for_user_legacyPutBody {

		/** The role that this user should have in the team. */
		role?: Team_membershipRole | null;
	}
	export interface TeamsSlashadd_or_update_membership_for_user_legacyPutBodyFormProperties {

		/** The role that this user should have in the team. */
		role: FormControl<Team_membershipRole | null | undefined>,
	}
	export function CreateTeamsSlashadd_or_update_membership_for_user_legacyPutBodyFormGroup() {
		return new FormGroup<TeamsSlashadd_or_update_membership_for_user_legacyPutBodyFormProperties>({
			role: new FormControl<Team_membershipRole | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashadd_or_update_project_permissions_legacyPutBody {

		/** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)." */
		permission?: App_permissionsOrganization_projects | null;
	}
	export interface TeamsSlashadd_or_update_project_permissions_legacyPutBodyFormProperties {

		/** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)." */
		permission: FormControl<App_permissionsOrganization_projects | null | undefined>,
	}
	export function CreateTeamsSlashadd_or_update_project_permissions_legacyPutBodyFormGroup() {
		return new FormGroup<TeamsSlashadd_or_update_project_permissions_legacyPutBodyFormProperties>({
			permission: new FormControl<App_permissionsOrganization_projects | null | undefined>(undefined),
		});

	}

	export interface TeamsSlashadd_or_update_repo_permissions_legacyPutBody {

		/** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
		permission?: TeamsSlashupdate_in_orgPatchBodyPermission | null;
	}
	export interface TeamsSlashadd_or_update_repo_permissions_legacyPutBodyFormProperties {

		/** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
		permission: FormControl<TeamsSlashupdate_in_orgPatchBodyPermission | null | undefined>,
	}
	export function CreateTeamsSlashadd_or_update_repo_permissions_legacyPutBodyFormGroup() {
		return new FormGroup<TeamsSlashadd_or_update_repo_permissions_legacyPutBodyFormProperties>({
			permission: new FormControl<TeamsSlashupdate_in_orgPatchBodyPermission | null | undefined>(undefined),
		});

	}

	export interface UsersSlashupdate_authenticatedPatchBody {

		/** The new short biography of the user. */
		bio?: string | null;

		/** The new blog URL of the user. */
		blog?: string | null;

		/** The new company of the user. */
		company?: string | null;

		/** The publicly visible email address of the user. */
		email?: string | null;

		/** The new hiring availability of the user. */
		hireable?: boolean | null;

		/** The new location of the user. */
		location?: string | null;

		/** The new name of the user. */
		name?: string | null;

		/** The new Twitter username of the user. */
		twitter_username?: string | null;
	}
	export interface UsersSlashupdate_authenticatedPatchBodyFormProperties {

		/** The new short biography of the user. */
		bio: FormControl<string | null | undefined>,

		/** The new blog URL of the user. */
		blog: FormControl<string | null | undefined>,

		/** The new company of the user. */
		company: FormControl<string | null | undefined>,

		/** The publicly visible email address of the user. */
		email: FormControl<string | null | undefined>,

		/** The new hiring availability of the user. */
		hireable: FormControl<boolean | null | undefined>,

		/** The new location of the user. */
		location: FormControl<string | null | undefined>,

		/** The new name of the user. */
		name: FormControl<string | null | undefined>,

		/** The new Twitter username of the user. */
		twitter_username: FormControl<string | null | undefined>,
	}
	export function CreateUsersSlashupdate_authenticatedPatchBodyFormGroup() {
		return new FormGroup<UsersSlashupdate_authenticatedPatchBodyFormProperties>({
			bio: new FormControl<string | null | undefined>(undefined),
			blog: new FormControl<string | null | undefined>(undefined),
			company: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			hireable: new FormControl<boolean | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			twitter_username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UsersSlashadd_email_for_authenticated_userPostBody {

		/**
		 * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
		 * Required
		 */
		emails: Array<string>;
	}
	export interface UsersSlashadd_email_for_authenticated_userPostBodyFormProperties {
	}
	export function CreateUsersSlashadd_email_for_authenticated_userPostBodyFormGroup() {
		return new FormGroup<UsersSlashadd_email_for_authenticated_userPostBodyFormProperties>({
		});

	}

	export interface UsersSlashcreate_gpg_key_for_authenticated_userPostBody {

		/**
		 * A GPG key in ASCII-armored format.
		 * Required
		 */
		armored_public_key: string;
	}
	export interface UsersSlashcreate_gpg_key_for_authenticated_userPostBodyFormProperties {

		/**
		 * A GPG key in ASCII-armored format.
		 * Required
		 */
		armored_public_key: FormControl<string | null | undefined>,
	}
	export function CreateUsersSlashcreate_gpg_key_for_authenticated_userPostBodyFormGroup() {
		return new FormGroup<UsersSlashcreate_gpg_key_for_authenticated_userPostBodyFormProperties>({
			armored_public_key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AppsSlashlist_installations_for_authenticated_userReturn {

		/** Required */
		installations: Array<Installation>;

		/** Required */
		total_count: number;
	}
	export interface AppsSlashlist_installations_for_authenticated_userReturnFormProperties {

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateAppsSlashlist_installations_for_authenticated_userReturnFormGroup() {
		return new FormGroup<AppsSlashlist_installations_for_authenticated_userReturnFormProperties>({
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AppsSlashlist_installation_repos_for_authenticated_userReturn {

		/** Required */
		repositories: Array<Repository>;
		repository_selection?: string | null;

		/** Required */
		total_count: number;
	}
	export interface AppsSlashlist_installation_repos_for_authenticated_userReturnFormProperties {
		repository_selection: FormControl<string | null | undefined>,

		/** Required */
		total_count: FormControl<number | null | undefined>,
	}
	export function CreateAppsSlashlist_installation_repos_for_authenticated_userReturnFormGroup() {
		return new FormGroup<AppsSlashlist_installation_repos_for_authenticated_userReturnFormProperties>({
			repository_selection: new FormControl<string | null | undefined>(undefined),
			total_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UsersSlashcreate_public_ssh_key_for_authenticated_userPostBody {

		/**
		 * The public SSH key to add to your GitHub account.
		 * Required
		 */
		key: string;

		/** A descriptive name for the new key. */
		title?: string | null;
	}
	export interface UsersSlashcreate_public_ssh_key_for_authenticated_userPostBodyFormProperties {

		/**
		 * The public SSH key to add to your GitHub account.
		 * Required
		 */
		key: FormControl<string | null | undefined>,

		/** A descriptive name for the new key. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateUsersSlashcreate_public_ssh_key_for_authenticated_userPostBodyFormGroup() {
		return new FormGroup<UsersSlashcreate_public_ssh_key_for_authenticated_userPostBodyFormProperties>({
			key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.pattern('^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ')]),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OrgsSlashupdate_membership_for_authenticated_userPatchBody {

		/**
		 * The state that the membership should be in. Only `"active"` will be accepted.
		 * Required
		 */
		state: OrgsSlashupdate_membership_for_authenticated_userPatchBodyState;
	}
	export interface OrgsSlashupdate_membership_for_authenticated_userPatchBodyFormProperties {

		/**
		 * The state that the membership should be in. Only `"active"` will be accepted.
		 * Required
		 */
		state: FormControl<OrgsSlashupdate_membership_for_authenticated_userPatchBodyState | null | undefined>,
	}
	export function CreateOrgsSlashupdate_membership_for_authenticated_userPatchBodyFormGroup() {
		return new FormGroup<OrgsSlashupdate_membership_for_authenticated_userPatchBodyFormProperties>({
			state: new FormControl<OrgsSlashupdate_membership_for_authenticated_userPatchBodyState | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum OrgsSlashupdate_membership_for_authenticated_userPatchBodyState { active = 0 }

	export interface ProjectsSlashcreate_for_authenticated_userPostBody {

		/** Body of the project */
		body?: string | null;

		/**
		 * Name of the project
		 * Required
		 */
		name: string;
	}
	export interface ProjectsSlashcreate_for_authenticated_userPostBodyFormProperties {

		/** Body of the project */
		body: FormControl<string | null | undefined>,

		/**
		 * Name of the project
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateProjectsSlashcreate_for_authenticated_userPostBodyFormGroup() {
		return new FormGroup<ProjectsSlashcreate_for_authenticated_userPostBodyFormProperties>({
			body: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ReposSlashlist_for_authenticated_userVisibility { all = 0, public = 1, private = 2 }

	export enum ReposSlashlist_for_authenticated_userType { all = 0, owner = 1, public = 2, private = 3, member = 4 }

	export interface ReposSlashcreate_for_authenticated_userPostBody {

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit?: boolean | null;

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge?: boolean | null;

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge?: boolean | null;

		/** Whether the repository is initialized with a minimal README. */
		auto_init?: boolean | null;

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge?: boolean | null;

		/** A short description of the repository. */
		description?: string | null;

		/** The desired language or platform to apply to the .gitignore. */
		gitignore_template?: string | null;

		/** Whether downloads are enabled. */
		has_downloads?: boolean | null;

		/** Whether issues are enabled. */
		has_issues?: boolean | null;

		/** Whether projects are enabled. */
		has_projects?: boolean | null;

		/** Whether the wiki is enabled. */
		has_wiki?: boolean | null;

		/** A URL with more information about the repository. */
		homepage?: string | null;

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template?: boolean | null;

		/** The license keyword of the open source license for this repository. */
		license_template?: string | null;

		/**
		 * The name of the repository.
		 * Required
		 */
		name: string;

		/** Whether the repository is private. */
		private?: boolean | null;

		/** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
		team_id?: number | null;
	}
	export interface ReposSlashcreate_for_authenticated_userPostBodyFormProperties {

		/** Whether to allow merge commits for pull requests. */
		allow_merge_commit: FormControl<boolean | null | undefined>,

		/** Whether to allow rebase merges for pull requests. */
		allow_rebase_merge: FormControl<boolean | null | undefined>,

		/** Whether to allow squash merges for pull requests. */
		allow_squash_merge: FormControl<boolean | null | undefined>,

		/** Whether the repository is initialized with a minimal README. */
		auto_init: FormControl<boolean | null | undefined>,

		/** Whether to delete head branches when pull requests are merged */
		delete_branch_on_merge: FormControl<boolean | null | undefined>,

		/** A short description of the repository. */
		description: FormControl<string | null | undefined>,

		/** The desired language or platform to apply to the .gitignore. */
		gitignore_template: FormControl<string | null | undefined>,

		/** Whether downloads are enabled. */
		has_downloads: FormControl<boolean | null | undefined>,

		/** Whether issues are enabled. */
		has_issues: FormControl<boolean | null | undefined>,

		/** Whether projects are enabled. */
		has_projects: FormControl<boolean | null | undefined>,

		/** Whether the wiki is enabled. */
		has_wiki: FormControl<boolean | null | undefined>,

		/** A URL with more information about the repository. */
		homepage: FormControl<string | null | undefined>,

		/** Whether this repository acts as a template that can be used to generate new repositories. */
		is_template: FormControl<boolean | null | undefined>,

		/** The license keyword of the open source license for this repository. */
		license_template: FormControl<string | null | undefined>,

		/**
		 * The name of the repository.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Whether the repository is private. */
		private: FormControl<boolean | null | undefined>,

		/** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
		team_id: FormControl<number | null | undefined>,
	}
	export function CreateReposSlashcreate_for_authenticated_userPostBodyFormGroup() {
		return new FormGroup<ReposSlashcreate_for_authenticated_userPostBodyFormProperties>({
			allow_merge_commit: new FormControl<boolean | null | undefined>(undefined),
			allow_rebase_merge: new FormControl<boolean | null | undefined>(undefined),
			allow_squash_merge: new FormControl<boolean | null | undefined>(undefined),
			auto_init: new FormControl<boolean | null | undefined>(undefined),
			delete_branch_on_merge: new FormControl<boolean | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			gitignore_template: new FormControl<string | null | undefined>(undefined),
			has_downloads: new FormControl<boolean | null | undefined>(undefined),
			has_issues: new FormControl<boolean | null | undefined>(undefined),
			has_projects: new FormControl<boolean | null | undefined>(undefined),
			has_wiki: new FormControl<boolean | null | undefined>(undefined),
			homepage: new FormControl<string | null | undefined>(undefined),
			is_template: new FormControl<boolean | null | undefined>(undefined),
			license_template: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			private: new FormControl<boolean | null | undefined>(undefined),
			team_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum UsersSlashget_context_for_userSubject_type { organization = 0, repository = 1, issue = 2, pull_request = 3 }

	export enum ReposSlashlist_for_userType { all = 0, owner = 1, member = 2 }

	export interface Enterprise_adminSlashsuspend_userPutBody {

		/** The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.1/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
		reason?: string | null;
	}
	export interface Enterprise_adminSlashsuspend_userPutBodyFormProperties {

		/** The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.1/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
		reason: FormControl<string | null | undefined>,
	}
	export function CreateEnterprise_adminSlashsuspend_userPutBodyFormGroup() {
		return new FormGroup<Enterprise_adminSlashsuspend_userPutBodyFormProperties>({
			reason: new FormControl<string | null | undefined>(undefined),
		});

	}

}

