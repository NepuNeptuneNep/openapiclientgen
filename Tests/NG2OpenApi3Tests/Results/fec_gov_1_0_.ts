import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	export interface AuditCandidateSearch {
		id?: string | null;
		name?: string | null;
	}
	export interface AuditCandidateSearchFormProperties {
		id: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateAuditCandidateSearchFormGroup() {
		return new FormGroup<AuditCandidateSearchFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCandidateSearchList {
		results?: Array<AuditCandidateSearch>;
	}
	export interface AuditCandidateSearchListFormProperties {
	}
	export function CreateAuditCandidateSearchListFormGroup() {
		return new FormGroup<AuditCandidateSearchListFormProperties>({
		});

	}

	export interface AuditCase {
		audit_case_id?: string | null;
		audit_id?: number | null;
		candidate_id?: string | null;
		candidate_name?: string | null;
		committee_description?: string | null;
		committee_designation?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;
		committee_type?: string | null;
		cycle?: number | null;
		far_release_date?: Date | null;

		/**
		 * URL for retrieving the PDF document
		 */
		link_to_report?: string | null;
		primary_category_list?: Array<AuditCaseCategoryRelation>;
	}
	export interface AuditCaseFormProperties {
		audit_case_id: FormControl<string | null | undefined>,
		audit_id: FormControl<number | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		committee_description: FormControl<string | null | undefined>,
		committee_designation: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,
		committee_type: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		far_release_date: FormControl<Date | null | undefined>,

		/**
		 * URL for retrieving the PDF document
		 */
		link_to_report: FormControl<string | null | undefined>,
	}
	export function CreateAuditCaseFormGroup() {
		return new FormGroup<AuditCaseFormProperties>({
			audit_case_id: new FormControl<string | null | undefined>(undefined),
			audit_id: new FormControl<number | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			committee_description: new FormControl<string | null | undefined>(undefined),
			committee_designation: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			far_release_date: new FormControl<Date | null | undefined>(undefined),
			link_to_report: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCaseCategoryRelation {
		primary_category_id?: string | null;
		primary_category_name?: string | null;
		sub_category_list?: Array<AuditCaseSubCategory>;
	}
	export interface AuditCaseCategoryRelationFormProperties {
		primary_category_id: FormControl<string | null | undefined>,
		primary_category_name: FormControl<string | null | undefined>,
	}
	export function CreateAuditCaseCategoryRelationFormGroup() {
		return new FormGroup<AuditCaseCategoryRelationFormProperties>({
			primary_category_id: new FormControl<string | null | undefined>(undefined),
			primary_category_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCaseSubCategory {
		sub_category_id?: string | null;
		sub_category_name?: string | null;
	}
	export interface AuditCaseSubCategoryFormProperties {
		sub_category_id: FormControl<string | null | undefined>,
		sub_category_name: FormControl<string | null | undefined>,
	}
	export function CreateAuditCaseSubCategoryFormGroup() {
		return new FormGroup<AuditCaseSubCategoryFormProperties>({
			sub_category_id: new FormControl<string | null | undefined>(undefined),
			sub_category_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCaseCategoryRelationPage {
		pagination?: OffsetInfo;
		results?: Array<AuditCaseCategoryRelation>;
	}
	export interface AuditCaseCategoryRelationPageFormProperties {
	}
	export function CreateAuditCaseCategoryRelationPageFormGroup() {
		return new FormGroup<AuditCaseCategoryRelationPageFormProperties>({
		});

	}

	export interface OffsetInfo {
		count?: number | null;
		page?: number | null;
		pages?: number | null;
		per_page?: number | null;
	}
	export interface OffsetInfoFormProperties {
		count: FormControl<number | null | undefined>,
		page: FormControl<number | null | undefined>,
		pages: FormControl<number | null | undefined>,
		per_page: FormControl<number | null | undefined>,
	}
	export function CreateOffsetInfoFormGroup() {
		return new FormGroup<OffsetInfoFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			page: new FormControl<number | null | undefined>(undefined),
			pages: new FormControl<number | null | undefined>(undefined),
			per_page: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface AuditCasePage {
		pagination?: OffsetInfo;
		results?: Array<AuditCase>;
	}
	export interface AuditCasePageFormProperties {
	}
	export function CreateAuditCasePageFormGroup() {
		return new FormGroup<AuditCasePageFormProperties>({
		});

	}

	export interface AuditCaseSubCategoryPage {
		pagination?: OffsetInfo;
		results?: Array<AuditCaseSubCategory>;
	}
	export interface AuditCaseSubCategoryPageFormProperties {
	}
	export function CreateAuditCaseSubCategoryPageFormGroup() {
		return new FormGroup<AuditCaseSubCategoryPageFormProperties>({
		});

	}

	export interface AuditCategory {
		primary_category_id?: string | null;
		primary_category_name?: string | null;
		sub_category_list?: Array<AuditCategoryRelation>;
	}
	export interface AuditCategoryFormProperties {
		primary_category_id: FormControl<string | null | undefined>,
		primary_category_name: FormControl<string | null | undefined>,
	}
	export function CreateAuditCategoryFormGroup() {
		return new FormGroup<AuditCategoryFormProperties>({
			primary_category_id: new FormControl<string | null | undefined>(undefined),
			primary_category_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCategoryRelation {
		sub_category_id?: string | null;
		sub_category_name?: string | null;
	}
	export interface AuditCategoryRelationFormProperties {
		sub_category_id: FormControl<string | null | undefined>,
		sub_category_name: FormControl<string | null | undefined>,
	}
	export function CreateAuditCategoryRelationFormGroup() {
		return new FormGroup<AuditCategoryRelationFormProperties>({
			sub_category_id: new FormControl<string | null | undefined>(undefined),
			sub_category_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCategoryPage {
		pagination?: OffsetInfo;
		results?: Array<AuditCategory>;
	}
	export interface AuditCategoryPageFormProperties {
	}
	export function CreateAuditCategoryPageFormGroup() {
		return new FormGroup<AuditCategoryPageFormProperties>({
		});

	}

	export interface AuditCategoryRelationPage {
		pagination?: OffsetInfo;
		results?: Array<AuditCategoryRelation>;
	}
	export interface AuditCategoryRelationPageFormProperties {
	}
	export function CreateAuditCategoryRelationPageFormGroup() {
		return new FormGroup<AuditCategoryRelationPageFormProperties>({
		});

	}

	export interface AuditCommitteeSearch {
		id?: string | null;
		name?: string | null;
	}
	export interface AuditCommitteeSearchFormProperties {
		id: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateAuditCommitteeSearchFormGroup() {
		return new FormGroup<AuditCommitteeSearchFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditCommitteeSearchList {
		results?: Array<AuditCommitteeSearch>;
	}
	export interface AuditCommitteeSearchListFormProperties {
	}
	export function CreateAuditCommitteeSearchListFormGroup() {
		return new FormGroup<AuditCommitteeSearchListFormProperties>({
		});

	}

	export interface AuditPrimaryCategory {
		primary_category_id?: string | null;
		primary_category_name?: string | null;
	}
	export interface AuditPrimaryCategoryFormProperties {
		primary_category_id: FormControl<string | null | undefined>,
		primary_category_name: FormControl<string | null | undefined>,
	}
	export function CreateAuditPrimaryCategoryFormGroup() {
		return new FormGroup<AuditPrimaryCategoryFormProperties>({
			primary_category_id: new FormControl<string | null | undefined>(undefined),
			primary_category_name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AuditPrimaryCategoryPage {
		pagination?: OffsetInfo;
		results?: Array<AuditPrimaryCategory>;
	}
	export interface AuditPrimaryCategoryPageFormProperties {
	}
	export function CreateAuditPrimaryCategoryPageFormGroup() {
		return new FormGroup<AuditPrimaryCategoryPageFormProperties>({
		});

	}

	export interface BaseF3Filing {
		amended_address?: string | null;
		amended_by?: number | null;
		amendment?: string | null;
		amendment_chain?: Array<number>;
		beginning_image_number?: string | null;
		candidate_first_name?: string | null;
		candidate_id?: string | null;
		candidate_last_name?: string | null;
		candidate_middle_name?: string | null;
		candidate_name?: string | null;
		candidate_prefix?: string | null;
		candidate_suffix?: string | null;
		cash_on_hand_beginning_period?: number | null;
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;
		csv_url?: string | null;
		district?: number | null;
		document_description?: string | null;
		election_date?: Date | null;
		election_state?: string | null;
		f3z1?: number | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		file_number?: number | null;
		general_election?: string | null;
		is_amended?: boolean | null;
		most_recent?: boolean | null;
		most_recent_filing?: number | null;
		pdf_url?: string | null;
		prefix?: string | null;
		primary_election?: string | null;
		receipt_date?: Date | null;
		report?: string | null;
		report_type?: string | null;
		report_year?: number | null;

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		rpt_pgi?: string | null;
		runoff_election?: string | null;
		sign_date?: Date | null;
		special_election?: string | null;
		state?: string | null;
		street_1?: string | null;
		street_2?: string | null;
		suffix?: string | null;
		summary_lines?: string | null;
		treasurer_first_name?: string | null;
		treasurer_last_name?: string | null;
		treasurer_middle_name?: string | null;
		treasurer_name?: string | null;
		zip?: string | null;
	}
	export interface BaseF3FilingFormProperties {
		amended_address: FormControl<string | null | undefined>,
		amended_by: FormControl<number | null | undefined>,
		amendment: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_last_name: FormControl<string | null | undefined>,
		candidate_middle_name: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		candidate_prefix: FormControl<string | null | undefined>,
		candidate_suffix: FormControl<string | null | undefined>,
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		district: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		election_date: FormControl<Date | null | undefined>,
		election_state: FormControl<string | null | undefined>,
		f3z1: FormControl<number | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		general_election: FormControl<string | null | undefined>,
		is_amended: FormControl<boolean | null | undefined>,
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_filing: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		prefix: FormControl<string | null | undefined>,
		primary_election: FormControl<string | null | undefined>,
		receipt_date: FormControl<Date | null | undefined>,
		report: FormControl<string | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_year: FormControl<number | null | undefined>,

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		rpt_pgi: FormControl<string | null | undefined>,
		runoff_election: FormControl<string | null | undefined>,
		sign_date: FormControl<Date | null | undefined>,
		special_election: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
		street_1: FormControl<string | null | undefined>,
		street_2: FormControl<string | null | undefined>,
		suffix: FormControl<string | null | undefined>,
		summary_lines: FormControl<string | null | undefined>,
		treasurer_first_name: FormControl<string | null | undefined>,
		treasurer_last_name: FormControl<string | null | undefined>,
		treasurer_middle_name: FormControl<string | null | undefined>,
		treasurer_name: FormControl<string | null | undefined>,
		zip: FormControl<string | null | undefined>,
	}
	export function CreateBaseF3FilingFormGroup() {
		return new FormGroup<BaseF3FilingFormProperties>({
			amended_address: new FormControl<string | null | undefined>(undefined),
			amended_by: new FormControl<number | null | undefined>(undefined),
			amendment: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_middle_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_prefix: new FormControl<string | null | undefined>(undefined),
			candidate_suffix: new FormControl<string | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			district: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			election_date: new FormControl<Date | null | undefined>(undefined),
			election_state: new FormControl<string | null | undefined>(undefined),
			f3z1: new FormControl<number | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			general_election: new FormControl<string | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_filing: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			prefix: new FormControl<string | null | undefined>(undefined),
			primary_election: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			rpt_pgi: new FormControl<string | null | undefined>(undefined),
			runoff_election: new FormControl<string | null | undefined>(undefined),
			sign_date: new FormControl<Date | null | undefined>(undefined),
			special_election: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			street_1: new FormControl<string | null | undefined>(undefined),
			street_2: new FormControl<string | null | undefined>(undefined),
			suffix: new FormControl<string | null | undefined>(undefined),
			summary_lines: new FormControl<string | null | undefined>(undefined),
			treasurer_first_name: new FormControl<string | null | undefined>(undefined),
			treasurer_last_name: new FormControl<string | null | undefined>(undefined),
			treasurer_middle_name: new FormControl<string | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BaseF3FilingPage {
		pagination?: OffsetInfo;
		results?: Array<BaseF3Filing>;
	}
	export interface BaseF3FilingPageFormProperties {
	}
	export function CreateBaseF3FilingPageFormGroup() {
		return new FormGroup<BaseF3FilingPageFormProperties>({
		});

	}

	export interface BaseF3PFiling {
		amended_by?: number | null;
		amendment?: string | null;
		amendment_chain?: Array<number>;
		beginning_image_number?: string | null;
		cash_on_hand_beginning_period?: number | null;
		cash_on_hand_end_period?: number | null;
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;
		csv_url?: string | null;
		debts_owed_by_committee?: number | null;
		debts_owed_to_committee?: number | null;
		document_description?: string | null;
		election_date?: Date | null;
		election_state?: string | null;
		expenditure_subject_to_limits?: number | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		file_number?: number | null;
		general_election?: string | null;
		is_amended?: boolean | null;
		most_recent?: boolean | null;
		most_recent_filing?: number | null;
		net_contributions_cycle_to_date?: number | null;
		net_operating_expenditures_cycle_to_date?: number | null;
		pdf_url?: string | null;
		prefix?: string | null;
		primary_election?: string | null;
		receipt_date?: Date | null;
		report?: string | null;
		report_type?: string | null;
		report_year?: number | null;

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		rpt_pgi?: string | null;
		sign_date?: Date | null;
		state?: string | null;
		street_1?: string | null;
		street_2?: string | null;
		subtotal_summary_period?: string | null;
		suffix?: string | null;
		summary_lines?: string | null;
		treasurer_first_name?: string | null;
		treasurer_last_name?: string | null;
		treasurer_middle_name?: string | null;
		treasurer_name?: string | null;
		zip?: string | null;
	}
	export interface BaseF3PFilingFormProperties {
		amended_by: FormControl<number | null | undefined>,
		amendment: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,
		cash_on_hand_end_period: FormControl<number | null | undefined>,
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		debts_owed_by_committee: FormControl<number | null | undefined>,
		debts_owed_to_committee: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		election_date: FormControl<Date | null | undefined>,
		election_state: FormControl<string | null | undefined>,
		expenditure_subject_to_limits: FormControl<number | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		general_election: FormControl<string | null | undefined>,
		is_amended: FormControl<boolean | null | undefined>,
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_filing: FormControl<number | null | undefined>,
		net_contributions_cycle_to_date: FormControl<number | null | undefined>,
		net_operating_expenditures_cycle_to_date: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		prefix: FormControl<string | null | undefined>,
		primary_election: FormControl<string | null | undefined>,
		receipt_date: FormControl<Date | null | undefined>,
		report: FormControl<string | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_year: FormControl<number | null | undefined>,

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		rpt_pgi: FormControl<string | null | undefined>,
		sign_date: FormControl<Date | null | undefined>,
		state: FormControl<string | null | undefined>,
		street_1: FormControl<string | null | undefined>,
		street_2: FormControl<string | null | undefined>,
		subtotal_summary_period: FormControl<string | null | undefined>,
		suffix: FormControl<string | null | undefined>,
		summary_lines: FormControl<string | null | undefined>,
		treasurer_first_name: FormControl<string | null | undefined>,
		treasurer_last_name: FormControl<string | null | undefined>,
		treasurer_middle_name: FormControl<string | null | undefined>,
		treasurer_name: FormControl<string | null | undefined>,
		zip: FormControl<string | null | undefined>,
	}
	export function CreateBaseF3PFilingFormGroup() {
		return new FormGroup<BaseF3PFilingFormProperties>({
			amended_by: new FormControl<number | null | undefined>(undefined),
			amendment: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			election_date: new FormControl<Date | null | undefined>(undefined),
			election_state: new FormControl<string | null | undefined>(undefined),
			expenditure_subject_to_limits: new FormControl<number | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			general_election: new FormControl<string | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_filing: new FormControl<number | null | undefined>(undefined),
			net_contributions_cycle_to_date: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_cycle_to_date: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			prefix: new FormControl<string | null | undefined>(undefined),
			primary_election: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			rpt_pgi: new FormControl<string | null | undefined>(undefined),
			sign_date: new FormControl<Date | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			street_1: new FormControl<string | null | undefined>(undefined),
			street_2: new FormControl<string | null | undefined>(undefined),
			subtotal_summary_period: new FormControl<string | null | undefined>(undefined),
			suffix: new FormControl<string | null | undefined>(undefined),
			summary_lines: new FormControl<string | null | undefined>(undefined),
			treasurer_first_name: new FormControl<string | null | undefined>(undefined),
			treasurer_last_name: new FormControl<string | null | undefined>(undefined),
			treasurer_middle_name: new FormControl<string | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BaseF3PFilingPage {
		pagination?: OffsetInfo;
		results?: Array<BaseF3PFiling>;
	}
	export interface BaseF3PFilingPageFormProperties {
	}
	export function CreateBaseF3PFilingPageFormGroup() {
		return new FormGroup<BaseF3PFilingPageFormProperties>({
		});

	}

	export interface BaseF3XFiling {
		amend_address?: string | null;
		amended_by?: number | null;
		amendment?: string | null;
		amendment_chain?: Array<number>;
		beginning_image_number?: string | null;
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;
		csv_url?: string | null;
		document_description?: string | null;
		election_date?: Date | null;
		election_state?: string | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		file_number?: number | null;
		is_amended?: boolean | null;
		most_recent?: boolean | null;
		most_recent_filing?: number | null;
		pdf_url?: string | null;
		qualified_multicandidate_committee?: string | null;
		receipt_date?: Date | null;
		report?: string | null;
		report_type?: string | null;
		report_year?: number | null;

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		rpt_pgi?: string | null;
		sign_date?: Date | null;
		state?: string | null;
		street_1?: string | null;
		street_2?: string | null;
		summary_lines?: string | null;
		zip?: string | null;
	}
	export interface BaseF3XFilingFormProperties {
		amend_address: FormControl<string | null | undefined>,
		amended_by: FormControl<number | null | undefined>,
		amendment: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		election_date: FormControl<Date | null | undefined>,
		election_state: FormControl<string | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		is_amended: FormControl<boolean | null | undefined>,
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_filing: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		qualified_multicandidate_committee: FormControl<string | null | undefined>,
		receipt_date: FormControl<Date | null | undefined>,
		report: FormControl<string | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_year: FormControl<number | null | undefined>,

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		rpt_pgi: FormControl<string | null | undefined>,
		sign_date: FormControl<Date | null | undefined>,
		state: FormControl<string | null | undefined>,
		street_1: FormControl<string | null | undefined>,
		street_2: FormControl<string | null | undefined>,
		summary_lines: FormControl<string | null | undefined>,
		zip: FormControl<string | null | undefined>,
	}
	export function CreateBaseF3XFilingFormGroup() {
		return new FormGroup<BaseF3XFilingFormProperties>({
			amend_address: new FormControl<string | null | undefined>(undefined),
			amended_by: new FormControl<number | null | undefined>(undefined),
			amendment: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			election_date: new FormControl<Date | null | undefined>(undefined),
			election_state: new FormControl<string | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_filing: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			qualified_multicandidate_committee: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			rpt_pgi: new FormControl<string | null | undefined>(undefined),
			sign_date: new FormControl<Date | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			street_1: new FormControl<string | null | undefined>(undefined),
			street_2: new FormControl<string | null | undefined>(undefined),
			summary_lines: new FormControl<string | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BaseF3XFilingPage {
		pagination?: OffsetInfo;
		results?: Array<BaseF3XFiling>;
	}
	export interface BaseF3XFilingPageFormProperties {
	}
	export function CreateBaseF3XFilingPageFormGroup() {
		return new FormGroup<BaseF3XFilingPageFormProperties>({
		});

	}

	export interface CCTotalsByCandidate {
		candidate_id?: string | null;
		cycle?: number | null;
		support_oppose_indicator?: string | null;
		total?: number | null;
	}
	export interface CCTotalsByCandidateFormProperties {
		candidate_id: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		support_oppose_indicator: FormControl<string | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateCCTotalsByCandidateFormGroup() {
		return new FormGroup<CCTotalsByCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CCTotalsByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<CCTotalsByCandidate>;
	}
	export interface CCTotalsByCandidatePageFormProperties {
	}
	export function CreateCCTotalsByCandidatePageFormGroup() {
		return new FormGroup<CCTotalsByCandidatePageFormProperties>({
		});

	}

	export interface CalendarDate {
		all_day?: boolean | null;

		/**
		 * Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		 * Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		 * Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		 * Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		 */
		calendar_category_id?: number | null;

		/**
		 * Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		 * Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		 * Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		 * Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		 */
		category?: string | null;
		description?: string | null;
		end_date?: string | null;

		/** An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. */
		event_id?: number | null;

		/**
		 * Can be state address or room.
		 */
		location?: string | null;
		start_date?: string | null;

		/** The state field only applies to election dates and reporting deadlines, reporting periods and all other dates do not have the array of states to filter on */
		state?: Array<string>;
		summary?: string | null;

		/**
		 * A url for that event
		 */
		url?: string | null;
	}
	export interface CalendarDateFormProperties {
		all_day: FormControl<boolean | null | undefined>,

		/**
		 * Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		 * Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		 * Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		 * Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		 */
		calendar_category_id: FormControl<number | null | undefined>,

		/**
		 * Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		 * Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		 * Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		 * Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		 */
		category: FormControl<string | null | undefined>,
		description: FormControl<string | null | undefined>,
		end_date: FormControl<string | null | undefined>,

		/** An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID. */
		event_id: FormControl<number | null | undefined>,

		/**
		 * Can be state address or room.
		 */
		location: FormControl<string | null | undefined>,
		start_date: FormControl<string | null | undefined>,
		summary: FormControl<string | null | undefined>,

		/**
		 * A url for that event
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCalendarDateFormGroup() {
		return new FormGroup<CalendarDateFormProperties>({
			all_day: new FormControl<boolean | null | undefined>(undefined),
			calendar_category_id: new FormControl<number | null | undefined>(undefined),
			category: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			end_date: new FormControl<string | null | undefined>(undefined),
			event_id: new FormControl<number | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<string | null | undefined>(undefined),
			summary: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CalendarDatePage {
		pagination?: OffsetInfo;
		results?: Array<CalendarDate>;
	}
	export interface CalendarDatePageFormProperties {
	}
	export function CreateCalendarDatePageFormGroup() {
		return new FormGroup<CalendarDatePageFormProperties>({
		});

	}

	export interface Candidate {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through?: number | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id?: string | null;

		/**
		 * Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 */
		candidate_inactive?: boolean | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status?: string | null;

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 */
		cycles?: Array<number>;

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district?: string | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number?: number | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		election_districts?: Array<string>;

		/** Years in which a candidate ran for office. */
		election_years?: Array<number>;
		federal_funds_flag?: boolean | null;

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date?: Date | null;
		has_raised_funds?: boolean | null;

		/** inactive years */
		inactive_election_years?: Array<number>;

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge?: string | null;

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full?: string | null;

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date?: Date | null;

		/** The day the FEC received the candidate's most recent filing */
		last_file_date?: Date | null;

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date?: Date | null;

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office?: string | null;

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full?: string | null;
		CandidatePrincipal_committees?: Array<CandidatePrincipal_committees>;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state?: string | null;
	}
	export interface CandidateFormProperties {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 */
		candidate_inactive: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status: FormControl<string | null | undefined>,

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district: FormControl<string | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number: FormControl<number | null | undefined>,
		federal_funds_flag: FormControl<boolean | null | undefined>,

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date: FormControl<Date | null | undefined>,
		has_raised_funds: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge: FormControl<string | null | undefined>,

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full: FormControl<string | null | undefined>,

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the candidate's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date: FormControl<Date | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCandidateFormGroup() {
		return new FormGroup<CandidateFormProperties>({
			active_through: new FormControl<number | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_inactive: new FormControl<boolean | null | undefined>(undefined),
			candidate_status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			district: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			district_number: new FormControl<number | null | undefined>(undefined),
			federal_funds_flag: new FormControl<boolean | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			has_raised_funds: new FormControl<boolean | null | undefined>(undefined),
			incumbent_challenge: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			incumbent_challenge_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			last_f2_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			office: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			office_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
		});

	}

	export interface CandidatePrincipal_committees {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_ids?: Array<string>;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full?: string | null;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 */
		cycles?: Array<number>;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date?: Date | null;

		/** The day the FEC received the committee's most recent filing */
		last_file_date?: Date | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;
	}
	export interface CandidatePrincipal_committeesFormProperties {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,
	}
	export function CreateCandidatePrincipal_committeesFormGroup() {
		return new FormGroup<CandidatePrincipal_committeesFormProperties>({
			affiliated_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			committee_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			designation_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(25)]),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			last_f1_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CandidateCommitteeTotalsHouseSenate {
		all_other_loans?: number | null;
		candidate_contribution?: number | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		candidate_election_year: number;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: string;
		contribution_refunds?: number | null;

		/** Contribution */
		contributions?: number | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Disbursements */
		disbursements?: number | null;

		/** Required */
		election_full: boolean;
		exempt_legal_accounting_disbursement?: number | null;
		federal_funds?: number | null;
		fundraising_disbursements?: number | null;
		individual_contributions?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		last_debts_owed_by_committee?: number | null;
		last_debts_owed_to_committee?: number | null;
		last_net_contributions?: number | null;
		last_net_operating_expenditures?: number | null;
		last_report_type_full?: string | null;
		last_report_year?: number | null;
		loan_repayments?: number | null;
		loan_repayments_candidate_loans?: number | null;
		loan_repayments_other_loans?: number | null;
		loans?: number | null;
		loans_made_by_candidate?: number | null;
		net_contributions?: number | null;
		net_operating_expenditures?: number | null;
		offsets_to_fundraising_expenditures?: number | null;
		offsets_to_legal_accounting?: number | null;
		offsets_to_operating_expenditures?: number | null;
		operating_expenditures?: number | null;
		other_disbursements?: number | null;
		other_political_committee_contributions?: number | null;
		other_receipts?: number | null;
		political_party_committee_contributions?: number | null;
		receipts?: number | null;
		refunded_individual_contributions?: number | null;
		refunded_other_political_committee_contributions?: number | null;
		refunded_political_party_committee_contributions?: number | null;
		total_offsets_to_operating_expenditures?: number | null;
		transaction_coverage_date?: Date | null;
		transfers_from_other_authorized_committee?: number | null;
		transfers_to_other_authorized_committee?: number | null;
	}
	export interface CandidateCommitteeTotalsHouseSenateFormProperties {
		all_other_loans: FormControl<number | null | undefined>,
		candidate_contribution: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		candidate_election_year: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: FormControl<string | null | undefined>,
		contribution_refunds: FormControl<number | null | undefined>,

		/** Contribution */
		contributions: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Disbursements */
		disbursements: FormControl<number | null | undefined>,

		/** Required */
		election_full: FormControl<boolean | null | undefined>,
		exempt_legal_accounting_disbursement: FormControl<number | null | undefined>,
		federal_funds: FormControl<number | null | undefined>,
		fundraising_disbursements: FormControl<number | null | undefined>,
		individual_contributions: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		last_debts_owed_by_committee: FormControl<number | null | undefined>,
		last_debts_owed_to_committee: FormControl<number | null | undefined>,
		last_net_contributions: FormControl<number | null | undefined>,
		last_net_operating_expenditures: FormControl<number | null | undefined>,
		last_report_type_full: FormControl<string | null | undefined>,
		last_report_year: FormControl<number | null | undefined>,
		loan_repayments: FormControl<number | null | undefined>,
		loan_repayments_candidate_loans: FormControl<number | null | undefined>,
		loan_repayments_other_loans: FormControl<number | null | undefined>,
		loans: FormControl<number | null | undefined>,
		loans_made_by_candidate: FormControl<number | null | undefined>,
		net_contributions: FormControl<number | null | undefined>,
		net_operating_expenditures: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures: FormControl<number | null | undefined>,
		offsets_to_legal_accounting: FormControl<number | null | undefined>,
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures: FormControl<number | null | undefined>,
		other_disbursements: FormControl<number | null | undefined>,
		other_political_committee_contributions: FormControl<number | null | undefined>,
		other_receipts: FormControl<number | null | undefined>,
		political_party_committee_contributions: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
		refunded_individual_contributions: FormControl<number | null | undefined>,
		refunded_other_political_committee_contributions: FormControl<number | null | undefined>,
		refunded_political_party_committee_contributions: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
		transfers_from_other_authorized_committee: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee: FormControl<number | null | undefined>,
	}
	export function CreateCandidateCommitteeTotalsHouseSenateFormGroup() {
		return new FormGroup<CandidateCommitteeTotalsHouseSenateFormProperties>({
			all_other_loans: new FormControl<number | null | undefined>(undefined),
			candidate_contribution: new FormControl<number | null | undefined>(undefined),
			candidate_election_year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contribution_refunds: new FormControl<number | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			election_full: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			exempt_legal_accounting_disbursement: new FormControl<number | null | undefined>(undefined),
			federal_funds: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements: new FormControl<number | null | undefined>(undefined),
			individual_contributions: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			last_net_contributions: new FormControl<number | null | undefined>(undefined),
			last_net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			last_report_type_full: new FormControl<string | null | undefined>(undefined),
			last_report_year: new FormControl<number | null | undefined>(undefined),
			loan_repayments: new FormControl<number | null | undefined>(undefined),
			loan_repayments_candidate_loans: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			loans: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			net_contributions: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			other_receipts: new FormControl<number | null | undefined>(undefined),
			political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
			transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CandidateCommitteeTotalsHouseSenatePage {
		pagination?: OffsetInfo;
		results?: Array<CandidateCommitteeTotalsHouseSenate>;
	}
	export interface CandidateCommitteeTotalsHouseSenatePageFormProperties {
	}
	export function CreateCandidateCommitteeTotalsHouseSenatePageFormGroup() {
		return new FormGroup<CandidateCommitteeTotalsHouseSenatePageFormProperties>({
		});

	}

	export interface CandidateCommitteeTotalsPresidential {
		candidate_contribution?: number | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		candidate_election_year: number;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: string;
		contribution_refunds?: number | null;

		/** Contribution */
		contributions?: number | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Disbursements */
		disbursements?: number | null;

		/** Required */
		election_full: boolean;
		exempt_legal_accounting_disbursement?: number | null;
		federal_funds?: number | null;
		fundraising_disbursements?: number | null;
		individual_contributions?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		last_debts_owed_by_committee?: number | null;
		last_debts_owed_to_committee?: number | null;
		last_report_type_full?: string | null;
		last_report_year?: number | null;
		loan_repayments_made?: number | null;
		loans_received?: number | null;
		loans_received_from_candidate?: number | null;
		net_contributions?: number | null;
		net_operating_expenditures?: number | null;
		offsets_to_fundraising_expenditures?: number | null;
		offsets_to_legal_accounting?: number | null;
		offsets_to_operating_expenditures?: number | null;
		operating_expenditures?: number | null;
		other_disbursements?: number | null;
		other_loans_received?: number | null;
		other_political_committee_contributions?: number | null;
		other_receipts?: number | null;
		political_party_committee_contributions?: number | null;
		receipts?: number | null;
		refunded_individual_contributions?: number | null;
		refunded_other_political_committee_contributions?: number | null;
		refunded_political_party_committee_contributions?: number | null;
		repayments_loans_made_by_candidate?: number | null;
		repayments_other_loans?: number | null;
		total_offsets_to_operating_expenditures?: number | null;
		transaction_coverage_date?: Date | null;
		transfers_from_affiliated_committee?: number | null;
		transfers_to_other_authorized_committee?: number | null;
	}
	export interface CandidateCommitteeTotalsPresidentialFormProperties {
		candidate_contribution: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		candidate_election_year: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: FormControl<string | null | undefined>,
		contribution_refunds: FormControl<number | null | undefined>,

		/** Contribution */
		contributions: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Disbursements */
		disbursements: FormControl<number | null | undefined>,

		/** Required */
		election_full: FormControl<boolean | null | undefined>,
		exempt_legal_accounting_disbursement: FormControl<number | null | undefined>,
		federal_funds: FormControl<number | null | undefined>,
		fundraising_disbursements: FormControl<number | null | undefined>,
		individual_contributions: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		last_debts_owed_by_committee: FormControl<number | null | undefined>,
		last_debts_owed_to_committee: FormControl<number | null | undefined>,
		last_report_type_full: FormControl<string | null | undefined>,
		last_report_year: FormControl<number | null | undefined>,
		loan_repayments_made: FormControl<number | null | undefined>,
		loans_received: FormControl<number | null | undefined>,
		loans_received_from_candidate: FormControl<number | null | undefined>,
		net_contributions: FormControl<number | null | undefined>,
		net_operating_expenditures: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures: FormControl<number | null | undefined>,
		offsets_to_legal_accounting: FormControl<number | null | undefined>,
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures: FormControl<number | null | undefined>,
		other_disbursements: FormControl<number | null | undefined>,
		other_loans_received: FormControl<number | null | undefined>,
		other_political_committee_contributions: FormControl<number | null | undefined>,
		other_receipts: FormControl<number | null | undefined>,
		political_party_committee_contributions: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
		refunded_individual_contributions: FormControl<number | null | undefined>,
		refunded_other_political_committee_contributions: FormControl<number | null | undefined>,
		refunded_political_party_committee_contributions: FormControl<number | null | undefined>,
		repayments_loans_made_by_candidate: FormControl<number | null | undefined>,
		repayments_other_loans: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
		transfers_from_affiliated_committee: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee: FormControl<number | null | undefined>,
	}
	export function CreateCandidateCommitteeTotalsPresidentialFormGroup() {
		return new FormGroup<CandidateCommitteeTotalsPresidentialFormProperties>({
			candidate_contribution: new FormControl<number | null | undefined>(undefined),
			candidate_election_year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contribution_refunds: new FormControl<number | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			election_full: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			exempt_legal_accounting_disbursement: new FormControl<number | null | undefined>(undefined),
			federal_funds: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements: new FormControl<number | null | undefined>(undefined),
			individual_contributions: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			last_report_type_full: new FormControl<string | null | undefined>(undefined),
			last_report_year: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			loans_received: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate: new FormControl<number | null | undefined>(undefined),
			net_contributions: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			other_loans_received: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			other_receipts: new FormControl<number | null | undefined>(undefined),
			political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
			transfers_from_affiliated_committee: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CandidateCommitteeTotalsPresidentialPage {
		pagination?: OffsetInfo;
		results?: Array<CandidateCommitteeTotalsPresidential>;
	}
	export interface CandidateCommitteeTotalsPresidentialPageFormProperties {
	}
	export function CreateCandidateCommitteeTotalsPresidentialPageFormGroup() {
		return new FormGroup<CandidateCommitteeTotalsPresidentialPageFormProperties>({
		});

	}

	export interface CandidateDetail {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through?: number | null;

		/**
		 * City of candidate's address, as reported on their Form 2.
		 * Max length: 100
		 */
		address_city?: string | null;

		/**
		 * State of candidate's address, as reported on their Form 2.
		 * Max length: 2
		 */
		address_state?: string | null;

		/**
		 * Street of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_1?: string | null;

		/**
		 * Additional street information of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_2?: string | null;

		/**
		 * Zip code of candidate's address, as reported on their Form 2.
		 * Max length: 10
		 */
		address_zip?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id?: string | null;

		/** True indicates that a candidate is inactive. */
		candidate_inactive?: boolean | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status?: string | null;

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 */
		cycles?: Array<number>;

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district?: string | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number?: number | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		election_districts?: Array<string>;

		/** Years in which a candidate ran for office. */
		election_years?: Array<number>;
		federal_funds_flag?: boolean | null;

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date?: Date | null;
		flags?: string | null;
		has_raised_funds?: boolean | null;

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge?: string | null;

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full?: string | null;

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date?: Date | null;

		/** The day the FEC received the candidate's most recent filing */
		last_file_date?: Date | null;

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date?: Date | null;

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office?: string | null;

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full?: string | null;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state?: string | null;
	}
	export interface CandidateDetailFormProperties {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through: FormControl<number | null | undefined>,

		/**
		 * City of candidate's address, as reported on their Form 2.
		 * Max length: 100
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * State of candidate's address, as reported on their Form 2.
		 * Max length: 2
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * Street of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_1: FormControl<string | null | undefined>,

		/**
		 * Additional street information of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_2: FormControl<string | null | undefined>,

		/**
		 * Zip code of candidate's address, as reported on their Form 2.
		 * Max length: 10
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id: FormControl<string | null | undefined>,

		/** True indicates that a candidate is inactive. */
		candidate_inactive: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status: FormControl<string | null | undefined>,

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district: FormControl<string | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number: FormControl<number | null | undefined>,
		federal_funds_flag: FormControl<boolean | null | undefined>,

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date: FormControl<Date | null | undefined>,
		flags: FormControl<string | null | undefined>,
		has_raised_funds: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge: FormControl<string | null | undefined>,

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full: FormControl<string | null | undefined>,

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the candidate's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date: FormControl<Date | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCandidateDetailFormGroup() {
		return new FormGroup<CandidateDetailFormProperties>({
			active_through: new FormControl<number | null | undefined>(undefined),
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			address_street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			address_street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_inactive: new FormControl<boolean | null | undefined>(undefined),
			candidate_status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			district: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			district_number: new FormControl<number | null | undefined>(undefined),
			federal_funds_flag: new FormControl<boolean | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			flags: new FormControl<string | null | undefined>(undefined),
			has_raised_funds: new FormControl<boolean | null | undefined>(undefined),
			incumbent_challenge: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			incumbent_challenge_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			last_f2_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			office: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			office_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
		});

	}

	export interface CandidateDetailPage {
		pagination?: OffsetInfo;
		results?: Array<CandidateDetail>;
	}
	export interface CandidateDetailPageFormProperties {
	}
	export function CreateCandidateDetailPageFormGroup() {
		return new FormGroup<CandidateDetailPageFormProperties>({
		});

	}

	export interface CandidateFlags {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: string;

		/** A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. */
		federal_funds_flag?: boolean | null;

		/** A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) */
		has_raised_funds?: boolean | null;
	}
	export interface CandidateFlagsFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: FormControl<string | null | undefined>,

		/** A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. */
		federal_funds_flag: FormControl<boolean | null | undefined>,

		/** A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) */
		has_raised_funds: FormControl<boolean | null | undefined>,
	}
	export function CreateCandidateFlagsFormGroup() {
		return new FormGroup<CandidateFlagsFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			federal_funds_flag: new FormControl<boolean | null | undefined>(undefined),
			has_raised_funds: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface CandidateFlagsPage {
		pagination?: OffsetInfo;
		results?: Array<CandidateFlags>;
	}
	export interface CandidateFlagsPageFormProperties {
	}
	export function CreateCandidateFlagsPageFormGroup() {
		return new FormGroup<CandidateFlagsPageFormProperties>({
		});

	}

	export interface CandidateHistory {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through?: number | null;

		/**
		 * City of candidate's address, as reported on their Form 2.
		 * Max length: 100
		 */
		address_city?: string | null;

		/**
		 * State of candidate's address, as reported on their Form 2.
		 * Max length: 2
		 */
		address_state?: string | null;

		/**
		 * Street of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_1?: string | null;

		/**
		 * Additional street information of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_2?: string | null;

		/**
		 * Zip code of candidate's address, as reported on their Form 2.
		 * Max length: 10
		 */
		address_zip?: string | null;

		/** The last year of the cycle for this election. */
		candidate_election_year?: number | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: string;

		/**
		 * True indicates that a candidate is inactive.
		 */
		candidate_inactive?: boolean | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status?: string | null;

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 */
		cycles?: Array<number>;

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district?: string | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number?: number | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		election_districts?: Array<string>;

		/** Years in which a candidate ran for office. */
		election_years?: Array<number>;

		/** FEC cycles are included in candidate election years. */
		fec_cycles_in_election?: Array<number>;

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date?: Date | null;
		flags?: string | null;

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge?: string | null;

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full?: string | null;

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date?: Date | null;

		/** The day the FEC received the candidate's most recent filing */
		last_file_date?: Date | null;

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date?: Date | null;

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office?: string | null;

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full?: string | null;

		/** Rounded election years in which a candidate ran for office */
		rounded_election_years?: Array<number>;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * Required
		 */
		two_year_period: number;
	}
	export interface CandidateHistoryFormProperties {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through: FormControl<number | null | undefined>,

		/**
		 * City of candidate's address, as reported on their Form 2.
		 * Max length: 100
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * State of candidate's address, as reported on their Form 2.
		 * Max length: 2
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * Street of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_1: FormControl<string | null | undefined>,

		/**
		 * Additional street information of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_2: FormControl<string | null | undefined>,

		/**
		 * Zip code of candidate's address, as reported on their Form 2.
		 * Max length: 10
		 */
		address_zip: FormControl<string | null | undefined>,

		/** The last year of the cycle for this election. */
		candidate_election_year: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * True indicates that a candidate is inactive.
		 */
		candidate_inactive: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status: FormControl<string | null | undefined>,

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district: FormControl<string | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number: FormControl<number | null | undefined>,

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date: FormControl<Date | null | undefined>,
		flags: FormControl<string | null | undefined>,

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge: FormControl<string | null | undefined>,

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full: FormControl<string | null | undefined>,

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the candidate's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date: FormControl<Date | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * Required
		 */
		two_year_period: FormControl<number | null | undefined>,
	}
	export function CreateCandidateHistoryFormGroup() {
		return new FormGroup<CandidateHistoryFormProperties>({
			active_through: new FormControl<number | null | undefined>(undefined),
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			address_street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			address_street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			candidate_election_year: new FormControl<number | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			candidate_inactive: new FormControl<boolean | null | undefined>(undefined),
			candidate_status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			district: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			district_number: new FormControl<number | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			flags: new FormControl<string | null | undefined>(undefined),
			incumbent_challenge: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			incumbent_challenge_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			last_f2_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			office: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			office_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			two_year_period: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CandidateHistoryPage {
		pagination?: OffsetInfo;
		results?: Array<CandidateHistory>;
	}
	export interface CandidateHistoryPageFormProperties {
	}
	export function CreateCandidateHistoryPageFormGroup() {
		return new FormGroup<CandidateHistoryPageFormProperties>({
		});

	}

	export interface CandidateHistoryTotal {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through?: number | null;

		/**
		 * City of candidate's address, as reported on their Form 2.
		 * Max length: 100
		 */
		address_city?: string | null;

		/**
		 * State of candidate's address, as reported on their Form 2.
		 * Max length: 2
		 */
		address_state?: string | null;

		/**
		 * Street of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_1?: string | null;

		/**
		 * Additional street information of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_2?: string | null;

		/**
		 * Zip code of candidate's address, as reported on their Form 2.
		 * Max length: 10
		 */
		address_zip?: string | null;

		/** The last year of the cycle for this election. */
		candidate_election_year?: number | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: string;

		/**
		 * True indicates that a candidate is inactive.
		 */
		candidate_inactive?: boolean | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status?: string | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 */
		cycles?: Array<number>;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;
		disbursements?: number | null;

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district?: string | null;

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number?: number | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		election_districts?: Array<string>;

		/** Year of election */
		election_year?: number | null;

		/** Years in which a candidate ran for office. */
		election_years?: Array<number>;

		/** FEC cycles are included in candidate election years. */
		fec_cycles_in_election?: Array<number>;

		/** A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. */
		federal_funds_flag?: boolean | null;

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date?: Date | null;
		flags?: string | null;

		/** A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) */
		has_raised_funds?: boolean | null;

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge?: string | null;

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full?: string | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Required */
		is_election: boolean;

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date?: Date | null;

		/** The day the FEC received the candidate's most recent filing */
		last_file_date?: Date | null;

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date?: Date | null;

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office?: string | null;

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full?: string | null;

		/** Other committees contributions */
		other_political_committee_contributions?: number | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full?: string | null;
		receipts?: number | null;

		/** Rounded election years in which a candidate ran for office */
		rounded_election_years?: Array<number>;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 50
		 */
		state_full?: string | null;

		/** Transfers from authorized committees */
		transfers_from_other_authorized_committee?: number | null;

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * Required
		 */
		two_year_period: number;
	}
	export interface CandidateHistoryTotalFormProperties {

		/** Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them. */
		active_through: FormControl<number | null | undefined>,

		/**
		 * City of candidate's address, as reported on their Form 2.
		 * Max length: 100
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * State of candidate's address, as reported on their Form 2.
		 * Max length: 2
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * Street of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_1: FormControl<string | null | undefined>,

		/**
		 * Additional street information of candidate's address, as reported on their Form 2.
		 * Max length: 200
		 */
		address_street_2: FormControl<string | null | undefined>,

		/**
		 * Zip code of candidate's address, as reported on their Form 2.
		 * Max length: 10
		 */
		address_zip: FormControl<string | null | undefined>,

		/** The last year of the cycle for this election. */
		candidate_election_year: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * True indicates that a candidate is inactive.
		 */
		candidate_inactive: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 * Max length: 1
		 */
		candidate_status: FormControl<string | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,
		disbursements: FormControl<number | null | undefined>,

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district: FormControl<string | null | undefined>,

		/**
		 * One-letter code explaining if the candidate is:
		 * - C present candidate
		 * - F future candidate
		 * - N not yet a candidate
		 * - P prior candidate
		 */
		district_number: FormControl<number | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,

		/** A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. */
		federal_funds_flag: FormControl<boolean | null | undefined>,

		/** The day the FEC received the candidate's first filing. This is a F2 candidate registration. */
		first_file_date: FormControl<Date | null | undefined>,
		flags: FormControl<string | null | undefined>,

		/** A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) */
		has_raised_funds: FormControl<boolean | null | undefined>,

		/**
		 * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 1
		 */
		incumbent_challenge: FormControl<string | null | undefined>,

		/**
		 * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		 * Max length: 10
		 */
		incumbent_challenge_full: FormControl<string | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Required */
		is_election: FormControl<boolean | null | undefined>,

		/** The day the FEC received the candidate's most recent Form 2 */
		last_f2_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the candidate's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_date: FormControl<Date | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office: FormControl<string | null | undefined>,

		/**
		 * Federal office candidate runs for: House, Senate or presidential
		 * Max length: 9
		 */
		office_full: FormControl<string | null | undefined>,

		/** Other committees contributions */
		other_political_committee_contributions: FormControl<number | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Party affiliated with a candidate or committee
		 * Max length: 255
		 */
		party_full: FormControl<string | null | undefined>,
		receipts: FormControl<number | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 50
		 */
		state_full: FormControl<string | null | undefined>,

		/** Transfers from authorized committees */
		transfers_from_other_authorized_committee: FormControl<number | null | undefined>,

		/**
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * Required
		 */
		two_year_period: FormControl<number | null | undefined>,
	}
	export function CreateCandidateHistoryTotalFormGroup() {
		return new FormGroup<CandidateHistoryTotalFormProperties>({
			active_through: new FormControl<number | null | undefined>(undefined),
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			address_street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			address_street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			candidate_election_year: new FormControl<number | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			candidate_inactive: new FormControl<boolean | null | undefined>(undefined),
			candidate_status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			disbursements: new FormControl<number | null | undefined>(undefined),
			district: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			district_number: new FormControl<number | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			federal_funds_flag: new FormControl<boolean | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			flags: new FormControl<string | null | undefined>(undefined),
			has_raised_funds: new FormControl<boolean | null | undefined>(undefined),
			incumbent_challenge: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			incumbent_challenge_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			is_election: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last_f2_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			office: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			office_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			receipts: new FormControl<number | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			two_year_period: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CandidateHistoryTotalPage {
		pagination?: OffsetInfo;
		results?: Array<CandidateHistoryTotal>;
	}
	export interface CandidateHistoryTotalPageFormProperties {
	}
	export function CreateCandidateHistoryTotalPageFormGroup() {
		return new FormGroup<CandidateHistoryTotalPageFormProperties>({
		});

	}

	export interface CandidatePage {
		pagination?: OffsetInfo;
		results?: Array<Candidate>;
	}
	export interface CandidatePageFormProperties {
	}
	export function CreateCandidatePageFormGroup() {
		return new FormGroup<CandidatePageFormProperties>({
		});

	}

	export interface CandidateSearch {
		id?: string | null;
		name?: string | null;
		office_sought?: string | null;
	}
	export interface CandidateSearchFormProperties {
		id: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,
		office_sought: FormControl<string | null | undefined>,
	}
	export function CreateCandidateSearchFormGroup() {
		return new FormGroup<CandidateSearchFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			office_sought: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CandidateSearchList {
		results?: Array<CandidateSearch>;
	}
	export interface CandidateSearchListFormProperties {
	}
	export function CreateCandidateSearchListFormGroup() {
		return new FormGroup<CandidateSearchListFormProperties>({
		});

	}

	export interface CandidateTotal {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: string;

		/**
		 * True indicates that a candidate is inactive.
		 */
		candidate_inactive?: boolean | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;
		disbursements?: number | null;

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district?: string | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		district_number?: number | null;

		/** Year of election */
		election_year?: number | null;

		/** A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. */
		federal_funds_flag?: boolean | null;

		/** A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) */
		has_raised_funds?: boolean | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Required */
		is_election: boolean;

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office?: string | null;

		/** Other committees contributions */
		other_political_committee_contributions?: number | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;
		receipts?: number | null;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 50
		 */
		state_full?: string | null;

		/** Transfers from authorized committees */
		transfers_from_other_authorized_committee?: number | null;
	}
	export interface CandidateTotalFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Required
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * True indicates that a candidate is inactive.
		 */
		candidate_inactive: FormControl<boolean | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,
		disbursements: FormControl<number | null | undefined>,

		/**
		 * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * Max length: 2
		 */
		district: FormControl<string | null | undefined>,

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		district_number: FormControl<number | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,

		/** A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates. */
		federal_funds_flag: FormControl<boolean | null | undefined>,

		/** A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.) */
		has_raised_funds: FormControl<boolean | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Required */
		is_election: FormControl<boolean | null | undefined>,

		/**
		 * Federal office candidate runs for: H, S or P
		 * Max length: 1
		 */
		office: FormControl<string | null | undefined>,

		/** Other committees contributions */
		other_political_committee_contributions: FormControl<number | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,
		receipts: FormControl<number | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * US state or territory where a candidate runs for office
		 * Max length: 50
		 */
		state_full: FormControl<string | null | undefined>,

		/** Transfers from authorized committees */
		transfers_from_other_authorized_committee: FormControl<number | null | undefined>,
	}
	export function CreateCandidateTotalFormGroup() {
		return new FormGroup<CandidateTotalFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			candidate_inactive: new FormControl<boolean | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			disbursements: new FormControl<number | null | undefined>(undefined),
			district: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			district_number: new FormControl<number | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			federal_funds_flag: new FormControl<boolean | null | undefined>(undefined),
			has_raised_funds: new FormControl<boolean | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			is_election: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			office: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			receipts: new FormControl<number | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CandidateTotalAggregate {
		district?: string | null;
		district_number?: number | null;
		election_year?: number | null;
		office?: string | null;
		party?: string | null;
		state?: string | null;
		state_full?: string | null;
		total_cash_on_hand_end_period?: number | null;
		total_debts_owed_by_committee?: number | null;
		total_disbursements?: number | null;
		total_individual_itemized_contributions?: number | null;
		total_other_political_committee_contributions?: number | null;
		total_receipts?: number | null;
		total_transfers_from_other_authorized_committee?: number | null;
	}
	export interface CandidateTotalAggregateFormProperties {
		district: FormControl<string | null | undefined>,
		district_number: FormControl<number | null | undefined>,
		election_year: FormControl<number | null | undefined>,
		office: FormControl<string | null | undefined>,
		party: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
		state_full: FormControl<string | null | undefined>,
		total_cash_on_hand_end_period: FormControl<number | null | undefined>,
		total_debts_owed_by_committee: FormControl<number | null | undefined>,
		total_disbursements: FormControl<number | null | undefined>,
		total_individual_itemized_contributions: FormControl<number | null | undefined>,
		total_other_political_committee_contributions: FormControl<number | null | undefined>,
		total_receipts: FormControl<number | null | undefined>,
		total_transfers_from_other_authorized_committee: FormControl<number | null | undefined>,
	}
	export function CreateCandidateTotalAggregateFormGroup() {
		return new FormGroup<CandidateTotalAggregateFormProperties>({
			district: new FormControl<string | null | undefined>(undefined),
			district_number: new FormControl<number | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			office: new FormControl<string | null | undefined>(undefined),
			party: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			state_full: new FormControl<string | null | undefined>(undefined),
			total_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			total_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			total_disbursements: new FormControl<number | null | undefined>(undefined),
			total_individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			total_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			total_receipts: new FormControl<number | null | undefined>(undefined),
			total_transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CandidateTotalAggregatePage {
		pagination?: OffsetInfo;
		results?: Array<CandidateTotalAggregate>;
	}
	export interface CandidateTotalAggregatePageFormProperties {
	}
	export function CreateCandidateTotalAggregatePageFormGroup() {
		return new FormGroup<CandidateTotalAggregatePageFormProperties>({
		});

	}

	export interface CandidateTotalPage {
		pagination?: OffsetInfo;
		results?: Array<CandidateTotal>;
	}
	export interface CandidateTotalPageFormProperties {
	}
	export function CreateCandidateTotalPageFormGroup() {
		return new FormGroup<CandidateTotalPageFormProperties>({
		});

	}

	export interface Committee {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_ids?: Array<string>;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full?: string | null;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 */
		cycles?: Array<number>;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date?: Date | null;

		/** The day the FEC received the committee's most recent filing */
		last_file_date?: Date | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		 */
		sponsor_candidate_ids?: Array<string>;
		CommitteeSponsor_candidate_list?: Array<CommitteeSponsor_candidate_list>;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;
	}
	export interface CommitteeFormProperties {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeFormGroup() {
		return new FormGroup<CommitteeFormProperties>({
			affiliated_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			committee_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			designation_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(25)]),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			last_f1_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeSponsor_candidate_list {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		sponsor_candidate_id?: string | null;

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		sponsor_candidate_name?: string | null;
	}
	export interface CommitteeSponsor_candidate_listFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		sponsor_candidate_id: FormControl<string | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		sponsor_candidate_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeSponsor_candidate_listFormGroup() {
		return new FormGroup<CommitteeSponsor_candidate_listFormProperties>({
			sponsor_candidate_id: new FormControl<string | null | undefined>(undefined),
			sponsor_candidate_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeDetail {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_ids?: Array<string>;

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full?: string | null;

		/**
		 * City of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_city?: string | null;

		/**
		 * Name 1 of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_1?: string | null;

		/**
		 * Name 2 of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_2?: string | null;

		/**
		 * Full name of committee custodian as reported on the Form 1
		 * Max length: 100
		 */
		custodian_name_full?: string | null;

		/**
		 * Middle name of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_middle?: string | null;

		/**
		 * Name prefix of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_prefix?: string | null;

		/**
		 * Suffix name of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_suffix?: string | null;

		/**
		 * Name title of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_title?: string | null;

		/**
		 * Phone number of committee custodian as reported on the Form 1
		 * Max length: 15
		 */
		custodian_phone?: string | null;

		/**
		 * State of committee custodian as reported on the Form 1
		 * Max length: 2
		 */
		custodian_state?: string | null;

		/**
		 * Street address of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_street_1?: string | null;

		/**
		 * Second line of the street address of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_street_2?: string | null;

		/**
		 * Zip code of the committee custodian as reported on the Form 1
		 * Max length: 9
		 */
		custodian_zip?: string | null;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 */
		cycles?: Array<number>;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full?: string | null;

		/**
		 * Email as reported on the Form 1
		 * Max length: 50
		 */
		email?: string | null;

		/**
		 * Fax as reported on the Form 1
		 * Max length: 10
		 */
		fax?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 * Max length: 3
		 */
		form_type?: string | null;
		CommitteeDetailJfc_committee?: Array<CommitteeDetailJfc_committee>;

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date?: Date | null;

		/** The day the FEC received the committee's most recent filing */
		last_file_date?: Date | null;

		/**
		 * Indicates if the committee is a leadership PAC
		 * Max length: 50
		 */
		leadership_pac?: string | null;

		/**
		 * Indicates if the committee is a lobbyist registrant PAC
		 * Max length: 1
		 */
		lobbyist_registrant_pac?: string | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full?: string | null;

		/**
		 * Code for the type of party the committee is, only if applicable
		 * Max length: 3
		 */
		party_type?: string | null;

		/**
		 * Description of the type of party the committee is, only if applicable
		 * Max length: 15
		 */
		party_type_full?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		 */
		sponsor_candidate_ids?: Array<string>;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full?: string | null;

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1?: string | null;

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2?: string | null;

		/**
		 * City of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_city?: string | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;

		/**
		 * Name 1 of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_1?: string | null;

		/**
		 * Name 2 of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_2?: string | null;

		/**
		 * Middle name of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_middle?: string | null;

		/**
		 * Name Prefix of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_prefix?: string | null;

		/**
		 * Name suffix of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_suffix?: string | null;

		/**
		 * Name title of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_title?: string | null;

		/**
		 * Phone of committee treasurer as reported on the Form 1
		 * Max length: 15
		 */
		treasurer_phone?: string | null;

		/**
		 * State of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_state?: string | null;

		/**
		 * Street of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_street_1?: string | null;

		/**
		 * Second line of the street of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_street_2?: string | null;

		/**
		 * Zip code of committee treasurer as reported on the Form 1
		 * Max length: 9
		 */
		treasurer_zip?: string | null;

		/**
		 * Website url as reported on the Form 1
		 * Max length: 50
		 */
		website?: string | null;

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip?: string | null;
	}
	export interface CommitteeDetailFormProperties {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name: FormControl<string | null | undefined>,

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/**
		 * City of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_city: FormControl<string | null | undefined>,

		/**
		 * Name 1 of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_1: FormControl<string | null | undefined>,

		/**
		 * Name 2 of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_2: FormControl<string | null | undefined>,

		/**
		 * Full name of committee custodian as reported on the Form 1
		 * Max length: 100
		 */
		custodian_name_full: FormControl<string | null | undefined>,

		/**
		 * Middle name of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_middle: FormControl<string | null | undefined>,

		/**
		 * Name prefix of committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_prefix: FormControl<string | null | undefined>,

		/**
		 * Suffix name of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_suffix: FormControl<string | null | undefined>,

		/**
		 * Name title of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_name_title: FormControl<string | null | undefined>,

		/**
		 * Phone number of committee custodian as reported on the Form 1
		 * Max length: 15
		 */
		custodian_phone: FormControl<string | null | undefined>,

		/**
		 * State of committee custodian as reported on the Form 1
		 * Max length: 2
		 */
		custodian_state: FormControl<string | null | undefined>,

		/**
		 * Street address of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of the street address of the committee custodian as reported on the Form 1
		 * Max length: 50
		 */
		custodian_street_2: FormControl<string | null | undefined>,

		/**
		 * Zip code of the committee custodian as reported on the Form 1
		 * Max length: 9
		 */
		custodian_zip: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full: FormControl<string | null | undefined>,

		/**
		 * Email as reported on the Form 1
		 * Max length: 50
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * Fax as reported on the Form 1
		 * Max length: 10
		 */
		fax: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 * Max length: 3
		 */
		form_type: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/**
		 * Indicates if the committee is a leadership PAC
		 * Max length: 50
		 */
		leadership_pac: FormControl<string | null | undefined>,

		/**
		 * Indicates if the committee is a lobbyist registrant PAC
		 * Max length: 1
		 */
		lobbyist_registrant_pac: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * Code for the type of party the committee is, only if applicable
		 * Max length: 3
		 */
		party_type: FormControl<string | null | undefined>,

		/**
		 * Description of the type of party the committee is, only if applicable
		 * Max length: 15
		 */
		party_type_full: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full: FormControl<string | null | undefined>,

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2: FormControl<string | null | undefined>,

		/**
		 * City of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_city: FormControl<string | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,

		/**
		 * Name 1 of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_1: FormControl<string | null | undefined>,

		/**
		 * Name 2 of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_2: FormControl<string | null | undefined>,

		/**
		 * Middle name of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_middle: FormControl<string | null | undefined>,

		/**
		 * Name Prefix of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_prefix: FormControl<string | null | undefined>,

		/**
		 * Name suffix of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_suffix: FormControl<string | null | undefined>,

		/**
		 * Name title of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_name_title: FormControl<string | null | undefined>,

		/**
		 * Phone of committee treasurer as reported on the Form 1
		 * Max length: 15
		 */
		treasurer_phone: FormControl<string | null | undefined>,

		/**
		 * State of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_state: FormControl<string | null | undefined>,

		/**
		 * Street of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of the street of committee treasurer as reported on the Form 1
		 * Max length: 50
		 */
		treasurer_street_2: FormControl<string | null | undefined>,

		/**
		 * Zip code of committee treasurer as reported on the Form 1
		 * Max length: 9
		 */
		treasurer_zip: FormControl<string | null | undefined>,

		/**
		 * Website url as reported on the Form 1
		 * Max length: 50
		 */
		website: FormControl<string | null | undefined>,

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeDetailFormGroup() {
		return new FormGroup<CommitteeDetailFormProperties>({
			affiliated_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			committee_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_name_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_name_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_name_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			custodian_name_middle: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_name_prefix: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_name_suffix: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_name_title: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_phone: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(15)]),
			custodian_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			custodian_street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			custodian_zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			designation_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(25)]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fax: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			form_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			last_f1_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			leadership_pac: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lobbyist_registrant_pac: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			party_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(15)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			treasurer_name_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name_middle: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name_prefix: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name_suffix: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name_title: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_phone: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(15)]),
			treasurer_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			website: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
		});

	}

	export interface CommitteeDetailJfc_committee {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id?: string | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name?: string | null;
	}
	export interface CommitteeDetailJfc_committeeFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeDetailJfc_committeeFormGroup() {
		return new FormGroup<CommitteeDetailJfc_committeeFormProperties>({
			joint_committee_id: new FormControl<string | null | undefined>(undefined),
			joint_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeDetailPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeDetail>;
	}
	export interface CommitteeDetailPageFormProperties {
	}
	export function CreateCommitteeDetailPageFormGroup() {
		return new FormGroup<CommitteeDetailPageFormProperties>({
		});

	}

	export interface CommitteeHistory {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_ids?: Array<string>;

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full?: string | null;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 */
		cycles?: Array<number>;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1), and the committee has filling activity during the cycle
		 */
		cycles_has_activity?: Array<number>;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s), and the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
		 */
		cycles_has_financial?: Array<number>;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;

		/**
		 * True indicates that a committee is active.
		 */
		is_active?: boolean | null;
		CommitteeHistoryJfc_committee?: Array<CommitteeHistoryJfc_committee>;

		/**
		 * The latest two year election cycle that the committee has filings
		 */
		last_cycle_has_activity?: number | null;

		/**
		 * The latest two year election cycle that the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		 */
		last_cycle_has_financial?: number | null;

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date?: Date | null;

		/** The day the FEC received the committee's most recent filing */
		last_file_date?: Date | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full?: string | null;

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1?: string | null;

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2?: string | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip?: string | null;
	}
	export interface CommitteeHistoryFormProperties {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name: FormControl<string | null | undefined>,

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,

		/**
		 * True indicates that a committee is active.
		 */
		is_active: FormControl<boolean | null | undefined>,

		/**
		 * The latest two year election cycle that the committee has filings
		 */
		last_cycle_has_activity: FormControl<number | null | undefined>,

		/**
		 * The latest two year election cycle that the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		 */
		last_cycle_has_financial: FormControl<number | null | undefined>,

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full: FormControl<string | null | undefined>,

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2: FormControl<string | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeHistoryFormGroup() {
		return new FormGroup<CommitteeHistoryFormProperties>({
			affiliated_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			committee_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			designation_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(25)]),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			is_active: new FormControl<boolean | null | undefined>(undefined),
			last_cycle_has_activity: new FormControl<number | null | undefined>(undefined),
			last_cycle_has_financial: new FormControl<number | null | undefined>(undefined),
			last_f1_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
		});

	}

	export interface CommitteeHistoryJfc_committee {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id?: string | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name?: string | null;
	}
	export interface CommitteeHistoryJfc_committeeFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeHistoryJfc_committeeFormGroup() {
		return new FormGroup<CommitteeHistoryJfc_committeeFormProperties>({
			joint_committee_id: new FormControl<string | null | undefined>(undefined),
			joint_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeHistoryPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeHistory>;
	}
	export interface CommitteeHistoryPageFormProperties {
	}
	export function CreateCommitteeHistoryPageFormGroup() {
		return new FormGroup<CommitteeHistoryPageFormProperties>({
		});

	}

	export interface CommitteeHistoryProfile {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_ids?: Array<string>;

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Display the label of committee based on committee type, designation and organization type
		 */
		committee_label?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full?: string | null;

		/** True indicates that a candidate committee had been converted to a PAC */
		convert_to_pac_flag?: boolean | null;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 */
		cycles?: Array<number>;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1), and the committee has filling activity during the cycle
		 */
		cycles_has_activity?: Array<number>;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s), and the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
		 */
		cycles_has_financial?: Array<number>;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;

		/** Year a candidate runs for federal office. */
		former_candidate_election_year?: number | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Max length: 9
		 */
		former_candidate_id?: string | null;

		/**
		 * Name of candidate running for office
		 * Max length: 90
		 */
		former_candidate_name?: string | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 200
		 */
		former_committee_name?: string | null;

		/**
		 * True indicates that a committee is active.
		 */
		is_active?: boolean | null;
		CommitteeHistoryProfileJfc_committee?: Array<CommitteeHistoryProfileJfc_committee>;

		/**
		 * The latest two year election cycle that the committee has filings
		 */
		last_cycle_has_activity?: number | null;

		/**
		 * The latest two year election cycle that the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		 */
		last_cycle_has_financial?: number | null;

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date?: Date | null;

		/** The day the FEC received the committee's most recent filing */
		last_file_date?: Date | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		 */
		sponsor_candidate_ids?: Array<string>;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full?: string | null;

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1?: string | null;

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2?: string | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip?: string | null;
	}
	export interface CommitteeHistoryProfileFormProperties {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name: FormControl<string | null | undefined>,

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Display the label of committee based on committee type, designation and organization type
		 */
		committee_label: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/** True indicates that a candidate committee had been converted to a PAC */
		convert_to_pac_flag: FormControl<boolean | null | undefined>,

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,

		/** Year a candidate runs for federal office. */
		former_candidate_election_year: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * Max length: 9
		 */
		former_candidate_id: FormControl<string | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 90
		 */
		former_candidate_name: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 200
		 */
		former_committee_name: FormControl<string | null | undefined>,

		/**
		 * True indicates that a committee is active.
		 */
		is_active: FormControl<boolean | null | undefined>,

		/**
		 * The latest two year election cycle that the committee has filings
		 */
		last_cycle_has_activity: FormControl<number | null | undefined>,

		/**
		 * The latest two year election cycle that the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		 */
		last_cycle_has_financial: FormControl<number | null | undefined>,

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full: FormControl<string | null | undefined>,

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2: FormControl<string | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeHistoryProfileFormGroup() {
		return new FormGroup<CommitteeHistoryProfileFormProperties>({
			affiliated_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_label: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			committee_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			convert_to_pac_flag: new FormControl<boolean | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			designation_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(25)]),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			former_candidate_election_year: new FormControl<number | null | undefined>(undefined),
			former_candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
			former_candidate_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(90)]),
			former_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(200)]),
			is_active: new FormControl<boolean | null | undefined>(undefined),
			last_cycle_has_activity: new FormControl<number | null | undefined>(undefined),
			last_cycle_has_financial: new FormControl<number | null | undefined>(undefined),
			last_f1_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
		});

	}

	export interface CommitteeHistoryProfileJfc_committee {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id?: string | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name?: string | null;
	}
	export interface CommitteeHistoryProfileJfc_committeeFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeHistoryProfileJfc_committeeFormGroup() {
		return new FormGroup<CommitteeHistoryProfileJfc_committeeFormProperties>({
			joint_committee_id: new FormControl<string | null | undefined>(undefined),
			joint_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeHistoryProfilePage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeHistoryProfile>;
	}
	export interface CommitteeHistoryProfilePageFormProperties {
	}
	export function CreateCommitteeHistoryProfilePageFormGroup() {
		return new FormGroup<CommitteeHistoryProfilePageFormProperties>({
		});

	}

	export interface CommitteePage {
		pagination?: OffsetInfo;
		results?: Array<Committee>;
	}
	export interface CommitteePageFormProperties {
	}
	export function CreateCommitteePageFormGroup() {
		return new FormGroup<CommitteePageFormProperties>({
		});

	}

	export interface CommitteeReports {
		aggregate_amount_personal_contributions_general?: number | null;
		aggregate_contributions_personal_funds_primary?: number | null;
		all_loans_received_period?: number | null;
		all_loans_received_ytd?: number | null;
		all_other_loans_period?: number | null;
		all_other_loans_ytd?: number | null;
		allocated_federal_election_levin_share_period?: number | null;

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_chain?: Array<number>;
		amendment_indicator?: string | null;
		amendment_indicator_full?: string | null;
		beginning_image_number?: string | null;
		calendar_ytd?: number | null;
		candidate_contribution_period?: number | null;
		candidate_contribution_ytd?: number | null;
		cash_on_hand_beginning_calendar_ytd?: number | null;

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period?: number | null;
		cash_on_hand_close_ytd?: number | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		committee_type?: string | null;
		coordinated_expenditures_by_party_committee_period?: number | null;
		coordinated_expenditures_by_party_committee_ytd?: number | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;
		csv_url?: string | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle?: number | null;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;

		/** Debts owed to the committee */
		debts_owed_to_committee?: number | null;
		document_description?: string | null;
		end_image_number?: string | null;
		exempt_legal_accounting_disbursement_period?: number | null;
		exempt_legal_accounting_disbursement_ytd?: number | null;
		expenditure_subject_to_limits?: number | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		fed_candidate_committee_contribution_refunds_ytd?: number | null;
		fed_candidate_committee_contributions_period?: number | null;
		fed_candidate_committee_contributions_ytd?: number | null;
		fed_candidate_contribution_refunds_period?: number | null;
		federal_funds_period?: number | null;
		federal_funds_ytd?: number | null;
		file_number?: number | null;
		fundraising_disbursements_period?: number | null;
		fundraising_disbursements_ytd?: number | null;
		gross_receipt_authorized_committee_general?: number | null;
		gross_receipt_authorized_committee_primary?: number | null;
		gross_receipt_minus_personal_contribution_general?: number | null;
		gross_receipt_minus_personal_contributions_primary?: number | null;

		/**
		 * HTML link to the filing.
		 */
		html_url?: string | null;
		independent_contributions_period?: number | null;
		independent_expenditures_period?: number | null;
		independent_expenditures_ytd?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd?: number | null;

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended?: boolean | null;
		items_on_hand_liquidated?: number | null;
		loan_repayments_candidate_loans_period?: number | null;
		loan_repayments_candidate_loans_ytd?: number | null;
		loan_repayments_made_period?: number | null;
		loan_repayments_made_ytd?: number | null;
		loan_repayments_other_loans_period?: number | null;
		loan_repayments_other_loans_ytd?: number | null;
		loan_repayments_received_period?: number | null;
		loan_repayments_received_ytd?: number | null;
		loans_made_by_candidate_period?: number | null;
		loans_made_by_candidate_ytd?: number | null;
		loans_made_period?: number | null;
		loans_made_ytd?: number | null;
		loans_received_from_candidate_period?: number | null;
		loans_received_from_candidate_ytd?: number | null;

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed?: string | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		most_recent_file_number?: number | null;
		net_contributions_cycle_to_date?: number | null;
		net_contributions_period?: number | null;
		net_contributions_ytd?: number | null;
		net_operating_expenditures_cycle_to_date?: number | null;
		net_operating_expenditures_period?: number | null;
		net_operating_expenditures_ytd?: number | null;
		non_allocated_fed_election_activity_period?: number | null;
		non_allocated_fed_election_activity_ytd?: number | null;
		nonfed_share_allocated_disbursements_period?: number | null;
		offsets_to_fundraising_expenditures_period?: number | null;
		offsets_to_fundraising_expenditures_ytd?: number | null;
		offsets_to_legal_accounting_period?: number | null;
		offsets_to_legal_accounting_ytd?: number | null;

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period?: number | null;

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd?: number | null;
		operating_expenditures_period?: number | null;
		operating_expenditures_ytd?: number | null;

		/** Other disbursements total for the reporting period */
		other_disbursements_period?: number | null;

		/** Other disbursements total for the year to date */
		other_disbursements_ytd?: number | null;
		other_fed_operating_expenditures_period?: number | null;
		other_fed_operating_expenditures_ytd?: number | null;
		other_fed_receipts_period?: number | null;
		other_fed_receipts_ytd?: number | null;
		other_loans_received_period?: number | null;
		other_loans_received_ytd?: number | null;

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period?: number | null;

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd?: number | null;
		other_receipts_period?: number | null;
		other_receipts_ytd?: number | null;
		pdf_url?: string | null;

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period?: number | null;

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd?: number | null;
		previous_file_number?: number | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period?: number | null;

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd?: number | null;

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period?: number | null;

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd?: number | null;

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period?: number | null;

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd?: number | null;
		refunds_total_contributions_col_total_ytd?: number | null;
		repayments_loans_made_by_candidate_period?: number | null;
		repayments_loans_made_candidate_ytd?: number | null;
		repayments_other_loans_period?: number | null;
		repayments_other_loans_ytd?: number | null;
		report_form?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		shared_fed_activity_nonfed_ytd?: number | null;
		shared_fed_activity_period?: number | null;
		shared_fed_activity_ytd?: number | null;
		shared_fed_operating_expenditures_period?: number | null;
		shared_fed_operating_expenditures_ytd?: number | null;
		shared_nonfed_operating_expenditures_period?: number | null;
		shared_nonfed_operating_expenditures_ytd?: number | null;
		subtotal_period?: number | null;
		subtotal_summary_page_period?: number | null;
		subtotal_summary_period?: number | null;
		subtotal_summary_ytd?: number | null;
		total_contribution_refunds_col_total_period?: number | null;

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period?: number | null;

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd?: number | null;
		total_contributions_column_total_period?: number | null;

		/** Contribution total for the reporting period */
		total_contributions_period?: number | null;

		/** Contribution total for the year to date */
		total_contributions_ytd?: number | null;

		/** Disbursements total for the reporting period */
		total_disbursements_period?: number | null;

		/** Disbursements total for the year to date */
		total_disbursements_ytd?: number | null;
		total_fed_disbursements_period?: number | null;
		total_fed_disbursements_ytd?: number | null;
		total_fed_election_activity_period?: number | null;
		total_fed_election_activity_ytd?: number | null;
		total_fed_operating_expenditures_period?: number | null;
		total_fed_operating_expenditures_ytd?: number | null;
		total_fed_receipts_period?: number | null;
		total_fed_receipts_ytd?: number | null;

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period?: number | null;

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd?: number | null;
		total_loan_repayments_made_period?: number | null;
		total_loan_repayments_made_ytd?: number | null;
		total_loans_received_period?: number | null;
		total_loans_received_ytd?: number | null;
		total_nonfed_transfers_period?: number | null;
		total_nonfed_transfers_ytd?: number | null;
		total_offsets_to_operating_expenditures_period?: number | null;
		total_offsets_to_operating_expenditures_ytd?: number | null;
		total_operating_expenditures_period?: number | null;
		total_operating_expenditures_ytd?: number | null;
		total_period?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd?: number | null;
		total_ytd?: number | null;
		transfers_from_affiliated_committee_period?: number | null;
		transfers_from_affiliated_committee_ytd?: number | null;
		transfers_from_affiliated_party_period?: number | null;
		transfers_from_affiliated_party_ytd?: number | null;
		transfers_from_nonfed_account_period?: number | null;
		transfers_from_nonfed_account_ytd?: number | null;
		transfers_from_nonfed_levin_period?: number | null;
		transfers_from_nonfed_levin_ytd?: number | null;
		transfers_from_other_authorized_committee_period?: number | null;
		transfers_from_other_authorized_committee_ytd?: number | null;
		transfers_to_affiliated_committee_period?: number | null;
		transfers_to_affilitated_committees_ytd?: number | null;
		transfers_to_other_authorized_committee_period?: number | null;
		transfers_to_other_authorized_committee_ytd?: number | null;
	}
	export interface CommitteeReportsFormProperties {
		aggregate_amount_personal_contributions_general: FormControl<number | null | undefined>,
		aggregate_contributions_personal_funds_primary: FormControl<number | null | undefined>,
		all_loans_received_period: FormControl<number | null | undefined>,
		all_loans_received_ytd: FormControl<number | null | undefined>,
		all_other_loans_period: FormControl<number | null | undefined>,
		all_other_loans_ytd: FormControl<number | null | undefined>,
		allocated_federal_election_levin_share_period: FormControl<number | null | undefined>,
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_full: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		calendar_ytd: FormControl<number | null | undefined>,
		candidate_contribution_period: FormControl<number | null | undefined>,
		candidate_contribution_ytd: FormControl<number | null | undefined>,
		cash_on_hand_beginning_calendar_ytd: FormControl<number | null | undefined>,

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,
		cash_on_hand_close_ytd: FormControl<number | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		committee_type: FormControl<string | null | undefined>,
		coordinated_expenditures_by_party_committee_period: FormControl<number | null | undefined>,
		coordinated_expenditures_by_party_committee_ytd: FormControl<number | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/** Debts owed to the committee */
		debts_owed_to_committee: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		end_image_number: FormControl<string | null | undefined>,
		exempt_legal_accounting_disbursement_period: FormControl<number | null | undefined>,
		exempt_legal_accounting_disbursement_ytd: FormControl<number | null | undefined>,
		expenditure_subject_to_limits: FormControl<number | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		fed_candidate_committee_contribution_refunds_ytd: FormControl<number | null | undefined>,
		fed_candidate_committee_contributions_period: FormControl<number | null | undefined>,
		fed_candidate_committee_contributions_ytd: FormControl<number | null | undefined>,
		fed_candidate_contribution_refunds_period: FormControl<number | null | undefined>,
		federal_funds_period: FormControl<number | null | undefined>,
		federal_funds_ytd: FormControl<number | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		fundraising_disbursements_period: FormControl<number | null | undefined>,
		fundraising_disbursements_ytd: FormControl<number | null | undefined>,
		gross_receipt_authorized_committee_general: FormControl<number | null | undefined>,
		gross_receipt_authorized_committee_primary: FormControl<number | null | undefined>,
		gross_receipt_minus_personal_contribution_general: FormControl<number | null | undefined>,
		gross_receipt_minus_personal_contributions_primary: FormControl<number | null | undefined>,

		/**
		 * HTML link to the filing.
		 */
		html_url: FormControl<string | null | undefined>,
		independent_contributions_period: FormControl<number | null | undefined>,
		independent_expenditures_period: FormControl<number | null | undefined>,
		independent_expenditures_ytd: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd: FormControl<number | null | undefined>,

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended: FormControl<boolean | null | undefined>,
		items_on_hand_liquidated: FormControl<number | null | undefined>,
		loan_repayments_candidate_loans_period: FormControl<number | null | undefined>,
		loan_repayments_candidate_loans_ytd: FormControl<number | null | undefined>,
		loan_repayments_made_period: FormControl<number | null | undefined>,
		loan_repayments_made_ytd: FormControl<number | null | undefined>,
		loan_repayments_other_loans_period: FormControl<number | null | undefined>,
		loan_repayments_other_loans_ytd: FormControl<number | null | undefined>,
		loan_repayments_received_period: FormControl<number | null | undefined>,
		loan_repayments_received_ytd: FormControl<number | null | undefined>,
		loans_made_by_candidate_period: FormControl<number | null | undefined>,
		loans_made_by_candidate_ytd: FormControl<number | null | undefined>,
		loans_made_period: FormControl<number | null | undefined>,
		loans_made_ytd: FormControl<number | null | undefined>,
		loans_received_from_candidate_period: FormControl<number | null | undefined>,
		loans_received_from_candidate_ytd: FormControl<number | null | undefined>,

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed: FormControl<string | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_file_number: FormControl<number | null | undefined>,
		net_contributions_cycle_to_date: FormControl<number | null | undefined>,
		net_contributions_period: FormControl<number | null | undefined>,
		net_contributions_ytd: FormControl<number | null | undefined>,
		net_operating_expenditures_cycle_to_date: FormControl<number | null | undefined>,
		net_operating_expenditures_period: FormControl<number | null | undefined>,
		net_operating_expenditures_ytd: FormControl<number | null | undefined>,
		non_allocated_fed_election_activity_period: FormControl<number | null | undefined>,
		non_allocated_fed_election_activity_ytd: FormControl<number | null | undefined>,
		nonfed_share_allocated_disbursements_period: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures_period: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures_ytd: FormControl<number | null | undefined>,
		offsets_to_legal_accounting_period: FormControl<number | null | undefined>,
		offsets_to_legal_accounting_ytd: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,
		operating_expenditures_period: FormControl<number | null | undefined>,
		operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Other disbursements total for the reporting period */
		other_disbursements_period: FormControl<number | null | undefined>,

		/** Other disbursements total for the year to date */
		other_disbursements_ytd: FormControl<number | null | undefined>,
		other_fed_operating_expenditures_period: FormControl<number | null | undefined>,
		other_fed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		other_fed_receipts_period: FormControl<number | null | undefined>,
		other_fed_receipts_ytd: FormControl<number | null | undefined>,
		other_loans_received_period: FormControl<number | null | undefined>,
		other_loans_received_ytd: FormControl<number | null | undefined>,

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd: FormControl<number | null | undefined>,
		other_receipts_period: FormControl<number | null | undefined>,
		other_receipts_ytd: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		previous_file_number: FormControl<number | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd: FormControl<number | null | undefined>,

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd: FormControl<number | null | undefined>,

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		refunds_total_contributions_col_total_ytd: FormControl<number | null | undefined>,
		repayments_loans_made_by_candidate_period: FormControl<number | null | undefined>,
		repayments_loans_made_candidate_ytd: FormControl<number | null | undefined>,
		repayments_other_loans_period: FormControl<number | null | undefined>,
		repayments_other_loans_ytd: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		shared_fed_activity_nonfed_ytd: FormControl<number | null | undefined>,
		shared_fed_activity_period: FormControl<number | null | undefined>,
		shared_fed_activity_ytd: FormControl<number | null | undefined>,
		shared_fed_operating_expenditures_period: FormControl<number | null | undefined>,
		shared_fed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		shared_nonfed_operating_expenditures_period: FormControl<number | null | undefined>,
		shared_nonfed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		subtotal_period: FormControl<number | null | undefined>,
		subtotal_summary_page_period: FormControl<number | null | undefined>,
		subtotal_summary_period: FormControl<number | null | undefined>,
		subtotal_summary_ytd: FormControl<number | null | undefined>,
		total_contribution_refunds_col_total_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd: FormControl<number | null | undefined>,
		total_contributions_column_total_period: FormControl<number | null | undefined>,

		/** Contribution total for the reporting period */
		total_contributions_period: FormControl<number | null | undefined>,

		/** Contribution total for the year to date */
		total_contributions_ytd: FormControl<number | null | undefined>,

		/** Disbursements total for the reporting period */
		total_disbursements_period: FormControl<number | null | undefined>,

		/** Disbursements total for the year to date */
		total_disbursements_ytd: FormControl<number | null | undefined>,
		total_fed_disbursements_period: FormControl<number | null | undefined>,
		total_fed_disbursements_ytd: FormControl<number | null | undefined>,
		total_fed_election_activity_period: FormControl<number | null | undefined>,
		total_fed_election_activity_ytd: FormControl<number | null | undefined>,
		total_fed_operating_expenditures_period: FormControl<number | null | undefined>,
		total_fed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		total_fed_receipts_period: FormControl<number | null | undefined>,
		total_fed_receipts_ytd: FormControl<number | null | undefined>,

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd: FormControl<number | null | undefined>,
		total_loan_repayments_made_period: FormControl<number | null | undefined>,
		total_loan_repayments_made_ytd: FormControl<number | null | undefined>,
		total_loans_received_period: FormControl<number | null | undefined>,
		total_loans_received_ytd: FormControl<number | null | undefined>,
		total_nonfed_transfers_period: FormControl<number | null | undefined>,
		total_nonfed_transfers_ytd: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,
		total_operating_expenditures_period: FormControl<number | null | undefined>,
		total_operating_expenditures_ytd: FormControl<number | null | undefined>,
		total_period: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd: FormControl<number | null | undefined>,
		total_ytd: FormControl<number | null | undefined>,
		transfers_from_affiliated_committee_period: FormControl<number | null | undefined>,
		transfers_from_affiliated_committee_ytd: FormControl<number | null | undefined>,
		transfers_from_affiliated_party_period: FormControl<number | null | undefined>,
		transfers_from_affiliated_party_ytd: FormControl<number | null | undefined>,
		transfers_from_nonfed_account_period: FormControl<number | null | undefined>,
		transfers_from_nonfed_account_ytd: FormControl<number | null | undefined>,
		transfers_from_nonfed_levin_period: FormControl<number | null | undefined>,
		transfers_from_nonfed_levin_ytd: FormControl<number | null | undefined>,
		transfers_from_other_authorized_committee_period: FormControl<number | null | undefined>,
		transfers_from_other_authorized_committee_ytd: FormControl<number | null | undefined>,
		transfers_to_affiliated_committee_period: FormControl<number | null | undefined>,
		transfers_to_affilitated_committees_ytd: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee_period: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee_ytd: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeReportsFormGroup() {
		return new FormGroup<CommitteeReportsFormProperties>({
			aggregate_amount_personal_contributions_general: new FormControl<number | null | undefined>(undefined),
			aggregate_contributions_personal_funds_primary: new FormControl<number | null | undefined>(undefined),
			all_loans_received_period: new FormControl<number | null | undefined>(undefined),
			all_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			all_other_loans_period: new FormControl<number | null | undefined>(undefined),
			all_other_loans_ytd: new FormControl<number | null | undefined>(undefined),
			allocated_federal_election_levin_share_period: new FormControl<number | null | undefined>(undefined),
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_full: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			calendar_ytd: new FormControl<number | null | undefined>(undefined),
			candidate_contribution_period: new FormControl<number | null | undefined>(undefined),
			candidate_contribution_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_calendar_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_close_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			coordinated_expenditures_by_party_committee_period: new FormControl<number | null | undefined>(undefined),
			coordinated_expenditures_by_party_committee_ytd: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			end_image_number: new FormControl<string | null | undefined>(undefined),
			exempt_legal_accounting_disbursement_period: new FormControl<number | null | undefined>(undefined),
			exempt_legal_accounting_disbursement_ytd: new FormControl<number | null | undefined>(undefined),
			expenditure_subject_to_limits: new FormControl<number | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			fed_candidate_committee_contribution_refunds_ytd: new FormControl<number | null | undefined>(undefined),
			fed_candidate_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			fed_candidate_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			fed_candidate_contribution_refunds_period: new FormControl<number | null | undefined>(undefined),
			federal_funds_period: new FormControl<number | null | undefined>(undefined),
			federal_funds_ytd: new FormControl<number | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements_period: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			gross_receipt_authorized_committee_general: new FormControl<number | null | undefined>(undefined),
			gross_receipt_authorized_committee_primary: new FormControl<number | null | undefined>(undefined),
			gross_receipt_minus_personal_contribution_general: new FormControl<number | null | undefined>(undefined),
			gross_receipt_minus_personal_contributions_primary: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			independent_contributions_period: new FormControl<number | null | undefined>(undefined),
			independent_expenditures_period: new FormControl<number | null | undefined>(undefined),
			independent_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			items_on_hand_liquidated: new FormControl<number | null | undefined>(undefined),
			loan_repayments_candidate_loans_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_candidate_loans_ytd: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made_ytd: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans_ytd: new FormControl<number | null | undefined>(undefined),
			loan_repayments_received_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_received_ytd: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate_period: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate_ytd: new FormControl<number | null | undefined>(undefined),
			loans_made_period: new FormControl<number | null | undefined>(undefined),
			loans_made_ytd: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate_period: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate_ytd: new FormControl<number | null | undefined>(undefined),
			means_filed: new FormControl<string | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_file_number: new FormControl<number | null | undefined>(undefined),
			net_contributions_cycle_to_date: new FormControl<number | null | undefined>(undefined),
			net_contributions_period: new FormControl<number | null | undefined>(undefined),
			net_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_cycle_to_date: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			non_allocated_fed_election_activity_period: new FormControl<number | null | undefined>(undefined),
			non_allocated_fed_election_activity_ytd: new FormControl<number | null | undefined>(undefined),
			nonfed_share_allocated_disbursements_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting_ytd: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			other_disbursements_period: new FormControl<number | null | undefined>(undefined),
			other_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			other_fed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			other_fed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			other_fed_receipts_period: new FormControl<number | null | undefined>(undefined),
			other_fed_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			other_loans_received_period: new FormControl<number | null | undefined>(undefined),
			other_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			other_receipts_period: new FormControl<number | null | undefined>(undefined),
			other_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			refunded_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunds_total_contributions_col_total_ytd: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_by_candidate_period: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_candidate_ytd: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans_period: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans_ytd: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_nonfed_ytd: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_period: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_ytd: new FormControl<number | null | undefined>(undefined),
			shared_fed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			shared_fed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			shared_nonfed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			shared_nonfed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			subtotal_period: new FormControl<number | null | undefined>(undefined),
			subtotal_summary_page_period: new FormControl<number | null | undefined>(undefined),
			subtotal_summary_period: new FormControl<number | null | undefined>(undefined),
			subtotal_summary_ytd: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_col_total_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_ytd: new FormControl<number | null | undefined>(undefined),
			total_contributions_column_total_period: new FormControl<number | null | undefined>(undefined),
			total_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_disbursements_period: new FormControl<number | null | undefined>(undefined),
			total_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_disbursements_period: new FormControl<number | null | undefined>(undefined),
			total_fed_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_election_activity_period: new FormControl<number | null | undefined>(undefined),
			total_fed_election_activity_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_fed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_receipts_period: new FormControl<number | null | undefined>(undefined),
			total_fed_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made_period: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made_ytd: new FormControl<number | null | undefined>(undefined),
			total_loans_received_period: new FormControl<number | null | undefined>(undefined),
			total_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			total_nonfed_transfers_period: new FormControl<number | null | undefined>(undefined),
			total_nonfed_transfers_ytd: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_period: new FormControl<number | null | undefined>(undefined),
			total_receipts_period: new FormControl<number | null | undefined>(undefined),
			total_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			total_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_committee_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_party_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_party_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_account_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_account_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_levin_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_levin_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_other_authorized_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_other_authorized_committee_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_to_affiliated_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_to_affilitated_committees_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee_ytd: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeReportsHouseSenate {
		aggregate_amount_personal_contributions_general?: number | null;
		aggregate_contributions_personal_funds_primary?: number | null;
		all_other_loans_period?: number | null;
		all_other_loans_ytd?: number | null;

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_chain?: Array<number>;
		amendment_indicator?: string | null;
		amendment_indicator_full?: string | null;
		beginning_image_number?: string | null;
		candidate_contribution_period?: number | null;
		candidate_contribution_ytd?: number | null;

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period?: number | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		committee_type?: string | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;
		csv_url?: string | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle?: number | null;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;

		/** Debts owed to the committee */
		debts_owed_to_committee?: number | null;
		document_description?: string | null;
		end_image_number?: string | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		file_number?: number | null;
		gross_receipt_authorized_committee_general?: number | null;
		gross_receipt_authorized_committee_primary?: number | null;
		gross_receipt_minus_personal_contribution_general?: number | null;
		gross_receipt_minus_personal_contributions_primary?: number | null;

		/**
		 * HTML link to the filing.
		 */
		html_url?: string | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd?: number | null;

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended?: boolean | null;
		loan_repayments_candidate_loans_period?: number | null;
		loan_repayments_candidate_loans_ytd?: number | null;
		loan_repayments_other_loans_period?: number | null;
		loan_repayments_other_loans_ytd?: number | null;
		loans_made_by_candidate_period?: number | null;
		loans_made_by_candidate_ytd?: number | null;

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed?: string | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		most_recent_file_number?: number | null;
		net_contributions_period?: number | null;
		net_contributions_ytd?: number | null;
		net_operating_expenditures_period?: number | null;
		net_operating_expenditures_ytd?: number | null;

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period?: number | null;

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd?: number | null;
		operating_expenditures_period?: number | null;
		operating_expenditures_ytd?: number | null;

		/** Other disbursements total for the reporting period */
		other_disbursements_period?: number | null;

		/** Other disbursements total for the year to date */
		other_disbursements_ytd?: number | null;

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period?: number | null;

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd?: number | null;
		other_receipts_period?: number | null;
		other_receipts_ytd?: number | null;
		pdf_url?: string | null;

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period?: number | null;

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd?: number | null;
		previous_file_number?: number | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period?: number | null;

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd?: number | null;

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period?: number | null;

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd?: number | null;

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period?: number | null;

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd?: number | null;
		refunds_total_contributions_col_total_ytd?: number | null;
		report_form?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		subtotal_period?: number | null;
		total_contribution_refunds_col_total_period?: number | null;

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period?: number | null;

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd?: number | null;
		total_contributions_column_total_period?: number | null;

		/** Contribution total for the reporting period */
		total_contributions_period?: number | null;

		/** Contribution total for the year to date */
		total_contributions_ytd?: number | null;

		/** Disbursements total for the reporting period */
		total_disbursements_period?: number | null;

		/** Disbursements total for the year to date */
		total_disbursements_ytd?: number | null;

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period?: number | null;

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd?: number | null;
		total_loan_repayments_made_period?: number | null;
		total_loan_repayments_made_ytd?: number | null;
		total_loans_received_period?: number | null;
		total_loans_received_ytd?: number | null;
		total_offsets_to_operating_expenditures_period?: number | null;
		total_offsets_to_operating_expenditures_ytd?: number | null;
		total_operating_expenditures_period?: number | null;
		total_operating_expenditures_ytd?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd?: number | null;
		transfers_from_other_authorized_committee_period?: number | null;
		transfers_from_other_authorized_committee_ytd?: number | null;
		transfers_to_other_authorized_committee_period?: number | null;
		transfers_to_other_authorized_committee_ytd?: number | null;
	}
	export interface CommitteeReportsHouseSenateFormProperties {
		aggregate_amount_personal_contributions_general: FormControl<number | null | undefined>,
		aggregate_contributions_personal_funds_primary: FormControl<number | null | undefined>,
		all_other_loans_period: FormControl<number | null | undefined>,
		all_other_loans_ytd: FormControl<number | null | undefined>,
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_full: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		candidate_contribution_period: FormControl<number | null | undefined>,
		candidate_contribution_ytd: FormControl<number | null | undefined>,

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		committee_type: FormControl<string | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/** Debts owed to the committee */
		debts_owed_to_committee: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		end_image_number: FormControl<string | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		gross_receipt_authorized_committee_general: FormControl<number | null | undefined>,
		gross_receipt_authorized_committee_primary: FormControl<number | null | undefined>,
		gross_receipt_minus_personal_contribution_general: FormControl<number | null | undefined>,
		gross_receipt_minus_personal_contributions_primary: FormControl<number | null | undefined>,

		/**
		 * HTML link to the filing.
		 */
		html_url: FormControl<string | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd: FormControl<number | null | undefined>,

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended: FormControl<boolean | null | undefined>,
		loan_repayments_candidate_loans_period: FormControl<number | null | undefined>,
		loan_repayments_candidate_loans_ytd: FormControl<number | null | undefined>,
		loan_repayments_other_loans_period: FormControl<number | null | undefined>,
		loan_repayments_other_loans_ytd: FormControl<number | null | undefined>,
		loans_made_by_candidate_period: FormControl<number | null | undefined>,
		loans_made_by_candidate_ytd: FormControl<number | null | undefined>,

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed: FormControl<string | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_file_number: FormControl<number | null | undefined>,
		net_contributions_period: FormControl<number | null | undefined>,
		net_contributions_ytd: FormControl<number | null | undefined>,
		net_operating_expenditures_period: FormControl<number | null | undefined>,
		net_operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,
		operating_expenditures_period: FormControl<number | null | undefined>,
		operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Other disbursements total for the reporting period */
		other_disbursements_period: FormControl<number | null | undefined>,

		/** Other disbursements total for the year to date */
		other_disbursements_ytd: FormControl<number | null | undefined>,

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd: FormControl<number | null | undefined>,
		other_receipts_period: FormControl<number | null | undefined>,
		other_receipts_ytd: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		previous_file_number: FormControl<number | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd: FormControl<number | null | undefined>,

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd: FormControl<number | null | undefined>,

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		refunds_total_contributions_col_total_ytd: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		subtotal_period: FormControl<number | null | undefined>,
		total_contribution_refunds_col_total_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd: FormControl<number | null | undefined>,
		total_contributions_column_total_period: FormControl<number | null | undefined>,

		/** Contribution total for the reporting period */
		total_contributions_period: FormControl<number | null | undefined>,

		/** Contribution total for the year to date */
		total_contributions_ytd: FormControl<number | null | undefined>,

		/** Disbursements total for the reporting period */
		total_disbursements_period: FormControl<number | null | undefined>,

		/** Disbursements total for the year to date */
		total_disbursements_ytd: FormControl<number | null | undefined>,

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd: FormControl<number | null | undefined>,
		total_loan_repayments_made_period: FormControl<number | null | undefined>,
		total_loan_repayments_made_ytd: FormControl<number | null | undefined>,
		total_loans_received_period: FormControl<number | null | undefined>,
		total_loans_received_ytd: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,
		total_operating_expenditures_period: FormControl<number | null | undefined>,
		total_operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd: FormControl<number | null | undefined>,
		transfers_from_other_authorized_committee_period: FormControl<number | null | undefined>,
		transfers_from_other_authorized_committee_ytd: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee_period: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee_ytd: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeReportsHouseSenateFormGroup() {
		return new FormGroup<CommitteeReportsHouseSenateFormProperties>({
			aggregate_amount_personal_contributions_general: new FormControl<number | null | undefined>(undefined),
			aggregate_contributions_personal_funds_primary: new FormControl<number | null | undefined>(undefined),
			all_other_loans_period: new FormControl<number | null | undefined>(undefined),
			all_other_loans_ytd: new FormControl<number | null | undefined>(undefined),
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_full: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			candidate_contribution_period: new FormControl<number | null | undefined>(undefined),
			candidate_contribution_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			end_image_number: new FormControl<string | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			gross_receipt_authorized_committee_general: new FormControl<number | null | undefined>(undefined),
			gross_receipt_authorized_committee_primary: new FormControl<number | null | undefined>(undefined),
			gross_receipt_minus_personal_contribution_general: new FormControl<number | null | undefined>(undefined),
			gross_receipt_minus_personal_contributions_primary: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			individual_itemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			loan_repayments_candidate_loans_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_candidate_loans_ytd: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans_ytd: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate_period: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate_ytd: new FormControl<number | null | undefined>(undefined),
			means_filed: new FormControl<string | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_file_number: new FormControl<number | null | undefined>(undefined),
			net_contributions_period: new FormControl<number | null | undefined>(undefined),
			net_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			other_disbursements_period: new FormControl<number | null | undefined>(undefined),
			other_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			other_receipts_period: new FormControl<number | null | undefined>(undefined),
			other_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			refunded_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunds_total_contributions_col_total_ytd: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			subtotal_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_col_total_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_ytd: new FormControl<number | null | undefined>(undefined),
			total_contributions_column_total_period: new FormControl<number | null | undefined>(undefined),
			total_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_disbursements_period: new FormControl<number | null | undefined>(undefined),
			total_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made_period: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made_ytd: new FormControl<number | null | undefined>(undefined),
			total_loans_received_period: new FormControl<number | null | undefined>(undefined),
			total_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_receipts_period: new FormControl<number | null | undefined>(undefined),
			total_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_other_authorized_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_other_authorized_committee_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee_ytd: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeReportsHouseSenatePage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeReportsHouseSenate>;
	}
	export interface CommitteeReportsHouseSenatePageFormProperties {
	}
	export function CreateCommitteeReportsHouseSenatePageFormGroup() {
		return new FormGroup<CommitteeReportsHouseSenatePageFormProperties>({
		});

	}

	export interface CommitteeReportsIEOnly {
		beginning_image_number?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;
		committee_type?: string | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;
		csv_url?: string | null;
		cycle?: number | null;
		document_description?: string | null;
		end_image_number?: string | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		independent_contributions_period?: number | null;
		independent_expenditures_period?: number | null;

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended?: boolean | null;

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed?: string | null;
		pdf_url?: string | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;
		report_form?: string | null;
		report_type?: string | null;
		report_type_full?: string | null;
		report_year?: number | null;
	}
	export interface CommitteeReportsIEOnlyFormProperties {
		beginning_image_number: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,
		committee_type: FormControl<string | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		end_image_number: FormControl<string | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		independent_contributions_period: FormControl<number | null | undefined>,
		independent_expenditures_period: FormControl<number | null | undefined>,

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended: FormControl<boolean | null | undefined>,

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,
		report_form: FormControl<string | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_type_full: FormControl<string | null | undefined>,
		report_year: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeReportsIEOnlyFormGroup() {
		return new FormGroup<CommitteeReportsIEOnlyFormProperties>({
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			end_image_number: new FormControl<string | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			independent_contributions_period: new FormControl<number | null | undefined>(undefined),
			independent_expenditures_period: new FormControl<number | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			means_filed: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeReportsIEOnlyPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeReportsIEOnly>;
	}
	export interface CommitteeReportsIEOnlyPageFormProperties {
	}
	export function CreateCommitteeReportsIEOnlyPageFormGroup() {
		return new FormGroup<CommitteeReportsIEOnlyPageFormProperties>({
		});

	}

	export interface CommitteeReportsPacParty {
		all_loans_received_period?: number | null;
		all_loans_received_ytd?: number | null;
		allocated_federal_election_levin_share_period?: number | null;

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_chain?: Array<number>;
		amendment_indicator?: string | null;
		amendment_indicator_full?: string | null;
		beginning_image_number?: string | null;
		calendar_ytd?: number | null;
		cash_on_hand_beginning_calendar_ytd?: number | null;

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period?: number | null;
		cash_on_hand_close_ytd?: number | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		committee_type?: string | null;
		coordinated_expenditures_by_party_committee_period?: number | null;
		coordinated_expenditures_by_party_committee_ytd?: number | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;
		csv_url?: string | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle?: number | null;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;

		/** Debts owed to the committee */
		debts_owed_to_committee?: number | null;
		document_description?: string | null;
		end_image_number?: string | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		fed_candidate_committee_contribution_refunds_ytd?: number | null;
		fed_candidate_committee_contributions_period?: number | null;
		fed_candidate_committee_contributions_ytd?: number | null;
		fed_candidate_contribution_refunds_period?: number | null;
		file_number?: number | null;

		/**
		 * HTML link to the filing.
		 */
		html_url?: string | null;
		independent_expenditures_period?: number | null;
		independent_expenditures_ytd?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd?: number | null;

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended?: boolean | null;
		loan_repayments_made_period?: number | null;
		loan_repayments_made_ytd?: number | null;
		loan_repayments_received_period?: number | null;
		loan_repayments_received_ytd?: number | null;
		loans_made_period?: number | null;
		loans_made_ytd?: number | null;

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed?: string | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		most_recent_file_number?: number | null;
		net_contributions_period?: number | null;
		net_contributions_ytd?: number | null;
		net_operating_expenditures_period?: number | null;
		net_operating_expenditures_ytd?: number | null;
		non_allocated_fed_election_activity_period?: number | null;
		non_allocated_fed_election_activity_ytd?: number | null;
		nonfed_share_allocated_disbursements_period?: number | null;

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period?: number | null;

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd?: number | null;

		/** Other disbursements total for the reporting period */
		other_disbursements_period?: number | null;

		/** Other disbursements total for the year to date */
		other_disbursements_ytd?: number | null;
		other_fed_operating_expenditures_period?: number | null;
		other_fed_operating_expenditures_ytd?: number | null;
		other_fed_receipts_period?: number | null;
		other_fed_receipts_ytd?: number | null;

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period?: number | null;

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd?: number | null;
		pdf_url?: string | null;

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period?: number | null;

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd?: number | null;
		previous_file_number?: number | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period?: number | null;

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd?: number | null;

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period?: number | null;

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd?: number | null;

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period?: number | null;

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd?: number | null;
		report_form?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		shared_fed_activity_nonfed_ytd?: number | null;
		shared_fed_activity_period?: number | null;
		shared_fed_activity_ytd?: number | null;
		shared_fed_operating_expenditures_period?: number | null;
		shared_fed_operating_expenditures_ytd?: number | null;
		shared_nonfed_operating_expenditures_period?: number | null;
		shared_nonfed_operating_expenditures_ytd?: number | null;
		subtotal_summary_page_period?: number | null;
		subtotal_summary_ytd?: number | null;

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period?: number | null;

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd?: number | null;

		/** Contribution total for the reporting period */
		total_contributions_period?: number | null;

		/** Contribution total for the year to date */
		total_contributions_ytd?: number | null;

		/** Disbursements total for the reporting period */
		total_disbursements_period?: number | null;

		/** Disbursements total for the year to date */
		total_disbursements_ytd?: number | null;
		total_fed_disbursements_period?: number | null;
		total_fed_disbursements_ytd?: number | null;
		total_fed_election_activity_period?: number | null;
		total_fed_election_activity_ytd?: number | null;
		total_fed_operating_expenditures_period?: number | null;
		total_fed_operating_expenditures_ytd?: number | null;
		total_fed_receipts_period?: number | null;
		total_fed_receipts_ytd?: number | null;

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period?: number | null;

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd?: number | null;
		total_nonfed_transfers_period?: number | null;
		total_nonfed_transfers_ytd?: number | null;
		total_operating_expenditures_period?: number | null;
		total_operating_expenditures_ytd?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd?: number | null;
		transfers_from_affiliated_party_period?: number | null;
		transfers_from_affiliated_party_ytd?: number | null;
		transfers_from_nonfed_account_period?: number | null;
		transfers_from_nonfed_account_ytd?: number | null;
		transfers_from_nonfed_levin_period?: number | null;
		transfers_from_nonfed_levin_ytd?: number | null;
		transfers_to_affiliated_committee_period?: number | null;
		transfers_to_affilitated_committees_ytd?: number | null;
	}
	export interface CommitteeReportsPacPartyFormProperties {
		all_loans_received_period: FormControl<number | null | undefined>,
		all_loans_received_ytd: FormControl<number | null | undefined>,
		allocated_federal_election_levin_share_period: FormControl<number | null | undefined>,
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_full: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		calendar_ytd: FormControl<number | null | undefined>,
		cash_on_hand_beginning_calendar_ytd: FormControl<number | null | undefined>,

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,
		cash_on_hand_close_ytd: FormControl<number | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		committee_type: FormControl<string | null | undefined>,
		coordinated_expenditures_by_party_committee_period: FormControl<number | null | undefined>,
		coordinated_expenditures_by_party_committee_ytd: FormControl<number | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/** Debts owed to the committee */
		debts_owed_to_committee: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		end_image_number: FormControl<string | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		fed_candidate_committee_contribution_refunds_ytd: FormControl<number | null | undefined>,
		fed_candidate_committee_contributions_period: FormControl<number | null | undefined>,
		fed_candidate_committee_contributions_ytd: FormControl<number | null | undefined>,
		fed_candidate_contribution_refunds_period: FormControl<number | null | undefined>,
		file_number: FormControl<number | null | undefined>,

		/**
		 * HTML link to the filing.
		 */
		html_url: FormControl<string | null | undefined>,
		independent_expenditures_period: FormControl<number | null | undefined>,
		independent_expenditures_ytd: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd: FormControl<number | null | undefined>,

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended: FormControl<boolean | null | undefined>,
		loan_repayments_made_period: FormControl<number | null | undefined>,
		loan_repayments_made_ytd: FormControl<number | null | undefined>,
		loan_repayments_received_period: FormControl<number | null | undefined>,
		loan_repayments_received_ytd: FormControl<number | null | undefined>,
		loans_made_period: FormControl<number | null | undefined>,
		loans_made_ytd: FormControl<number | null | undefined>,

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed: FormControl<string | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_file_number: FormControl<number | null | undefined>,
		net_contributions_period: FormControl<number | null | undefined>,
		net_contributions_ytd: FormControl<number | null | undefined>,
		net_operating_expenditures_period: FormControl<number | null | undefined>,
		net_operating_expenditures_ytd: FormControl<number | null | undefined>,
		non_allocated_fed_election_activity_period: FormControl<number | null | undefined>,
		non_allocated_fed_election_activity_ytd: FormControl<number | null | undefined>,
		nonfed_share_allocated_disbursements_period: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Other disbursements total for the reporting period */
		other_disbursements_period: FormControl<number | null | undefined>,

		/** Other disbursements total for the year to date */
		other_disbursements_ytd: FormControl<number | null | undefined>,
		other_fed_operating_expenditures_period: FormControl<number | null | undefined>,
		other_fed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		other_fed_receipts_period: FormControl<number | null | undefined>,
		other_fed_receipts_ytd: FormControl<number | null | undefined>,

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		previous_file_number: FormControl<number | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd: FormControl<number | null | undefined>,

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd: FormControl<number | null | undefined>,

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		shared_fed_activity_nonfed_ytd: FormControl<number | null | undefined>,
		shared_fed_activity_period: FormControl<number | null | undefined>,
		shared_fed_activity_ytd: FormControl<number | null | undefined>,
		shared_fed_operating_expenditures_period: FormControl<number | null | undefined>,
		shared_fed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		shared_nonfed_operating_expenditures_period: FormControl<number | null | undefined>,
		shared_nonfed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		subtotal_summary_page_period: FormControl<number | null | undefined>,
		subtotal_summary_ytd: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd: FormControl<number | null | undefined>,

		/** Contribution total for the reporting period */
		total_contributions_period: FormControl<number | null | undefined>,

		/** Contribution total for the year to date */
		total_contributions_ytd: FormControl<number | null | undefined>,

		/** Disbursements total for the reporting period */
		total_disbursements_period: FormControl<number | null | undefined>,

		/** Disbursements total for the year to date */
		total_disbursements_ytd: FormControl<number | null | undefined>,
		total_fed_disbursements_period: FormControl<number | null | undefined>,
		total_fed_disbursements_ytd: FormControl<number | null | undefined>,
		total_fed_election_activity_period: FormControl<number | null | undefined>,
		total_fed_election_activity_ytd: FormControl<number | null | undefined>,
		total_fed_operating_expenditures_period: FormControl<number | null | undefined>,
		total_fed_operating_expenditures_ytd: FormControl<number | null | undefined>,
		total_fed_receipts_period: FormControl<number | null | undefined>,
		total_fed_receipts_ytd: FormControl<number | null | undefined>,

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd: FormControl<number | null | undefined>,
		total_nonfed_transfers_period: FormControl<number | null | undefined>,
		total_nonfed_transfers_ytd: FormControl<number | null | undefined>,
		total_operating_expenditures_period: FormControl<number | null | undefined>,
		total_operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd: FormControl<number | null | undefined>,
		transfers_from_affiliated_party_period: FormControl<number | null | undefined>,
		transfers_from_affiliated_party_ytd: FormControl<number | null | undefined>,
		transfers_from_nonfed_account_period: FormControl<number | null | undefined>,
		transfers_from_nonfed_account_ytd: FormControl<number | null | undefined>,
		transfers_from_nonfed_levin_period: FormControl<number | null | undefined>,
		transfers_from_nonfed_levin_ytd: FormControl<number | null | undefined>,
		transfers_to_affiliated_committee_period: FormControl<number | null | undefined>,
		transfers_to_affilitated_committees_ytd: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeReportsPacPartyFormGroup() {
		return new FormGroup<CommitteeReportsPacPartyFormProperties>({
			all_loans_received_period: new FormControl<number | null | undefined>(undefined),
			all_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			allocated_federal_election_levin_share_period: new FormControl<number | null | undefined>(undefined),
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_full: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			calendar_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_calendar_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_close_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			coordinated_expenditures_by_party_committee_period: new FormControl<number | null | undefined>(undefined),
			coordinated_expenditures_by_party_committee_ytd: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			end_image_number: new FormControl<string | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			fed_candidate_committee_contribution_refunds_ytd: new FormControl<number | null | undefined>(undefined),
			fed_candidate_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			fed_candidate_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			fed_candidate_contribution_refunds_period: new FormControl<number | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			independent_expenditures_period: new FormControl<number | null | undefined>(undefined),
			independent_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			loan_repayments_made_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made_ytd: new FormControl<number | null | undefined>(undefined),
			loan_repayments_received_period: new FormControl<number | null | undefined>(undefined),
			loan_repayments_received_ytd: new FormControl<number | null | undefined>(undefined),
			loans_made_period: new FormControl<number | null | undefined>(undefined),
			loans_made_ytd: new FormControl<number | null | undefined>(undefined),
			means_filed: new FormControl<string | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_file_number: new FormControl<number | null | undefined>(undefined),
			net_contributions_period: new FormControl<number | null | undefined>(undefined),
			net_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			non_allocated_fed_election_activity_period: new FormControl<number | null | undefined>(undefined),
			non_allocated_fed_election_activity_ytd: new FormControl<number | null | undefined>(undefined),
			nonfed_share_allocated_disbursements_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			other_disbursements_period: new FormControl<number | null | undefined>(undefined),
			other_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			other_fed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			other_fed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			other_fed_receipts_period: new FormControl<number | null | undefined>(undefined),
			other_fed_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			refunded_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_nonfed_ytd: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_period: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_ytd: new FormControl<number | null | undefined>(undefined),
			shared_fed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			shared_fed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			shared_nonfed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			shared_nonfed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			subtotal_summary_page_period: new FormControl<number | null | undefined>(undefined),
			subtotal_summary_ytd: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_ytd: new FormControl<number | null | undefined>(undefined),
			total_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_disbursements_period: new FormControl<number | null | undefined>(undefined),
			total_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_disbursements_period: new FormControl<number | null | undefined>(undefined),
			total_fed_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_election_activity_period: new FormControl<number | null | undefined>(undefined),
			total_fed_election_activity_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_fed_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_fed_receipts_period: new FormControl<number | null | undefined>(undefined),
			total_fed_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_nonfed_transfers_period: new FormControl<number | null | undefined>(undefined),
			total_nonfed_transfers_ytd: new FormControl<number | null | undefined>(undefined),
			total_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_receipts_period: new FormControl<number | null | undefined>(undefined),
			total_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_party_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_party_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_account_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_account_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_levin_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_levin_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_to_affiliated_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_to_affilitated_committees_ytd: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeReportsPacPartyPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeReportsPacParty>;
	}
	export interface CommitteeReportsPacPartyPageFormProperties {
	}
	export function CreateCommitteeReportsPacPartyPageFormGroup() {
		return new FormGroup<CommitteeReportsPacPartyPageFormProperties>({
		});

	}

	export interface CommitteeReportsPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeReports>;
	}
	export interface CommitteeReportsPageFormProperties {
	}
	export function CreateCommitteeReportsPageFormGroup() {
		return new FormGroup<CommitteeReportsPageFormProperties>({
		});

	}

	export interface CommitteeReportsPresidential {

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_chain?: Array<number>;
		amendment_indicator?: string | null;
		amendment_indicator_full?: string | null;
		beginning_image_number?: string | null;
		candidate_contribution_period?: number | null;
		candidate_contribution_ytd?: number | null;

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period?: number | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		committee_type?: string | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;
		csv_url?: string | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle?: number | null;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;

		/** Debts owed to the committee */
		debts_owed_to_committee?: number | null;
		document_description?: string | null;
		end_image_number?: string | null;
		exempt_legal_accounting_disbursement_period?: number | null;
		exempt_legal_accounting_disbursement_ytd?: number | null;
		expenditure_subject_to_limits?: number | null;
		fec_file_id?: string | null;
		fec_url?: string | null;
		federal_funds_period?: number | null;
		federal_funds_ytd?: number | null;
		file_number?: number | null;
		fundraising_disbursements_period?: number | null;
		fundraising_disbursements_ytd?: number | null;

		/**
		 * HTML link to the filing.
		 */
		html_url?: string | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd?: number | null;

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended?: boolean | null;
		items_on_hand_liquidated?: number | null;
		loans_received_from_candidate_period?: number | null;
		loans_received_from_candidate_ytd?: number | null;

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed?: string | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		most_recent_file_number?: number | null;
		net_contributions_cycle_to_date?: number | null;
		net_operating_expenditures_cycle_to_date?: number | null;
		offsets_to_fundraising_expenditures_period?: number | null;
		offsets_to_fundraising_expenditures_ytd?: number | null;
		offsets_to_legal_accounting_period?: number | null;
		offsets_to_legal_accounting_ytd?: number | null;

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period?: number | null;

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd?: number | null;
		operating_expenditures_period?: number | null;
		operating_expenditures_ytd?: number | null;

		/** Other disbursements total for the reporting period */
		other_disbursements_period?: number | null;

		/** Other disbursements total for the year to date */
		other_disbursements_ytd?: number | null;
		other_loans_received_period?: number | null;
		other_loans_received_ytd?: number | null;

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period?: number | null;

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd?: number | null;
		other_receipts_period?: number | null;
		other_receipts_ytd?: number | null;
		pdf_url?: string | null;

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period?: number | null;

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd?: number | null;
		previous_file_number?: number | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period?: number | null;

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd?: number | null;

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period?: number | null;

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd?: number | null;

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period?: number | null;

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd?: number | null;
		repayments_loans_made_by_candidate_period?: number | null;
		repayments_loans_made_candidate_ytd?: number | null;
		repayments_other_loans_period?: number | null;
		repayments_other_loans_ytd?: number | null;
		report_form?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		subtotal_summary_period?: number | null;

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period?: number | null;

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd?: number | null;

		/** Contribution total for the reporting period */
		total_contributions_period?: number | null;

		/** Contribution total for the year to date */
		total_contributions_ytd?: number | null;

		/** Disbursements total for the reporting period */
		total_disbursements_period?: number | null;

		/** Disbursements total for the year to date */
		total_disbursements_ytd?: number | null;

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period?: number | null;

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd?: number | null;
		total_loan_repayments_made_period?: number | null;
		total_loan_repayments_made_ytd?: number | null;
		total_loans_received_period?: number | null;
		total_loans_received_ytd?: number | null;
		total_offsets_to_operating_expenditures_period?: number | null;
		total_offsets_to_operating_expenditures_ytd?: number | null;
		total_period?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period?: number | null;

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd?: number | null;
		total_ytd?: number | null;
		transfers_from_affiliated_committee_period?: number | null;
		transfers_from_affiliated_committee_ytd?: number | null;
		transfers_to_other_authorized_committee_period?: number | null;
		transfers_to_other_authorized_committee_ytd?: number | null;
	}
	export interface CommitteeReportsPresidentialFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_full: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		candidate_contribution_period: FormControl<number | null | undefined>,
		candidate_contribution_ytd: FormControl<number | null | undefined>,

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		committee_type: FormControl<string | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/** Debts owed to the committee */
		debts_owed_to_committee: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		end_image_number: FormControl<string | null | undefined>,
		exempt_legal_accounting_disbursement_period: FormControl<number | null | undefined>,
		exempt_legal_accounting_disbursement_ytd: FormControl<number | null | undefined>,
		expenditure_subject_to_limits: FormControl<number | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,
		federal_funds_period: FormControl<number | null | undefined>,
		federal_funds_ytd: FormControl<number | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		fundraising_disbursements_period: FormControl<number | null | undefined>,
		fundraising_disbursements_ytd: FormControl<number | null | undefined>,

		/**
		 * HTML link to the filing.
		 */
		html_url: FormControl<string | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period */
		individual_itemized_contributions_period: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date */
		individual_itemized_contributions_ytd: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period */
		individual_unitemized_contributions_period: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date */
		individual_unitemized_contributions_ytd: FormControl<number | null | undefined>,

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended: FormControl<boolean | null | undefined>,
		items_on_hand_liquidated: FormControl<number | null | undefined>,
		loans_received_from_candidate_period: FormControl<number | null | undefined>,
		loans_received_from_candidate_ytd: FormControl<number | null | undefined>,

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed: FormControl<string | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_file_number: FormControl<number | null | undefined>,
		net_contributions_cycle_to_date: FormControl<number | null | undefined>,
		net_operating_expenditures_cycle_to_date: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures_period: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures_ytd: FormControl<number | null | undefined>,
		offsets_to_legal_accounting_period: FormControl<number | null | undefined>,
		offsets_to_legal_accounting_ytd: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the reporting period */
		offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures total for the year to date */
		offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,
		operating_expenditures_period: FormControl<number | null | undefined>,
		operating_expenditures_ytd: FormControl<number | null | undefined>,

		/** Other disbursements total for the reporting period */
		other_disbursements_period: FormControl<number | null | undefined>,

		/** Other disbursements total for the year to date */
		other_disbursements_ytd: FormControl<number | null | undefined>,
		other_loans_received_period: FormControl<number | null | undefined>,
		other_loans_received_ytd: FormControl<number | null | undefined>,

		/** Other committees contributions total for the reporting period */
		other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committees contributions total for the year to date */
		other_political_committee_contributions_ytd: FormControl<number | null | undefined>,
		other_receipts_period: FormControl<number | null | undefined>,
		other_receipts_ytd: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Party committees contributions total for the reporting period */
		political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Party committees contributions total for the year to date */
		political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		previous_file_number: FormControl<number | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,

		/** Individual refunds total for the reporting period */
		refunded_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual refunds total for the year to date */
		refunded_individual_contributions_ytd: FormControl<number | null | undefined>,

		/** Other committee refunds total for the reporting period */
		refunded_other_political_committee_contributions_period: FormControl<number | null | undefined>,

		/** Other committee refunds total for the year to date */
		refunded_other_political_committee_contributions_ytd: FormControl<number | null | undefined>,

		/** Political party refunds total for the reporting period */
		refunded_political_party_committee_contributions_period: FormControl<number | null | undefined>,

		/** Political party refunds total for the year to date */
		refunded_political_party_committee_contributions_ytd: FormControl<number | null | undefined>,
		repayments_loans_made_by_candidate_period: FormControl<number | null | undefined>,
		repayments_loans_made_candidate_ytd: FormControl<number | null | undefined>,
		repayments_other_loans_period: FormControl<number | null | undefined>,
		repayments_other_loans_ytd: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		subtotal_summary_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the reporting period */
		total_contribution_refunds_period: FormControl<number | null | undefined>,

		/** Total contribution refunds total for the year to date */
		total_contribution_refunds_ytd: FormControl<number | null | undefined>,

		/** Contribution total for the reporting period */
		total_contributions_period: FormControl<number | null | undefined>,

		/** Contribution total for the year to date */
		total_contributions_ytd: FormControl<number | null | undefined>,

		/** Disbursements total for the reporting period */
		total_disbursements_period: FormControl<number | null | undefined>,

		/** Disbursements total for the year to date */
		total_disbursements_ytd: FormControl<number | null | undefined>,

		/** Individual contributions total for the reporting period */
		total_individual_contributions_period: FormControl<number | null | undefined>,

		/** Individual contributions total for the year to date */
		total_individual_contributions_ytd: FormControl<number | null | undefined>,
		total_loan_repayments_made_period: FormControl<number | null | undefined>,
		total_loan_repayments_made_ytd: FormControl<number | null | undefined>,
		total_loans_received_period: FormControl<number | null | undefined>,
		total_loans_received_ytd: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures_period: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures_ytd: FormControl<number | null | undefined>,
		total_period: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the reporting period */
		total_receipts_period: FormControl<number | null | undefined>,

		/** Anything of value (money, goods, services or property) received by a political committee total for the year to date */
		total_receipts_ytd: FormControl<number | null | undefined>,
		total_ytd: FormControl<number | null | undefined>,
		transfers_from_affiliated_committee_period: FormControl<number | null | undefined>,
		transfers_from_affiliated_committee_ytd: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee_period: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee_ytd: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeReportsPresidentialFormGroup() {
		return new FormGroup<CommitteeReportsPresidentialFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_full: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			candidate_contribution_period: new FormControl<number | null | undefined>(undefined),
			candidate_contribution_ytd: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			end_image_number: new FormControl<string | null | undefined>(undefined),
			exempt_legal_accounting_disbursement_period: new FormControl<number | null | undefined>(undefined),
			exempt_legal_accounting_disbursement_ytd: new FormControl<number | null | undefined>(undefined),
			expenditure_subject_to_limits: new FormControl<number | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			federal_funds_period: new FormControl<number | null | undefined>(undefined),
			federal_funds_ytd: new FormControl<number | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements_period: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			individual_itemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_period: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			items_on_hand_liquidated: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate_period: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate_ytd: new FormControl<number | null | undefined>(undefined),
			means_filed: new FormControl<string | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_file_number: new FormControl<number | null | undefined>(undefined),
			net_contributions_cycle_to_date: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures_cycle_to_date: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting_ytd: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			other_disbursements_period: new FormControl<number | null | undefined>(undefined),
			other_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			other_loans_received_period: new FormControl<number | null | undefined>(undefined),
			other_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			other_receipts_period: new FormControl<number | null | undefined>(undefined),
			other_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			refunded_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_period: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_by_candidate_period: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_candidate_ytd: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans_period: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans_ytd: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			subtotal_summary_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_period: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds_ytd: new FormControl<number | null | undefined>(undefined),
			total_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_disbursements_period: new FormControl<number | null | undefined>(undefined),
			total_disbursements_ytd: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_period: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions_ytd: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made_period: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made_ytd: new FormControl<number | null | undefined>(undefined),
			total_loans_received_period: new FormControl<number | null | undefined>(undefined),
			total_loans_received_ytd: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures_period: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures_ytd: new FormControl<number | null | undefined>(undefined),
			total_period: new FormControl<number | null | undefined>(undefined),
			total_receipts_period: new FormControl<number | null | undefined>(undefined),
			total_receipts_ytd: new FormControl<number | null | undefined>(undefined),
			total_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_committee_ytd: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee_period: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee_ytd: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeReportsPresidentialPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeReportsPresidential>;
	}
	export interface CommitteeReportsPresidentialPageFormProperties {
	}
	export function CreateCommitteeReportsPresidentialPageFormGroup() {
		return new FormGroup<CommitteeReportsPresidentialPageFormProperties>({
		});

	}

	export interface CommitteeSearch {
		id?: string | null;
		is_active?: boolean | null;
		name?: string | null;
	}
	export interface CommitteeSearchFormProperties {
		id: FormControl<string | null | undefined>,
		is_active: FormControl<boolean | null | undefined>,
		name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeSearchFormGroup() {
		return new FormGroup<CommitteeSearchFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			is_active: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommitteeSearchList {
		results?: Array<CommitteeSearch>;
	}
	export interface CommitteeSearchListFormProperties {
	}
	export function CreateCommitteeSearchListFormGroup() {
		return new FormGroup<CommitteeSearchListFormProperties>({
		});

	}

	export interface CommitteeTotals {
		all_loans_received?: number | null;
		all_other_loans?: number | null;
		allocated_federal_election_levin_share?: number | null;
		candidate_contribution?: number | null;
		cash_on_hand_beginning_period?: number | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full?: string | null;
		contribution_refunds?: number | null;

		/** Contribution */
		contributions?: number | null;
		contributions_ie_and_party_expenditures_made_percent?: number | null;
		convention_exp?: number | null;
		coordinated_expenditures_by_party_committee?: number | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Disbursements */
		disbursements?: number | null;
		exempt_legal_accounting_disbursement?: number | null;
		exp_prior_years_subject_limits?: number | null;
		exp_subject_limits?: number | null;
		fed_candidate_committee_contributions?: number | null;
		fed_candidate_contribution_refunds?: number | null;
		fed_disbursements?: number | null;
		fed_election_activity?: number | null;
		fed_operating_expenditures?: number | null;
		fed_receipts?: number | null;
		federal_funds?: number | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;
		fundraising_disbursements?: number | null;
		independent_expenditures?: number | null;
		individual_contributions?: number | null;
		individual_contributions_percent?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions?: number | null;
		itemized_convention_exp?: number | null;
		itemized_other_disb?: number | null;
		itemized_other_income?: number | null;
		itemized_other_refunds?: number | null;
		itemized_refunds_relating_convention_exp?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		last_debts_owed_by_committee?: number | null;
		last_debts_owed_to_committee?: number | null;
		last_report_type_full?: string | null;
		last_report_year?: number | null;
		loan_repayments?: number | null;
		loan_repayments_candidate_loans?: number | null;
		loan_repayments_made?: number | null;
		loan_repayments_other_loans?: number | null;
		loan_repayments_received?: number | null;
		loans?: number | null;
		loans_and_loan_repayments_made?: number | null;
		loans_and_loan_repayments_received?: number | null;
		loans_made?: number | null;
		loans_made_by_candidate?: number | null;
		loans_received?: number | null;
		loans_received_from_candidate?: number | null;
		net_contributions?: number | null;
		net_operating_expenditures?: number | null;
		non_allocated_fed_election_activity?: number | null;
		offsets_to_fundraising_expenditures?: number | null;
		offsets_to_legal_accounting?: number | null;
		offsets_to_operating_expenditures?: number | null;
		operating_expenditures?: number | null;
		operating_expenditures_percent?: number | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;
		other_disbursements?: number | null;
		other_fed_operating_expenditures?: number | null;
		other_fed_receipts?: number | null;
		other_loans_received?: number | null;
		other_political_committee_contributions?: number | null;
		other_receipts?: number | null;
		other_refunds?: number | null;
		party_and_other_committee_contributions_percent?: number | null;

		/** Party affiliated with a candidate or committee */
		party_full?: string | null;
		pdf_url?: string | null;
		political_party_committee_contributions?: number | null;
		receipts?: number | null;
		refunded_individual_contributions?: number | null;
		refunded_other_political_committee_contributions?: number | null;
		refunded_political_party_committee_contributions?: number | null;
		refunds_relating_convention_exp?: number | null;
		repayments_loans_made_by_candidate?: number | null;
		repayments_other_loans?: number | null;
		report_form?: string | null;
		shared_fed_activity?: number | null;
		shared_fed_activity_nonfed?: number | null;
		shared_fed_operating_expenditures?: number | null;
		shared_nonfed_operating_expenditures?: number | null;
		total_exp_subject_limits?: number | null;
		total_independent_contributions?: number | null;
		total_independent_expenditures?: number | null;
		total_offsets_to_operating_expenditures?: number | null;
		total_transfers?: number | null;
		transaction_coverage_date?: Date | null;
		transfers_from_affiliated_committee?: number | null;
		transfers_from_affiliated_party?: number | null;
		transfers_from_nonfed_account?: number | null;
		transfers_from_nonfed_levin?: number | null;
		transfers_from_other_authorized_committee?: number | null;
		transfers_to_affiliated_committee?: number | null;
		transfers_to_other_authorized_committee?: number | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;
		unitemized_convention_exp?: number | null;
		unitemized_other_disb?: number | null;
		unitemized_other_income?: number | null;
		unitemized_other_refunds?: number | null;
		unitemized_refunds_relating_convention_exp?: number | null;
	}
	export interface CommitteeTotalsFormProperties {
		all_loans_received: FormControl<number | null | undefined>,
		all_other_loans: FormControl<number | null | undefined>,
		allocated_federal_election_levin_share: FormControl<number | null | undefined>,
		candidate_contribution: FormControl<number | null | undefined>,
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full: FormControl<string | null | undefined>,
		contribution_refunds: FormControl<number | null | undefined>,

		/** Contribution */
		contributions: FormControl<number | null | undefined>,
		contributions_ie_and_party_expenditures_made_percent: FormControl<number | null | undefined>,
		convention_exp: FormControl<number | null | undefined>,
		coordinated_expenditures_by_party_committee: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Disbursements */
		disbursements: FormControl<number | null | undefined>,
		exempt_legal_accounting_disbursement: FormControl<number | null | undefined>,
		exp_prior_years_subject_limits: FormControl<number | null | undefined>,
		exp_subject_limits: FormControl<number | null | undefined>,
		fed_candidate_committee_contributions: FormControl<number | null | undefined>,
		fed_candidate_contribution_refunds: FormControl<number | null | undefined>,
		fed_disbursements: FormControl<number | null | undefined>,
		fed_election_activity: FormControl<number | null | undefined>,
		fed_operating_expenditures: FormControl<number | null | undefined>,
		fed_receipts: FormControl<number | null | undefined>,
		federal_funds: FormControl<number | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,
		fundraising_disbursements: FormControl<number | null | undefined>,
		independent_expenditures: FormControl<number | null | undefined>,
		individual_contributions: FormControl<number | null | undefined>,
		individual_contributions_percent: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions: FormControl<number | null | undefined>,
		itemized_convention_exp: FormControl<number | null | undefined>,
		itemized_other_disb: FormControl<number | null | undefined>,
		itemized_other_income: FormControl<number | null | undefined>,
		itemized_other_refunds: FormControl<number | null | undefined>,
		itemized_refunds_relating_convention_exp: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		last_debts_owed_by_committee: FormControl<number | null | undefined>,
		last_debts_owed_to_committee: FormControl<number | null | undefined>,
		last_report_type_full: FormControl<string | null | undefined>,
		last_report_year: FormControl<number | null | undefined>,
		loan_repayments: FormControl<number | null | undefined>,
		loan_repayments_candidate_loans: FormControl<number | null | undefined>,
		loan_repayments_made: FormControl<number | null | undefined>,
		loan_repayments_other_loans: FormControl<number | null | undefined>,
		loan_repayments_received: FormControl<number | null | undefined>,
		loans: FormControl<number | null | undefined>,
		loans_and_loan_repayments_made: FormControl<number | null | undefined>,
		loans_and_loan_repayments_received: FormControl<number | null | undefined>,
		loans_made: FormControl<number | null | undefined>,
		loans_made_by_candidate: FormControl<number | null | undefined>,
		loans_received: FormControl<number | null | undefined>,
		loans_received_from_candidate: FormControl<number | null | undefined>,
		net_contributions: FormControl<number | null | undefined>,
		net_operating_expenditures: FormControl<number | null | undefined>,
		non_allocated_fed_election_activity: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures: FormControl<number | null | undefined>,
		offsets_to_legal_accounting: FormControl<number | null | undefined>,
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures_percent: FormControl<number | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,
		other_disbursements: FormControl<number | null | undefined>,
		other_fed_operating_expenditures: FormControl<number | null | undefined>,
		other_fed_receipts: FormControl<number | null | undefined>,
		other_loans_received: FormControl<number | null | undefined>,
		other_political_committee_contributions: FormControl<number | null | undefined>,
		other_receipts: FormControl<number | null | undefined>,
		other_refunds: FormControl<number | null | undefined>,
		party_and_other_committee_contributions_percent: FormControl<number | null | undefined>,

		/** Party affiliated with a candidate or committee */
		party_full: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		political_party_committee_contributions: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
		refunded_individual_contributions: FormControl<number | null | undefined>,
		refunded_other_political_committee_contributions: FormControl<number | null | undefined>,
		refunded_political_party_committee_contributions: FormControl<number | null | undefined>,
		refunds_relating_convention_exp: FormControl<number | null | undefined>,
		repayments_loans_made_by_candidate: FormControl<number | null | undefined>,
		repayments_other_loans: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,
		shared_fed_activity: FormControl<number | null | undefined>,
		shared_fed_activity_nonfed: FormControl<number | null | undefined>,
		shared_fed_operating_expenditures: FormControl<number | null | undefined>,
		shared_nonfed_operating_expenditures: FormControl<number | null | undefined>,
		total_exp_subject_limits: FormControl<number | null | undefined>,
		total_independent_contributions: FormControl<number | null | undefined>,
		total_independent_expenditures: FormControl<number | null | undefined>,
		total_offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		total_transfers: FormControl<number | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
		transfers_from_affiliated_committee: FormControl<number | null | undefined>,
		transfers_from_affiliated_party: FormControl<number | null | undefined>,
		transfers_from_nonfed_account: FormControl<number | null | undefined>,
		transfers_from_nonfed_levin: FormControl<number | null | undefined>,
		transfers_from_other_authorized_committee: FormControl<number | null | undefined>,
		transfers_to_affiliated_committee: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee: FormControl<number | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,
		unitemized_convention_exp: FormControl<number | null | undefined>,
		unitemized_other_disb: FormControl<number | null | undefined>,
		unitemized_other_income: FormControl<number | null | undefined>,
		unitemized_other_refunds: FormControl<number | null | undefined>,
		unitemized_refunds_relating_convention_exp: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeTotalsFormGroup() {
		return new FormGroup<CommitteeTotalsFormProperties>({
			all_loans_received: new FormControl<number | null | undefined>(undefined),
			all_other_loans: new FormControl<number | null | undefined>(undefined),
			allocated_federal_election_levin_share: new FormControl<number | null | undefined>(undefined),
			candidate_contribution: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			committee_designation: new FormControl<string | null | undefined>(undefined),
			committee_designation_full: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			committee_type: new FormControl<string | null | undefined>(undefined),
			committee_type_full: new FormControl<string | null | undefined>(undefined),
			contribution_refunds: new FormControl<number | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined),
			contributions_ie_and_party_expenditures_made_percent: new FormControl<number | null | undefined>(undefined),
			convention_exp: new FormControl<number | null | undefined>(undefined),
			coordinated_expenditures_by_party_committee: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			exempt_legal_accounting_disbursement: new FormControl<number | null | undefined>(undefined),
			exp_prior_years_subject_limits: new FormControl<number | null | undefined>(undefined),
			exp_subject_limits: new FormControl<number | null | undefined>(undefined),
			fed_candidate_committee_contributions: new FormControl<number | null | undefined>(undefined),
			fed_candidate_contribution_refunds: new FormControl<number | null | undefined>(undefined),
			fed_disbursements: new FormControl<number | null | undefined>(undefined),
			fed_election_activity: new FormControl<number | null | undefined>(undefined),
			fed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			fed_receipts: new FormControl<number | null | undefined>(undefined),
			federal_funds: new FormControl<number | null | undefined>(undefined),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			filing_frequency_full: new FormControl<string | null | undefined>(undefined),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			fundraising_disbursements: new FormControl<number | null | undefined>(undefined),
			independent_expenditures: new FormControl<number | null | undefined>(undefined),
			individual_contributions: new FormControl<number | null | undefined>(undefined),
			individual_contributions_percent: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions: new FormControl<number | null | undefined>(undefined),
			itemized_convention_exp: new FormControl<number | null | undefined>(undefined),
			itemized_other_disb: new FormControl<number | null | undefined>(undefined),
			itemized_other_income: new FormControl<number | null | undefined>(undefined),
			itemized_other_refunds: new FormControl<number | null | undefined>(undefined),
			itemized_refunds_relating_convention_exp: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			last_report_type_full: new FormControl<string | null | undefined>(undefined),
			last_report_year: new FormControl<number | null | undefined>(undefined),
			loan_repayments: new FormControl<number | null | undefined>(undefined),
			loan_repayments_candidate_loans: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			loan_repayments_received: new FormControl<number | null | undefined>(undefined),
			loans: new FormControl<number | null | undefined>(undefined),
			loans_and_loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			loans_and_loan_repayments_received: new FormControl<number | null | undefined>(undefined),
			loans_made: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			loans_received: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate: new FormControl<number | null | undefined>(undefined),
			net_contributions: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			non_allocated_fed_election_activity: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_percent: new FormControl<number | null | undefined>(undefined),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			other_fed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			other_fed_receipts: new FormControl<number | null | undefined>(undefined),
			other_loans_received: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			other_receipts: new FormControl<number | null | undefined>(undefined),
			other_refunds: new FormControl<number | null | undefined>(undefined),
			party_and_other_committee_contributions_percent: new FormControl<number | null | undefined>(undefined),
			party_full: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunds_relating_convention_exp: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			shared_fed_activity: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_nonfed: new FormControl<number | null | undefined>(undefined),
			shared_fed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			shared_nonfed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			total_exp_subject_limits: new FormControl<number | null | undefined>(undefined),
			total_independent_contributions: new FormControl<number | null | undefined>(undefined),
			total_independent_expenditures: new FormControl<number | null | undefined>(undefined),
			total_offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			total_transfers: new FormControl<number | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
			transfers_from_affiliated_committee: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_party: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_account: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_levin: new FormControl<number | null | undefined>(undefined),
			transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			transfers_to_affiliated_committee: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			unitemized_convention_exp: new FormControl<number | null | undefined>(undefined),
			unitemized_other_disb: new FormControl<number | null | undefined>(undefined),
			unitemized_other_income: new FormControl<number | null | undefined>(undefined),
			unitemized_other_refunds: new FormControl<number | null | undefined>(undefined),
			unitemized_refunds_relating_convention_exp: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeTotalsHouseSenate {
		all_other_loans?: number | null;
		candidate_contribution?: number | null;
		cash_on_hand_beginning_period?: number | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full?: string | null;
		contribution_refunds?: number | null;

		/** Contribution */
		contributions?: number | null;
		contributions_ie_and_party_expenditures_made_percent?: number | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Disbursements */
		disbursements?: number | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;
		individual_contributions?: number | null;
		individual_contributions_percent?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		last_debts_owed_by_committee?: number | null;
		last_debts_owed_to_committee?: number | null;
		last_report_type_full?: string | null;
		last_report_year?: number | null;
		loan_repayments?: number | null;
		loan_repayments_candidate_loans?: number | null;
		loan_repayments_other_loans?: number | null;
		loans?: number | null;
		loans_made_by_candidate?: number | null;
		net_contributions?: number | null;
		net_operating_expenditures?: number | null;
		offsets_to_operating_expenditures?: number | null;
		operating_expenditures?: number | null;
		operating_expenditures_percent?: number | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;
		other_disbursements?: number | null;
		other_political_committee_contributions?: number | null;
		other_receipts?: number | null;
		party_and_other_committee_contributions_percent?: number | null;

		/** Party affiliated with a candidate or committee */
		party_full?: string | null;
		pdf_url?: string | null;
		political_party_committee_contributions?: number | null;
		receipts?: number | null;
		refunded_individual_contributions?: number | null;
		refunded_other_political_committee_contributions?: number | null;
		refunded_political_party_committee_contributions?: number | null;
		report_form?: string | null;
		transaction_coverage_date?: Date | null;
		transfers_from_other_authorized_committee?: number | null;
		transfers_to_other_authorized_committee?: number | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;
	}
	export interface CommitteeTotalsHouseSenateFormProperties {
		all_other_loans: FormControl<number | null | undefined>,
		candidate_contribution: FormControl<number | null | undefined>,
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full: FormControl<string | null | undefined>,
		contribution_refunds: FormControl<number | null | undefined>,

		/** Contribution */
		contributions: FormControl<number | null | undefined>,
		contributions_ie_and_party_expenditures_made_percent: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Disbursements */
		disbursements: FormControl<number | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,
		individual_contributions: FormControl<number | null | undefined>,
		individual_contributions_percent: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		last_debts_owed_by_committee: FormControl<number | null | undefined>,
		last_debts_owed_to_committee: FormControl<number | null | undefined>,
		last_report_type_full: FormControl<string | null | undefined>,
		last_report_year: FormControl<number | null | undefined>,
		loan_repayments: FormControl<number | null | undefined>,
		loan_repayments_candidate_loans: FormControl<number | null | undefined>,
		loan_repayments_other_loans: FormControl<number | null | undefined>,
		loans: FormControl<number | null | undefined>,
		loans_made_by_candidate: FormControl<number | null | undefined>,
		net_contributions: FormControl<number | null | undefined>,
		net_operating_expenditures: FormControl<number | null | undefined>,
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures_percent: FormControl<number | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,
		other_disbursements: FormControl<number | null | undefined>,
		other_political_committee_contributions: FormControl<number | null | undefined>,
		other_receipts: FormControl<number | null | undefined>,
		party_and_other_committee_contributions_percent: FormControl<number | null | undefined>,

		/** Party affiliated with a candidate or committee */
		party_full: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		political_party_committee_contributions: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
		refunded_individual_contributions: FormControl<number | null | undefined>,
		refunded_other_political_committee_contributions: FormControl<number | null | undefined>,
		refunded_political_party_committee_contributions: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
		transfers_from_other_authorized_committee: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee: FormControl<number | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeTotalsHouseSenateFormGroup() {
		return new FormGroup<CommitteeTotalsHouseSenateFormProperties>({
			all_other_loans: new FormControl<number | null | undefined>(undefined),
			candidate_contribution: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			committee_designation: new FormControl<string | null | undefined>(undefined),
			committee_designation_full: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			committee_type: new FormControl<string | null | undefined>(undefined),
			committee_type_full: new FormControl<string | null | undefined>(undefined),
			contribution_refunds: new FormControl<number | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined),
			contributions_ie_and_party_expenditures_made_percent: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			filing_frequency_full: new FormControl<string | null | undefined>(undefined),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			individual_contributions: new FormControl<number | null | undefined>(undefined),
			individual_contributions_percent: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			last_report_type_full: new FormControl<string | null | undefined>(undefined),
			last_report_year: new FormControl<number | null | undefined>(undefined),
			loan_repayments: new FormControl<number | null | undefined>(undefined),
			loan_repayments_candidate_loans: new FormControl<number | null | undefined>(undefined),
			loan_repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			loans: new FormControl<number | null | undefined>(undefined),
			loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			net_contributions: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_percent: new FormControl<number | null | undefined>(undefined),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			other_receipts: new FormControl<number | null | undefined>(undefined),
			party_and_other_committee_contributions_percent: new FormControl<number | null | undefined>(undefined),
			party_full: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
			transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeTotalsHouseSenatePage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeTotalsHouseSenate>;
	}
	export interface CommitteeTotalsHouseSenatePageFormProperties {
	}
	export function CreateCommitteeTotalsHouseSenatePageFormGroup() {
		return new FormGroup<CommitteeTotalsHouseSenatePageFormProperties>({
		});

	}

	export interface CommitteeTotalsIEOnly {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state?: string | null;
		contributions_ie_and_party_expenditures_made_percent?: number | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle?: number | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full?: string | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;
		individual_contributions_percent?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		operating_expenditures_percent?: number | null;
		party_and_other_committee_contributions_percent?: number | null;
		pdf_url?: string | null;
		report_form?: string | null;
		total_independent_contributions?: number | null;
		total_independent_expenditures?: number | null;
		transaction_coverage_date?: Date | null;
	}
	export interface CommitteeTotalsIEOnlyFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state: FormControl<string | null | undefined>,
		contributions_ie_and_party_expenditures_made_percent: FormControl<number | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,
		individual_contributions_percent: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		operating_expenditures_percent: FormControl<number | null | undefined>,
		party_and_other_committee_contributions_percent: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		report_form: FormControl<string | null | undefined>,
		total_independent_contributions: FormControl<number | null | undefined>,
		total_independent_expenditures: FormControl<number | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
	}
	export function CreateCommitteeTotalsIEOnlyFormGroup() {
		return new FormGroup<CommitteeTotalsIEOnlyFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			contributions_ie_and_party_expenditures_made_percent: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			filing_frequency_full: new FormControl<string | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			individual_contributions_percent: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_percent: new FormControl<number | null | undefined>(undefined),
			party_and_other_committee_contributions_percent: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			total_independent_contributions: new FormControl<number | null | undefined>(undefined),
			total_independent_expenditures: new FormControl<number | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface CommitteeTotalsIEOnlyPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeTotalsIEOnly>;
	}
	export interface CommitteeTotalsIEOnlyPageFormProperties {
	}
	export function CreateCommitteeTotalsIEOnlyPageFormGroup() {
		return new FormGroup<CommitteeTotalsIEOnlyPageFormProperties>({
		});

	}

	export interface CommitteeTotalsPacParty {
		all_loans_received?: number | null;
		allocated_federal_election_levin_share?: number | null;
		cash_on_hand_beginning_period?: number | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full?: string | null;
		contribution_refunds?: number | null;

		/** Contribution */
		contributions?: number | null;
		contributions_ie_and_party_expenditures_made_percent?: number | null;
		convention_exp?: number | null;
		coordinated_expenditures_by_party_committee?: number | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Disbursements */
		disbursements?: number | null;
		exp_prior_years_subject_limits?: number | null;
		exp_subject_limits?: number | null;
		fed_candidate_committee_contributions?: number | null;
		fed_candidate_contribution_refunds?: number | null;
		fed_disbursements?: number | null;
		fed_election_activity?: number | null;
		fed_operating_expenditures?: number | null;
		fed_receipts?: number | null;
		federal_funds?: number | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;
		independent_expenditures?: number | null;
		individual_contributions?: number | null;
		individual_contributions_percent?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions?: number | null;
		itemized_convention_exp?: number | null;
		itemized_other_disb?: number | null;
		itemized_other_income?: number | null;
		itemized_other_refunds?: number | null;
		itemized_refunds_relating_convention_exp?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		last_debts_owed_by_committee?: number | null;
		last_debts_owed_to_committee?: number | null;
		last_report_type_full?: string | null;
		last_report_year?: number | null;
		loan_repayments_made?: number | null;
		loan_repayments_received?: number | null;
		loans_and_loan_repayments_made?: number | null;
		loans_and_loan_repayments_received?: number | null;
		loans_made?: number | null;
		net_contributions?: number | null;
		net_operating_expenditures?: number | null;
		non_allocated_fed_election_activity?: number | null;
		offsets_to_operating_expenditures?: number | null;
		operating_expenditures?: number | null;
		operating_expenditures_percent?: number | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;
		other_disbursements?: number | null;
		other_fed_operating_expenditures?: number | null;
		other_fed_receipts?: number | null;
		other_political_committee_contributions?: number | null;
		other_refunds?: number | null;
		party_and_other_committee_contributions_percent?: number | null;

		/** Party affiliated with a candidate or committee */
		party_full?: string | null;
		pdf_url?: string | null;
		political_party_committee_contributions?: number | null;
		receipts?: number | null;
		refunded_individual_contributions?: number | null;
		refunded_other_political_committee_contributions?: number | null;
		refunded_political_party_committee_contributions?: number | null;
		refunds_relating_convention_exp?: number | null;
		report_form?: string | null;
		shared_fed_activity?: number | null;
		shared_fed_activity_nonfed?: number | null;
		shared_fed_operating_expenditures?: number | null;
		shared_nonfed_operating_expenditures?: number | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		 */
		sponsor_candidate_ids?: Array<string>;
		CommitteeTotalsPacPartySponsor_candidate_list?: Array<CommitteeTotalsPacPartySponsor_candidate_list>;
		total_exp_subject_limits?: number | null;
		total_transfers?: number | null;
		transaction_coverage_date?: Date | null;
		transfers_from_affiliated_party?: number | null;
		transfers_from_nonfed_account?: number | null;
		transfers_from_nonfed_levin?: number | null;
		transfers_to_affiliated_committee?: number | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;
		unitemized_convention_exp?: number | null;
		unitemized_other_disb?: number | null;
		unitemized_other_income?: number | null;
		unitemized_other_refunds?: number | null;
		unitemized_refunds_relating_convention_exp?: number | null;
	}
	export interface CommitteeTotalsPacPartyFormProperties {
		all_loans_received: FormControl<number | null | undefined>,
		allocated_federal_election_levin_share: FormControl<number | null | undefined>,
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full: FormControl<string | null | undefined>,
		contribution_refunds: FormControl<number | null | undefined>,

		/** Contribution */
		contributions: FormControl<number | null | undefined>,
		contributions_ie_and_party_expenditures_made_percent: FormControl<number | null | undefined>,
		convention_exp: FormControl<number | null | undefined>,
		coordinated_expenditures_by_party_committee: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Disbursements */
		disbursements: FormControl<number | null | undefined>,
		exp_prior_years_subject_limits: FormControl<number | null | undefined>,
		exp_subject_limits: FormControl<number | null | undefined>,
		fed_candidate_committee_contributions: FormControl<number | null | undefined>,
		fed_candidate_contribution_refunds: FormControl<number | null | undefined>,
		fed_disbursements: FormControl<number | null | undefined>,
		fed_election_activity: FormControl<number | null | undefined>,
		fed_operating_expenditures: FormControl<number | null | undefined>,
		fed_receipts: FormControl<number | null | undefined>,
		federal_funds: FormControl<number | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,
		independent_expenditures: FormControl<number | null | undefined>,
		individual_contributions: FormControl<number | null | undefined>,
		individual_contributions_percent: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions: FormControl<number | null | undefined>,
		itemized_convention_exp: FormControl<number | null | undefined>,
		itemized_other_disb: FormControl<number | null | undefined>,
		itemized_other_income: FormControl<number | null | undefined>,
		itemized_other_refunds: FormControl<number | null | undefined>,
		itemized_refunds_relating_convention_exp: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		last_debts_owed_by_committee: FormControl<number | null | undefined>,
		last_debts_owed_to_committee: FormControl<number | null | undefined>,
		last_report_type_full: FormControl<string | null | undefined>,
		last_report_year: FormControl<number | null | undefined>,
		loan_repayments_made: FormControl<number | null | undefined>,
		loan_repayments_received: FormControl<number | null | undefined>,
		loans_and_loan_repayments_made: FormControl<number | null | undefined>,
		loans_and_loan_repayments_received: FormControl<number | null | undefined>,
		loans_made: FormControl<number | null | undefined>,
		net_contributions: FormControl<number | null | undefined>,
		net_operating_expenditures: FormControl<number | null | undefined>,
		non_allocated_fed_election_activity: FormControl<number | null | undefined>,
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures_percent: FormControl<number | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,
		other_disbursements: FormControl<number | null | undefined>,
		other_fed_operating_expenditures: FormControl<number | null | undefined>,
		other_fed_receipts: FormControl<number | null | undefined>,
		other_political_committee_contributions: FormControl<number | null | undefined>,
		other_refunds: FormControl<number | null | undefined>,
		party_and_other_committee_contributions_percent: FormControl<number | null | undefined>,

		/** Party affiliated with a candidate or committee */
		party_full: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		political_party_committee_contributions: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
		refunded_individual_contributions: FormControl<number | null | undefined>,
		refunded_other_political_committee_contributions: FormControl<number | null | undefined>,
		refunded_political_party_committee_contributions: FormControl<number | null | undefined>,
		refunds_relating_convention_exp: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,
		shared_fed_activity: FormControl<number | null | undefined>,
		shared_fed_activity_nonfed: FormControl<number | null | undefined>,
		shared_fed_operating_expenditures: FormControl<number | null | undefined>,
		shared_nonfed_operating_expenditures: FormControl<number | null | undefined>,
		total_exp_subject_limits: FormControl<number | null | undefined>,
		total_transfers: FormControl<number | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
		transfers_from_affiliated_party: FormControl<number | null | undefined>,
		transfers_from_nonfed_account: FormControl<number | null | undefined>,
		transfers_from_nonfed_levin: FormControl<number | null | undefined>,
		transfers_to_affiliated_committee: FormControl<number | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,
		unitemized_convention_exp: FormControl<number | null | undefined>,
		unitemized_other_disb: FormControl<number | null | undefined>,
		unitemized_other_income: FormControl<number | null | undefined>,
		unitemized_other_refunds: FormControl<number | null | undefined>,
		unitemized_refunds_relating_convention_exp: FormControl<number | null | undefined>,
	}
	export function CreateCommitteeTotalsPacPartyFormGroup() {
		return new FormGroup<CommitteeTotalsPacPartyFormProperties>({
			all_loans_received: new FormControl<number | null | undefined>(undefined),
			allocated_federal_election_levin_share: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			committee_designation: new FormControl<string | null | undefined>(undefined),
			committee_designation_full: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			committee_type: new FormControl<string | null | undefined>(undefined),
			committee_type_full: new FormControl<string | null | undefined>(undefined),
			contribution_refunds: new FormControl<number | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined),
			contributions_ie_and_party_expenditures_made_percent: new FormControl<number | null | undefined>(undefined),
			convention_exp: new FormControl<number | null | undefined>(undefined),
			coordinated_expenditures_by_party_committee: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			exp_prior_years_subject_limits: new FormControl<number | null | undefined>(undefined),
			exp_subject_limits: new FormControl<number | null | undefined>(undefined),
			fed_candidate_committee_contributions: new FormControl<number | null | undefined>(undefined),
			fed_candidate_contribution_refunds: new FormControl<number | null | undefined>(undefined),
			fed_disbursements: new FormControl<number | null | undefined>(undefined),
			fed_election_activity: new FormControl<number | null | undefined>(undefined),
			fed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			fed_receipts: new FormControl<number | null | undefined>(undefined),
			federal_funds: new FormControl<number | null | undefined>(undefined),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			filing_frequency_full: new FormControl<string | null | undefined>(undefined),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			independent_expenditures: new FormControl<number | null | undefined>(undefined),
			individual_contributions: new FormControl<number | null | undefined>(undefined),
			individual_contributions_percent: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions: new FormControl<number | null | undefined>(undefined),
			itemized_convention_exp: new FormControl<number | null | undefined>(undefined),
			itemized_other_disb: new FormControl<number | null | undefined>(undefined),
			itemized_other_income: new FormControl<number | null | undefined>(undefined),
			itemized_other_refunds: new FormControl<number | null | undefined>(undefined),
			itemized_refunds_relating_convention_exp: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			last_report_type_full: new FormControl<string | null | undefined>(undefined),
			last_report_year: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			loan_repayments_received: new FormControl<number | null | undefined>(undefined),
			loans_and_loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			loans_and_loan_repayments_received: new FormControl<number | null | undefined>(undefined),
			loans_made: new FormControl<number | null | undefined>(undefined),
			net_contributions: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			non_allocated_fed_election_activity: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_percent: new FormControl<number | null | undefined>(undefined),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			other_fed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			other_fed_receipts: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			other_refunds: new FormControl<number | null | undefined>(undefined),
			party_and_other_committee_contributions_percent: new FormControl<number | null | undefined>(undefined),
			party_full: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunds_relating_convention_exp: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			shared_fed_activity: new FormControl<number | null | undefined>(undefined),
			shared_fed_activity_nonfed: new FormControl<number | null | undefined>(undefined),
			shared_fed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			shared_nonfed_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			total_exp_subject_limits: new FormControl<number | null | undefined>(undefined),
			total_transfers: new FormControl<number | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
			transfers_from_affiliated_party: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_account: new FormControl<number | null | undefined>(undefined),
			transfers_from_nonfed_levin: new FormControl<number | null | undefined>(undefined),
			transfers_to_affiliated_committee: new FormControl<number | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			unitemized_convention_exp: new FormControl<number | null | undefined>(undefined),
			unitemized_other_disb: new FormControl<number | null | undefined>(undefined),
			unitemized_other_income: new FormControl<number | null | undefined>(undefined),
			unitemized_other_refunds: new FormControl<number | null | undefined>(undefined),
			unitemized_refunds_relating_convention_exp: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommitteeTotalsPacPartySponsor_candidate_list {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		sponsor_candidate_id?: string | null;

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		sponsor_candidate_name?: string | null;
	}
	export interface CommitteeTotalsPacPartySponsor_candidate_listFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		sponsor_candidate_id: FormControl<string | null | undefined>,

		/**
		 * Name of candidate running for office
		 * Max length: 100
		 */
		sponsor_candidate_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeTotalsPacPartySponsor_candidate_listFormGroup() {
		return new FormGroup<CommitteeTotalsPacPartySponsor_candidate_listFormProperties>({
			sponsor_candidate_id: new FormControl<string | null | undefined>(undefined),
			sponsor_candidate_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeTotalsPacPartyPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeTotalsPacParty>;
	}
	export interface CommitteeTotalsPacPartyPageFormProperties {
	}
	export function CreateCommitteeTotalsPacPartyPageFormGroup() {
		return new FormGroup<CommitteeTotalsPacPartyPageFormProperties>({
		});

	}

	export interface CommitteeTotalsPage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeTotals>;
	}
	export interface CommitteeTotalsPageFormProperties {
	}
	export function CreateCommitteeTotalsPageFormGroup() {
		return new FormGroup<CommitteeTotalsPageFormProperties>({
		});

	}

	export interface CommitteeTotalsPerCycle {
		candidate_contribution?: number | null;
		cash_on_hand_beginning_period?: number | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full?: string | null;
		contribution_refunds?: number | null;

		/** Contribution */
		contributions?: number | null;
		contributions_ie_and_party_expenditures_made_percent?: number | null;
		coverage_end_date?: Date | null;
		coverage_start_date?: Date | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: number;

		/** Disbursements */
		disbursements?: number | null;
		exempt_legal_accounting_disbursement?: number | null;
		federal_funds?: number | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;
		fundraising_disbursements?: number | null;
		individual_contributions?: number | null;
		individual_contributions_percent?: number | null;

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions?: number | null;

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions?: number | null;
		last_beginning_image_number?: string | null;
		last_cash_on_hand_end_period?: number | null;
		last_debts_owed_by_committee?: number | null;
		last_debts_owed_to_committee?: number | null;
		last_report_type_full?: string | null;
		last_report_year?: number | null;
		loan_repayments_made?: number | null;
		loans_received?: number | null;
		loans_received_from_candidate?: number | null;
		net_contributions?: number | null;
		net_operating_expenditures?: number | null;
		offsets_to_fundraising_expenditures?: number | null;
		offsets_to_legal_accounting?: number | null;
		offsets_to_operating_expenditures?: number | null;
		operating_expenditures?: number | null;
		operating_expenditures_percent?: number | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;
		other_disbursements?: number | null;
		other_loans_received?: number | null;
		other_political_committee_contributions?: number | null;
		other_receipts?: number | null;
		party_and_other_committee_contributions_percent?: number | null;

		/** Party affiliated with a candidate or committee */
		party_full?: string | null;
		pdf_url?: string | null;
		political_party_committee_contributions?: number | null;
		receipts?: number | null;
		refunded_individual_contributions?: number | null;
		refunded_other_political_committee_contributions?: number | null;
		refunded_political_party_committee_contributions?: number | null;
		repayments_loans_made_by_candidate?: number | null;
		repayments_other_loans?: number | null;
		report_form?: string | null;
		total_offsets_to_operating_expenditures?: number | null;
		transaction_coverage_date?: Date | null;
		transfers_from_affiliated_committee?: number | null;
		transfers_to_other_authorized_committee?: number | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;
	}
	export interface CommitteeTotalsPerCycleFormProperties {
		candidate_contribution: FormControl<number | null | undefined>,
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation_full: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		committee_state: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full: FormControl<string | null | undefined>,
		contribution_refunds: FormControl<number | null | undefined>,

		/** Contribution */
		contributions: FormControl<number | null | undefined>,
		contributions_ie_and_party_expenditures_made_percent: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		coverage_start_date: FormControl<Date | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Disbursements */
		disbursements: FormControl<number | null | undefined>,
		exempt_legal_accounting_disbursement: FormControl<number | null | undefined>,
		federal_funds: FormControl<number | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 */
		filing_frequency_full: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,
		fundraising_disbursements: FormControl<number | null | undefined>,
		individual_contributions: FormControl<number | null | undefined>,
		individual_contributions_percent: FormControl<number | null | undefined>,

		/** Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. */
		individual_itemized_contributions: FormControl<number | null | undefined>,

		/** Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. */
		individual_unitemized_contributions: FormControl<number | null | undefined>,
		last_beginning_image_number: FormControl<string | null | undefined>,
		last_cash_on_hand_end_period: FormControl<number | null | undefined>,
		last_debts_owed_by_committee: FormControl<number | null | undefined>,
		last_debts_owed_to_committee: FormControl<number | null | undefined>,
		last_report_type_full: FormControl<string | null | undefined>,
		last_report_year: FormControl<number | null | undefined>,
		loan_repayments_made: FormControl<number | null | undefined>,
		loans_received: FormControl<number | null | undefined>,
		loans_received_from_candidate: FormControl<number | null | undefined>,
		net_contributions: FormControl<number | null | undefined>,
		net_operating_expenditures: FormControl<number | null | undefined>,
		offsets_to_fundraising_expenditures: FormControl<number | null | undefined>,
		offsets_to_legal_accounting: FormControl<number | null | undefined>,
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures: FormControl<number | null | undefined>,
		operating_expenditures_percent: FormControl<number | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,
		other_disbursements: FormControl<number | null | undefined>,
		other_loans_received: FormControl<number | null | undefined>,
		other_political_committee_contributions: FormControl<number | null | undefined>,
		other_receipts: FormControl<number | null | undefined>,
		party_and_other_committee_contributions_percent: FormControl<number | null | undefined>,

		/** Party affiliated with a candidate or committee */
		party_full: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		political_party_committee_contributions: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
		refunded_individual_contributions: FormControl<number | null | undefined>,
		refunded_other_political_committee_contributions: FormControl<number | null | undefined>,
		refunded_political_party_committee_contributions: FormControl<number | null | undefined>,
		repayments_loans_made_by_candidate: FormControl<number | null | undefined>,
		repayments_other_loans: FormControl<number | null | undefined>,
		report_form: FormControl<string | null | undefined>,
		total_offsets_to_operating_expenditures: FormControl<number | null | undefined>,
		transaction_coverage_date: FormControl<Date | null | undefined>,
		transfers_from_affiliated_committee: FormControl<number | null | undefined>,
		transfers_to_other_authorized_committee: FormControl<number | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,
	}
	export function CreateCommitteeTotalsPerCycleFormGroup() {
		return new FormGroup<CommitteeTotalsPerCycleFormProperties>({
			candidate_contribution: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			committee_designation: new FormControl<string | null | undefined>(undefined),
			committee_designation_full: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			committee_type: new FormControl<string | null | undefined>(undefined),
			committee_type_full: new FormControl<string | null | undefined>(undefined),
			contribution_refunds: new FormControl<number | null | undefined>(undefined),
			contributions: new FormControl<number | null | undefined>(undefined),
			contributions_ie_and_party_expenditures_made_percent: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			exempt_legal_accounting_disbursement: new FormControl<number | null | undefined>(undefined),
			federal_funds: new FormControl<number | null | undefined>(undefined),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			filing_frequency_full: new FormControl<string | null | undefined>(undefined),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			fundraising_disbursements: new FormControl<number | null | undefined>(undefined),
			individual_contributions: new FormControl<number | null | undefined>(undefined),
			individual_contributions_percent: new FormControl<number | null | undefined>(undefined),
			individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			individual_unitemized_contributions: new FormControl<number | null | undefined>(undefined),
			last_beginning_image_number: new FormControl<string | null | undefined>(undefined),
			last_cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			last_debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			last_report_type_full: new FormControl<string | null | undefined>(undefined),
			last_report_year: new FormControl<number | null | undefined>(undefined),
			loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			loans_received: new FormControl<number | null | undefined>(undefined),
			loans_received_from_candidate: new FormControl<number | null | undefined>(undefined),
			net_contributions: new FormControl<number | null | undefined>(undefined),
			net_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_fundraising_expenditures: new FormControl<number | null | undefined>(undefined),
			offsets_to_legal_accounting: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures_percent: new FormControl<number | null | undefined>(undefined),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			other_loans_received: new FormControl<number | null | undefined>(undefined),
			other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			other_receipts: new FormControl<number | null | undefined>(undefined),
			party_and_other_committee_contributions_percent: new FormControl<number | null | undefined>(undefined),
			party_full: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
			refunded_individual_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			refunded_political_party_committee_contributions: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			report_form: new FormControl<string | null | undefined>(undefined),
			total_offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			transaction_coverage_date: new FormControl<Date | null | undefined>(undefined),
			transfers_from_affiliated_committee: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface CommitteeTotalsPerCyclePage {
		pagination?: OffsetInfo;
		results?: Array<CommitteeTotalsPerCycle>;
	}
	export interface CommitteeTotalsPerCyclePageFormProperties {
	}
	export function CreateCommitteeTotalsPerCyclePageFormGroup() {
		return new FormGroup<CommitteeTotalsPerCyclePageFormProperties>({
		});

	}

	export interface CommunicationCost {
		action_code?: string | null;
		action_code_full?: string | null;
		candidate_first_name?: string | null;
		candidate_id?: string | null;
		candidate_last_name?: string | null;
		candidate_middle_name?: string | null;
		candidate_name?: string | null;
		candidate_office?: string | null;
		candidate_office_district?: string | null;
		candidate_office_full?: string | null;
		candidate_office_state?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;
		communication_class?: string | null;
		communication_type?: string | null;
		communication_type_full?: string | null;
		cycle?: number | null;
		file_number?: number | null;
		form_type_code?: string | null;
		image_number?: string | null;
		original_sub_id?: number | null;
		pdf_url?: string | null;
		primary_general_indicator?: string | null;
		primary_general_indicator_description?: string | null;
		purpose?: string | null;
		report_type?: string | null;
		report_year?: number | null;
		schedule_type?: string | null;
		schedule_type_full?: string | null;
		state_full?: string | null;
		sub_id?: number | null;
		support_oppose_indicator?: string | null;
		tran_id?: string | null;
		transaction_amount?: number | null;
		transaction_date?: Date | null;
		transaction_type?: string | null;
	}
	export interface CommunicationCostFormProperties {
		action_code: FormControl<string | null | undefined>,
		action_code_full: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_last_name: FormControl<string | null | undefined>,
		candidate_middle_name: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		candidate_office: FormControl<string | null | undefined>,
		candidate_office_district: FormControl<string | null | undefined>,
		candidate_office_full: FormControl<string | null | undefined>,
		candidate_office_state: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,
		communication_class: FormControl<string | null | undefined>,
		communication_type: FormControl<string | null | undefined>,
		communication_type_full: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		form_type_code: FormControl<string | null | undefined>,
		image_number: FormControl<string | null | undefined>,
		original_sub_id: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		primary_general_indicator: FormControl<string | null | undefined>,
		primary_general_indicator_description: FormControl<string | null | undefined>,
		purpose: FormControl<string | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_year: FormControl<number | null | undefined>,
		schedule_type: FormControl<string | null | undefined>,
		schedule_type_full: FormControl<string | null | undefined>,
		state_full: FormControl<string | null | undefined>,
		sub_id: FormControl<number | null | undefined>,
		support_oppose_indicator: FormControl<string | null | undefined>,
		tran_id: FormControl<string | null | undefined>,
		transaction_amount: FormControl<number | null | undefined>,
		transaction_date: FormControl<Date | null | undefined>,
		transaction_type: FormControl<string | null | undefined>,
	}
	export function CreateCommunicationCostFormGroup() {
		return new FormGroup<CommunicationCostFormProperties>({
			action_code: new FormControl<string | null | undefined>(undefined),
			action_code_full: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_middle_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			candidate_office_full: new FormControl<string | null | undefined>(undefined),
			candidate_office_state: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			communication_class: new FormControl<string | null | undefined>(undefined),
			communication_type: new FormControl<string | null | undefined>(undefined),
			communication_type_full: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			form_type_code: new FormControl<string | null | undefined>(undefined),
			image_number: new FormControl<string | null | undefined>(undefined),
			original_sub_id: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			primary_general_indicator: new FormControl<string | null | undefined>(undefined),
			primary_general_indicator_description: new FormControl<string | null | undefined>(undefined),
			purpose: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			schedule_type: new FormControl<string | null | undefined>(undefined),
			schedule_type_full: new FormControl<string | null | undefined>(undefined),
			state_full: new FormControl<string | null | undefined>(undefined),
			sub_id: new FormControl<number | null | undefined>(undefined),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined),
			tran_id: new FormControl<string | null | undefined>(undefined),
			transaction_amount: new FormControl<number | null | undefined>(undefined),
			transaction_date: new FormControl<Date | null | undefined>(undefined),
			transaction_type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CommunicationCostByCandidate {
		candidate?: string | null;
		candidate_id?: string | null;
		candidate_name?: string | null;
		committee?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;
		count?: number | null;
		cycle?: number | null;

		/**
		 * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		 * Required
		 */
		support_oppose_indicator: string;
		total?: number | null;
	}
	export interface CommunicationCostByCandidateFormProperties {
		candidate: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		committee: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,
		count: FormControl<number | null | undefined>,
		cycle: FormControl<number | null | undefined>,

		/**
		 * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		 * Required
		 */
		support_oppose_indicator: FormControl<string | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateCommunicationCostByCandidateFormGroup() {
		return new FormGroup<CommunicationCostByCandidateFormProperties>({
			candidate: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			committee: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CommunicationCostByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<CommunicationCostByCandidate>;
	}
	export interface CommunicationCostByCandidatePageFormProperties {
	}
	export function CreateCommunicationCostByCandidatePageFormGroup() {
		return new FormGroup<CommunicationCostByCandidatePageFormProperties>({
		});

	}

	export interface CommunicationCostPage {
		pagination?: OffsetInfo;
		results?: Array<CommunicationCost>;
	}
	export interface CommunicationCostPageFormProperties {
	}
	export function CreateCommunicationCostPageFormGroup() {
		return new FormGroup<CommunicationCostPageFormProperties>({
		});

	}

	export interface ECTotalsByCandidate {
		candidate_id?: string | null;
		cycle?: number | null;
		total?: number | null;
	}
	export interface ECTotalsByCandidateFormProperties {
		candidate_id: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateECTotalsByCandidateFormGroup() {
		return new FormGroup<ECTotalsByCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ECTotalsByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<ECTotalsByCandidate>;
	}
	export interface ECTotalsByCandidatePageFormProperties {
	}
	export function CreateECTotalsByCandidatePageFormGroup() {
		return new FormGroup<ECTotalsByCandidatePageFormProperties>({
		});

	}

	export interface EFilings {
		amended_by?: number | null;
		amendment_chain?: Array<number>;

		/**
		 * Number of times the report has been amended.
		 */
		amendment_number?: number | null;

		/**
		 * For amendments, this file_number is the file_number of the previous report that is being amended. Refer to the amended_by for the most recent version of the report.
		 */
		amends_file?: number | null;
		beginning_image_number?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;
		csv_url?: string | null;
		document_description?: string | null;
		ending_image_number?: string | null;
		fec_file_id?: string | null;
		fec_url?: string | null;

		/** Filing ID number */
		file_number?: number | null;

		/** Timestamp of electronic or paper record that FEC received */
		filed_date?: Date | null;

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 */
		form_type?: string | null;
		html_url?: string | null;
		is_amended?: boolean | null;

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_timestamp?: Date | null;
		most_recent?: boolean | null;
		most_recent_filing?: number | null;
		pdf_url?: string | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;
	}
	export interface EFilingsFormProperties {
		amended_by: FormControl<number | null | undefined>,

		/**
		 * Number of times the report has been amended.
		 */
		amendment_number: FormControl<number | null | undefined>,

		/**
		 * For amendments, this file_number is the file_number of the previous report that is being amended. Refer to the amended_by for the most recent version of the report.
		 */
		amends_file: FormControl<number | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		document_description: FormControl<string | null | undefined>,
		ending_image_number: FormControl<string | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,

		/** Filing ID number */
		file_number: FormControl<number | null | undefined>,

		/** Timestamp of electronic or paper record that FEC received */
		filed_date: FormControl<Date | null | undefined>,

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 */
		form_type: FormControl<string | null | undefined>,
		html_url: FormControl<string | null | undefined>,
		is_amended: FormControl<boolean | null | undefined>,

		/** Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently. */
		load_timestamp: FormControl<Date | null | undefined>,
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_filing: FormControl<number | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,
	}
	export function CreateEFilingsFormGroup() {
		return new FormGroup<EFilingsFormProperties>({
			amended_by: new FormControl<number | null | undefined>(undefined),
			amendment_number: new FormControl<number | null | undefined>(undefined),
			amends_file: new FormControl<number | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			ending_image_number: new FormControl<string | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			filed_date: new FormControl<Date | null | undefined>(undefined),
			form_type: new FormControl<string | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			load_timestamp: new FormControl<Date | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_filing: new FormControl<number | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface EFilingsPage {
		pagination?: OffsetInfo;
		results?: Array<EFilings>;
	}
	export interface EFilingsPageFormProperties {
	}
	export function CreateEFilingsPageFormGroup() {
		return new FormGroup<EFilingsPageFormProperties>({
		});

	}

	export interface EfilingsAmendments {

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_chain?: Array<number>;
		depth?: number | null;

		/** Filing ID number */
		file_number?: number | null;
		last?: number | null;
		longest_chain?: Array<number>;
		most_recent_filing?: number | null;

		/**
		 * Previous filing ID number
		 */
		previous_file_number?: number | null;
	}
	export interface EfilingsAmendmentsFormProperties {
		depth: FormControl<number | null | undefined>,

		/** Filing ID number */
		file_number: FormControl<number | null | undefined>,
		last: FormControl<number | null | undefined>,
		most_recent_filing: FormControl<number | null | undefined>,

		/**
		 * Previous filing ID number
		 */
		previous_file_number: FormControl<number | null | undefined>,
	}
	export function CreateEfilingsAmendmentsFormGroup() {
		return new FormGroup<EfilingsAmendmentsFormProperties>({
			depth: new FormControl<number | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			last: new FormControl<number | null | undefined>(undefined),
			most_recent_filing: new FormControl<number | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface EfilingsAmendmentsPage {
		pagination?: OffsetInfo;
		results?: Array<EfilingsAmendments>;
	}
	export interface EfilingsAmendmentsPageFormProperties {
	}
	export function CreateEfilingsAmendmentsPageFormGroup() {
		return new FormGroup<EfilingsAmendmentsPageFormProperties>({
		});

	}

	export interface Election {
		candidate_election_year?: number | null;
		candidate_id?: string | null;
		candidate_name?: string | null;
		candidate_pcc_id?: string | null;
		candidate_pcc_name?: string | null;
		cash_on_hand_end_period?: number | null;
		committee_ids?: Array<string>;
		coverage_end_date?: Date | null;
		incumbent_challenge_full?: string | null;
		party_full?: string | null;
		total_disbursements?: number | null;
		total_receipts?: number | null;
	}
	export interface ElectionFormProperties {
		candidate_election_year: FormControl<number | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		candidate_pcc_id: FormControl<string | null | undefined>,
		candidate_pcc_name: FormControl<string | null | undefined>,
		cash_on_hand_end_period: FormControl<number | null | undefined>,
		coverage_end_date: FormControl<Date | null | undefined>,
		incumbent_challenge_full: FormControl<string | null | undefined>,
		party_full: FormControl<string | null | undefined>,
		total_disbursements: FormControl<number | null | undefined>,
		total_receipts: FormControl<number | null | undefined>,
	}
	export function CreateElectionFormGroup() {
		return new FormGroup<ElectionFormProperties>({
			candidate_election_year: new FormControl<number | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_pcc_id: new FormControl<string | null | undefined>(undefined),
			candidate_pcc_name: new FormControl<string | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			incumbent_challenge_full: new FormControl<string | null | undefined>(undefined),
			party_full: new FormControl<string | null | undefined>(undefined),
			total_disbursements: new FormControl<number | null | undefined>(undefined),
			total_receipts: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ElectionDate {
		active_election?: boolean | null;

		/** Date the record was created */
		create_date?: Date | null;

		/** Date of election */
		election_date?: Date | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		election_district?: number | null;
		election_notes?: string | null;

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		election_party?: string | null;

		/** US state or territory where a candidate runs for office */
		election_state?: string | null;
		election_type_full?: string | null;

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		election_type_id?: string | null;

		/** Year of election */
		election_year?: number | null;

		/** Federal office candidate runs for: H, S or P */
		office_sought?: string | null;
		primary_general_date?: Date | null;

		/** Date the record was updated */
		update_date?: Date | null;
	}
	export interface ElectionDateFormProperties {
		active_election: FormControl<boolean | null | undefined>,

		/** Date the record was created */
		create_date: FormControl<Date | null | undefined>,

		/** Date of election */
		election_date: FormControl<Date | null | undefined>,

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		election_district: FormControl<number | null | undefined>,
		election_notes: FormControl<string | null | undefined>,

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		election_party: FormControl<string | null | undefined>,

		/** US state or territory where a candidate runs for office */
		election_state: FormControl<string | null | undefined>,
		election_type_full: FormControl<string | null | undefined>,

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		election_type_id: FormControl<string | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,

		/** Federal office candidate runs for: H, S or P */
		office_sought: FormControl<string | null | undefined>,
		primary_general_date: FormControl<Date | null | undefined>,

		/** Date the record was updated */
		update_date: FormControl<Date | null | undefined>,
	}
	export function CreateElectionDateFormGroup() {
		return new FormGroup<ElectionDateFormProperties>({
			active_election: new FormControl<boolean | null | undefined>(undefined),
			create_date: new FormControl<Date | null | undefined>(undefined),
			election_date: new FormControl<Date | null | undefined>(undefined),
			election_district: new FormControl<number | null | undefined>(undefined),
			election_notes: new FormControl<string | null | undefined>(undefined),
			election_party: new FormControl<string | null | undefined>(undefined),
			election_state: new FormControl<string | null | undefined>(undefined),
			election_type_full: new FormControl<string | null | undefined>(undefined),
			election_type_id: new FormControl<string | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			office_sought: new FormControl<string | null | undefined>(undefined),
			primary_general_date: new FormControl<Date | null | undefined>(undefined),
			update_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ElectionDatePage {
		pagination?: OffsetInfo;
		results?: Array<ElectionDate>;
	}
	export interface ElectionDatePageFormProperties {
	}
	export function CreateElectionDatePageFormGroup() {
		return new FormGroup<ElectionDatePageFormProperties>({
		});

	}

	export interface ElectionPage {
		pagination?: OffsetInfo;
		results?: Array<Election>;
	}
	export interface ElectionPageFormProperties {
	}
	export function CreateElectionPageFormGroup() {
		return new FormGroup<ElectionPageFormProperties>({
		});

	}

	export interface ElectionSearch {
		candidate_status?: string | null;
		cycle?: number | null;
		district?: string | null;
		incumbent_id?: string | null;
		incumbent_name?: string | null;
		office?: string | null;
		state?: string | null;
	}
	export interface ElectionSearchFormProperties {
		candidate_status: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		district: FormControl<string | null | undefined>,
		incumbent_id: FormControl<string | null | undefined>,
		incumbent_name: FormControl<string | null | undefined>,
		office: FormControl<string | null | undefined>,
		state: FormControl<string | null | undefined>,
	}
	export function CreateElectionSearchFormGroup() {
		return new FormGroup<ElectionSearchFormProperties>({
			candidate_status: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			district: new FormControl<string | null | undefined>(undefined),
			incumbent_id: new FormControl<string | null | undefined>(undefined),
			incumbent_name: new FormControl<string | null | undefined>(undefined),
			office: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ElectionSearchPage {
		pagination?: OffsetInfo;
		results?: Array<ElectionSearch>;
	}
	export interface ElectionSearchPageFormProperties {
	}
	export function CreateElectionSearchPageFormGroup() {
		return new FormGroup<ElectionSearchPageFormProperties>({
		});

	}

	export interface ElectionSummary {
		count?: number | null;
		disbursements?: number | null;
		independent_expenditures?: number | null;
		receipts?: number | null;
	}
	export interface ElectionSummaryFormProperties {
		count: FormControl<number | null | undefined>,
		disbursements: FormControl<number | null | undefined>,
		independent_expenditures: FormControl<number | null | undefined>,
		receipts: FormControl<number | null | undefined>,
	}
	export function CreateElectionSummaryFormGroup() {
		return new FormGroup<ElectionSummaryFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			disbursements: new FormControl<number | null | undefined>(undefined),
			independent_expenditures: new FormControl<number | null | undefined>(undefined),
			receipts: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Electioneering {
		amendment_indicator?: string | null;
		beginning_image_number?: string | null;

		/**
		 * "If an electioneering cost targets several candidates, the total cost is
		 * divided by the number of candidates. If it only mentions one candidate
		 * the full cost of the communication is listed."
		 */
		calculated_candidate_share?: number | null;
		candidate_district?: string | null;
		candidate_id?: string | null;
		candidate_name?: string | null;
		candidate_office?: string | null;
		candidate_state?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;

		/**
		 * It is the airing, broadcast, cablecast or other dissemination of the communication.
		 */
		communication_date?: Date | null;
		disbursement_amount?: number | null;

		/**
		 * Disbursement date includes actual disbursements and execution of contracts creating
		 * an obligation to make disbursements (SB date of disbursement).
		 */
		disbursement_date?: Date | null;
		election_type?: string | null;
		file_number?: number | null;
		link_id?: number | null;
		number_of_candidates?: number | null;

		/**
		 * Name of the entity that received the payment.
		 */
		payee_name?: string | null;
		payee_state?: string | null;
		pdf_url?: string | null;

		/**
		 * The pubic distribution date is the date that triggers disclosure of the
		 * electioneering communication (date reported on page 1 of Form 9).
		 */
		public_distribution_date?: Date | null;
		purpose_description?: string | null;
		receipt_date?: Date | null;
		report_year?: number | null;
		sb_image_num?: string | null;
		sb_link_id?: string | null;

		/**
		 * The identifier for each electioneering record.
		 */
		sub_id?: number | null;
	}
	export interface ElectioneeringFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,

		/**
		 * "If an electioneering cost targets several candidates, the total cost is
		 * divided by the number of candidates. If it only mentions one candidate
		 * the full cost of the communication is listed."
		 */
		calculated_candidate_share: FormControl<number | null | undefined>,
		candidate_district: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		candidate_office: FormControl<string | null | undefined>,
		candidate_state: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,

		/**
		 * It is the airing, broadcast, cablecast or other dissemination of the communication.
		 */
		communication_date: FormControl<Date | null | undefined>,
		disbursement_amount: FormControl<number | null | undefined>,

		/**
		 * Disbursement date includes actual disbursements and execution of contracts creating
		 * an obligation to make disbursements (SB date of disbursement).
		 */
		disbursement_date: FormControl<Date | null | undefined>,
		election_type: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		link_id: FormControl<number | null | undefined>,
		number_of_candidates: FormControl<number | null | undefined>,

		/**
		 * Name of the entity that received the payment.
		 */
		payee_name: FormControl<string | null | undefined>,
		payee_state: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/**
		 * The pubic distribution date is the date that triggers disclosure of the
		 * electioneering communication (date reported on page 1 of Form 9).
		 */
		public_distribution_date: FormControl<Date | null | undefined>,
		purpose_description: FormControl<string | null | undefined>,
		receipt_date: FormControl<Date | null | undefined>,
		report_year: FormControl<number | null | undefined>,
		sb_image_num: FormControl<string | null | undefined>,
		sb_link_id: FormControl<string | null | undefined>,

		/**
		 * The identifier for each electioneering record.
		 */
		sub_id: FormControl<number | null | undefined>,
	}
	export function CreateElectioneeringFormGroup() {
		return new FormGroup<ElectioneeringFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			calculated_candidate_share: new FormControl<number | null | undefined>(undefined),
			candidate_district: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_state: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			communication_date: new FormControl<Date | null | undefined>(undefined),
			disbursement_amount: new FormControl<number | null | undefined>(undefined),
			disbursement_date: new FormControl<Date | null | undefined>(undefined),
			election_type: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			link_id: new FormControl<number | null | undefined>(undefined),
			number_of_candidates: new FormControl<number | null | undefined>(undefined),
			payee_name: new FormControl<string | null | undefined>(undefined),
			payee_state: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			public_distribution_date: new FormControl<Date | null | undefined>(undefined),
			purpose_description: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			sb_image_num: new FormControl<string | null | undefined>(undefined),
			sb_link_id: new FormControl<string | null | undefined>(undefined),
			sub_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ElectioneeringByCandidate {
		candidate?: string | null;
		candidate_id?: string | null;
		candidate_name?: string | null;
		committee?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;
		count?: number | null;
		cycle?: number | null;
		total?: number | null;
	}
	export interface ElectioneeringByCandidateFormProperties {
		candidate: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		committee: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,
		count: FormControl<number | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateElectioneeringByCandidateFormGroup() {
		return new FormGroup<ElectioneeringByCandidateFormProperties>({
			candidate: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			committee: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ElectioneeringByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<ElectioneeringByCandidate>;
	}
	export interface ElectioneeringByCandidatePageFormProperties {
	}
	export function CreateElectioneeringByCandidatePageFormGroup() {
		return new FormGroup<ElectioneeringByCandidatePageFormProperties>({
		});

	}

	export interface ElectioneeringPage {
		pagination?: SeekInfo;
		results?: Array<Electioneering>;
	}
	export interface ElectioneeringPageFormProperties {
	}
	export function CreateElectioneeringPageFormGroup() {
		return new FormGroup<ElectioneeringPageFormProperties>({
		});

	}

	export interface SeekInfo {
		count?: number | null;
		last_indexes?: string | null;
		pages?: number | null;
		per_page?: number | null;
	}
	export interface SeekInfoFormProperties {
		count: FormControl<number | null | undefined>,
		last_indexes: FormControl<string | null | undefined>,
		pages: FormControl<number | null | undefined>,
		per_page: FormControl<number | null | undefined>,
	}
	export function CreateSeekInfoFormGroup() {
		return new FormGroup<SeekInfoFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
			last_indexes: new FormControl<string | null | undefined>(undefined),
			pages: new FormControl<number | null | undefined>(undefined),
			per_page: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ElectionsList {
		cycle?: number | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		district?: string | null;

		/** Federal office candidate runs for: H, S or P */
		office?: string | null;

		/** US state or territory */
		state?: string | null;
	}
	export interface ElectionsListFormProperties {
		cycle: FormControl<number | null | undefined>,

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		district: FormControl<string | null | undefined>,

		/** Federal office candidate runs for: H, S or P */
		office: FormControl<string | null | undefined>,

		/** US state or territory */
		state: FormControl<string | null | undefined>,
	}
	export function CreateElectionsListFormGroup() {
		return new FormGroup<ElectionsListFormProperties>({
			cycle: new FormControl<number | null | undefined>(undefined),
			district: new FormControl<string | null | undefined>(undefined),
			office: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ElectionsListPage {
		pagination?: OffsetInfo;
		results?: Array<ElectionsList>;
	}
	export interface ElectionsListPageFormProperties {
	}
	export function CreateElectionsListPageFormGroup() {
		return new FormGroup<ElectionsListPageFormProperties>({
		});

	}

	export interface EntityReceiptDisbursementTotals {

		/** Cumulative candidate disbursements in a two year period, adjusted to avoid double counting. */
		cumulative_candidate_disbursements?: number | null;

		/** Cumulative candidate receipts in a two year period, adjusted to avoid double counting. */
		cumulative_candidate_receipts?: number | null;

		/** Cumulative PAC disbursements in a two year period, adjusted to avoid double counting. */
		cumulative_pac_disbursements?: number | null;

		/** Cumulative PAC recipts in a two year period, adjusted to avoid double counting. */
		cumulative_pac_receipts?: number | null;

		/** Cumulative party disbursements in a two year period, adjusted to avoid double counting. */
		cumulative_party_disbursements?: number | null;

		/** Cumulative party receipts in a two year period, adjusted to avoid double counting. */
		cumulative_party_receipts?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 */
		cycle?: number | null;
		end_date?: Date | null;
	}
	export interface EntityReceiptDisbursementTotalsFormProperties {

		/** Cumulative candidate disbursements in a two year period, adjusted to avoid double counting. */
		cumulative_candidate_disbursements: FormControl<number | null | undefined>,

		/** Cumulative candidate receipts in a two year period, adjusted to avoid double counting. */
		cumulative_candidate_receipts: FormControl<number | null | undefined>,

		/** Cumulative PAC disbursements in a two year period, adjusted to avoid double counting. */
		cumulative_pac_disbursements: FormControl<number | null | undefined>,

		/** Cumulative PAC recipts in a two year period, adjusted to avoid double counting. */
		cumulative_pac_receipts: FormControl<number | null | undefined>,

		/** Cumulative party disbursements in a two year period, adjusted to avoid double counting. */
		cumulative_party_disbursements: FormControl<number | null | undefined>,

		/** Cumulative party receipts in a two year period, adjusted to avoid double counting. */
		cumulative_party_receipts: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,
		end_date: FormControl<Date | null | undefined>,
	}
	export function CreateEntityReceiptDisbursementTotalsFormGroup() {
		return new FormGroup<EntityReceiptDisbursementTotalsFormProperties>({
			cumulative_candidate_disbursements: new FormControl<number | null | undefined>(undefined),
			cumulative_candidate_receipts: new FormControl<number | null | undefined>(undefined),
			cumulative_pac_disbursements: new FormControl<number | null | undefined>(undefined),
			cumulative_pac_receipts: new FormControl<number | null | undefined>(undefined),
			cumulative_party_disbursements: new FormControl<number | null | undefined>(undefined),
			cumulative_party_receipts: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface EntityReceiptDisbursementTotalsPage {
		pagination?: OffsetInfo;
		results?: Array<EntityReceiptDisbursementTotals>;
	}
	export interface EntityReceiptDisbursementTotalsPageFormProperties {
	}
	export function CreateEntityReceiptDisbursementTotalsPageFormGroup() {
		return new FormGroup<EntityReceiptDisbursementTotalsPageFormProperties>({
		});

	}

	export interface Filings {

		/**
		 * Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds.
		 */
		additional_bank_names?: Array<string>;

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_chain?: Array<number>;

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_indicator?: string | null;

		/**
		 * Amendment version
		 */
		amendment_version?: number | null;

		/**
		 * City of bank or depository as reported on the Form 1
		 */
		bank_depository_city?: string | null;

		/**
		 * Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds.
		 */
		bank_depository_name?: string | null;

		/**
		 * State of bank or depository as reported on the Form 1
		 */
		bank_depository_state?: string | null;

		/**
		 * Street of bank or depository as reported on their Form 1.
		 */
		bank_depository_street_1?: string | null;

		/**
		 * Second line of the street of bank or depository as reported on the Form 1
		 */
		bank_depository_street_2?: string | null;

		/**
		 * Zip code of bank or depository as reported on the Form 1
		 */
		bank_depository_zip?: string | null;
		beginning_image_number?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period?: number | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period?: number | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;
		csv_url?: string | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 */
		cycle?: number | null;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;

		/** Debts owed to the committee */
		debts_owed_to_committee?: number | null;
		document_description?: string | null;

		/**
		 * The type of document for documents other than reports:
		 * - 2 24 Hour Contribution Notice
		 * - 4 48 Hour Contribution Notice
		 * - A Debt Settlement Statement
		 * - B Acknowledgment of Receipt of Debt Settlement Statement
		 * - C RFAI: Debt Settlement First Notice
		 * - D Commission Debt Settlement Review
		 * - E Commission Response TO Debt Settlement Request
		 * - F Administrative Termination
		 * - G Debt Settlement Plan Amendment
		 * - H Disavowal Notice
		 * - I Disavowal Response
		 * - J Conduit Report
		 * - K Termination Approval
		 * - L Repeat Non-Filer Notice
		 * - M Filing Frequency Change Notice
		 * - N Paper Amendment to Electronic Report
		 * - O Acknowledgment of Filing Frequency Change
		 * - S RFAI: Debt Settlement Second
		 * - T Miscellaneous Report TO FEC
		 * - V Repeat Violation Notice (441A OR 441B)
		 * - P Notice of Paper Filing
		 * - R F3L Filing Frequency Change Notice
		 * - Q Acknowledgment of F3L Filing Frequency Change
		 * - U Unregistered Committee Notice
		 */
		document_type?: string | null;

		/**
		 * The type of document for documents other than reports:
		 * - 2 24 Hour Contribution Notice
		 * - 4 48 Hour Contribution Notice
		 * - A Debt Settlement Statement
		 * - B Acknowledgment of Receipt of Debt Settlement Statement
		 * - C RFAI: Debt Settlement First Notice
		 * - D Commission Debt Settlement Review
		 * - E Commission Response TO Debt Settlement Request
		 * - F Administrative Termination
		 * - G Debt Settlement Plan Amendment
		 * - H Disavowal Notice
		 * - I Disavowal Response
		 * - J Conduit Report
		 * - K Termination Approval
		 * - L Repeat Non-Filer Notice
		 * - M Filing Frequency Change Notice
		 * - N Paper Amendment to Electronic Report
		 * - O Acknowledgment of Filing Frequency Change
		 * - S RFAI: Debt Settlement Second
		 * - T Miscellaneous Report TO FEC
		 * - V Repeat Violation Notice (441A OR 441B)
		 * - P Notice of Paper Filing
		 * - R F3L Filing Frequency Change Notice
		 * - Q Acknowledgment of F3L Filing Frequency Change
		 * - U Unregistered Committee Notice
		 */
		document_type_full?: string | null;

		/** Year of election */
		election_year?: number | null;
		ending_image_number?: string | null;
		fec_file_id?: string | null;
		fec_url?: string | null;

		/** Filing ID number */
		file_number?: number | null;

		/**
		 * The forms filed are categorized based on the nature of the filing:
		 * - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		 * - NOTICE F5, F24, F6, F9, F10, F11
		 * - STATEMENT F1, F2
		 * - OTHER F1M, F8, F99, F12, FRQ
		 */
		form_category?: string | null;

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 */
		form_type?: string | null;

		/** House personal funds */
		house_personal_funds?: number | null;

		/**
		 * HTML link to the filing.
		 */
		html_url?: string | null;

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended?: boolean | null;

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed?: string | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		most_recent_file_number?: number | null;

		/** Net donations */
		net_donations?: number | null;

		/** Federal office candidate runs for: H, S or P */
		office?: string | null;

		/** Opposition personal funds */
		opposition_personal_funds?: number | null;

		/**
		 * Number of pages in the document
		 */
		pages?: number | null;

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		party?: string | null;

		/**
		 * pdf link to the filing
		 */
		pdf_url?: string | null;

		/**
		 * Previous filing ID number
		 */
		previous_file_number?: number | null;

		/**
		 * Primary general indicator
		 */
		primary_general_indicator?: string | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;
		report_type_full?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;

		/**
		 * Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		 * - 1 Statement of Organization
		 * - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		 * - 3 Second Notice - Reports
		 * - 4 Request for Additional Information
		 * - 5 Informational - Reports
		 * - 6 Second Notice - Statement of Organization
		 * - 7 Failure to File
		 * - 8 From Public Disclosure
		 * - 9 From Multi Candidate Status
		 */
		request_type?: string | null;

		/** Senate personal funds */
		senate_personal_funds?: number | null;

		/** US state or territory where a candidate runs for office */
		state?: string | null;
		sub_id?: string | null;

		/** Total communications cost */
		total_communication_cost?: number | null;

		/** Total disbursements */
		total_disbursements?: number | null;

		/** Total independent expenditures */
		total_independent_expenditures?: number | null;

		/** Total individual contributions */
		total_individual_contributions?: number | null;

		/** Total receipts */
		total_receipts?: number | null;

		/** Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. */
		treasurer_name?: string | null;

		/** Date the record was updated */
		update_date?: Date | null;
	}
	export interface FilingsFormProperties {

		/**
		 * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		 * amendments were filed up to the amendment being inspected.
		 */
		amendment_indicator: FormControl<string | null | undefined>,

		/**
		 * Amendment version
		 */
		amendment_version: FormControl<number | null | undefined>,

		/**
		 * City of bank or depository as reported on the Form 1
		 */
		bank_depository_city: FormControl<string | null | undefined>,

		/**
		 * Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds.
		 */
		bank_depository_name: FormControl<string | null | undefined>,

		/**
		 * State of bank or depository as reported on the Form 1
		 */
		bank_depository_state: FormControl<string | null | undefined>,

		/**
		 * Street of bank or depository as reported on their Form 1.
		 */
		bank_depository_street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of the street of bank or depository as reported on the Form 1
		 */
		bank_depository_street_2: FormControl<string | null | undefined>,

		/**
		 * Zip code of bank or depository as reported on the Form 1
		 */
		bank_depository_zip: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,

		/** Balance for the committee at the start of the two-year period */
		cash_on_hand_beginning_period: FormControl<number | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,
		csv_url: FormControl<string | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/** Debts owed to the committee */
		debts_owed_to_committee: FormControl<number | null | undefined>,
		document_description: FormControl<string | null | undefined>,

		/**
		 * The type of document for documents other than reports:
		 * - 2 24 Hour Contribution Notice
		 * - 4 48 Hour Contribution Notice
		 * - A Debt Settlement Statement
		 * - B Acknowledgment of Receipt of Debt Settlement Statement
		 * - C RFAI: Debt Settlement First Notice
		 * - D Commission Debt Settlement Review
		 * - E Commission Response TO Debt Settlement Request
		 * - F Administrative Termination
		 * - G Debt Settlement Plan Amendment
		 * - H Disavowal Notice
		 * - I Disavowal Response
		 * - J Conduit Report
		 * - K Termination Approval
		 * - L Repeat Non-Filer Notice
		 * - M Filing Frequency Change Notice
		 * - N Paper Amendment to Electronic Report
		 * - O Acknowledgment of Filing Frequency Change
		 * - S RFAI: Debt Settlement Second
		 * - T Miscellaneous Report TO FEC
		 * - V Repeat Violation Notice (441A OR 441B)
		 * - P Notice of Paper Filing
		 * - R F3L Filing Frequency Change Notice
		 * - Q Acknowledgment of F3L Filing Frequency Change
		 * - U Unregistered Committee Notice
		 */
		document_type: FormControl<string | null | undefined>,

		/**
		 * The type of document for documents other than reports:
		 * - 2 24 Hour Contribution Notice
		 * - 4 48 Hour Contribution Notice
		 * - A Debt Settlement Statement
		 * - B Acknowledgment of Receipt of Debt Settlement Statement
		 * - C RFAI: Debt Settlement First Notice
		 * - D Commission Debt Settlement Review
		 * - E Commission Response TO Debt Settlement Request
		 * - F Administrative Termination
		 * - G Debt Settlement Plan Amendment
		 * - H Disavowal Notice
		 * - I Disavowal Response
		 * - J Conduit Report
		 * - K Termination Approval
		 * - L Repeat Non-Filer Notice
		 * - M Filing Frequency Change Notice
		 * - N Paper Amendment to Electronic Report
		 * - O Acknowledgment of Filing Frequency Change
		 * - S RFAI: Debt Settlement Second
		 * - T Miscellaneous Report TO FEC
		 * - V Repeat Violation Notice (441A OR 441B)
		 * - P Notice of Paper Filing
		 * - R F3L Filing Frequency Change Notice
		 * - Q Acknowledgment of F3L Filing Frequency Change
		 * - U Unregistered Committee Notice
		 */
		document_type_full: FormControl<string | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,
		ending_image_number: FormControl<string | null | undefined>,
		fec_file_id: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,

		/** Filing ID number */
		file_number: FormControl<number | null | undefined>,

		/**
		 * The forms filed are categorized based on the nature of the filing:
		 * - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		 * - NOTICE F5, F24, F6, F9, F10, F11
		 * - STATEMENT F1, F2
		 * - OTHER F1M, F8, F99, F12, FRQ
		 */
		form_category: FormControl<string | null | undefined>,

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 */
		form_type: FormControl<string | null | undefined>,

		/** House personal funds */
		house_personal_funds: FormControl<number | null | undefined>,

		/**
		 * HTML link to the filing.
		 */
		html_url: FormControl<string | null | undefined>,

		/**
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 */
		is_amended: FormControl<boolean | null | undefined>,

		/** The method used to file with the FEC, either electronic or on paper. */
		means_filed: FormControl<string | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		most_recent_file_number: FormControl<number | null | undefined>,

		/** Net donations */
		net_donations: FormControl<number | null | undefined>,

		/** Federal office candidate runs for: H, S or P */
		office: FormControl<string | null | undefined>,

		/** Opposition personal funds */
		opposition_personal_funds: FormControl<number | null | undefined>,

		/**
		 * Number of pages in the document
		 */
		pages: FormControl<number | null | undefined>,

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		party: FormControl<string | null | undefined>,

		/**
		 * pdf link to the filing
		 */
		pdf_url: FormControl<string | null | undefined>,

		/**
		 * Previous filing ID number
		 */
		previous_file_number: FormControl<number | null | undefined>,

		/**
		 * Primary general indicator
		 */
		primary_general_indicator: FormControl<string | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,
		report_type_full: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,

		/**
		 * Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		 * - 1 Statement of Organization
		 * - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		 * - 3 Second Notice - Reports
		 * - 4 Request for Additional Information
		 * - 5 Informational - Reports
		 * - 6 Second Notice - Statement of Organization
		 * - 7 Failure to File
		 * - 8 From Public Disclosure
		 * - 9 From Multi Candidate Status
		 */
		request_type: FormControl<string | null | undefined>,

		/** Senate personal funds */
		senate_personal_funds: FormControl<number | null | undefined>,

		/** US state or territory where a candidate runs for office */
		state: FormControl<string | null | undefined>,
		sub_id: FormControl<string | null | undefined>,

		/** Total communications cost */
		total_communication_cost: FormControl<number | null | undefined>,

		/** Total disbursements */
		total_disbursements: FormControl<number | null | undefined>,

		/** Total independent expenditures */
		total_independent_expenditures: FormControl<number | null | undefined>,

		/** Total individual contributions */
		total_individual_contributions: FormControl<number | null | undefined>,

		/** Total receipts */
		total_receipts: FormControl<number | null | undefined>,

		/** Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown. */
		treasurer_name: FormControl<string | null | undefined>,

		/** Date the record was updated */
		update_date: FormControl<Date | null | undefined>,
	}
	export function CreateFilingsFormGroup() {
		return new FormGroup<FilingsFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_version: new FormControl<number | null | undefined>(undefined),
			bank_depository_city: new FormControl<string | null | undefined>(undefined),
			bank_depository_name: new FormControl<string | null | undefined>(undefined),
			bank_depository_state: new FormControl<string | null | undefined>(undefined),
			bank_depository_street_1: new FormControl<string | null | undefined>(undefined),
			bank_depository_street_2: new FormControl<string | null | undefined>(undefined),
			bank_depository_zip: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			cash_on_hand_beginning_period: new FormControl<number | null | undefined>(undefined),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			debts_owed_to_committee: new FormControl<number | null | undefined>(undefined),
			document_description: new FormControl<string | null | undefined>(undefined),
			document_type: new FormControl<string | null | undefined>(undefined),
			document_type_full: new FormControl<string | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			ending_image_number: new FormControl<string | null | undefined>(undefined),
			fec_file_id: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			form_category: new FormControl<string | null | undefined>(undefined),
			form_type: new FormControl<string | null | undefined>(undefined),
			house_personal_funds: new FormControl<number | null | undefined>(undefined),
			html_url: new FormControl<string | null | undefined>(undefined),
			is_amended: new FormControl<boolean | null | undefined>(undefined),
			means_filed: new FormControl<string | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			most_recent_file_number: new FormControl<number | null | undefined>(undefined),
			net_donations: new FormControl<number | null | undefined>(undefined),
			office: new FormControl<string | null | undefined>(undefined),
			opposition_personal_funds: new FormControl<number | null | undefined>(undefined),
			pages: new FormControl<number | null | undefined>(undefined),
			party: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
			primary_general_indicator: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			request_type: new FormControl<string | null | undefined>(undefined),
			senate_personal_funds: new FormControl<number | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			sub_id: new FormControl<string | null | undefined>(undefined),
			total_communication_cost: new FormControl<number | null | undefined>(undefined),
			total_disbursements: new FormControl<number | null | undefined>(undefined),
			total_independent_expenditures: new FormControl<number | null | undefined>(undefined),
			total_individual_contributions: new FormControl<number | null | undefined>(undefined),
			total_receipts: new FormControl<number | null | undefined>(undefined),
			treasurer_name: new FormControl<string | null | undefined>(undefined),
			update_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface FilingsPage {
		pagination?: OffsetInfo;
		results?: Array<Filings>;
	}
	export interface FilingsPageFormProperties {
	}
	export function CreateFilingsPageFormGroup() {
		return new FormGroup<FilingsPageFormProperties>({
		});

	}

	export interface IETotalsByCandidate {
		candidate_id?: string | null;
		cycle?: number | null;
		support_oppose_indicator?: string | null;
		total?: number | null;
	}
	export interface IETotalsByCandidateFormProperties {
		candidate_id: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		support_oppose_indicator: FormControl<string | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateIETotalsByCandidateFormGroup() {
		return new FormGroup<IETotalsByCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface IETotalsByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<IETotalsByCandidate>;
	}
	export interface IETotalsByCandidatePageFormProperties {
	}
	export function CreateIETotalsByCandidatePageFormGroup() {
		return new FormGroup<IETotalsByCandidatePageFormProperties>({
		});

	}

	export interface InauguralDonations {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Name of contributor
		 * Required
		 * Max length: 100
		 */
		contributor_name: string;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: number;
		total_donation?: number | null;
	}
	export interface InauguralDonationsFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Name of contributor
		 * Required
		 * Max length: 100
		 */
		contributor_name: FormControl<string | null | undefined>,

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,
		total_donation: FormControl<number | null | undefined>,
	}
	export function CreateInauguralDonationsFormGroup() {
		return new FormGroup<InauguralDonationsFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contributor_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(100)]),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total_donation: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface InauguralDonationsPage {
		pagination?: OffsetInfo;
		results?: Array<InauguralDonations>;
	}
	export interface InauguralDonationsPageFormProperties {
	}
	export function CreateInauguralDonationsPageFormGroup() {
		return new FormGroup<InauguralDonationsPageFormProperties>({
		});

	}

	export interface OperationsLog {

		/**
		 * Amendent types:
		 * -N   new
		 * -A   amendment
		 * -T   terminated
		 * -C   consolidated
		 * -M   multi-candidate
		 * -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 */
		amendment_indicator?: string | null;

		/**
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 */
		beginning_image_number?: string | null;

		/**
		 * A unique identifier of the registered filer.
		 */
		candidate_committee_id?: string | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Beginning date of the reporting period */
		coverage_start_date?: Date | null;

		/** Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document. */
		ending_image_number?: string | null;

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 */
		form_type?: string | null;

		/** Date the FEC received the electronic or paper record */
		receipt_date?: Date | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;

		/**
		 * Status of the transactional report.
		 * -0- Transaction is entered
		 * into the system.
		 * But not verified.
		 * -1- Transaction is verified.
		 */
		status_num?: number | null;

		/**
		 * A unique identifier of the transactional report.
		 */
		sub_id?: number | null;

		/**
		 * Date when the report is entered into the database
		 */
		summary_data_complete_date?: Date | null;

		/**
		 * Same day or a day after the report is loaded in the database
		 */
		summary_data_verification_date?: Date | null;

		/**
		 * Date when the report is processed completely
		 */
		transaction_data_complete_date?: Date | null;
	}
	export interface OperationsLogFormProperties {

		/**
		 * Amendent types:
		 * -N   new
		 * -A   amendment
		 * -T   terminated
		 * -C   consolidated
		 * -M   multi-candidate
		 * -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 */
		amendment_indicator: FormControl<string | null | undefined>,

		/**
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 */
		beginning_image_number: FormControl<string | null | undefined>,

		/**
		 * A unique identifier of the registered filer.
		 */
		candidate_committee_id: FormControl<string | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Beginning date of the reporting period */
		coverage_start_date: FormControl<Date | null | undefined>,

		/** Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document. */
		ending_image_number: FormControl<string | null | undefined>,

		/**
		 * The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 * - F1   Statement of Organization
		 * - F1M  Notification of Multicandidate Status
		 * - F2   Statement of Candidacy
		 * - F3   Report of Receipts and Disbursements for an Authorized Committee
		 * - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 * - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 * - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 * - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 * - F5   Report of Independent Expenditures Made and Contributions Received
		 * - F6   48 Hour Notice of Contributions/Loans Received
		 * - F7   Report of Communication Costs by Corporations and Membership Organizations
		 * - F8   Debt Settlement Plan
		 * - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 * - F13  Report of Donations Accepted for Inaugural Committee
		 * - F99  Miscellaneous Text
		 * - FRQ  Request for Additional Information
		 */
		form_type: FormControl<string | null | undefined>,

		/** Date the FEC received the electronic or paper record */
		receipt_date: FormControl<Date | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,

		/**
		 * Status of the transactional report.
		 * -0- Transaction is entered
		 * into the system.
		 * But not verified.
		 * -1- Transaction is verified.
		 */
		status_num: FormControl<number | null | undefined>,

		/**
		 * A unique identifier of the transactional report.
		 */
		sub_id: FormControl<number | null | undefined>,

		/**
		 * Date when the report is entered into the database
		 */
		summary_data_complete_date: FormControl<Date | null | undefined>,

		/**
		 * Same day or a day after the report is loaded in the database
		 */
		summary_data_verification_date: FormControl<Date | null | undefined>,

		/**
		 * Date when the report is processed completely
		 */
		transaction_data_complete_date: FormControl<Date | null | undefined>,
	}
	export function CreateOperationsLogFormGroup() {
		return new FormGroup<OperationsLogFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			candidate_committee_id: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			coverage_start_date: new FormControl<Date | null | undefined>(undefined),
			ending_image_number: new FormControl<string | null | undefined>(undefined),
			form_type: new FormControl<string | null | undefined>(undefined),
			receipt_date: new FormControl<Date | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			status_num: new FormControl<number | null | undefined>(undefined),
			sub_id: new FormControl<number | null | undefined>(undefined),
			summary_data_complete_date: new FormControl<Date | null | undefined>(undefined),
			summary_data_verification_date: new FormControl<Date | null | undefined>(undefined),
			transaction_data_complete_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface OperationsLogPage {
		pagination?: OffsetInfo;
		results?: Array<OperationsLog>;
	}
	export interface OperationsLogPageFormProperties {
	}
	export function CreateOperationsLogPageFormGroup() {
		return new FormGroup<OperationsLogPageFormProperties>({
		});

	}

	export interface PresidentialByCandidate {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 */
		candidate_id?: string | null;

		/**
		 * Candidate last name
		 */
		candidate_last_name?: string | null;

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party_affiliation?: string | null;

		/**
		 * State of contributor
		 * Max length: 2
		 */
		contributor_state?: string | null;

		/** Year of election */
		election_year?: number | null;

		/** Net contributions */
		net_receipts?: number | null;

		/**
		 * Net receipts, in millions
		 */
		rounded_net_receipts?: number | null;
	}
	export interface PresidentialByCandidateFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * Candidate last name
		 */
		candidate_last_name: FormControl<string | null | undefined>,

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party_affiliation: FormControl<string | null | undefined>,

		/**
		 * State of contributor
		 * Max length: 2
		 */
		contributor_state: FormControl<string | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,

		/** Net contributions */
		net_receipts: FormControl<number | null | undefined>,

		/**
		 * Net receipts, in millions
		 */
		rounded_net_receipts: FormControl<number | null | undefined>,
	}
	export function CreatePresidentialByCandidateFormGroup() {
		return new FormGroup<PresidentialByCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_party_affiliation: new FormControl<string | null | undefined>(undefined),
			contributor_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			election_year: new FormControl<number | null | undefined>(undefined),
			net_receipts: new FormControl<number | null | undefined>(undefined),
			rounded_net_receipts: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PresidentialByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<PresidentialByCandidate>;
	}
	export interface PresidentialByCandidatePageFormProperties {
	}
	export function CreatePresidentialByCandidatePageFormGroup() {
		return new FormGroup<PresidentialByCandidatePageFormProperties>({
		});

	}

	export interface PresidentialBySize {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 * Max length: 0
		 */
		candidate_id?: string | null;

		/**
		 * Contributions received
		 */
		contribution_receipt_amount?: number | null;

		/** Year of election */
		election_year?: number | null;

		/**
		 * The total all contributions in the following ranges:
		 * ```
		 * -0    $200 and under
		 * -200  $200.01 - $499.99
		 * -500  $500 - $999.99
		 * -1000 $1000 - $1999.99
		 * -2000 $2000 +
		 * ```
		 * Unitemized contributions are included in the `0` category.
		 */
		size?: number | null;

		/**
		 * The total all contributions range id.
		 */
		size_range_id?: number | null;
	}
	export interface PresidentialBySizeFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 * Max length: 0
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * Contributions received
		 */
		contribution_receipt_amount: FormControl<number | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,

		/**
		 * The total all contributions in the following ranges:
		 * ```
		 * -0    $200 and under
		 * -200  $200.01 - $499.99
		 * -500  $500 - $999.99
		 * -1000 $1000 - $1999.99
		 * -2000 $2000 +
		 * ```
		 * Unitemized contributions are included in the `0` category.
		 */
		size: FormControl<number | null | undefined>,

		/**
		 * The total all contributions range id.
		 */
		size_range_id: FormControl<number | null | undefined>,
	}
	export function CreatePresidentialBySizeFormGroup() {
		return new FormGroup<PresidentialBySizeFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(0)]),
			contribution_receipt_amount: new FormControl<number | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			size_range_id: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PresidentialBySizePage {
		pagination?: OffsetInfo;
		results?: Array<PresidentialBySize>;
	}
	export interface PresidentialBySizePageFormProperties {
	}
	export function CreatePresidentialBySizePageFormGroup() {
		return new FormGroup<PresidentialBySizePageFormProperties>({
		});

	}

	export interface PresidentialByState {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 * Max length: 0
		 */
		candidate_id?: string | null;

		/**
		 * Contributions received
		 */
		contribution_receipt_amount?: number | null;

		/**
		 * State of contributor
		 * Max length: 2
		 */
		contribution_state?: string | null;

		/** Year of election */
		election_year?: number | null;
	}
	export interface PresidentialByStateFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 * Max length: 0
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * Contributions received
		 */
		contribution_receipt_amount: FormControl<number | null | undefined>,

		/**
		 * State of contributor
		 * Max length: 2
		 */
		contribution_state: FormControl<string | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,
	}
	export function CreatePresidentialByStateFormGroup() {
		return new FormGroup<PresidentialByStateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(0)]),
			contribution_receipt_amount: new FormControl<number | null | undefined>(undefined),
			contribution_state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			election_year: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PresidentialByStatePage {
		pagination?: OffsetInfo;
		results?: Array<PresidentialByState>;
	}
	export interface PresidentialByStatePageFormProperties {
	}
	export function CreatePresidentialByStatePageFormGroup() {
		return new FormGroup<PresidentialByStatePageFormProperties>({
		});

	}

	export interface PresidentialCoverage {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 */
		candidate_id?: string | null;

		/** Ending date of the reporting period */
		coverage_end_date?: Date | null;

		/** Year of election */
		election_year?: number | null;
	}
	export interface PresidentialCoverageFormProperties {

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 */
		candidate_id: FormControl<string | null | undefined>,

		/** Ending date of the reporting period */
		coverage_end_date: FormControl<Date | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,
	}
	export function CreatePresidentialCoverageFormGroup() {
		return new FormGroup<PresidentialCoverageFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			coverage_end_date: new FormControl<Date | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PresidentialCoveragePage {
		pagination?: OffsetInfo;
		results?: Array<PresidentialCoverage>;
	}
	export interface PresidentialCoveragePageFormProperties {
	}
	export function CreatePresidentialCoveragePageFormGroup() {
		return new FormGroup<PresidentialCoveragePageFormProperties>({
		});

	}

	export interface PresidentialSummary {

		/**
		 * candidate contributions less repayments
		 */
		candidate_contributions_less_repayments?: number | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 */
		candidate_id?: string | null;

		/**
		 * Candidate last name
		 */
		candidate_last_name?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party_affiliation?: string | null;

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end?: number | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/** Debts owed by the committee */
		debts_owed_by_committee?: number | null;

		/**
		 * disbursements less offsets
		 */
		disbursements_less_offsets?: number | null;

		/** Year of election */
		election_year?: number | null;

		/**
		 * exempt legal accounting disbursement
		 */
		exempt_legal_accounting_disbursement?: number | null;

		/** Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections. */
		federal_funds?: number | null;

		/**
		 * fundraising disbursements
		 */
		fundraising_disbursements?: number | null;

		/**
		 * individual contributions less refunds
		 */
		individual_contributions_less_refunds?: number | null;

		/**
		 * Contributions received
		 */
		net_receipts?: number | null;

		/** Offsets to operating expenditures */
		offsets_to_operating_expenditures?: number | null;

		/** Total operating expenditures */
		operating_expenditures?: number | null;

		/** Other disbursements */
		other_disbursements?: number | null;

		/**
		 * pac contributions less refunds
		 */
		pac_contributions_less_refunds?: number | null;

		/**
		 * party contributions less refunds
		 */
		party_contributions_less_refunds?: number | null;

		/**
		 * repayments loans made by candidate
		 */
		repayments_loans_made_by_candidate?: number | null;

		/**
		 * repayments other loans
		 */
		repayments_other_loans?: number | null;

		/**
		 * Net receipts, in millions
		 */
		rounded_net_receipts?: number | null;

		/**
		 * total contribution refunds
		 */
		total_contribution_refunds?: number | null;

		/**
		 * total loan repayments made
		 */
		total_loan_repayments_made?: number | null;

		/**
		 * transfers from affiliated committees
		 */
		transfers_from_affiliated_committees?: number | null;

		/**
		 * transfers to other authorized committees
		 */
		transfers_to_other_authorized_committees?: number | null;
	}
	export interface PresidentialSummaryFormProperties {

		/**
		 * candidate contributions less repayments
		 */
		candidate_contributions_less_repayments: FormControl<number | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * -P00000001    All candidates
		 * -P00000002    Democrasts
		 * -P00000003    Republicans
		 */
		candidate_id: FormControl<string | null | undefined>,

		/**
		 * Candidate last name
		 */
		candidate_last_name: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party_affiliation: FormControl<string | null | undefined>,

		/** Ending cash balance on the most recent filing */
		cash_on_hand_end: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 */
		committee_designation: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/** Debts owed by the committee */
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/**
		 * disbursements less offsets
		 */
		disbursements_less_offsets: FormControl<number | null | undefined>,

		/** Year of election */
		election_year: FormControl<number | null | undefined>,

		/**
		 * exempt legal accounting disbursement
		 */
		exempt_legal_accounting_disbursement: FormControl<number | null | undefined>,

		/** Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections. */
		federal_funds: FormControl<number | null | undefined>,

		/**
		 * fundraising disbursements
		 */
		fundraising_disbursements: FormControl<number | null | undefined>,

		/**
		 * individual contributions less refunds
		 */
		individual_contributions_less_refunds: FormControl<number | null | undefined>,

		/**
		 * Contributions received
		 */
		net_receipts: FormControl<number | null | undefined>,

		/** Offsets to operating expenditures */
		offsets_to_operating_expenditures: FormControl<number | null | undefined>,

		/** Total operating expenditures */
		operating_expenditures: FormControl<number | null | undefined>,

		/** Other disbursements */
		other_disbursements: FormControl<number | null | undefined>,

		/**
		 * pac contributions less refunds
		 */
		pac_contributions_less_refunds: FormControl<number | null | undefined>,

		/**
		 * party contributions less refunds
		 */
		party_contributions_less_refunds: FormControl<number | null | undefined>,

		/**
		 * repayments loans made by candidate
		 */
		repayments_loans_made_by_candidate: FormControl<number | null | undefined>,

		/**
		 * repayments other loans
		 */
		repayments_other_loans: FormControl<number | null | undefined>,

		/**
		 * Net receipts, in millions
		 */
		rounded_net_receipts: FormControl<number | null | undefined>,

		/**
		 * total contribution refunds
		 */
		total_contribution_refunds: FormControl<number | null | undefined>,

		/**
		 * total loan repayments made
		 */
		total_loan_repayments_made: FormControl<number | null | undefined>,

		/**
		 * transfers from affiliated committees
		 */
		transfers_from_affiliated_committees: FormControl<number | null | undefined>,

		/**
		 * transfers to other authorized committees
		 */
		transfers_to_other_authorized_committees: FormControl<number | null | undefined>,
	}
	export function CreatePresidentialSummaryFormGroup() {
		return new FormGroup<PresidentialSummaryFormProperties>({
			candidate_contributions_less_repayments: new FormControl<number | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_party_affiliation: new FormControl<string | null | undefined>(undefined),
			cash_on_hand_end: new FormControl<number | null | undefined>(undefined),
			committee_designation: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			committee_type: new FormControl<string | null | undefined>(undefined),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			disbursements_less_offsets: new FormControl<number | null | undefined>(undefined),
			election_year: new FormControl<number | null | undefined>(undefined),
			exempt_legal_accounting_disbursement: new FormControl<number | null | undefined>(undefined),
			federal_funds: new FormControl<number | null | undefined>(undefined),
			fundraising_disbursements: new FormControl<number | null | undefined>(undefined),
			individual_contributions_less_refunds: new FormControl<number | null | undefined>(undefined),
			net_receipts: new FormControl<number | null | undefined>(undefined),
			offsets_to_operating_expenditures: new FormControl<number | null | undefined>(undefined),
			operating_expenditures: new FormControl<number | null | undefined>(undefined),
			other_disbursements: new FormControl<number | null | undefined>(undefined),
			pac_contributions_less_refunds: new FormControl<number | null | undefined>(undefined),
			party_contributions_less_refunds: new FormControl<number | null | undefined>(undefined),
			repayments_loans_made_by_candidate: new FormControl<number | null | undefined>(undefined),
			repayments_other_loans: new FormControl<number | null | undefined>(undefined),
			rounded_net_receipts: new FormControl<number | null | undefined>(undefined),
			total_contribution_refunds: new FormControl<number | null | undefined>(undefined),
			total_loan_repayments_made: new FormControl<number | null | undefined>(undefined),
			transfers_from_affiliated_committees: new FormControl<number | null | undefined>(undefined),
			transfers_to_other_authorized_committees: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PresidentialSummaryPage {
		pagination?: OffsetInfo;
		results?: Array<PresidentialSummary>;
	}
	export interface PresidentialSummaryPageFormProperties {
	}
	export function CreatePresidentialSummaryPageFormGroup() {
		return new FormGroup<PresidentialSummaryPageFormProperties>({
		});

	}

	export interface RadAnalyst {

		/** ID of RAD analyst. */
		analyst_id?: number | null;

		/** Short ID of RAD analyst. */
		analyst_short_id?: number | null;

		/** Date of most recent RAD analyst assignment change */
		assignment_update_date?: Date | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		committee_name?: string | null;

		/**
		 * Email of RAD analyst
		 * Max length: 100
		 */
		email?: string | null;

		/**
		 * Fist name of RAD analyst
		 * Max length: 255
		 */
		first_name?: string | null;

		/**
		 * Last name of RAD analyst
		 * Max length: 100
		 */
		last_name?: string | null;

		/**
		 * Branch of RAD analyst
		 * Max length: 100
		 */
		rad_branch?: string | null;

		/** Telephone extension of RAD analyst */
		telephone_ext?: number | null;

		/**
		 * Title of RAD analyst
		 * Max length: 100
		 */
		title?: string | null;
	}
	export interface RadAnalystFormProperties {

		/** ID of RAD analyst. */
		analyst_id: FormControl<number | null | undefined>,

		/** Short ID of RAD analyst. */
		analyst_short_id: FormControl<number | null | undefined>,

		/** Date of most recent RAD analyst assignment change */
		assignment_update_date: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		committee_name: FormControl<string | null | undefined>,

		/**
		 * Email of RAD analyst
		 * Max length: 100
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * Fist name of RAD analyst
		 * Max length: 255
		 */
		first_name: FormControl<string | null | undefined>,

		/**
		 * Last name of RAD analyst
		 * Max length: 100
		 */
		last_name: FormControl<string | null | undefined>,

		/**
		 * Branch of RAD analyst
		 * Max length: 100
		 */
		rad_branch: FormControl<string | null | undefined>,

		/** Telephone extension of RAD analyst */
		telephone_ext: FormControl<number | null | undefined>,

		/**
		 * Title of RAD analyst
		 * Max length: 100
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateRadAnalystFormGroup() {
		return new FormGroup<RadAnalystFormProperties>({
			analyst_id: new FormControl<number | null | undefined>(undefined),
			analyst_short_id: new FormControl<number | null | undefined>(undefined),
			assignment_update_date: new FormControl<Date | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			first_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			last_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			rad_branch: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			telephone_ext: new FormControl<number | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface RadAnalystPage {
		pagination?: OffsetInfo;
		results?: Array<RadAnalyst>;
	}
	export interface RadAnalystPageFormProperties {
	}
	export function CreateRadAnalystPageFormGroup() {
		return new FormGroup<RadAnalystPageFormProperties>({
		});

	}

	export interface ReportDate {

		/** Date the record was created */
		create_date?: Date | null;

		/** Date the report is due */
		due_date?: Date | null;
		report_type?: string | null;
		report_type_full?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;

		/** Date the record was updated */
		update_date?: Date | null;
	}
	export interface ReportDateFormProperties {

		/** Date the record was created */
		create_date: FormControl<Date | null | undefined>,

		/** Date the report is due */
		due_date: FormControl<Date | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_type_full: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,

		/** Date the record was updated */
		update_date: FormControl<Date | null | undefined>,
	}
	export function CreateReportDateFormGroup() {
		return new FormGroup<ReportDateFormProperties>({
			create_date: new FormControl<Date | null | undefined>(undefined),
			due_date: new FormControl<Date | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_type_full: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			update_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ReportDatePage {
		pagination?: OffsetInfo;
		results?: Array<ReportDate>;
	}
	export interface ReportDatePageFormProperties {
	}
	export function CreateReportDatePageFormGroup() {
		return new FormGroup<ReportDatePageFormProperties>({
		});

	}

	export interface ReportType {

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 * Required
		 */
		report_type: string;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full?: string | null;
	}
	export interface ReportTypeFormProperties {

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 * Required
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type_full: FormControl<string | null | undefined>,
	}
	export function CreateReportTypeFormGroup() {
		return new FormGroup<ReportTypeFormProperties>({
			report_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			report_type_full: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleA {
		amendment_indicator?: string | null;
		amendment_indicator_desc?: string | null;
		back_reference_schedule_name?: string | null;
		back_reference_transaction_id?: string | null;
		candidate_first_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id?: string | null;
		candidate_last_name?: string | null;
		candidate_middle_name?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;
		candidate_office?: string | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		candidate_office_district?: string | null;
		candidate_office_full?: string | null;
		candidate_office_state?: string | null;
		candidate_office_state_full?: string | null;
		candidate_prefix?: string | null;
		candidate_suffix?: string | null;
		committee?: CommitteeHistory;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name?: string | null;
		conduit_committee_city?: string | null;
		conduit_committee_id?: string | null;
		conduit_committee_name?: string | null;
		conduit_committee_state?: string | null;
		conduit_committee_street1?: string | null;
		conduit_committee_street2?: string | null;
		conduit_committee_zip?: number | null;
		contribution_receipt_amount?: number | null;
		contribution_receipt_date?: Date | null;
		contributor?: CommitteeHistory;
		contributor_aggregate_ytd?: number | null;

		/** City of contributor */
		contributor_city?: string | null;

		/** Employer of contributor, filers need to make an effort to gather this information */
		contributor_employer?: string | null;
		contributor_first_name?: string | null;

		/** The FEC identifier should be represented here if the contributor is registered with the FEC. */
		contributor_id?: string | null;
		contributor_last_name?: string | null;
		contributor_middle_name?: string | null;

		/** Name of contributor */
		contributor_name?: string | null;

		/** Occupation of contributor, filers need to make an effort to gather this information */
		contributor_occupation?: string | null;
		contributor_prefix?: string | null;

		/** State of contributor */
		contributor_state?: string | null;
		contributor_street_1?: string | null;
		contributor_street_2?: string | null;
		contributor_suffix?: string | null;

		/** Zip code of contributor */
		contributor_zip?: string | null;
		donor_committee_name?: string | null;
		election_type?: string | null;
		election_type_full?: string | null;
		entity_type?: string | null;
		entity_type_desc?: string | null;
		fec_election_type_desc?: string | null;
		fec_election_year?: string | null;
		file_number?: number | null;
		filing_form?: string | null;
		image_number?: string | null;
		increased_limit?: string | null;
		is_individual?: boolean | null;
		line_number?: string | null;
		line_number_label?: string | null;
		link_id?: number | null;
		load_date?: Date | null;
		memo_code?: string | null;
		memo_code_full?: string | null;
		memo_text?: string | null;
		memoed_subtotal?: boolean | null;
		national_committee_nonfederal_account?: string | null;
		original_sub_id?: string | null;
		pdf_url?: string | null;
		receipt_type?: string | null;
		receipt_type_desc?: string | null;
		receipt_type_full?: string | null;

		/** Max length: 1 */
		recipient_committee_designation?: string | null;

		/** Max length: 1 */
		recipient_committee_org_type?: string | null;

		/** Max length: 1 */
		recipient_committee_type?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		schedule_type?: string | null;
		schedule_type_full?: string | null;
		sub_id?: string | null;
		transaction_id?: string | null;

		/**
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 */
		two_year_transaction_period?: number | null;
		unused_contbr_id?: string | null;
	}
	export interface ScheduleAFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_desc: FormControl<string | null | undefined>,
		back_reference_schedule_name: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id: FormControl<string | null | undefined>,
		candidate_last_name: FormControl<string | null | undefined>,
		candidate_middle_name: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,
		candidate_office: FormControl<string | null | undefined>,

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		candidate_office_district: FormControl<string | null | undefined>,
		candidate_office_full: FormControl<string | null | undefined>,
		candidate_office_state: FormControl<string | null | undefined>,
		candidate_office_state_full: FormControl<string | null | undefined>,
		candidate_prefix: FormControl<string | null | undefined>,
		candidate_suffix: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,

		/** The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records. */
		committee_name: FormControl<string | null | undefined>,
		conduit_committee_city: FormControl<string | null | undefined>,
		conduit_committee_id: FormControl<string | null | undefined>,
		conduit_committee_name: FormControl<string | null | undefined>,
		conduit_committee_state: FormControl<string | null | undefined>,
		conduit_committee_street1: FormControl<string | null | undefined>,
		conduit_committee_street2: FormControl<string | null | undefined>,
		conduit_committee_zip: FormControl<number | null | undefined>,
		contribution_receipt_amount: FormControl<number | null | undefined>,
		contribution_receipt_date: FormControl<Date | null | undefined>,
		contributor_aggregate_ytd: FormControl<number | null | undefined>,

		/** City of contributor */
		contributor_city: FormControl<string | null | undefined>,

		/** Employer of contributor, filers need to make an effort to gather this information */
		contributor_employer: FormControl<string | null | undefined>,
		contributor_first_name: FormControl<string | null | undefined>,

		/** The FEC identifier should be represented here if the contributor is registered with the FEC. */
		contributor_id: FormControl<string | null | undefined>,
		contributor_last_name: FormControl<string | null | undefined>,
		contributor_middle_name: FormControl<string | null | undefined>,

		/** Name of contributor */
		contributor_name: FormControl<string | null | undefined>,

		/** Occupation of contributor, filers need to make an effort to gather this information */
		contributor_occupation: FormControl<string | null | undefined>,
		contributor_prefix: FormControl<string | null | undefined>,

		/** State of contributor */
		contributor_state: FormControl<string | null | undefined>,
		contributor_street_1: FormControl<string | null | undefined>,
		contributor_street_2: FormControl<string | null | undefined>,
		contributor_suffix: FormControl<string | null | undefined>,

		/** Zip code of contributor */
		contributor_zip: FormControl<string | null | undefined>,
		donor_committee_name: FormControl<string | null | undefined>,
		election_type: FormControl<string | null | undefined>,
		election_type_full: FormControl<string | null | undefined>,
		entity_type: FormControl<string | null | undefined>,
		entity_type_desc: FormControl<string | null | undefined>,
		fec_election_type_desc: FormControl<string | null | undefined>,
		fec_election_year: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		filing_form: FormControl<string | null | undefined>,
		image_number: FormControl<string | null | undefined>,
		increased_limit: FormControl<string | null | undefined>,
		is_individual: FormControl<boolean | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		line_number_label: FormControl<string | null | undefined>,
		link_id: FormControl<number | null | undefined>,
		load_date: FormControl<Date | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_code_full: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,
		memoed_subtotal: FormControl<boolean | null | undefined>,
		national_committee_nonfederal_account: FormControl<string | null | undefined>,
		original_sub_id: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		receipt_type: FormControl<string | null | undefined>,
		receipt_type_desc: FormControl<string | null | undefined>,
		receipt_type_full: FormControl<string | null | undefined>,

		/** Max length: 1 */
		recipient_committee_designation: FormControl<string | null | undefined>,

		/** Max length: 1 */
		recipient_committee_org_type: FormControl<string | null | undefined>,

		/** Max length: 1 */
		recipient_committee_type: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		schedule_type: FormControl<string | null | undefined>,
		schedule_type_full: FormControl<string | null | undefined>,
		sub_id: FormControl<string | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 */
		two_year_transaction_period: FormControl<number | null | undefined>,
		unused_contbr_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleAFormGroup() {
		return new FormGroup<ScheduleAFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_desc: new FormControl<string | null | undefined>(undefined),
			back_reference_schedule_name: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_middle_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			candidate_office_full: new FormControl<string | null | undefined>(undefined),
			candidate_office_state: new FormControl<string | null | undefined>(undefined),
			candidate_office_state_full: new FormControl<string | null | undefined>(undefined),
			candidate_prefix: new FormControl<string | null | undefined>(undefined),
			candidate_suffix: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			conduit_committee_city: new FormControl<string | null | undefined>(undefined),
			conduit_committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_name: new FormControl<string | null | undefined>(undefined),
			conduit_committee_state: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street1: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street2: new FormControl<string | null | undefined>(undefined),
			conduit_committee_zip: new FormControl<number | null | undefined>(undefined),
			contribution_receipt_amount: new FormControl<number | null | undefined>(undefined),
			contribution_receipt_date: new FormControl<Date | null | undefined>(undefined),
			contributor_aggregate_ytd: new FormControl<number | null | undefined>(undefined),
			contributor_city: new FormControl<string | null | undefined>(undefined),
			contributor_employer: new FormControl<string | null | undefined>(undefined),
			contributor_first_name: new FormControl<string | null | undefined>(undefined),
			contributor_id: new FormControl<string | null | undefined>(undefined),
			contributor_last_name: new FormControl<string | null | undefined>(undefined),
			contributor_middle_name: new FormControl<string | null | undefined>(undefined),
			contributor_name: new FormControl<string | null | undefined>(undefined),
			contributor_occupation: new FormControl<string | null | undefined>(undefined),
			contributor_prefix: new FormControl<string | null | undefined>(undefined),
			contributor_state: new FormControl<string | null | undefined>(undefined),
			contributor_street_1: new FormControl<string | null | undefined>(undefined),
			contributor_street_2: new FormControl<string | null | undefined>(undefined),
			contributor_suffix: new FormControl<string | null | undefined>(undefined),
			contributor_zip: new FormControl<string | null | undefined>(undefined),
			donor_committee_name: new FormControl<string | null | undefined>(undefined),
			election_type: new FormControl<string | null | undefined>(undefined),
			election_type_full: new FormControl<string | null | undefined>(undefined),
			entity_type: new FormControl<string | null | undefined>(undefined),
			entity_type_desc: new FormControl<string | null | undefined>(undefined),
			fec_election_type_desc: new FormControl<string | null | undefined>(undefined),
			fec_election_year: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			filing_form: new FormControl<string | null | undefined>(undefined),
			image_number: new FormControl<string | null | undefined>(undefined),
			increased_limit: new FormControl<string | null | undefined>(undefined),
			is_individual: new FormControl<boolean | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			line_number_label: new FormControl<string | null | undefined>(undefined),
			link_id: new FormControl<number | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_code_full: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			memoed_subtotal: new FormControl<boolean | null | undefined>(undefined),
			national_committee_nonfederal_account: new FormControl<string | null | undefined>(undefined),
			original_sub_id: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			receipt_type: new FormControl<string | null | undefined>(undefined),
			receipt_type_desc: new FormControl<string | null | undefined>(undefined),
			receipt_type_full: new FormControl<string | null | undefined>(undefined),
			recipient_committee_designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			recipient_committee_org_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			recipient_committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			schedule_type: new FormControl<string | null | undefined>(undefined),
			schedule_type_full: new FormControl<string | null | undefined>(undefined),
			sub_id: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
			two_year_transaction_period: new FormControl<number | null | undefined>(undefined),
			unused_contbr_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleAByEmployer {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Employer of contributor as reported on the committee's filing
		 * Required
		 */
		employer: string;

		/** Sum of transactions */
		total?: number | null;
	}
	export interface ScheduleAByEmployerFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * Employer of contributor as reported on the committee's filing
		 * Required
		 */
		employer: FormControl<string | null | undefined>,

		/** Sum of transactions */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleAByEmployerFormGroup() {
		return new FormGroup<ScheduleAByEmployerFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			employer: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleAByEmployerPage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAByEmployer>;
	}
	export interface ScheduleAByEmployerPageFormProperties {
	}
	export function CreateScheduleAByEmployerPageFormGroup() {
		return new FormGroup<ScheduleAByEmployerPageFormProperties>({
		});

	}

	export interface ScheduleAByOccupation {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Occupation of contributor as reported on the committee's filing
		 * Required
		 */
		occupation: string;

		/** Sum of transactions */
		total?: number | null;
	}
	export interface ScheduleAByOccupationFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * Occupation of contributor as reported on the committee's filing
		 * Required
		 */
		occupation: FormControl<string | null | undefined>,

		/** Sum of transactions */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleAByOccupationFormGroup() {
		return new FormGroup<ScheduleAByOccupationFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			occupation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleAByOccupationPage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAByOccupation>;
	}
	export interface ScheduleAByOccupationPageFormProperties {
	}
	export function CreateScheduleAByOccupationPageFormGroup() {
		return new FormGroup<ScheduleAByOccupationPageFormProperties>({
		});

	}

	export interface ScheduleABySize {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/** Required */
		size: number;

		/** Sum of transactions */
		total?: number | null;
	}
	export interface ScheduleABySizeFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** Required */
		size: FormControl<number | null | undefined>,

		/** Sum of transactions */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleABySizeFormGroup() {
		return new FormGroup<ScheduleABySizeFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleABySizeCandidate {
		candidate_id?: string | null;
		count?: number | null;
		cycle?: number | null;
		size?: number | null;
		total?: number | null;
	}
	export interface ScheduleABySizeCandidateFormProperties {
		candidate_id: FormControl<string | null | undefined>,
		count: FormControl<number | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		size: FormControl<number | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleABySizeCandidateFormGroup() {
		return new FormGroup<ScheduleABySizeCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			size: new FormControl<number | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleABySizeCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleABySizeCandidate>;
	}
	export interface ScheduleABySizeCandidatePageFormProperties {
	}
	export function CreateScheduleABySizeCandidatePageFormGroup() {
		return new FormGroup<ScheduleABySizeCandidatePageFormProperties>({
		});

	}

	export interface ScheduleABySizePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleABySize>;
	}
	export interface ScheduleABySizePageFormProperties {
	}
	export function CreateScheduleABySizePageFormGroup() {
		return new FormGroup<ScheduleABySizePageFormProperties>({
		});

	}

	export interface ScheduleAByState {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * US state or territory
		 * Required
		 */
		state: string;

		/**
		 * US state or territory
		 * Required
		 */
		state_full: string;

		/** Sum of transactions */
		total?: number | null;
	}
	export interface ScheduleAByStateFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * US state or territory
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * US state or territory
		 * Required
		 */
		state_full: FormControl<string | null | undefined>,

		/** Sum of transactions */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleAByStateFormGroup() {
		return new FormGroup<ScheduleAByStateFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleAByStateCandidate {
		candidate_id?: string | null;
		count?: number | null;
		cycle?: number | null;
		state?: string | null;
		state_full?: string | null;
		total?: number | null;
	}
	export interface ScheduleAByStateCandidateFormProperties {
		candidate_id: FormControl<string | null | undefined>,
		count: FormControl<number | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		state: FormControl<string | null | undefined>,
		state_full: FormControl<string | null | undefined>,
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleAByStateCandidateFormGroup() {
		return new FormGroup<ScheduleAByStateCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			state_full: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleAByStateCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAByStateCandidate>;
	}
	export interface ScheduleAByStateCandidatePageFormProperties {
	}
	export function CreateScheduleAByStateCandidatePageFormGroup() {
		return new FormGroup<ScheduleAByStateCandidatePageFormProperties>({
		});

	}

	export interface ScheduleAByStatePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAByState>;
	}
	export interface ScheduleAByStatePageFormProperties {
	}
	export function CreateScheduleAByStatePageFormGroup() {
		return new FormGroup<ScheduleAByStatePageFormProperties>({
		});

	}

	export interface ScheduleAByStateRecipientTotals {

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full?: string | null;

		/** Number of records making up the total. */
		count?: number | null;

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle?: number | null;

		/** US state or territory */
		state?: string | null;

		/** US state or territory */
		state_full?: string | null;

		/** The calculated total. */
		total?: number | null;
	}
	export interface ScheduleAByStateRecipientTotalsFormProperties {

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/** Number of records making up the total. */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 */
		cycle: FormControl<number | null | undefined>,

		/** US state or territory */
		state: FormControl<string | null | undefined>,

		/** US state or territory */
		state_full: FormControl<string | null | undefined>,

		/** The calculated total. */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleAByStateRecipientTotalsFormGroup() {
		return new FormGroup<ScheduleAByStateRecipientTotalsFormProperties>({
			committee_type: new FormControl<string | null | undefined>(undefined),
			committee_type_full: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			state_full: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleAByStateRecipientTotalsPage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAByStateRecipientTotals>;
	}
	export interface ScheduleAByStateRecipientTotalsPageFormProperties {
	}
	export function CreateScheduleAByStateRecipientTotalsPageFormGroup() {
		return new FormGroup<ScheduleAByStateRecipientTotalsPageFormProperties>({
		});

	}

	export interface ScheduleAByZip {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/** US state or territory */
		state?: string | null;

		/** US state or territory */
		state_full?: string | null;

		/** Sum of transactions */
		total?: number | null;

		/** Required */
		zip: string;
	}
	export interface ScheduleAByZipFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/** US state or territory */
		state: FormControl<string | null | undefined>,

		/** US state or territory */
		state_full: FormControl<string | null | undefined>,

		/** Sum of transactions */
		total: FormControl<number | null | undefined>,

		/** Required */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateScheduleAByZipFormGroup() {
		return new FormGroup<ScheduleAByZipFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined),
			state_full: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ScheduleAByZipPage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAByZip>;
	}
	export interface ScheduleAByZipPageFormProperties {
	}
	export function CreateScheduleAByZipPageFormGroup() {
		return new FormGroup<ScheduleAByZipPageFormProperties>({
		});

	}

	export interface ScheduleAEfile {
		amendment_indicator?: string | null;
		back_reference_schedule_name?: string | null;
		back_reference_transaction_id?: string | null;
		beginning_image_number?: string | null;
		committee?: CommitteeHistory;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;
		conduit_committee_city?: string | null;
		conduit_committee_id?: string | null;
		conduit_committee_name?: string | null;
		conduit_committee_state?: string | null;
		conduit_committee_street1?: string | null;
		conduit_committee_street2?: string | null;
		conduit_committee_zip?: number | null;
		contribution_receipt_amount?: number | null;
		contribution_receipt_date?: Date | null;
		contributor_aggregate_ytd?: number | null;

		/** City of contributor */
		contributor_city?: string | null;

		/** Employer of contributor, filers need to make an effort to gather this information */
		contributor_employer?: string | null;
		contributor_first_name?: string | null;
		contributor_last_name?: string | null;
		contributor_middle_name?: string | null;
		contributor_name?: string | null;

		/** Occupation of contributor, filers need to make an effort to gather this information */
		contributor_occupation?: string | null;
		contributor_prefix?: string | null;

		/** State of contributor */
		contributor_state?: string | null;
		contributor_suffix?: string | null;

		/** Zip code of contributor */
		contributor_zip?: string | null;
		csv_url?: string | null;
		cycle?: number | null;
		entity_type?: string | null;
		fec_election_type_desc?: string | null;
		fec_url?: string | null;

		/** Required */
		file_number: number;
		filing?: EFilings;

		/**
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 */
		image_number?: string | null;
		line_number?: string | null;
		load_timestamp?: Date | null;
		memo_code?: string | null;
		memo_text?: string | null;
		pdf_url?: string | null;
		pgo?: string | null;

		/** Required */
		related_line_number: number;
		report_type?: string | null;
		transaction_id?: string | null;
	}
	export interface ScheduleAEfileFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		back_reference_schedule_name: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,
		conduit_committee_city: FormControl<string | null | undefined>,
		conduit_committee_id: FormControl<string | null | undefined>,
		conduit_committee_name: FormControl<string | null | undefined>,
		conduit_committee_state: FormControl<string | null | undefined>,
		conduit_committee_street1: FormControl<string | null | undefined>,
		conduit_committee_street2: FormControl<string | null | undefined>,
		conduit_committee_zip: FormControl<number | null | undefined>,
		contribution_receipt_amount: FormControl<number | null | undefined>,
		contribution_receipt_date: FormControl<Date | null | undefined>,
		contributor_aggregate_ytd: FormControl<number | null | undefined>,

		/** City of contributor */
		contributor_city: FormControl<string | null | undefined>,

		/** Employer of contributor, filers need to make an effort to gather this information */
		contributor_employer: FormControl<string | null | undefined>,
		contributor_first_name: FormControl<string | null | undefined>,
		contributor_last_name: FormControl<string | null | undefined>,
		contributor_middle_name: FormControl<string | null | undefined>,
		contributor_name: FormControl<string | null | undefined>,

		/** Occupation of contributor, filers need to make an effort to gather this information */
		contributor_occupation: FormControl<string | null | undefined>,
		contributor_prefix: FormControl<string | null | undefined>,

		/** State of contributor */
		contributor_state: FormControl<string | null | undefined>,
		contributor_suffix: FormControl<string | null | undefined>,

		/** Zip code of contributor */
		contributor_zip: FormControl<string | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		entity_type: FormControl<string | null | undefined>,
		fec_election_type_desc: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,

		/** Required */
		file_number: FormControl<number | null | undefined>,

		/**
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 */
		image_number: FormControl<string | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		load_timestamp: FormControl<Date | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		pgo: FormControl<string | null | undefined>,

		/** Required */
		related_line_number: FormControl<number | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleAEfileFormGroup() {
		return new FormGroup<ScheduleAEfileFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			back_reference_schedule_name: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_city: new FormControl<string | null | undefined>(undefined),
			conduit_committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_name: new FormControl<string | null | undefined>(undefined),
			conduit_committee_state: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street1: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street2: new FormControl<string | null | undefined>(undefined),
			conduit_committee_zip: new FormControl<number | null | undefined>(undefined),
			contribution_receipt_amount: new FormControl<number | null | undefined>(undefined),
			contribution_receipt_date: new FormControl<Date | null | undefined>(undefined),
			contributor_aggregate_ytd: new FormControl<number | null | undefined>(undefined),
			contributor_city: new FormControl<string | null | undefined>(undefined),
			contributor_employer: new FormControl<string | null | undefined>(undefined),
			contributor_first_name: new FormControl<string | null | undefined>(undefined),
			contributor_last_name: new FormControl<string | null | undefined>(undefined),
			contributor_middle_name: new FormControl<string | null | undefined>(undefined),
			contributor_name: new FormControl<string | null | undefined>(undefined),
			contributor_occupation: new FormControl<string | null | undefined>(undefined),
			contributor_prefix: new FormControl<string | null | undefined>(undefined),
			contributor_state: new FormControl<string | null | undefined>(undefined),
			contributor_suffix: new FormControl<string | null | undefined>(undefined),
			contributor_zip: new FormControl<string | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			entity_type: new FormControl<string | null | undefined>(undefined),
			fec_election_type_desc: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			image_number: new FormControl<string | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			load_timestamp: new FormControl<Date | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			pgo: new FormControl<string | null | undefined>(undefined),
			related_line_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			report_type: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleAEfilePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleAEfile>;
	}
	export interface ScheduleAEfilePageFormProperties {
	}
	export function CreateScheduleAEfilePageFormGroup() {
		return new FormGroup<ScheduleAEfilePageFormProperties>({
		});

	}

	export interface ScheduleAPage {
		pagination?: SeekInfo;
		results?: Array<ScheduleA>;
	}
	export interface ScheduleAPageFormProperties {
	}
	export function CreateScheduleAPageFormGroup() {
		return new FormGroup<ScheduleAPageFormProperties>({
		});

	}

	export interface ScheduleB {
		amendment_indicator?: string | null;
		amendment_indicator_desc?: string | null;
		back_reference_schedule_id?: string | null;
		back_reference_transaction_id?: string | null;
		beneficiary_committee_name?: string | null;
		candidate_first_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id?: string | null;
		candidate_last_name?: string | null;
		candidate_middle_name?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;
		candidate_office?: string | null;
		candidate_office_description?: string | null;
		candidate_office_district?: string | null;
		candidate_office_state?: string | null;
		candidate_office_state_full?: string | null;
		candidate_prefix?: string | null;
		candidate_suffix?: string | null;
		category_code?: string | null;
		category_code_full?: string | null;
		comm_dt?: Date | null;
		committee?: CommitteeHistory;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;
		conduit_committee_city?: string | null;
		conduit_committee_name?: string | null;
		conduit_committee_state?: string | null;
		conduit_committee_street1?: string | null;
		conduit_committee_street2?: string | null;
		conduit_committee_zip?: number | null;
		disbursement_amount?: number | null;
		disbursement_date?: Date | null;
		disbursement_description?: string | null;
		disbursement_purpose_category?: string | null;
		disbursement_type?: string | null;
		disbursement_type_description?: string | null;
		election_type?: string | null;
		election_type_full?: string | null;
		entity_type?: string | null;
		entity_type_desc?: string | null;
		fec_election_type_desc?: string | null;
		fec_election_year?: string | null;
		file_number?: number | null;
		filing_form?: string | null;
		image_number?: string | null;
		line_number?: string | null;
		line_number_label?: string | null;
		link_id?: number | null;
		load_date?: Date | null;
		memo_code?: string | null;
		memo_code_full?: string | null;
		memo_text?: string | null;
		memoed_subtotal?: boolean | null;
		national_committee_nonfederal_account?: string | null;
		original_sub_id?: string | null;
		payee_employer?: string | null;
		payee_first_name?: string | null;
		payee_last_name?: string | null;
		payee_middle_name?: string | null;
		payee_occupation?: string | null;
		payee_prefix?: string | null;
		payee_suffix?: string | null;
		pdf_url?: string | null;
		recipient_city?: string | null;
		recipient_committee?: CommitteeHistory;
		recipient_committee_id?: string | null;
		recipient_name?: string | null;
		recipient_state?: string | null;
		recipient_zip?: string | null;
		ref_disp_excess_flg?: string | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		schedule_type?: string | null;
		schedule_type_full?: string | null;
		semi_annual_bundled_refund?: number | null;

		/** Max length: 1 */
		spender_committee_designation?: string | null;

		/** Max length: 1 */
		spender_committee_org_type?: string | null;

		/** Max length: 1 */
		spender_committee_type?: string | null;
		sub_id?: string | null;
		transaction_id?: string | null;

		/**
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 */
		two_year_transaction_period?: number | null;
		unused_recipient_committee_id?: string | null;
	}
	export interface ScheduleBFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_desc: FormControl<string | null | undefined>,
		back_reference_schedule_id: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		beneficiary_committee_name: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id: FormControl<string | null | undefined>,
		candidate_last_name: FormControl<string | null | undefined>,
		candidate_middle_name: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,
		candidate_office: FormControl<string | null | undefined>,
		candidate_office_description: FormControl<string | null | undefined>,
		candidate_office_district: FormControl<string | null | undefined>,
		candidate_office_state: FormControl<string | null | undefined>,
		candidate_office_state_full: FormControl<string | null | undefined>,
		candidate_prefix: FormControl<string | null | undefined>,
		candidate_suffix: FormControl<string | null | undefined>,
		category_code: FormControl<string | null | undefined>,
		category_code_full: FormControl<string | null | undefined>,
		comm_dt: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,
		conduit_committee_city: FormControl<string | null | undefined>,
		conduit_committee_name: FormControl<string | null | undefined>,
		conduit_committee_state: FormControl<string | null | undefined>,
		conduit_committee_street1: FormControl<string | null | undefined>,
		conduit_committee_street2: FormControl<string | null | undefined>,
		conduit_committee_zip: FormControl<number | null | undefined>,
		disbursement_amount: FormControl<number | null | undefined>,
		disbursement_date: FormControl<Date | null | undefined>,
		disbursement_description: FormControl<string | null | undefined>,
		disbursement_purpose_category: FormControl<string | null | undefined>,
		disbursement_type: FormControl<string | null | undefined>,
		disbursement_type_description: FormControl<string | null | undefined>,
		election_type: FormControl<string | null | undefined>,
		election_type_full: FormControl<string | null | undefined>,
		entity_type: FormControl<string | null | undefined>,
		entity_type_desc: FormControl<string | null | undefined>,
		fec_election_type_desc: FormControl<string | null | undefined>,
		fec_election_year: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		filing_form: FormControl<string | null | undefined>,
		image_number: FormControl<string | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		line_number_label: FormControl<string | null | undefined>,
		link_id: FormControl<number | null | undefined>,
		load_date: FormControl<Date | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_code_full: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,
		memoed_subtotal: FormControl<boolean | null | undefined>,
		national_committee_nonfederal_account: FormControl<string | null | undefined>,
		original_sub_id: FormControl<string | null | undefined>,
		payee_employer: FormControl<string | null | undefined>,
		payee_first_name: FormControl<string | null | undefined>,
		payee_last_name: FormControl<string | null | undefined>,
		payee_middle_name: FormControl<string | null | undefined>,
		payee_occupation: FormControl<string | null | undefined>,
		payee_prefix: FormControl<string | null | undefined>,
		payee_suffix: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		recipient_city: FormControl<string | null | undefined>,
		recipient_committee_id: FormControl<string | null | undefined>,
		recipient_name: FormControl<string | null | undefined>,
		recipient_state: FormControl<string | null | undefined>,
		recipient_zip: FormControl<string | null | undefined>,
		ref_disp_excess_flg: FormControl<string | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		schedule_type: FormControl<string | null | undefined>,
		schedule_type_full: FormControl<string | null | undefined>,
		semi_annual_bundled_refund: FormControl<number | null | undefined>,

		/** Max length: 1 */
		spender_committee_designation: FormControl<string | null | undefined>,

		/** Max length: 1 */
		spender_committee_org_type: FormControl<string | null | undefined>,

		/** Max length: 1 */
		spender_committee_type: FormControl<string | null | undefined>,
		sub_id: FormControl<string | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 */
		two_year_transaction_period: FormControl<number | null | undefined>,
		unused_recipient_committee_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleBFormGroup() {
		return new FormGroup<ScheduleBFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_desc: new FormControl<string | null | undefined>(undefined),
			back_reference_schedule_id: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			beneficiary_committee_name: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_middle_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_description: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			candidate_office_state: new FormControl<string | null | undefined>(undefined),
			candidate_office_state_full: new FormControl<string | null | undefined>(undefined),
			candidate_prefix: new FormControl<string | null | undefined>(undefined),
			candidate_suffix: new FormControl<string | null | undefined>(undefined),
			category_code: new FormControl<string | null | undefined>(undefined),
			category_code_full: new FormControl<string | null | undefined>(undefined),
			comm_dt: new FormControl<Date | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_city: new FormControl<string | null | undefined>(undefined),
			conduit_committee_name: new FormControl<string | null | undefined>(undefined),
			conduit_committee_state: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street1: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street2: new FormControl<string | null | undefined>(undefined),
			conduit_committee_zip: new FormControl<number | null | undefined>(undefined),
			disbursement_amount: new FormControl<number | null | undefined>(undefined),
			disbursement_date: new FormControl<Date | null | undefined>(undefined),
			disbursement_description: new FormControl<string | null | undefined>(undefined),
			disbursement_purpose_category: new FormControl<string | null | undefined>(undefined),
			disbursement_type: new FormControl<string | null | undefined>(undefined),
			disbursement_type_description: new FormControl<string | null | undefined>(undefined),
			election_type: new FormControl<string | null | undefined>(undefined),
			election_type_full: new FormControl<string | null | undefined>(undefined),
			entity_type: new FormControl<string | null | undefined>(undefined),
			entity_type_desc: new FormControl<string | null | undefined>(undefined),
			fec_election_type_desc: new FormControl<string | null | undefined>(undefined),
			fec_election_year: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			filing_form: new FormControl<string | null | undefined>(undefined),
			image_number: new FormControl<string | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			line_number_label: new FormControl<string | null | undefined>(undefined),
			link_id: new FormControl<number | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_code_full: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			memoed_subtotal: new FormControl<boolean | null | undefined>(undefined),
			national_committee_nonfederal_account: new FormControl<string | null | undefined>(undefined),
			original_sub_id: new FormControl<string | null | undefined>(undefined),
			payee_employer: new FormControl<string | null | undefined>(undefined),
			payee_first_name: new FormControl<string | null | undefined>(undefined),
			payee_last_name: new FormControl<string | null | undefined>(undefined),
			payee_middle_name: new FormControl<string | null | undefined>(undefined),
			payee_occupation: new FormControl<string | null | undefined>(undefined),
			payee_prefix: new FormControl<string | null | undefined>(undefined),
			payee_suffix: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			recipient_city: new FormControl<string | null | undefined>(undefined),
			recipient_committee_id: new FormControl<string | null | undefined>(undefined),
			recipient_name: new FormControl<string | null | undefined>(undefined),
			recipient_state: new FormControl<string | null | undefined>(undefined),
			recipient_zip: new FormControl<string | null | undefined>(undefined),
			ref_disp_excess_flg: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			schedule_type: new FormControl<string | null | undefined>(undefined),
			schedule_type_full: new FormControl<string | null | undefined>(undefined),
			semi_annual_bundled_refund: new FormControl<number | null | undefined>(undefined),
			spender_committee_designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			spender_committee_org_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			spender_committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			sub_id: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
			two_year_transaction_period: new FormControl<number | null | undefined>(undefined),
			unused_recipient_committee_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleBByPurpose {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Number of records making up the total.
		 */
		memo_count?: number | null;

		/**
		 * Schedule B disbursements aggregated by memoed items only
		 */
		memo_total?: number | null;

		/**
		 * Purpose of the expenditure
		 * Required
		 */
		purpose: string;

		/**
		 * Schedule B disbursements aggregated by non-memoed items only
		 */
		total?: number | null;
	}
	export interface ScheduleBByPurposeFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		memo_count: FormControl<number | null | undefined>,

		/**
		 * Schedule B disbursements aggregated by memoed items only
		 */
		memo_total: FormControl<number | null | undefined>,

		/**
		 * Purpose of the expenditure
		 * Required
		 */
		purpose: FormControl<string | null | undefined>,

		/**
		 * Schedule B disbursements aggregated by non-memoed items only
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleBByPurposeFormGroup() {
		return new FormGroup<ScheduleBByPurposeFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			memo_count: new FormControl<number | null | undefined>(undefined),
			memo_total: new FormControl<number | null | undefined>(undefined),
			purpose: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleBByPurposePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleBByPurpose>;
	}
	export interface ScheduleBByPurposePageFormProperties {
	}
	export function CreateScheduleBByPurposePageFormGroup() {
		return new FormGroup<ScheduleBByPurposePageFormProperties>({
		});

	}

	export interface ScheduleBByRecipient {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/** Disbursements */
		committee_total_disbursements?: number | null;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Number of records making up the total.
		 */
		memo_count?: number | null;

		/**
		 * Schedule B disbursements aggregated by memoed items only
		 */
		memo_total?: number | null;
		recipient_disbursement_percent?: number | null;

		/**
		 * Name of the entity receiving the disbursement
		 * Required
		 */
		recipient_name: string;

		/**
		 * Schedule B disbursements aggregated by non-memoed items only
		 */
		total?: number | null;
	}
	export interface ScheduleBByRecipientFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/** Disbursements */
		committee_total_disbursements: FormControl<number | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		memo_count: FormControl<number | null | undefined>,

		/**
		 * Schedule B disbursements aggregated by memoed items only
		 */
		memo_total: FormControl<number | null | undefined>,
		recipient_disbursement_percent: FormControl<number | null | undefined>,

		/**
		 * Name of the entity receiving the disbursement
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * Schedule B disbursements aggregated by non-memoed items only
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleBByRecipientFormGroup() {
		return new FormGroup<ScheduleBByRecipientFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_total_disbursements: new FormControl<number | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			memo_count: new FormControl<number | null | undefined>(undefined),
			memo_total: new FormControl<number | null | undefined>(undefined),
			recipient_disbursement_percent: new FormControl<number | null | undefined>(undefined),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleBByRecipientID {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;
		committee_name?: string | null;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Number of records making up the total.
		 */
		memo_count?: number | null;

		/**
		 * Schedule B disbursements aggregated by memoed items only
		 */
		memo_total?: number | null;

		/**
		 * The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
		 * Required
		 */
		recipient_id: string;
		recipient_name?: string | null;

		/**
		 * Schedule B disbursements aggregated by non-memoed items only
		 */
		total?: number | null;
	}
	export interface ScheduleBByRecipientIDFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		memo_count: FormControl<number | null | undefined>,

		/**
		 * Schedule B disbursements aggregated by memoed items only
		 */
		memo_total: FormControl<number | null | undefined>,

		/**
		 * The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * Schedule B disbursements aggregated by non-memoed items only
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleBByRecipientIDFormGroup() {
		return new FormGroup<ScheduleBByRecipientIDFormProperties>({
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_name: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			memo_count: new FormControl<number | null | undefined>(undefined),
			memo_total: new FormControl<number | null | undefined>(undefined),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleBByRecipientIDPage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleBByRecipientID>;
	}
	export interface ScheduleBByRecipientIDPageFormProperties {
	}
	export function CreateScheduleBByRecipientIDPageFormGroup() {
		return new FormGroup<ScheduleBByRecipientIDPageFormProperties>({
		});

	}

	export interface ScheduleBByRecipientPage {
		pagination?: SeekInfo;
		results?: Array<ScheduleBByRecipient>;
	}
	export interface ScheduleBByRecipientPageFormProperties {
	}
	export function CreateScheduleBByRecipientPageFormGroup() {
		return new FormGroup<ScheduleBByRecipientPageFormProperties>({
		});

	}

	export interface ScheduleBEfile {
		amendment_indicator?: string | null;
		back_reference_schedule_name?: string | null;
		back_reference_transaction_id?: string | null;
		beginning_image_number?: string | null;
		beneficiary_committee_name?: string | null;
		candidate_office?: string | null;
		candidate_office_district?: string | null;
		committee?: CommitteeHistory;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;
		csv_url?: string | null;
		disbursement_amount?: number | null;
		disbursement_date?: Date | null;
		disbursement_description?: string | null;
		disbursement_type?: string | null;
		entity_type?: string | null;
		fec_url?: string | null;

		/** Required */
		file_number: number;
		filing?: EFilings;

		/**
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 */
		image_number?: string | null;
		is_notice?: boolean | null;
		line_number?: string | null;
		load_timestamp?: Date | null;
		memo_code?: string | null;
		memo_text?: string | null;
		payee_name?: string | null;
		pdf_url?: string | null;
		recipient_city?: string | null;
		recipient_name?: string | null;
		recipient_prefix?: string | null;
		recipient_state?: string | null;
		recipient_suffix?: string | null;
		recipient_zip?: string | null;

		/** Required */
		related_line_number: number;
		report_type?: string | null;
		semi_annual_bundled_refund?: number | null;
		transaction_id?: string | null;
	}
	export interface ScheduleBEfileFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		back_reference_schedule_name: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		beneficiary_committee_name: FormControl<string | null | undefined>,
		candidate_office: FormControl<string | null | undefined>,
		candidate_office_district: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,
		csv_url: FormControl<string | null | undefined>,
		disbursement_amount: FormControl<number | null | undefined>,
		disbursement_date: FormControl<Date | null | undefined>,
		disbursement_description: FormControl<string | null | undefined>,
		disbursement_type: FormControl<string | null | undefined>,
		entity_type: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,

		/** Required */
		file_number: FormControl<number | null | undefined>,

		/**
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 */
		image_number: FormControl<string | null | undefined>,
		is_notice: FormControl<boolean | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		load_timestamp: FormControl<Date | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,
		payee_name: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		recipient_city: FormControl<string | null | undefined>,
		recipient_name: FormControl<string | null | undefined>,
		recipient_prefix: FormControl<string | null | undefined>,
		recipient_state: FormControl<string | null | undefined>,
		recipient_suffix: FormControl<string | null | undefined>,
		recipient_zip: FormControl<string | null | undefined>,

		/** Required */
		related_line_number: FormControl<number | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		semi_annual_bundled_refund: FormControl<number | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleBEfileFormGroup() {
		return new FormGroup<ScheduleBEfileFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			back_reference_schedule_name: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			beneficiary_committee_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			disbursement_amount: new FormControl<number | null | undefined>(undefined),
			disbursement_date: new FormControl<Date | null | undefined>(undefined),
			disbursement_description: new FormControl<string | null | undefined>(undefined),
			disbursement_type: new FormControl<string | null | undefined>(undefined),
			entity_type: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			image_number: new FormControl<string | null | undefined>(undefined),
			is_notice: new FormControl<boolean | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			load_timestamp: new FormControl<Date | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			payee_name: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			recipient_city: new FormControl<string | null | undefined>(undefined),
			recipient_name: new FormControl<string | null | undefined>(undefined),
			recipient_prefix: new FormControl<string | null | undefined>(undefined),
			recipient_state: new FormControl<string | null | undefined>(undefined),
			recipient_suffix: new FormControl<string | null | undefined>(undefined),
			recipient_zip: new FormControl<string | null | undefined>(undefined),
			related_line_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			report_type: new FormControl<string | null | undefined>(undefined),
			semi_annual_bundled_refund: new FormControl<number | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleBEfilePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleBEfile>;
	}
	export interface ScheduleBEfilePageFormProperties {
	}
	export function CreateScheduleBEfilePageFormGroup() {
		return new FormGroup<ScheduleBEfilePageFormProperties>({
		});

	}

	export interface ScheduleBPage {
		pagination?: SeekInfo;
		results?: Array<ScheduleB>;
	}
	export interface ScheduleBPageFormProperties {
	}
	export function CreateScheduleBPageFormGroup() {
		return new FormGroup<ScheduleBPageFormProperties>({
		});

	}

	export interface ScheduleE {
		action_code?: string | null;
		action_code_full?: string | null;

		/**
		 * Amendent types:
		 * -N   new
		 * -A   amendment
		 * -T   terminated
		 * -C   consolidated
		 * -M   multi-candidate
		 * -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 */
		amendment_indicator?: string | null;

		/**
		 * Number of times the report has been amended.
		 */
		amendment_number?: number | null;
		back_reference_schedule_name?: string | null;
		back_reference_transaction_id?: string | null;
		candidate?: string | null;
		candidate_first_name?: string | null;
		candidate_id?: string | null;
		candidate_last_name?: string | null;
		candidate_middle_name?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;

		/** Federal office candidate runs for: H, S or P */
		candidate_office?: string | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		candidate_office_district?: string | null;

		/** US state or territory */
		candidate_office_state?: string | null;

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party?: string | null;
		candidate_prefix?: string | null;
		candidate_suffix?: string | null;
		category_code?: string | null;
		category_code_full?: string | null;
		committee?: CommitteeHistory;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;
		conduit_committee_city?: string | null;
		conduit_committee_id?: string | null;
		conduit_committee_name?: string | null;
		conduit_committee_state?: string | null;
		conduit_committee_street1?: string | null;
		conduit_committee_street2?: string | null;
		conduit_committee_zip?: number | null;
		dissemination_date?: Date | null;

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		election_type?: string | null;

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		election_type_full?: string | null;
		expenditure_amount?: number | null;
		expenditure_date?: Date | null;
		expenditure_description?: string | null;
		file_number?: number | null;
		filer_first_name?: string | null;
		filer_last_name?: string | null;
		filer_middle_name?: string | null;
		filer_prefix?: string | null;
		filer_suffix?: string | null;
		filing_date?: Date | null;
		filing_form?: string | null;
		image_number?: string | null;
		independent_sign_date?: Date | null;
		independent_sign_name?: string | null;
		is_notice?: boolean | null;
		line_number?: string | null;
		link_id?: number | null;
		memo_code?: string | null;
		memo_code_full?: string | null;
		memo_text?: string | null;
		memoed_subtotal?: boolean | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		notary_commission_expiration_date?: Date | null;
		notary_sign_date?: Date | null;
		notary_sign_name?: string | null;
		office_total_ytd?: number | null;
		original_sub_id?: string | null;
		payee_city?: string | null;
		payee_first_name?: string | null;
		payee_last_name?: string | null;
		payee_middle_name?: string | null;
		payee_name?: string | null;
		payee_prefix?: string | null;
		payee_state?: string | null;
		payee_street_1?: string | null;
		payee_street_2?: string | null;
		payee_suffix?: string | null;
		payee_zip?: string | null;
		pdf_url?: string | null;
		previous_file_number?: number | null;

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type?: string | null;

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year?: number | null;
		schedule_type?: string | null;
		schedule_type_full?: string | null;
		sub_id?: string | null;
		support_oppose_indicator?: string | null;
		transaction_id?: string | null;
	}
	export interface ScheduleEFormProperties {
		action_code: FormControl<string | null | undefined>,
		action_code_full: FormControl<string | null | undefined>,

		/**
		 * Amendent types:
		 * -N   new
		 * -A   amendment
		 * -T   terminated
		 * -C   consolidated
		 * -M   multi-candidate
		 * -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 */
		amendment_indicator: FormControl<string | null | undefined>,

		/**
		 * Number of times the report has been amended.
		 */
		amendment_number: FormControl<number | null | undefined>,
		back_reference_schedule_name: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		candidate: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_last_name: FormControl<string | null | undefined>,
		candidate_middle_name: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,

		/** Federal office candidate runs for: H, S or P */
		candidate_office: FormControl<string | null | undefined>,

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		candidate_office_district: FormControl<string | null | undefined>,

		/** US state or territory */
		candidate_office_state: FormControl<string | null | undefined>,

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party: FormControl<string | null | undefined>,
		candidate_prefix: FormControl<string | null | undefined>,
		candidate_suffix: FormControl<string | null | undefined>,
		category_code: FormControl<string | null | undefined>,
		category_code_full: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,
		conduit_committee_city: FormControl<string | null | undefined>,
		conduit_committee_id: FormControl<string | null | undefined>,
		conduit_committee_name: FormControl<string | null | undefined>,
		conduit_committee_state: FormControl<string | null | undefined>,
		conduit_committee_street1: FormControl<string | null | undefined>,
		conduit_committee_street2: FormControl<string | null | undefined>,
		conduit_committee_zip: FormControl<number | null | undefined>,
		dissemination_date: FormControl<Date | null | undefined>,

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		election_type: FormControl<string | null | undefined>,

		/**
		 * Election type
		 * Convention, Primary,
		 * General, Special,
		 * Runoff etc.
		 */
		election_type_full: FormControl<string | null | undefined>,
		expenditure_amount: FormControl<number | null | undefined>,
		expenditure_date: FormControl<Date | null | undefined>,
		expenditure_description: FormControl<string | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		filer_first_name: FormControl<string | null | undefined>,
		filer_last_name: FormControl<string | null | undefined>,
		filer_middle_name: FormControl<string | null | undefined>,
		filer_prefix: FormControl<string | null | undefined>,
		filer_suffix: FormControl<string | null | undefined>,
		filing_date: FormControl<Date | null | undefined>,
		filing_form: FormControl<string | null | undefined>,
		image_number: FormControl<string | null | undefined>,
		independent_sign_date: FormControl<Date | null | undefined>,
		independent_sign_name: FormControl<string | null | undefined>,
		is_notice: FormControl<boolean | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		link_id: FormControl<number | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_code_full: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,
		memoed_subtotal: FormControl<boolean | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		notary_commission_expiration_date: FormControl<Date | null | undefined>,
		notary_sign_date: FormControl<Date | null | undefined>,
		notary_sign_name: FormControl<string | null | undefined>,
		office_total_ytd: FormControl<number | null | undefined>,
		original_sub_id: FormControl<string | null | undefined>,
		payee_city: FormControl<string | null | undefined>,
		payee_first_name: FormControl<string | null | undefined>,
		payee_last_name: FormControl<string | null | undefined>,
		payee_middle_name: FormControl<string | null | undefined>,
		payee_name: FormControl<string | null | undefined>,
		payee_prefix: FormControl<string | null | undefined>,
		payee_state: FormControl<string | null | undefined>,
		payee_street_1: FormControl<string | null | undefined>,
		payee_street_2: FormControl<string | null | undefined>,
		payee_suffix: FormControl<string | null | undefined>,
		payee_zip: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,
		previous_file_number: FormControl<number | null | undefined>,

		/**
		 * Name of report where the underlying data comes from:
		 * - 10D Pre-Election
		 * - 10G Pre-General
		 * - 10P Pre-Primary
		 * - 10R Pre-Run-Off
		 * - 10S Pre-Special
		 * - 12C Pre-Convention
		 * - 12G Pre-General
		 * - 12P Pre-Primary
		 * - 12R Pre-Run-Off
		 * - 12S Pre-Special
		 * - 30D Post-Election
		 * - 30G Post-General
		 * - 30P Post-Primary
		 * - 30R Post-Run-Off
		 * - 30S Post-Special
		 * - 60D Post-Convention
		 * - M1  January Monthly
		 * - M10 October Monthly
		 * - M11 November Monthly
		 * - M12 December Monthly
		 * - M2  February Monthly
		 * - M3  March Monthly
		 * - M4  April Monthly
		 * - M5  May Monthly
		 * - M6  June Monthly
		 * - M7  July Monthly
		 * - M8  August Monthly
		 * - M9  September Monthly
		 * - MY  Mid-Year Report
		 * - Q1  April Quarterly
		 * - Q2  July Quarterly
		 * - Q3  October Quarterly
		 * - TER Termination Report
		 * - YE  Year-End
		 * - ADJ COMP ADJUST AMEND
		 * - CA  COMPREHENSIVE AMEND
		 * - 90S Post Inaugural Supplement
		 * - 90D Post Inaugural
		 * - 48  48 Hour Notification
		 * - 24  24 Hour Notification
		 * - M7S July Monthly/Semi-Annual
		 * - MSA Monthly Semi-Annual (MY)
		 * - MYS Monthly Year End/Semi-Annual
		 * - Q2S July Quarterly/Semi-Annual
		 * - QSA Quarterly Semi-Annual (MY)
		 * - QYS Quarterly Year End/Semi-Annual
		 * - QYE Quarterly Semi-Annual (YE)
		 * - QMS Quarterly Mid-Year/ Semi-Annual
		 * - MSY Monthly Semi-Annual (YE)
		 */
		report_type: FormControl<string | null | undefined>,

		/**
		 * Forms with coverage date -
		 * year from the coverage ending date.
		 * Forms without coverage date -
		 * year from the receipt date.
		 */
		report_year: FormControl<number | null | undefined>,
		schedule_type: FormControl<string | null | undefined>,
		schedule_type_full: FormControl<string | null | undefined>,
		sub_id: FormControl<string | null | undefined>,
		support_oppose_indicator: FormControl<string | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleEFormGroup() {
		return new FormGroup<ScheduleEFormProperties>({
			action_code: new FormControl<string | null | undefined>(undefined),
			action_code_full: new FormControl<string | null | undefined>(undefined),
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_number: new FormControl<number | null | undefined>(undefined),
			back_reference_schedule_name: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			candidate: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_middle_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			candidate_office_state: new FormControl<string | null | undefined>(undefined),
			candidate_party: new FormControl<string | null | undefined>(undefined),
			candidate_prefix: new FormControl<string | null | undefined>(undefined),
			candidate_suffix: new FormControl<string | null | undefined>(undefined),
			category_code: new FormControl<string | null | undefined>(undefined),
			category_code_full: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_city: new FormControl<string | null | undefined>(undefined),
			conduit_committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_name: new FormControl<string | null | undefined>(undefined),
			conduit_committee_state: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street1: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street2: new FormControl<string | null | undefined>(undefined),
			conduit_committee_zip: new FormControl<number | null | undefined>(undefined),
			dissemination_date: new FormControl<Date | null | undefined>(undefined),
			election_type: new FormControl<string | null | undefined>(undefined),
			election_type_full: new FormControl<string | null | undefined>(undefined),
			expenditure_amount: new FormControl<number | null | undefined>(undefined),
			expenditure_date: new FormControl<Date | null | undefined>(undefined),
			expenditure_description: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			filer_first_name: new FormControl<string | null | undefined>(undefined),
			filer_last_name: new FormControl<string | null | undefined>(undefined),
			filer_middle_name: new FormControl<string | null | undefined>(undefined),
			filer_prefix: new FormControl<string | null | undefined>(undefined),
			filer_suffix: new FormControl<string | null | undefined>(undefined),
			filing_date: new FormControl<Date | null | undefined>(undefined),
			filing_form: new FormControl<string | null | undefined>(undefined),
			image_number: new FormControl<string | null | undefined>(undefined),
			independent_sign_date: new FormControl<Date | null | undefined>(undefined),
			independent_sign_name: new FormControl<string | null | undefined>(undefined),
			is_notice: new FormControl<boolean | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			link_id: new FormControl<number | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_code_full: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			memoed_subtotal: new FormControl<boolean | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			notary_commission_expiration_date: new FormControl<Date | null | undefined>(undefined),
			notary_sign_date: new FormControl<Date | null | undefined>(undefined),
			notary_sign_name: new FormControl<string | null | undefined>(undefined),
			office_total_ytd: new FormControl<number | null | undefined>(undefined),
			original_sub_id: new FormControl<string | null | undefined>(undefined),
			payee_city: new FormControl<string | null | undefined>(undefined),
			payee_first_name: new FormControl<string | null | undefined>(undefined),
			payee_last_name: new FormControl<string | null | undefined>(undefined),
			payee_middle_name: new FormControl<string | null | undefined>(undefined),
			payee_name: new FormControl<string | null | undefined>(undefined),
			payee_prefix: new FormControl<string | null | undefined>(undefined),
			payee_state: new FormControl<string | null | undefined>(undefined),
			payee_street_1: new FormControl<string | null | undefined>(undefined),
			payee_street_2: new FormControl<string | null | undefined>(undefined),
			payee_suffix: new FormControl<string | null | undefined>(undefined),
			payee_zip: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			previous_file_number: new FormControl<number | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			schedule_type: new FormControl<string | null | undefined>(undefined),
			schedule_type_full: new FormControl<string | null | undefined>(undefined),
			sub_id: new FormControl<string | null | undefined>(undefined),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleEByCandidate {
		candidate_id?: string | null;
		candidate_name?: string | null;
		committee_id?: string | null;
		committee_name?: string | null;

		/**
		 * Number of records making up the total.
		 */
		count?: number | null;

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		 * Required
		 */
		support_oppose_indicator: string;

		/** Sum of transactions */
		total?: number | null;
	}
	export interface ScheduleEByCandidateFormProperties {
		candidate_id: FormControl<string | null | undefined>,
		candidate_name: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		committee_name: FormControl<string | null | undefined>,

		/**
		 * Number of records making up the total.
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,

		/**
		 * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		 * Required
		 */
		support_oppose_indicator: FormControl<string | null | undefined>,

		/** Sum of transactions */
		total: FormControl<number | null | undefined>,
	}
	export function CreateScheduleEByCandidateFormGroup() {
		return new FormGroup<ScheduleEByCandidateFormProperties>({
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			committee_name: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ScheduleEByCandidatePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleEByCandidate>;
	}
	export interface ScheduleEByCandidatePageFormProperties {
	}
	export function CreateScheduleEByCandidatePageFormGroup() {
		return new FormGroup<ScheduleEByCandidatePageFormProperties>({
		});

	}

	export interface ScheduleEEfile {
		amendment_indicator?: string | null;
		back_reference_schedule_name?: string | null;
		back_reference_transaction_id?: string | null;
		beginning_image_number?: string | null;
		candidate_first_name?: string | null;
		candidate_id?: string | null;
		candidate_middle_name?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;

		/** Federal office candidate runs for: H, S or P */
		candidate_office?: string | null;

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		candidate_office_district?: string | null;

		/** US state or territory */
		candidate_office_state?: string | null;

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party?: string | null;
		candidate_prefix?: string | null;
		candidate_suffix?: string | null;
		category_code?: string | null;
		committee?: CommitteeHistory;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id?: string | null;
		csv_url?: string | null;

		/**
		 * Date when a PAC distrubutes or disseminates an independent expenditure
		 * and pays for it in the same reporting period
		 */
		dissemination_date?: Date | null;
		entity_type?: string | null;
		expenditure_amount?: number | null;
		expenditure_date?: Date | null;
		expenditure_description?: string | null;
		fec_url?: string | null;

		/** Required */
		file_number: number;
		filer_first_name?: string | null;
		filer_last_name?: string | null;
		filer_middle_name?: string | null;
		filer_prefix?: string | null;
		filer_suffix?: string | null;
		filing?: EFilings;
		filing_form?: string | null;

		/**
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 */
		image_number?: string | null;
		is_notice?: boolean | null;
		line_number?: string | null;
		load_timestamp?: Date | null;
		memo_code?: string | null;
		memo_text?: string | null;

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent?: boolean | null;
		notary_sign_date?: Date | null;
		office_total_ytd?: number | null;
		payee_city?: string | null;
		payee_first_name?: string | null;
		payee_last_name?: string | null;
		payee_middle_name?: string | null;
		payee_name?: string | null;
		payee_prefix?: string | null;
		payee_state?: string | null;
		payee_street_1?: string | null;
		payee_street_2?: string | null;
		payee_suffix?: string | null;
		payee_zip?: string | null;
		pdf_url?: string | null;

		/** Required */
		related_line_number: number;
		report_type?: string | null;

		/** Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. */
		support_oppose_indicator?: string | null;
		transaction_id?: string | null;
	}
	export interface ScheduleEEfileFormProperties {
		amendment_indicator: FormControl<string | null | undefined>,
		back_reference_schedule_name: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		beginning_image_number: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,
		candidate_id: FormControl<string | null | undefined>,
		candidate_middle_name: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,

		/** Federal office candidate runs for: H, S or P */
		candidate_office: FormControl<string | null | undefined>,

		/** Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00. */
		candidate_office_district: FormControl<string | null | undefined>,

		/** US state or territory */
		candidate_office_state: FormControl<string | null | undefined>,

		/** Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party. */
		candidate_party: FormControl<string | null | undefined>,
		candidate_prefix: FormControl<string | null | undefined>,
		candidate_suffix: FormControl<string | null | undefined>,
		category_code: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		committee_id: FormControl<string | null | undefined>,
		csv_url: FormControl<string | null | undefined>,

		/**
		 * Date when a PAC distrubutes or disseminates an independent expenditure
		 * and pays for it in the same reporting period
		 */
		dissemination_date: FormControl<Date | null | undefined>,
		entity_type: FormControl<string | null | undefined>,
		expenditure_amount: FormControl<number | null | undefined>,
		expenditure_date: FormControl<Date | null | undefined>,
		expenditure_description: FormControl<string | null | undefined>,
		fec_url: FormControl<string | null | undefined>,

		/** Required */
		file_number: FormControl<number | null | undefined>,
		filer_first_name: FormControl<string | null | undefined>,
		filer_last_name: FormControl<string | null | undefined>,
		filer_middle_name: FormControl<string | null | undefined>,
		filer_prefix: FormControl<string | null | undefined>,
		filer_suffix: FormControl<string | null | undefined>,
		filing_form: FormControl<string | null | undefined>,

		/**
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 */
		image_number: FormControl<string | null | undefined>,
		is_notice: FormControl<boolean | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		load_timestamp: FormControl<Date | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,

		/**
		 * Report is either new or is the most-recently filed amendment
		 */
		most_recent: FormControl<boolean | null | undefined>,
		notary_sign_date: FormControl<Date | null | undefined>,
		office_total_ytd: FormControl<number | null | undefined>,
		payee_city: FormControl<string | null | undefined>,
		payee_first_name: FormControl<string | null | undefined>,
		payee_last_name: FormControl<string | null | undefined>,
		payee_middle_name: FormControl<string | null | undefined>,
		payee_name: FormControl<string | null | undefined>,
		payee_prefix: FormControl<string | null | undefined>,
		payee_state: FormControl<string | null | undefined>,
		payee_street_1: FormControl<string | null | undefined>,
		payee_street_2: FormControl<string | null | undefined>,
		payee_suffix: FormControl<string | null | undefined>,
		payee_zip: FormControl<string | null | undefined>,
		pdf_url: FormControl<string | null | undefined>,

		/** Required */
		related_line_number: FormControl<number | null | undefined>,
		report_type: FormControl<string | null | undefined>,

		/** Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs. */
		support_oppose_indicator: FormControl<string | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleEEfileFormGroup() {
		return new FormGroup<ScheduleEEfileFormProperties>({
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			back_reference_schedule_name: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			beginning_image_number: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_middle_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			candidate_office_state: new FormControl<string | null | undefined>(undefined),
			candidate_party: new FormControl<string | null | undefined>(undefined),
			candidate_prefix: new FormControl<string | null | undefined>(undefined),
			candidate_suffix: new FormControl<string | null | undefined>(undefined),
			category_code: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			csv_url: new FormControl<string | null | undefined>(undefined),
			dissemination_date: new FormControl<Date | null | undefined>(undefined),
			entity_type: new FormControl<string | null | undefined>(undefined),
			expenditure_amount: new FormControl<number | null | undefined>(undefined),
			expenditure_date: new FormControl<Date | null | undefined>(undefined),
			expenditure_description: new FormControl<string | null | undefined>(undefined),
			fec_url: new FormControl<string | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			filer_first_name: new FormControl<string | null | undefined>(undefined),
			filer_last_name: new FormControl<string | null | undefined>(undefined),
			filer_middle_name: new FormControl<string | null | undefined>(undefined),
			filer_prefix: new FormControl<string | null | undefined>(undefined),
			filer_suffix: new FormControl<string | null | undefined>(undefined),
			filing_form: new FormControl<string | null | undefined>(undefined),
			image_number: new FormControl<string | null | undefined>(undefined),
			is_notice: new FormControl<boolean | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			load_timestamp: new FormControl<Date | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			most_recent: new FormControl<boolean | null | undefined>(undefined),
			notary_sign_date: new FormControl<Date | null | undefined>(undefined),
			office_total_ytd: new FormControl<number | null | undefined>(undefined),
			payee_city: new FormControl<string | null | undefined>(undefined),
			payee_first_name: new FormControl<string | null | undefined>(undefined),
			payee_last_name: new FormControl<string | null | undefined>(undefined),
			payee_middle_name: new FormControl<string | null | undefined>(undefined),
			payee_name: new FormControl<string | null | undefined>(undefined),
			payee_prefix: new FormControl<string | null | undefined>(undefined),
			payee_state: new FormControl<string | null | undefined>(undefined),
			payee_street_1: new FormControl<string | null | undefined>(undefined),
			payee_street_2: new FormControl<string | null | undefined>(undefined),
			payee_suffix: new FormControl<string | null | undefined>(undefined),
			payee_zip: new FormControl<string | null | undefined>(undefined),
			pdf_url: new FormControl<string | null | undefined>(undefined),
			related_line_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			report_type: new FormControl<string | null | undefined>(undefined),
			support_oppose_indicator: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleEEfilePage {
		pagination?: OffsetInfo;
		results?: Array<ScheduleEEfile>;
	}
	export interface ScheduleEEfilePageFormProperties {
	}
	export function CreateScheduleEEfilePageFormGroup() {
		return new FormGroup<ScheduleEEfilePageFormProperties>({
		});

	}

	export interface ScheduleEPage {
		pagination?: SeekInfo;
		results?: Array<ScheduleE>;
	}
	export interface ScheduleEPageFormProperties {
	}
	export function CreateScheduleEPageFormGroup() {
		return new FormGroup<ScheduleEPageFormProperties>({
		});

	}

	export interface ScheduleH4 {
		additional_description?: string | null;
		administrative_activity_inidcator?: string | null;
		administrative_voter_drive_activity_indicator?: string | null;
		amendment_indicator?: string | null;
		amendment_indicator_desc?: string | null;
		back_reference_schedule_id?: string | null;
		back_reference_transaction_id?: string | null;
		candidate_first_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id?: string | null;
		candidate_last_name?: string | null;

		/** Name of candidate running for office */
		candidate_name?: string | null;
		candidate_office?: string | null;
		candidate_office_description?: string | null;
		candidate_office_district?: string | null;
		candidate_office_state?: string | null;
		candidate_office_state_full?: string | null;
		category_code?: string | null;
		category_code_full?: string | null;
		committee?: CommitteeHistory;
		committee_id?: string | null;
		conduit_committee_city?: string | null;
		conduit_committee_id?: string | null;
		conduit_committee_name?: string | null;
		conduit_committee_state?: string | null;
		conduit_committee_street1?: string | null;
		conduit_committee_street2?: string | null;
		conduit_committee_zip?: number | null;
		cycle?: number | null;
		direct_candidate_support_activity_indicator?: string | null;
		disbursement_amount?: number | null;
		disbursement_type?: string | null;
		disbursement_type_full?: string | null;
		entity_type?: string | null;
		entity_type_desc?: string | null;
		event_amount_year_to_date?: number | null;
		event_purpose_category_type?: string | null;
		event_purpose_category_type_full?: string | null;
		event_purpose_date?: Date | null;
		event_purpose_description?: string | null;
		event_purpose_name?: string | null;
		exempt_activity_indicator?: string | null;
		federal_share?: number | null;
		file_number?: number | null;
		filer_committee_name?: string | null;
		filing_form?: string | null;
		fundraising_activity_indicator?: string | null;
		general_voter_drive_activity_indicator?: string | null;
		image_number?: string | null;
		line_number?: string | null;
		link_id?: number | null;
		load_date?: Date | null;
		memo_code?: string | null;
		memo_code_description?: string | null;
		memo_text?: string | null;
		nonfederal_share?: number | null;
		original_sub_id?: string | null;
		payee_city?: string | null;
		payee_first_name?: string | null;
		payee_last_name?: string | null;
		payee_middle_name?: string | null;
		payee_name?: string | null;
		payee_prefix?: string | null;
		payee_state?: string | null;
		payee_suffix?: string | null;
		payee_zip?: string | null;
		published_committee_reference_parity_check?: string | null;
		report_type?: string | null;
		report_year?: number | null;
		schedule_type?: string | null;
		schedule_type_full?: string | null;
		sub_id?: string | null;
		transaction_id?: string | null;
	}
	export interface ScheduleH4FormProperties {
		additional_description: FormControl<string | null | undefined>,
		administrative_activity_inidcator: FormControl<string | null | undefined>,
		administrative_voter_drive_activity_indicator: FormControl<string | null | undefined>,
		amendment_indicator: FormControl<string | null | undefined>,
		amendment_indicator_desc: FormControl<string | null | undefined>,
		back_reference_schedule_id: FormControl<string | null | undefined>,
		back_reference_transaction_id: FormControl<string | null | undefined>,
		candidate_first_name: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_id: FormControl<string | null | undefined>,
		candidate_last_name: FormControl<string | null | undefined>,

		/** Name of candidate running for office */
		candidate_name: FormControl<string | null | undefined>,
		candidate_office: FormControl<string | null | undefined>,
		candidate_office_description: FormControl<string | null | undefined>,
		candidate_office_district: FormControl<string | null | undefined>,
		candidate_office_state: FormControl<string | null | undefined>,
		candidate_office_state_full: FormControl<string | null | undefined>,
		category_code: FormControl<string | null | undefined>,
		category_code_full: FormControl<string | null | undefined>,
		committee_id: FormControl<string | null | undefined>,
		conduit_committee_city: FormControl<string | null | undefined>,
		conduit_committee_id: FormControl<string | null | undefined>,
		conduit_committee_name: FormControl<string | null | undefined>,
		conduit_committee_state: FormControl<string | null | undefined>,
		conduit_committee_street1: FormControl<string | null | undefined>,
		conduit_committee_street2: FormControl<string | null | undefined>,
		conduit_committee_zip: FormControl<number | null | undefined>,
		cycle: FormControl<number | null | undefined>,
		direct_candidate_support_activity_indicator: FormControl<string | null | undefined>,
		disbursement_amount: FormControl<number | null | undefined>,
		disbursement_type: FormControl<string | null | undefined>,
		disbursement_type_full: FormControl<string | null | undefined>,
		entity_type: FormControl<string | null | undefined>,
		entity_type_desc: FormControl<string | null | undefined>,
		event_amount_year_to_date: FormControl<number | null | undefined>,
		event_purpose_category_type: FormControl<string | null | undefined>,
		event_purpose_category_type_full: FormControl<string | null | undefined>,
		event_purpose_date: FormControl<Date | null | undefined>,
		event_purpose_description: FormControl<string | null | undefined>,
		event_purpose_name: FormControl<string | null | undefined>,
		exempt_activity_indicator: FormControl<string | null | undefined>,
		federal_share: FormControl<number | null | undefined>,
		file_number: FormControl<number | null | undefined>,
		filer_committee_name: FormControl<string | null | undefined>,
		filing_form: FormControl<string | null | undefined>,
		fundraising_activity_indicator: FormControl<string | null | undefined>,
		general_voter_drive_activity_indicator: FormControl<string | null | undefined>,
		image_number: FormControl<string | null | undefined>,
		line_number: FormControl<string | null | undefined>,
		link_id: FormControl<number | null | undefined>,
		load_date: FormControl<Date | null | undefined>,
		memo_code: FormControl<string | null | undefined>,
		memo_code_description: FormControl<string | null | undefined>,
		memo_text: FormControl<string | null | undefined>,
		nonfederal_share: FormControl<number | null | undefined>,
		original_sub_id: FormControl<string | null | undefined>,
		payee_city: FormControl<string | null | undefined>,
		payee_first_name: FormControl<string | null | undefined>,
		payee_last_name: FormControl<string | null | undefined>,
		payee_middle_name: FormControl<string | null | undefined>,
		payee_name: FormControl<string | null | undefined>,
		payee_prefix: FormControl<string | null | undefined>,
		payee_state: FormControl<string | null | undefined>,
		payee_suffix: FormControl<string | null | undefined>,
		payee_zip: FormControl<string | null | undefined>,
		published_committee_reference_parity_check: FormControl<string | null | undefined>,
		report_type: FormControl<string | null | undefined>,
		report_year: FormControl<number | null | undefined>,
		schedule_type: FormControl<string | null | undefined>,
		schedule_type_full: FormControl<string | null | undefined>,
		sub_id: FormControl<string | null | undefined>,
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateScheduleH4FormGroup() {
		return new FormGroup<ScheduleH4FormProperties>({
			additional_description: new FormControl<string | null | undefined>(undefined),
			administrative_activity_inidcator: new FormControl<string | null | undefined>(undefined),
			administrative_voter_drive_activity_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator: new FormControl<string | null | undefined>(undefined),
			amendment_indicator_desc: new FormControl<string | null | undefined>(undefined),
			back_reference_schedule_id: new FormControl<string | null | undefined>(undefined),
			back_reference_transaction_id: new FormControl<string | null | undefined>(undefined),
			candidate_first_name: new FormControl<string | null | undefined>(undefined),
			candidate_id: new FormControl<string | null | undefined>(undefined),
			candidate_last_name: new FormControl<string | null | undefined>(undefined),
			candidate_name: new FormControl<string | null | undefined>(undefined),
			candidate_office: new FormControl<string | null | undefined>(undefined),
			candidate_office_description: new FormControl<string | null | undefined>(undefined),
			candidate_office_district: new FormControl<string | null | undefined>(undefined),
			candidate_office_state: new FormControl<string | null | undefined>(undefined),
			candidate_office_state_full: new FormControl<string | null | undefined>(undefined),
			category_code: new FormControl<string | null | undefined>(undefined),
			category_code_full: new FormControl<string | null | undefined>(undefined),
			committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_city: new FormControl<string | null | undefined>(undefined),
			conduit_committee_id: new FormControl<string | null | undefined>(undefined),
			conduit_committee_name: new FormControl<string | null | undefined>(undefined),
			conduit_committee_state: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street1: new FormControl<string | null | undefined>(undefined),
			conduit_committee_street2: new FormControl<string | null | undefined>(undefined),
			conduit_committee_zip: new FormControl<number | null | undefined>(undefined),
			cycle: new FormControl<number | null | undefined>(undefined),
			direct_candidate_support_activity_indicator: new FormControl<string | null | undefined>(undefined),
			disbursement_amount: new FormControl<number | null | undefined>(undefined),
			disbursement_type: new FormControl<string | null | undefined>(undefined),
			disbursement_type_full: new FormControl<string | null | undefined>(undefined),
			entity_type: new FormControl<string | null | undefined>(undefined),
			entity_type_desc: new FormControl<string | null | undefined>(undefined),
			event_amount_year_to_date: new FormControl<number | null | undefined>(undefined),
			event_purpose_category_type: new FormControl<string | null | undefined>(undefined),
			event_purpose_category_type_full: new FormControl<string | null | undefined>(undefined),
			event_purpose_date: new FormControl<Date | null | undefined>(undefined),
			event_purpose_description: new FormControl<string | null | undefined>(undefined),
			event_purpose_name: new FormControl<string | null | undefined>(undefined),
			exempt_activity_indicator: new FormControl<string | null | undefined>(undefined),
			federal_share: new FormControl<number | null | undefined>(undefined),
			file_number: new FormControl<number | null | undefined>(undefined),
			filer_committee_name: new FormControl<string | null | undefined>(undefined),
			filing_form: new FormControl<string | null | undefined>(undefined),
			fundraising_activity_indicator: new FormControl<string | null | undefined>(undefined),
			general_voter_drive_activity_indicator: new FormControl<string | null | undefined>(undefined),
			image_number: new FormControl<string | null | undefined>(undefined),
			line_number: new FormControl<string | null | undefined>(undefined),
			link_id: new FormControl<number | null | undefined>(undefined),
			load_date: new FormControl<Date | null | undefined>(undefined),
			memo_code: new FormControl<string | null | undefined>(undefined),
			memo_code_description: new FormControl<string | null | undefined>(undefined),
			memo_text: new FormControl<string | null | undefined>(undefined),
			nonfederal_share: new FormControl<number | null | undefined>(undefined),
			original_sub_id: new FormControl<string | null | undefined>(undefined),
			payee_city: new FormControl<string | null | undefined>(undefined),
			payee_first_name: new FormControl<string | null | undefined>(undefined),
			payee_last_name: new FormControl<string | null | undefined>(undefined),
			payee_middle_name: new FormControl<string | null | undefined>(undefined),
			payee_name: new FormControl<string | null | undefined>(undefined),
			payee_prefix: new FormControl<string | null | undefined>(undefined),
			payee_state: new FormControl<string | null | undefined>(undefined),
			payee_suffix: new FormControl<string | null | undefined>(undefined),
			payee_zip: new FormControl<string | null | undefined>(undefined),
			published_committee_reference_parity_check: new FormControl<string | null | undefined>(undefined),
			report_type: new FormControl<string | null | undefined>(undefined),
			report_year: new FormControl<number | null | undefined>(undefined),
			schedule_type: new FormControl<string | null | undefined>(undefined),
			schedule_type_full: new FormControl<string | null | undefined>(undefined),
			sub_id: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ScheduleH4Page {
		pagination?: SeekInfo;
		results?: Array<ScheduleH4>;
	}
	export interface ScheduleH4PageFormProperties {
	}
	export function CreateScheduleH4PageFormGroup() {
		return new FormGroup<ScheduleH4PageFormProperties>({
		});

	}

	export interface StateElectionOfficeInfo {
		address_line1?: string | null;
		address_line2?: string | null;
		city?: string | null;
		email?: string | null;
		fax_number?: string | null;
		mailing_address1?: string | null;
		mailing_address2?: string | null;
		mailing_city?: string | null;
		mailing_state?: string | null;
		mailing_zipcode?: string | null;
		office_name?: string | null;

		/** Required */
		office_type: string;
		primary_phone_number?: string | null;
		secondary_phone_number?: string | null;

		/** Required */
		state: string;
		state_full_name?: string | null;
		website_url1?: string | null;
		website_url2?: string | null;
		zip_code?: string | null;
	}
	export interface StateElectionOfficeInfoFormProperties {
		address_line1: FormControl<string | null | undefined>,
		address_line2: FormControl<string | null | undefined>,
		city: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,
		fax_number: FormControl<string | null | undefined>,
		mailing_address1: FormControl<string | null | undefined>,
		mailing_address2: FormControl<string | null | undefined>,
		mailing_city: FormControl<string | null | undefined>,
		mailing_state: FormControl<string | null | undefined>,
		mailing_zipcode: FormControl<string | null | undefined>,
		office_name: FormControl<string | null | undefined>,

		/** Required */
		office_type: FormControl<string | null | undefined>,
		primary_phone_number: FormControl<string | null | undefined>,
		secondary_phone_number: FormControl<string | null | undefined>,

		/** Required */
		state: FormControl<string | null | undefined>,
		state_full_name: FormControl<string | null | undefined>,
		website_url1: FormControl<string | null | undefined>,
		website_url2: FormControl<string | null | undefined>,
		zip_code: FormControl<string | null | undefined>,
	}
	export function CreateStateElectionOfficeInfoFormGroup() {
		return new FormGroup<StateElectionOfficeInfoFormProperties>({
			address_line1: new FormControl<string | null | undefined>(undefined),
			address_line2: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			fax_number: new FormControl<string | null | undefined>(undefined),
			mailing_address1: new FormControl<string | null | undefined>(undefined),
			mailing_address2: new FormControl<string | null | undefined>(undefined),
			mailing_city: new FormControl<string | null | undefined>(undefined),
			mailing_state: new FormControl<string | null | undefined>(undefined),
			mailing_zipcode: new FormControl<string | null | undefined>(undefined),
			office_name: new FormControl<string | null | undefined>(undefined),
			office_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary_phone_number: new FormControl<string | null | undefined>(undefined),
			secondary_phone_number: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state_full_name: new FormControl<string | null | undefined>(undefined),
			website_url1: new FormControl<string | null | undefined>(undefined),
			website_url2: new FormControl<string | null | undefined>(undefined),
			zip_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface StateElectionOfficeInfoPage {
		pagination?: OffsetInfo;
		results?: Array<StateElectionOfficeInfo>;
	}
	export interface StateElectionOfficeInfoPageFormProperties {
	}
	export function CreateStateElectionOfficeInfoPageFormGroup() {
		return new FormGroup<StateElectionOfficeInfoPageFormProperties>({
		});

	}

	export interface TotalByOffice {
		election_year?: number | null;
		office?: string | null;
		total_disbursements?: number | null;
		total_individual_itemized_contributions?: number | null;
		total_other_political_committee_contributions?: number | null;
		total_receipts?: number | null;
		total_transfers_from_other_authorized_committee?: number | null;
	}
	export interface TotalByOfficeFormProperties {
		election_year: FormControl<number | null | undefined>,
		office: FormControl<string | null | undefined>,
		total_disbursements: FormControl<number | null | undefined>,
		total_individual_itemized_contributions: FormControl<number | null | undefined>,
		total_other_political_committee_contributions: FormControl<number | null | undefined>,
		total_receipts: FormControl<number | null | undefined>,
		total_transfers_from_other_authorized_committee: FormControl<number | null | undefined>,
	}
	export function CreateTotalByOfficeFormGroup() {
		return new FormGroup<TotalByOfficeFormProperties>({
			election_year: new FormControl<number | null | undefined>(undefined),
			office: new FormControl<string | null | undefined>(undefined),
			total_disbursements: new FormControl<number | null | undefined>(undefined),
			total_individual_itemized_contributions: new FormControl<number | null | undefined>(undefined),
			total_other_political_committee_contributions: new FormControl<number | null | undefined>(undefined),
			total_receipts: new FormControl<number | null | undefined>(undefined),
			total_transfers_from_other_authorized_committee: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface TotalByOfficeByParty {
		election_year?: number | null;
		office?: string | null;
		party?: string | null;
		total_disbursements?: number | null;
		total_receipts?: number | null;
	}
	export interface TotalByOfficeByPartyFormProperties {
		election_year: FormControl<number | null | undefined>,
		office: FormControl<string | null | undefined>,
		party: FormControl<string | null | undefined>,
		total_disbursements: FormControl<number | null | undefined>,
		total_receipts: FormControl<number | null | undefined>,
	}
	export function CreateTotalByOfficeByPartyFormGroup() {
		return new FormGroup<TotalByOfficeByPartyFormProperties>({
			election_year: new FormControl<number | null | undefined>(undefined),
			office: new FormControl<string | null | undefined>(undefined),
			party: new FormControl<string | null | undefined>(undefined),
			total_disbursements: new FormControl<number | null | undefined>(undefined),
			total_receipts: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface TotalByOfficeByPartyPage {
		pagination?: OffsetInfo;
		results?: Array<TotalByOfficeByParty>;
	}
	export interface TotalByOfficeByPartyPageFormProperties {
	}
	export function CreateTotalByOfficeByPartyPageFormGroup() {
		return new FormGroup<TotalByOfficeByPartyPageFormProperties>({
		});

	}

	export interface TotalByOfficePage {
		pagination?: OffsetInfo;
		results?: Array<TotalByOffice>;
	}
	export interface TotalByOfficePageFormProperties {
	}
	export function CreateTotalByOfficePageFormGroup() {
		return new FormGroup<TotalByOfficePageFormProperties>({
		});

	}

	export interface TotalsCommittee {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name?: string | null;

		/**
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 */
		candidate_ids?: Array<string>;
		cash_on_hand_end_period?: number | null;

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city?: string | null;

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: string;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type?: string | null;

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full?: string | null;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: number;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 */
		cycles?: Array<number>;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1), and the committee has filling activity during the cycle
		 */
		cycles_has_activity?: Array<number>;

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s), and the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
		 */
		cycles_has_financial?: Array<number>;
		debts_owed_by_committee?: number | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation?: string | null;

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full?: string | null;
		disbursements?: number | null;

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency?: string | null;

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date?: Date | null;

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date?: Date | null;
		independent_expenditures?: number | null;

		/**
		 * True indicates that a committee is active.
		 */
		is_active?: boolean | null;
		TotalsCommitteeJfc_committee?: Array<TotalsCommitteeJfc_committee>;

		/**
		 * The latest two year election cycle that the committee has filings
		 */
		last_cycle_has_activity?: number | null;

		/**
		 * The latest two year election cycle that the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		 */
		last_cycle_has_financial?: number | null;

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date?: Date | null;

		/** The day the FEC received the committee's most recent filing */
		last_file_date?: Date | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type?: string | null;

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party?: string | null;

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full?: string | null;
		receipts?: number | null;

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state?: string | null;

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full?: string | null;

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1?: string | null;

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2?: string | null;

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name?: string | null;

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip?: string | null;
	}
	export interface TotalsCommitteeFormProperties {

		/**
		 * Affiliated committee or connected organization
		 * Max length: 100
		 */
		affiliated_committee_name: FormControl<string | null | undefined>,
		cash_on_hand_end_period: FormControl<number | null | undefined>,

		/**
		 * City of committee as reported on the Form 1
		 * Max length: 50
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * Required
		 */
		committee_id: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 1
		 */
		committee_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter type code of the organization:
		 * - C communication cost
		 * - D delegate
		 * - E electioneering communication
		 * - H House
		 * - I independent expenditure filer (not a committee)
		 * - N PAC - nonqualified
		 * - O independent expenditure-only (super PACs)
		 * - P presidential
		 * - Q PAC - qualified
		 * - S Senate
		 * - U single candidate independent expenditure
		 * - V PAC with non-contribution account, nonqualified
		 * - W PAC with non-contribution account, qualified
		 * - X party, nonqualified
		 * - Y party, qualified
		 * - Z national party non-federal account
		 * Max length: 50
		 */
		committee_type_full: FormControl<string | null | undefined>,

		/**
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * Required
		 */
		cycle: FormControl<number | null | undefined>,
		debts_owed_by_committee: FormControl<number | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 1
		 */
		designation: FormControl<string | null | undefined>,

		/**
		 * The one-letter designation code of the organization:
		 * - A authorized by a candidate
		 * - J joint fundraising committee
		 * - P principal campaign committee of a candidate
		 * - U unauthorized
		 * - B lobbyist/registrant PAC
		 * - D leadership PAC
		 * Max length: 25
		 */
		designation_full: FormControl<string | null | undefined>,
		disbursements: FormControl<number | null | undefined>,

		/**
		 * The one-letter
		 * code of the filing frequency:
		 * - A Administratively terminated
		 * - D Debt
		 * - M Monthly filer
		 * - Q Quarterly filer
		 * - T Terminated
		 * - W Waived
		 * Max length: 1
		 */
		filing_frequency: FormControl<string | null | undefined>,

		/** The day the FEC received the committee's first Form 1 */
		first_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's first filing. This is usually a Form 1 committee registration. */
		first_file_date: FormControl<Date | null | undefined>,
		independent_expenditures: FormControl<number | null | undefined>,

		/**
		 * True indicates that a committee is active.
		 */
		is_active: FormControl<boolean | null | undefined>,

		/**
		 * The latest two year election cycle that the committee has filings
		 */
		last_cycle_has_activity: FormControl<number | null | undefined>,

		/**
		 * The latest two year election cycle that the committee files the financial reports
		 * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		 */
		last_cycle_has_financial: FormControl<number | null | undefined>,

		/** The day the FEC received the committee's most recent Form 1 */
		last_f1_date: FormControl<Date | null | undefined>,

		/** The day the FEC received the committee's most recent filing */
		last_file_date: FormControl<Date | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 1
		 */
		organization_type: FormControl<string | null | undefined>,

		/**
		 * The one-letter code for the kind for organization:
		 * - C corporation
		 * - L labor organization
		 * - M membership organization
		 * - T trade association
		 * - V cooperative
		 * - W corporation without capital stock
		 * Max length: 100
		 */
		organization_type_full: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 3
		 */
		party: FormControl<string | null | undefined>,

		/**
		 * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * Max length: 50
		 */
		party_full: FormControl<string | null | undefined>,
		receipts: FormControl<number | null | undefined>,

		/**
		 * State of the committee's address as filed on the Form 1
		 * Max length: 2
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * State of committee as reported on the Form 1
		 * Max length: 50
		 */
		state_full: FormControl<string | null | undefined>,

		/**
		 * Street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_1: FormControl<string | null | undefined>,

		/**
		 * Second line of street address of committee as reported on the Form 1
		 * Max length: 50
		 */
		street_2: FormControl<string | null | undefined>,

		/**
		 * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * Max length: 100
		 */
		treasurer_name: FormControl<string | null | undefined>,

		/**
		 * Zip code of committee as reported on the Form 1
		 * Max length: 9
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateTotalsCommitteeFormGroup() {
		return new FormGroup<TotalsCommitteeFormProperties>({
			affiliated_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			cash_on_hand_end_period: new FormControl<number | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			committee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			committee_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			committee_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			cycle: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			debts_owed_by_committee: new FormControl<number | null | undefined>(undefined),
			designation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			designation_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(25)]),
			disbursements: new FormControl<number | null | undefined>(undefined),
			filing_frequency: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			first_f1_date: new FormControl<Date | null | undefined>(undefined),
			first_file_date: new FormControl<Date | null | undefined>(undefined),
			independent_expenditures: new FormControl<number | null | undefined>(undefined),
			is_active: new FormControl<boolean | null | undefined>(undefined),
			last_cycle_has_activity: new FormControl<number | null | undefined>(undefined),
			last_cycle_has_financial: new FormControl<number | null | undefined>(undefined),
			last_f1_date: new FormControl<Date | null | undefined>(undefined),
			last_file_date: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			organization_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1)]),
			organization_type_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			party: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(3)]),
			party_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			receipts: new FormControl<number | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2)]),
			state_full: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			street_2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			treasurer_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(9)]),
		});

	}

	export interface TotalsCommitteeJfc_committee {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id?: string | null;

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name?: string | null;
	}
	export interface TotalsCommitteeJfc_committeeFormProperties {

		/**
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 */
		joint_committee_id: FormControl<string | null | undefined>,

		/**
		 * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * Max length: 100
		 */
		joint_committee_name: FormControl<string | null | undefined>,
	}
	export function CreateTotalsCommitteeJfc_committeeFormGroup() {
		return new FormGroup<TotalsCommitteeJfc_committeeFormProperties>({
			joint_committee_id: new FormControl<string | null | undefined>(undefined),
			joint_committee_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface TotalsCommitteePage {
		pagination?: OffsetInfo;
		results?: Array<TotalsCommittee>;
	}
	export interface TotalsCommitteePageFormProperties {
	}
	export function CreateTotalsCommitteePageFormGroup() {
		return new FormGroup<TotalsCommitteePageFormProperties>({
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * This endpoint contains Final Audit Reports approved by the Commission since inception.
		 * The search can be based on information about the audited committee (Name, FEC ID Number, Type,
		 * Election Cycle) or the issues covered in the report.
		 * Get audit-case/
		 * @param {number} max_election_cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @param {Array<string>} q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * @param {string} sub_category_id 
		 * The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<string>} audit_case_id 
		 * Primary/foreign key for audit tables
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {Array<string>} qq Name of candidate running for office
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {number} min_election_cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @param {Array<number>} audit_id 
		 * The audit issue. Each subcategory has an unique ID
		 * @param {string} committee_designation Type of committee:
		 *         - H or S - Congressional
		 *         - P - Presidential
		 *         - X or Y or Z - Party
		 *         - N or Q - PAC
		 *         - I - Independent expenditure
		 *         - O - Super PAC 
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {string} primary_category_id 
		 * Audit category ID (table PK)
		 * @return {void} 
		 */
		Audit_caseGetByMax_election_cycleAndQAndSub_category_idAndCycleAndSort_null_onlyAndAudit_case_idAndSort_hide_nullAndCandidate_idAndQqAndPer_pageAndSortAndMin_election_cycleAndAudit_idAndCommittee_designationAndApi_keyAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndPrimary_category_id(max_election_cycle: number | null | undefined, q: Array<string> | null | undefined, sub_category_id: string | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, audit_case_id: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, qq: Array<string> | null | undefined, per_page: number | null | undefined, sort: Array<string> | null | undefined, min_election_cycle: number | null | undefined, audit_id: Array<number> | null | undefined, committee_designation: string | null | undefined, api_key: string, committee_type: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, primary_category_id: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'audit-case/?max_election_cycle=' + max_election_cycle + '&' + q?.map(z => `q=${encodeURIComponent(z)}`).join('&') + '&sub_category_id=' + (sub_category_id == null ? '' : encodeURIComponent(sub_category_id)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&' + audit_case_id?.map(z => `audit_case_id=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&' + qq?.map(z => `qq=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&min_election_cycle=' + min_election_cycle + '&' + audit_id?.map(z => `audit_id=${z}`).join('&') + '&committee_designation=' + (committee_designation == null ? '' : encodeURIComponent(committee_designation)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&primary_category_id=' + (primary_category_id == null ? '' : encodeURIComponent(primary_category_id)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This lists the options for the categories and subcategories available in the /audit-search/ endpoint.
		 * Get audit-category/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} primary_category_id 
		 * Audit category ID (table PK)
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} primary_category_name Primary Audit Category
		 *     - No Findings or Issues/Not a Committee
		 *     - Net Outstanding Campaign/Convention Expenditures/Obligations
		 *     - Payments/Disgorgements
		 *     - Allocation Issues
		 *     - Prohibited Contributions
		 *     - Disclosure
		 *     - Recordkeeping
		 *     - Repayment to US Treasury
		 *     - Other
		 *     - Misstatement of Financial Activity
		 *     - Excessive Contributions
		 *     - Failure to File Reports/Schedules/Notices
		 *     - Loans
		 *     - Referred Findings Not Listed
		 * @return {void} 
		 */
		Audit_categoryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndPrimary_category_idAndSortAndPrimary_category_name(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, primary_category_id: Array<string> | null | undefined, sort: string | null | undefined, primary_category_name: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'audit-category/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + primary_category_id?.map(z => `primary_category_id=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + primary_category_name?.map(z => `primary_category_name=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This lists the options for the primary categories available in the /audit-search/ endpoint.
		 * Get audit-primary-category/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} primary_category_id 
		 * Audit category ID (table PK)
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} primary_category_name Primary Audit Category
		 *     - No Findings or Issues/Not a Committee
		 *     - Net Outstanding Campaign/Convention Expenditures/Obligations
		 *     - Payments/Disgorgements
		 *     - Allocation Issues
		 *     - Prohibited Contributions
		 *     - Disclosure
		 *     - Recordkeeping
		 *     - Repayment to US Treasury
		 *     - Other
		 *     - Misstatement of Financial Activity
		 *     - Excessive Contributions
		 *     - Failure to File Reports/Schedules/Notices
		 *     - Loans
		 *     - Referred Findings Not Listed
		 * @return {void} 
		 */
		Audit_primary_categoryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndPrimary_category_idAndSortAndPrimary_category_name(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, primary_category_id: Array<string> | null | undefined, sort: string | null | undefined, primary_category_name: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'audit-primary-category/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + primary_category_id?.map(z => `primary_category_id=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + primary_category_name?.map(z => `primary_category_name=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other
		 * events into one calendar.
		 * State and report type filtering is no longer available.
		 * Get calendar-dates/
		 * @param {Array<number>} calendar_category_id 
		 * Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		 * Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		 * Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		 * Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} description Brief description of event
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Date} max_end_date 
		 * The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} summary Longer description of event
		 * @param {Date} min_end_date 
		 * The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Date} min_start_date 
		 * The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Date} max_start_date 
		 * The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {number} event_id An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
		 * @return {void} 
		 */
		Calendar_datesGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndMax_start_dateAndPer_pageAndSortAndEvent_id(calendar_category_id: Array<number> | null | undefined, api_key: string, description: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, max_end_date: Date | null | undefined, summary: Array<string> | null | undefined, min_end_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, min_start_date: Date | null | undefined, max_start_date: Date | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, event_id: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'calendar-dates/?' + calendar_category_id?.map(z => `calendar_category_id=${z}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + description?.map(z => `description=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_null_only=' + sort_null_only + '&page=' + page + '&max_end_date=' + max_end_date?.toISOString() + '&' + summary?.map(z => `summary=${encodeURIComponent(z)}`).join('&') + '&min_end_date=' + min_end_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&min_start_date=' + min_start_date?.toISOString() + '&max_start_date=' + max_start_date?.toISOString() + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&event_id=' + event_id, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.
		 * Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other
		 * events into one calendar.
		 * State filtering now applies to elections, reports and reporting periods.
		 * Presidential pre-primary report due dates are not shown on even years.
		 * Filers generally opt to file monthly rather than submit over 50 pre-primary election
		 * reports. All reporting deadlines are available at /reporting-dates/ for reference.
		 * This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql)
		 * that creates the calendar.
		 * Get calendar-dates/export/
		 * @param {Array<number>} calendar_category_id 
		 * Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		 * Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		 * Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		 * Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} description Brief description of event
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Date} max_end_date 
		 * The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} summary Longer description of event
		 * @param {Date} min_end_date 
		 * The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Date} min_start_date 
		 * The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Date} max_start_date 
		 * The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {number} event_id An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
		 * @return {void} 
		 */
		Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_id(calendar_category_id: Array<number> | null | undefined, api_key: string, description: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, max_end_date: Date | null | undefined, summary: Array<string> | null | undefined, min_end_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, min_start_date: Date | null | undefined, per_page: number | null | undefined, max_start_date: Date | null | undefined, renderer: Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_idRenderer | null | undefined, sort: string | null | undefined, event_id: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'calendar-dates/export/?' + calendar_category_id?.map(z => `calendar_category_id=${z}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + description?.map(z => `description=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_null_only=' + sort_null_only + '&page=' + page + '&max_end_date=' + max_end_date?.toISOString() + '&' + summary?.map(z => `summary=${encodeURIComponent(z)}`).join('&') + '&min_end_date=' + min_end_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&min_start_date=' + min_start_date?.toISOString() + '&per_page=' + per_page + '&max_start_date=' + max_start_date?.toISOString() + '&renderer=' + renderer + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&event_id=' + event_id, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint is useful for finding detailed information about a particular candidate. Use the
		 * `candidate_id` to find the most recent information about that candidate.
		 * Get candidate/{candidate_id}/
		 * @param {Array<string>} incumbent_challenge One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * @param {Array<number>} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} federal_funds_flag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} name Name (candidate or committee) to search for. Alias for 'q'.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {Array<string>} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} candidate_status One-letter code explaining if the candidate is:
		 *         - C present candidate
		 *         - F future candidate
		 *         - N not yet a candidate
		 *         - P prior candidate
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} has_raised_funds A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {string} year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idGetByIncumbent_challengeAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndPageAndStateAndYear(incumbent_challenge: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, federal_funds_flag: boolean | null | undefined, sort_hide_null: boolean | null | undefined, name: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, office: Array<string> | null | undefined, sort: string | null | undefined, candidate_status: Array<string> | null | undefined, district: Array<string> | null | undefined, api_key: string, has_raised_funds: boolean | null | undefined, party: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, year: string | null | undefined, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/?' + incumbent_challenge?.map(z => `incumbent_challenge=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&federal_funds_flag=' + federal_funds_flag + '&sort_hide_null=' + sort_hide_null + '&' + name?.map(z => `name=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&' + office?.map(z => `office=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + candidate_status?.map(z => `candidate_status=${encodeURIComponent(z)}`).join('&') + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&has_raised_funds=' + has_raised_funds + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&year=' + (year == null ? '' : encodeURIComponent(year)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint is useful for finding detailed information about a particular committee or
		 * filer. Use the `committee_id` to find the most recent information about the committee.
		 * Get candidate/{candidate_id}/committees/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {Array<number>} cycle 
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<number>} year A year that the committee was active— (after original registration date     or filing but before expiration date)
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} filing_frequency The one-letter 
		 *     code of the filing frequency:
		 *          - A Administratively terminated
		 *          - D Debt
		 *          - M Monthly filer
		 *          - Q Quarterly filer
		 *          - T Terminated
		 *          - W Waived
		 * @param {Array<string>} organization_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idCommitteesGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndYearAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndFiling_frequencyAndOrganization_typeAndDesignationAndSort(api_key: string, committee_type: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, year: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, filing_frequency: Array<string> | null | undefined, organization_type: Array<string> | null | undefined, designation: Array<string> | null | undefined, sort: string | null | undefined, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/committees/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + year?.map(z => `year=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + filing_frequency?.map(z => `filing_frequency=${encodeURIComponent(z)}`).join('&') + '&' + organization_type?.map(z => `organization_type=${encodeURIComponent(z)}`).join('&') + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		 * Get candidate/{candidate_id}/committees/history/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idCommitteesHistoryGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort(api_key: string, election_full: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, designation: Array<string> | null | undefined, sort: string | null | undefined, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/committees/history/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		 * Get candidate/{candidate_id}/committees/history/{cycle}/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {number} cycle 
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idCommitteesHistory_cycleGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort(api_key: string, election_full: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, designation: Array<string> | null | undefined, sort: string | null | undefined, cycle: number, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/committees/history/' + cycle + '/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * All official records and reports filed by or delivered to the FEC.
		 * Note: because the filings data includes many records, counts for large
		 * result sets are approximate; you will want to page through the records until no records are returned.
		 * Get candidate/{candidate_id}/filings/
		 * @param {boolean} is_amended 
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} form_category 
		 * The forms filed are categorized based on the nature of the filing:
		 *     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		 *     - NOTICE F5, F24, F6, F9, F10, F11
		 *     - STATEMENT F1, F2
		 *     - OTHER F1M, F8, F99, F12, FRQ
		 * @param {Array<string>} request_type 
		 * Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		 *     - 1 Statement of Organization
		 *     - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		 *     - 3 Second Notice - Reports
		 *     - 4 Request for Additional Information
		 *     - 5 Informational - Reports
		 *     - 6 Second Notice - Statement of Organization
		 *     - 7 Failure to File
		 *     - 8 From Public Disclosure
		 *     - 9 From Multi Candidate Status
		 * @param {Array<string>} primary_general_indicator 
		 * Primary, general or special election indicator.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} office Federal office candidate runs for: H, S or P
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type} filer_type The method used to file with the FEC, either electronic or on paper.
		 * @param {boolean} most_recent 
		 * Report is either new or is the most-recently filed amendment
		 * @param {Array<string>} report_type Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 *     - 90S Post Inaugural Supplement
		 *     - 90D Post Inaugural
		 *     - 48  48 Hour Notification
		 *     - 24  24 Hour Notification
		 *     - M7S July Monthly/Semi-Annual
		 *     - MSA Monthly Semi-Annual (MY)
		 *     - MYS Monthly Year End/Semi-Annual
		 *     - Q2S July Quarterly/Semi-Annual
		 *     - QSA Quarterly Semi-Annual (MY)
		 *     - QYS Quarterly Year End/Semi-Annual
		 *     - QYE Quarterly Semi-Annual (YE)
		 *     - QMS Quarterly Mid-Year/ Semi-Annual
		 *     - MSY Monthly Semi-Annual (YE)
		 * @param {string} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {Array<string>} form_type The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 *     - F1   Statement of Organization
		 *     - F1M  Notification of Multicandidate Status
		 *     - F2   Statement of Candidacy
		 *     - F3   Report of Receipts and Disbursements for an Authorized Committee
		 *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 *     - F5   Report of Independent Expenditures Made and Contributions Received
		 *     - F6   48 Hour Notice of Contributions/Loans Received
		 *     - F7   Report of Communication Costs by Corporations and Membership Organizations
		 *     - F8   Debt Settlement Plan
		 *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 *     - F13  Report of Donations Accepted for Inaugural Committee
		 *     - F99  Miscellaneous Text
		 *     - FRQ  Request for Additional Information
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {Array<number>} report_year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {Array<string>} amendment_indicator Amendent types:
		 *     -N   new
		 *     -A   amendment
		 *     -T   terminated
		 *     -C   consolidated
		 *     -M   multi-candidate
		 *     -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 * @param {Array<string>} document_type 
		 * The type of document for documents other than reports:
		 *     - 2 24 Hour Contribution Notice
		 *     - 4 48 Hour Contribution Notice
		 *     - A Debt Settlement Statement
		 *     - B Acknowledgment of Receipt of Debt Settlement Statement
		 *     - C RFAI: Debt Settlement First Notice
		 *     - D Commission Debt Settlement Review
		 *     - E Commission Response TO Debt Settlement Request
		 *     - F Administrative Termination
		 *     - G Debt Settlement Plan Amendment
		 *     - H Disavowal Notice
		 *     - I Disavowal Response
		 *     - J Conduit Report
		 *     - K Termination Approval
		 *     - L Repeat Non-Filer Notice
		 *     - M Filing Frequency Change Notice
		 *     - N Paper Amendment to Electronic Report
		 *     - O Acknowledgment of Filing Frequency Change
		 *     - S RFAI: Debt Settlement Second
		 *     - T Miscellaneous Report TO FEC
		 *     - V Repeat Violation Notice (441A OR 441B)
		 *     - P Notice of Paper Filing
		 *     - R F3L Filing Frequency Change Notice
		 *     - Q Acknowledgment of F3L Filing Frequency Change
		 *     - U Unregistered Committee Notice
		 * @param {Array<string>} beginning_image_number 
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_number(is_amended: boolean | null | undefined, min_receipt_date: Date | null | undefined, form_category: Array<string> | null | undefined, request_type: Array<string> | null | undefined, primary_general_indicator: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, office: Array<string> | null | undefined, sort: Array<string> | null | undefined, q_filer: Array<string> | null | undefined, district: Array<string> | null | undefined, api_key: string, filer_type: Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type | null | undefined, most_recent: boolean | null | undefined, report_type: Array<string> | null | undefined, committee_type: string | null | undefined, party: Array<string> | null | undefined, form_type: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, report_year: Array<number> | null | undefined, amendment_indicator: Array<string> | null | undefined, document_type: Array<string> | null | undefined, beginning_image_number: Array<string> | null | undefined, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/filings/?is_amended=' + is_amended + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&' + form_category?.map(z => `form_category=${encodeURIComponent(z)}`).join('&') + '&' + request_type?.map(z => `request_type=${encodeURIComponent(z)}`).join('&') + '&' + primary_general_indicator?.map(z => `primary_general_indicator=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&' + office?.map(z => `office=${encodeURIComponent(z)}`).join('&') + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&') + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&filer_type=' + filer_type + '&most_recent=' + most_recent + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&committee_type=' + (committee_type == null ? '' : encodeURIComponent(committee_type)) + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&' + form_type?.map(z => `form_type=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&' + report_year?.map(z => `report_year=${z}`).join('&') + '&' + amendment_indicator?.map(z => `amendment_indicator=${encodeURIComponent(z)}`).join('&') + '&' + document_type?.map(z => `document_type=${encodeURIComponent(z)}`).join('&') + '&' + beginning_image_number?.map(z => `beginning_image_number=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Find out a candidate's characteristics over time. This is particularly useful if the
		 * candidate runs for the same office in different districts or you want to know more about a candidate's
		 * previous races.
		 * This information is organized by `candidate_id`, so it won't help you find a candidate
		 * who ran for different offices over time; candidates get a new ID for each office.
		 * Get candidate/{candidate_id}/history/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idHistoryGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, election_full: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/history/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&election_full=' + election_full + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Find out a candidate's characteristics over time. This is particularly useful if the
		 * candidate runs for the same office in different districts or you want to know more about a candidate's
		 * previous races.
		 * This information is organized by `candidate_id`, so it won't help you find a candidate
		 * who ran for different offices over time; candidates get a new ID for each office.
		 * Get candidate/{candidate_id}/history/{cycle}/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idHistory_cycleGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, election_full: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, cycle: number, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/history/' + cycle + '/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&election_full=' + election_full + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
		 * which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
		 * The cycle is named after the even-numbered year and includes the year before it. To obtain
		 * totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
		 * is the next year — for example, in 2015, the current cycle is 2016.
		 * For presidential and Senate candidates, multiple two-year cycles exist between elections.
		 * Get candidate/{candidate_id}/totals/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @return {void} 
		 */
		Candidate_candidate_idTotalsGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, candidate_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidate/' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '/totals/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Fetch basic information about candidates, and use parameters to filter results to the
		 * candidates you're looking for.
		 * Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a
		 * particular office sought. If a candidate runs for the same office multiple times, the ID
		 * stays the same. If the same person runs for another office — for example, a House
		 * candidate runs for a Senate office — that candidate will get a unique ID for each office.
		 * Get candidates/
		 * @param {Array<string>} incumbent_challenge One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * @param {Date} min_first_file_date Selects all candidates whose first filing was received by the FEC after this date.
		 * @param {Array<string>} q Name of candidate running for office
		 * @param {Array<number>} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} federal_funds_flag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {Array<string>} name Name (candidate or committee) to search for. Alias for 'q'.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {Array<string>} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} candidate_status One-letter code explaining if the candidate is:
		 *         - C present candidate
		 *         - F future candidate
		 *         - N not yet a candidate
		 *         - P prior candidate
		 * @param {Date} max_first_file_date Selects all candidates whose first filing was received by the FEC before this date.
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} has_raised_funds A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} is_active_candidate  Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {string} year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
		 * @return {void} 
		 */
		CandidatesGetByIncumbent_challengeAndMin_first_file_dateAndQAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndMax_first_file_dateAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndYear(incumbent_challenge: Array<string> | null | undefined, min_first_file_date: Date | null | undefined, q: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, federal_funds_flag: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, name: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, office: Array<string> | null | undefined, sort: string | null | undefined, candidate_status: Array<string> | null | undefined, max_first_file_date: Date | null | undefined, district: Array<string> | null | undefined, api_key: string, has_raised_funds: boolean | null | undefined, party: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, is_active_candidate: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, year: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidates/?' + incumbent_challenge?.map(z => `incumbent_challenge=${encodeURIComponent(z)}`).join('&') + '&min_first_file_date=' + min_first_file_date?.toISOString() + '&' + q?.map(z => `q=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&federal_funds_flag=' + federal_funds_flag + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&' + name?.map(z => `name=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&' + office?.map(z => `office=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + candidate_status?.map(z => `candidate_status=${encodeURIComponent(z)}`).join('&') + '&max_first_file_date=' + max_first_file_date?.toISOString() + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&has_raised_funds=' + has_raised_funds + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&is_active_candidate=' + is_active_candidate + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&year=' + (year == null ? '' : encodeURIComponent(year)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Fetch basic information about candidates and their principal committees.
		 * Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a
		 * particular office sought. If a candidate runs for the same office over time, that ID
		 * stays the same. If the same person runs for multiple offices — for example, a House
		 * candidate runs for a Senate office — that candidate will get a unique ID for each office.
		 * The candidate endpoints primarily use data from FEC registration
		 * [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and
		 * [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information.
		 * Get candidates/search/
		 * @param {Array<string>} incumbent_challenge One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * @param {Date} min_first_file_date Selects all candidates whose first filing was received by the FEC after this date.
		 * @param {Array<string>} q Name of candidate running for office
		 * @param {Array<number>} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} federal_funds_flag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {Array<string>} name Name (candidate or committee) to search for. Alias for 'q'.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {Array<string>} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} candidate_status One-letter code explaining if the candidate is:
		 *         - C present candidate
		 *         - F future candidate
		 *         - N not yet a candidate
		 *         - P prior candidate
		 * @param {Date} max_first_file_date Selects all candidates whose first filing was received by the FEC before this date.
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} has_raised_funds A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} is_active_candidate  Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {string} year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
		 * @return {void} 
		 */
		CandidatesSearchGetByIncumbent_challengeAndMin_first_file_dateAndQAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndMax_first_file_dateAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndYear(incumbent_challenge: Array<string> | null | undefined, min_first_file_date: Date | null | undefined, q: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, federal_funds_flag: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, name: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, office: Array<string> | null | undefined, sort: string | null | undefined, candidate_status: Array<string> | null | undefined, max_first_file_date: Date | null | undefined, district: Array<string> | null | undefined, api_key: string, has_raised_funds: boolean | null | undefined, party: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, is_active_candidate: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, year: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidates/search/?' + incumbent_challenge?.map(z => `incumbent_challenge=${encodeURIComponent(z)}`).join('&') + '&min_first_file_date=' + min_first_file_date?.toISOString() + '&' + q?.map(z => `q=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&federal_funds_flag=' + federal_funds_flag + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&' + name?.map(z => `name=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&' + office?.map(z => `office=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + candidate_status?.map(z => `candidate_status=${encodeURIComponent(z)}`).join('&') + '&max_first_file_date=' + max_first_file_date?.toISOString() + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&has_raised_funds=' + has_raised_funds + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&is_active_candidate=' + is_active_candidate + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&year=' + (year == null ? '' : encodeURIComponent(year)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Aggregated candidate receipts and disbursements grouped by cycle.
		 * Get candidates/totals/
		 * @param {string} max_disbursements Maximum aggregated disbursements
		 * @param {Array<string>} q Name of candidate running for office
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} max_cash_on_hand_end_period Maximum cash on hand
		 * @param {string} max_debts_owed_by_committee Maximum debt
		 * @param {string} min_disbursements Minimum aggregated disbursements
		 * @param {boolean} federal_funds_flag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {Array<string>} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} district District of candidate
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {string} min_debts_owed_by_committee Minimum debt
		 * @param {string} max_receipts Maximum aggregated receipts
		 * @param {boolean} has_raised_funds A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		 * @param {Array<string>} party Three-letter party code
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} is_active_candidate  Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state State of candidate
		 * @param {string} min_cash_on_hand_end_period Minimum cash on hand
		 * @param {string} min_receipts Minimum aggregated receipts
		 * @return {void} 
		 */
		CandidatesTotalsGetByMax_disbursementsAndQAndCycleAndSort_null_onlyAndMax_cash_on_hand_end_periodAndMax_debts_owed_by_committeeAndMin_disbursementsAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndOfficeAndSortAndDistrictAndApi_keyAndElection_fullAndMin_debts_owed_by_committeeAndMax_receiptsAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndMin_cash_on_hand_end_periodAndMin_receipts(max_disbursements: string | null | undefined, q: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, max_cash_on_hand_end_period: string | null | undefined, max_debts_owed_by_committee: string | null | undefined, min_disbursements: string | null | undefined, federal_funds_flag: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, office: Array<string> | null | undefined, sort: string | null | undefined, district: Array<string> | null | undefined, api_key: string, election_full: boolean | null | undefined, min_debts_owed_by_committee: string | null | undefined, max_receipts: string | null | undefined, has_raised_funds: boolean | null | undefined, party: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, is_active_candidate: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, min_cash_on_hand_end_period: string | null | undefined, min_receipts: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidates/totals/?max_disbursements=' + (max_disbursements == null ? '' : encodeURIComponent(max_disbursements)) + '&' + q?.map(z => `q=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_cash_on_hand_end_period=' + (max_cash_on_hand_end_period == null ? '' : encodeURIComponent(max_cash_on_hand_end_period)) + '&max_debts_owed_by_committee=' + (max_debts_owed_by_committee == null ? '' : encodeURIComponent(max_debts_owed_by_committee)) + '&min_disbursements=' + (min_disbursements == null ? '' : encodeURIComponent(min_disbursements)) + '&federal_funds_flag=' + federal_funds_flag + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&' + office?.map(z => `office=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&min_debts_owed_by_committee=' + (min_debts_owed_by_committee == null ? '' : encodeURIComponent(min_debts_owed_by_committee)) + '&max_receipts=' + (max_receipts == null ? '' : encodeURIComponent(max_receipts)) + '&has_raised_funds=' + has_raised_funds + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&is_active_candidate=' + is_active_candidate + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&min_cash_on_hand_end_period=' + (min_cash_on_hand_end_period == null ? '' : encodeURIComponent(min_cash_on_hand_end_period)) + '&min_receipts=' + (min_receipts == null ? '' : encodeURIComponent(min_receipts)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Candidate total receipts and disbursements aggregated by `aggregate_by`.
		 * Get candidates/totals/aggregates/
		 * @param {number} max_election_cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice} office Federal office candidate runs for: H, S or P
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {number} min_election_cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byParty} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {boolean} is_active_candidate  Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byAggregate_by} aggregate_by Candidate totals aggregate_by (Chose one of dropdown options):
		 *         - ' ' grouped by election year
		 *         - office grouped by election year, by office
		 *         - office-state grouped by election year, by office, by state
		 *         - office-state-district grouped by election year, by office, by state, by district
		 *         - office-party grouped by election year, by office, by party
		 * @return {void} 
		 */
		CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_by(max_election_cycle: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, office: CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice | null | undefined, sort: Array<string> | null | undefined, min_election_cycle: number | null | undefined, district: Array<string> | null | undefined, api_key: string, election_full: boolean | null | undefined, party: CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byParty | null | undefined, is_active_candidate: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, aggregate_by: CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byAggregate_by | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidates/totals/aggregates/?max_election_cycle=' + max_election_cycle + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&office=' + office + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&min_election_cycle=' + min_election_cycle + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&party=' + party + '&is_active_candidate=' + is_active_candidate + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&aggregate_by=' + aggregate_by, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Aggregated candidate receipts and disbursements grouped by office by cycle.
		 * Get candidates/totals/by_office/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {number} max_election_cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {boolean} is_active_candidate  Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {Array<number>} election_year 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {number} min_election_cycle 
		 * Filter records to only those that are applicable to a given two-year
		 * period. This cycle follows the traditional House election cycle and
		 * subdivides the presidential and Senate elections into comparable
		 * two-year blocks. The cycle begins with an odd year and is named for its
		 * ending, even year.
		 * @return {void} 
		 */
		CandidatesTotalsBy_officeGetByApi_keyAndMax_election_cycleAndElection_fullAndIs_active_candidateAndPageAndSort_null_onlyAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortAndMin_election_cycle(api_key: string, max_election_cycle: number | null | undefined, election_full: boolean | null | undefined, is_active_candidate: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, election_year: Array<number> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, office: CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice | null | undefined, sort: string | null | undefined, min_election_cycle: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidates/totals/by_office/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&max_election_cycle=' + max_election_cycle + '&election_full=' + election_full + '&is_active_candidate=' + is_active_candidate + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_nulls_last=' + sort_nulls_last + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&office=' + office + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&min_election_cycle=' + min_election_cycle, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Aggregated candidate receipts and disbursements grouped by office by party by cycle.
		 * Get candidates/totals/by_office/by_party/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} is_active_candidate  Candidates who are actively seeking office. If no value is specified, all candidates
		 * are returned. When True is specified, only active candidates are returned. When False is
		 * specified, only inactive candidates are returned.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {Array<number>} election_year 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		CandidatesTotalsBy_officeBy_partyGetByApi_keyAndElection_fullAndSort_null_onlyAndPageAndIs_active_candidateAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSort(api_key: string, election_full: boolean | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, is_active_candidate: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, election_year: Array<number> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, office: CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'candidates/totals/by_office/by_party/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&sort_null_only=' + sort_null_only + '&page=' + page + '&is_active_candidate=' + is_active_candidate + '&sort_nulls_last=' + sort_nulls_last + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&office=' + office + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint is useful for finding detailed information about a particular committee or
		 * filer. Use the `committee_id` to find the most recent information about the committee.
		 * Get committee/{committee_id}/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {Array<number>} cycle 
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<number>} year A year that the committee was active— (after original registration date     or filing but before expiration date)
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} filing_frequency The one-letter 
		 *     code of the filing frequency:
		 *          - A Administratively terminated
		 *          - D Debt
		 *          - M Monthly filer
		 *          - Q Quarterly filer
		 *          - T Terminated
		 *          - W Waived
		 * @param {Array<string>} organization_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndYearAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndFiling_frequencyAndOrganization_typeAndDesignationAndSort(api_key: string, committee_type: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, year: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, filing_frequency: Array<string> | null | undefined, organization_type: Array<string> | null | undefined, designation: Array<string> | null | undefined, sort: string | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + year?.map(z => `year=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + filing_frequency?.map(z => `filing_frequency=${encodeURIComponent(z)}`).join('&') + '&' + organization_type?.map(z => `organization_type=${encodeURIComponent(z)}`).join('&') + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint is useful for finding detailed information about a particular candidate. Use the
		 * `candidate_id` to find the most recent information about that candidate.
		 * Get committee/{committee_id}/candidates/
		 * @param {Array<string>} incumbent_challenge One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		 * @param {Array<number>} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} federal_funds_flag A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} name Name (candidate or committee) to search for. Alias for 'q'.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice>} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} candidate_status One-letter code explaining if the candidate is:
		 *         - C present candidate
		 *         - F future candidate
		 *         - N not yet a candidate
		 *         - P prior candidate
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} has_raised_funds A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {string} year Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idCandidatesGetByIncumbent_challengeAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndPageAndStateAndYear(incumbent_challenge: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, federal_funds_flag: boolean | null | undefined, sort_hide_null: boolean | null | undefined, name: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, office: Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice> | null | undefined, sort: string | null | undefined, candidate_status: Array<string> | null | undefined, district: Array<string> | null | undefined, api_key: string, has_raised_funds: boolean | null | undefined, party: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, year: string | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/candidates/?' + incumbent_challenge?.map(z => `incumbent_challenge=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&federal_funds_flag=' + federal_funds_flag + '&sort_hide_null=' + sort_hide_null + '&' + name?.map(z => `name=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&' + office?.map(z => `office=${z}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + candidate_status?.map(z => `candidate_status=${encodeURIComponent(z)}`).join('&') + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&has_raised_funds=' + has_raised_funds + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&year=' + (year == null ? '' : encodeURIComponent(year)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Find out a candidate's characteristics over time. This is particularly useful if the
		 * candidate runs for the same office in different districts or you want to know more about a candidate's
		 * previous races.
		 * This information is organized by `candidate_id`, so it won't help you find a candidate
		 * who ran for different offices over time; candidates get a new ID for each office.
		 * Get committee/{committee_id}/candidates/history/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idCandidatesHistoryGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, election_full: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/candidates/history/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&election_full=' + election_full + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Find out a candidate's characteristics over time. This is particularly useful if the
		 * candidate runs for the same office in different districts or you want to know more about a candidate's
		 * previous races.
		 * This information is organized by `candidate_id`, so it won't help you find a candidate
		 * who ran for different offices over time; candidates get a new ID for each office.
		 * Get committee/{committee_id}/candidates/history/{cycle}/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {number} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @return {void} 
		 */
		Committee_committee_idCandidatesHistory_cycleGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, election_full: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, committee_id: string, cycle: number, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/candidates/history/' + cycle + '/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&election_full=' + election_full + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * All official records and reports filed by or delivered to the FEC.
		 * Note: because the filings data includes many records, counts for large
		 * result sets are approximate; you will want to page through the records until no records are returned.
		 * Get committee/{committee_id}/filings/
		 * @param {boolean} is_amended 
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} form_category 
		 * The forms filed are categorized based on the nature of the filing:
		 *     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		 *     - NOTICE F5, F24, F6, F9, F10, F11
		 *     - STATEMENT F1, F2
		 *     - OTHER F1M, F8, F99, F12, FRQ
		 * @param {Array<string>} request_type 
		 * Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		 *     - 1 Statement of Organization
		 *     - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		 *     - 3 Second Notice - Reports
		 *     - 4 Request for Additional Information
		 *     - 5 Informational - Reports
		 *     - 6 Second Notice - Statement of Organization
		 *     - 7 Failure to File
		 *     - 8 From Public Disclosure
		 *     - 9 From Multi Candidate Status
		 * @param {Array<string>} primary_general_indicator 
		 * Primary, general or special election indicator.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice>} office Federal office candidate runs for: H, S or P
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type} filer_type The method used to file with the FEC, either electronic or on paper.
		 * @param {boolean} most_recent 
		 * Report is either new or is the most-recently filed amendment
		 * @param {Array<string>} report_type Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 *     - 90S Post Inaugural Supplement
		 *     - 90D Post Inaugural
		 *     - 48  48 Hour Notification
		 *     - 24  24 Hour Notification
		 *     - M7S July Monthly/Semi-Annual
		 *     - MSA Monthly Semi-Annual (MY)
		 *     - MYS Monthly Year End/Semi-Annual
		 *     - Q2S July Quarterly/Semi-Annual
		 *     - QSA Quarterly Semi-Annual (MY)
		 *     - QYS Quarterly Year End/Semi-Annual
		 *     - QYE Quarterly Semi-Annual (YE)
		 *     - QMS Quarterly Mid-Year/ Semi-Annual
		 *     - MSY Monthly Semi-Annual (YE)
		 * @param {string} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {Array<string>} form_type The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 *     - F1   Statement of Organization
		 *     - F1M  Notification of Multicandidate Status
		 *     - F2   Statement of Candidacy
		 *     - F3   Report of Receipts and Disbursements for an Authorized Committee
		 *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 *     - F5   Report of Independent Expenditures Made and Contributions Received
		 *     - F6   48 Hour Notice of Contributions/Loans Received
		 *     - F7   Report of Communication Costs by Corporations and Membership Organizations
		 *     - F8   Debt Settlement Plan
		 *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 *     - F13  Report of Donations Accepted for Inaugural Committee
		 *     - F99  Miscellaneous Text
		 *     - FRQ  Request for Additional Information
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {Array<number>} report_year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {Array<string>} amendment_indicator Amendent types:
		 *     -N   new
		 *     -A   amendment
		 *     -T   terminated
		 *     -C   consolidated
		 *     -M   multi-candidate
		 *     -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 * @param {Array<string>} document_type 
		 * The type of document for documents other than reports:
		 *     - 2 24 Hour Contribution Notice
		 *     - 4 48 Hour Contribution Notice
		 *     - A Debt Settlement Statement
		 *     - B Acknowledgment of Receipt of Debt Settlement Statement
		 *     - C RFAI: Debt Settlement First Notice
		 *     - D Commission Debt Settlement Review
		 *     - E Commission Response TO Debt Settlement Request
		 *     - F Administrative Termination
		 *     - G Debt Settlement Plan Amendment
		 *     - H Disavowal Notice
		 *     - I Disavowal Response
		 *     - J Conduit Report
		 *     - K Termination Approval
		 *     - L Repeat Non-Filer Notice
		 *     - M Filing Frequency Change Notice
		 *     - N Paper Amendment to Electronic Report
		 *     - O Acknowledgment of Filing Frequency Change
		 *     - S RFAI: Debt Settlement Second
		 *     - T Miscellaneous Report TO FEC
		 *     - V Repeat Violation Notice (441A OR 441B)
		 *     - P Notice of Paper Filing
		 *     - R F3L Filing Frequency Change Notice
		 *     - Q Acknowledgment of F3L Filing Frequency Change
		 *     - U Unregistered Committee Notice
		 * @param {Array<string>} beginning_image_number 
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_number(is_amended: boolean | null | undefined, min_receipt_date: Date | null | undefined, form_category: Array<string> | null | undefined, request_type: Array<string> | null | undefined, primary_general_indicator: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, office: Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice> | null | undefined, sort: Array<string> | null | undefined, q_filer: Array<string> | null | undefined, district: Array<string> | null | undefined, api_key: string, filer_type: Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type | null | undefined, most_recent: boolean | null | undefined, report_type: Array<string> | null | undefined, committee_type: string | null | undefined, party: Array<string> | null | undefined, form_type: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, report_year: Array<number> | null | undefined, amendment_indicator: Array<string> | null | undefined, document_type: Array<string> | null | undefined, beginning_image_number: Array<string> | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/filings/?is_amended=' + is_amended + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&' + form_category?.map(z => `form_category=${encodeURIComponent(z)}`).join('&') + '&' + request_type?.map(z => `request_type=${encodeURIComponent(z)}`).join('&') + '&' + primary_general_indicator?.map(z => `primary_general_indicator=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&' + office?.map(z => `office=${z}`).join('&') + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&') + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&filer_type=' + filer_type + '&most_recent=' + most_recent + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&committee_type=' + (committee_type == null ? '' : encodeURIComponent(committee_type)) + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&' + form_type?.map(z => `form_type=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&' + report_year?.map(z => `report_year=${z}`).join('&') + '&' + amendment_indicator?.map(z => `amendment_indicator=${encodeURIComponent(z)}`).join('&') + '&' + document_type?.map(z => `document_type=${encodeURIComponent(z)}`).join('&') + '&' + beginning_image_number?.map(z => `beginning_image_number=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		 * Get committee/{committee_id}/history/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idHistoryGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort(api_key: string, election_full: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, designation: Array<string> | null | undefined, sort: string | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/history/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		 * Get committee/{committee_id}/history/{cycle}/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {number} cycle 
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * @return {void} 
		 */
		Committee_committee_idHistory_cycleGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort(api_key: string, election_full: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, designation: Array<string> | null | undefined, sort: string | null | undefined, committee_id: string, cycle: number, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/history/' + cycle + '/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Each report represents the summary information from Form 3, Form 3X and Form 3P.
		 * These reports have key statistics that illuminate the financial status of a given committee.
		 * Things like cash on hand, debts owed by committee, total receipts, and total disbursements
		 * are especially helpful for understanding a committee's financial dealings.
		 * By default, this endpoint includes both amended and final versions of each report. To restrict
		 * to only the final versions of each report, use `is_amended=false`; to retrieve only reports that
		 * have been amended, use `is_amended=true`.
		 * Several different reporting structures exist, depending on the type of organization that
		 * submits financial information. To see an example of these reporting requirements,
		 * look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.
		 * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		 * label these fields while conveying clear meaning to ensure accessibility for all users.
		 * Get committee/{committee_id}/reports/
		 * @param {string} min_party_coordinated_expenditures 
		 * Filter for all amounts greater than a value.
		 * @param {boolean} is_amended 
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 * @param {string} max_party_coordinated_expenditures 
		 * Filter for all amounts less than a value.
		 * @param {string} max_cash_on_hand_end_period_amount 
		 * Filter for all amounts less than a value.
		 * @param {string} max_disbursements_amount 
		 * Filter for all amounts less than a value.
		 * @param {string} max_debts_owed_expenditures 
		 * Filter for all amounts less than a value.
		 * @param {string} min_receipts_amount 
		 * Filter for all amounts greater than a value.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} min_debts_owed_amount 
		 * Filter for all amounts greater than a value.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {string} min_independent_expenditures 
		 * Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {string} max_receipts_amount 
		 * Filter for all amounts less than a value.
		 * @param {Array<string>} report_type Report type; prefix with "-" to exclude. Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 * @param {string} max_total_contributions 
		 * Filter for all amounts less than a value.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<number>} year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {string} max_independent_expenditures 
		 * Filter for all amounts less than a value.
		 * @param {Array<string>} type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {string} min_cash_on_hand_end_period_amount 
		 * Filter for all amounts greater than a value.
		 * @param {string} min_disbursements_amount 
		 * Filter for all amounts greater than a value.
		 * @param {string} min_total_contributions 
		 * Filter for all amounts greater than a value.
		 * @param {Array<string>} beginning_image_number 
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idReportsGetByMin_party_coordinated_expendituresAndIs_amendedAndMax_party_coordinated_expendituresAndMax_cash_on_hand_end_period_amountAndMax_disbursements_amountAndMax_debts_owed_expendituresAndMin_receipts_amountAndCycleAndSort_null_onlyAndMin_debts_owed_amountAndSort_hide_nullAndCandidate_idAndMin_independent_expendituresAndPer_pageAndSortAndApi_keyAndMax_receipts_amountAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndPageAndYearAndMax_independent_expendituresAndTypeAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMin_total_contributionsAndBeginning_image_number(min_party_coordinated_expenditures: string | null | undefined, is_amended: boolean | null | undefined, max_party_coordinated_expenditures: string | null | undefined, max_cash_on_hand_end_period_amount: string | null | undefined, max_disbursements_amount: string | null | undefined, max_debts_owed_expenditures: string | null | undefined, min_receipts_amount: string | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, min_debts_owed_amount: string | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: string | null | undefined, min_independent_expenditures: string | null | undefined, per_page: number | null | undefined, sort: Array<string> | null | undefined, api_key: string, max_receipts_amount: string | null | undefined, report_type: Array<string> | null | undefined, max_total_contributions: string | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, year: Array<number> | null | undefined, max_independent_expenditures: string | null | undefined, type: Array<string> | null | undefined, min_cash_on_hand_end_period_amount: string | null | undefined, min_disbursements_amount: string | null | undefined, min_total_contributions: string | null | undefined, beginning_image_number: Array<string> | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/reports/?min_party_coordinated_expenditures=' + (min_party_coordinated_expenditures == null ? '' : encodeURIComponent(min_party_coordinated_expenditures)) + '&is_amended=' + is_amended + '&max_party_coordinated_expenditures=' + (max_party_coordinated_expenditures == null ? '' : encodeURIComponent(max_party_coordinated_expenditures)) + '&max_cash_on_hand_end_period_amount=' + (max_cash_on_hand_end_period_amount == null ? '' : encodeURIComponent(max_cash_on_hand_end_period_amount)) + '&max_disbursements_amount=' + (max_disbursements_amount == null ? '' : encodeURIComponent(max_disbursements_amount)) + '&max_debts_owed_expenditures=' + (max_debts_owed_expenditures == null ? '' : encodeURIComponent(max_debts_owed_expenditures)) + '&min_receipts_amount=' + (min_receipts_amount == null ? '' : encodeURIComponent(min_receipts_amount)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&min_debts_owed_amount=' + (min_debts_owed_amount == null ? '' : encodeURIComponent(min_debts_owed_amount)) + '&sort_hide_null=' + sort_hide_null + '&candidate_id=' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '&min_independent_expenditures=' + (min_independent_expenditures == null ? '' : encodeURIComponent(min_independent_expenditures)) + '&per_page=' + per_page + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&max_receipts_amount=' + (max_receipts_amount == null ? '' : encodeURIComponent(max_receipts_amount)) + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&max_total_contributions=' + (max_total_contributions == null ? '' : encodeURIComponent(max_total_contributions)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + year?.map(z => `year=${z}`).join('&') + '&max_independent_expenditures=' + (max_independent_expenditures == null ? '' : encodeURIComponent(max_independent_expenditures)) + '&' + type?.map(z => `type=${encodeURIComponent(z)}`).join('&') + '&min_cash_on_hand_end_period_amount=' + (min_cash_on_hand_end_period_amount == null ? '' : encodeURIComponent(min_cash_on_hand_end_period_amount)) + '&min_disbursements_amount=' + (min_disbursements_amount == null ? '' : encodeURIComponent(min_disbursements_amount)) + '&min_total_contributions=' + (min_total_contributions == null ? '' : encodeURIComponent(min_total_contributions)) + '&' + beginning_image_number?.map(z => `beginning_image_number=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
		 * which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
		 * The cycle is named after the even-numbered year and includes the year before it. To obtain
		 * totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
		 * is the next year — for example, in 2015, the current cycle is 2016.
		 * For presidential and Senate candidates, multiple two-year cycles exist between elections.
		 * Get committee/{committee_id}/totals/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @return {void} 
		 */
		Committee_committee_idTotalsGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_nulls_lastAndSortAndCycleAndSort_null_only(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort_nulls_last: boolean | null | undefined, sort: string | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, committee_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committee/' + (committee_id == null ? '' : encodeURIComponent(committee_id)) + '/totals/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort_nulls_last=' + sort_nulls_last + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Fetch basic information about committees and filers. Use parameters to filter for
		 * particular characteristics.
		 * Get committees/
		 * @param {Array<string>} treasurer_name Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * @param {Array<string>} q The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * @param {Date} min_first_file_date Filter for committees whose first filing was received on or after this date.
		 * @param {Array<number>} cycle 
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * @param {Array<string>} sponsor_candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} filing_frequency The one-letter 
		 *     code of the filing frequency:
		 *          - A Administratively terminated
		 *          - D Debt
		 *          - M Monthly filer
		 *          - Q Quarterly filer
		 *          - T Terminated
		 *          - W Waived
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} max_first_file_date Filter for committees whose first filing was received on or before this date.
		 * @param {Date} min_first_f1_date Filter for committees whose first Form 1 was received on or after this date.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_last_f1_date Filter for committees whose latest Form 1 was received on or after this date.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<number>} year A year that the committee was active— (after original registration date     or filing but before expiration date)
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} state US state or territory
		 * @param {Date} max_last_f1_date Filter for committees whose latest Form 1 was received on or before this date.
		 * @param {Date} max_first_f1_date Filter for committees whose first Form 1 was received on or before this date.
		 * @param {Array<string>} designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {Array<string>} organization_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @return {void} 
		 */
		CommitteesGetByTreasurer_nameAndQAndMin_first_file_dateAndCycleAndSponsor_candidate_idAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndFiling_frequencyAndSortAndMax_first_file_dateAndMin_first_f1_dateAndApi_keyAndMin_last_f1_dateAndCommittee_typeAndPartyAndSort_nulls_lastAndPageAndYearAndCommittee_idAndStateAndMax_last_f1_dateAndMax_first_f1_dateAndDesignationAndOrganization_type(treasurer_name: Array<string> | null | undefined, q: Array<string> | null | undefined, min_first_file_date: Date | null | undefined, cycle: Array<number> | null | undefined, sponsor_candidate_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, filing_frequency: Array<string> | null | undefined, sort: string | null | undefined, max_first_file_date: Date | null | undefined, min_first_f1_date: Date | null | undefined, api_key: string, min_last_f1_date: Date | null | undefined, committee_type: Array<string> | null | undefined, party: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, year: Array<number> | null | undefined, committee_id: Array<string> | null | undefined, state: Array<string> | null | undefined, max_last_f1_date: Date | null | undefined, max_first_f1_date: Date | null | undefined, designation: Array<string> | null | undefined, organization_type: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'committees/?' + treasurer_name?.map(z => `treasurer_name=${encodeURIComponent(z)}`).join('&') + '&' + q?.map(z => `q=${encodeURIComponent(z)}`).join('&') + '&min_first_file_date=' + min_first_file_date?.toISOString() + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&' + sponsor_candidate_id?.map(z => `sponsor_candidate_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + filing_frequency?.map(z => `filing_frequency=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&max_first_file_date=' + max_first_file_date?.toISOString() + '&min_first_f1_date=' + min_first_f1_date?.toISOString() + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_last_f1_date=' + min_last_f1_date?.toISOString() + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + year?.map(z => `year=${z}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&max_last_f1_date=' + max_last_f1_date?.toISOString() + '&max_first_f1_date=' + max_first_f1_date?.toISOString() + '&' + designation?.map(z => `designation=${encodeURIComponent(z)}`).join('&') + '&' + organization_type?.map(z => `organization_type=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * 52 U.S.C. 30118 allows "communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject," including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances.
		 * Get communication_costs/
		 * @param {Date} min_date Minimum date
		 * @param {Array<string>} support_oppose_indicator Support or opposition
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @return {void} 
		 */
		Communication_costsGetByMin_dateAndSupport_oppose_indicatorAndMax_image_numberAndMin_image_numberAndSort_null_onlyAndSort_hide_nullAndMin_amountAndPer_pageAndCandidate_idAndLine_numberAndSortAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount(min_date: Date | null | undefined, support_oppose_indicator: Array<string> | null | undefined, max_image_number: string | null | undefined, min_image_number: string | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, min_amount: string | null | undefined, per_page: number | null | undefined, candidate_id: Array<string> | null | undefined, line_number: string | null | undefined, sort: string | null | undefined, api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_amount: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'communication_costs/?min_date=' + min_date?.toISOString() + '&' + support_oppose_indicator?.map(z => `support_oppose_indicator=${encodeURIComponent(z)}`).join('&') + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&per_page=' + per_page + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Communication cost aggregated by candidate ID and committee ID.
		 * Get communication_costs/aggregates/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator} support_oppose_indicator Support or opposition
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, support_oppose_indicator: Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'communication_costs/aggregates/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&support_oppose_indicator=' + support_oppose_indicator + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Communication cost aggregated by candidate ID and committee ID.
		 * Get communication_costs/by_candidate/
		 * @param {string} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator} support_oppose Support or opposition
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} state US state or territory where a candidate runs for office
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSort(district: string | null | undefined, api_key: string, support_oppose: Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator | null | undefined, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: string | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, office: Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'communication_costs/by_candidate/?district=' + (district == null ? '' : encodeURIComponent(district)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&support_oppose=' + support_oppose + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&state=' + (state == null ? '' : encodeURIComponent(state)) + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&office=' + office + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Total communications costs aggregated across committees on supported or opposed candidates by cycle or candidate election year.
		 * Get communication_costs/totals/by_candidate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		Communication_costsTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'communication_costs/totals/by_candidate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Basic information about electronic files coming into the FEC, posted as they are received.
		 * Get efile/filings/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @return {void} 
		 */
		EfileFilingsGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer(api_key: string, min_receipt_date: Date | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, q_filer: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'efile/filings/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Key financial data reported periodically by committees as they are reported. This feed includes summary
		 * information from the the House F3 reports, the presidential F3p reports and the PAC and party
		 * F3x reports.
		 * Generally, committees file reports on a quarterly or monthly basis, but
		 * some must also submit a report 12 days before primary elections. Therefore, during the primary
		 * season, the period covered by this file may be different for different committees. These totals
		 * also incorporate any changes made by committees, if any report covering the period is amended.
		 * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		 * label these fields while conveying clear meaning to ensure accessibility for all users.
		 * Get efile/reports/house-senate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @return {void} 
		 */
		EfileReportsHouse_senateGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer(api_key: string, min_receipt_date: Date | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, q_filer: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'efile/reports/house-senate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Key financial data reported periodically by committees as they are reported. This feed includes summary
		 * information from the the House F3 reports, the presidential F3p reports and the PAC and party
		 * F3x reports.
		 * Generally, committees file reports on a quarterly or monthly basis, but
		 * some must also submit a report 12 days before primary elections. Therefore, during the primary
		 * season, the period covered by this file may be different for different committees. These totals
		 * also incorporate any changes made by committees, if any report covering the period is amended.
		 * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		 * label these fields while conveying clear meaning to ensure accessibility for all users.
		 * Get efile/reports/pac-party/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @return {void} 
		 */
		EfileReportsPac_partyGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer(api_key: string, min_receipt_date: Date | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, q_filer: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'efile/reports/pac-party/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Key financial data reported periodically by committees as they are reported. This feed includes summary
		 * information from the the House F3 reports, the presidential F3p reports and the PAC and party
		 * F3x reports.
		 * Generally, committees file reports on a quarterly or monthly basis, but
		 * some must also submit a report 12 days before primary elections. Therefore, during the primary
		 * season, the period covered by this file may be different for different committees. These totals
		 * also incorporate any changes made by committees, if any report covering the period is amended.
		 * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		 * label these fields while conveying clear meaning to ensure accessibility for all users.
		 * Get efile/reports/presidential/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @return {void} 
		 */
		EfileReportsPresidentialGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer(api_key: string, min_receipt_date: Date | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, q_filer: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'efile/reports/presidential/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * FEC election dates since 1995.
		 * Get election-dates/
		 * @param {Array<string>} election_state 
		 * State or territory of the office sought.
		 * @param {Date} max_election_date 
		 * The maximum date of election.
		 * @param {Array<string>} election_district 
		 * House district of the office sought, if applicable.
		 * @param {Date} min_update_date 
		 * The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Date} max_create_date 
		 * The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} election_year Year of election
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} min_create_date 
		 * The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} election_party 
		 * Party, if applicable.
		 * @param {Array<string>} office_sought 
		 * House, Senate or presidential office.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Date} max_update_date 
		 * The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} election_type_id 
		 * Election type id
		 * @param {Date} max_primary_general_date 
		 * The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Date} min_election_date 
		 * The minimum date of election.
		 * @param {Date} min_primary_general_date 
		 * The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
		 * @return {void} 
		 */
		Election_datesGetByElection_stateAndMax_election_dateAndElection_districtAndMin_update_dateAndSort_null_onlyAndSort_hide_nullAndMax_create_dateAndPer_pageAndElection_yearAndSortAndMin_create_dateAndApi_keyAndElection_partyAndOffice_soughtAndSort_nulls_lastAndPageAndMax_update_dateAndElection_type_idAndMax_primary_general_dateAndMin_election_dateAndMin_primary_general_date(election_state: Array<string> | null | undefined, max_election_date: Date | null | undefined, election_district: Array<string> | null | undefined, min_update_date: Date | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, max_create_date: Date | null | undefined, per_page: number | null | undefined, election_year: Array<string> | null | undefined, sort: string | null | undefined, min_create_date: Date | null | undefined, api_key: string, election_party: Array<string> | null | undefined, office_sought: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, max_update_date: Date | null | undefined, election_type_id: Array<string> | null | undefined, max_primary_general_date: Date | null | undefined, min_election_date: Date | null | undefined, min_primary_general_date: Date | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'election-dates/?' + election_state?.map(z => `election_state=${encodeURIComponent(z)}`).join('&') + '&max_election_date=' + max_election_date?.toISOString() + '&' + election_district?.map(z => `election_district=${encodeURIComponent(z)}`).join('&') + '&min_update_date=' + min_update_date?.toISOString() + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&max_create_date=' + max_create_date?.toISOString() + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&min_create_date=' + min_create_date?.toISOString() + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + election_party?.map(z => `election_party=${encodeURIComponent(z)}`).join('&') + '&' + office_sought?.map(z => `office_sought=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&max_update_date=' + max_update_date?.toISOString() + '&' + election_type_id?.map(z => `election_type_id=${encodeURIComponent(z)}`).join('&') + '&max_primary_general_date=' + max_primary_general_date?.toISOString() + '&min_election_date=' + min_election_date?.toISOString() + '&min_primary_general_date=' + min_primary_general_date?.toISOString(), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:
		 * _The communication refers to a clearly identified federal candidate._
		 * _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._
		 * _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._
		 * Get electioneering/
		 * @param {Date} min_date Minimum disbursement date
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<number>} report_year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {number} last_index Index of last result from previous page
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {Date} max_date Maximum disbursement date
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		ElectioneeringGetByMin_dateAndApi_keyAndDescriptionAndSort_null_onlyAndPageAndCommittee_idAndReport_yearAndLast_indexAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndMin_amountAndMax_dateAndMax_amountAndSort(min_date: Date | null | undefined, api_key: string, description: string | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, report_year: Array<number> | null | undefined, last_index: number | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, min_amount: string | null | undefined, max_date: Date | null | undefined, max_amount: string | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'electioneering/?min_date=' + min_date?.toISOString() + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&description=' + (description == null ? '' : encodeURIComponent(description)) + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + report_year?.map(z => `report_year=${z}`).join('&') + '&last_index=' + last_index + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&max_date=' + max_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Electioneering communications costs aggregates
		 * Get electioneering/aggregates/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		ElectioneeringAggregatesGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'electioneering/aggregates/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Electioneering costs aggregated by candidate
		 * Get electioneering/by_candidate/
		 * @param {string} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} state US state or territory where a candidate runs for office
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		ElectioneeringBy_candidateGetByDistrictAndApi_keyAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSort(district: string | null | undefined, api_key: string, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: string | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, office: Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'electioneering/by_candidate/?district=' + (district == null ? '' : encodeURIComponent(district)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&state=' + (state == null ? '' : encodeURIComponent(state)) + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&office=' + office + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Total electioneering communications spent on candidates by cycle
		 * or candidate election year
		 * Get electioneering/totals/by_candidate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		ElectioneeringTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'electioneering/totals/by_candidate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Look at the top-level financial information for all candidates running for the same
		 * office.
		 * Choose a 2-year cycle, and `house`, `senate` or `presidential`.
		 * If you are looking for a Senate seat, you will need to select the state using a two-letter
		 * abbreviation.
		 * House races require state and a two-digit district number.
		 * Since this endpoint reflects financial information, it will only have candidates once they file
		 * financial reporting forms. Query the `/candidates` endpoint to retrieve an-up-to-date list of all the
		 * candidates that filed to run for a particular seat.
		 * Get elections/
		 * @param {string} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {number} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} state US state or territory where a candidate runs for office
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		ElectionsGetByDistrictAndApi_keyAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndOfficeAndSort(district: string | null | undefined, api_key: string, election_full: boolean | null | undefined, cycle: number, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: string | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, office: Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'elections/?district=' + (district == null ? '' : encodeURIComponent(district)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&cycle=' + cycle + '&sort_null_only=' + sort_null_only + '&page=' + page + '&state=' + (state == null ? '' : encodeURIComponent(state)) + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&office=' + office + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * List elections by cycle, office, state, and district.
		 * Get elections/search/
		 * @param {Array<number>} zip Zip code
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @return {void} 
		 */
		ElectionsSearchGetByZipAndDistrictAndApi_keyAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndStateAndSort_hide_nullAndPer_pageAndOfficeAndSort(zip: Array<number> | null | undefined, district: Array<string> | null | undefined, api_key: string, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, office: Array<Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice> | null | undefined, sort: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'elections/search/?' + zip?.map(z => `zip=${z}`).join('&') + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + office?.map(z => `office=${z}`).join('&') + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * List elections by cycle, office, state, and district.
		 * Get elections/summary/
		 * @param {string} state US state or territory where a candidate runs for office
		 * @param {string} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice} office Federal office candidate runs for: H, S or P
		 * @param {number} cycle 
		 * Two-year election cycle in which a candidate runs for office.
		 * Calculated from Form 2. The cycle begins with
		 * an odd year and is named for its ending, even year. This cycle follows
		 * the traditional house election cycle and subdivides the presidential
		 * and Senate elections into comparable two-year blocks. To retrieve data for
		 * the entire four years of a presidential term or six years of a senatorial term,
		 * you will need the `election_full` flag.
		 * @return {void} 
		 */
		ElectionsSummaryGetByStateAndDistrictAndApi_keyAndElection_fullAndOfficeAndCycle(state: string | null | undefined, district: string | null | undefined, api_key: string, election_full: boolean | null | undefined, office: Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice, cycle: number, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'elections/summary/?state=' + (state == null ? '' : encodeURIComponent(state)) + '&district=' + (district == null ? '' : encodeURIComponent(district)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&office=' + office + '&cycle=' + cycle, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * All official records and reports filed by or delivered to the FEC.
		 * Note: because the filings data includes many records, counts for large
		 * result sets are approximate; you will want to page through the records until no records are returned.
		 * Get filings/
		 * @param {boolean} is_amended 
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} form_category 
		 * The forms filed are categorized based on the nature of the filing:
		 *     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		 *     - NOTICE F5, F24, F6, F9, F10, F11
		 *     - STATEMENT F1, F2
		 *     - OTHER F1M, F8, F99, F12, FRQ
		 * @param {Array<string>} request_type 
		 * Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		 *     - 1 Statement of Organization
		 *     - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		 *     - 3 Second Notice - Reports
		 *     - 4 Request for Additional Information
		 *     - 5 Informational - Reports
		 *     - 6 Second Notice - Statement of Organization
		 *     - 7 Failure to File
		 *     - 8 From Public Disclosure
		 *     - 9 From Multi Candidate Status
		 * @param {Array<string>} primary_general_indicator 
		 * Primary, general or special election indicator.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {Array<number>} file_number Filing ID number
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice>} office Federal office candidate runs for: H, S or P
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @param {Array<string>} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type} filer_type The method used to file with the FEC, either electronic or on paper.
		 * @param {boolean} most_recent 
		 * Report is either new or is the most-recently filed amendment
		 * @param {Array<string>} report_type Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 *     - 90S Post Inaugural Supplement
		 *     - 90D Post Inaugural
		 *     - 48  48 Hour Notification
		 *     - 24  24 Hour Notification
		 *     - M7S July Monthly/Semi-Annual
		 *     - MSA Monthly Semi-Annual (MY)
		 *     - MYS Monthly Year End/Semi-Annual
		 *     - Q2S July Quarterly/Semi-Annual
		 *     - QSA Quarterly Semi-Annual (MY)
		 *     - QYS Quarterly Year End/Semi-Annual
		 *     - QYE Quarterly Semi-Annual (YE)
		 *     - QMS Quarterly Mid-Year/ Semi-Annual
		 *     - MSY Monthly Semi-Annual (YE)
		 * @param {string} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {Array<string>} party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {Array<string>} form_type The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 *     - F1   Statement of Organization
		 *     - F1M  Notification of Multicandidate Status
		 *     - F2   Statement of Candidacy
		 *     - F3   Report of Receipts and Disbursements for an Authorized Committee
		 *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 *     - F5   Report of Independent Expenditures Made and Contributions Received
		 *     - F6   48 Hour Notice of Contributions/Loans Received
		 *     - F7   Report of Communication Costs by Corporations and Membership Organizations
		 *     - F8   Debt Settlement Plan
		 *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 *     - F13  Report of Donations Accepted for Inaugural Committee
		 *     - F99  Miscellaneous Text
		 *     - FRQ  Request for Additional Information
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory where a candidate runs for office
		 * @param {Array<number>} report_year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} amendment_indicator Amendent types:
		 *     -N   new
		 *     -A   amendment
		 *     -T   terminated
		 *     -C   consolidated
		 *     -M   multi-candidate
		 *     -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 * @param {Array<string>} document_type 
		 * The type of document for documents other than reports:
		 *     - 2 24 Hour Contribution Notice
		 *     - 4 48 Hour Contribution Notice
		 *     - A Debt Settlement Statement
		 *     - B Acknowledgment of Receipt of Debt Settlement Statement
		 *     - C RFAI: Debt Settlement First Notice
		 *     - D Commission Debt Settlement Review
		 *     - E Commission Response TO Debt Settlement Request
		 *     - F Administrative Termination
		 *     - G Debt Settlement Plan Amendment
		 *     - H Disavowal Notice
		 *     - I Disavowal Response
		 *     - J Conduit Report
		 *     - K Termination Approval
		 *     - L Repeat Non-Filer Notice
		 *     - M Filing Frequency Change Notice
		 *     - N Paper Amendment to Electronic Report
		 *     - O Acknowledgment of Filing Frequency Change
		 *     - S RFAI: Debt Settlement Second
		 *     - T Miscellaneous Report TO FEC
		 *     - V Repeat Violation Notice (441A OR 441B)
		 *     - P Notice of Paper Filing
		 *     - R F3L Filing Frequency Change Notice
		 *     - Q Acknowledgment of F3L Filing Frequency Change
		 *     - U Unregistered Committee Notice
		 * @param {Array<string>} beginning_image_number 
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 * @return {void} 
		 */
		FilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndCommittee_idAndAmendment_indicatorAndDocument_typeAndBeginning_image_number(is_amended: boolean | null | undefined, min_receipt_date: Date | null | undefined, form_category: Array<string> | null | undefined, request_type: Array<string> | null | undefined, primary_general_indicator: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, file_number: Array<number> | null | undefined, per_page: number | null | undefined, office: Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice> | null | undefined, sort: Array<string> | null | undefined, q_filer: Array<string> | null | undefined, district: Array<string> | null | undefined, api_key: string, filer_type: Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type | null | undefined, most_recent: boolean | null | undefined, report_type: Array<string> | null | undefined, committee_type: string | null | undefined, party: Array<string> | null | undefined, form_type: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, report_year: Array<number> | null | undefined, committee_id: Array<string> | null | undefined, amendment_indicator: Array<string> | null | undefined, document_type: Array<string> | null | undefined, beginning_image_number: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'filings/?is_amended=' + is_amended + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&' + form_category?.map(z => `form_category=${encodeURIComponent(z)}`).join('&') + '&' + request_type?.map(z => `request_type=${encodeURIComponent(z)}`).join('&') + '&' + primary_general_indicator?.map(z => `primary_general_indicator=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&' + file_number?.map(z => `file_number=${z}`).join('&') + '&per_page=' + per_page + '&' + office?.map(z => `office=${z}`).join('&') + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&') + '&' + district?.map(z => `district=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&filer_type=' + filer_type + '&most_recent=' + most_recent + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&committee_type=' + (committee_type == null ? '' : encodeURIComponent(committee_type)) + '&' + party?.map(z => `party=${encodeURIComponent(z)}`).join('&') + '&' + form_type?.map(z => `form_type=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&' + report_year?.map(z => `report_year=${z}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + amendment_indicator?.map(z => `amendment_indicator=${encodeURIComponent(z)}`).join('&') + '&' + document_type?.map(z => `document_type=${encodeURIComponent(z)}`).join('&') + '&' + beginning_image_number?.map(z => `beginning_image_number=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Search legal documents by document type, or across all document types using keywords, parameter values and ranges.
		 * Get legal/search/
		 * @param {Array<string>} case_statutory_citation 
		 * Statutory citations
		 * @param {Date} af_min_rtb_date 
		 * The earliest Reason to Believe date
		 * @param {string} af_report_year 
		 * Admin fine report year
		 * @param {string} q 
		 * Text to search legal documents for
		 * @param {number} from_hit 
		 * Get results starting from this index
		 * @param {Array<number>} ao_requestor_type 
		 * Code of the advisory opinion requestor type.
		 * @param {Date} case_max_close_date 
		 * The latest date closed of case
		 * @param {boolean} ao_is_pending 
		 * AO is pending
		 * @param {number} af_fd_fine_amount 
		 * Final Determination fine amount
		 * @param {Date} case_min_open_date 
		 * The earliest date opened of case
		 * @param {Date} ao_min_issue_date 
		 * Earliest issue date of advisory opinion
		 * @param {string} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {boolean} ao_citation_require_all 
		 * Require all citations to be in document (default behavior is any)
		 * @param {Array<string>} case_doc_category_id 
		 * Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:
		 *         - 1 - Conciliation and Settlement Agreements
		 *         - 2 - Complaint, Responses, Designation of Counsel and Extensions of Time
		 *         - 3 - General Counsel Reports, Briefs, Notifications and Responses
		 *         - 4 - Certifications
		 *         - 5 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance
		 *         - 6 - Statement of Reasons 
		 *         - 1001 - ADR Settlement Agreements
		 *         - 1002 - Complaint, Responses, Designation of Counsel and Extensions of Time
		 *         - 1003 - ADR Memoranda, Notifications and Responses
		 *         - 1004 - Certifications
		 *         - 1005 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance
		 *         - 1006 - Statement of Reasons 
		 *         - 2001 - Administrative Fine Case
		 * @param {string} ao_status 
		 * Status of AO (pending, withdrawn, or final)
		 * @param {Date} af_max_rtb_date 
		 * The latest Reason to Believe date
		 * @param {number} af_rtb_fine_amount 
		 * Reason to Believe fine amount
		 * @param {string} case_respondents 
		 * Cases respondents
		 * @param {Array<string>} ao_entity_name 
		 * Name of commenter or representative
		 * @param {string} ao_requestor 
		 * The requestor of the advisory opinion
		 * @param {Array<string>} ao_category 
		 * Category of the document
		 * @param {Array<string>} ao_regulatory_citation 
		 * Regulatory citations
		 * @param {Array<string>} case_regulatory_citation 
		 * Regulatory citations
		 * @param {boolean} case_citation_require_all 
		 * Require all citations to be in document (default behavior is any)
		 * @param {Array<string>} case_dispositions 
		 * Cases dispositions
		 * @param {Array<string>} ao_name 
		 * Force advisory opinion name
		 * @param {Date} af_max_fd_date 
		 * The latest Final Determination date
		 * @param {Date} ao_max_request_date 
		 * Latest request date of advisory opinion
		 * @param {LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameMur_type} mur_type 
		 * Type of MUR : current or archived
		 * @param {number} hits_returned 
		 * Number of results to return (max 10)
		 * @param {number} case_election_cycles 
		 * Cases election cycles
		 * @param {Date} case_min_close_date 
		 * The earliest date closed of case
		 * @param {Date} ao_max_issue_date 
		 * Latest issue date of advisory opinion
		 * @param {string} af_committee_id 
		 * Admin fine committee ID
		 * @param {Date} af_min_fd_date 
		 * The earliest Final Determination date
		 * @param {Date} case_max_open_date 
		 * The latest date opened of case
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} ao_min_request_date 
		 * Earliest request date of advisory opinion
		 * @param {Array<string>} ao_no 
		 * Force advisory opinion number
		 * @param {LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameType} type 
		 * Choose a legal document type
		 * @param {Array<string>} case_no 
		 * Enforcement matter case number
		 * @param {Array<string>} ao_statutory_citation 
		 * Statutory citations
		 * @param {Array<string>} af_name 
		 * Admin fine committee name
		 * @return {void} 
		 */
		LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_name(case_statutory_citation: Array<string> | null | undefined, af_min_rtb_date: Date | null | undefined, af_report_year: string | null | undefined, q: string | null | undefined, from_hit: number | null | undefined, ao_requestor_type: Array<number> | null | undefined, case_max_close_date: Date | null | undefined, ao_is_pending: boolean | null | undefined, af_fd_fine_amount: number | null | undefined, case_min_open_date: Date | null | undefined, ao_min_issue_date: Date | null | undefined, sort: string | null | undefined, ao_citation_require_all: boolean | null | undefined, case_doc_category_id: Array<string> | null | undefined, ao_status: string | null | undefined, af_max_rtb_date: Date | null | undefined, af_rtb_fine_amount: number | null | undefined, case_respondents: string | null | undefined, ao_entity_name: Array<string> | null | undefined, ao_requestor: string | null | undefined, ao_category: Array<string> | null | undefined, ao_regulatory_citation: Array<string> | null | undefined, case_regulatory_citation: Array<string> | null | undefined, case_citation_require_all: boolean | null | undefined, case_dispositions: Array<string> | null | undefined, ao_name: Array<string> | null | undefined, af_max_fd_date: Date | null | undefined, ao_max_request_date: Date | null | undefined, mur_type: LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameMur_type | null | undefined, hits_returned: number | null | undefined, case_election_cycles: number | null | undefined, case_min_close_date: Date | null | undefined, ao_max_issue_date: Date | null | undefined, af_committee_id: string | null | undefined, af_min_fd_date: Date | null | undefined, case_max_open_date: Date | null | undefined, api_key: string, ao_min_request_date: Date | null | undefined, ao_no: Array<string> | null | undefined, type: LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameType | null | undefined, case_no: Array<string> | null | undefined, ao_statutory_citation: Array<string> | null | undefined, af_name: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'legal/search/?' + case_statutory_citation?.map(z => `case_statutory_citation=${encodeURIComponent(z)}`).join('&') + '&af_min_rtb_date=' + af_min_rtb_date?.toISOString() + '&af_report_year=' + (af_report_year == null ? '' : encodeURIComponent(af_report_year)) + '&q=' + (q == null ? '' : encodeURIComponent(q)) + '&from_hit=' + from_hit + '&' + ao_requestor_type?.map(z => `ao_requestor_type=${z}`).join('&') + '&case_max_close_date=' + case_max_close_date?.toISOString() + '&ao_is_pending=' + ao_is_pending + '&af_fd_fine_amount=' + af_fd_fine_amount + '&case_min_open_date=' + case_min_open_date?.toISOString() + '&ao_min_issue_date=' + ao_min_issue_date?.toISOString() + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&ao_citation_require_all=' + ao_citation_require_all + '&' + case_doc_category_id?.map(z => `case_doc_category_id=${encodeURIComponent(z)}`).join('&') + '&ao_status=' + (ao_status == null ? '' : encodeURIComponent(ao_status)) + '&af_max_rtb_date=' + af_max_rtb_date?.toISOString() + '&af_rtb_fine_amount=' + af_rtb_fine_amount + '&case_respondents=' + (case_respondents == null ? '' : encodeURIComponent(case_respondents)) + '&' + ao_entity_name?.map(z => `ao_entity_name=${encodeURIComponent(z)}`).join('&') + '&ao_requestor=' + (ao_requestor == null ? '' : encodeURIComponent(ao_requestor)) + '&' + ao_category?.map(z => `ao_category=${encodeURIComponent(z)}`).join('&') + '&' + ao_regulatory_citation?.map(z => `ao_regulatory_citation=${encodeURIComponent(z)}`).join('&') + '&' + case_regulatory_citation?.map(z => `case_regulatory_citation=${encodeURIComponent(z)}`).join('&') + '&case_citation_require_all=' + case_citation_require_all + '&' + case_dispositions?.map(z => `case_dispositions=${encodeURIComponent(z)}`).join('&') + '&' + ao_name?.map(z => `ao_name=${encodeURIComponent(z)}`).join('&') + '&af_max_fd_date=' + af_max_fd_date?.toISOString() + '&ao_max_request_date=' + ao_max_request_date?.toISOString() + '&mur_type=' + mur_type + '&hits_returned=' + hits_returned + '&case_election_cycles=' + case_election_cycles + '&case_min_close_date=' + case_min_close_date?.toISOString() + '&ao_max_issue_date=' + ao_max_issue_date?.toISOString() + '&af_committee_id=' + (af_committee_id == null ? '' : encodeURIComponent(af_committee_id)) + '&af_min_fd_date=' + af_min_fd_date?.toISOString() + '&case_max_open_date=' + case_max_open_date?.toISOString() + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&ao_min_request_date=' + ao_min_request_date?.toISOString() + '&' + ao_no?.map(z => `ao_no=${encodeURIComponent(z)}`).join('&') + '&type=' + type + '&' + case_no?.map(z => `case_no=${encodeURIComponent(z)}`).join('&') + '&' + ao_statutory_citation?.map(z => `ao_statutory_citation=${encodeURIComponent(z)}`).join('&') + '&' + af_name?.map(z => `af_name=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Search for candidates or committees by name. If you're looking for information on a
		 * particular person or group, using a name to find the `candidate_id` or `committee_id` on
		 * this endpoint can be a helpful first step.
		 * Get names/audit_candidates/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} q Name (candidate or committee) to search for
		 * @return {void} 
		 */
		NamesAudit_candidatesGetByApi_keyAndQ(api_key: string, q: Array<string>, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'names/audit_candidates/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + q.map(z => `q=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Search for candidates or committees by name. If you're looking for information on a
		 * particular person or group, using a name to find the `candidate_id` or `committee_id` on
		 * this endpoint can be a helpful first step.
		 * Get names/audit_committees/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} q Name (candidate or committee) to search for
		 * @return {void} 
		 */
		NamesAudit_committeesGetByApi_keyAndQ(api_key: string, q: Array<string>, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'names/audit_committees/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + q.map(z => `q=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Search for candidates or committees by name. If you're looking for information on a
		 * particular person or group, using a name to find the `candidate_id` or `committee_id` on
		 * this endpoint can be a helpful first step.
		 * Get names/candidates/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} q Name (candidate or committee) to search for
		 * @return {void} 
		 */
		NamesCandidatesGetByApi_keyAndQ(api_key: string, q: Array<string>, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'names/candidates/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + q.map(z => `q=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Search for candidates or committees by name. If you're looking for information on a
		 * particular person or group, using a name to find the `candidate_id` or `committee_id` on
		 * this endpoint can be a helpful first step.
		 * Get names/committees/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} q Name (candidate or committee) to search for
		 * @return {void} 
		 */
		NamesCommitteesGetByApi_keyAndQ(api_key: string, q: Array<string>, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'names/committees/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + q.map(z => `q=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * The Operations log contains details of each report loaded into the database. It is primarily
		 * used as status check to determine when all of the data processes, from initial entry through
		 * review are complete.
		 * Get operations-log/
		 * @param {Date} min_receipt_date 
		 * Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} candidate_committee_id 
		 * A unique identifier of the registered filer.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Date} max_receipt_date 
		 * Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Date} max_transaction_data_complete_date 
		 * Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} report_type Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 *     - 90S Post Inaugural Supplement
		 *     - 90D Post Inaugural
		 *     - 48  48 Hour Notification
		 *     - 24  24 Hour Notification
		 *     - M7S July Monthly/Semi-Annual
		 *     - MSA Monthly Semi-Annual (MY)
		 *     - MYS Monthly Year End/Semi-Annual
		 *     - Q2S July Quarterly/Semi-Annual
		 *     - QSA Quarterly Semi-Annual (MY)
		 *     - QYS Quarterly Year End/Semi-Annual
		 *     - QYE Quarterly Semi-Annual (YE)
		 *     - QMS Quarterly Mid-Year/ Semi-Annual
		 *     - MSY Monthly Semi-Annual (YE)
		 * @param {Date} min_transaction_data_complete_date 
		 * Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} form_type The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 *     - F1   Statement of Organization
		 *     - F1M  Notification of Multicandidate Status
		 *     - F2   Statement of Candidacy
		 *     - F3   Report of Receipts and Disbursements for an Authorized Committee
		 *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 *     - F5   Report of Independent Expenditures Made and Contributions Received
		 *     - F6   48 Hour Notice of Contributions/Loans Received
		 *     - F7   Report of Communication Costs by Corporations and Membership Organizations
		 *     - F8   Debt Settlement Plan
		 *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 *     - F13  Report of Donations Accepted for Inaugural Committee
		 *     - F99  Miscellaneous Text
		 *     - FRQ  Request for Additional Information
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {Date} max_coverage_end_date 
		 * Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<number>} report_year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {Array<string>} status_num 
		 * Status of the transactional report.
		 *     -0- Transaction is entered 
		 *           into the system.
		 *           But not verified.
		 *     -1- Transaction is verified.
		 * @param {Array<string>} amendment_indicator Amendent types:
		 *     -N   new
		 *     -A   amendment
		 *     -T   terminated
		 *     -C   consolidated
		 *     -M   multi-candidate
		 *     -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 * @param {Array<string>} beginning_image_number 
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 * @param {Date} min_coverage_end_date 
		 * Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @return {void} 
		 */
		Operations_logGetByMin_receipt_dateAndCandidate_committee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndMax_transaction_data_complete_dateAndPer_pageAndSortAndApi_keyAndReport_typeAndMin_transaction_data_complete_dateAndForm_typeAndSort_nulls_lastAndMax_coverage_end_dateAndPageAndReport_yearAndStatus_numAndAmendment_indicatorAndBeginning_image_numberAndMin_coverage_end_date(min_receipt_date: Date | null | undefined, candidate_committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, max_transaction_data_complete_date: Date | null | undefined, per_page: number | null | undefined, sort: Array<string> | null | undefined, api_key: string, report_type: Array<string> | null | undefined, min_transaction_data_complete_date: Date | null | undefined, form_type: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, max_coverage_end_date: Date | null | undefined, page: number | null | undefined, report_year: Array<number> | null | undefined, status_num: Array<string> | null | undefined, amendment_indicator: Array<string> | null | undefined, beginning_image_number: Array<string> | null | undefined, min_coverage_end_date: Date | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'operations-log/?min_receipt_date=' + min_receipt_date?.toISOString() + '&' + candidate_committee_id?.map(z => `candidate_committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&max_transaction_data_complete_date=' + max_transaction_data_complete_date?.toISOString() + '&per_page=' + per_page + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&min_transaction_data_complete_date=' + min_transaction_data_complete_date?.toISOString() + '&' + form_type?.map(z => `form_type=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&max_coverage_end_date=' + max_coverage_end_date?.toISOString() + '&page=' + page + '&' + report_year?.map(z => `report_year=${z}`).join('&') + '&' + status_num?.map(z => `status_num=${encodeURIComponent(z)}`).join('&') + '&' + amendment_indicator?.map(z => `amendment_indicator=${encodeURIComponent(z)}`).join('&') + '&' + beginning_image_number?.map(z => `beginning_image_number=${encodeURIComponent(z)}`).join('&') + '&min_coverage_end_date=' + min_coverage_end_date?.toISOString(), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Net receipts per candidate.
		 * Filter with `contributor_state='US'` for national totals
		 * Get presidential/contributions/by_candidate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {Array<string>} contributor_state State of contributor
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		PresidentialContributionsBy_candidateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndContributor_stateAndSort(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, contributor_state: Array<string> | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'presidential/contributions/by_candidate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&' + contributor_state?.map(z => `contributor_state=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Contribution receipts by size per candidate.
		 * Filter by candidate_id, election_year and/or size
		 * Get presidential/contributions/by_size/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<number>} size 
		 * The total all contributions in the following ranges:
		 * ```
		 *   -0    $200 and under
		 *   -200  $200.01 - $499.99
		 *   -500  $500 - $999.99
		 *   -1000 $1000 - $1999.99
		 *   -2000 $2000 +
		 * ```
		 * Unitemized contributions are included in the `0` category.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 *   -P00000001    All candidates
		 *   -P00000002    Democrasts
		 *   -P00000003    Republicans
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		PresidentialContributionsBy_sizeGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSizeAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, size: Array<number> | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'presidential/contributions/by_size/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&' + size?.map(z => `size=${z}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Contribution receipts by state per candidate.
		 * Filter by candidate_id and/or election_year
		 * Get presidential/contributions/by_state/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 *   -P00000001    All candidates
		 *   -P00000002    Democrasts
		 *   -P00000003    Republicans
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		PresidentialContributionsBy_stateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'presidential/contributions/by_state/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Coverage end date per candidate.
		 * Filter by candidate_id and/or election_year
		 * Get presidential/coverage_end_date/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 *   -P00000001    All candidates
		 *   -P00000002    Democrasts
		 *   -P00000003    Republicans
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		PresidentialCoverage_end_dateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'presidential/coverage_end_date/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Financial summary per candidate.
		 * Filter by candidate_id and/or election_year
		 * Get presidential/financial_summary/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 *   -P00000001    All candidates
		 *   -P00000002    Democrasts
		 *   -P00000003    Republicans
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<number>} election_year Year of election
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		PresidentialFinancial_summaryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort(api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, election_year: Array<number> | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'presidential/financial_summary/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + election_year?.map(z => `election_year=${z}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Use this endpoint to look up the RAD Analyst for a committee.
		 * The mission of the Reports Analysis Division (RAD) is to ensure that
		 * campaigns and political committees file timely and accurate reports that fully disclose
		 * their financial activities.  RAD is responsible for reviewing statements and financial
		 * reports filed by political committees participating in federal elections, providing
		 * assistance and guidance to the committees to properly file their reports, and for taking
		 * appropriate action to ensure compliance with the Federal Election Campaign Act (FECA).
		 * Get rad-analyst/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_assignment_update_date Filter results for assignment updates made after this date
		 * @param {Array<number>} telephone_ext Telephone extension of RAD analyst
		 * @param {Array<number>} analyst_id ID of RAD analyst
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} name Name of RAD analyst
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} email Email of RAD analyst
		 * @param {Array<string>} title Title of RAD analyst
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} max_assignment_update_date Filter results for assignment updates made before this date
		 * @param {Array<number>} analyst_short_id Short ID of RAD analyst
		 * @return {void} 
		 */
		Rad_analystGetByApi_keyAndMin_assignment_update_dateAndTelephone_extAndAnalyst_idAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndNameAndPer_pageAndEmailAndTitleAndSortAndMax_assignment_update_dateAndAnalyst_short_id(api_key: string, min_assignment_update_date: Date | null | undefined, telephone_ext: Array<number> | null | undefined, analyst_id: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, name: Array<string> | null | undefined, per_page: number | null | undefined, email: Array<string> | null | undefined, title: Array<string> | null | undefined, sort: string | null | undefined, max_assignment_update_date: Date | null | undefined, analyst_short_id: Array<number> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'rad-analyst/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_assignment_update_date=' + min_assignment_update_date?.toISOString() + '&' + telephone_ext?.map(z => `telephone_ext=${z}`).join('&') + '&' + analyst_id?.map(z => `analyst_id=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&' + name?.map(z => `name=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + email?.map(z => `email=${encodeURIComponent(z)}`).join('&') + '&' + title?.map(z => `title=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&max_assignment_update_date=' + max_assignment_update_date?.toISOString() + '&' + analyst_short_id?.map(z => `analyst_short_id=${z}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * FEC election dates since 1995.
		 * Get reporting-dates/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Date} min_update_date 
		 * The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<string>} report_type Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 *     - 90S Post Inaugural Supplement
		 *     - 90D Post Inaugural
		 *     - 48  48 Hour Notification
		 *     - 24  24 Hour Notification
		 *     - M7S July Monthly/Semi-Annual
		 *     - MSA Monthly Semi-Annual (MY)
		 *     - MYS Monthly Year End/Semi-Annual
		 *     - Q2S July Quarterly/Semi-Annual
		 *     - QSA Quarterly Semi-Annual (MY)
		 *     - QYS Quarterly Year End/Semi-Annual
		 *     - QYE Quarterly Semi-Annual (YE)
		 *     - QMS Quarterly Mid-Year/ Semi-Annual
		 *     - MSY Monthly Semi-Annual (YE)
		 * @param {Date} min_due_date 
		 * The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Date} max_due_date 
		 * The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Array<number>} report_year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {Date} max_create_date 
		 * The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {Date} max_update_date 
		 * The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} min_create_date 
		 * The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		 * @return {void} 
		 */
		Reporting_datesGetByApi_keyAndMin_update_dateAndReport_typeAndMin_due_dateAndSort_null_onlyAndPageAndMax_due_dateAndReport_yearAndSort_nulls_lastAndMax_create_dateAndMax_update_dateAndPer_pageAndSort_hide_nullAndSortAndMin_create_date(api_key: string, min_update_date: Date | null | undefined, report_type: Array<string> | null | undefined, min_due_date: Date | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, max_due_date: Date | null | undefined, report_year: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, max_create_date: Date | null | undefined, max_update_date: Date | null | undefined, per_page: number | null | undefined, sort_hide_null: boolean | null | undefined, sort: string | null | undefined, min_create_date: Date | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'reporting-dates/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_update_date=' + min_update_date?.toISOString() + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&min_due_date=' + min_due_date?.toISOString() + '&sort_null_only=' + sort_null_only + '&page=' + page + '&max_due_date=' + max_due_date?.toISOString() + '&' + report_year?.map(z => `report_year=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&max_create_date=' + max_create_date?.toISOString() + '&max_update_date=' + max_update_date?.toISOString() + '&per_page=' + per_page + '&sort_hide_null=' + sort_hide_null + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&min_create_date=' + min_create_date?.toISOString(), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Each report represents the summary information from Form 3, Form 3X and Form 3P.
		 * These reports have key statistics that illuminate the financial status of a given committee.
		 * Things like cash on hand, debts owed by committee, total receipts, and total disbursements
		 * are especially helpful for understanding a committee's financial dealings.
		 * By default, this endpoint includes both amended and final versions of each report. To restrict
		 * to only the final versions of each report, use `is_amended=false`; to retrieve only reports that
		 * have been amended, use `is_amended=true`.
		 * Several different reporting structures exist, depending on the type of organization that
		 * submits financial information. To see an example of these reporting requirements,
		 * look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.
		 * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		 * label these fields while conveying clear meaning to ensure accessibility for all users.
		 * Get reports/{entity_type}/
		 * @param {string} max_party_coordinated_expenditures 
		 * Filter for all amounts less than a value.
		 * @param {string} max_debts_owed_expenditures 
		 * Filter for all amounts less than a value.
		 * @param {string} min_receipts_amount 
		 * Filter for all amounts greater than a value.
		 * @param {string} min_debts_owed_amount 
		 * Filter for all amounts greater than a value.
		 * @param {Date} max_receipt_date 
		 * Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @param {Array<string>} q_spender 
		 * Keyword search for spender name or ID
		 * @param {string} max_receipts_amount 
		 * Filter for all amounts less than a value.
		 * @param {Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type} filer_type The method used to file with the FEC, either electronic or on paper.
		 * @param {Array<string>} report_type Report type; prefix with "-" to exclude. Name of report where the underlying data comes from:
		 *     - 10D Pre-Election
		 *     - 10G Pre-General
		 *     - 10P Pre-Primary
		 *     - 10R Pre-Run-Off
		 *     - 10S Pre-Special
		 *     - 12C Pre-Convention
		 *     - 12G Pre-General
		 *     - 12P Pre-Primary
		 *     - 12R Pre-Run-Off
		 *     - 12S Pre-Special
		 *     - 30D Post-Election
		 *     - 30G Post-General
		 *     - 30P Post-Primary
		 *     - 30R Post-Run-Off
		 *     - 30S Post-Special
		 *     - 60D Post-Convention
		 *     - M1  January Monthly
		 *     - M10 October Monthly
		 *     - M11 November Monthly
		 *     - M12 December Monthly
		 *     - M2  February Monthly
		 *     - M3  March Monthly
		 *     - M4  April Monthly
		 *     - M5  May Monthly
		 *     - M6  June Monthly
		 *     - M7  July Monthly
		 *     - M8  August Monthly
		 *     - M9  September Monthly
		 *     - MY  Mid-Year Report
		 *     - Q1  April Quarterly
		 *     - Q2  July Quarterly
		 *     - Q3  October Quarterly
		 *     - TER Termination Report
		 *     - YE  Year-End
		 *     - ADJ COMP ADJUST AMEND
		 *     - CA  COMPREHENSIVE AMEND
		 * @param {string} max_total_contributions 
		 * Filter for all amounts less than a value.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {string} max_independent_expenditures 
		 * Filter for all amounts less than a value.
		 * @param {string} min_total_contributions 
		 * Filter for all amounts greater than a value.
		 * @param {string} min_party_coordinated_expenditures 
		 * Filter for all amounts greater than a value.
		 * @param {Array<string>} beginning_image_number 
		 * Unique identifier for the electronic or paper report. This number is used to construct
		 * PDF URLs to the original document.
		 * @param {Date} min_receipt_date 
		 * Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD)
		 * @param {boolean} is_amended 
		 * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		 * @param {string} max_disbursements_amount 
		 * Filter for all amounts less than a value.
		 * @param {string} max_cash_on_hand_end_period_amount 
		 * Filter for all amounts less than a value.
		 * @param {Array<string>} amendment_indicator Amendent types:
		 *     -N   new
		 *     -A   amendment
		 *     -T   terminated
		 *     -C   consolidated
		 *     -M   multi-candidate
		 *     -S   secondary
		 * NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} min_independent_expenditures 
		 * Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} q_filer 
		 * Keyword search for filer name or ID
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<number>} year 
		 * Forms with coverage date - 
		 *     year from the coverage ending date.
		 * Forms without coverage date - 
		 *     year from the receipt date.
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {string} min_cash_on_hand_end_period_amount 
		 * Filter for all amounts greater than a value.
		 * @param {string} min_disbursements_amount 
		 * Filter for all amounts greater than a value.
		 * @param {boolean} most_recent 
		 * Report is either new or is the most-recently filed amendment
		 * @param {Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentEntity_type} entity_type Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac-party`, `house-senate`, or `ie-only`
		 * @return {void} 
		 */
		Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recent(max_party_coordinated_expenditures: string | null | undefined, max_debts_owed_expenditures: string | null | undefined, min_receipts_amount: string | null | undefined, min_debts_owed_amount: string | null | undefined, max_receipt_date: Date | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: string | null | undefined, sort: Array<string> | null | undefined, q_spender: Array<string> | null | undefined, max_receipts_amount: string | null | undefined, filer_type: Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type | null | undefined, report_type: Array<string> | null | undefined, max_total_contributions: string | null | undefined, sort_nulls_last: boolean | null | undefined, max_independent_expenditures: string | null | undefined, min_total_contributions: string | null | undefined, min_party_coordinated_expenditures: string | null | undefined, beginning_image_number: Array<string> | null | undefined, min_receipt_date: Date | null | undefined, is_amended: boolean | null | undefined, max_disbursements_amount: string | null | undefined, max_cash_on_hand_end_period_amount: string | null | undefined, amendment_indicator: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, min_independent_expenditures: string | null | undefined, per_page: number | null | undefined, q_filer: Array<string> | null | undefined, api_key: string, committee_type: Array<string> | null | undefined, page: number | null | undefined, year: Array<number> | null | undefined, committee_id: Array<string> | null | undefined, min_cash_on_hand_end_period_amount: string | null | undefined, min_disbursements_amount: string | null | undefined, most_recent: boolean | null | undefined, entity_type: Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentEntity_type, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'reports/' + entity_type + '/?max_party_coordinated_expenditures=' + (max_party_coordinated_expenditures == null ? '' : encodeURIComponent(max_party_coordinated_expenditures)) + '&max_debts_owed_expenditures=' + (max_debts_owed_expenditures == null ? '' : encodeURIComponent(max_debts_owed_expenditures)) + '&min_receipts_amount=' + (min_receipts_amount == null ? '' : encodeURIComponent(min_receipts_amount)) + '&min_debts_owed_amount=' + (min_debts_owed_amount == null ? '' : encodeURIComponent(min_debts_owed_amount)) + '&max_receipt_date=' + max_receipt_date?.toISOString() + '&sort_hide_null=' + sort_hide_null + '&candidate_id=' + (candidate_id == null ? '' : encodeURIComponent(candidate_id)) + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&') + '&' + q_spender?.map(z => `q_spender=${encodeURIComponent(z)}`).join('&') + '&max_receipts_amount=' + (max_receipts_amount == null ? '' : encodeURIComponent(max_receipts_amount)) + '&filer_type=' + filer_type + '&' + report_type?.map(z => `report_type=${encodeURIComponent(z)}`).join('&') + '&max_total_contributions=' + (max_total_contributions == null ? '' : encodeURIComponent(max_total_contributions)) + '&sort_nulls_last=' + sort_nulls_last + '&max_independent_expenditures=' + (max_independent_expenditures == null ? '' : encodeURIComponent(max_independent_expenditures)) + '&min_total_contributions=' + (min_total_contributions == null ? '' : encodeURIComponent(min_total_contributions)) + '&min_party_coordinated_expenditures=' + (min_party_coordinated_expenditures == null ? '' : encodeURIComponent(min_party_coordinated_expenditures)) + '&' + beginning_image_number?.map(z => `beginning_image_number=${encodeURIComponent(z)}`).join('&') + '&min_receipt_date=' + min_receipt_date?.toISOString() + '&is_amended=' + is_amended + '&max_disbursements_amount=' + (max_disbursements_amount == null ? '' : encodeURIComponent(max_disbursements_amount)) + '&max_cash_on_hand_end_period_amount=' + (max_cash_on_hand_end_period_amount == null ? '' : encodeURIComponent(max_cash_on_hand_end_period_amount)) + '&' + amendment_indicator?.map(z => `amendment_indicator=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&min_independent_expenditures=' + (min_independent_expenditures == null ? '' : encodeURIComponent(min_independent_expenditures)) + '&per_page=' + per_page + '&' + q_filer?.map(z => `q_filer=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&page=' + page + '&' + year?.map(z => `year=${z}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&min_cash_on_hand_end_period_amount=' + (min_cash_on_hand_end_period_amount == null ? '' : encodeURIComponent(min_cash_on_hand_end_period_amount)) + '&min_disbursements_amount=' + (min_disbursements_amount == null ? '' : encodeURIComponent(min_disbursements_amount)) + '&most_recent=' + most_recent, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This description is for both ​`/schedules​/schedule_a​/` and ​ `/schedules​/schedule_a​/{sub_id}​/`.
		 * This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the `/schedules/schedule_a/` endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our "is_individual" methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).
		 * ​The `/schedules​/schedule_a​/` endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the `last_indexes` object from pagination to the URL of your last request as additional parameters.
		 * For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the two scenarios of following pagination information:
		 * case #1:
		 * ```
		 * pagination: {
		 * pages: 2152643,
		 * per_page: 20,
		 * count: 43052850,
		 * last_indexes: {
		 * last_index: "230880619",
		 * last_contribution_receipt_date: "2014-01-01"
		 * }
		 * }
		 * ```
		 * <br/>
		 * case #2 (results which include contribution_receipt_date = NULL):
		 * ```
		 * pagination: {
		 * pages: 2152644,
		 * per_page: 20,
		 * count: 43052850,
		 * last_indexes: {
		 * last_index: "230880639",
		 * sort_null_only: True
		 * }
		 * }
		 * ```
		 * To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL and when reaching `contribution_receipt_date=NULL`, append `last_index=230880639` and `sort_null_only=True`. We strongly advise paging through these results using sort indices. The default sort is acending by `contribution_receipt_date` (`deprecated`, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.
		 * Calls to ​`/schedules​/schedule_a​/` may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.
		 * To avoid throwing the "out of range" exception on the last page, one recommandation is to use total count and `per_page` to control the traverse loop of results.
		 * ​The `/schedules​/schedule_a​/{sub_id}​/` endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.
		 * Get schedules/schedule_a/
		 * @param {boolean} is_individual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
		 * @param {Date} min_date Minimum date
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {Array<string>} contributor_type Filters individual or committee contributions based on line number
		 * @param {Array<string>} contributor_id The FEC identifier should be represented here if the contributor is registered with the FEC.
		 * @param {Array<string>} recipient_committee_org_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {Array<string>} contributor_employer Employer of contributor, filers need to make an effort to gather this information
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} last_index Index of last result from previous page
		 * @param {Array<string>} contributor_name Name of contributor
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} recipient_committee_designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {Date} max_load_date Maximum load date
		 * @param {Array<string>} recipient_committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} last_contribution_receipt_date When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
		 * @param {number} last_contribution_receipt_amount When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {Array<string>} contributor_state State of contributor
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} two_year_transaction_period 
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 * @param {Array<string>} contributor_zip Zip code of contributor
		 * @param {Date} min_load_date Minimum load date
		 * @param {Array<string>} contributor_occupation Occupation of contributor, filers need to make an effort to gather this information
		 * @param {Array<string>} contributor_city City of contributor
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @return {void} 
		 */
		SchedulesSchedule_aGetByIs_individualAndMin_dateAndMax_image_numberAndMin_image_numberAndContributor_typeAndContributor_idAndRecipient_committee_org_typeAndContributor_employerAndSort_null_onlyAndLast_indexAndContributor_nameAndMin_amountAndSort_hide_nullAndRecipient_committee_designationAndMax_load_dateAndRecipient_committee_typeAndSortAndLast_contribution_receipt_dateAndLast_contribution_receipt_amountAndLine_numberAndContributor_stateAndPer_pageAndApi_keyAndTwo_year_transaction_periodAndContributor_zipAndMin_load_dateAndContributor_occupationAndContributor_cityAndCommittee_idAndImage_numberAndMax_dateAndMax_amount(is_individual: boolean | null | undefined, min_date: Date | null | undefined, max_image_number: string | null | undefined, min_image_number: string | null | undefined, contributor_type: Array<string> | null | undefined, contributor_id: Array<string> | null | undefined, recipient_committee_org_type: Array<string> | null | undefined, contributor_employer: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, last_index: number | null | undefined, contributor_name: Array<string> | null | undefined, min_amount: string | null | undefined, sort_hide_null: boolean | null | undefined, recipient_committee_designation: Array<string> | null | undefined, max_load_date: Date | null | undefined, recipient_committee_type: Array<string> | null | undefined, sort: string | null | undefined, last_contribution_receipt_date: Date | null | undefined, last_contribution_receipt_amount: number | null | undefined, line_number: string | null | undefined, contributor_state: Array<string> | null | undefined, per_page: number | null | undefined, api_key: string, two_year_transaction_period: Array<number> | null | undefined, contributor_zip: Array<string> | null | undefined, min_load_date: Date | null | undefined, contributor_occupation: Array<string> | null | undefined, contributor_city: Array<string> | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_amount: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/?is_individual=' + is_individual + '&min_date=' + min_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&' + contributor_type?.map(z => `contributor_type=${encodeURIComponent(z)}`).join('&') + '&' + contributor_id?.map(z => `contributor_id=${encodeURIComponent(z)}`).join('&') + '&' + recipient_committee_org_type?.map(z => `recipient_committee_org_type=${encodeURIComponent(z)}`).join('&') + '&' + contributor_employer?.map(z => `contributor_employer=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&last_index=' + last_index + '&' + contributor_name?.map(z => `contributor_name=${encodeURIComponent(z)}`).join('&') + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&sort_hide_null=' + sort_hide_null + '&' + recipient_committee_designation?.map(z => `recipient_committee_designation=${encodeURIComponent(z)}`).join('&') + '&max_load_date=' + max_load_date?.toISOString() + '&' + recipient_committee_type?.map(z => `recipient_committee_type=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&last_contribution_receipt_date=' + last_contribution_receipt_date?.toISOString() + '&last_contribution_receipt_amount=' + last_contribution_receipt_amount + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&' + contributor_state?.map(z => `contributor_state=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + two_year_transaction_period?.map(z => `two_year_transaction_period=${z}`).join('&') + '&' + contributor_zip?.map(z => `contributor_zip=${encodeURIComponent(z)}`).join('&') + '&min_load_date=' + min_load_date?.toISOString() + '&' + contributor_occupation?.map(z => `contributor_occupation=${encodeURIComponent(z)}`).join('&') + '&' + contributor_city?.map(z => `contributor_city=${encodeURIComponent(z)}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_employer/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} employer Employer of contributor as reported on the committee's filing
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_employerGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSort_hide_nullAndEmployerAndPer_pageAndSort(api_key: string, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, employer: Array<string> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_employer/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + employer?.map(z => `employer=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_occupation/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<string>} occupation Occupation of contributor as reported on the committee's filing
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_occupationGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndOccupationAndSort_hide_nullAndPer_pageAndSort(api_key: string, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, occupation: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_occupation/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&' + occupation?.map(z => `occupation=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides individual contributions received by a committee, aggregated by size:
		 * ```
		 * - $200 and under
		 * - $200.01 - $499.99
		 * - $500 - $999.99
		 * - $1000 - $1999.99
		 * - $2000 +
		 * ```
		 * The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions.
		 * Get schedules/schedule_a/by_size/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<number>} size 
		 * The total all contributions in the following ranges:
		 * ```
		 *   -0    $200 and under
		 *   -200  $200.01 - $499.99
		 *   -500  $500 - $999.99
		 *   -1000 $1000 - $1999.99
		 *   -2000 $2000 +
		 * ```
		 * Unitemized contributions are included in the `0` category.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_sizeGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSizeAndSort_hide_nullAndPer_pageAndSort(api_key: string, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, size: Array<number> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_size/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&' + size?.map(z => `size=${z}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_size/by_candidate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_sizeBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number>, sort_null_only: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string>, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_size/by_candidate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_state/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} hide_null Exclude values with missing state
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state State of contributor
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_stateGetByApi_keyAndHide_nullAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort(api_key: string, hide_null: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_state/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&hide_null=' + hide_null + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_state/by_candidate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_stateBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number>, sort_null_only: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string>, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_state/by_candidate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_state/by_candidate/totals/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_stateBy_candidateTotalsGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number>, sort_null_only: boolean | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string>, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_state/by_candidate/totals/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_state/totals/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 *         - all All Committee Types
		 *         - all_candidates All Candidate Committee Types (H, S, P)
		 *         - all_pacs All PAC Committee Types (N, O, Q, V, W)
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state US state or territory
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_stateTotalsGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort(api_key: string, committee_type: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_state/totals/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		 * Get schedules/schedule_a/by_zip/
		 * @param {Array<string>} zip Zip code of contributor
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} state State of contributor
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_aBy_zipGetByZipAndApi_keyAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort(zip: Array<string> | null | undefined, api_key: string, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: Array<string> | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/by_zip/?' + zip?.map(z => `zip=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + state?.map(z => `state=${encodeURIComponent(z)}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
		 * Get schedules/schedule_a/efile/
		 * @param {Date} min_date Minimum date
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {Array<string>} contributor_employer Employer of contributor, filers need to make an effort to gather this information
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} contributor_name Name of contributor
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} contributor_state State of contributor
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} contributor_occupation Occupation of contributor, filers need to make an effort to gather this information
		 * @param {Array<string>} contributor_city City of contributor
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @return {void} 
		 */
		SchedulesSchedule_aEfileGetByMin_dateAndMax_image_numberAndContributor_employerAndMin_image_numberAndSort_null_onlyAndSort_hide_nullAndContributor_nameAndMin_amountAndPer_pageAndContributor_stateAndSortAndLine_numberAndApi_keyAndContributor_occupationAndContributor_cityAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount(min_date: Date | null | undefined, max_image_number: string | null | undefined, contributor_employer: Array<string> | null | undefined, min_image_number: string | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, contributor_name: Array<string> | null | undefined, min_amount: string | null | undefined, per_page: number | null | undefined, contributor_state: Array<string> | null | undefined, sort: string | null | undefined, line_number: string | null | undefined, api_key: string, contributor_occupation: Array<string> | null | undefined, contributor_city: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_amount: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/efile/?min_date=' + min_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&' + contributor_employer?.map(z => `contributor_employer=${encodeURIComponent(z)}`).join('&') + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + contributor_name?.map(z => `contributor_name=${encodeURIComponent(z)}`).join('&') + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&per_page=' + per_page + '&' + contributor_state?.map(z => `contributor_state=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + contributor_occupation?.map(z => `contributor_occupation=${encodeURIComponent(z)}`).join('&') + '&' + contributor_city?.map(z => `contributor_city=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This description is for both ​`/schedules​/schedule_a​/` and ​ `/schedules​/schedule_a​/{sub_id}​/`.
		 * This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the `/schedules/schedule_a/` endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our "is_individual" methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).
		 * ​The `/schedules​/schedule_a​/` endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the `last_indexes` object from pagination to the URL of your last request as additional parameters.
		 * For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the two scenarios of following pagination information:
		 * case #1:
		 * ```
		 * pagination: {
		 * pages: 2152643,
		 * per_page: 20,
		 * count: 43052850,
		 * last_indexes: {
		 * last_index: "230880619",
		 * last_contribution_receipt_date: "2014-01-01"
		 * }
		 * }
		 * ```
		 * <br/>
		 * case #2 (results which include contribution_receipt_date = NULL):
		 * ```
		 * pagination: {
		 * pages: 2152644,
		 * per_page: 20,
		 * count: 43052850,
		 * last_indexes: {
		 * last_index: "230880639",
		 * sort_null_only: True
		 * }
		 * }
		 * ```
		 * To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL and when reaching `contribution_receipt_date=NULL`, append `last_index=230880639` and `sort_null_only=True`. We strongly advise paging through these results using sort indices. The default sort is acending by `contribution_receipt_date` (`deprecated`, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.
		 * Calls to ​`/schedules​/schedule_a​/` may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.
		 * To avoid throwing the "out of range" exception on the last page, one recommandation is to use total count and `per_page` to control the traverse loop of results.
		 * ​The `/schedules​/schedule_a​/{sub_id}​/` endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.
		 * Get schedules/schedule_a/{sub_id}/
		 * @param {boolean} is_individual Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
		 * @param {Date} min_date Minimum date
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {Array<string>} contributor_type Filters individual or committee contributions based on line number
		 * @param {Array<string>} contributor_id The FEC identifier should be represented here if the contributor is registered with the FEC.
		 * @param {Array<string>} recipient_committee_org_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {Array<string>} contributor_employer Employer of contributor, filers need to make an effort to gather this information
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} last_index Index of last result from previous page
		 * @param {Array<string>} contributor_name Name of contributor
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} recipient_committee_designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {Date} max_load_date Maximum load date
		 * @param {Array<string>} recipient_committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} last_contribution_receipt_date When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
		 * @param {number} last_contribution_receipt_amount When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {Array<string>} contributor_state State of contributor
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} two_year_transaction_period 
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 * @param {Array<string>} contributor_zip Zip code of contributor
		 * @param {Date} min_load_date Minimum load date
		 * @param {Array<string>} contributor_occupation Occupation of contributor, filers need to make an effort to gather this information
		 * @param {Array<string>} contributor_city City of contributor
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @return {void} 
		 */
		SchedulesSchedule_a_sub_idGetByIs_individualAndMin_dateAndMax_image_numberAndMin_image_numberAndContributor_typeAndContributor_idAndRecipient_committee_org_typeAndContributor_employerAndSort_null_onlyAndLast_indexAndContributor_nameAndMin_amountAndSort_hide_nullAndRecipient_committee_designationAndMax_load_dateAndRecipient_committee_typeAndSortAndLast_contribution_receipt_dateAndLast_contribution_receipt_amountAndLine_numberAndContributor_stateAndPer_pageAndApi_keyAndTwo_year_transaction_periodAndContributor_zipAndMin_load_dateAndContributor_occupationAndContributor_cityAndCommittee_idAndImage_numberAndMax_dateAndMax_amount(is_individual: boolean | null | undefined, min_date: Date | null | undefined, max_image_number: string | null | undefined, min_image_number: string | null | undefined, contributor_type: Array<string> | null | undefined, contributor_id: Array<string> | null | undefined, recipient_committee_org_type: Array<string> | null | undefined, contributor_employer: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, last_index: number | null | undefined, contributor_name: Array<string> | null | undefined, min_amount: string | null | undefined, sort_hide_null: boolean | null | undefined, recipient_committee_designation: Array<string> | null | undefined, max_load_date: Date | null | undefined, recipient_committee_type: Array<string> | null | undefined, sort: string | null | undefined, last_contribution_receipt_date: Date | null | undefined, last_contribution_receipt_amount: number | null | undefined, line_number: string | null | undefined, contributor_state: Array<string> | null | undefined, per_page: number | null | undefined, api_key: string, two_year_transaction_period: Array<number> | null | undefined, contributor_zip: Array<string> | null | undefined, min_load_date: Date | null | undefined, contributor_occupation: Array<string> | null | undefined, contributor_city: Array<string> | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_amount: string | null | undefined, sub_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_a/' + (sub_id == null ? '' : encodeURIComponent(sub_id)) + '/?is_individual=' + is_individual + '&min_date=' + min_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&' + contributor_type?.map(z => `contributor_type=${encodeURIComponent(z)}`).join('&') + '&' + contributor_id?.map(z => `contributor_id=${encodeURIComponent(z)}`).join('&') + '&' + recipient_committee_org_type?.map(z => `recipient_committee_org_type=${encodeURIComponent(z)}`).join('&') + '&' + contributor_employer?.map(z => `contributor_employer=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&last_index=' + last_index + '&' + contributor_name?.map(z => `contributor_name=${encodeURIComponent(z)}`).join('&') + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&sort_hide_null=' + sort_hide_null + '&' + recipient_committee_designation?.map(z => `recipient_committee_designation=${encodeURIComponent(z)}`).join('&') + '&max_load_date=' + max_load_date?.toISOString() + '&' + recipient_committee_type?.map(z => `recipient_committee_type=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&last_contribution_receipt_date=' + last_contribution_receipt_date?.toISOString() + '&last_contribution_receipt_amount=' + last_contribution_receipt_amount + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&' + contributor_state?.map(z => `contributor_state=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + two_year_transaction_period?.map(z => `two_year_transaction_period=${z}`).join('&') + '&' + contributor_zip?.map(z => `contributor_zip=${encodeURIComponent(z)}`).join('&') + '&min_load_date=' + min_load_date?.toISOString() + '&' + contributor_occupation?.map(z => `contributor_occupation=${encodeURIComponent(z)}`).join('&') + '&' + contributor_city?.map(z => `contributor_city=${encodeURIComponent(z)}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule B filings describe itemized disbursements. This data
		 * explains how committees and other filers spend their money. These figures are
		 * reported as part of forms F3, F3X and F3P.
		 * The data is divided in two-year periods, called `two_year_transaction_period`, which
		 * is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will
		 * default to the most recent two-year period that is named after the ending,
		 * even-numbered year.
		 * Due to the large quantity of Schedule B filings, this endpoint is not paginated by
		 * page number. Instead, you can request the next page of results by adding the values in
		 * the `last_indexes` object from `pagination` to the URL of your last request. For
		 * example, when sorting by `disbursement_date`, you might receive a page of
		 * results with the following pagination information:
		 * ```
		 * pagination: {
		 * pages: 965191,
		 * per_page: 20,
		 * count: 19303814,
		 * last_indexes: {
		 * last_index: "230906248",
		 * last_disbursement_date: "2014-07-04"
		 * }
		 * }
		 * ```
		 * To fetch the next page of sorted results, append `last_index=230906248` and
		 * `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through
		 * these results by using the sort indices (defaults to sort by disbursement date, e.g.
		 * `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.
		 * This resource uses keyset pagination to improve query performance
		 * and these indices are required to properly page through this large dataset.
		 * Note: because the Schedule B data includes many records, counts for
		 * large result sets are approximate; you will want to page through the records until no records are returned.
		 * Get schedules/schedule_b/
		 * @param {Date} min_date Minimum date
		 * @param {Array<string>} spender_committee_designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {Array<string>} recipient_committee_id The FEC identifier should be represented here if the contributor is registered with the FEC.
		 * @param {Date} last_disbursement_date When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {Array<string>} disbursement_description Description of disbursement
		 * @param {Array<string>} disbursement_purpose_category Disbursement purpose category
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} last_index Index of last result from previous page
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} recipient_city City of recipient
		 * @param {Array<string>} spender_committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {number} last_disbursement_amount When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.
		 * @param {Array<string>} spender_committee_org_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} two_year_transaction_period 
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {Array<string>} recipient_name Name of the entity receiving the disbursement
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @param {Array<string>} recipient_state State of recipient
		 * @return {void} 
		 */
		SchedulesSchedule_bGetByMin_dateAndSpender_committee_designationAndRecipient_committee_idAndLast_disbursement_dateAndMax_image_numberAndDisbursement_descriptionAndDisbursement_purpose_categoryAndMin_image_numberAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLine_numberAndSortAndRecipient_cityAndSpender_committee_typeAndLast_disbursement_amountAndSpender_committee_org_typeAndApi_keyAndTwo_year_transaction_periodAndCommittee_idAndImage_numberAndMax_dateAndRecipient_nameAndMax_amountAndRecipient_state(min_date: Date | null | undefined, spender_committee_designation: Array<string> | null | undefined, recipient_committee_id: Array<string> | null | undefined, last_disbursement_date: Date | null | undefined, max_image_number: string | null | undefined, disbursement_description: Array<string> | null | undefined, disbursement_purpose_category: Array<string> | null | undefined, min_image_number: string | null | undefined, sort_null_only: boolean | null | undefined, last_index: number | null | undefined, sort_hide_null: boolean | null | undefined, min_amount: string | null | undefined, per_page: number | null | undefined, line_number: string | null | undefined, sort: string | null | undefined, recipient_city: Array<string> | null | undefined, spender_committee_type: Array<string> | null | undefined, last_disbursement_amount: number | null | undefined, spender_committee_org_type: Array<string> | null | undefined, api_key: string, two_year_transaction_period: Array<number> | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, recipient_name: Array<string> | null | undefined, max_amount: string | null | undefined, recipient_state: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_b/?min_date=' + min_date?.toISOString() + '&' + spender_committee_designation?.map(z => `spender_committee_designation=${encodeURIComponent(z)}`).join('&') + '&' + recipient_committee_id?.map(z => `recipient_committee_id=${encodeURIComponent(z)}`).join('&') + '&last_disbursement_date=' + last_disbursement_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&' + disbursement_description?.map(z => `disbursement_description=${encodeURIComponent(z)}`).join('&') + '&' + disbursement_purpose_category?.map(z => `disbursement_purpose_category=${encodeURIComponent(z)}`).join('&') + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&sort_null_only=' + sort_null_only + '&last_index=' + last_index + '&sort_hide_null=' + sort_hide_null + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&per_page=' + per_page + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + recipient_city?.map(z => `recipient_city=${encodeURIComponent(z)}`).join('&') + '&' + spender_committee_type?.map(z => `spender_committee_type=${encodeURIComponent(z)}`).join('&') + '&last_disbursement_amount=' + last_disbursement_amount + '&' + spender_committee_org_type?.map(z => `spender_committee_org_type=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + two_year_transaction_period?.map(z => `two_year_transaction_period=${z}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&' + recipient_name?.map(z => `recipient_name=${encodeURIComponent(z)}`).join('&') + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)) + '&' + recipient_state?.map(z => `recipient_state=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting,
		 * memoed items are not included.
		 * Purpose is a combination of transaction codes, category codes and disbursement description.
		 * Inspect the `disbursement_purpose` sql function within the migrations for more details.
		 * Get schedules/schedule_b/by_purpose/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} purpose Disbursement purpose category
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_bBy_purposeGetByApi_keyAndPurposeAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort(api_key: string, purpose: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_b/by_purpose/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + purpose?.map(z => `purpose=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule B disbursements aggregated by recipient name. To avoid double counting,
		 * memoed items are not included.
		 * Get schedules/schedule_b/by_recipient/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} recipient_name Name of the entity receiving the disbursement
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_bBy_recipientGetByApi_keyAndRecipient_nameAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort(api_key: string, recipient_name: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_b/by_recipient/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + recipient_name?.map(z => `recipient_name=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule B disbursements aggregated by recipient committee ID, if applicable.
		 * To avoid double counting, memoed items are not included.
		 * Get schedules/schedule_b/by_recipient_id/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<string>} recipient_id The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_bBy_recipient_idGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndRecipient_idAndSort_hide_nullAndPer_pageAndSort(api_key: string, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, recipient_id: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_b/by_recipient_id/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&' + recipient_id?.map(z => `recipient_id=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
		 * Get schedules/schedule_b/efile/
		 * @param {Date} min_date When sorting by `disbursement_date`, this is populated with the         `disbursement_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} disbursement_description Description of disbursement
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Date} max_date When sorting by `disbursement_date`, this is populated with the         `disbursement_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} min_amount Filter for all amounts less than a value.
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} recipient_city City of recipient
		 * @param {Array<string>} recipient_state State of recipient
		 * @return {void} 
		 */
		SchedulesSchedule_bEfileGetByMin_dateAndApi_keyAndDisbursement_descriptionAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndImage_numberAndSort_hide_nullAndMax_dateAndPer_pageAndMin_amountAndMax_amountAndSortAndRecipient_cityAndRecipient_state(min_date: Date | null | undefined, api_key: string, disbursement_description: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, image_number: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, max_date: Date | null | undefined, per_page: number | null | undefined, min_amount: string | null | undefined, max_amount: string | null | undefined, sort: string | null | undefined, recipient_city: Array<string> | null | undefined, recipient_state: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_b/efile/?min_date=' + min_date?.toISOString() + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + disbursement_description?.map(z => `disbursement_description=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&max_date=' + max_date?.toISOString() + '&per_page=' + per_page + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + recipient_city?.map(z => `recipient_city=${encodeURIComponent(z)}`).join('&') + '&' + recipient_state?.map(z => `recipient_state=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule B filings describe itemized disbursements. This data
		 * explains how committees and other filers spend their money. These figures are
		 * reported as part of forms F3, F3X and F3P.
		 * The data is divided in two-year periods, called `two_year_transaction_period`, which
		 * is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will
		 * default to the most recent two-year period that is named after the ending,
		 * even-numbered year.
		 * Due to the large quantity of Schedule B filings, this endpoint is not paginated by
		 * page number. Instead, you can request the next page of results by adding the values in
		 * the `last_indexes` object from `pagination` to the URL of your last request. For
		 * example, when sorting by `disbursement_date`, you might receive a page of
		 * results with the following pagination information:
		 * ```
		 * pagination: {
		 * pages: 965191,
		 * per_page: 20,
		 * count: 19303814,
		 * last_indexes: {
		 * last_index: "230906248",
		 * last_disbursement_date: "2014-07-04"
		 * }
		 * }
		 * ```
		 * To fetch the next page of sorted results, append `last_index=230906248` and
		 * `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through
		 * these results by using the sort indices (defaults to sort by disbursement date, e.g.
		 * `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.
		 * This resource uses keyset pagination to improve query performance
		 * and these indices are required to properly page through this large dataset.
		 * Note: because the Schedule B data includes many records, counts for
		 * large result sets are approximate; you will want to page through the records until no records are returned.
		 * Get schedules/schedule_b/{sub_id}/
		 * @param {Date} min_date Minimum date
		 * @param {Array<string>} spender_committee_designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {Array<string>} recipient_committee_id The FEC identifier should be represented here if the contributor is registered with the FEC.
		 * @param {Date} last_disbursement_date When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {Array<string>} disbursement_description Description of disbursement
		 * @param {Array<string>} disbursement_purpose_category Disbursement purpose category
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} last_index Index of last result from previous page
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Array<string>} recipient_city City of recipient
		 * @param {Array<string>} spender_committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {number} last_disbursement_amount When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.
		 * @param {Array<string>} spender_committee_org_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} two_year_transaction_period 
		 * This is a two-year period that is derived from the year a transaction took place in the
		 * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		 * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		 * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		 * have the date  of the transaction, we fall back to using the report year (report_year in both
		 * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		 * specified, the results default to the most current cycle.
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {Array<string>} recipient_name Name of the entity receiving the disbursement
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @param {Array<string>} recipient_state State of recipient
		 * @return {void} 
		 */
		SchedulesSchedule_b_sub_idGetByMin_dateAndSpender_committee_designationAndRecipient_committee_idAndLast_disbursement_dateAndMax_image_numberAndDisbursement_descriptionAndDisbursement_purpose_categoryAndMin_image_numberAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLine_numberAndSortAndRecipient_cityAndSpender_committee_typeAndLast_disbursement_amountAndSpender_committee_org_typeAndApi_keyAndTwo_year_transaction_periodAndCommittee_idAndImage_numberAndMax_dateAndRecipient_nameAndMax_amountAndRecipient_state(min_date: Date | null | undefined, spender_committee_designation: Array<string> | null | undefined, recipient_committee_id: Array<string> | null | undefined, last_disbursement_date: Date | null | undefined, max_image_number: string | null | undefined, disbursement_description: Array<string> | null | undefined, disbursement_purpose_category: Array<string> | null | undefined, min_image_number: string | null | undefined, sort_null_only: boolean | null | undefined, last_index: number | null | undefined, sort_hide_null: boolean | null | undefined, min_amount: string | null | undefined, per_page: number | null | undefined, line_number: string | null | undefined, sort: string | null | undefined, recipient_city: Array<string> | null | undefined, spender_committee_type: Array<string> | null | undefined, last_disbursement_amount: number | null | undefined, spender_committee_org_type: Array<string> | null | undefined, api_key: string, two_year_transaction_period: Array<number> | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, recipient_name: Array<string> | null | undefined, max_amount: string | null | undefined, recipient_state: Array<string> | null | undefined, sub_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_b/' + (sub_id == null ? '' : encodeURIComponent(sub_id)) + '/?min_date=' + min_date?.toISOString() + '&' + spender_committee_designation?.map(z => `spender_committee_designation=${encodeURIComponent(z)}`).join('&') + '&' + recipient_committee_id?.map(z => `recipient_committee_id=${encodeURIComponent(z)}`).join('&') + '&last_disbursement_date=' + last_disbursement_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&' + disbursement_description?.map(z => `disbursement_description=${encodeURIComponent(z)}`).join('&') + '&' + disbursement_purpose_category?.map(z => `disbursement_purpose_category=${encodeURIComponent(z)}`).join('&') + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&sort_null_only=' + sort_null_only + '&last_index=' + last_index + '&sort_hide_null=' + sort_hide_null + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&per_page=' + per_page + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&' + recipient_city?.map(z => `recipient_city=${encodeURIComponent(z)}`).join('&') + '&' + spender_committee_type?.map(z => `spender_committee_type=${encodeURIComponent(z)}`).join('&') + '&last_disbursement_amount=' + last_disbursement_amount + '&' + spender_committee_org_type?.map(z => `spender_committee_org_type=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + two_year_transaction_period?.map(z => `two_year_transaction_period=${z}`).join('&') + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&' + recipient_name?.map(z => `recipient_name=${encodeURIComponent(z)}`).join('&') + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)) + '&' + recipient_state?.map(z => `recipient_state=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule C shows all loans, endorsements and loan guarantees a committee
		 * receives or makes.
		 * The committee continues to report the loan until it is repaid.
		 * Get schedules/schedule_c/
		 * @param {number} min_payment_to_date 
		 * Minimum payment to date
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {Date} max_incurred_date 
		 * Maximum incurred date
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} last_index Index of last result from previous page
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} min_amount 
		 * Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} loan_source_name Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,               other line of credit, or personal funds of the candidate
		 * @param {string} line_number 
		 * Filter for form and line number using the following format:
		 * `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter
		 * down to all entries from form `F3X` line number `16`.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {number} max_payment_to_date 
		 * Maximum payment to date
		 * @param {Array<string>} candidate_name Name of candidate running for office
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} min_incurred_date 
		 * Minimum incurred date
		 * @param {string} max_amount 
		 * Filter for all amounts less than a value.
		 * @return {void} 
		 */
		SchedulesSchedule_cGetByMin_payment_to_dateAndMax_image_numberAndMin_image_numberAndMax_incurred_dateAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLoan_source_nameAndLine_numberAndSortAndMax_payment_to_dateAndCandidate_nameAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMin_incurred_dateAndMax_amount(min_payment_to_date: number | null | undefined, max_image_number: string | null | undefined, min_image_number: string | null | undefined, max_incurred_date: Date | null | undefined, sort_null_only: boolean | null | undefined, last_index: number | null | undefined, sort_hide_null: boolean | null | undefined, min_amount: string | null | undefined, per_page: number | null | undefined, loan_source_name: Array<string> | null | undefined, line_number: string | null | undefined, sort: string | null | undefined, max_payment_to_date: number | null | undefined, candidate_name: Array<string> | null | undefined, api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, min_incurred_date: Date | null | undefined, max_amount: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_c/?min_payment_to_date=' + min_payment_to_date + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&max_incurred_date=' + max_incurred_date?.toISOString() + '&sort_null_only=' + sort_null_only + '&last_index=' + last_index + '&sort_hide_null=' + sort_hide_null + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&per_page=' + per_page + '&' + loan_source_name?.map(z => `loan_source_name=${encodeURIComponent(z)}`).join('&') + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&max_payment_to_date=' + max_payment_to_date + '&' + candidate_name?.map(z => `candidate_name=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&min_incurred_date=' + min_incurred_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule C shows all loans, endorsements and loan guarantees a committee
		 * receives or makes.
		 * The committee continues to report the loan until it is repaid.
		 * Get schedules/schedule_c/{sub_id}/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @return {void} 
		 */
		SchedulesSchedule_c_sub_idGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, sub_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_c/' + (sub_id == null ? '' : encodeURIComponent(sub_id)) + '/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule D, it shows debts and obligations owed to or by the committee that are
		 * required to be disclosed.
		 * Get schedules/schedule_d/
		 * @param {Date} min_date Minimum load date
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum load date
		 * @return {void} 
		 */
		SchedulesSchedule_dGetByMax_payment_periodAndMin_dateAndMax_image_numberAndMax_amount_outstanding_closeAndMin_image_numberAndSort_null_onlyAndMin_payment_periodAndMin_amount_incurredAndCreditor_debtor_nameAndSort_hide_nullAndCandidate_idAndPer_pageAndMin_amount_outstanding_beginningAndSortAndMin_amount_outstanding_closeAndApi_keyAndNature_of_debtAndMax_amount_incurredAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount_outstanding_beginning(max_payment_period: number | null | undefined, min_date: Date | null | undefined, max_image_number: string | null | undefined, max_amount_outstanding_close: number | null | undefined, min_image_number: string | null | undefined, sort_null_only: boolean | null | undefined, min_payment_period: number | null | undefined, min_amount_incurred: number | null | undefined, creditor_debtor_name: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, min_amount_outstanding_beginning: number | null | undefined, sort: string | null | undefined, min_amount_outstanding_close: number | null | undefined, api_key: string, nature_of_debt: string | null | undefined, max_amount_incurred: number | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_amount_outstanding_beginning: number | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_d/?max_payment_period=' + max_payment_period + '&min_date=' + min_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&max_amount_outstanding_close=' + max_amount_outstanding_close + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&sort_null_only=' + sort_null_only + '&min_payment_period=' + min_payment_period + '&min_amount_incurred=' + min_amount_incurred + '&' + creditor_debtor_name?.map(z => `creditor_debtor_name=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&min_amount_outstanding_beginning=' + min_amount_outstanding_beginning + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&min_amount_outstanding_close=' + min_amount_outstanding_close + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&nature_of_debt=' + (nature_of_debt == null ? '' : encodeURIComponent(nature_of_debt)) + '&max_amount_incurred=' + max_amount_incurred + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_amount_outstanding_beginning=' + max_amount_outstanding_beginning, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule D, it shows debts and obligations owed to or by the committee that are
		 * required to be disclosed.
		 * Get schedules/schedule_d/{sub_id}/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @return {void} 
		 */
		SchedulesSchedule_d_sub_idGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, sub_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_d/' + (sub_id == null ? '' : encodeURIComponent(sub_id)) + '/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC
		 * bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with
		 * the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.
		 * An independent expenditure is an expenditure for a communication "expressly advocating the election or
		 * defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with,
		 * or at the request or suggestion of, a candidate, a candidate’s authorized committee, or their agents, or
		 * a political party or its agents."
		 * Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don't double count expenditures
		 * and the totals are more accurate. You can still find the information from 24 and 48 hour reports in
		 * `/schedule/schedule_e/`.
		 * Due to the large quantity of Schedule E filings, this endpoint is not paginated by
		 * page number. Instead, you can request the next page of results by adding the values in
		 * the `last_indexes` object from `pagination` to the URL of your last request. For
		 * example, when sorting by `expenditure_amount`, you might receive a page of
		 * results with the following pagination information:
		 * ```
		 * "pagination": {
		 * "count": 152623,
		 * "last_indexes": {
		 * "last_index": "3023037",
		 * "last_expenditure_amount": -17348.5
		 * },
		 * "per_page": 20,
		 * "pages": 7632
		 * }
		 * }
		 * ```
		 * To fetch the next page of sorted results, append `last_index=3023037` and
		 * `last_expenditure_amount=` to the URL.  We strongly advise paging through
		 * these results by using the sort indices (defaults to sort by disbursement date,
		 * e.g. `last_disbursement_date`), otherwise some resources may be unintentionally
		 * filtered out.  This resource uses keyset pagination to improve query performance
		 * and these indices are required to properly page through this large dataset.
		 * Note: because the Schedule E data includes many records, counts for
		 * large result sets are approximate; you will want to page through the records until no records are returned.
		 * Get schedules/schedule_e/
		 * @param {Date} last_expenditure_date 
		 * When sorting by `expenditure_date`,
		 * this is populated with the `expenditure_date` of the last result.
		 * However, you will need to pass the index of that last result to
		 * `last_index` to get the next page.
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {Array<boolean>} is_notice 
		 * Record filed as 24- or 48-hour notice.
		 * @param {Array<string>} payee_name 
		 * Name of the entity that received the payment.
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} last_office_total_ytd 
		 * When sorting by `office_total_ytd`,
		 * this is populated with the `office_total_ytd` of the last result.
		 * However, you will need to pass the index of that last result to
		 * `last_index` to get the next page.'
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {Date} min_filing_date 
		 * Selects all filings received after this date
		 * @param {Array<string>} q_spender 
		 * Keyword search for spender name or ID
		 * @param {Date} min_dissemination_date Selects all items distributed by this committee after this date
		 * @param {Array<string>} candidate_office_state US state or territory
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} last_expenditure_amount 
		 * When sorting by `expenditure_amount`,
		 * this is populated with the `expenditure_amount` of the last result.
		 * However, you will need to pass the index of that last result to
		 * `last_index` to get the next page.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {Date} max_dissemination_date Selects all items distributed by this committee before this date
		 * @param {Date} min_date Minimum date
		 * @param {Array<string>} filing_form The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 *     - F1   Statement of Organization
		 *     - F1M  Notification of Multicandidate Status
		 *     - F2   Statement of Candidacy
		 *     - F3   Report of Receipts and Disbursements for an Authorized Committee
		 *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 *     - F5   Report of Independent Expenditures Made and Contributions Received
		 *     - F6   48 Hour Notice of Contributions/Loans Received
		 *     - F7   Report of Communication Costs by Corporations and Membership Organizations
		 *     - F8   Debt Settlement Plan
		 *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 *     - F13  Report of Donations Accepted for Inaugural Committee
		 *     - F99  Miscellaneous Text
		 *     - FRQ  Request for Additional Information
		 * @param {Array<Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator>} support_oppose_indicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {Date} max_filing_date 
		 * Selects all filings received before this date
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} last_support_oppose_indicator 
		 * When sorting by `support_oppose_indicator`,
		 * this is populated with the `support_oppose_indicator` of the last result.
		 * However, you will need to pass the index of that last result to `last_index`
		 * to get the next page.'
		 * @param {number} last_index Index of last result from previous page
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} candidate_office_district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} candidate_party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @param {boolean} most_recent 
		 * The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
		 * @param {Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice>} candidate_office Federal office candidate runs for: H, S or P
		 * @return {void} 
		 */
		SchedulesSchedule_eGetByLast_expenditure_dateAndMax_image_numberAndIs_noticeAndPayee_nameAndMin_amountAndCandidate_idAndSort_hide_nullAndLast_office_total_ytdAndSortAndMin_filing_dateAndQ_spenderAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndLast_expenditure_amountAndImage_numberAndMax_dateAndMax_dissemination_dateAndMin_dateAndFiling_formAndSupport_oppose_indicatorAndMin_image_numberAndCycleAndMax_filing_dateAndSort_null_onlyAndLast_support_oppose_indicatorAndLast_indexAndPer_pageAndCandidate_office_districtAndLine_numberAndApi_keyAndCommittee_idAndCandidate_partyAndMax_amountAndMost_recentAndCandidate_office(last_expenditure_date: Date | null | undefined, max_image_number: string | null | undefined, is_notice: Array<boolean> | null | undefined, payee_name: Array<string> | null | undefined, min_amount: string | null | undefined, candidate_id: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, last_office_total_ytd: number | null | undefined, sort: string | null | undefined, min_filing_date: Date | null | undefined, q_spender: Array<string> | null | undefined, min_dissemination_date: Date | null | undefined, candidate_office_state: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, last_expenditure_amount: number | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_dissemination_date: Date | null | undefined, min_date: Date | null | undefined, filing_form: Array<string> | null | undefined, support_oppose_indicator: Array<Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator> | null | undefined, min_image_number: string | null | undefined, cycle: Array<number> | null | undefined, max_filing_date: Date | null | undefined, sort_null_only: boolean | null | undefined, last_support_oppose_indicator: string | null | undefined, last_index: number | null | undefined, per_page: number | null | undefined, candidate_office_district: Array<string> | null | undefined, line_number: string | null | undefined, api_key: string, committee_id: Array<string> | null | undefined, candidate_party: Array<string> | null | undefined, max_amount: string | null | undefined, most_recent: boolean | null | undefined, candidate_office: Array<CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_e/?last_expenditure_date=' + last_expenditure_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&' + is_notice?.map(z => `is_notice=${z}`).join('&') + '&' + payee_name?.map(z => `payee_name=${encodeURIComponent(z)}`).join('&') + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&last_office_total_ytd=' + last_office_total_ytd + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&min_filing_date=' + min_filing_date?.toISOString() + '&' + q_spender?.map(z => `q_spender=${encodeURIComponent(z)}`).join('&') + '&min_dissemination_date=' + min_dissemination_date?.toISOString() + '&' + candidate_office_state?.map(z => `candidate_office_state=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&last_expenditure_amount=' + last_expenditure_amount + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_dissemination_date=' + max_dissemination_date?.toISOString() + '&min_date=' + min_date?.toISOString() + '&' + filing_form?.map(z => `filing_form=${encodeURIComponent(z)}`).join('&') + '&' + support_oppose_indicator?.map(z => `support_oppose_indicator=${z}`).join('&') + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&max_filing_date=' + max_filing_date?.toISOString() + '&sort_null_only=' + sort_null_only + '&last_support_oppose_indicator=' + (last_support_oppose_indicator == null ? '' : encodeURIComponent(last_support_oppose_indicator)) + '&last_index=' + last_index + '&per_page=' + per_page + '&' + candidate_office_district?.map(z => `candidate_office_district=${encodeURIComponent(z)}`).join('&') + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + candidate_party?.map(z => `candidate_party=${encodeURIComponent(z)}`).join('&') + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)) + '&most_recent=' + most_recent + '&' + candidate_office?.map(z => `candidate_office=${z}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule E receipts aggregated by recipient candidate. To avoid double
		 * counting, memoed items are not included.
		 * Get schedules/schedule_e/by_candidate/
		 * @param {string} district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator} support_oppose Support or opposition
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} state US state or territory where a candidate runs for office
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice} office Federal office candidate runs for: H, S or P
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_eBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSort(district: string | null | undefined, api_key: string, support_oppose: Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator | null | undefined, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, page: number | null | undefined, state: string | null | undefined, committee_id: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, office: Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_e/by_candidate/?district=' + (district == null ? '' : encodeURIComponent(district)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&support_oppose=' + support_oppose + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&page=' + page + '&state=' + (state == null ? '' : encodeURIComponent(state)) + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&office=' + office + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
		 * Get schedules/schedule_e/efile/
		 * @param {number} max_expenditure_amount Selects all items expended by this committee less than this amount
		 * @param {Array<Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator>} support_oppose_indicator Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		 * @param {Date} min_expenditure_date Selects all items expended by this committee after this date
		 * @param {Array<string>} filing_form The form where the underlying data comes from, for example, Form 1 would appear as F1:
		 *     - F1   Statement of Organization
		 *     - F1M  Notification of Multicandidate Status
		 *     - F2   Statement of Candidacy
		 *     - F3   Report of Receipts and Disbursements for an Authorized Committee
		 *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		 *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		 *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		 *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		 *     - F5   Report of Independent Expenditures Made and Contributions Received
		 *     - F6   48 Hour Notice of Contributions/Loans Received
		 *     - F7   Report of Communication Costs by Corporations and Membership Organizations
		 *     - F8   Debt Settlement Plan
		 *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
		 *     - F13  Report of Donations Accepted for Inaugural Committee
		 *     - F99  Miscellaneous Text
		 *     - FRQ  Request for Additional Information
		 * @param {Date} max_expenditure_date Selects all items expended by this committee before this date
		 * @param {Date} max_filed_date Timestamp of electronic or paper record that FEC received
		 * @param {boolean} is_notice 
		 * Record filed as 24- or 48-hour notice.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} payee_name 
		 * Name of the entity that received the payment.
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} candidate_office_district Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {number} min_expenditure_amount Selects all items expended by this committee greater than this amount
		 * @param {Array<string>} spender_name The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		 * @param {Date} min_dissemination_date Selects all items distributed by this committee after this date
		 * @param {Array<string>} candidate_office_state US state or territory where a candidate runs for office
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} candidate_search 
		 * Search for candidates by candiate id or candidate first or last name
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Array<string>} candidate_party Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		 * @param {Date} min_filed_date Timestamp of electronic or paper record that FEC received
		 * @param {Date} max_dissemination_date Selects all items distributed by this committee before this date
		 * @param {boolean} most_recent 
		 * The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
		 * @param {CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice} candidate_office Federal office candidate runs for: H, S or P
		 * @return {void} 
		 */
		SchedulesSchedule_eEfileGetByMax_expenditure_amountAndSupport_oppose_indicatorAndMin_expenditure_dateAndFiling_formAndMax_expenditure_dateAndMax_filed_dateAndIs_noticeAndSort_null_onlyAndSort_hide_nullAndPayee_nameAndCandidate_idAndPer_pageAndCandidate_office_districtAndSortAndApi_keyAndMin_expenditure_amountAndSpender_nameAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndPageAndCommittee_idAndCandidate_searchAndImage_numberAndCandidate_partyAndMin_filed_dateAndMax_dissemination_dateAndMost_recentAndCandidate_office(max_expenditure_amount: number | null | undefined, support_oppose_indicator: Array<Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator> | null | undefined, min_expenditure_date: Date | null | undefined, filing_form: Array<string> | null | undefined, max_expenditure_date: Date | null | undefined, max_filed_date: Date | null | undefined, is_notice: boolean | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, payee_name: Array<string> | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, candidate_office_district: Array<string> | null | undefined, sort: string | null | undefined, api_key: string, min_expenditure_amount: number | null | undefined, spender_name: Array<string> | null | undefined, min_dissemination_date: Date | null | undefined, candidate_office_state: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, candidate_search: Array<string> | null | undefined, image_number: Array<string> | null | undefined, candidate_party: Array<string> | null | undefined, min_filed_date: Date | null | undefined, max_dissemination_date: Date | null | undefined, most_recent: boolean | null | undefined, candidate_office: CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_e/efile/?max_expenditure_amount=' + max_expenditure_amount + '&' + support_oppose_indicator?.map(z => `support_oppose_indicator=${z}`).join('&') + '&min_expenditure_date=' + min_expenditure_date?.toISOString() + '&' + filing_form?.map(z => `filing_form=${encodeURIComponent(z)}`).join('&') + '&max_expenditure_date=' + max_expenditure_date?.toISOString() + '&max_filed_date=' + max_filed_date?.toISOString() + '&is_notice=' + is_notice + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + payee_name?.map(z => `payee_name=${encodeURIComponent(z)}`).join('&') + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&' + candidate_office_district?.map(z => `candidate_office_district=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&min_expenditure_amount=' + min_expenditure_amount + '&' + spender_name?.map(z => `spender_name=${encodeURIComponent(z)}`).join('&') + '&min_dissemination_date=' + min_dissemination_date?.toISOString() + '&' + candidate_office_state?.map(z => `candidate_office_state=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + candidate_search?.map(z => `candidate_search=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&' + candidate_party?.map(z => `candidate_party=${encodeURIComponent(z)}`).join('&') + '&min_filed_date=' + min_filed_date?.toISOString() + '&max_dissemination_date=' + max_dissemination_date?.toISOString() + '&most_recent=' + most_recent + '&candidate_office=' + candidate_office, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Total independent expenditure on supported or opposed candidates by cycle or candidate election year.
		 * Get schedules/schedule_e/totals/by_candidate/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} election_full `True` indicates that full election period of a candidate.
		 * `False` indicates that two year election cycle.
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @return {void} 
		 */
		SchedulesSchedule_eTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort(api_key: string, election_full: boolean | null | undefined, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, sort_null_only: boolean | null | undefined, sort_hide_null: boolean | null | undefined, candidate_id: Array<string> | null | undefined, per_page: number | null | undefined, sort: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_e/totals/by_candidate/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&election_full=' + election_full + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&sort_null_only=' + sort_null_only + '&sort_hide_null=' + sort_hide_null + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&per_page=' + per_page + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule F, it shows all special expenditures a national or state party committee
		 * makes in connection with the general election campaigns of federal candidates.
		 * These coordinated party expenditures do not count against the contribution limits but are subject to other limits,
		 * these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.
		 * Get schedules/schedule_f/
		 * @param {Date} min_date Minimum date
		 * @param {string} max_image_number Maxium image number of the page where the schedule item is reported
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {string} min_image_number Minium image number of the page where the schedule item is reported
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} min_amount Filter for all amounts greater than a value.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC.
		 * If a person runs for several offices, that person will have separate candidate IDs for each office.
		 * First character indicates office - [P]residential, [H]ouse, [S]enate].
		 * Second character is the last digit of the two-year period the ID was created.
		 * Third and fourth is the candidate state. Presidential IDs don't have state.
		 * Fifth and sixth is the district when the candidate first ran. This does not change if the
		 * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		 * The rest is sequence.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {string} line_number Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {Array<string>} image_number 
		 * An unique identifier for each page where the electronic or paper filing is reported.
		 * @param {Date} max_date Maximum date
		 * @param {string} max_amount Filter for all amounts less than a value.
		 * @return {void} 
		 */
		SchedulesSchedule_fGetByMin_dateAndMax_image_numberAndCycleAndMin_image_numberAndSort_null_onlyAndPayee_nameAndMin_amountAndPer_pageAndCandidate_idAndSort_hide_nullAndLine_numberAndSortAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount(min_date: Date | null | undefined, max_image_number: string | null | undefined, cycle: Array<number> | null | undefined, min_image_number: string | null | undefined, sort_null_only: boolean | null | undefined, payee_name: Array<string> | null | undefined, min_amount: string | null | undefined, per_page: number | null | undefined, candidate_id: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, line_number: string | null | undefined, sort: string | null | undefined, api_key: string, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, image_number: Array<string> | null | undefined, max_date: Date | null | undefined, max_amount: string | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_f/?min_date=' + min_date?.toISOString() + '&max_image_number=' + (max_image_number == null ? '' : encodeURIComponent(max_image_number)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&min_image_number=' + (min_image_number == null ? '' : encodeURIComponent(min_image_number)) + '&sort_null_only=' + sort_null_only + '&' + payee_name?.map(z => `payee_name=${encodeURIComponent(z)}`).join('&') + '&min_amount=' + (min_amount == null ? '' : encodeURIComponent(min_amount)) + '&per_page=' + per_page + '&' + candidate_id?.map(z => `candidate_id=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&line_number=' + (line_number == null ? '' : encodeURIComponent(line_number)) + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&' + image_number?.map(z => `image_number=${encodeURIComponent(z)}`).join('&') + '&max_date=' + max_date?.toISOString() + '&max_amount=' + (max_amount == null ? '' : encodeURIComponent(max_amount)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Schedule F, it shows all special expenditures a national or state party committee
		 * makes in connection with the general election campaigns of federal candidates.
		 * These coordinated party expenditures do not count against the contribution limits but are subject to other limits,
		 * these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.
		 * Get schedules/schedule_f/{sub_id}/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @return {void} 
		 */
		SchedulesSchedule_f_sub_idGetByPageAndApi_keyAndPer_page(page: number | null | undefined, api_key: string, per_page: number | null | undefined, sub_id: string, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'schedules/schedule_f/' + (sub_id == null ? '' : encodeURIComponent(sub_id)) + '/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&per_page=' + per_page, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * State laws and procedures govern elections for state or local offices as well as
		 * how candidates appear on election ballots.
		 * Contact the appropriate state election office for more information.
		 * Get state-election-office/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} state 
		 * Enter a state (Ex: AK, TX, VA etc..) to find the local election offices contact
		 * information.
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @return {void} 
		 */
		State_election_officeGetByPageAndStateAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last(page: number | null | undefined, state: string, api_key: string, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, sort_nulls_last: boolean | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'state-election-office/?page=' + page + '&state=' + (state == null ? '' : encodeURIComponent(state)) + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.
		 * This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations.
		 * Get totals/by_entity/
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {number} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @return {void} 
		 */
		TotalsBy_entityGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndCycleAndSort_nulls_last(page: number | null | undefined, api_key: string, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort_null_only: boolean | null | undefined, sort: string | null | undefined, cycle: number, sort_nulls_last: boolean | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'totals/by_entity/?page=' + page + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&sort_null_only=' + sort_null_only + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&cycle=' + cycle + '&sort_nulls_last=' + sort_nulls_last, { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides information about an inaugural committee's Form 13 report of donations accepted.
		 * The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a `cycle`.
		 * Get totals/inaugural_committees/by_contributor/
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {Array<number>} cycle 
		 * A two year election cycle that the committee was active- (after original registration
		 * date but before expiration date in Form 1s) The cycle begins with
		 * an odd year and is named for its ending, even year.
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<string>} contributor_name Name of contributor
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} sort 
		 * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		 * @return {void} 
		 */
		TotalsInaugural_committeesBy_contributorGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndContributor_nameAndSort_hide_nullAndPer_pageAndSort(api_key: string, cycle: Array<number> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, sort_null_only: boolean | null | undefined, contributor_name: Array<string> | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, sort: Array<string> | null | undefined, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'totals/inaugural_committees/by_contributor/?api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&sort_null_only=' + sort_null_only + '&' + contributor_name?.map(z => `contributor_name=${encodeURIComponent(z)}`).join('&') + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + sort?.map(z => `sort=${encodeURIComponent(z)}`).join('&'), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}

		/**
		 * This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
		 * which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
		 * The cycle is named after the even-numbered year and includes the year before it. To obtain
		 * totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
		 * is the next year — for example, in 2015, the current cycle is 2016.
		 * For presidential and Senate candidates, multiple two-year cycles exist between elections.
		 * Get totals/{entity_type}/
		 * @param {Array<string>} treasurer_name Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		 * @param {string} max_disbursements 
		 * Filter for all amounts less than a value.
		 * @param {Array<string>} committee_state US state or territory
		 * @param {Array<number>} cycle 
		 * Filter records to only those that were applicable to a given
		 * two-year period.The cycle begins with an odd year and is named
		 * for its ending, even year.
		 * @param {boolean} sort_null_only Toggle that filters out all rows having sort column that is non-null
		 * @param {Array<string>} sponsor_candidate_id 
		 * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		 * @param {string} min_disbursements 
		 * Filter for all amounts greater than a value.
		 * @param {string} min_last_cash_on_hand_end_period 
		 * Filter for all amounts greater than a value.
		 * @param {string} max_last_cash_on_hand_end_period 
		 * Filter for all amounts less than a value.
		 * @param {boolean} sort_hide_null Hide null values on sorted column(s).
		 * @param {number} per_page The number of results returned per page. Defaults to 20.
		 * @param {Array<string>} filing_frequency The one-letter 
		 *     code of the filing frequency:
		 *          - A Administratively terminated
		 *          - D Debt
		 *          - M Monthly filer
		 *          - Q Quarterly filer
		 *          - T Terminated
		 *          - W Waived
		 * @param {string} sort Provide a field to sort by. Use `-` for descending order.
		 * @param {string} max_last_debts_owed_by_committee 
		 * Filter for all amounts less than a value.
		 * @param {Date} min_first_f1_date Filter for committees whose first Form 1 was received on or after this date.
		 * @param {Array<string>} committee_designation The one-letter designation code of the organization:
		 *          - A authorized by a candidate
		 *          - J joint fundraising committee
		 *          - P principal campaign committee of a candidate
		 *          - U unauthorized
		 *          - B lobbyist/registrant PAC
		 *          - D leadership PAC
		 * @param {string} api_key 
		 * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		 * @param {string} max_receipts 
		 * Filter for all amounts less than a value.
		 * @param {Array<string>} committee_type The one-letter type code of the organization:
		 *         - C communication cost
		 *         - D delegate
		 *         - E electioneering communication
		 *         - H House
		 *         - I independent expenditure filer (not a committee)
		 *         - N PAC - nonqualified
		 *         - O independent expenditure-only (super PACs)
		 *         - P presidential
		 *         - Q PAC - qualified
		 *         - S Senate
		 *         - U single candidate independent expenditure
		 *         - V PAC with non-contribution account, nonqualified
		 *         - W PAC with non-contribution account, qualified
		 *         - X party, nonqualified
		 *         - Y party, qualified
		 *         - Z national party non-federal account
		 * @param {boolean} sort_nulls_last Toggle that sorts null values last
		 * @param {number} page For paginating through results, starting at page 1
		 * @param {Array<string>} committee_id 
		 * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		 * @param {string} min_last_debts_owed_by_committee 
		 * Filter for all amounts greater than a value.
		 * @param {Date} max_first_f1_date Filter for committees whose first Form 1 was received on or before this date.
		 * @param {Array<string>} organization_type The one-letter code for the kind for organization:
		 *         - C corporation
		 *         - L labor organization
		 *         - M membership organization
		 *         - T trade association
		 *         - V cooperative
		 *         - W corporation without capital stock
		 * @param {string} min_receipts 
		 * Filter for all amounts greater than a value.
		 * @param {Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receiptsEntity_type} entity_type Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac`, `party`, `pac-party`,                 `house-senate`, or `ie-only`
		 * @return {void} 
		 */
		Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receipts(treasurer_name: Array<string> | null | undefined, max_disbursements: string | null | undefined, committee_state: Array<string> | null | undefined, cycle: Array<number> | null | undefined, sort_null_only: boolean | null | undefined, sponsor_candidate_id: Array<string> | null | undefined, min_disbursements: string | null | undefined, min_last_cash_on_hand_end_period: string | null | undefined, max_last_cash_on_hand_end_period: string | null | undefined, sort_hide_null: boolean | null | undefined, per_page: number | null | undefined, filing_frequency: Array<string> | null | undefined, sort: string | null | undefined, max_last_debts_owed_by_committee: string | null | undefined, min_first_f1_date: Date | null | undefined, committee_designation: Array<string> | null | undefined, api_key: string, max_receipts: string | null | undefined, committee_type: Array<string> | null | undefined, sort_nulls_last: boolean | null | undefined, page: number | null | undefined, committee_id: Array<string> | null | undefined, min_last_debts_owed_by_committee: string | null | undefined, max_first_f1_date: Date | null | undefined, organization_type: Array<string> | null | undefined, min_receipts: string | null | undefined, entity_type: Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receiptsEntity_type, headersHandler?: () => HttpHeaders): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'totals/' + entity_type + '/?' + treasurer_name?.map(z => `treasurer_name=${encodeURIComponent(z)}`).join('&') + '&max_disbursements=' + (max_disbursements == null ? '' : encodeURIComponent(max_disbursements)) + '&' + committee_state?.map(z => `committee_state=${encodeURIComponent(z)}`).join('&') + '&' + cycle?.map(z => `cycle=${z}`).join('&') + '&sort_null_only=' + sort_null_only + '&' + sponsor_candidate_id?.map(z => `sponsor_candidate_id=${encodeURIComponent(z)}`).join('&') + '&min_disbursements=' + (min_disbursements == null ? '' : encodeURIComponent(min_disbursements)) + '&min_last_cash_on_hand_end_period=' + (min_last_cash_on_hand_end_period == null ? '' : encodeURIComponent(min_last_cash_on_hand_end_period)) + '&max_last_cash_on_hand_end_period=' + (max_last_cash_on_hand_end_period == null ? '' : encodeURIComponent(max_last_cash_on_hand_end_period)) + '&sort_hide_null=' + sort_hide_null + '&per_page=' + per_page + '&' + filing_frequency?.map(z => `filing_frequency=${encodeURIComponent(z)}`).join('&') + '&sort=' + (sort == null ? '' : encodeURIComponent(sort)) + '&max_last_debts_owed_by_committee=' + (max_last_debts_owed_by_committee == null ? '' : encodeURIComponent(max_last_debts_owed_by_committee)) + '&min_first_f1_date=' + min_first_f1_date?.toISOString() + '&' + committee_designation?.map(z => `committee_designation=${encodeURIComponent(z)}`).join('&') + '&api_key=' + (api_key == null ? '' : encodeURIComponent(api_key)) + '&max_receipts=' + (max_receipts == null ? '' : encodeURIComponent(max_receipts)) + '&' + committee_type?.map(z => `committee_type=${encodeURIComponent(z)}`).join('&') + '&sort_nulls_last=' + sort_nulls_last + '&page=' + page + '&' + committee_id?.map(z => `committee_id=${encodeURIComponent(z)}`).join('&') + '&min_last_debts_owed_by_committee=' + (min_last_debts_owed_by_committee == null ? '' : encodeURIComponent(min_last_debts_owed_by_committee)) + '&max_first_f1_date=' + max_first_f1_date?.toISOString() + '&' + organization_type?.map(z => `organization_type=${encodeURIComponent(z)}`).join('&') + '&min_receipts=' + (min_receipts == null ? '' : encodeURIComponent(min_receipts)), { headers: headersHandler ? headersHandler() : undefined, observe: 'response', responseType: 'text' });
		}
	}

	export enum Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_idRenderer { ics = 'ics', csv = 'csv' }

	export enum Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type { 'e-file' = 'e-file', paper = 'paper' }

	export enum CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice { '' = '', H = 'H', S = 'S', P = 'P' }

	export enum CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byParty { '' = '', DEM = 'DEM', REP = 'REP', OTHER = 'OTHER' }

	export enum CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byAggregate_by { office = 'office', 'office-state' = 'office-state', 'office-state-district' = 'office-state-district', 'office-party' = 'office-party' }

	export enum Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator { S = 'S', O = 'O' }

	export enum Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice { house = 'house', senate = 'senate', president = 'president' }

	export enum LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameMur_type { archived = 'archived', current = 'current' }

	export enum LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameType { admin_fines = 'admin_fines', adrs = 'adrs', advisory_opinions = 'advisory_opinions', murs = 'murs', regulations = 'regulations', statutes = 'statutes' }

	export enum Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentEntity_type { presidential = 'presidential', 'pac-party' = 'pac-party', 'house-senate' = 'house-senate', 'ie-only' = 'ie-only' }

	export enum Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receiptsEntity_type { presidential = 'presidential', pac = 'pac', party = 'party', 'pac-party' = 'pac-party', 'house-senate' = 'house-senate', 'ie-only' = 'ie-only' }

}

