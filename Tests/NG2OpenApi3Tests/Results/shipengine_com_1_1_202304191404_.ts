import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** A ShipEngine account settings response body */
	export interface Account_settings {
		default_label_layout?: Default_label_layout;
	}

	/** A ShipEngine account settings response body */
	export interface Account_settingsFormProperties {
		default_label_layout: FormControl<Default_label_layout | null | undefined>,
	}
	export function CreateAccount_settingsFormGroup() {
		return new FormGroup<Account_settingsFormProperties>({
			default_label_layout: new FormControl<Default_label_layout | null | undefined>(undefined),
		});

	}


	/** The possible default label layout values */
	export enum Default_label_layout { '4x6' = '4x6', Letter = 'Letter' }


	/** A ShipEngine account images body */
	export interface Account_settings_images {

		/** The date and time that the image was created in ShipEngine. */
		created_at?: Date;

		/**
		 * The file type of the image.
		 */
		image_content_type?: Account_settings_imagesImage_content_type;

		/**
		 * A base64 encoded string representation of the image.
		 */
		image_data?: string | null;

		/**
		 * Indicates whether this image is set as default.
		 */
		is_default?: boolean | null;

		/**
		 * A string that uniquely identifies the image. This ID is generated by ShipEngine when the image is uploaded.
		 */
		label_image_id?: string;

		/** The date and time that the image was modified in ShipEngine. */
		modified_at?: Date;

		/**
		 * A human readable name for the image.
		 * Max length: 50
		 * Min length: 1
		 */
		name?: string | null;
	}

	/** A ShipEngine account images body */
	export interface Account_settings_imagesFormProperties {

		/** The date and time that the image was created in ShipEngine. */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The file type of the image.
		 */
		image_content_type: FormControl<Account_settings_imagesImage_content_type | null | undefined>,

		/**
		 * A base64 encoded string representation of the image.
		 */
		image_data: FormControl<string | null | undefined>,

		/**
		 * Indicates whether this image is set as default.
		 */
		is_default: FormControl<boolean | null | undefined>,

		/**
		 * A string that uniquely identifies the image. This ID is generated by ShipEngine when the image is uploaded.
		 */
		label_image_id: FormControl<string | null | undefined>,

		/** The date and time that the image was modified in ShipEngine. */
		modified_at: FormControl<Date | null | undefined>,

		/**
		 * A human readable name for the image.
		 * Max length: 50
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateAccount_settings_imagesFormGroup() {
		return new FormGroup<Account_settings_imagesFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			image_content_type: new FormControl<Account_settings_imagesImage_content_type | null | undefined>(undefined),
			image_data: new FormControl<string | null | undefined>(undefined),
			is_default: new FormControl<boolean | null | undefined>(undefined),
			label_image_id: new FormControl<string | null | undefined>(undefined),
			modified_at: new FormControl<Date | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(50)]),
		});

	}

	export enum Account_settings_imagesImage_content_type { 'image/png' = 'image/png', 'image/jpeg' = 'image/jpeg' }


	/** An add funds to carrier request body */
	export interface Add_funds_to_carrier_request_body {
	}

	/** An add funds to carrier request body */
	export interface Add_funds_to_carrier_request_bodyFormProperties {
	}
	export function CreateAdd_funds_to_carrier_request_bodyFormGroup() {
		return new FormGroup<Add_funds_to_carrier_request_bodyFormProperties>({
		});

	}


	/** The current balance of the requested carrier account */
	export interface Add_funds_to_carrier_response_body {

		/**
		 * The current balance of the account
		 * Required
		 */
		balance: Monetary_value;
	}

	/** The current balance of the requested carrier account */
	export interface Add_funds_to_carrier_response_bodyFormProperties {
	}
	export function CreateAdd_funds_to_carrier_response_bodyFormGroup() {
		return new FormGroup<Add_funds_to_carrier_response_bodyFormProperties>({
		});

	}


	/**
	 * A monetary value, such as the price of a shipping label, the insured value of a package, or an account balance.
	 */
	export interface Monetary_value {

		/**
		 * The monetary amount, in the specified currency.
		 * Required
		 * Minimum: 0
		 */
		amount: number;

		/** Required */
		currency: string;
	}

	/**
	 * A monetary value, such as the price of a shipping label, the insured value of a package, or an account balance.
	 */
	export interface Monetary_valueFormProperties {

		/**
		 * The monetary amount, in the specified currency.
		 * Required
		 * Minimum: 0
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		currency: FormControl<string | null | undefined>,
	}
	export function CreateMonetary_valueFormGroup() {
		return new FormGroup<Monetary_valueFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An add funds to insurance request body */
	export interface Add_funds_to_insurance_request_body {
	}

	/** An add funds to insurance request body */
	export interface Add_funds_to_insurance_request_bodyFormProperties {
	}
	export function CreateAdd_funds_to_insurance_request_bodyFormGroup() {
		return new FormGroup<Add_funds_to_insurance_request_bodyFormProperties>({
		});

	}


	/** Add funds to insurance response body */
	export interface Add_funds_to_insurance_response_body {
	}

	/** Add funds to insurance response body */
	export interface Add_funds_to_insurance_response_bodyFormProperties {
	}
	export function CreateAdd_funds_to_insurance_response_bodyFormGroup() {
		return new FormGroup<Add_funds_to_insurance_response_bodyFormProperties>({
		});

	}


	/** An add to batch request body */
	export interface Add_to_batch_request_body {
	}

	/** An add to batch request body */
	export interface Add_to_batch_request_bodyFormProperties {
	}
	export function CreateAdd_to_batch_request_bodyFormGroup() {
		return new FormGroup<Add_to_batch_request_bodyFormProperties>({
		});

	}


	/**
	 * Any residential or business mailing address, anywhere in the world.
	 * > **Note:** Either `name` or `company_name` must be set. Both may be specified, if relevant.
	 */
	export interface Address {
	}

	/**
	 * Any residential or business mailing address, anywhere in the world.
	 * > **Note:** Either `name` or `company_name` must be set. Both may be specified, if relevant.
	 */
	export interface AddressFormProperties {
	}
	export function CreateAddressFormGroup() {
		return new FormGroup<AddressFormProperties>({
		});

	}


	/** Indicates whether an address is residential. */
	export enum Address_residential_indicator { unknown = 'unknown', yes = 'yes', no = 'no' }


	/**
	 * Any residential or business mailing address, anywhere in the world.
	 */
	export interface Address_to_validate {
	}

	/**
	 * Any residential or business mailing address, anywhere in the world.
	 */
	export interface Address_to_validateFormProperties {
	}
	export function CreateAddress_to_validateFormGroup() {
		return new FormGroup<Address_to_validateFormProperties>({
		});

	}


	/** An address validating shipment */
	export interface Address_validating_shipment {
	}

	/** An address validating shipment */
	export interface Address_validating_shipmentFormProperties {
	}
	export function CreateAddress_validating_shipmentFormGroup() {
		return new FormGroup<Address_validating_shipmentFormProperties>({
		});

	}


	/** The error codes that can be returned by the address validation API */
	export enum Address_validation_code { a1000 = 'a1000', a1001 = 'a1001', a1002 = 'a1002', a1003 = 'a1003', a1004 = 'a1004', a1005 = 'a1005', a1006 = 'a1006', a1007 = 'a1007', a1008 = 'a1008', r1000 = 'r1000', r1001 = 'r1001', r1002 = 'r1002', r1003 = 'r1003' }


	/** The detailed error codes that can be returned by the address validation API */
	export enum Address_validation_detail_code { unsupported_country = 'unsupported_country', non_supported_country = 'non_supported_country', minimum_postal_code_verification_failed = 'minimum_postal_code_verification_failed', street_does_not_match_unique_street_name = 'street_does_not_match_unique_street_name', multiple_directionals = 'multiple_directionals', multiple_matches = 'multiple_matches', suite_not_valid = 'suite_not_valid', suite_missing = 'suite_missing', incompatible_paired_labels = 'incompatible_paired_labels', invalid_house_number = 'invalid_house_number', missing_house_number = 'missing_house_number', invalid_box_number = 'invalid_box_number', invalid_charge_event = 'invalid_charge_event', missing_box_number = 'missing_box_number', missing_cmra_or_private_mail_box_number = 'missing_cmra_or_private_mail_box_number', suite_has_no_secondaries = 'suite_has_no_secondaries', postal_code_changed_or_added = 'postal_code_changed_or_added', state_province_changed_or_added = 'state_province_changed_or_added', city_locality_changed_or_added = 'city_locality_changed_or_added', urbanization_changed = 'urbanization_changed', street_name_spelling_changed_or_added = 'street_name_spelling_changed_or_added', street_name_type_changed_or_added = 'street_name_type_changed_or_added', street_direction_changed_or_added = 'street_direction_changed_or_added', suite_type_changed_or_added = 'suite_type_changed_or_added', suite_unit_number_changed_or_added = 'suite_unit_number_changed_or_added', double_dependent_locality_changed_or_added = 'double_dependent_locality_changed_or_added', subadministrative_area_changed_or_added = 'subadministrative_area_changed_or_added', subnational_area_changed_or_added = 'subnational_area_changed_or_added', po_box_changed_or_added = 'po_box_changed_or_added', premise_type_changed_or_added = 'premise_type_changed_or_added', house_number_changed = 'house_number_changed', organization_changed_or_added = 'organization_changed_or_added', partially_verified_to_state_level = 'partially_verified_to_state_level', partially_verified_to_city_level = 'partially_verified_to_city_level', partially_verified_to_street_level = 'partially_verified_to_street_level', partially_verified_to_premise_level = 'partially_verified_to_premise_level', verified_to_state_level = 'verified_to_state_level', verified_to_city_level = 'verified_to_city_level', verified_to_street_level = 'verified_to_street_level', verified_to_premise_level = 'verified_to_premise_level', verified_to_suite_level = 'verified_to_suite_level', coded_to_street_lavel = 'coded_to_street_lavel', coded_to_neighborhood_level = 'coded_to_neighborhood_level', coded_to_community_level = 'coded_to_community_level', coded_to_state_level = 'coded_to_state_level', coded_to_rooftop_level = 'coded_to_rooftop_level', coded_to_rooftop_interpolation_level = 'coded_to_rooftop_interpolation_level', name_max_length_exceeded = 'name_max_length_exceeded', phone_max_length_exceeded = 'phone_max_length_exceeded', company_name_max_length_exceeded = 'company_name_max_length_exceeded', line1_min_max_length = 'line1_min_max_length', line2_max_length_exceeded = 'line2_max_length_exceeded', line3_max_length_exceeded = 'line3_max_length_exceeded', city_locality_max_length_exceeded = 'city_locality_max_length_exceeded', state_province_max_length_exceeded = 'state_province_max_length_exceeded', invalid_postal_code = 'invalid_postal_code', country_invalid_length = 'country_invalid_length', address_not_found = 'address_not_found' }


	/** The different types of messages that can be returned by the address validation API */
	export enum Address_validation_message_type { error = 'error', warning = 'warning', info = 'info' }


	/** An address validation result */
	export interface Address_validation_result {

		/**
		 * The matched address found by the Shipengine API
		 * Required
		 */
		matched_address: Address;

		/**
		 * The list of messages that were generated during the address validation request.
		 * Required
		 */
		messages: Array<Response_message>;

		/**
		 * The original address that was sent for validation
		 * Required
		 */
		original_address: Address;

		/** Required */
		status: Address_validation_status;
	}

	/** An address validation result */
	export interface Address_validation_resultFormProperties {

		/** Required */
		status: FormControl<Address_validation_status | null | undefined>,
	}
	export function CreateAddress_validation_resultFormGroup() {
		return new FormGroup<Address_validation_resultFormProperties>({
			status: new FormControl<Address_validation_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A response message that displays when additional info is needed for an address validation request. */
	export interface Response_message {

		/** Required */
		code: Address_validation_code;

		/** Required */
		detail_code: Address_validation_detail_code;

		/**
		 * Message explaining the address validation error
		 * Required
		 * Min length: 1
		 */
		message: string;

		/** Required */
		type: Address_validation_message_type;
	}

	/** A response message that displays when additional info is needed for an address validation request. */
	export interface Response_messageFormProperties {

		/** Required */
		code: FormControl<Address_validation_code | null | undefined>,

		/** Required */
		detail_code: FormControl<Address_validation_detail_code | null | undefined>,

		/**
		 * Message explaining the address validation error
		 * Required
		 * Min length: 1
		 */
		message: FormControl<string | null | undefined>,

		/** Required */
		type: FormControl<Address_validation_message_type | null | undefined>,
	}
	export function CreateResponse_messageFormGroup() {
		return new FormGroup<Response_messageFormProperties>({
			code: new FormControl<Address_validation_code | null | undefined>(undefined, [Validators.required]),
			detail_code: new FormControl<Address_validation_detail_code | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			type: new FormControl<Address_validation_message_type | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The possible address validation status values */
	export enum Address_validation_status { unverified = 'unverified', verified = 'verified', warning = 'warning', error = 'error' }


	/** Advanced shipment options */
	export interface Advanced_shipment_options {

		/**
		 * This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the `bill_to_country_code`, `bill_to_party`, and `bill_to_postal_code` fields.
		 */
		bill_to_account?: string | null;

		/**
		 * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs.
		 */
		bill_to_country_code?: string;

		/**
		 * Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the `bill_to_account`, `bill_to_country_code`, and `bill_to_postal_code` fields must also be set.
		 */
		bill_to_party?: Bill_to_party;

		/**
		 * The postal code of the third-party that is responsible for shipping costs.
		 */
		bill_to_postal_code?: string | null;

		/** Defer payment until package is delivered, instead of when it is ordered. */
		collect_on_delivery?: Collect_on_delivery;

		/** Indicates that the shipment contains alcohol. */
		contains_alcohol?: boolean | null;

		/**
		 * An arbitrary field that can be used to store information about the shipment.
		 * Max length: 100
		 */
		custom_field1?: string | null;

		/**
		 * An arbitrary field that can be used to store information about the shipment.
		 * Max length: 100
		 */
		custom_field2?: string | null;

		/**
		 * An arbitrary field that can be used to store information about the shipment.
		 * Max length: 100
		 */
		custom_field3?: string | null;

		/**
		 * Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express.
		 */
		delivered_duty_paid?: boolean | null;

		/** Indicates if the shipment contain dry ice */
		dry_ice?: boolean | null;

		/** The weight of the dry ice in the shipment */
		dry_ice_weight?: Weight;

		/** Provide details for the Fedex freight service */
		fedex_freight?: Advanced_shipment_optionsFedex_freight;

		/**
		 * The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport=1), such as "77.5", "110", or "250".
		 */
		freight_class?: string | null;

		/**
		 * Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details.
		 */
		non_machinable?: boolean | null;
		origin_type?: Origin_type;

		/** Enables Saturday delivery, if supported by the carrier. */
		saturday_delivery?: boolean | null;
		shipper_release?: boolean | null;

		/** Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached */
		third_party_consignee?: boolean | null;

		/**
		 * Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a `freight_class` must also be specified.
		 */
		use_ups_ground_freight_pricing?: boolean | null;
	}

	/** Advanced shipment options */
	export interface Advanced_shipment_optionsFormProperties {

		/**
		 * This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the `bill_to_country_code`, `bill_to_party`, and `bill_to_postal_code` fields.
		 */
		bill_to_account: FormControl<string | null | undefined>,

		/**
		 * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs.
		 */
		bill_to_country_code: FormControl<string | null | undefined>,

		/**
		 * Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the `bill_to_account`, `bill_to_country_code`, and `bill_to_postal_code` fields must also be set.
		 */
		bill_to_party: FormControl<Bill_to_party | null | undefined>,

		/**
		 * The postal code of the third-party that is responsible for shipping costs.
		 */
		bill_to_postal_code: FormControl<string | null | undefined>,

		/** Indicates that the shipment contains alcohol. */
		contains_alcohol: FormControl<boolean | null | undefined>,

		/**
		 * An arbitrary field that can be used to store information about the shipment.
		 * Max length: 100
		 */
		custom_field1: FormControl<string | null | undefined>,

		/**
		 * An arbitrary field that can be used to store information about the shipment.
		 * Max length: 100
		 */
		custom_field2: FormControl<string | null | undefined>,

		/**
		 * An arbitrary field that can be used to store information about the shipment.
		 * Max length: 100
		 */
		custom_field3: FormControl<string | null | undefined>,

		/**
		 * Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express.
		 */
		delivered_duty_paid: FormControl<boolean | null | undefined>,

		/** Indicates if the shipment contain dry ice */
		dry_ice: FormControl<boolean | null | undefined>,

		/**
		 * The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport=1), such as "77.5", "110", or "250".
		 */
		freight_class: FormControl<string | null | undefined>,

		/**
		 * Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details.
		 */
		non_machinable: FormControl<boolean | null | undefined>,
		origin_type: FormControl<Origin_type | null | undefined>,

		/** Enables Saturday delivery, if supported by the carrier. */
		saturday_delivery: FormControl<boolean | null | undefined>,
		shipper_release: FormControl<boolean | null | undefined>,

		/** Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached */
		third_party_consignee: FormControl<boolean | null | undefined>,

		/**
		 * Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a `freight_class` must also be specified.
		 */
		use_ups_ground_freight_pricing: FormControl<boolean | null | undefined>,
	}
	export function CreateAdvanced_shipment_optionsFormGroup() {
		return new FormGroup<Advanced_shipment_optionsFormProperties>({
			bill_to_account: new FormControl<string | null | undefined>(undefined),
			bill_to_country_code: new FormControl<string | null | undefined>(undefined),
			bill_to_party: new FormControl<Bill_to_party | null | undefined>(undefined),
			bill_to_postal_code: new FormControl<string | null | undefined>(undefined),
			contains_alcohol: new FormControl<boolean | null | undefined>(undefined),
			custom_field1: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			custom_field2: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			custom_field3: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			delivered_duty_paid: new FormControl<boolean | null | undefined>(undefined),
			dry_ice: new FormControl<boolean | null | undefined>(undefined),
			freight_class: new FormControl<string | null | undefined>(undefined),
			non_machinable: new FormControl<boolean | null | undefined>(undefined),
			origin_type: new FormControl<Origin_type | null | undefined>(undefined),
			saturday_delivery: new FormControl<boolean | null | undefined>(undefined),
			shipper_release: new FormControl<boolean | null | undefined>(undefined),
			third_party_consignee: new FormControl<boolean | null | undefined>(undefined),
			use_ups_ground_freight_pricing: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The possible bill to party values */
	export enum Bill_to_party { recipient = 'recipient', third_party = 'third_party' }


	/** Defer payment until package is delivered, instead of when it is ordered. */
	export interface Collect_on_delivery {
		payment_amount?: Payment_amount;
		payment_type?: Collect_on_delivery_payment_type;
	}

	/** Defer payment until package is delivered, instead of when it is ordered. */
	export interface Collect_on_deliveryFormProperties {
		payment_type: FormControl<Collect_on_delivery_payment_type | null | undefined>,
	}
	export function CreateCollect_on_deliveryFormGroup() {
		return new FormGroup<Collect_on_deliveryFormProperties>({
			payment_type: new FormControl<Collect_on_delivery_payment_type | null | undefined>(undefined),
		});

	}

	export interface Payment_amount {

		/** Minimum: 0 */
		amount?: number | null;
		currency?: string;
	}
	export interface Payment_amountFormProperties {

		/** Minimum: 0 */
		amount: FormControl<number | null | undefined>,
		currency: FormControl<string | null | undefined>,
	}
	export function CreatePayment_amountFormGroup() {
		return new FormGroup<Payment_amountFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			currency: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Types of payment that are supported */
	export enum Collect_on_delivery_payment_type { any = 'any', cash = 'cash', cash_equivalent = 'cash_equivalent', none = 'none' }


	/** The weight of a package */
	export interface Weight {

		/** Required */
		unit: Weight_unit;

		/**
		 * The weight, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		value: number;
	}

	/** The weight of a package */
	export interface WeightFormProperties {

		/** Required */
		unit: FormControl<Weight_unit | null | undefined>,

		/**
		 * The weight, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreateWeightFormGroup() {
		return new FormGroup<WeightFormProperties>({
			unit: new FormControl<Weight_unit | null | undefined>(undefined, [Validators.required]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** The possible weight unit values */
	export enum Weight_unit { pound = 'pound', ounce = 'ounce', gram = 'gram', kilogram = 'kilogram' }

	export interface Advanced_shipment_optionsFedex_freight {
		booking_confirmation?: string | null;
		shipper_load_and_count?: string | null;
	}
	export interface Advanced_shipment_optionsFedex_freightFormProperties {
		booking_confirmation: FormControl<string | null | undefined>,
		shipper_load_and_count: FormControl<string | null | undefined>,
	}
	export function CreateAdvanced_shipment_optionsFedex_freightFormGroup() {
		return new FormGroup<Advanced_shipment_optionsFedex_freightFormProperties>({
			booking_confirmation: new FormControl<string | null | undefined>(undefined),
			shipper_load_and_count: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Indicates if the package will be picked up or dropped off by the carrier */
	export enum Origin_type { pickup = 'pickup', drop_off = 'drop_off' }


	/**
	 * Additional information some carriers may provide by which to identify a given label in their system. 
	 */
	export interface Alternative_identifier {

		/**
		 * The type of alternative_identifier that corresponds to the value.
		 * Min length: 1
		 */
		type?: string | null;

		/**
		 * The value of the alternative_identifier.
		 * Min length: 1
		 */
		value?: string | null;
	}

	/**
	 * Additional information some carriers may provide by which to identify a given label in their system. 
	 */
	export interface Alternative_identifierFormProperties {

		/**
		 * The type of alternative_identifier that corresponds to the value.
		 * Min length: 1
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * The value of the alternative_identifier.
		 * Min length: 1
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateAlternative_identifierFormGroup() {
		return new FormGroup<Alternative_identifierFormProperties>({
			type: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			value: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/**
	 * [Ancillary service endorsements](https://pe.usps.com/text/qsg300/Q507.htm) are used by mailers to request an addressee's new address and to provide the carrier with instructions on how to handle packages that are undeliverable as addressed.
	 * | Ancillary Service Endorsement  | Description
	 * |--------------------------------|-----------------------------------------------------
	 * | `none`                         | No ancillary service is requested. Depending on the carrier servive, the package may be forwarded, returned, or discarded.
	 * | `return_service_requested`     | The package is returned to the sender. If possible, notification of the new address is is included with the returned package.
	 * | `forwarding_service_requested` | Forward the package to the new address, if possible; otherwise, return it to the sender.
	 * | `address_service_requested`    | Forward the package to the new address, if possible; otherwise, return it to the sender. This is similar to `forwarding_service_requested`, but different restrictions and charges may apply.
	 * | `change_service_requested`     | The package is discarded. If possible, notification of the new address is sent to the sender.
	 * | `leave_if_no_response`         |
	 */
	export enum Ancillary_service_endorsement { none = 'none', return_service_requested = 'return_service_requested', forwarding_service_requested = 'forwarding_service_requested', address_service_requested = 'address_service_requested', change_service_requested = 'change_service_requested', leave_if_no_response = 'leave_if_no_response' }


	/**
	 * Batches are an advanced feature of ShipEngine designed for users who need to generate hundreds or
	 * thousands of labels at a time.
	 */
	export interface Batch {

		/**
		 * Link to batch errors endpoint
		 * Required
		 */
		batch_errors_url: Optional_link;

		/**
		 * A string that uniquely identifies the batch
		 * Required
		 */
		batch_id: string;

		/**
		 * Link to batch labels query
		 * Required
		 */
		batch_labels_url: Optional_link;

		/**
		 * Custom notes you can add for each created batch
		 * Required
		 */
		batch_notes: string;

		/**
		 * The batch number.
		 * Required
		 * Min length: 0
		 */
		batch_number: string;

		/**
		 * The batch shipments endpoint
		 * Required
		 */
		batch_shipments_url: Optional_link;

		/**
		 * The number of labels generated in the batch
		 * Required
		 * Minimum: 0
		 */
		completed: number;

		/**
		 * The total of errors, warnings, and completed properties
		 * Required
		 * Minimum: 0
		 */
		count: number;

		/**
		 * The date and time the batch was created in ShipEngine
		 * Required
		 */
		created_at: Date;

		/**
		 * The number of errors that occurred while generating the batch
		 * Required
		 * Minimum: 0
		 */
		errors: number;

		/**
		 * A string that uniquely identifies the external batch
		 * Required
		 * Min length: 0
		 */
		external_batch_id: string;

		/**
		 * The form download for any customs that are needed
		 * Required
		 */
		form_download: Optional_link;

		/**
		 * The number of forms for customs that are available for download
		 * Required
		 * Minimum: 0
		 */
		forms: number;

		/**
		 * The label download for the batch
		 * Required
		 */
		label_download: Label_download;

		/** Required */
		label_format: Label_format;

		/**
		 * label layout
		 * Required
		 */
		label_layout: Label_layout;

		/**
		 * The date and time the batch was processed in ShipEngine
		 * Required
		 */
		processed_at: Date;

		/** Required */
		status: Batch_status;

		/**
		 * The number of warnings that occurred while generating the batch
		 * Required
		 * Minimum: 0
		 */
		warnings: number;
	}

	/**
	 * Batches are an advanced feature of ShipEngine designed for users who need to generate hundreds or
	 * thousands of labels at a time.
	 */
	export interface BatchFormProperties {

		/**
		 * A string that uniquely identifies the batch
		 * Required
		 */
		batch_id: FormControl<string | null | undefined>,

		/**
		 * Custom notes you can add for each created batch
		 * Required
		 */
		batch_notes: FormControl<string | null | undefined>,

		/**
		 * The batch number.
		 * Required
		 * Min length: 0
		 */
		batch_number: FormControl<string | null | undefined>,

		/**
		 * The number of labels generated in the batch
		 * Required
		 * Minimum: 0
		 */
		completed: FormControl<number | null | undefined>,

		/**
		 * The total of errors, warnings, and completed properties
		 * Required
		 * Minimum: 0
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * The date and time the batch was created in ShipEngine
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The number of errors that occurred while generating the batch
		 * Required
		 * Minimum: 0
		 */
		errors: FormControl<number | null | undefined>,

		/**
		 * A string that uniquely identifies the external batch
		 * Required
		 * Min length: 0
		 */
		external_batch_id: FormControl<string | null | undefined>,

		/**
		 * The number of forms for customs that are available for download
		 * Required
		 * Minimum: 0
		 */
		forms: FormControl<number | null | undefined>,

		/** Required */
		label_format: FormControl<Label_format | null | undefined>,

		/**
		 * label layout
		 * Required
		 */
		label_layout: FormControl<Label_layout | null | undefined>,

		/**
		 * The date and time the batch was processed in ShipEngine
		 * Required
		 */
		processed_at: FormControl<Date | null | undefined>,

		/** Required */
		status: FormControl<Batch_status | null | undefined>,

		/**
		 * The number of warnings that occurred while generating the batch
		 * Required
		 * Minimum: 0
		 */
		warnings: FormControl<number | null | undefined>,
	}
	export function CreateBatchFormGroup() {
		return new FormGroup<BatchFormProperties>({
			batch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			batch_notes: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			batch_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0)]),
			completed: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			count: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			errors: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			external_batch_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0)]),
			forms: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			label_format: new FormControl<Label_format | null | undefined>(undefined, [Validators.required]),
			label_layout: new FormControl<Label_layout | null | undefined>(undefined, [Validators.required]),
			processed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Batch_status | null | undefined>(undefined, [Validators.required]),
			warnings: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** A link to a related resource, or an empty object if there is no resource to link to */
	export interface Optional_link {

		/** The URL of the linked resource, if any */
		href?: string;

		/**
		 * The type of resource, or the type of relationship to the parent resource
		 * Min length: 1
		 */
		type?: string | null;
	}

	/** A link to a related resource, or an empty object if there is no resource to link to */
	export interface Optional_linkFormProperties {

		/** The URL of the linked resource, if any */
		href: FormControl<string | null | undefined>,

		/**
		 * The type of resource, or the type of relationship to the parent resource
		 * Min length: 1
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateOptional_linkFormGroup() {
		return new FormGroup<Optional_linkFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/**
	 * Reference to the various downloadable file formats for the generated label
	 */
	export interface Label_download {

		/** The URL of the linked resource, if any */
		href?: string;

		/** The URL for the pdf generated label */
		pdf?: string;

		/** The URL for the png generated label */
		png?: string;

		/** The URL for the zpl generated label */
		zpl?: string;
	}

	/**
	 * Reference to the various downloadable file formats for the generated label
	 */
	export interface Label_downloadFormProperties {

		/** The URL of the linked resource, if any */
		href: FormControl<string | null | undefined>,

		/** The URL for the pdf generated label */
		pdf: FormControl<string | null | undefined>,

		/** The URL for the png generated label */
		png: FormControl<string | null | undefined>,

		/** The URL for the zpl generated label */
		zpl: FormControl<string | null | undefined>,
	}
	export function CreateLabel_downloadFormGroup() {
		return new FormGroup<Label_downloadFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
			pdf: new FormControl<string | null | undefined>(undefined),
			png: new FormControl<string | null | undefined>(undefined),
			zpl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
	 * |Label Format  | Supported Carriers
	 * |--------------|-----------------------------------
	 * |`pdf`         | All carriers
	 * |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
	 * |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
	 */
	export enum Label_format { pdf = 'pdf', png = 'png', zpl = 'zpl' }


	/**
	 * The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
	 */
	export enum Label_layout { '4x6' = '4x6', letter = 'letter' }


	/** The possible batch status values */
	export enum Batch_status { open = 'open', queued = 'queued', processing = 'processing', completed = 'completed', completed_with_errors = 'completed_with_errors', archived = 'archived', notifying = 'notifying', invalid = 'invalid' }


	/** A batch response error */
	export interface Batch_response_error {

		/**
		 * Error message associated with the shipment.
		 * Min length: 1
		 */
		error?: string | null;

		/** An external shipment id associated with the shipment */
		external_shipment_id?: string | null;

		/** A string that uniquely identifies the shipment */
		shipment_id?: string;
	}

	/** A batch response error */
	export interface Batch_response_errorFormProperties {

		/**
		 * Error message associated with the shipment.
		 * Min length: 1
		 */
		error: FormControl<string | null | undefined>,

		/** An external shipment id associated with the shipment */
		external_shipment_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the shipment */
		shipment_id: FormControl<string | null | undefined>,
	}
	export function CreateBatch_response_errorFormGroup() {
		return new FormGroup<Batch_response_errorFormProperties>({
			error: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			external_shipment_id: new FormControl<string | null | undefined>(undefined),
			shipment_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The possible batches sort by values */
	export enum Batches_sort_by { ship_date = 'ship_date', processed_at = 'processed_at', created_at = 'created_at' }


	/** A bulk rate */
	export interface Bulk_rate {

		/** Required */
		created_at: Date;

		/**
		 * An array of errors that were returned while retrieving the bulk rate
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A string that uniquely identifies the rate request
		 * Required
		 */
		rate_request_id: string;

		/**
		 * A string that uniquely identifies the shipment
		 * Required
		 */
		shipment_id: string;

		/** Required */
		status: Rate_response_status;
	}

	/** A bulk rate */
	export interface Bulk_rateFormProperties {

		/** Required */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A string that uniquely identifies the rate request
		 * Required
		 */
		rate_request_id: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the shipment
		 * Required
		 */
		shipment_id: FormControl<string | null | undefined>,

		/** Required */
		status: FormControl<Rate_response_status | null | undefined>,
	}
	export function CreateBulk_rateFormGroup() {
		return new FormGroup<Bulk_rateFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			rate_request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			shipment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Rate_response_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The possible rate response status values */
	export enum Rate_response_status { working = 'working', completed = 'completed', partial = 'partial', error = 'error' }


	/** A rate shipment request body */
	export interface Calculate_rates_request_body {
	}

	/** A rate shipment request body */
	export interface Calculate_rates_request_bodyFormProperties {
	}
	export function CreateCalculate_rates_request_bodyFormGroup() {
		return new FormGroup<Calculate_rates_request_bodyFormProperties>({
		});

	}


	/** A rate shipment response body */
	export interface Calculate_rates_response_body {
	}

	/** A rate shipment response body */
	export interface Calculate_rates_response_bodyFormProperties {
	}
	export function CreateCalculate_rates_response_bodyFormGroup() {
		return new FormGroup<Calculate_rates_response_bodyFormProperties>({
		});

	}


	/**
	 * A carrier object that represents a provider such as UPS, USPS, DHL, etc
	 * that has been tied to the current account.
	 */
	export interface Carrier {

		/**
		 * The account number that the carrier is connected to.
		 * Min length: 1
		 */
		account_number?: string | null;

		/**
		 * Current available balance
		 * Minimum: 0
		 */
		balance?: number | null;

		/** A string that uniquely identifies the carrier. */
		carrier_code?: string;

		/** A string that uniquely identifies the carrier. */
		carrier_id?: string;

		/**
		 * Screen readable name
		 * Min length: 1
		 */
		friendly_name?: string | null;

		/** Carrier supports multiple packages per shipment */
		has_multi_package_supporting_services?: boolean | null;

		/**
		 * Nickname given to the account when initially setting up the carrier.
		 * Min length: 1
		 */
		nickname?: string | null;

		/** A list of options that are available to that carrier */
		options?: Array<string>;

		/** A list of package types that are supported by the carrier */
		packages?: Array<string>;

		/** Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation */
		primary?: boolean | null;

		/** Indicates whether the carrier requires funding to use its services */
		requires_funded_amount?: boolean | null;

		/** A list of services that are offered by the carrier */
		services?: Array<string>;

		/** The carrier supports adding custom label messages to an order. */
		supports_label_messages?: boolean | null;
	}

	/**
	 * A carrier object that represents a provider such as UPS, USPS, DHL, etc
	 * that has been tied to the current account.
	 */
	export interface CarrierFormProperties {

		/**
		 * The account number that the carrier is connected to.
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Current available balance
		 * Minimum: 0
		 */
		balance: FormControl<number | null | undefined>,

		/** A string that uniquely identifies the carrier. */
		carrier_code: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the carrier. */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * Screen readable name
		 * Min length: 1
		 */
		friendly_name: FormControl<string | null | undefined>,

		/** Carrier supports multiple packages per shipment */
		has_multi_package_supporting_services: FormControl<boolean | null | undefined>,

		/**
		 * Nickname given to the account when initially setting up the carrier.
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/** Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation */
		primary: FormControl<boolean | null | undefined>,

		/** Indicates whether the carrier requires funding to use its services */
		requires_funded_amount: FormControl<boolean | null | undefined>,

		/** The carrier supports adding custom label messages to an order. */
		supports_label_messages: FormControl<boolean | null | undefined>,
	}
	export function CreateCarrierFormGroup() {
		return new FormGroup<CarrierFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			balance: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			carrier_code: new FormControl<string | null | undefined>(undefined),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			friendly_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			has_multi_package_supporting_services: new FormControl<boolean | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			primary: new FormControl<boolean | null | undefined>(undefined),
			requires_funded_amount: new FormControl<boolean | null | undefined>(undefined),
			supports_label_messages: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Advanced options that are specific to the carrier */
	export interface Carrier_advanced_option {

		/**
		 * Default value of option
		 * Min length: 1
		 */
		default_value?: string | null;

		/**
		 * Description of option
		 * Min length: 0
		 */
		description?: string | null;

		/**
		 * Name of advanced option
		 * Min length: 1
		 */
		name?: string | null;
	}

	/** Advanced options that are specific to the carrier */
	export interface Carrier_advanced_optionFormProperties {

		/**
		 * Default value of option
		 * Min length: 1
		 */
		default_value: FormControl<string | null | undefined>,

		/**
		 * Description of option
		 * Min length: 0
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Name of advanced option
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCarrier_advanced_optionFormGroup() {
		return new FormGroup<Carrier_advanced_optionFormProperties>({
			default_value: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/** The shipping carriers that are supported by ShipEngine */
	export enum Carrier_name { access_worldwide = 'access_worldwide', amazon_buy_shipping = 'amazon_buy_shipping', amazon_shipping_uk = 'amazon_shipping_uk', apc = 'apc', asendia = 'asendia', australia_post = 'australia_post', canada_post = 'canada_post', dhl_ecommerce = 'dhl_ecommerce', dhl_express = 'dhl_express', dhl_express_au = 'dhl_express_au', dhl_express_ca = 'dhl_express_ca', dhl_express_uk = 'dhl_express_uk', dpd = 'dpd', endicia = 'endicia', fedex = 'fedex', fedex_uk = 'fedex_uk', firstmile = 'firstmile', imex = 'imex', newgistics = 'newgistics', ontrac = 'ontrac', purolator_canada = 'purolator_canada', royal_mail = 'royal_mail', rr_donnelley = 'rr_donnelley', seko = 'seko', sendle = 'sendle', stamps_com = 'stamps_com', ups = 'ups' }


	/** The shipping carriers for which ShipEngine supports carrier settings */
	export enum Carrier_name_with_settings { dhl_express = 'dhl_express', fedex = 'fedex', newgistics = 'newgistics', ups = 'ups' }


	/** A rate shipments request body */
	export interface Compare_bulk_rates_request_body {
	}

	/** A rate shipments request body */
	export interface Compare_bulk_rates_request_bodyFormProperties {
	}
	export function CreateCompare_bulk_rates_request_bodyFormGroup() {
		return new FormGroup<Compare_bulk_rates_request_bodyFormProperties>({
		});

	}


	/** An Access Worldwide account information request body */
	export interface Connect_access_worldwide_request_body {

		/**
		 * The nickname associated with the carrier connection
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Access Worldwide Password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * Access Worldwide Username
		 * Required
		 * Min length: 1
		 */
		username: string;
	}

	/** An Access Worldwide account information request body */
	export interface Connect_access_worldwide_request_bodyFormProperties {

		/**
		 * The nickname associated with the carrier connection
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Access Worldwide Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * Access Worldwide Username
		 * Required
		 * Min length: 1
		 */
		username: FormControl<string | null | undefined>,
	}
	export function CreateConnect_access_worldwide_request_bodyFormGroup() {
		return new FormGroup<Connect_access_worldwide_request_bodyFormProperties>({
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An Amazon account information request body */
	export interface Connect_amazon_buy_shipping_request_body {

		/** Required */
		email: string;

		/**
		 * Required
		 * Min length: 1
		 */
		merchant_seller_id: string;

		/**
		 * Required
		 * Min length: 1
		 */
		mws_auth_token: string;

		/**
		 * Nickname to be associated with the account connection
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** An Amazon account information request body */
	export interface Connect_amazon_buy_shipping_request_bodyFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		merchant_seller_id: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		mws_auth_token: FormControl<string | null | undefined>,

		/**
		 * Nickname to be associated with the account connection
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_amazon_buy_shipping_request_bodyFormGroup() {
		return new FormGroup<Connect_amazon_buy_shipping_request_bodyFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_seller_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			mws_auth_token: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An Amazon Shipping UK account information request body */
	export interface Connect_amazon_shipping_uk {

		/**
		 * Amazon UK Shipping auth code.
		 * Required
		 * Min length: 1
		 */
		auth_code: string;

		/**
		 * The nickname associated with the carrier connection
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** An Amazon Shipping UK account information request body */
	export interface Connect_amazon_shipping_ukFormProperties {

		/**
		 * Amazon UK Shipping auth code.
		 * Required
		 * Min length: 1
		 */
		auth_code: FormControl<string | null | undefined>,

		/**
		 * The nickname associated with the carrier connection
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_amazon_shipping_ukFormGroup() {
		return new FormGroup<Connect_amazon_shipping_ukFormProperties>({
			auth_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An APC account information request body */
	export interface Connect_apc_request_body {

		/**
		 * The nickname for the APC account
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * The password for the APC account
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * The username for the APC account
		 * Required
		 * Min length: 1
		 */
		username: string;
	}

	/** An APC account information request body */
	export interface Connect_apc_request_bodyFormProperties {

		/**
		 * The nickname for the APC account
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * The password for the APC account
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * The username for the APC account
		 * Required
		 * Min length: 1
		 */
		username: FormControl<string | null | undefined>,
	}
	export function CreateConnect_apc_request_bodyFormGroup() {
		return new FormGroup<Connect_apc_request_bodyFormProperties>({
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An Asendia account information request body */
	export interface Connect_asendia_request_body {

		/**
		 * Asendia account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * FTP password
		 * Required
		 * Min length: 1
		 */
		ftp_password: string;

		/**
		 * FTP username
		 * Required
		 * Min length: 1
		 */
		ftp_username: string;

		/**
		 * The nickname of the Asendia account
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** An Asendia account information request body */
	export interface Connect_asendia_request_bodyFormProperties {

		/**
		 * Asendia account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * FTP password
		 * Required
		 * Min length: 1
		 */
		ftp_password: FormControl<string | null | undefined>,

		/**
		 * FTP username
		 * Required
		 * Min length: 1
		 */
		ftp_username: FormControl<string | null | undefined>,

		/**
		 * The nickname of the Asendia account
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_asendia_request_bodyFormGroup() {
		return new FormGroup<Connect_asendia_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			ftp_password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			ftp_username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An Australia Post account information request body */
	export interface Connect_australia_post_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * API key
		 * Required
		 * Min length: 1
		 */
		api_key: string;

		/**
		 * API secret
		 * Required
		 * Min length: 1
		 */
		api_secret: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** An Australia Post account information request body */
	export interface Connect_australia_post_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * API key
		 * Required
		 * Min length: 1
		 */
		api_key: FormControl<string | null | undefined>,

		/**
		 * API secret
		 * Required
		 * Min length: 1
		 */
		api_secret: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_australia_post_request_bodyFormGroup() {
		return new FormGroup<Connect_australia_post_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			api_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			api_secret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A Canada Post account information request body */
	export interface Connect_canada_post_request_body {

		/**
		 * Canada Post Account Number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Canada Post Account API Key
		 * Required
		 * Min length: 1
		 */
		api_key: string;

		/**
		 * Canada Post Account API Secret
		 * Required
		 * Min length: 1
		 */
		api_secret: string;

		/**
		 * Canada Post Account Contract ID
		 * Required
		 * Min length: 1
		 */
		contract_id: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** A Canada Post account information request body */
	export interface Connect_canada_post_request_bodyFormProperties {

		/**
		 * Canada Post Account Number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Canada Post Account API Key
		 * Required
		 * Min length: 1
		 */
		api_key: FormControl<string | null | undefined>,

		/**
		 * Canada Post Account API Secret
		 * Required
		 * Min length: 1
		 */
		api_secret: FormControl<string | null | undefined>,

		/**
		 * Canada Post Account Contract ID
		 * Required
		 * Min length: 1
		 */
		contract_id: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_canada_post_request_bodyFormGroup() {
		return new FormGroup<Connect_canada_post_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			api_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			api_secret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			contract_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Connect_carrier_request_body {
	}
	export interface Connect_carrier_request_bodyFormProperties {
	}
	export function CreateConnect_carrier_request_bodyFormGroup() {
		return new FormGroup<Connect_carrier_request_bodyFormProperties>({
		});

	}


	/** A connect account response body */
	export interface Connect_carrier_response_body {

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: string;
	}

	/** A connect account response body */
	export interface Connect_carrier_response_bodyFormProperties {

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: FormControl<string | null | undefined>,
	}
	export function CreateConnect_carrier_response_bodyFormGroup() {
		return new FormGroup<Connect_carrier_response_bodyFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A DHL Ecommerce account information request body */
	export interface Connect_dhl_ecommerce_request_body {

		/**
		 * Account number
		 * Min length: 1
		 */
		account_number?: string | null;
		ancillary_endorsement?: Ancillary_service_endorsement;

		/**
		 * The DHL E-Commerce API key. This field is optional, but if not set you will not be able to get rates for this account.
		 * Min length: 1
		 */
		api_key?: string | null;

		/**
		 * The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account.
		 * Min length: 1
		 */
		api_secret?: string | null;

		/**
		 * The client id
		 * Required
		 * Min length: 1
		 */
		client_id: string;

		/**
		 * The distribution center
		 * Required
		 * Min length: 1
		 */
		distribution_center: string;

		/**
		 * FTP password
		 * Min length: 1
		 */
		ftp_password?: string | null;

		/**
		 * FTP username
		 * Min length: 1
		 */
		ftp_username?: string | null;

		/**
		 * A nickname to help you identify this account
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * The account password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * The pickup number
		 * Required
		 * Min length: 1
		 */
		pickup_number: string;
		registration_id?: string | null;
		software_name?: string | null;

		/** Sold To field */
		sold_to?: string | null;

		/**
		 * The account username
		 * Required
		 * Min length: 1
		 */
		username: string;
	}

	/** A DHL Ecommerce account information request body */
	export interface Connect_dhl_ecommerce_request_bodyFormProperties {

		/**
		 * Account number
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,
		ancillary_endorsement: FormControl<Ancillary_service_endorsement | null | undefined>,

		/**
		 * The DHL E-Commerce API key. This field is optional, but if not set you will not be able to get rates for this account.
		 * Min length: 1
		 */
		api_key: FormControl<string | null | undefined>,

		/**
		 * The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account.
		 * Min length: 1
		 */
		api_secret: FormControl<string | null | undefined>,

		/**
		 * The client id
		 * Required
		 * Min length: 1
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The distribution center
		 * Required
		 * Min length: 1
		 */
		distribution_center: FormControl<string | null | undefined>,

		/**
		 * FTP password
		 * Min length: 1
		 */
		ftp_password: FormControl<string | null | undefined>,

		/**
		 * FTP username
		 * Min length: 1
		 */
		ftp_username: FormControl<string | null | undefined>,

		/**
		 * A nickname to help you identify this account
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * The account password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * The pickup number
		 * Required
		 * Min length: 1
		 */
		pickup_number: FormControl<string | null | undefined>,
		registration_id: FormControl<string | null | undefined>,
		software_name: FormControl<string | null | undefined>,

		/** Sold To field */
		sold_to: FormControl<string | null | undefined>,

		/**
		 * The account username
		 * Required
		 * Min length: 1
		 */
		username: FormControl<string | null | undefined>,
	}
	export function CreateConnect_dhl_ecommerce_request_bodyFormGroup() {
		return new FormGroup<Connect_dhl_ecommerce_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			ancillary_endorsement: new FormControl<Ancillary_service_endorsement | null | undefined>(undefined),
			api_key: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			api_secret: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			distribution_center: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			ftp_password: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			ftp_username: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			pickup_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			registration_id: new FormControl<string | null | undefined>(undefined),
			software_name: new FormControl<string | null | undefined>(undefined),
			sold_to: new FormControl<string | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A DHL Express AU account information request body */
	export interface Connect_dhl_express_au_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** A DHL Express AU account information request body */
	export interface Connect_dhl_express_au_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_dhl_express_au_request_bodyFormGroup() {
		return new FormGroup<Connect_dhl_express_au_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A DHL Express CA account information request body */
	export interface Connect_dhl_express_ca_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** A DHL Express CA account information request body */
	export interface Connect_dhl_express_ca_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_dhl_express_ca_request_bodyFormGroup() {
		return new FormGroup<Connect_dhl_express_ca_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A DHL express account information request body */
	export interface Connect_dhl_express_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;
		country_code?: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Required if site id is provided
		 * Min length: 1
		 */
		password?: string | null;

		/**
		 * Required if password is provided
		 * Min length: 1
		 */
		site_id?: string | null;
	}

	/** A DHL express account information request body */
	export interface Connect_dhl_express_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,
		country_code: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Required if site id is provided
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * Required if password is provided
		 * Min length: 1
		 */
		site_id: FormControl<string | null | undefined>,
	}
	export function CreateConnect_dhl_express_request_bodyFormGroup() {
		return new FormGroup<Connect_dhl_express_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			country_code: new FormControl<string | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			site_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/** A DHL Express UK account information request body */
	export interface Connect_dhl_express_uk_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * A string that uniquely identifies the site
		 * Required
		 */
		site_id: string;
	}

	/** A DHL Express UK account information request body */
	export interface Connect_dhl_express_uk_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the site
		 * Required
		 */
		site_id: FormControl<string | null | undefined>,
	}
	export function CreateConnect_dhl_express_uk_request_bodyFormGroup() {
		return new FormGroup<Connect_dhl_express_uk_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			site_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A DPD account information request body */
	export interface Connect_dpd_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;
	}

	/** A DPD account information request body */
	export interface Connect_dpd_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,
	}
	export function CreateConnect_dpd_request_bodyFormGroup() {
		return new FormGroup<Connect_dpd_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An Endicia account information request body */
	export interface Connect_endicia_request_body {

		/**
		 * Account
		 * Required
		 * Min length: 1
		 */
		account: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Passphrase
		 * Required
		 * Min length: 1
		 */
		passphrase: string;
	}

	/** An Endicia account information request body */
	export interface Connect_endicia_request_bodyFormProperties {

		/**
		 * Account
		 * Required
		 * Min length: 1
		 */
		account: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Passphrase
		 * Required
		 * Min length: 1
		 */
		passphrase: FormControl<string | null | undefined>,
	}
	export function CreateConnect_endicia_request_bodyFormGroup() {
		return new FormGroup<Connect_endicia_request_bodyFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			passphrase: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A Fedex account information request body */
	export interface Connect_fedex_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Address
		 * Required
		 * Min length: 1
		 */
		address1: string;

		/**
		 * Address
		 * Min length: 1
		 */
		address2?: string | null;

		/**
		 * Boolean signaling agreement to the Fedex End User License Agreement
		 * Required
		 */
		agree_to_eula: boolean;

		/**
		 * The city
		 * Required
		 * Min length: 1
		 */
		city: string;

		/**
		 * The company
		 * Min length: 1
		 */
		company?: string | null;

		/**
		 * Country code
		 * Required
		 * Min length: 1
		 */
		country_code: string;

		/**
		 * The email address
		 * Required
		 */
		email: string;

		/**
		 * First name
		 * Required
		 * Min length: 1
		 */
		first_name: string;

		/**
		 * Last name
		 * Required
		 * Min length: 1
		 */
		last_name: string;

		/**
		 * Meter number
		 * Min length: 1
		 */
		meter_number?: string | null;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Phone number
		 * Required
		 * Min length: 1
		 */
		phone: string;

		/**
		 * Postal Code
		 * Required
		 * Min length: 1
		 */
		postal_code: string;

		/**
		 * State
		 * Required
		 * Min length: 1
		 */
		state: string;
	}

	/** A Fedex account information request body */
	export interface Connect_fedex_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Address
		 * Required
		 * Min length: 1
		 */
		address1: FormControl<string | null | undefined>,

		/**
		 * Address
		 * Min length: 1
		 */
		address2: FormControl<string | null | undefined>,

		/**
		 * Boolean signaling agreement to the Fedex End User License Agreement
		 * Required
		 */
		agree_to_eula: FormControl<boolean | null | undefined>,

		/**
		 * The city
		 * Required
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The company
		 * Min length: 1
		 */
		company: FormControl<string | null | undefined>,

		/**
		 * Country code
		 * Required
		 * Min length: 1
		 */
		country_code: FormControl<string | null | undefined>,

		/**
		 * The email address
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * First name
		 * Required
		 * Min length: 1
		 */
		first_name: FormControl<string | null | undefined>,

		/**
		 * Last name
		 * Required
		 * Min length: 1
		 */
		last_name: FormControl<string | null | undefined>,

		/**
		 * Meter number
		 * Min length: 1
		 */
		meter_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Phone number
		 * Required
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,

		/**
		 * Postal Code
		 * Required
		 * Min length: 1
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * State
		 * Required
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateConnect_fedex_request_bodyFormGroup() {
		return new FormGroup<Connect_fedex_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			address1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			address2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			agree_to_eula: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			country_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			first_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			last_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			meter_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A Fedex UK account information request body */
	export interface Connect_fedex_uk_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Address
		 * Required
		 * Min length: 1
		 */
		address1: string;

		/**
		 * Address
		 * Min length: 1
		 */
		address2?: string | null;

		/**
		 * Boolean signaling agreement to the Fedex End User License Agreement
		 * Required
		 */
		agree_to_eula: boolean;

		/**
		 * The city
		 * Required
		 * Min length: 1
		 */
		city: string;

		/**
		 * The company
		 * Min length: 1
		 */
		company?: string | null;

		/**
		 * Country code
		 * Required
		 * Min length: 1
		 */
		country_code: string;

		/**
		 * The email address
		 * Required
		 */
		email: string;

		/**
		 * First name
		 * Required
		 * Min length: 1
		 */
		first_name: string;

		/**
		 * Last name
		 * Required
		 * Min length: 1
		 */
		last_name: string;

		/**
		 * Meter number
		 * Min length: 1
		 */
		meter_number?: string | null;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Phone number
		 * Required
		 * Min length: 1
		 */
		phone: string;

		/**
		 * Postal Code
		 * Required
		 * Min length: 1
		 */
		postal_code: string;

		/**
		 * State
		 * Required
		 * Min length: 1
		 */
		state: string;
	}

	/** A Fedex UK account information request body */
	export interface Connect_fedex_uk_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Address
		 * Required
		 * Min length: 1
		 */
		address1: FormControl<string | null | undefined>,

		/**
		 * Address
		 * Min length: 1
		 */
		address2: FormControl<string | null | undefined>,

		/**
		 * Boolean signaling agreement to the Fedex End User License Agreement
		 * Required
		 */
		agree_to_eula: FormControl<boolean | null | undefined>,

		/**
		 * The city
		 * Required
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The company
		 * Min length: 1
		 */
		company: FormControl<string | null | undefined>,

		/**
		 * Country code
		 * Required
		 * Min length: 1
		 */
		country_code: FormControl<string | null | undefined>,

		/**
		 * The email address
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * First name
		 * Required
		 * Min length: 1
		 */
		first_name: FormControl<string | null | undefined>,

		/**
		 * Last name
		 * Required
		 * Min length: 1
		 */
		last_name: FormControl<string | null | undefined>,

		/**
		 * Meter number
		 * Min length: 1
		 */
		meter_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Phone number
		 * Required
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,

		/**
		 * Postal Code
		 * Required
		 * Min length: 1
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * State
		 * Required
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateConnect_fedex_uk_request_bodyFormGroup() {
		return new FormGroup<Connect_fedex_uk_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			address1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			address2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			agree_to_eula: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			country_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			first_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			last_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			meter_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A First Mile account information request body */
	export interface Connect_firstmile_request_body {

		/**
		 * A string that uniquely identifies the mailer
		 * Required
		 */
		mailer_id: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * Profile name
		 * Min length: 1
		 */
		profile_name?: string | null;
	}

	/** A First Mile account information request body */
	export interface Connect_firstmile_request_bodyFormProperties {

		/**
		 * A string that uniquely identifies the mailer
		 * Required
		 */
		mailer_id: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * Profile name
		 * Min length: 1
		 */
		profile_name: FormControl<string | null | undefined>,
	}
	export function CreateConnect_firstmile_request_bodyFormGroup() {
		return new FormGroup<Connect_firstmile_request_bodyFormProperties>({
			mailer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			profile_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/** An Imex account information request body */
	export interface Connect_imex_request_body {

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * Username
		 * Required
		 * Min length: 1
		 */
		username: string;
	}

	/** An Imex account information request body */
	export interface Connect_imex_request_bodyFormProperties {

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * Username
		 * Required
		 * Min length: 1
		 */
		username: FormControl<string | null | undefined>,
	}
	export function CreateConnect_imex_request_bodyFormGroup() {
		return new FormGroup<Connect_imex_request_bodyFormProperties>({
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A create shipsurance connection request body */
	export interface Connect_insurer_request_body {

		/** Required */
		email: string;

		/**
		 * Required
		 * Min length: 1
		 */
		policy_id: string;
	}

	/** A create shipsurance connection request body */
	export interface Connect_insurer_request_bodyFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		policy_id: FormControl<string | null | undefined>,
	}
	export function CreateConnect_insurer_request_bodyFormGroup() {
		return new FormGroup<Connect_insurer_request_bodyFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			policy_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface Connect_insurer_response_body {
	}
	export interface Connect_insurer_response_bodyFormProperties {
	}
	export function CreateConnect_insurer_response_bodyFormGroup() {
		return new FormGroup<Connect_insurer_response_bodyFormProperties>({
		});

	}


	/** A Newgistics account information request body */
	export interface Connect_newgistics_request_body {

		/**
		 * Induction site
		 * Required
		 * Min length: 1
		 */
		induction_site: string;

		/**
		 * Mailer id
		 * Minimum: 0
		 */
		mailer_id?: number | null;

		/**
		 * Merchant id
		 * Minimum: 0
		 */
		merchant_id?: number | null;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** A Newgistics account information request body */
	export interface Connect_newgistics_request_bodyFormProperties {

		/**
		 * Induction site
		 * Required
		 * Min length: 1
		 */
		induction_site: FormControl<string | null | undefined>,

		/**
		 * Mailer id
		 * Minimum: 0
		 */
		mailer_id: FormControl<number | null | undefined>,

		/**
		 * Merchant id
		 * Minimum: 0
		 */
		merchant_id: FormControl<number | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_newgistics_request_bodyFormGroup() {
		return new FormGroup<Connect_newgistics_request_bodyFormProperties>({
			induction_site: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			mailer_id: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			merchant_id: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** An Ontrac account information request body */
	export interface Connect_ontrac_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;
	}

	/** An Ontrac account information request body */
	export interface Connect_ontrac_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,
	}
	export function CreateConnect_ontrac_request_bodyFormGroup() {
		return new FormGroup<Connect_ontrac_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A Purolator account information request body */
	export interface Connect_purolator_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Activation key
		 * Required
		 * Min length: 1
		 */
		activation_key: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** A Purolator account information request body */
	export interface Connect_purolator_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Activation key
		 * Required
		 * Min length: 1
		 */
		activation_key: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_purolator_request_bodyFormGroup() {
		return new FormGroup<Connect_purolator_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			activation_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A Royal Mail account information request body */
	export interface Connect_royal_mail_request_body {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * City
		 * Required
		 * Min length: 1
		 */
		city: string;

		/**
		 * Company name
		 * Min length: 1
		 */
		company_name?: string | null;

		/**
		 * Contact name
		 * Required
		 * Min length: 1
		 */
		contact_name: string;

		/** The email address */
		email?: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/** The oba email address */
		oba_email?: string;

		/**
		 * Phone
		 * Min length: 1
		 */
		phone?: string | null;

		/**
		 * Postal code
		 * Required
		 * Min length: 1
		 */
		postal_code: string;

		/**
		 * Street line1
		 * Min length: 1
		 */
		street_line1?: string | null;

		/**
		 * Street line2
		 * Min length: 1
		 */
		street_line2?: string | null;

		/**
		 * Street line3
		 * Min length: 1
		 */
		street_line3?: string | null;
	}

	/** A Royal Mail account information request body */
	export interface Connect_royal_mail_request_bodyFormProperties {

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * City
		 * Required
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * Company name
		 * Min length: 1
		 */
		company_name: FormControl<string | null | undefined>,

		/**
		 * Contact name
		 * Required
		 * Min length: 1
		 */
		contact_name: FormControl<string | null | undefined>,

		/** The email address */
		email: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/** The oba email address */
		oba_email: FormControl<string | null | undefined>,

		/**
		 * Phone
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,

		/**
		 * Postal code
		 * Required
		 * Min length: 1
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * Street line1
		 * Min length: 1
		 */
		street_line1: FormControl<string | null | undefined>,

		/**
		 * Street line2
		 * Min length: 1
		 */
		street_line2: FormControl<string | null | undefined>,

		/**
		 * Street line3
		 * Min length: 1
		 */
		street_line3: FormControl<string | null | undefined>,
	}
	export function CreateConnect_royal_mail_request_bodyFormGroup() {
		return new FormGroup<Connect_royal_mail_request_bodyFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			contact_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			email: new FormControl<string | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			oba_email: new FormControl<string | null | undefined>(undefined),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			street_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			street_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			street_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/** A RR Donnelley account information request body */
	export interface Connect_rr_donnelley_request_body {

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * Username
		 * Required
		 * Min length: 1
		 */
		username: string;
	}

	/** A RR Donnelley account information request body */
	export interface Connect_rr_donnelley_request_bodyFormProperties {

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * Username
		 * Required
		 * Min length: 1
		 */
		username: FormControl<string | null | undefined>,
	}
	export function CreateConnect_rr_donnelley_request_bodyFormGroup() {
		return new FormGroup<Connect_rr_donnelley_request_bodyFormProperties>({
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A SEKO account information request body */
	export interface Connect_seko_request_body {

		/**
		 * Seko Account Access Key
		 * Required
		 * Min length: 1
		 */
		access_key: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;
	}

	/** A SEKO account information request body */
	export interface Connect_seko_request_bodyFormProperties {

		/**
		 * Seko Account Access Key
		 * Required
		 * Min length: 1
		 */
		access_key: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
	}
	export function CreateConnect_seko_request_bodyFormGroup() {
		return new FormGroup<Connect_seko_request_bodyFormProperties>({
			access_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A Sendle account information request body */
	export interface Connect_sendle_request_body {

		/**
		 * API key
		 * Required
		 * Min length: 1
		 */
		api_key: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * A string that uniquely identifies the sendle
		 * Required
		 */
		sendle_id: string;
	}

	/** A Sendle account information request body */
	export interface Connect_sendle_request_bodyFormProperties {

		/**
		 * API key
		 * Required
		 * Min length: 1
		 */
		api_key: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the sendle
		 * Required
		 */
		sendle_id: FormControl<string | null | undefined>,
	}
	export function CreateConnect_sendle_request_bodyFormGroup() {
		return new FormGroup<Connect_sendle_request_bodyFormProperties>({
			api_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			sendle_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A Stamps account information request body */
	export interface Connect_stamps_request_body {

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: string;

		/**
		 * Username
		 * Required
		 * Min length: 1
		 */
		username: string;
	}

	/** A Stamps account information request body */
	export interface Connect_stamps_request_bodyFormProperties {

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Password
		 * Required
		 * Min length: 1
		 */
		password: FormControl<string | null | undefined>,

		/**
		 * Username
		 * Required
		 * Min length: 1
		 */
		username: FormControl<string | null | undefined>,
	}
	export function CreateConnect_stamps_request_bodyFormGroup() {
		return new FormGroup<Connect_stamps_request_bodyFormProperties>({
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			password: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			username: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A UPS account information request body */
	export interface Connect_ups_request_body {

		/**
		 * Account country code
		 * Required
		 * Min length: 1
		 */
		account_country_code: string;

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Account postal code
		 * Required
		 * Min length: 1
		 */
		account_postal_code: string;

		/**
		 * Address Line 1
		 * Required
		 * Min length: 1
		 */
		address1: string;

		/**
		 * Address Line 2
		 * Min length: 1
		 */
		address2?: string | null;

		/**
		 * The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)
		 * Required
		 */
		agree_to_technology_agreement: boolean;

		/**
		 * City
		 * Required
		 * Min length: 1
		 */
		city: string;

		/**
		 * Company
		 * Required
		 * Min length: 1
		 */
		company: string;

		/**
		 * Country code
		 * Required
		 * Min length: 1
		 */
		country_code: string;

		/**
		 * The email address
		 * Required
		 */
		email: string;

		/**
		 * First name
		 * Required
		 * Min length: 1
		 */
		first_name: string;

		/** The UPS invoice */
		invoice?: Ups_invoice;

		/** The invoice amount */
		invoice_amount?: number | null;

		/** The invoice currency code */
		invoice_currency_code?: string | null;

		/**
		 * Last name
		 * Required
		 * Min length: 1
		 */
		last_name: string;

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: string;

		/**
		 * Phone
		 * Required
		 * Min length: 1
		 */
		phone: string;

		/**
		 * Postal code
		 * Required
		 * Min length: 1
		 */
		postal_code: string;

		/**
		 * State
		 * Required
		 * Min length: 1
		 */
		state: string;

		/**
		 * Title
		 * Min length: 1
		 */
		title?: string | null;
	}

	/** A UPS account information request body */
	export interface Connect_ups_request_bodyFormProperties {

		/**
		 * Account country code
		 * Required
		 * Min length: 1
		 */
		account_country_code: FormControl<string | null | undefined>,

		/**
		 * Account number
		 * Required
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Account postal code
		 * Required
		 * Min length: 1
		 */
		account_postal_code: FormControl<string | null | undefined>,

		/**
		 * Address Line 1
		 * Required
		 * Min length: 1
		 */
		address1: FormControl<string | null | undefined>,

		/**
		 * Address Line 2
		 * Min length: 1
		 */
		address2: FormControl<string | null | undefined>,

		/**
		 * The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)
		 * Required
		 */
		agree_to_technology_agreement: FormControl<boolean | null | undefined>,

		/**
		 * City
		 * Required
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * Company
		 * Required
		 * Min length: 1
		 */
		company: FormControl<string | null | undefined>,

		/**
		 * Country code
		 * Required
		 * Min length: 1
		 */
		country_code: FormControl<string | null | undefined>,

		/**
		 * The email address
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * First name
		 * Required
		 * Min length: 1
		 */
		first_name: FormControl<string | null | undefined>,

		/** The invoice amount */
		invoice_amount: FormControl<number | null | undefined>,

		/** The invoice currency code */
		invoice_currency_code: FormControl<string | null | undefined>,

		/**
		 * Last name
		 * Required
		 * Min length: 1
		 */
		last_name: FormControl<string | null | undefined>,

		/**
		 * Nickname
		 * Required
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/**
		 * Phone
		 * Required
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,

		/**
		 * Postal code
		 * Required
		 * Min length: 1
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * State
		 * Required
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * Title
		 * Min length: 1
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateConnect_ups_request_bodyFormGroup() {
		return new FormGroup<Connect_ups_request_bodyFormProperties>({
			account_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			account_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			address1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			address2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			agree_to_technology_agreement: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			company: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			country_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			first_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			invoice_amount: new FormControl<number | null | undefined>(undefined),
			invoice_currency_code: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/** UPS invoice */
	export interface Ups_invoice {

		/** A string that uniquely identifies the control */
		control_id?: string;

		/** Minimum: 0 */
		invoice_amount?: number | null;
		invoice_currency_code?: string | null;

		/**
		 * invoice date
		 * Min length: 1
		 */
		invoice_date?: Date | null;

		/**
		 * invoice number
		 * Min length: 1
		 */
		invoice_number?: string | null;
	}

	/** UPS invoice */
	export interface Ups_invoiceFormProperties {

		/** A string that uniquely identifies the control */
		control_id: FormControl<string | null | undefined>,

		/** Minimum: 0 */
		invoice_amount: FormControl<number | null | undefined>,
		invoice_currency_code: FormControl<string | null | undefined>,

		/**
		 * invoice date
		 * Min length: 1
		 */
		invoice_date: FormControl<Date | null | undefined>,

		/**
		 * invoice number
		 * Min length: 1
		 */
		invoice_number: FormControl<string | null | undefined>,
	}
	export function CreateUps_invoiceFormGroup() {
		return new FormGroup<Ups_invoiceFormProperties>({
			control_id: new FormControl<string | null | undefined>(undefined),
			invoice_amount: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			invoice_currency_code: new FormControl<string | null | undefined>(undefined),
			invoice_date: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			invoice_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}

	export interface Contact_details {

		/** Required */
		email: string;

		/**
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * Phone number associated
		 * Required
		 * Min length: 7
		 */
		phone: string;
	}
	export interface Contact_detailsFormProperties {

		/** Required */
		email: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Phone number associated
		 * Required
		 * Min length: 7
		 */
		phone: FormControl<string | null | undefined>,
	}
	export function CreateContact_detailsFormGroup() {
		return new FormGroup<Contact_detailsFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(7)]),
		});

	}


	/** A ShipEngine account settings images request body */
	export interface Create_account_settings_image_request_body {
	}

	/** A ShipEngine account settings images request body */
	export interface Create_account_settings_image_request_bodyFormProperties {
	}
	export function CreateCreate_account_settings_image_request_bodyFormGroup() {
		return new FormGroup<Create_account_settings_image_request_bodyFormProperties>({
		});

	}


	/** A create and validate shipment resource */
	export interface Create_and_validate_shipment {
	}

	/** A create and validate shipment resource */
	export interface Create_and_validate_shipmentFormProperties {
	}
	export function CreateCreate_and_validate_shipmentFormGroup() {
		return new FormGroup<Create_and_validate_shipmentFormProperties>({
		});

	}


	/** A create batch request body */
	export interface Create_batch_request_body {

		/**
		 * Add custom messages for a particular batch
		 * Min length: 1
		 */
		batch_notes?: string | null;

		/** A string that uniquely identifies the external batch */
		external_batch_id?: string;

		/** Array of rate IDs used in the batch */
		rate_ids?: Array<string>;

		/** Array of shipment IDs used in the batch */
		shipment_ids?: Array<string>;
	}

	/** A create batch request body */
	export interface Create_batch_request_bodyFormProperties {

		/**
		 * Add custom messages for a particular batch
		 * Min length: 1
		 */
		batch_notes: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the external batch */
		external_batch_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_batch_request_bodyFormGroup() {
		return new FormGroup<Create_batch_request_bodyFormProperties>({
			batch_notes: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			external_batch_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A create batch response body */
	export interface Create_batch_response_body {
	}

	/** A create batch response body */
	export interface Create_batch_response_bodyFormProperties {
	}
	export function CreateCreate_batch_response_bodyFormGroup() {
		return new FormGroup<Create_batch_response_bodyFormProperties>({
		});

	}


	/** A purchase label without shipment request body */
	export interface Create_label_from_rate_request_body {
	}

	/** A purchase label without shipment request body */
	export interface Create_label_from_rate_request_bodyFormProperties {
	}
	export function CreateCreate_label_from_rate_request_bodyFormGroup() {
		return new FormGroup<Create_label_from_rate_request_bodyFormProperties>({
		});

	}


	/** A create label from rate response body */
	export interface Create_label_from_rate_response_body {
	}

	/** A create label from rate response body */
	export interface Create_label_from_rate_response_bodyFormProperties {
	}
	export function CreateCreate_label_from_rate_response_bodyFormGroup() {
		return new FormGroup<Create_label_from_rate_response_bodyFormProperties>({
		});

	}


	/** A purchase label without shipment request body */
	export interface Create_label_from_shipment_request_body {

		/** The display format that the label should be shown in. */
		display_scheme?: Display_scheme;
		label_download_type?: Label_download_type;
		label_format?: Label_format;
		label_layout?: Label_layout;
		validate_address?: Validate_address;
	}

	/** A purchase label without shipment request body */
	export interface Create_label_from_shipment_request_bodyFormProperties {

		/** The display format that the label should be shown in. */
		display_scheme: FormControl<Display_scheme | null | undefined>,
		label_download_type: FormControl<Label_download_type | null | undefined>,
		label_format: FormControl<Label_format | null | undefined>,
		label_layout: FormControl<Label_layout | null | undefined>,
		validate_address: FormControl<Validate_address | null | undefined>,
	}
	export function CreateCreate_label_from_shipment_request_bodyFormGroup() {
		return new FormGroup<Create_label_from_shipment_request_bodyFormProperties>({
			display_scheme: new FormControl<Display_scheme | null | undefined>(undefined),
			label_download_type: new FormControl<Label_download_type | null | undefined>(undefined),
			label_format: new FormControl<Label_format | null | undefined>(undefined),
			label_layout: new FormControl<Label_layout | null | undefined>(undefined),
			validate_address: new FormControl<Validate_address | null | undefined>(undefined),
		});

	}


	/** The display format that the label should be shown in. */
	export enum Display_scheme { label = 'label', qr_code = 'qr_code', label_and_qr_code = 'label_and_qr_code' }


	/**
	 * There are two different ways to [download a label](https://www.shipengine.com/docs/labels/downloading/):
	 * |Label Download Type | Description
	 * |--------------------|------------------------------
	 * |`url`               |You will receive a URL, which you can use to download the label in a separate request. The URL will remain valid for 90 days.<br><br>This is the default if `label_download_type` is unspecified.
	 * |`inline`            |You will receive the Base64-encoded label as part of the response. No need for a second request to download the label.
	 */
	export enum Label_download_type { url = 'url', inline = 'inline' }


	/** The possible validate address values */
	export enum Validate_address { no_validation = 'no_validation', validate_only = 'validate_only', validate_and_clean = 'validate_and_clean' }


	/** A create label from shipment response body */
	export interface Create_label_from_shipment_response_body {
	}

	/** A create label from shipment response body */
	export interface Create_label_from_shipment_response_bodyFormProperties {
	}
	export function CreateCreate_label_from_shipment_response_bodyFormGroup() {
		return new FormGroup<Create_label_from_shipment_response_bodyFormProperties>({
		});

	}


	/** A purchase label request body */
	export interface Create_label_request_body {

		/** A unique identifier for a carrier drop off point where a merchant plans to deliver packages. This will take precedence over a shipment's ship from address. */
		ship_from_service_point_id?: string | null;

		/** A unique identifier for a carrier service point where the shipment will be delivered by the carrier. This will take precedence over a shipment's ship to address. */
		ship_to_service_point_id?: string | null;
	}

	/** A purchase label request body */
	export interface Create_label_request_bodyFormProperties {

		/** A unique identifier for a carrier drop off point where a merchant plans to deliver packages. This will take precedence over a shipment's ship from address. */
		ship_from_service_point_id: FormControl<string | null | undefined>,

		/** A unique identifier for a carrier service point where the shipment will be delivered by the carrier. This will take precedence over a shipment's ship to address. */
		ship_to_service_point_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_label_request_bodyFormGroup() {
		return new FormGroup<Create_label_request_bodyFormProperties>({
			ship_from_service_point_id: new FormControl<string | null | undefined>(undefined),
			ship_to_service_point_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A create label response body */
	export interface Create_label_response_body {
	}

	/** A create label response body */
	export interface Create_label_response_bodyFormProperties {
	}
	export function CreateCreate_label_response_bodyFormGroup() {
		return new FormGroup<Create_label_response_bodyFormProperties>({
		});

	}


	/** A create manifest request body */
	export interface Create_manifest_by_object_request_body {

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: string;

		/** The list of label ids to exclude from the manifest */
		excluded_label_ids?: Array<string>;

		/** The list of label ids to include for the manifest */
		label_ids?: Array<string>;

		/**
		 * The ship date that the shipment will be sent out on
		 * Required
		 * Min length: 1
		 */
		ship_date: Date;

		/**
		 * A string that uniquely identifies the warehouse
		 * Required
		 */
		warehouse_id: string;
	}

	/** A create manifest request body */
	export interface Create_manifest_by_object_request_bodyFormProperties {

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * The ship date that the shipment will be sent out on
		 * Required
		 * Min length: 1
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * A string that uniquely identifies the warehouse
		 * Required
		 */
		warehouse_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_manifest_by_object_request_bodyFormGroup() {
		return new FormGroup<Create_manifest_by_object_request_bodyFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ship_date: new FormControl<Date | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			warehouse_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A create manifest request body */
	export interface Create_manifest_label_ids_request_body {

		/**
		 * The list of label ids to include in the manifest
		 * Required
		 */
		label_ids: Array<string>;
	}

	/** A create manifest request body */
	export interface Create_manifest_label_ids_request_bodyFormProperties {
	}
	export function CreateCreate_manifest_label_ids_request_bodyFormGroup() {
		return new FormGroup<Create_manifest_label_ids_request_bodyFormProperties>({
		});

	}

	export interface Create_manifest_request_body {
	}
	export interface Create_manifest_request_bodyFormProperties {
	}
	export function CreateCreate_manifest_request_bodyFormGroup() {
		return new FormGroup<Create_manifest_request_bodyFormProperties>({
		});

	}


	/** A create manifest response body */
	export interface Create_manifest_response_body {
	}

	/** A create manifest response body */
	export interface Create_manifest_response_bodyFormProperties {
	}
	export function CreateCreate_manifest_response_bodyFormGroup() {
		return new FormGroup<Create_manifest_response_bodyFormProperties>({
		});

	}


	/** A create package type request body */
	export interface Create_package_type_request_body {
	}

	/** A create package type request body */
	export interface Create_package_type_request_bodyFormProperties {
	}
	export function CreateCreate_package_type_request_bodyFormGroup() {
		return new FormGroup<Create_package_type_request_bodyFormProperties>({
		});

	}


	/** A create package type response body */
	export interface Create_package_type_response_body {
	}

	/** A create package type response body */
	export interface Create_package_type_response_bodyFormProperties {
	}
	export function CreateCreate_package_type_response_bodyFormGroup() {
		return new FormGroup<Create_package_type_response_bodyFormProperties>({
		});

	}


	/** A create return label request body */
	export interface Create_return_label_request_body {

		/**
		 * The label charge event.
		 */
		charge_event?: Label_charge_event;

		/** The display format that the label should be shown in. */
		display_scheme?: Display_scheme;
		label_download_type?: Label_download_type;

		/**
		 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
		 */
		label_format?: Label_format;

		/** The label image resource that was used to create a custom label image. */
		label_image_id?: string;

		/**
		 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
		 */
		label_layout?: Label_layout;
	}

	/** A create return label request body */
	export interface Create_return_label_request_bodyFormProperties {

		/**
		 * The label charge event.
		 */
		charge_event: FormControl<Label_charge_event | null | undefined>,

		/** The display format that the label should be shown in. */
		display_scheme: FormControl<Display_scheme | null | undefined>,
		label_download_type: FormControl<Label_download_type | null | undefined>,

		/**
		 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
		 */
		label_format: FormControl<Label_format | null | undefined>,

		/** The label image resource that was used to create a custom label image. */
		label_image_id: FormControl<string | null | undefined>,

		/**
		 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
		 */
		label_layout: FormControl<Label_layout | null | undefined>,
	}
	export function CreateCreate_return_label_request_bodyFormGroup() {
		return new FormGroup<Create_return_label_request_bodyFormProperties>({
			charge_event: new FormControl<Label_charge_event | null | undefined>(undefined),
			display_scheme: new FormControl<Display_scheme | null | undefined>(undefined),
			label_download_type: new FormControl<Label_download_type | null | undefined>(undefined),
			label_format: new FormControl<Label_format | null | undefined>(undefined),
			label_image_id: new FormControl<string | null | undefined>(undefined),
			label_layout: new FormControl<Label_layout | null | undefined>(undefined),
		});

	}


	/** Determines when the user's account will be charged for the label. */
	export enum Label_charge_event { carrier_default = 'carrier_default', on_creation = 'on_creation', on_carrier_acceptance = 'on_carrier_acceptance' }


	/** A create return label response body */
	export interface Create_return_label_response_body {
	}

	/** A create return label response body */
	export interface Create_return_label_response_bodyFormProperties {
	}
	export function CreateCreate_return_label_response_bodyFormGroup() {
		return new FormGroup<Create_return_label_response_bodyFormProperties>({
		});

	}

	export interface Create_shipment_response_body_fields {

		/** The address validation */
		address_validation?: Address_validation_result;

		/** An array of errors that occurred while creating shipment. */
		errors?: Array<string>;
	}
	export interface Create_shipment_response_body_fieldsFormProperties {
	}
	export function CreateCreate_shipment_response_body_fieldsFormGroup() {
		return new FormGroup<Create_shipment_response_body_fieldsFormProperties>({
		});

	}


	/** A create shipments request body */
	export interface Create_shipments_request_body {

		/**
		 * An array of shipments to be created.
		 * Required
		 * Minimum items: 1
		 */
		shipments: Array<string>;
	}

	/** A create shipments request body */
	export interface Create_shipments_request_bodyFormProperties {
	}
	export function CreateCreate_shipments_request_bodyFormGroup() {
		return new FormGroup<Create_shipments_request_bodyFormProperties>({
		});

	}


	/** A create shipments response body */
	export interface Create_shipments_response_body {

		/**
		 * Indicates if errors occured while creating the shipments
		 * Required
		 */
		has_errors: boolean;

		/**
		 * An array of shipments that were created.
		 * Required
		 */
		shipments: Array<string>;
	}

	/** A create shipments response body */
	export interface Create_shipments_response_bodyFormProperties {

		/**
		 * Indicates if errors occured while creating the shipments
		 * Required
		 */
		has_errors: FormControl<boolean | null | undefined>,
	}
	export function CreateCreate_shipments_response_bodyFormGroup() {
		return new FormGroup<Create_shipments_response_bodyFormProperties>({
			has_errors: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Response body for creating tags */
	export interface Create_tag_response_body {
	}

	/** Response body for creating tags */
	export interface Create_tag_response_bodyFormProperties {
	}
	export function CreateCreate_tag_response_bodyFormGroup() {
		return new FormGroup<Create_tag_response_bodyFormProperties>({
		});

	}


	/** A create warehouse request body */
	export interface Create_warehouse_request_body {
	}

	/** A create warehouse request body */
	export interface Create_warehouse_request_bodyFormProperties {
	}
	export function CreateCreate_warehouse_request_bodyFormGroup() {
		return new FormGroup<Create_warehouse_request_bodyFormProperties>({
		});

	}


	/** A create warehouse response body */
	export interface Create_warehouse_response_body {
	}

	/** A create warehouse response body */
	export interface Create_warehouse_response_bodyFormProperties {
	}
	export function CreateCreate_warehouse_response_bodyFormGroup() {
		return new FormGroup<Create_warehouse_response_bodyFormProperties>({
		});

	}


	/** A create webhook request body */
	export interface Create_webhook_request_body {

		/** Required */
		event: Webhook_event;

		/**
		 * The url that the webhook sends the request to
		 * Required
		 */
		url: string;
	}

	/** A create webhook request body */
	export interface Create_webhook_request_bodyFormProperties {

		/** Required */
		event: FormControl<Webhook_event | null | undefined>,

		/**
		 * The url that the webhook sends the request to
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCreate_webhook_request_bodyFormGroup() {
		return new FormGroup<Create_webhook_request_bodyFormProperties>({
			event: new FormControl<Webhook_event | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The possible webook event values */
	export enum Webhook_event { batch = 'batch', carrier_connected = 'carrier_connected', order_source_refresh_complete = 'order_source_refresh_complete', rate = 'rate', report_complete = 'report_complete', sales_orders_imported = 'sales_orders_imported', track = 'track' }


	/** A webhook response body */
	export interface Create_webhook_response_body {
	}

	/** A webhook response body */
	export interface Create_webhook_response_bodyFormProperties {
	}
	export function CreateCreate_webhook_response_bodyFormGroup() {
		return new FormGroup<Create_webhook_response_bodyFormProperties>({
		});

	}


	/** The customs declaration for a single item in the shipment. */
	export interface Customs_item {

		/**
		 * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) where this item originated
		 */
		country_of_origin?: string;

		/**
		 * A string that uniquely identifies the customs item
		 * Required
		 */
		customs_item_id: string;

		/**
		 * A description of the item
		 * Max length: 100
		 */
		description?: string | null;

		/** The [Harmonized Tariff Code](https://en.wikipedia.org/wiki/Harmonized_System) of this item. */
		harmonized_tariff_code?: string | null;

		/**
		 * The quantity of this item in the shipment.
		 * Minimum: 0
		 */
		quantity?: number | null;

		/** The SKU (Stock Keeping Unit) of the customs item */
		sku?: string | null;

		/** Description of the Custom Item's SKU */
		sku_description?: string | null;
		unit_of_measure?: string | null;

		/** The declared customs value of each item */
		value?: Monetary_value;

		/** The item weight */
		weight?: Weight;
	}

	/** The customs declaration for a single item in the shipment. */
	export interface Customs_itemFormProperties {

		/**
		 * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) where this item originated
		 */
		country_of_origin: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the customs item
		 * Required
		 */
		customs_item_id: FormControl<string | null | undefined>,

		/**
		 * A description of the item
		 * Max length: 100
		 */
		description: FormControl<string | null | undefined>,

		/** The [Harmonized Tariff Code](https://en.wikipedia.org/wiki/Harmonized_System) of this item. */
		harmonized_tariff_code: FormControl<string | null | undefined>,

		/**
		 * The quantity of this item in the shipment.
		 * Minimum: 0
		 */
		quantity: FormControl<number | null | undefined>,

		/** The SKU (Stock Keeping Unit) of the customs item */
		sku: FormControl<string | null | undefined>,

		/** Description of the Custom Item's SKU */
		sku_description: FormControl<string | null | undefined>,
		unit_of_measure: FormControl<string | null | undefined>,
	}
	export function CreateCustoms_itemFormGroup() {
		return new FormGroup<Customs_itemFormProperties>({
			country_of_origin: new FormControl<string | null | undefined>(undefined),
			customs_item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			harmonized_tariff_code: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			sku: new FormControl<string | null | undefined>(undefined),
			sku_description: new FormControl<string | null | undefined>(undefined),
			unit_of_measure: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Delete_pickup_by_id_response_body extends Error_response_body {

		/** Required */
		pickup_id: string;
	}
	export interface Delete_pickup_by_id_response_bodyFormProperties extends Error_response_bodyFormProperties {

		/** Required */
		pickup_id: FormControl<string | null | undefined>,
	}
	export function CreateDelete_pickup_by_id_response_bodyFormGroup() {
		return new FormGroup<Delete_pickup_by_id_response_bodyFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pickup_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A delete scheduled pickup response body */
	export interface Delete_scheduled_pickup_response_body {

		/** Required */
		pickup_id: string;
	}

	/** A delete scheduled pickup response body */
	export interface Delete_scheduled_pickup_response_bodyFormProperties {

		/** Required */
		pickup_id: FormControl<string | null | undefined>,
	}
	export function CreateDelete_scheduled_pickup_response_bodyFormGroup() {
		return new FormGroup<Delete_scheduled_pickup_response_bodyFormProperties>({
			pickup_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The possible delivery confirmation values */
	export enum Delivery_confirmation { none = 'none', delivery = 'delivery', signature = 'signature', adult_signature = 'adult_signature', direct_signature = 'direct_signature', delivery_mailed = 'delivery_mailed', verbal_confirmation = 'verbal_confirmation' }


	/** Deprecated manifest resource */
	export interface Deprecated_manifest {

		/** A string that uniquely identifies the carrier */
		carrier_id?: string;

		/**
		 * The date-time that the manifest was created
		 * Min length: 1
		 */
		created_at?: Date | null;

		/** A string that uniquely identifies the form */
		form_id?: string;

		/** An array of the label ids used in this manifest. */
		label_ids?: Array<string>;
		manifest_download?: Manifest_download;

		/** A string that uniquely identifies the manifest */
		manifest_id?: string;

		/**
		 * The date-time that the manifests shipments will be picked up
		 * Min length: 1
		 */
		ship_date?: Date | null;

		/**
		 * The number of shipments that are included in this manifest
		 * Minimum: 1
		 */
		shipments?: number | null;

		/**
		 * A string that uniquely identifies the submission
		 * Min length: 1
		 */
		submission_id?: string | null;

		/** A string that uniquely identifies the warehouse */
		warehouse_id?: string;
	}

	/** Deprecated manifest resource */
	export interface Deprecated_manifestFormProperties {

		/** A string that uniquely identifies the carrier */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * The date-time that the manifest was created
		 * Min length: 1
		 */
		created_at: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies the form */
		form_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the manifest */
		manifest_id: FormControl<string | null | undefined>,

		/**
		 * The date-time that the manifests shipments will be picked up
		 * Min length: 1
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * The number of shipments that are included in this manifest
		 * Minimum: 1
		 */
		shipments: FormControl<number | null | undefined>,

		/**
		 * A string that uniquely identifies the submission
		 * Min length: 1
		 */
		submission_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the warehouse */
		warehouse_id: FormControl<string | null | undefined>,
	}
	export function CreateDeprecated_manifestFormGroup() {
		return new FormGroup<Deprecated_manifestFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			form_id: new FormControl<string | null | undefined>(undefined),
			manifest_id: new FormControl<string | null | undefined>(undefined),
			ship_date: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			shipments: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			submission_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			warehouse_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Object containing the href link to download the manifest file */
	export interface Manifest_download {

		/** The URL of the linked resource, if any */
		href?: string;
	}

	/** Object containing the href link to download the manifest file */
	export interface Manifest_downloadFormProperties {

		/** The URL of the linked resource, if any */
		href: FormControl<string | null | undefined>,
	}
	export function CreateManifest_downloadFormGroup() {
		return new FormGroup<Manifest_downloadFormProperties>({
			href: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A DHL Express account settings */
	export interface Dhl_express_account_settings {

		/** Indicates if this is primary account */
		is_primary_account?: boolean | null;

		/**
		 * Account nickname
		 * Min length: 1
		 */
		nickname?: string | null;

		/** Indicates if the account number should be hidden on the archive documentation */
		should_hide_account_number_on_archive_doc?: boolean | null;
	}

	/** A DHL Express account settings */
	export interface Dhl_express_account_settingsFormProperties {

		/** Indicates if this is primary account */
		is_primary_account: FormControl<boolean | null | undefined>,

		/**
		 * Account nickname
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,

		/** Indicates if the account number should be hidden on the archive documentation */
		should_hide_account_number_on_archive_doc: FormControl<boolean | null | undefined>,
	}
	export function CreateDhl_express_account_settingsFormGroup() {
		return new FormGroup<Dhl_express_account_settingsFormProperties>({
			is_primary_account: new FormControl<boolean | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			should_hide_account_number_on_archive_doc: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A DHL Express response body */
	export interface Dhl_express_settings_response_body {
	}

	/** A DHL Express response body */
	export interface Dhl_express_settings_response_bodyFormProperties {
	}
	export function CreateDhl_express_settings_response_bodyFormGroup() {
		return new FormGroup<Dhl_express_settings_response_bodyFormProperties>({
		});

	}


	/** The dimension units that are supported by ShipEngine. */
	export enum Dimension_unit { inch = 'inch', centimeter = 'centimeter' }


	/** The dimensions of a package */
	export interface Dimensions {

		/**
		 * The length of the package, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		height: number;

		/**
		 * The length of the package, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		length: number;

		/** Required */
		unit: Dimension_unit;

		/**
		 * The width of the package, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		width: number;
	}

	/** The dimensions of a package */
	export interface DimensionsFormProperties {

		/**
		 * The length of the package, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		height: FormControl<number | null | undefined>,

		/**
		 * The length of the package, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		length: FormControl<number | null | undefined>,

		/** Required */
		unit: FormControl<Dimension_unit | null | undefined>,

		/**
		 * The width of the package, in the specified unit
		 * Required
		 * Minimum: 0
		 */
		width: FormControl<number | null | undefined>,
	}
	export function CreateDimensionsFormGroup() {
		return new FormGroup<DimensionsFormProperties>({
			height: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			length: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			unit: new FormControl<Dimension_unit | null | undefined>(undefined, [Validators.required]),
			width: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}

	export interface Disconnect_insurer_response_body {
	}
	export interface Disconnect_insurer_response_bodyFormProperties {
	}
	export function CreateDisconnect_insurer_response_bodyFormGroup() {
		return new FormGroup<Disconnect_insurer_response_bodyFormProperties>({
		});

	}


	/**
	 * The error structure that gets returned with almost all failed API calls
	 */
	export interface Error {

		/** Required */
		error_code: Error_code;

		/** Required */
		error_source: Error_source;

		/** Required */
		error_type: Error_type;

		/**
		 * An error message associated with the failed API call
		 * Required
		 * Min length: 1
		 */
		message: string;
	}

	/**
	 * The error structure that gets returned with almost all failed API calls
	 */
	export interface ErrorFormProperties {

		/** Required */
		error_code: FormControl<Error_code | null | undefined>,

		/** Required */
		error_source: FormControl<Error_source | null | undefined>,

		/** Required */
		error_type: FormControl<Error_type | null | undefined>,

		/**
		 * An error message associated with the failed API call
		 * Required
		 * Min length: 1
		 */
		message: FormControl<string | null | undefined>,
	}
	export function CreateErrorFormGroup() {
		return new FormGroup<ErrorFormProperties>({
			error_code: new FormControl<Error_code | null | undefined>(undefined, [Validators.required]),
			error_source: new FormControl<Error_source | null | undefined>(undefined, [Validators.required]),
			error_type: new FormControl<Error_type | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** The error code specified for the failed API Call */
	export enum Error_code { auto_fund_not_supported = 'auto_fund_not_supported', batch_cannot_be_modified = 'batch_cannot_be_modified', carrier_conflict = 'carrier_conflict', carrier_disconnected = 'carrier_disconnected', carrier_not_connected = 'carrier_not_connected', carrier_not_supported = 'carrier_not_supported', confirmation_not_supported = 'confirmation_not_supported', default_warehouse_cannot_be_deleted = 'default_warehouse_cannot_be_deleted', field_conflict = 'field_conflict', field_value_required = 'field_value_required', forbidden = 'forbidden', identifier_conflict = 'identifier_conflict', identifiers_must_match = 'identifiers_must_match', insufficient_funds = 'insufficient_funds', invalid_address = 'invalid_address', invalid_billing_plan = 'invalid_billing_plan', invalid_field_value = 'invalid_field_value', invalid_identifier = 'invalid_identifier', invalid_status = 'invalid_status', invalid_string_length = 'invalid_string_length', label_images_not_supported = 'label_images_not_supported', meter_failure = 'meter_failure', order_source_not_active = 'order_source_not_active', rate_limit_exceeded = 'rate_limit_exceeded', refresh_not_supported = 'refresh_not_supported', request_body_required = 'request_body_required', return_label_not_supported = 'return_label_not_supported', settings_not_supported = 'settings_not_supported', subscription_inactive = 'subscription_inactive', terms_not_accepted = 'terms_not_accepted', tracking_not_supported = 'tracking_not_supported', trial_expired = 'trial_expired', unauthorized = 'unauthorized', unknown = 'unknown', unspecified = 'unspecified', verification_failure = 'verification_failure', warehouse_conflict = 'warehouse_conflict', webhook_event_type_conflict = 'webhook_event_type_conflict' }


	/**
	 * The source of the error, as indicated by the name this informs us if the API call failed because of the
	 * carrier, the order source, or the ShipEngine API itself.
	 */
	export enum Error_source { carrier = 'carrier', order_source = 'order_source', shipengine = 'shipengine' }


	/**
	 * The type of error
	 */
	export enum Error_type { account_status = 'account_status', business_rules = 'business_rules', validation = 'validation', security = 'security', system = 'system', integrations = 'integrations' }


	/** An error response body */
	export interface Error_response_body {

		/**
		 * The errors associated with the failed API call
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: string;
	}

	/** An error response body */
	export interface Error_response_bodyFormProperties {

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateError_response_bodyFormGroup() {
		return new FormGroup<Error_response_bodyFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An error response body */
	export interface Error_with_label_id_response_body {

		/**
		 * The errors associated with the failed API call
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: string;
	}

	/** An error response body */
	export interface Error_with_label_id_response_bodyFormProperties {

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateError_with_label_id_response_bodyFormGroup() {
		return new FormGroup<Error_with_label_id_response_bodyFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A rate estimate request body */
	export interface Estimate_rates_request_body {
	}

	/** A rate estimate request body */
	export interface Estimate_rates_request_bodyFormProperties {
	}
	export function CreateEstimate_rates_request_bodyFormGroup() {
		return new FormGroup<Estimate_rates_request_bodyFormProperties>({
		});

	}


	/** A Fedex account settings request body */
	export interface Fedex_account_settings {
		is_primary_account?: boolean | null;
		letterhead_image?: string | null;

		/**
		 * Account nickname
		 * Min length: 1
		 */
		nickname?: string | null;
		pickup_type?: Fedex_pickup_type;
		signature_image?: string | null;
		smart_post_endorsement?: Ancillary_service_endorsement;
		smart_post_hub?: Smart_post_hub;
	}

	/** A Fedex account settings request body */
	export interface Fedex_account_settingsFormProperties {
		is_primary_account: FormControl<boolean | null | undefined>,
		letterhead_image: FormControl<string | null | undefined>,

		/**
		 * Account nickname
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
		pickup_type: FormControl<Fedex_pickup_type | null | undefined>,
		signature_image: FormControl<string | null | undefined>,
		smart_post_endorsement: FormControl<Ancillary_service_endorsement | null | undefined>,
		smart_post_hub: FormControl<Smart_post_hub | null | undefined>,
	}
	export function CreateFedex_account_settingsFormGroup() {
		return new FormGroup<Fedex_account_settingsFormProperties>({
			is_primary_account: new FormControl<boolean | null | undefined>(undefined),
			letterhead_image: new FormControl<string | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			pickup_type: new FormControl<Fedex_pickup_type | null | undefined>(undefined),
			signature_image: new FormControl<string | null | undefined>(undefined),
			smart_post_endorsement: new FormControl<Ancillary_service_endorsement | null | undefined>(undefined),
			smart_post_hub: new FormControl<Smart_post_hub | null | undefined>(undefined),
		});

	}


	/**
	 * Determines how FedEx will pickup your packages
	 * |Pickup Type               |Description
	 * |--------------------------|-----------------------------------------
	 * |`none`                    | Not specified
	 * |`regular_pickup`          | You already have a daily pickup scheduled with FedEx
	 * |`request_courier`         | You will call FedEx to request a courier
	 * |`drop_box`                | You will drop-off packages in a FedEx drop box
	 * |`business_service_center` | You will drop-off packages at an authorized FedEx business service center
	 * |`station`                 | You will drop-off the package at a FedEx Station
	 */
	export enum Fedex_pickup_type { none = 'none', regular_pickup = 'regular_pickup', request_courier = 'request_courier', drop_box = 'drop_box', business_service_center = 'business_service_center', station = 'station' }


	/** The possible smart post hub values */
	export enum Smart_post_hub { none = 'none', allentown_pa = 'allentown_pa', atlanta_ga = 'atlanta_ga', baltimore_md = 'baltimore_md', charlotte_nc = 'charlotte_nc', chino_ca = 'chino_ca', dallas_tx = 'dallas_tx', denver_co = 'denver_co', detroit_mi = 'detroit_mi', edison_nj = 'edison_nj', grove_city_oh = 'grove_city_oh', groveport_oh = 'groveport_oh', houston_tx = 'houston_tx', indianapolis_in = 'indianapolis_in', kansas_city_ks = 'kansas_city_ks', los_angeles_ca = 'los_angeles_ca', martinsburg_wv = 'martinsburg_wv', memphis_tn = 'memphis_tn', minneapolis_mn = 'minneapolis_mn', new_berlin_wi = 'new_berlin_wi', northborough_ma = 'northborough_ma', orlando_fl = 'orlando_fl', phoneix_az = 'phoneix_az', pittsburgh_pa = 'pittsburgh_pa', reno_nv = 'reno_nv', sacramento_ca = 'sacramento_ca', salt_lake_city_ut = 'salt_lake_city_ut', seattle_wa = 'seattle_wa', st_louis_mo = 'st_louis_mo', windsor_ct = 'windsor_ct', newark_ny = 'newark_ny', south_brunswick_nj = 'south_brunswick_nj', scranton_pa = 'scranton_pa', wheeling_il = 'wheeling_il' }


	/** A Fedex account settings request body */
	export interface Fedex_account_settings_request_body {
	}

	/** A Fedex account settings request body */
	export interface Fedex_account_settings_request_bodyFormProperties {
	}
	export function CreateFedex_account_settings_request_bodyFormGroup() {
		return new FormGroup<Fedex_account_settings_request_bodyFormProperties>({
		});

	}


	/** A Fedex settings response body */
	export interface Fedex_settings_response_body {
	}

	/** A Fedex settings response body */
	export interface Fedex_settings_response_bodyFormProperties {
	}
	export function CreateFedex_settings_response_bodyFormGroup() {
		return new FormGroup<Fedex_settings_response_bodyFormProperties>({
		});

	}


	/** A get account images by id response body */
	export interface Get_account_settings_images_response_body {
	}

	/** A get account images by id response body */
	export interface Get_account_settings_images_response_bodyFormProperties {
	}
	export function CreateGet_account_settings_images_response_bodyFormGroup() {
		return new FormGroup<Get_account_settings_images_response_bodyFormProperties>({
		});

	}

	export interface Get_account_settings_response_body {
	}
	export interface Get_account_settings_response_bodyFormProperties {
	}
	export function CreateGet_account_settings_response_bodyFormGroup() {
		return new FormGroup<Get_account_settings_response_bodyFormProperties>({
		});

	}


	/** A get batch by external id response body */
	export interface Get_batch_by_external_id_response_body {
	}

	/** A get batch by external id response body */
	export interface Get_batch_by_external_id_response_bodyFormProperties {
	}
	export function CreateGet_batch_by_external_id_response_bodyFormGroup() {
		return new FormGroup<Get_batch_by_external_id_response_bodyFormProperties>({
		});

	}


	/** A get batch by id response body */
	export interface Get_batch_by_id_response_body {
	}

	/** A get batch by id response body */
	export interface Get_batch_by_id_response_bodyFormProperties {
	}
	export function CreateGet_batch_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_batch_by_id_response_bodyFormProperties>({
		});

	}


	/** A get carrier by id response body */
	export interface Get_carrier_by_id_response_body {
	}

	/** A get carrier by id response body */
	export interface Get_carrier_by_id_response_bodyFormProperties {
	}
	export function CreateGet_carrier_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_carrier_by_id_response_bodyFormProperties>({
		});

	}


	/** A carrier list options response body */
	export interface Get_carrier_options_response_body {

		/** AN array of carrier options */
		options?: Array<string>;
	}

	/** A carrier list options response body */
	export interface Get_carrier_options_response_bodyFormProperties {
	}
	export function CreateGet_carrier_options_response_bodyFormGroup() {
		return new FormGroup<Get_carrier_options_response_bodyFormProperties>({
		});

	}

	export interface Get_carrier_settings_response_body {
	}
	export interface Get_carrier_settings_response_bodyFormProperties {
	}
	export function CreateGet_carrier_settings_response_bodyFormGroup() {
		return new FormGroup<Get_carrier_settings_response_bodyFormProperties>({
		});

	}

	export interface Get_carriers_response_body extends List_carriers_response_body {

		/**
		 * The errors associated with the failed API call
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: string;
	}
	export interface Get_carriers_response_bodyFormProperties extends List_carriers_response_bodyFormProperties {

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateGet_carriers_response_bodyFormGroup() {
		return new FormGroup<Get_carriers_response_bodyFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A get insurance balance response body */
	export interface Get_insurance_balance_response_body {
	}

	/** A get insurance balance response body */
	export interface Get_insurance_balance_response_bodyFormProperties {
	}
	export function CreateGet_insurance_balance_response_bodyFormGroup() {
		return new FormGroup<Get_insurance_balance_response_bodyFormProperties>({
		});

	}


	/** A get label by external shipment id response body */
	export interface Get_label_by_external_shipment_id_response_body {
	}

	/** A get label by external shipment id response body */
	export interface Get_label_by_external_shipment_id_response_bodyFormProperties {
	}
	export function CreateGet_label_by_external_shipment_id_response_bodyFormGroup() {
		return new FormGroup<Get_label_by_external_shipment_id_response_bodyFormProperties>({
		});

	}


	/** A get label by id response body */
	export interface Get_label_by_id_response_body {
	}

	/** A get label by id response body */
	export interface Get_label_by_id_response_bodyFormProperties {
	}
	export function CreateGet_label_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_label_by_id_response_bodyFormProperties>({
		});

	}


	/** A get manifest by id response body */
	export interface Get_manifest_by_id_response_body {
	}

	/** A get manifest by id response body */
	export interface Get_manifest_by_id_response_bodyFormProperties {
	}
	export function CreateGet_manifest_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_manifest_by_id_response_bodyFormProperties>({
		});

	}


	/** A get package type by id response body */
	export interface Get_package_type_by_id_response_body {
	}

	/** A get package type by id response body */
	export interface Get_package_type_by_id_response_bodyFormProperties {
	}
	export function CreateGet_package_type_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_package_type_by_id_response_bodyFormProperties>({
		});

	}

	export interface Get_pickup_by_id_response_body extends Pickup_response_body {

		/**
		 * The errors associated with the failed API call
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: string;
	}
	export interface Get_pickup_by_id_response_bodyFormProperties extends Pickup_response_bodyFormProperties {

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateGet_pickup_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_pickup_by_id_response_bodyFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Get_pickups_response_body extends List_pickup_response_body {

		/**
		 * The errors associated with the failed API call
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: string;
	}
	export interface Get_pickups_response_bodyFormProperties extends List_pickup_response_bodyFormProperties {

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateGet_pickups_response_bodyFormGroup() {
		return new FormGroup<Get_pickups_response_bodyFormProperties>({
			page: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A rate response body */
	export interface Get_rate_by_id_response_body {
	}

	/** A rate response body */
	export interface Get_rate_by_id_response_bodyFormProperties {
	}
	export function CreateGet_rate_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_rate_by_id_response_bodyFormProperties>({
		});

	}


	/** A get service point by ID response body */
	export interface Get_service_point_by_id_response_body {
		service_point?: Get_service_point_by_id_response_bodyService_point;
	}

	/** A get service point by ID response body */
	export interface Get_service_point_by_id_response_bodyFormProperties {
	}
	export function CreateGet_service_point_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyFormProperties>({
		});

	}

	export interface Get_service_point_by_id_response_bodyService_point {
		address_line1?: string | null;
		carrier_code?: string | null;
		city_locality?: string | null;
		company_name?: string | null;
		country_code?: string | null;
		features?: Array<string>;
		hours_of_operation?: Get_service_point_by_id_response_bodyService_pointHours_of_operation;
		lat?: number | null;
		long?: number | null;
		phone_number?: string | null;
		postal_code?: string | null;
		service_codes?: Array<string>;
		service_point_id?: string | null;
		state_province?: string | null;
		type?: Get_service_point_by_id_response_bodyService_pointType | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointFormProperties {
		address_line1: FormControl<string | null | undefined>,
		carrier_code: FormControl<string | null | undefined>,
		city_locality: FormControl<string | null | undefined>,
		company_name: FormControl<string | null | undefined>,
		country_code: FormControl<string | null | undefined>,
		lat: FormControl<number | null | undefined>,
		long: FormControl<number | null | undefined>,
		phone_number: FormControl<string | null | undefined>,
		postal_code: FormControl<string | null | undefined>,
		service_point_id: FormControl<string | null | undefined>,
		state_province: FormControl<string | null | undefined>,
		type: FormControl<Get_service_point_by_id_response_bodyService_pointType | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointFormProperties>({
			address_line1: new FormControl<string | null | undefined>(undefined),
			carrier_code: new FormControl<string | null | undefined>(undefined),
			city_locality: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			lat: new FormControl<number | null | undefined>(undefined),
			long: new FormControl<number | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			service_point_id: new FormControl<string | null | undefined>(undefined),
			state_province: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<Get_service_point_by_id_response_bodyService_pointType | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operation {
		Get_service_point_by_id_response_bodyService_pointHours_of_operationFriday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationFriday>;
		Get_service_point_by_id_response_bodyService_pointHours_of_operationMonday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationMonday>;
		Get_service_point_by_id_response_bodyService_pointHours_of_operationSaturday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationSaturday>;
		Get_service_point_by_id_response_bodyService_pointHours_of_operationSunday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationSunday>;
		Get_service_point_by_id_response_bodyService_pointHours_of_operationThursday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationThursday>;
		Get_service_point_by_id_response_bodyService_pointHours_of_operationTuesday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationTuesday>;
		Get_service_point_by_id_response_bodyService_pointHours_of_operationWednesday?: Array<Get_service_point_by_id_response_bodyService_pointHours_of_operationWednesday>;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationFormProperties {
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationFormProperties>({
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationFriday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationFridayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationFridayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationFridayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationMonday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationMondayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationMondayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationMondayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationSaturday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationSaturdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationSaturdayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationSaturdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationSunday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationSundayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationSundayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationSundayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationThursday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationThursdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationThursdayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationThursdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationTuesday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationTuesdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationTuesdayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationTuesdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationWednesday {
		close?: string | null;
		open?: string | null;
	}
	export interface Get_service_point_by_id_response_bodyService_pointHours_of_operationWednesdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_point_by_id_response_bodyService_pointHours_of_operationWednesdayFormGroup() {
		return new FormGroup<Get_service_point_by_id_response_bodyService_pointHours_of_operationWednesdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Get_service_point_by_id_response_bodyService_pointType { pudo = 'pudo', locker = 'locker' }

	export interface Get_service_points_request {
	}
	export interface Get_service_points_requestFormProperties {
	}
	export function CreateGet_service_points_requestFormGroup() {
		return new FormGroup<Get_service_points_requestFormProperties>({
		});

	}


	/** A get service points request body. Caller must provide exactly one of address_query, address, or lat / long pair. */
	export interface Get_service_points_request_body {

		/** Structured address to search by. */
		address?: Get_service_points_request_bodyAddress;

		/** Unstructured text to search for service points by. */
		address_query?: string | null;

		/** The latitude of the point. Represented as signed degrees. Required if long is provided. http://www.geomidpoint.com/latlon.html */
		lat?: number | null;

		/** The longitude of the point. Represented as signed degrees. Required if lat is provided. http://www.geomidpoint.com/latlon.html */
		long?: number | null;

		/** The maximum number of service points to return */
		max_results?: number | null;

		/**
		 * An array of shipping service providers and service codes
		 * Required
		 */
		Get_service_points_request_bodyProviders: Array<Get_service_points_request_bodyProviders>;

		/** Search radius in kilometers */
		radius?: number | null;
	}

	/** A get service points request body. Caller must provide exactly one of address_query, address, or lat / long pair. */
	export interface Get_service_points_request_bodyFormProperties {

		/** Unstructured text to search for service points by. */
		address_query: FormControl<string | null | undefined>,

		/** The latitude of the point. Represented as signed degrees. Required if long is provided. http://www.geomidpoint.com/latlon.html */
		lat: FormControl<number | null | undefined>,

		/** The longitude of the point. Represented as signed degrees. Required if lat is provided. http://www.geomidpoint.com/latlon.html */
		long: FormControl<number | null | undefined>,

		/** The maximum number of service points to return */
		max_results: FormControl<number | null | undefined>,

		/** Search radius in kilometers */
		radius: FormControl<number | null | undefined>,
	}
	export function CreateGet_service_points_request_bodyFormGroup() {
		return new FormGroup<Get_service_points_request_bodyFormProperties>({
			address_query: new FormControl<string | null | undefined>(undefined),
			lat: new FormControl<number | null | undefined>(undefined),
			long: new FormControl<number | null | undefined>(undefined),
			max_results: new FormControl<number | null | undefined>(undefined),
			radius: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Get_service_points_request_bodyAddress {
		address_line1?: string | null;
		address_line2?: string | null;
		address_line3?: string | null;
		city_locality?: string | null;

		/** Required */
		country_code: string;
		postal_code?: string | null;
		state_province?: string | null;
	}
	export interface Get_service_points_request_bodyAddressFormProperties {
		address_line1: FormControl<string | null | undefined>,
		address_line2: FormControl<string | null | undefined>,
		address_line3: FormControl<string | null | undefined>,
		city_locality: FormControl<string | null | undefined>,

		/** Required */
		country_code: FormControl<string | null | undefined>,
		postal_code: FormControl<string | null | undefined>,
		state_province: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_points_request_bodyAddressFormGroup() {
		return new FormGroup<Get_service_points_request_bodyAddressFormProperties>({
			address_line1: new FormControl<string | null | undefined>(undefined),
			address_line2: new FormControl<string | null | undefined>(undefined),
			address_line3: new FormControl<string | null | undefined>(undefined),
			city_locality: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined),
			state_province: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Get_service_points_request_bodyProviders {

		/** Uniquely identifies a carrier connection */
		carrier_id?: string | null;
		service_code?: Array<string>;
	}
	export interface Get_service_points_request_bodyProvidersFormProperties {

		/** Uniquely identifies a carrier connection */
		carrier_id: FormControl<string | null | undefined>,
	}
	export function CreateGet_service_points_request_bodyProvidersFormGroup() {
		return new FormGroup<Get_service_points_request_bodyProvidersFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A get shipment by external id response body */
	export interface Get_shipment_by_external_id_response_body {
	}

	/** A get shipment by external id response body */
	export interface Get_shipment_by_external_id_response_bodyFormProperties {
	}
	export function CreateGet_shipment_by_external_id_response_bodyFormGroup() {
		return new FormGroup<Get_shipment_by_external_id_response_bodyFormProperties>({
		});

	}


	/** A get shipment by id response body */
	export interface Get_shipment_by_id_response_body {
	}

	/** A get shipment by id response body */
	export interface Get_shipment_by_id_response_bodyFormProperties {
	}
	export function CreateGet_shipment_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_shipment_by_id_response_bodyFormProperties>({
		});

	}


	/** A get tracking log from label response body */
	export interface Get_tracking_log_from_label_response_body {
	}

	/** A get tracking log from label response body */
	export interface Get_tracking_log_from_label_response_bodyFormProperties {
	}
	export function CreateGet_tracking_log_from_label_response_bodyFormGroup() {
		return new FormGroup<Get_tracking_log_from_label_response_bodyFormProperties>({
		});

	}


	/** A get tracking log response body */
	export interface Get_tracking_log_response_body {
	}

	/** A get tracking log response body */
	export interface Get_tracking_log_response_bodyFormProperties {
	}
	export function CreateGet_tracking_log_response_bodyFormGroup() {
		return new FormGroup<Get_tracking_log_response_bodyFormProperties>({
		});

	}


	/** A get warehouse by id response body */
	export interface Get_warehouse_by_id_response_body {
	}

	/** A get warehouse by id response body */
	export interface Get_warehouse_by_id_response_bodyFormProperties {
	}
	export function CreateGet_warehouse_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_warehouse_by_id_response_bodyFormProperties>({
		});

	}


	/** A get webhook id response body */
	export interface Get_webhook_by_id_response_body {
	}

	/** A get webhook id response body */
	export interface Get_webhook_by_id_response_bodyFormProperties {
	}
	export function CreateGet_webhook_by_id_response_bodyFormGroup() {
		return new FormGroup<Get_webhook_by_id_response_bodyFormProperties>({
		});

	}


	/**
	 * Determines how FedEx will pickup your packages
	 * |Pickup Type    | Description
	 * |---------------|-----------------------------------------
	 * |`vat`          | The tax identifier is a Value Added Tax.
	 * |`eori`         | The tax identifier is an Economic Operators Registration and Identification Number (EORI).
	 * |`ssn`          | The tax identifier is a Social Security Number.
	 * |`ein`          | The tax identifier is an Employer Identification Number (EIN).
	 * |`tin`          | The tax identifier is a Tax Identification Number (TIN).
	 * |`ioss`         | The tax identifier is an Import One-Stop Shop (IOSS).
	 * |`pan`          | The tax identifier is a Permanent Account Number (PAN).
	 * |`voec`         | The tax identifier is a Norwegian VAT On E-Commerce(VOEC).
	 */
	export enum Identifier_type { vat = 'vat', eori = 'eori', ssn = 'ssn', ein = 'ein', tin = 'tin', ioss = 'ioss', pan = 'pan', voec = 'voec' }


	/** The possible insurance provider values */
	export enum Insurance_provider { none = 'none', shipsurance = 'shipsurance', carrier = 'carrier', third_party = 'third_party' }


	/** Options for international shipments, such as customs declarations. */
	export interface International_shipment_options {

		/**
		 * The type of contents in this shipment.  This may impact import duties or customs treatment.
		 * Required
		 */
		contents: Package_contents;

		/**
		 * Customs declarations for each item in the shipment.
		 * Minimum items: 0
		 */
		customs_items?: Array<Customs_item>;

		/**
		 * Indicates what to do if a package is unable to be delivered.
		 * Required
		 */
		non_delivery: Non_delivery;
	}

	/** Options for international shipments, such as customs declarations. */
	export interface International_shipment_optionsFormProperties {

		/**
		 * The type of contents in this shipment.  This may impact import duties or customs treatment.
		 * Required
		 */
		contents: FormControl<Package_contents | null | undefined>,

		/**
		 * Indicates what to do if a package is unable to be delivered.
		 * Required
		 */
		non_delivery: FormControl<Non_delivery | null | undefined>,
	}
	export function CreateInternational_shipment_optionsFormGroup() {
		return new FormGroup<International_shipment_optionsFormProperties>({
			contents: new FormControl<Package_contents | null | undefined>(undefined, [Validators.required]),
			non_delivery: new FormControl<Non_delivery | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The possible package contents values */
	export enum Package_contents { merchandise = 'merchandise', documents = 'documents', gift = 'gift', returned_goods = 'returned_goods', sample = 'sample' }


	/** The possible non delivery values */
	export enum Non_delivery { return_to_sender = 'return_to_sender', treat_as_abandoned = 'treat_as_abandoned' }


	/**
	 * A label represents the physical sticker that you affix to a package to ship it.  ShipEngine makes it easy for you to [create labels](https://www.shipengine.com/docs/labels/create-a-label/) and then download them in PDF, PNG, or ZPL format so you can print them.
	 */
	export interface Label {

		/**
		 * Additional information some carriers may provide by which to identify a given label in their system.
		 */
		alternative_identifiers?: Array<Alternative_identifier>;

		/**
		 * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch.
		 */
		batch_id?: string;

		/**
		 * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as `fedex`, `dhl_express`, `stamps_com`, etc.
		 */
		carrier_code?: string;

		/**
		 * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label
		 */
		carrier_id?: string;

		/**
		 * The label charge event.
		 */
		charge_event?: Label_charge_event;

		/** The date and time that the label was created in ShipEngine. */
		created_at?: Date;

		/** The display format that the label should be shown in. */
		display_scheme?: Display_scheme;

		/**
		 * The link to download the customs form (a.k.a. commercial invoice) for this shipment, if any.  Forms are in PDF format. This field is null if the shipment does not require a customs form, or if the carrier does not support it.
		 */
		form_download?: Link;

		/**
		 * The link to submit an insurance claim for the shipment.  This field is null if the shipment is not insured or if the insurance provider does not support online claim submission.
		 */
		insurance_claim?: Link;

		/**
		 * The insurance cost for this package.  Add this to the `shipment_cost` field to get the total cost.
		 */
		insurance_cost?: Monetary_value;

		/**
		 * Indicates whether this is an international shipment.  That is, the originating country and destination country are different.
		 */
		is_international?: boolean | null;

		/**
		 * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned.
		 */
		is_return_label?: boolean | null;
		label_download?: Label_download;
		label_download_type?: Label_download_type;

		/**
		 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
		 */
		label_format?: Label_format;

		/**
		 * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created.
		 */
		label_id?: string;

		/** The label image resource that was used to create a custom label image. */
		label_image_id?: string;

		/**
		 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
		 */
		label_layout?: Label_layout;

		/**
		 * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is
		 * required by some carriers.
		 */
		outbound_label_id?: string;

		/**
		 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
		 */
		package_code?: string;

		/**
		 * The label's package(s).
		 * > **Note:** Some carriers only allow one package per label.  If you attempt to create a multi-package label for a carrier that doesn't allow it, an error will be returned.
		 */
		packages?: Array<package_>;

		/**
		 * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value.
		 */
		rma_number?: string | null;

		/**
		 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
		 */
		service_code?: string;

		/**
		 * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
		 */
		ship_date?: Date;

		/** The shipment information used to generate the label */
		shipment?: Shipment;

		/**
		 * The cost of shipping, delivery confirmation, and other carrier charges.  This amount **does not** include insurance costs.
		 */
		shipment_cost?: Monetary_value;

		/**
		 * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/)
		 */
		shipment_id?: string;
		status?: Label_status;

		/** Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account. */
		test_label?: boolean | null;

		/**
		 * Indicates whether the shipment is trackable, in which case the `tracking_status` field will reflect the current status and each package will have a `tracking_number`.
		 */
		trackable?: boolean | null;

		/**
		 * The tracking number for the package. Tracking number formats vary across carriers.
		 * Min length: 1
		 */
		tracking_number?: string | null;

		/** The current status of the package, such as `in_transit` or `delivered` */
		tracking_status?: Tracking_status;
		validate_address?: Validate_address;

		/**
		 * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/)
		 */
		voided?: boolean | null;

		/**
		 * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or `null` if the label has not been voided
		 */
		voided_at?: Date;
	}

	/**
	 * A label represents the physical sticker that you affix to a package to ship it.  ShipEngine makes it easy for you to [create labels](https://www.shipengine.com/docs/labels/create-a-label/) and then download them in PDF, PNG, or ZPL format so you can print them.
	 */
	export interface LabelFormProperties {

		/**
		 * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch.
		 */
		batch_id: FormControl<string | null | undefined>,

		/**
		 * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as `fedex`, `dhl_express`, `stamps_com`, etc.
		 */
		carrier_code: FormControl<string | null | undefined>,

		/**
		 * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label
		 */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * The label charge event.
		 */
		charge_event: FormControl<Label_charge_event | null | undefined>,

		/** The date and time that the label was created in ShipEngine. */
		created_at: FormControl<Date | null | undefined>,

		/** The display format that the label should be shown in. */
		display_scheme: FormControl<Display_scheme | null | undefined>,

		/**
		 * Indicates whether this is an international shipment.  That is, the originating country and destination country are different.
		 */
		is_international: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned.
		 */
		is_return_label: FormControl<boolean | null | undefined>,
		label_download_type: FormControl<Label_download_type | null | undefined>,

		/**
		 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
		 */
		label_format: FormControl<Label_format | null | undefined>,

		/**
		 * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created.
		 */
		label_id: FormControl<string | null | undefined>,

		/** The label image resource that was used to create a custom label image. */
		label_image_id: FormControl<string | null | undefined>,

		/**
		 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
		 */
		label_layout: FormControl<Label_layout | null | undefined>,

		/**
		 * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is
		 * required by some carriers.
		 */
		outbound_label_id: FormControl<string | null | undefined>,

		/**
		 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
		 */
		package_code: FormControl<string | null | undefined>,

		/**
		 * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value.
		 */
		rma_number: FormControl<string | null | undefined>,

		/**
		 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
		 */
		service_code: FormControl<string | null | undefined>,

		/**
		 * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/)
		 */
		shipment_id: FormControl<string | null | undefined>,
		status: FormControl<Label_status | null | undefined>,

		/** Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account. */
		test_label: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether the shipment is trackable, in which case the `tracking_status` field will reflect the current status and each package will have a `tracking_number`.
		 */
		trackable: FormControl<boolean | null | undefined>,

		/**
		 * The tracking number for the package. Tracking number formats vary across carriers.
		 * Min length: 1
		 */
		tracking_number: FormControl<string | null | undefined>,

		/** The current status of the package, such as `in_transit` or `delivered` */
		tracking_status: FormControl<Tracking_status | null | undefined>,
		validate_address: FormControl<Validate_address | null | undefined>,

		/**
		 * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/)
		 */
		voided: FormControl<boolean | null | undefined>,

		/**
		 * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or `null` if the label has not been voided
		 */
		voided_at: FormControl<Date | null | undefined>,
	}
	export function CreateLabelFormGroup() {
		return new FormGroup<LabelFormProperties>({
			batch_id: new FormControl<string | null | undefined>(undefined),
			carrier_code: new FormControl<string | null | undefined>(undefined),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			charge_event: new FormControl<Label_charge_event | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			display_scheme: new FormControl<Display_scheme | null | undefined>(undefined),
			is_international: new FormControl<boolean | null | undefined>(undefined),
			is_return_label: new FormControl<boolean | null | undefined>(undefined),
			label_download_type: new FormControl<Label_download_type | null | undefined>(undefined),
			label_format: new FormControl<Label_format | null | undefined>(undefined),
			label_id: new FormControl<string | null | undefined>(undefined),
			label_image_id: new FormControl<string | null | undefined>(undefined),
			label_layout: new FormControl<Label_layout | null | undefined>(undefined),
			outbound_label_id: new FormControl<string | null | undefined>(undefined),
			package_code: new FormControl<string | null | undefined>(undefined),
			rma_number: new FormControl<string | null | undefined>(undefined),
			service_code: new FormControl<string | null | undefined>(undefined),
			ship_date: new FormControl<Date | null | undefined>(undefined),
			shipment_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<Label_status | null | undefined>(undefined),
			test_label: new FormControl<boolean | null | undefined>(undefined),
			trackable: new FormControl<boolean | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			tracking_status: new FormControl<Tracking_status | null | undefined>(undefined),
			validate_address: new FormControl<Validate_address | null | undefined>(undefined),
			voided: new FormControl<boolean | null | undefined>(undefined),
			voided_at: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A link to a related resource */
	export interface Link {
	}

	/** A link to a related resource */
	export interface LinkFormProperties {
	}
	export function CreateLinkFormGroup() {
		return new FormGroup<LinkFormProperties>({
		});

	}


	/**
	 * A package associated with a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
	 */
	export interface package_ {

		/**
		 * A short description of the package content. Required for shipments moving to, from, and through Mexico.
		 * Max length: 35
		 * Min length: 1
		 */
		content_description?: string | null;

		/** The package dimensions */
		dimensions?: Dimensions;

		/**
		 * An external package id.
		 * Min length: 1
		 */
		external_package_id?: string | null;

		/** The form download for any customs that are needed */
		form_download?: Optional_link;

		/**
		 * The insured value of the package.  Requires the `insurance_provider` field of the shipment to be set.
		 */
		insured_value?: Monetary_value;

		/** The label download for the package */
		label_download?: Label_download;
		label_messages?: Label_messages;

		/**
		 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
		 */
		package_code?: string;

		/** A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/) */
		package_id?: string;

		/** Package sequence */
		sequence?: number | null;

		/**
		 * The tracking number for the package.  The format depends on the carrier.
		 */
		tracking_number?: string;

		/**
		 * The package weight
		 * Required
		 */
		weight: Weight;
	}

	/**
	 * A package associated with a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/)
	 */
	export interface package_FormProperties {

		/**
		 * A short description of the package content. Required for shipments moving to, from, and through Mexico.
		 * Max length: 35
		 * Min length: 1
		 */
		content_description: FormControl<string | null | undefined>,

		/**
		 * An external package id.
		 * Min length: 1
		 */
		external_package_id: FormControl<string | null | undefined>,

		/**
		 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
		 */
		package_code: FormControl<string | null | undefined>,

		/** A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/) */
		package_id: FormControl<string | null | undefined>,

		/** Package sequence */
		sequence: FormControl<number | null | undefined>,

		/**
		 * The tracking number for the package.  The format depends on the carrier.
		 */
		tracking_number: FormControl<string | null | undefined>,
	}
	export function Createpackage_FormGroup() {
		return new FormGroup<package_FormProperties>({
			content_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			external_package_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			package_code: new FormControl<string | null | undefined>(undefined),
			package_id: new FormControl<string | null | undefined>(undefined),
			sequence: new FormControl<number | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Custom messages to print on the shipping label for the package.  These are typically used to print invoice numbers, product numbers, or other internal reference numbers.  Not all carriers support label messages. The number of lines and the maximum length of each line also varies by carrier.
	 * |Carrier            |Max lines |Max line length
	 * |-------------------|----------|--------------------
	 * |USPS (Stamps.com)  |3         |60
	 * |FedEx              |3         |35 for the first line. 30 for additional lines.
	 * |UPS                |2         |35
	 * |OnTrac             |2         |25
	 */
	export interface Label_messages {

		/**
		 * The first line of the custom label message.  Some carriers may prefix this line with something like "REF", "Reference", "Trx Ref No.", etc.
		 * Required
		 */
		reference1: string;

		/**
		 * The second line of the custom label message.  Some carriers may prefix this line with something like "INV", "Reference 2", "Trx Ref No.", etc.
		 * Required
		 */
		reference2: string;

		/**
		 * The third line of the custom label message.  Some carriers may prefix this line with something like "PO", "Reference 3", etc.
		 * Required
		 */
		reference3: string;
	}

	/**
	 * Custom messages to print on the shipping label for the package.  These are typically used to print invoice numbers, product numbers, or other internal reference numbers.  Not all carriers support label messages. The number of lines and the maximum length of each line also varies by carrier.
	 * |Carrier            |Max lines |Max line length
	 * |-------------------|----------|--------------------
	 * |USPS (Stamps.com)  |3         |60
	 * |FedEx              |3         |35 for the first line. 30 for additional lines.
	 * |UPS                |2         |35
	 * |OnTrac             |2         |25
	 */
	export interface Label_messagesFormProperties {

		/**
		 * The first line of the custom label message.  Some carriers may prefix this line with something like "REF", "Reference", "Trx Ref No.", etc.
		 * Required
		 */
		reference1: FormControl<string | null | undefined>,

		/**
		 * The second line of the custom label message.  Some carriers may prefix this line with something like "INV", "Reference 2", "Trx Ref No.", etc.
		 * Required
		 */
		reference2: FormControl<string | null | undefined>,

		/**
		 * The third line of the custom label message.  Some carriers may prefix this line with something like "PO", "Reference 3", etc.
		 * Required
		 */
		reference3: FormControl<string | null | undefined>,
	}
	export function CreateLabel_messagesFormGroup() {
		return new FormGroup<Label_messagesFormProperties>({
			reference1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
	 * > **Note:** Either `ship_from` or `warehouse_id` must be set.
	 */
	export interface Shipment {
	}

	/**
	 * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
	 * > **Note:** Either `ship_from` or `warehouse_id` must be set.
	 */
	export interface ShipmentFormProperties {
	}
	export function CreateShipmentFormGroup() {
		return new FormGroup<ShipmentFormProperties>({
		});

	}


	/**
	 * The possible statuses that a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/) can be in.
	 * |Status       |Description
	 * |:------------|:-----------------------------------------------------
	 * |`processing` |When labels are created in a [batch](https://www.shipengine.com/docs/labels/bulk/), it may take a few minutes for all of the labels in the batch to be created.  During this period, they will be in `processing` status.
	 * |`completed`  |The label was successfully created
	 * |`error`      |The label could not be created due to an error, such as an invalid delivery address
	 * |`voided`     |The label has been [voided](https://www.shipengine.com/docs/labels/voiding/)
	 */
	export enum Label_status { processing = 'processing', completed = 'completed', error = 'error', voided = 'voided' }


	/** The different statuses that can apply to a shipment. */
	export enum Tracking_status { unknown = 'unknown', in_transit = 'in_transit', error = 'error', delivered = 'delivered' }


	/** A list account images response body */
	export interface List_account_images_response_body {

		/**
		 * Image List
		 * Required
		 * Minimum items: 0
		 */
		images: Array<string>;
	}

	/** A list account images response body */
	export interface List_account_images_response_bodyFormProperties {
	}
	export function CreateList_account_images_response_bodyFormGroup() {
		return new FormGroup<List_account_images_response_bodyFormProperties>({
		});

	}


	/** An account settings list response body */
	export interface List_account_settings_body {
	}

	/** An account settings list response body */
	export interface List_account_settings_bodyFormProperties {
	}
	export function CreateList_account_settings_bodyFormGroup() {
		return new FormGroup<List_account_settings_bodyFormProperties>({
		});

	}

	export interface List_account_settings_images_response_body {
	}
	export interface List_account_settings_images_response_bodyFormProperties {
	}
	export function CreateList_account_settings_images_response_bodyFormGroup() {
		return new FormGroup<List_account_settings_images_response_bodyFormProperties>({
		});

	}


	/** A batch errors response body */
	export interface List_batch_errors_response_body {

		/**
		 * The errors currently associated with the batch
		 * Required
		 */
		errors: Array<Batch_response_error>;

		/** Required */
		links: Pagination_link;
	}

	/** A batch errors response body */
	export interface List_batch_errors_response_bodyFormProperties {
	}
	export function CreateList_batch_errors_response_bodyFormGroup() {
		return new FormGroup<List_batch_errors_response_bodyFormProperties>({
		});

	}


	/** Helpful links to other pages of results */
	export interface Pagination_link {

		/**
		 * The link to the first page of results.  This object will _always_ have an `href` field. If there are no results, then the first page will contain an empty array of items.
		 * Required
		 */
		first: Link;

		/**
		 * The link to the final page of results.  This object will _always_ have an `href` field. If there are no results, then the final page will contain an empty array of items.
		 * Required
		 */
		last: Link;

		/**
		 * The link to the next page of results.  The `href` field will only be set when the `page` is less than `pages`.
		 * Required
		 */
		next: Optional_link;

		/**
		 * The link to the previous page of results.  The `href` field will only be set when the `page` is 2 or greater.
		 * Required
		 */
		prev: Optional_link;
	}

	/** Helpful links to other pages of results */
	export interface Pagination_linkFormProperties {
	}
	export function CreatePagination_linkFormGroup() {
		return new FormGroup<Pagination_linkFormProperties>({
		});

	}


	/** A list batch response body */
	export interface List_batches_response_body {

		/**
		 * Batch List
		 * Required
		 * Minimum items: 0
		 */
		batches: Array<string>;

		/** Required */
		links: Pagination_link;

		/**
		 * The page that is currently being read
		 * Required
		 * Minimum: 1
		 */
		page: number;

		/**
		 * The total number of batch pages the API call returned
		 * Required
		 * Minimum: 1
		 */
		pages: number;

		/**
		 * The total number of batches the API call returned
		 * Required
		 * Minimum: 0
		 */
		total: number;
	}

	/** A list batch response body */
	export interface List_batches_response_bodyFormProperties {

		/**
		 * The page that is currently being read
		 * Required
		 * Minimum: 1
		 */
		page: FormControl<number | null | undefined>,

		/**
		 * The total number of batch pages the API call returned
		 * Required
		 * Minimum: 1
		 */
		pages: FormControl<number | null | undefined>,

		/**
		 * The total number of batches the API call returned
		 * Required
		 * Minimum: 0
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateList_batches_response_bodyFormGroup() {
		return new FormGroup<List_batches_response_bodyFormProperties>({
			page: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** A list carrier package types response body */
	export interface List_carrier_package_types_response_body {

		/** An array of custom package types */
		packages?: Array<string>;
	}

	/** A list carrier package types response body */
	export interface List_carrier_package_types_response_bodyFormProperties {
	}
	export function CreateList_carrier_package_types_response_bodyFormGroup() {
		return new FormGroup<List_carrier_package_types_response_bodyFormProperties>({
		});

	}


	/** A carrier list services response body */
	export interface List_carrier_services_response_body {

		/** An array of services associated with the carrier */
		services?: Array<string>;
	}

	/** A carrier list services response body */
	export interface List_carrier_services_response_bodyFormProperties {
	}
	export function CreateList_carrier_services_response_bodyFormGroup() {
		return new FormGroup<List_carrier_services_response_bodyFormProperties>({
		});

	}


	/** A carrier list response body */
	export interface List_carriers_response_body {

		/**
		 * The carrier response body
		 * Required
		 */
		carriers: Array<string>;
	}

	/** A carrier list response body */
	export interface List_carriers_response_bodyFormProperties {
	}
	export function CreateList_carriers_response_bodyFormGroup() {
		return new FormGroup<List_carriers_response_bodyFormProperties>({
		});

	}


	/** A list label response body */
	export interface List_labels_response_body {

		/**
		 * The labels that matched the query criteria.  If no matching labels were found, then this array is empty; otherwise, it contains one page of results.  The last page of results may have fewer labels than the `page_size`.
		 * Required
		 * Minimum items: 0
		 */
		List_labels_response_bodyLabels: Array<List_labels_response_bodyLabels>;
	}

	/** A list label response body */
	export interface List_labels_response_bodyFormProperties {
	}
	export function CreateList_labels_response_bodyFormGroup() {
		return new FormGroup<List_labels_response_bodyFormProperties>({
		});

	}

	export interface List_labels_response_bodyLabels {

		/**
		 * Additional information some carriers may provide by which to identify a given label in their system.
		 */
		alternative_identifiers?: Array<Alternative_identifier>;

		/**
		 * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch.
		 */
		batch_id?: string;

		/**
		 * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as `fedex`, `dhl_express`, `stamps_com`, etc.
		 */
		carrier_code?: string;

		/**
		 * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label
		 */
		carrier_id?: string;

		/**
		 * The label charge event.
		 */
		charge_event?: Label_charge_event;

		/** The date and time that the label was created in ShipEngine. */
		created_at?: Date;

		/** The display format that the label should be shown in. */
		display_scheme?: Display_scheme;

		/**
		 * The link to download the customs form (a.k.a. commercial invoice) for this shipment, if any.  Forms are in PDF format. This field is null if the shipment does not require a customs form, or if the carrier does not support it.
		 */
		form_download?: Link;

		/**
		 * The link to submit an insurance claim for the shipment.  This field is null if the shipment is not insured or if the insurance provider does not support online claim submission.
		 */
		insurance_claim?: Link;

		/**
		 * The insurance cost for this package.  Add this to the `shipment_cost` field to get the total cost.
		 */
		insurance_cost?: Monetary_value;

		/**
		 * Indicates whether this is an international shipment.  That is, the originating country and destination country are different.
		 */
		is_international?: boolean | null;

		/**
		 * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned.
		 */
		is_return_label?: boolean | null;
		label_download?: Label_download;
		label_download_type?: Label_download_type;

		/**
		 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
		 */
		label_format?: Label_format;

		/**
		 * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created.
		 */
		label_id?: string;

		/** The label image resource that was used to create a custom label image. */
		label_image_id?: string;

		/**
		 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
		 */
		label_layout?: Label_layout;

		/**
		 * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is
		 * required by some carriers.
		 */
		outbound_label_id?: string;

		/**
		 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
		 */
		package_code?: string;

		/**
		 * The label's package(s).
		 * > **Note:** Some carriers only allow one package per label.  If you attempt to create a multi-package label for a carrier that doesn't allow it, an error will be returned.
		 */
		packages?: Array<package_>;

		/**
		 * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value.
		 */
		rma_number?: string | null;

		/**
		 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
		 */
		service_code?: string;

		/**
		 * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
		 */
		ship_date?: Date;

		/** The shipment information used to generate the label */
		shipment?: Shipment;

		/**
		 * The cost of shipping, delivery confirmation, and other carrier charges.  This amount **does not** include insurance costs.
		 */
		shipment_cost?: Monetary_value;

		/**
		 * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/)
		 */
		shipment_id?: string;
		status?: Label_status;

		/** Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account. */
		test_label?: boolean | null;

		/**
		 * Indicates whether the shipment is trackable, in which case the `tracking_status` field will reflect the current status and each package will have a `tracking_number`.
		 */
		trackable?: boolean | null;

		/**
		 * The tracking number for the package. Tracking number formats vary across carriers.
		 * Min length: 1
		 */
		tracking_number?: string | null;

		/** The current status of the package, such as `in_transit` or `delivered` */
		tracking_status?: Tracking_status;
		validate_address?: Validate_address;

		/**
		 * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/)
		 */
		voided?: boolean | null;

		/**
		 * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or `null` if the label has not been voided
		 */
		voided_at?: Date;
	}
	export interface List_labels_response_bodyLabelsFormProperties {

		/**
		 * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch.
		 */
		batch_id: FormControl<string | null | undefined>,

		/**
		 * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as `fedex`, `dhl_express`, `stamps_com`, etc.
		 */
		carrier_code: FormControl<string | null | undefined>,

		/**
		 * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label
		 */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * The label charge event.
		 */
		charge_event: FormControl<Label_charge_event | null | undefined>,

		/** The date and time that the label was created in ShipEngine. */
		created_at: FormControl<Date | null | undefined>,

		/** The display format that the label should be shown in. */
		display_scheme: FormControl<Display_scheme | null | undefined>,

		/**
		 * Indicates whether this is an international shipment.  That is, the originating country and destination country are different.
		 */
		is_international: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned.
		 */
		is_return_label: FormControl<boolean | null | undefined>,
		label_download_type: FormControl<Label_download_type | null | undefined>,

		/**
		 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
		 */
		label_format: FormControl<Label_format | null | undefined>,

		/**
		 * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created.
		 */
		label_id: FormControl<string | null | undefined>,

		/** The label image resource that was used to create a custom label image. */
		label_image_id: FormControl<string | null | undefined>,

		/**
		 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
		 */
		label_layout: FormControl<Label_layout | null | undefined>,

		/**
		 * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is
		 * required by some carriers.
		 */
		outbound_label_id: FormControl<string | null | undefined>,

		/**
		 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type.
		 */
		package_code: FormControl<string | null | undefined>,

		/**
		 * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value.
		 */
		rma_number: FormControl<string | null | undefined>,

		/**
		 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
		 */
		service_code: FormControl<string | null | undefined>,

		/**
		 * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/)
		 */
		shipment_id: FormControl<string | null | undefined>,
		status: FormControl<Label_status | null | undefined>,

		/** Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account. */
		test_label: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether the shipment is trackable, in which case the `tracking_status` field will reflect the current status and each package will have a `tracking_number`.
		 */
		trackable: FormControl<boolean | null | undefined>,

		/**
		 * The tracking number for the package. Tracking number formats vary across carriers.
		 * Min length: 1
		 */
		tracking_number: FormControl<string | null | undefined>,

		/** The current status of the package, such as `in_transit` or `delivered` */
		tracking_status: FormControl<Tracking_status | null | undefined>,
		validate_address: FormControl<Validate_address | null | undefined>,

		/**
		 * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/)
		 */
		voided: FormControl<boolean | null | undefined>,

		/**
		 * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or `null` if the label has not been voided
		 */
		voided_at: FormControl<Date | null | undefined>,
	}
	export function CreateList_labels_response_bodyLabelsFormGroup() {
		return new FormGroup<List_labels_response_bodyLabelsFormProperties>({
			batch_id: new FormControl<string | null | undefined>(undefined),
			carrier_code: new FormControl<string | null | undefined>(undefined),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			charge_event: new FormControl<Label_charge_event | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			display_scheme: new FormControl<Display_scheme | null | undefined>(undefined),
			is_international: new FormControl<boolean | null | undefined>(undefined),
			is_return_label: new FormControl<boolean | null | undefined>(undefined),
			label_download_type: new FormControl<Label_download_type | null | undefined>(undefined),
			label_format: new FormControl<Label_format | null | undefined>(undefined),
			label_id: new FormControl<string | null | undefined>(undefined),
			label_image_id: new FormControl<string | null | undefined>(undefined),
			label_layout: new FormControl<Label_layout | null | undefined>(undefined),
			outbound_label_id: new FormControl<string | null | undefined>(undefined),
			package_code: new FormControl<string | null | undefined>(undefined),
			rma_number: new FormControl<string | null | undefined>(undefined),
			service_code: new FormControl<string | null | undefined>(undefined),
			ship_date: new FormControl<Date | null | undefined>(undefined),
			shipment_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<Label_status | null | undefined>(undefined),
			test_label: new FormControl<boolean | null | undefined>(undefined),
			trackable: new FormControl<boolean | null | undefined>(undefined),
			tracking_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			tracking_status: new FormControl<Tracking_status | null | undefined>(undefined),
			validate_address: new FormControl<Validate_address | null | undefined>(undefined),
			voided: new FormControl<boolean | null | undefined>(undefined),
			voided_at: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A list manifests response body */
	export interface List_manifests_response_body {

		/**
		 * Helpful links to other pages of results
		 * Required
		 */
		links: Pagination_link;

		/**
		 * The list of available manifests
		 * Required
		 */
		manifests: Array<string>;

		/**
		 * Current page of the list manifests results
		 * Required
		 * Minimum: 1
		 */
		page: number;

		/**
		 * Total number of pages for list manifests results
		 * Required
		 * Minimum: 1
		 */
		pages: number;

		/**
		 * The total number of manifests returned
		 * Required
		 * Minimum: 0
		 */
		total: number;
	}

	/** A list manifests response body */
	export interface List_manifests_response_bodyFormProperties {

		/**
		 * Current page of the list manifests results
		 * Required
		 * Minimum: 1
		 */
		page: FormControl<number | null | undefined>,

		/**
		 * Total number of pages for list manifests results
		 * Required
		 * Minimum: 1
		 */
		pages: FormControl<number | null | undefined>,

		/**
		 * The total number of manifests returned
		 * Required
		 * Minimum: 0
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateList_manifests_response_bodyFormGroup() {
		return new FormGroup<List_manifests_response_bodyFormProperties>({
			page: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** A list package types response body */
	export interface List_package_types_response_body {

		/** An array of custom package types */
		packages?: Array<string>;
	}

	/** A list package types response body */
	export interface List_package_types_response_bodyFormProperties {
	}
	export function CreateList_package_types_response_bodyFormGroup() {
		return new FormGroup<List_package_types_response_bodyFormProperties>({
		});

	}


	/** A list pickup response body */
	export interface List_pickup_response_body {

		/**
		 * Helpful links to other pages of results
		 * Required
		 */
		links: Pagination_link;

		/**
		 * Current page of the list pickups results
		 * Required
		 * Minimum: 1
		 */
		page: number;

		/**
		 * Total number of pages for list pickups results
		 * Required
		 * Minimum: 1
		 */
		pages: number;

		/**
		 * An array of pickups associated with the user's account.
		 * Required
		 */
		pickups: Array<string>;

		/**
		 * The total number of pickups returned
		 * Required
		 * Minimum: 0
		 */
		total: number;
	}

	/** A list pickup response body */
	export interface List_pickup_response_bodyFormProperties {

		/**
		 * Current page of the list pickups results
		 * Required
		 * Minimum: 1
		 */
		page: FormControl<number | null | undefined>,

		/**
		 * Total number of pages for list pickups results
		 * Required
		 * Minimum: 1
		 */
		pages: FormControl<number | null | undefined>,

		/**
		 * The total number of pickups returned
		 * Required
		 * Minimum: 0
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateList_pickup_response_bodyFormGroup() {
		return new FormGroup<List_pickup_response_bodyFormProperties>({
			page: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** A list service points response body */
	export interface List_service_points_response_body {

		/** The errors associated with the failed API call */
		errors?: Array<string>;
		lat?: number | null;
		long?: number | null;
		List_service_points_response_bodyService_points?: Array<List_service_points_response_bodyService_points>;
	}

	/** A list service points response body */
	export interface List_service_points_response_bodyFormProperties {
		lat: FormControl<number | null | undefined>,
		long: FormControl<number | null | undefined>,
	}
	export function CreateList_service_points_response_bodyFormGroup() {
		return new FormGroup<List_service_points_response_bodyFormProperties>({
			lat: new FormControl<number | null | undefined>(undefined),
			long: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_points {
		address_line1?: string | null;
		carrier_code?: string | null;
		city_locality?: string | null;
		company_name?: string | null;
		country_code?: string | null;
		distance_in_meters?: number | null;
		features?: Array<string>;
		hours_of_operation?: List_service_points_response_bodyService_pointsHours_of_operation;
		lat?: number | null;
		long?: number | null;
		phone_number?: string | null;
		postal_code?: string | null;
		service_codes?: Array<string>;
		service_point_id?: string | null;
		state_province?: string | null;
		type?: Get_service_point_by_id_response_bodyService_pointType | null;
	}
	export interface List_service_points_response_bodyService_pointsFormProperties {
		address_line1: FormControl<string | null | undefined>,
		carrier_code: FormControl<string | null | undefined>,
		city_locality: FormControl<string | null | undefined>,
		company_name: FormControl<string | null | undefined>,
		country_code: FormControl<string | null | undefined>,
		distance_in_meters: FormControl<number | null | undefined>,
		lat: FormControl<number | null | undefined>,
		long: FormControl<number | null | undefined>,
		phone_number: FormControl<string | null | undefined>,
		postal_code: FormControl<string | null | undefined>,
		service_point_id: FormControl<string | null | undefined>,
		state_province: FormControl<string | null | undefined>,
		type: FormControl<Get_service_point_by_id_response_bodyService_pointType | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsFormProperties>({
			address_line1: new FormControl<string | null | undefined>(undefined),
			carrier_code: new FormControl<string | null | undefined>(undefined),
			city_locality: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			distance_in_meters: new FormControl<number | null | undefined>(undefined),
			lat: new FormControl<number | null | undefined>(undefined),
			long: new FormControl<number | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			service_point_id: new FormControl<string | null | undefined>(undefined),
			state_province: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<Get_service_point_by_id_response_bodyService_pointType | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operation {
		List_service_points_response_bodyService_pointsHours_of_operationFriday?: Array<List_service_points_response_bodyService_pointsHours_of_operationFriday>;
		List_service_points_response_bodyService_pointsHours_of_operationMonday?: Array<List_service_points_response_bodyService_pointsHours_of_operationMonday>;
		List_service_points_response_bodyService_pointsHours_of_operationSaturday?: Array<List_service_points_response_bodyService_pointsHours_of_operationSaturday>;
		List_service_points_response_bodyService_pointsHours_of_operationSunday?: Array<List_service_points_response_bodyService_pointsHours_of_operationSunday>;
		List_service_points_response_bodyService_pointsHours_of_operationThursday?: Array<List_service_points_response_bodyService_pointsHours_of_operationThursday>;
		List_service_points_response_bodyService_pointsHours_of_operationTuesday?: Array<List_service_points_response_bodyService_pointsHours_of_operationTuesday>;
		List_service_points_response_bodyService_pointsHours_of_operationWednesday?: Array<List_service_points_response_bodyService_pointsHours_of_operationWednesday>;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationFormProperties {
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationFormProperties>({
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationFriday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationFridayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationFridayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationFridayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationMonday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationMondayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationMondayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationMondayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationSaturday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationSaturdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationSaturdayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationSaturdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationSunday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationSundayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationSundayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationSundayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationThursday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationThursdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationThursdayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationThursdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationTuesday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationTuesdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationTuesdayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationTuesdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface List_service_points_response_bodyService_pointsHours_of_operationWednesday {
		close?: string | null;
		open?: string | null;
	}
	export interface List_service_points_response_bodyService_pointsHours_of_operationWednesdayFormProperties {
		close: FormControl<string | null | undefined>,
		open: FormControl<string | null | undefined>,
	}
	export function CreateList_service_points_response_bodyService_pointsHours_of_operationWednesdayFormGroup() {
		return new FormGroup<List_service_points_response_bodyService_pointsHours_of_operationWednesdayFormProperties>({
			close: new FormControl<string | null | undefined>(undefined),
			open: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list shipment rates response body */
	export interface List_shipment_rates_response_body {
	}

	/** A list shipment rates response body */
	export interface List_shipment_rates_response_bodyFormProperties {
	}
	export function CreateList_shipment_rates_response_bodyFormGroup() {
		return new FormGroup<List_shipment_rates_response_bodyFormProperties>({
		});

	}


	/** A list shipment response body */
	export interface List_shipments_response_body {

		/** Required */
		links: Pagination_link;

		/**
		 * Required
		 * Minimum: 1
		 */
		page: number;

		/**
		 * Required
		 * Minimum: 1
		 */
		pages: number;

		/**
		 * The list of shipments returned by the api call
		 * Required
		 */
		shipments: Array<string>;

		/**
		 * Total number of shipments returned by the api call
		 * Required
		 * Minimum: 0
		 */
		total: number;
	}

	/** A list shipment response body */
	export interface List_shipments_response_bodyFormProperties {

		/**
		 * Required
		 * Minimum: 1
		 */
		page: FormControl<number | null | undefined>,

		/**
		 * Required
		 * Minimum: 1
		 */
		pages: FormControl<number | null | undefined>,

		/**
		 * Total number of shipments returned by the api call
		 * Required
		 * Minimum: 0
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateList_shipments_response_bodyFormGroup() {
		return new FormGroup<List_shipments_response_bodyFormProperties>({
			page: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** Response body from a successful GET /tags API call */
	export interface List_tags_response_body {

		/** The array of tags returned by the API call */
		tags?: Array<string>;
	}

	/** Response body from a successful GET /tags API call */
	export interface List_tags_response_bodyFormProperties {
	}
	export function CreateList_tags_response_bodyFormGroup() {
		return new FormGroup<List_tags_response_bodyFormProperties>({
		});

	}


	/** A warehouse list response body */
	export interface List_warehouses_response_body {

		/**
		 * The array of warehouses returned by the API call
		 * Required
		 */
		warehouses: Array<string>;
	}

	/** A warehouse list response body */
	export interface List_warehouses_response_bodyFormProperties {
	}
	export function CreateList_warehouses_response_bodyFormGroup() {
		return new FormGroup<List_warehouses_response_bodyFormProperties>({
		});

	}


	/**
	 * Used for combining packages into one scannable form that a carrier can use when picking up a large 
	 * number of shipments
	 */
	export interface Manifest {

		/** A string that uniquely identifies the carrier */
		carrier_id?: string;

		/**
		 * The date-time that the manifest was created
		 * Min length: 1
		 */
		created_at?: Date | null;

		/** A string that uniquely identifies the form */
		form_id?: string;

		/** An array of the label ids used in this manifest. */
		label_ids?: Array<string>;
		manifest_download?: Manifest_download;

		/** A string that uniquely identifies the manifest */
		manifest_id?: string;

		/**
		 * The date-time that the manifests shipments will be picked up
		 * Min length: 1
		 */
		ship_date?: Date | null;

		/**
		 * The number of shipments that are included in this manifest
		 * Minimum: 1
		 */
		shipments?: number | null;

		/**
		 * A string that uniquely identifies the submission
		 * Min length: 1
		 */
		submission_id?: string | null;

		/** A string that uniquely identifies the warehouse */
		warehouse_id?: string;
	}

	/**
	 * Used for combining packages into one scannable form that a carrier can use when picking up a large 
	 * number of shipments
	 */
	export interface ManifestFormProperties {

		/** A string that uniquely identifies the carrier */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * The date-time that the manifest was created
		 * Min length: 1
		 */
		created_at: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies the form */
		form_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the manifest */
		manifest_id: FormControl<string | null | undefined>,

		/**
		 * The date-time that the manifests shipments will be picked up
		 * Min length: 1
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * The number of shipments that are included in this manifest
		 * Minimum: 1
		 */
		shipments: FormControl<number | null | undefined>,

		/**
		 * A string that uniquely identifies the submission
		 * Min length: 1
		 */
		submission_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the warehouse */
		warehouse_id: FormControl<string | null | undefined>,
	}
	export function CreateManifestFormGroup() {
		return new FormGroup<ManifestFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			form_id: new FormControl<string | null | undefined>(undefined),
			manifest_id: new FormControl<string | null | undefined>(undefined),
			ship_date: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			shipments: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			submission_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			warehouse_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A reference to the manifest request */
	export interface Manifest_request {

		/** A string that uniquely identifies a manifest request */
		manifest_request_id?: string;
		status?: Manifest_request_status;
	}

	/** A reference to the manifest request */
	export interface Manifest_requestFormProperties {

		/** A string that uniquely identifies a manifest request */
		manifest_request_id: FormControl<string | null | undefined>,
		status: FormControl<Manifest_request_status | null | undefined>,
	}
	export function CreateManifest_requestFormGroup() {
		return new FormGroup<Manifest_requestFormProperties>({
			manifest_request_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<Manifest_request_status | null | undefined>(undefined),
		});

	}


	/** The possible statuses of a manifest request */
	export enum Manifest_request_status { in_progress = 'in_progress', completed = 'completed' }


	/** An array of manifest resources */
	export interface Manifests {

		/** Resulting Manifests */
		manifests?: Array<Manifest>;
	}

	/** An array of manifest resources */
	export interface ManifestsFormProperties {
	}
	export function CreateManifestsFormGroup() {
		return new FormGroup<ManifestsFormProperties>({
		});

	}


	/** An array of manifest requests */
	export interface Manifests_requests {

		/** Resulting manifest requests with statuses */
		manifest_requests?: Array<Manifest_request>;
	}

	/** An array of manifest requests */
	export interface Manifests_requestsFormProperties {
	}
	export function CreateManifests_requestsFormGroup() {
		return new FormGroup<Manifests_requestsFormProperties>({
		});

	}


	/** A modify batch object */
	export interface Modify_batch {

		/** Array of Rate IDs to be modifed on the batch */
		rate_ids?: Array<string>;

		/** The Shipment Ids to be modified on the batch */
		shipment_ids?: Array<string>;
	}

	/** A modify batch object */
	export interface Modify_batchFormProperties {
	}
	export function CreateModify_batchFormGroup() {
		return new FormGroup<Modify_batchFormProperties>({
		});

	}


	/**
	 * The normalized value of the entity.
	 * Most entity results have a `value` field, which is the normalized value of the entity.  For example, if the substring "john doe" was recognized as a "person" entity, then the value might be normalized to have proper capitalization (e.g. "John Doe").  Or if the substring "ft worth" was recognized as a "city" entity, then the value might be normalized to "Fort Worth".
	 * Some entities have other information in addition to, or instead of a `value`.  For example, a "dimensions" entity will have separate fields for `length`, `width`, `height`, and `unit`.
	 */
	export interface Normalized_entity {
	}

	/**
	 * The normalized value of the entity.
	 * Most entity results have a `value` field, which is the normalized value of the entity.  For example, if the substring "john doe" was recognized as a "person" entity, then the value might be normalized to have proper capitalization (e.g. "John Doe").  Or if the substring "ft worth" was recognized as a "city" entity, then the value might be normalized to "Fort Worth".
	 * Some entities have other information in addition to, or instead of a `value`.  For example, a "dimensions" entity will have separate fields for `length`, `width`, `height`, and `unit`.
	 */
	export interface Normalized_entityFormProperties {
	}
	export function CreateNormalized_entityFormGroup() {
		return new FormGroup<Normalized_entityFormProperties>({
		});

	}


	/** The order sources that are supported by ShipEngine */
	export enum Order_source_name { amazon_ca = 'amazon_ca', amazon_us = 'amazon_us', brightpearl = 'brightpearl', channel_advisor = 'channel_advisor', cratejoy = 'cratejoy', ebay = 'ebay', etsy = 'etsy', jane = 'jane', groupon_goods = 'groupon_goods', magento = 'magento', paypal = 'paypal', seller_active = 'seller_active', shopify = 'shopify', stitch_labs = 'stitch_labs', squarespace = 'squarespace', three_dcart = 'three_dcart', tophatter = 'tophatter', walmart = 'walmart', woo_commerce = 'woo_commerce', volusion = 'volusion' }


	/** A package type that a carrier supports for shipment. */
	export interface Package_type {

		/** Provides a helpful description for the custom package. */
		description?: string | null;

		/** The custom dimensions for the package. */
		dimensions?: Dimensions;

		/**
		 * Required
		 * Min length: 1
		 */
		name: string;

		/** Required */
		package_code: string;

		/** A string that uniquely identifies the package. */
		package_id?: string;
	}

	/** A package type that a carrier supports for shipment. */
	export interface Package_typeFormProperties {

		/** Provides a helpful description for the custom package. */
		description: FormControl<string | null | undefined>,

		/**
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/** Required */
		package_code: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the package. */
		package_id: FormControl<string | null | undefined>,
	}
	export function CreatePackage_typeFormGroup() {
		return new FormGroup<Package_typeFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			package_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			package_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Many ShipEngine endpoints return a paged list of items.  In addition to the returned items, these responses also include information about the total number of items, the number of pages of results, and URLs of other pages of results.
	 */
	export interface Paged_list_response_body {

		/** Required */
		links: Pagination_link;

		/**
		 * The current page number of results.  For example, if there are 80 results, and the page size is 25, then `page` could be 1, 2, 3, or 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.
		 * Required
		 * Minimum: 1
		 */
		page: number;

		/**
		 * The total number of pages of results.  For example, if there are 80 results, and the page size is 25, then `pages` would be 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.  If there are no results, then `pages` will be zero.
		 * Required
		 * Minimum: 0
		 */
		pages: number;

		/**
		 * The total number of items across all pages of results
		 * Required
		 * Minimum: 0
		 */
		total: number;
	}

	/**
	 * Many ShipEngine endpoints return a paged list of items.  In addition to the returned items, these responses also include information about the total number of items, the number of pages of results, and URLs of other pages of results.
	 */
	export interface Paged_list_response_bodyFormProperties {

		/**
		 * The current page number of results.  For example, if there are 80 results, and the page size is 25, then `page` could be 1, 2, 3, or 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.
		 * Required
		 * Minimum: 1
		 */
		page: FormControl<number | null | undefined>,

		/**
		 * The total number of pages of results.  For example, if there are 80 results, and the page size is 25, then `pages` would be 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.  If there are no results, then `pages` will be zero.
		 * Required
		 * Minimum: 0
		 */
		pages: FormControl<number | null | undefined>,

		/**
		 * The total number of items across all pages of results
		 * Required
		 * Minimum: 0
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreatePaged_list_response_bodyFormGroup() {
		return new FormGroup<Paged_list_response_bodyFormProperties>({
			page: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			pages: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/**
	 * The only required field is `text`, which is the text to be parsed. You can optionally also provide an `address` containing already-known values. For example, you may already know the recipient's name, city, and country, and only want to parse the street address into separate lines.
	 */
	export interface Parse_address_request_body {

		/**
		 * You can optionally provide any already-known address values. For example, you may already know the recipient's name, city, and country, and only want to parse the street address into separate lines.
		 */
		address?: Partial_address;

		/**
		 * The unstructured text that contains address-related entities
		 * Required
		 * Min length: 1
		 */
		text: string;
	}

	/**
	 * The only required field is `text`, which is the text to be parsed. You can optionally also provide an `address` containing already-known values. For example, you may already know the recipient's name, city, and country, and only want to parse the street address into separate lines.
	 */
	export interface Parse_address_request_bodyFormProperties {

		/**
		 * The unstructured text that contains address-related entities
		 * Required
		 * Min length: 1
		 */
		text: FormControl<string | null | undefined>,
	}
	export function CreateParse_address_request_bodyFormGroup() {
		return new FormGroup<Parse_address_request_bodyFormProperties>({
			text: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A complete or partial mailing address. */
	export interface Partial_address {

		/**
		 * The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines.
		 * Min length: 1
		 */
		address_line1?: string | null;

		/**
		 * The second line of the street address.  For some addresses, this line may not be needed.
		 * Min length: 1
		 */
		address_line2?: string | null;

		/**
		 * The third line of the street address.  For some addresses, this line may not be needed.
		 * Min length: 1
		 */
		address_line3?: string | null;

		/** Indicates whether this is a residential address. */
		address_residential_indicator?: Address_residential_indicator;

		/**
		 * The name of the city or locality
		 * Min length: 1
		 */
		city_locality?: string | null;

		/**
		 * If this is a business address, then the company name should be specified here.
		 * Min length: 1
		 */
		company_name?: string | null;

		/**
		 * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)
		 */
		country_code?: string;

		/**
		 * Email for the address owner.
		 */
		email?: string | null;

		/**
		 * The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field.
		 * Min length: 1
		 */
		name?: string | null;

		/**
		 * The phone number of a contact person at this address.  The format of this phone number varies depending on the country.
		 * Min length: 1
		 */
		phone?: string | null;
		postal_code?: string;

		/**
		 * The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation.
		 * Min length: 1
		 */
		state_province?: string | null;
	}

	/** A complete or partial mailing address. */
	export interface Partial_addressFormProperties {

		/**
		 * The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines.
		 * Min length: 1
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the street address.  For some addresses, this line may not be needed.
		 * Min length: 1
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The third line of the street address.  For some addresses, this line may not be needed.
		 * Min length: 1
		 */
		address_line3: FormControl<string | null | undefined>,

		/** Indicates whether this is a residential address. */
		address_residential_indicator: FormControl<Address_residential_indicator | null | undefined>,

		/**
		 * The name of the city or locality
		 * Min length: 1
		 */
		city_locality: FormControl<string | null | undefined>,

		/**
		 * If this is a business address, then the company name should be specified here.
		 * Min length: 1
		 */
		company_name: FormControl<string | null | undefined>,

		/**
		 * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)
		 */
		country_code: FormControl<string | null | undefined>,

		/**
		 * Email for the address owner.
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field.
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The phone number of a contact person at this address.  The format of this phone number varies depending on the country.
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation.
		 * Min length: 1
		 */
		state_province: FormControl<string | null | undefined>,
	}
	export function CreatePartial_addressFormGroup() {
		return new FormGroup<Partial_addressFormProperties>({
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			address_residential_indicator: new FormControl<Address_residential_indicator | null | undefined>(undefined),
			city_locality: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			country_code: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			postal_code: new FormControl<string | null | undefined>(undefined),
			state_province: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/**
	 * The parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.
	 */
	export interface Parse_address_response_body {

		/**
		 * The parsed address.  This address may not be complete, depending on how much information was included in the text and how confident the API is about each recognized entity.
		 * > **Note:** The address-recognition API does not currently perform any validation of the parsed address, so we recommend that you use the [address-validation API](https://www.shipengine.com/docs/addresses/validation/) to ensure that the address is correct.
		 * Required
		 */
		address: Partial_address;

		/**
		 * All of the entities that were recognized in the text. An "entity" is a single piece of data, such as a city, a postal code, or an address line.  Each entity includes the original text and the parsed value.
		 * Required
		 * Minimum items: 0
		 */
		entities: Array<Recognized_entity>;

		/**
		 * A confidence score between zero and one that indicates how certain the API is that it understood the text.
		 * Required
		 * Minimum: 0
		 * Maximum: 1
		 */
		score: number;
	}

	/**
	 * The parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.
	 */
	export interface Parse_address_response_bodyFormProperties {

		/**
		 * A confidence score between zero and one that indicates how certain the API is that it understood the text.
		 * Required
		 * Minimum: 0
		 * Maximum: 1
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateParse_address_response_bodyFormGroup() {
		return new FormGroup<Parse_address_response_bodyFormProperties>({
			score: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(1)]),
		});

	}


	/**
	 * An entity is a single piece of data that was recognized in unstructured text.  For example, a city, a postal code, package dimensions, insured value, etc.  Each entity includes the original text and the parsed value.
	 */
	export interface Recognized_entity {

		/**
		 * The index of the last character of this entity within the original text
		 * Required
		 * Minimum: 0
		 */
		end_index: number;

		/**
		 * The normalized value of the entity.
		 * Most entity results have a `value` field, which is the normalized value of the entity.  For example, if the substring "john doe" was recognized as a "person" entity, then the value might be normalized to have proper capitalization (e.g. "John Doe").  Or if the substring "ft worth" was recognized as a "city" entity, then the value might be normalized to "Fort Worth".
		 * Some entities have other information in addition to, or instead of a `value`.  For example, a "dimensions" entity will have separate fields for `length`, `width`, `height`, and `unit`.
		 */
		result?: Normalized_entity;

		/**
		 * A confidence score between zero and one that indicates how certain the API is that it correctly recognized this entity
		 * Required
		 * Minimum: 0
		 * Maximum: 1
		 */
		score: number;

		/**
		 * The index of the first character of this entity within the original text
		 * Required
		 * Minimum: 0
		 */
		start_index: number;

		/**
		 * The substring from the original text that was recognized as this entity
		 * Required
		 * Min length: 1
		 */
		text: string;

		/**
		 * The Entity type (e.g. "weight", "person", "address_line1", etc.)
		 * Required
		 * Min length: 1
		 */
		type: string;
	}

	/**
	 * An entity is a single piece of data that was recognized in unstructured text.  For example, a city, a postal code, package dimensions, insured value, etc.  Each entity includes the original text and the parsed value.
	 */
	export interface Recognized_entityFormProperties {

		/**
		 * The index of the last character of this entity within the original text
		 * Required
		 * Minimum: 0
		 */
		end_index: FormControl<number | null | undefined>,

		/**
		 * A confidence score between zero and one that indicates how certain the API is that it correctly recognized this entity
		 * Required
		 * Minimum: 0
		 * Maximum: 1
		 */
		score: FormControl<number | null | undefined>,

		/**
		 * The index of the first character of this entity within the original text
		 * Required
		 * Minimum: 0
		 */
		start_index: FormControl<number | null | undefined>,

		/**
		 * The substring from the original text that was recognized as this entity
		 * Required
		 * Min length: 1
		 */
		text: FormControl<string | null | undefined>,

		/**
		 * The Entity type (e.g. "weight", "person", "address_line1", etc.)
		 * Required
		 * Min length: 1
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateRecognized_entityFormGroup() {
		return new FormGroup<Recognized_entityFormProperties>({
			end_index: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(1)]),
			start_index: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			text: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/**
	 * The only required field is `text`, which is the text to be parsed. You can optionally also provide a `shipment` containing any already-known values. For example, you probably already know the `ship_from` address, and you may also already know what carrier and service you want to use.
	 */
	export interface Parse_shipment_request_body {

		/**
		 * You can optionally provide a `shipment` object containing any already-known values. For example, you probably already know the `ship_from` address, and you may also already know what carrier and service you want to use.
		 */
		shipment?: Partial_shipment;

		/**
		 * The unstructured text that contains shipping-related entities
		 * Required
		 * Min length: 1
		 */
		text: string;
	}

	/**
	 * The only required field is `text`, which is the text to be parsed. You can optionally also provide a `shipment` containing any already-known values. For example, you probably already know the `ship_from` address, and you may also already know what carrier and service you want to use.
	 */
	export interface Parse_shipment_request_bodyFormProperties {

		/**
		 * The unstructured text that contains shipping-related entities
		 * Required
		 * Min length: 1
		 */
		text: FormControl<string | null | undefined>,
	}
	export function CreateParse_shipment_request_bodyFormGroup() {
		return new FormGroup<Parse_shipment_request_bodyFormProperties>({
			text: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/**
	 * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
	 */
	export interface Partial_shipment {

		/** Advanced shipment options.  These are entirely optional. */
		advanced_options?: Advanced_shipment_options;

		/** The carrier account that is billed for the shipping charges */
		carrier_id?: string;

		/** The type of delivery confirmation that is required for this shipment. */
		confirmation?: Delivery_confirmation;

		/** The date and time that the shipment was created in ShipEngine. */
		created_at?: Date;

		/**
		 * Customs information.  This is usually only needed for international shipments.
		 */
		customs?: International_shipment_options;

		/** ID that the Order Source assigned */
		external_order_id?: string | null;

		/**
		 * A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
		 * > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
		 * Max length: 50
		 */
		external_shipment_id?: string | null;

		/**
		 * The insurance provider to use for any insured packages in the shipment.
		 */
		insurance_provider?: Insurance_provider;

		/**
		 * An optional indicator if the shipment is intended to be a return. Defaults to false if not provided.
		 */
		is_return?: boolean | null;

		/**
		 * Describe the packages included in this shipment as related to potential metadata that was imported from
		 * external order sources
		 */
		items?: Array<string>;

		/** The date and time that the shipment was created or last modified. */
		modified_at?: Date;
		order_source_code?: Order_source_name;

		/** Indicates if the package will be picked up or dropped off by the carrier */
		origin_type?: Origin_type;

		/**
		 * The packages in the shipment.
		 * > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
		 * Minimum items: 1
		 */
		packages?: Array<string>;

		/**
		 * The return address for this shipment.  Defaults to the `ship_from` address.
		 */
		return_to?: Shipping_address;

		/**
		 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
		 */
		service_code?: string;

		/**
		 * The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
		 */
		ship_date?: Date;

		/**
		 * The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time.
		 */
		ship_from?: Shipping_address;

		/** The recipient's mailing address */
		ship_to?: Shipping_address;

		/** A string that uniquely identifies the shipment */
		shipment_id?: string;

		/**
		 * A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
		 * > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
		 * Max length: 50
		 */
		shipment_number?: string | null;

		/** The current status of the shipment */
		shipment_status?: Shipment_status;

		/**
		 * Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags.
		 * Minimum items: 0
		 */
		tags?: Array<string>;
		tax_identifiers?: Array<string>;

		/** The combined weight of all packages in the shipment */
		total_weight?: Weight;

		/**
		 * The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
		 */
		warehouse_id?: string;
	}

	/**
	 * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
	 */
	export interface Partial_shipmentFormProperties {

		/** The carrier account that is billed for the shipping charges */
		carrier_id: FormControl<string | null | undefined>,

		/** The type of delivery confirmation that is required for this shipment. */
		confirmation: FormControl<Delivery_confirmation | null | undefined>,

		/** The date and time that the shipment was created in ShipEngine. */
		created_at: FormControl<Date | null | undefined>,

		/** ID that the Order Source assigned */
		external_order_id: FormControl<string | null | undefined>,

		/**
		 * A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
		 * > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
		 * Max length: 50
		 */
		external_shipment_id: FormControl<string | null | undefined>,

		/**
		 * The insurance provider to use for any insured packages in the shipment.
		 */
		insurance_provider: FormControl<Insurance_provider | null | undefined>,

		/**
		 * An optional indicator if the shipment is intended to be a return. Defaults to false if not provided.
		 */
		is_return: FormControl<boolean | null | undefined>,

		/** The date and time that the shipment was created or last modified. */
		modified_at: FormControl<Date | null | undefined>,
		order_source_code: FormControl<Order_source_name | null | undefined>,

		/** Indicates if the package will be picked up or dropped off by the carrier */
		origin_type: FormControl<Origin_type | null | undefined>,

		/**
		 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
		 */
		service_code: FormControl<string | null | undefined>,

		/**
		 * The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
		 */
		ship_date: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies the shipment */
		shipment_id: FormControl<string | null | undefined>,

		/**
		 * A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
		 * > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
		 * Max length: 50
		 */
		shipment_number: FormControl<string | null | undefined>,

		/** The current status of the shipment */
		shipment_status: FormControl<Shipment_status | null | undefined>,

		/**
		 * The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
		 */
		warehouse_id: FormControl<string | null | undefined>,
	}
	export function CreatePartial_shipmentFormGroup() {
		return new FormGroup<Partial_shipmentFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined),
			confirmation: new FormControl<Delivery_confirmation | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			external_order_id: new FormControl<string | null | undefined>(undefined),
			external_shipment_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			insurance_provider: new FormControl<Insurance_provider | null | undefined>(undefined),
			is_return: new FormControl<boolean | null | undefined>(undefined),
			modified_at: new FormControl<Date | null | undefined>(undefined),
			order_source_code: new FormControl<Order_source_name | null | undefined>(undefined),
			origin_type: new FormControl<Origin_type | null | undefined>(undefined),
			service_code: new FormControl<string | null | undefined>(undefined),
			ship_date: new FormControl<Date | null | undefined>(undefined),
			shipment_id: new FormControl<string | null | undefined>(undefined),
			shipment_number: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			shipment_status: new FormControl<Shipment_status | null | undefined>(undefined),
			warehouse_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Shipping_address {
	}
	export interface Shipping_addressFormProperties {
	}
	export function CreateShipping_addressFormGroup() {
		return new FormGroup<Shipping_addressFormProperties>({
		});

	}


	/** The possible shipment status values */
	export enum Shipment_status { pending = 'pending', processing = 'processing', label_purchased = 'label_purchased', cancelled = 'cancelled' }


	/**
	 * The parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.
	 */
	export interface Parse_shipment_response_body {

		/**
		 * All of the entities that were recognized in the text. An "entity" is a single piece of data, such as a city, a postal code, a carrier name, or a package weight.  Each entity includes the original text and the parsed value.
		 * Required
		 * Minimum items: 0
		 */
		entities: Array<Recognized_entity>;

		/**
		 * A confidence score between zero and one that indicates how certain the API is that it understood the text.
		 * Required
		 * Minimum: 0
		 * Maximum: 1
		 */
		score: number;

		/**
		 * The parsed shipment.  This shipment may not be complete, depending on how much information was included in the text and how confident the API is about each recognized entity.
		 * > **Note:** The shipment-recognition API does not currently perform any validation of the parsed addresses, so we recommend that you use the [address-validation API](https://www.shipengine.com/docs/addresses/validation/) to ensure that the addresses are correct.
		 * Required
		 */
		shipment: Partial_shipment;
	}

	/**
	 * The parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.
	 */
	export interface Parse_shipment_response_bodyFormProperties {

		/**
		 * A confidence score between zero and one that indicates how certain the API is that it understood the text.
		 * Required
		 * Minimum: 0
		 * Maximum: 1
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateParse_shipment_response_bodyFormGroup() {
		return new FormGroup<Parse_shipment_response_bodyFormProperties>({
			score: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(1)]),
		});

	}


	/** A complete or partial mailing address. */
	export interface Partial_shipping_address {

		/**
		 * Additional text about how to handle the shipment at this address.
		 * Min length: 1
		 */
		instructions?: string | null;
	}

	/** A complete or partial mailing address. */
	export interface Partial_shipping_addressFormProperties {

		/**
		 * Additional text about how to handle the shipment at this address.
		 * Min length: 1
		 */
		instructions: FormControl<string | null | undefined>,
	}
	export function CreatePartial_shipping_addressFormGroup() {
		return new FormGroup<Partial_shipping_addressFormProperties>({
			instructions: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/**
	 * The information necessary to schedule a package pickup
	 */
	export interface Pickup {

		/** The date and time that the pickup was cancelled in ShipEngine. */
		cancelled_at?: Date;

		/** The carrier_id associated with the pickup */
		carrier_id?: string;

		/** The carrier confirmation number for the scheduled pickup. */
		confirmation_number?: string | null;
		contact_details?: Contact_details;

		/** The date and time that the pickup was created in ShipEngine. */
		created_at?: Date;

		/** Label IDs that will be included in the pickup request */
		label_ids?: Array<string>;
		pickup_address?: Address;
		pickup_id?: string;

		/**
		 * Used by some carriers to give special instructions for a package pickup
		 * Min length: 0
		 */
		pickup_notes?: string | null;

		/** The desired time range for the package pickup. */
		pickup_window?: Pickup_window;

		/**
		 * An array of available pickup windows. Carriers can return multiple times that they will pickup packages.
		 */
		pickup_windows?: Array<string>;

		/** The warehouse_id associated with the pickup */
		warehouse_id?: string;
	}

	/**
	 * The information necessary to schedule a package pickup
	 */
	export interface PickupFormProperties {

		/** The date and time that the pickup was cancelled in ShipEngine. */
		cancelled_at: FormControl<Date | null | undefined>,

		/** The carrier_id associated with the pickup */
		carrier_id: FormControl<string | null | undefined>,

		/** The carrier confirmation number for the scheduled pickup. */
		confirmation_number: FormControl<string | null | undefined>,

		/** The date and time that the pickup was created in ShipEngine. */
		created_at: FormControl<Date | null | undefined>,
		pickup_id: FormControl<string | null | undefined>,

		/**
		 * Used by some carriers to give special instructions for a package pickup
		 * Min length: 0
		 */
		pickup_notes: FormControl<string | null | undefined>,

		/** The warehouse_id associated with the pickup */
		warehouse_id: FormControl<string | null | undefined>,
	}
	export function CreatePickupFormGroup() {
		return new FormGroup<PickupFormProperties>({
			cancelled_at: new FormControl<Date | null | undefined>(undefined),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			confirmation_number: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			pickup_id: new FormControl<string | null | undefined>(undefined),
			pickup_notes: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			warehouse_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The desired time range for the package pickup. */
	export interface Pickup_window {

		/** Required */
		end_at: Date;

		/** Required */
		start_at: Date;
	}

	/** The desired time range for the package pickup. */
	export interface Pickup_windowFormProperties {

		/** Required */
		end_at: FormControl<Date | null | undefined>,

		/** Required */
		start_at: FormControl<Date | null | undefined>,
	}
	export function CreatePickup_windowFormGroup() {
		return new FormGroup<Pickup_windowFormProperties>({
			end_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			start_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A pickup response body */
	export interface Pickup_response_body {
	}

	/** A pickup response body */
	export interface Pickup_response_bodyFormProperties {
	}
	export function CreatePickup_response_bodyFormGroup() {
		return new FormGroup<Pickup_response_bodyFormProperties>({
		});

	}

	export interface Pickup_windows {
		end_at?: Date;
		start_at?: Date;
	}
	export interface Pickup_windowsFormProperties {
		end_at: FormControl<Date | null | undefined>,
		start_at: FormControl<Date | null | undefined>,
	}
	export function CreatePickup_windowsFormGroup() {
		return new FormGroup<Pickup_windowsFormProperties>({
			end_at: new FormControl<Date | null | undefined>(undefined),
			start_at: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A process batch request body */
	export interface Process_batch_request_body {

		/** The display format that the label should be shown in. */
		display_scheme?: Display_scheme;
		label_format?: Label_format;
		label_layout?: string | null;

		/** The Ship date the batch is being processed for */
		ship_date?: Date;
	}

	/** A process batch request body */
	export interface Process_batch_request_bodyFormProperties {

		/** The display format that the label should be shown in. */
		display_scheme: FormControl<Display_scheme | null | undefined>,
		label_format: FormControl<Label_format | null | undefined>,
		label_layout: FormControl<string | null | undefined>,

		/** The Ship date the batch is being processed for */
		ship_date: FormControl<Date | null | undefined>,
	}
	export function CreateProcess_batch_request_bodyFormGroup() {
		return new FormGroup<Process_batch_request_bodyFormProperties>({
			display_scheme: new FormControl<Display_scheme | null | undefined>(undefined),
			label_format: new FormControl<Label_format | null | undefined>(undefined),
			label_layout: new FormControl<string | null | undefined>(undefined),
			ship_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A purchase label without shipment resource */
	export interface Purchase_label_without_shipment {

		/** The display format that the label should be shown in. */
		display_scheme?: Display_scheme;
		label_download_type?: Label_download_type;
		label_format?: Label_format;
		label_layout?: Label_layout;
		validate_address?: Validate_address;
	}

	/** A purchase label without shipment resource */
	export interface Purchase_label_without_shipmentFormProperties {

		/** The display format that the label should be shown in. */
		display_scheme: FormControl<Display_scheme | null | undefined>,
		label_download_type: FormControl<Label_download_type | null | undefined>,
		label_format: FormControl<Label_format | null | undefined>,
		label_layout: FormControl<Label_layout | null | undefined>,
		validate_address: FormControl<Validate_address | null | undefined>,
	}
	export function CreatePurchase_label_without_shipmentFormGroup() {
		return new FormGroup<Purchase_label_without_shipmentFormProperties>({
			display_scheme: new FormControl<Display_scheme | null | undefined>(undefined),
			label_download_type: new FormControl<Label_download_type | null | undefined>(undefined),
			label_format: new FormControl<Label_format | null | undefined>(undefined),
			label_layout: new FormControl<Label_layout | null | undefined>(undefined),
			validate_address: new FormControl<Validate_address | null | undefined>(undefined),
		});

	}


	/** A rate */
	export interface Rate {

		/**
		 * carrier code
		 * Required
		 * Min length: 1
		 */
		carrier_code: string;

		/**
		 * The carrier delivery days
		 * Min length: 1
		 */
		carrier_delivery_days?: string | null;

		/**
		 * carrier friendly name
		 * Required
		 * Min length: 1
		 */
		carrier_friendly_name: string;

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: string;

		/**
		 * carrier nickname
		 * Required
		 * Min length: 1
		 */
		carrier_nickname: string;

		/**
		 * The confirmation amount
		 * Required
		 */
		confirmation_amount: Monetary_value;

		/**
		 * The number of days estimated for delivery, this will show the _actual_ delivery
		 * time if for example, the package gets shipped on a Friday
		 * Minimum: 1
		 */
		delivery_days?: number | null;

		/**
		 * The error messages
		 * Required
		 * Minimum items: 0
		 */
		error_messages: Array<string>;
		estimated_delivery_date?: Date;

		/**
		 * Indicates if the rate is guaranteed.
		 * Required
		 */
		guaranteed_service: boolean;

		/**
		 * The insurance amount
		 * Required
		 */
		insurance_amount: Monetary_value;

		/**
		 * Indicates if the rates been negotiated
		 * Required
		 */
		negotiated_rate: boolean;

		/**
		 * Any other charges associated with this rate
		 * Required
		 */
		other_amount: Monetary_value;

		/**
		 * package type that this rate was estimated for
		 * Required
		 * Min length: 1
		 */
		package_type: string;

		/**
		 * A string that uniquely identifies the rate
		 * Required
		 */
		rate_id: string;

		/** Required */
		rate_type: Rate_type;

		/**
		 * service code for the rate
		 * Required
		 * Min length: 1
		 */
		service_code: string;

		/**
		 * service type
		 * Required
		 * Min length: 1
		 */
		service_type: string;

		/**
		 * ship date
		 * Min length: 1
		 */
		ship_date?: Date | null;

		/**
		 * The shipping amount
		 * Required
		 */
		shipping_amount: Monetary_value;

		/** Tariff and additional taxes associated with an international shipment. */
		tax_amount?: Monetary_value;

		/**
		 * Indicates if rate is trackable
		 * Required
		 */
		trackable: boolean;

		/** Required */
		validation_status: Validation_status;

		/**
		 * The warning messages
		 * Required
		 * Minimum items: 0
		 */
		warning_messages: Array<string>;

		/**
		 * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of
		 * custom zones that vary depending upon the ship_to and ship_from location
		 * Required
		 * Minimum: 0
		 */
		zone: number;
	}

	/** A rate */
	export interface RateFormProperties {

		/**
		 * carrier code
		 * Required
		 * Min length: 1
		 */
		carrier_code: FormControl<string | null | undefined>,

		/**
		 * The carrier delivery days
		 * Min length: 1
		 */
		carrier_delivery_days: FormControl<string | null | undefined>,

		/**
		 * carrier friendly name
		 * Required
		 * Min length: 1
		 */
		carrier_friendly_name: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * carrier nickname
		 * Required
		 * Min length: 1
		 */
		carrier_nickname: FormControl<string | null | undefined>,

		/**
		 * The number of days estimated for delivery, this will show the _actual_ delivery
		 * time if for example, the package gets shipped on a Friday
		 * Minimum: 1
		 */
		delivery_days: FormControl<number | null | undefined>,
		estimated_delivery_date: FormControl<Date | null | undefined>,

		/**
		 * Indicates if the rate is guaranteed.
		 * Required
		 */
		guaranteed_service: FormControl<boolean | null | undefined>,

		/**
		 * Indicates if the rates been negotiated
		 * Required
		 */
		negotiated_rate: FormControl<boolean | null | undefined>,

		/**
		 * package type that this rate was estimated for
		 * Required
		 * Min length: 1
		 */
		package_type: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the rate
		 * Required
		 */
		rate_id: FormControl<string | null | undefined>,

		/** Required */
		rate_type: FormControl<Rate_type | null | undefined>,

		/**
		 * service code for the rate
		 * Required
		 * Min length: 1
		 */
		service_code: FormControl<string | null | undefined>,

		/**
		 * service type
		 * Required
		 * Min length: 1
		 */
		service_type: FormControl<string | null | undefined>,

		/**
		 * ship date
		 * Min length: 1
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * Indicates if rate is trackable
		 * Required
		 */
		trackable: FormControl<boolean | null | undefined>,

		/** Required */
		validation_status: FormControl<Validation_status | null | undefined>,

		/**
		 * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of
		 * custom zones that vary depending upon the ship_to and ship_from location
		 * Required
		 * Minimum: 0
		 */
		zone: FormControl<number | null | undefined>,
	}
	export function CreateRateFormGroup() {
		return new FormGroup<RateFormProperties>({
			carrier_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			carrier_delivery_days: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			carrier_friendly_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			carrier_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			carrier_nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			delivery_days: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			estimated_delivery_date: new FormControl<Date | null | undefined>(undefined),
			guaranteed_service: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			negotiated_rate: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			package_type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			rate_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rate_type: new FormControl<Rate_type | null | undefined>(undefined, [Validators.required]),
			service_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			service_type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			ship_date: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			trackable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			validation_status: new FormControl<Validation_status | null | undefined>(undefined, [Validators.required]),
			zone: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}


	/** The possible rate type values */
	export enum Rate_type { check = 'check', shipment = 'shipment' }


	/** The possible validation status values */
	export enum Validation_status { valid = 'valid', invalid = 'invalid', has_warnings = 'has_warnings', unknown = 'unknown' }


	/** A rate estimate */
	export interface Rate_estimate {

		/**
		 * carrier code
		 * Required
		 * Min length: 1
		 */
		carrier_code: string;

		/**
		 * The carrier delivery days
		 * Min length: 1
		 */
		carrier_delivery_days?: string | null;

		/**
		 * carrier friendly name
		 * Required
		 * Min length: 1
		 */
		carrier_friendly_name: string;

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: string;

		/**
		 * carrier nickname
		 * Required
		 * Min length: 1
		 */
		carrier_nickname: string;

		/**
		 * The confirmation amount
		 * Required
		 */
		confirmation_amount: Monetary_value;

		/**
		 * The number of days estimated for delivery, this will show the _actual_ delivery
		 * time if for example, the package gets shipped on a Friday
		 * Minimum: 1
		 */
		delivery_days?: number | null;

		/**
		 * The error messages
		 * Required
		 * Minimum items: 0
		 */
		error_messages: Array<string>;
		estimated_delivery_date?: Date;

		/**
		 * Indicates if the rate is guaranteed.
		 * Required
		 */
		guaranteed_service: boolean;

		/**
		 * The insurance amount
		 * Required
		 */
		insurance_amount: Monetary_value;

		/**
		 * Indicates if the rates been negotiated
		 * Required
		 */
		negotiated_rate: boolean;

		/**
		 * Any other charges associated with this rate
		 * Required
		 */
		other_amount: Monetary_value;

		/**
		 * package type that this rate was estimated for
		 * Required
		 * Min length: 1
		 */
		package_type: string;

		/** Required */
		rate_type: Rate_type;

		/**
		 * service code for the rate
		 * Required
		 * Min length: 1
		 */
		service_code: string;

		/**
		 * service type
		 * Required
		 * Min length: 1
		 */
		service_type: string;

		/**
		 * ship date
		 * Min length: 1
		 */
		ship_date?: Date | null;

		/**
		 * The shipping amount
		 * Required
		 */
		shipping_amount: Monetary_value;

		/** Tariff and additional taxes associated with an international shipment. */
		tax_amount?: Monetary_value;

		/**
		 * Indicates if rate is trackable
		 * Required
		 */
		trackable: boolean;

		/** Required */
		validation_status: Validation_status;

		/**
		 * The warning messages
		 * Required
		 * Minimum items: 0
		 */
		warning_messages: Array<string>;

		/**
		 * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of
		 * custom zones that vary depending upon the ship_to and ship_from location
		 * Required
		 * Minimum: 0
		 */
		zone: number;
	}

	/** A rate estimate */
	export interface Rate_estimateFormProperties {

		/**
		 * carrier code
		 * Required
		 * Min length: 1
		 */
		carrier_code: FormControl<string | null | undefined>,

		/**
		 * The carrier delivery days
		 * Min length: 1
		 */
		carrier_delivery_days: FormControl<string | null | undefined>,

		/**
		 * carrier friendly name
		 * Required
		 * Min length: 1
		 */
		carrier_friendly_name: FormControl<string | null | undefined>,

		/**
		 * A string that uniquely identifies the carrier
		 * Required
		 */
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * carrier nickname
		 * Required
		 * Min length: 1
		 */
		carrier_nickname: FormControl<string | null | undefined>,

		/**
		 * The number of days estimated for delivery, this will show the _actual_ delivery
		 * time if for example, the package gets shipped on a Friday
		 * Minimum: 1
		 */
		delivery_days: FormControl<number | null | undefined>,
		estimated_delivery_date: FormControl<Date | null | undefined>,

		/**
		 * Indicates if the rate is guaranteed.
		 * Required
		 */
		guaranteed_service: FormControl<boolean | null | undefined>,

		/**
		 * Indicates if the rates been negotiated
		 * Required
		 */
		negotiated_rate: FormControl<boolean | null | undefined>,

		/**
		 * package type that this rate was estimated for
		 * Required
		 * Min length: 1
		 */
		package_type: FormControl<string | null | undefined>,

		/** Required */
		rate_type: FormControl<Rate_type | null | undefined>,

		/**
		 * service code for the rate
		 * Required
		 * Min length: 1
		 */
		service_code: FormControl<string | null | undefined>,

		/**
		 * service type
		 * Required
		 * Min length: 1
		 */
		service_type: FormControl<string | null | undefined>,

		/**
		 * ship date
		 * Min length: 1
		 */
		ship_date: FormControl<Date | null | undefined>,

		/**
		 * Indicates if rate is trackable
		 * Required
		 */
		trackable: FormControl<boolean | null | undefined>,

		/** Required */
		validation_status: FormControl<Validation_status | null | undefined>,

		/**
		 * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of
		 * custom zones that vary depending upon the ship_to and ship_from location
		 * Required
		 * Minimum: 0
		 */
		zone: FormControl<number | null | undefined>,
	}
	export function CreateRate_estimateFormGroup() {
		return new FormGroup<Rate_estimateFormProperties>({
			carrier_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			carrier_delivery_days: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			carrier_friendly_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			carrier_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			carrier_nickname: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			delivery_days: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			estimated_delivery_date: new FormControl<Date | null | undefined>(undefined),
			guaranteed_service: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			negotiated_rate: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			package_type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			rate_type: new FormControl<Rate_type | null | undefined>(undefined, [Validators.required]),
			service_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			service_type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			ship_date: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			trackable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			validation_status: new FormControl<Validation_status | null | undefined>(undefined, [Validators.required]),
			zone: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}

	export interface Rate_estimate_by_carrier_id {

		/** A string that uniquely identifies the carrier */
		carrier_id?: string;
	}
	export interface Rate_estimate_by_carrier_idFormProperties {

		/** A string that uniquely identifies the carrier */
		carrier_id: FormControl<string | null | undefined>,
	}
	export function CreateRate_estimate_by_carrier_idFormGroup() {
		return new FormGroup<Rate_estimate_by_carrier_idFormProperties>({
			carrier_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Rate_estimate_by_carrier_ids {

		/**
		 * Array of Carrier Ids
		 * Minimum items: 1
		 */
		carrier_ids?: Array<string>;
	}
	export interface Rate_estimate_by_carrier_idsFormProperties {
	}
	export function CreateRate_estimate_by_carrier_idsFormGroup() {
		return new FormGroup<Rate_estimate_by_carrier_idsFormProperties>({
		});

	}

	export interface Rate_estimate_options {
		address_residential_indicator?: Address_residential_indicator;
		confirmation?: Delivery_confirmation;

		/** The dimensions of the package */
		dimensions?: Dimensions;

		/**
		 * from postal code
		 * Min length: 1
		 */
		from_city_locality?: string | null;
		from_country_code?: string;
		from_postal_code?: string;

		/**
		 * From state province
		 * Min length: 1
		 */
		from_state_province?: string | null;

		/** ship date */
		ship_date?: string | null;

		/**
		 * The city locality the package is being shipped to
		 * Min length: 1
		 */
		to_city_locality?: string | null;
		to_country_code?: string;
		to_postal_code?: string;

		/**
		 * To state province
		 * Min length: 1
		 */
		to_state_province?: string | null;

		/** The weight of the package */
		weight?: Weight;
	}
	export interface Rate_estimate_optionsFormProperties {
		address_residential_indicator: FormControl<Address_residential_indicator | null | undefined>,
		confirmation: FormControl<Delivery_confirmation | null | undefined>,

		/**
		 * from postal code
		 * Min length: 1
		 */
		from_city_locality: FormControl<string | null | undefined>,
		from_country_code: FormControl<string | null | undefined>,
		from_postal_code: FormControl<string | null | undefined>,

		/**
		 * From state province
		 * Min length: 1
		 */
		from_state_province: FormControl<string | null | undefined>,

		/** ship date */
		ship_date: FormControl<string | null | undefined>,

		/**
		 * The city locality the package is being shipped to
		 * Min length: 1
		 */
		to_city_locality: FormControl<string | null | undefined>,
		to_country_code: FormControl<string | null | undefined>,
		to_postal_code: FormControl<string | null | undefined>,

		/**
		 * To state province
		 * Min length: 1
		 */
		to_state_province: FormControl<string | null | undefined>,
	}
	export function CreateRate_estimate_optionsFormGroup() {
		return new FormGroup<Rate_estimate_optionsFormProperties>({
			address_residential_indicator: new FormControl<Address_residential_indicator | null | undefined>(undefined),
			confirmation: new FormControl<Delivery_confirmation | null | undefined>(undefined),
			from_city_locality: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			from_country_code: new FormControl<string | null | undefined>(undefined),
			from_postal_code: new FormControl<string | null | undefined>(undefined),
			from_state_province: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			ship_date: new FormControl<string | null | undefined>(undefined),
			to_city_locality: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			to_country_code: new FormControl<string | null | undefined>(undefined),
			to_postal_code: new FormControl<string | null | undefined>(undefined),
			to_state_province: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}


	/** A rate request body */
	export interface Rate_request_body {

		/** Calculate the duties and tariffs for cross border shipments. */
		calculate_tax_amount?: boolean | null;

		/**
		 * Array of carrier ids to get rates for
		 * Required
		 * Minimum items: 1
		 */
		carrier_ids: Array<string>;

		/** Indicate if it's a return shipment */
		is_return?: boolean | null;
		package_types?: Array<string>;
		preferred_currency?: string;
		service_codes?: Array<string>;
	}

	/** A rate request body */
	export interface Rate_request_bodyFormProperties {

		/** Calculate the duties and tariffs for cross border shipments. */
		calculate_tax_amount: FormControl<boolean | null | undefined>,

		/** Indicate if it's a return shipment */
		is_return: FormControl<boolean | null | undefined>,
		preferred_currency: FormControl<string | null | undefined>,
	}
	export function CreateRate_request_bodyFormGroup() {
		return new FormGroup<Rate_request_bodyFormProperties>({
			calculate_tax_amount: new FormControl<boolean | null | undefined>(undefined),
			is_return: new FormControl<boolean | null | undefined>(undefined),
			preferred_currency: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Rate_request_by_shipment_ids {

		/**
		 * The array of shipment IDs
		 * Required
		 */
		shipment_ids: Array<string>;
	}
	export interface Rate_request_by_shipment_idsFormProperties {
	}
	export function CreateRate_request_by_shipment_idsFormGroup() {
		return new FormGroup<Rate_request_by_shipment_idsFormProperties>({
		});

	}

	export interface Rate_request_by_shipments {

		/**
		 * The array of shipments to get bulk rate estimates for
		 * Required
		 * Minimum items: 1
		 */
		shipments: Array<string>;
	}
	export interface Rate_request_by_shipmentsFormProperties {
	}
	export function CreateRate_request_by_shipmentsFormGroup() {
		return new FormGroup<Rate_request_by_shipmentsFormProperties>({
		});

	}

	export interface Rate_request_options {

		/** The rate options */
		rate_options?: Rate_request_body;
	}
	export interface Rate_request_optionsFormProperties {
	}
	export function CreateRate_request_optionsFormGroup() {
		return new FormGroup<Rate_request_optionsFormProperties>({
		});

	}

	export interface Rate_request_rate_options {

		/** The rate options */
		rate_options?: Rate_request_body;
	}
	export interface Rate_request_rate_optionsFormProperties {
	}
	export function CreateRate_request_rate_optionsFormGroup() {
		return new FormGroup<Rate_request_rate_optionsFormProperties>({
		});

	}

	export interface Rate_response {

		/** The rates response */
		rate_response?: Rates_information;
	}
	export interface Rate_responseFormProperties {
	}
	export function CreateRate_responseFormGroup() {
		return new FormGroup<Rate_responseFormProperties>({
		});

	}


	/** A rates information resource */
	export interface Rates_information {

		/** When the rate was created */
		created_at?: Date | null;
		errors?: Array<string>;

		/** An array of invalid shipment rates */
		invalid_rates?: Array<string>;

		/** A string that uniquely identifies the rate request */
		rate_request_id?: string;

		/** An array of shipment rates */
		rates?: Array<string>;

		/** A string that uniquely identifies the shipment */
		shipment_id?: string;
		status?: Rate_response_status;
	}

	/** A rates information resource */
	export interface Rates_informationFormProperties {

		/** When the rate was created */
		created_at: FormControl<Date | null | undefined>,

		/** A string that uniquely identifies the rate request */
		rate_request_id: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the shipment */
		shipment_id: FormControl<string | null | undefined>,
		status: FormControl<Rate_response_status | null | undefined>,
	}
	export function CreateRates_informationFormGroup() {
		return new FormGroup<Rates_informationFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			rate_request_id: new FormControl<string | null | undefined>(undefined),
			shipment_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<Rate_response_status | null | undefined>(undefined),
		});

	}


	/** The resource to return a redirect URL to. */
	export enum Redirect { 'shipengine-dashboard' = 'shipengine-dashboard' }


	/** A modify batch request body */
	export interface Remove_from_batch_request_body {
	}

	/** A modify batch request body */
	export interface Remove_from_batch_request_bodyFormProperties {
	}
	export function CreateRemove_from_batch_request_bodyFormGroup() {
		return new FormGroup<Remove_from_batch_request_bodyFormProperties>({
		});

	}


	/** A schedule pickup request body */
	export interface Schedule_pickup_request_body {
	}

	/** A schedule pickup request body */
	export interface Schedule_pickup_request_bodyFormProperties {
	}
	export function CreateSchedule_pickup_request_bodyFormGroup() {
		return new FormGroup<Schedule_pickup_request_bodyFormProperties>({
		});

	}

	export interface Schedule_pickup_response_body extends Pickup {

		/**
		 * The errors associated with the failed API call
		 * Required
		 */
		errors: Array<string>;

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: string;
	}
	export interface Schedule_pickup_response_bodyFormProperties extends PickupFormProperties {

		/**
		 * A UUID that uniquely identifies the request id.
		 * This can be given to the support team to help debug non-trivial issues that may occur
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSchedule_pickup_response_bodyFormGroup() {
		return new FormGroup<Schedule_pickup_response_bodyFormProperties>({
			cancelled_at: new FormControl<Date | null | undefined>(undefined),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			confirmation_number: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined),
			pickup_id: new FormControl<string | null | undefined>(undefined),
			pickup_notes: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			warehouse_id: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A service offered by the carrier */
	export interface Service {
		carrier_code?: string;

		/** A string that uniquely identifies the carrier */
		carrier_id?: string;

		/** Supports domestic shipping */
		domestic?: boolean | null;

		/** Supports international shipping. */
		international?: boolean | null;

		/** Carrier supports multiple packages per shipment */
		is_multi_package_supported?: boolean | null;

		/**
		 * User friendly service name
		 * Min length: 1
		 */
		name?: string | null;

		/**
		 * service code
		 * Min length: 1
		 */
		service_code?: string | null;
	}

	/** A service offered by the carrier */
	export interface ServiceFormProperties {
		carrier_code: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the carrier */
		carrier_id: FormControl<string | null | undefined>,

		/** Supports domestic shipping */
		domestic: FormControl<boolean | null | undefined>,

		/** Supports international shipping. */
		international: FormControl<boolean | null | undefined>,

		/** Carrier supports multiple packages per shipment */
		is_multi_package_supported: FormControl<boolean | null | undefined>,

		/**
		 * User friendly service name
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * service code
		 * Min length: 1
		 */
		service_code: FormControl<string | null | undefined>,
	}
	export function CreateServiceFormGroup() {
		return new FormGroup<ServiceFormProperties>({
			carrier_code: new FormControl<string | null | undefined>(undefined),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			domestic: new FormControl<boolean | null | undefined>(undefined),
			international: new FormControl<boolean | null | undefined>(undefined),
			is_multi_package_supported: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			service_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}

	export interface Shipment_id_request {

		/** A string that uniquely identifies the shipment */
		shipment_id?: string;
	}
	export interface Shipment_id_requestFormProperties {

		/** A string that uniquely identifies the shipment */
		shipment_id: FormControl<string | null | undefined>,
	}
	export function CreateShipment_id_requestFormGroup() {
		return new FormGroup<Shipment_id_requestFormProperties>({
			shipment_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A shipment item */
	export interface Shipment_item {

		/**
		 * Amazon Standard Identification Number
		 * Max length: 10
		 * Min length: 10
		 */
		asin?: string | null;

		/** external order id */
		external_order_id?: string | null;

		/** external order item id */
		external_order_item_id?: string | null;

		/**
		 * item name
		 * Min length: 0
		 */
		name?: string | null;
		order_source_code?: Order_source_name;

		/**
		 * The quantity of this item included in the shipment
		 * Minimum: 0
		 */
		quantity?: number | null;

		/** sales order id */
		sales_order_id?: string | null;

		/** sales order item id */
		sales_order_item_id?: string | null;

		/** Item Stock Keeping Unit */
		sku?: string | null;
	}

	/** A shipment item */
	export interface Shipment_itemFormProperties {

		/**
		 * Amazon Standard Identification Number
		 * Max length: 10
		 * Min length: 10
		 */
		asin: FormControl<string | null | undefined>,

		/** external order id */
		external_order_id: FormControl<string | null | undefined>,

		/** external order item id */
		external_order_item_id: FormControl<string | null | undefined>,

		/**
		 * item name
		 * Min length: 0
		 */
		name: FormControl<string | null | undefined>,
		order_source_code: FormControl<Order_source_name | null | undefined>,

		/**
		 * The quantity of this item included in the shipment
		 * Minimum: 0
		 */
		quantity: FormControl<number | null | undefined>,

		/** sales order id */
		sales_order_id: FormControl<string | null | undefined>,

		/** sales order item id */
		sales_order_item_id: FormControl<string | null | undefined>,

		/** Item Stock Keeping Unit */
		sku: FormControl<string | null | undefined>,
	}
	export function CreateShipment_itemFormGroup() {
		return new FormGroup<Shipment_itemFormProperties>({
			asin: new FormControl<string | null | undefined>(undefined, [Validators.minLength(10), Validators.maxLength(10)]),
			external_order_id: new FormControl<string | null | undefined>(undefined),
			external_order_item_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			order_source_code: new FormControl<Order_source_name | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			sales_order_id: new FormControl<string | null | undefined>(undefined),
			sales_order_item_id: new FormControl<string | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Shipment_request {

		/** The shipment object */
		shipment?: Address_validating_shipment;
	}
	export interface Shipment_requestFormProperties {
	}
	export function CreateShipment_requestFormGroup() {
		return new FormGroup<Shipment_requestFormProperties>({
		});

	}


	/** The possible shipments sort by values */
	export enum Shipments_sort_by { modified_at = 'modified_at', created_at = 'created_at' }


	/**
	 * Controls the sort order of queries
	 * |Value     |Description
	 * |:---------|:-----------------------------------------------------
	 * |`asc`     |Return results in ascending order
	 * |`desc`    |Return results in descending order
	 */
	export enum Sort_dir { asc = 'asc', desc = 'desc' }


	/**
	 * The tracking status codes
	 * |Value       |Description
	 * |:---------  |:-----------------------------------------------------
	 * |`un` | Unknown
	 * |`ac` | Accepted
	 * |`it` | In Transit
	 * |`de` | Delivered
	 * |`ex` | Exception
	 * |`at` | Delivery Attempt
	 * |`ny` | Not Yet In System
	 */
	export enum Status_code { un = 'un', ac = 'ac', it = 'it', de = 'de', ex = 'ex', at = 'at', ny = 'ny' }


	/**
	 * Tags are arbitrary strings that you can use to categorize shipments.  For example, you may want to use tags to distinguish between domestic and international shipments, or between insured and uninsured shipments.  Or maybe you want to create a tag for each of your customers so you can easily retrieve every shipment for a customer.
	 */
	export interface Tag {

		/**
		 * The tag name.
		 * Required
		 * Min length: 1
		 */
		name: string;
	}

	/**
	 * Tags are arbitrary strings that you can use to categorize shipments.  For example, you may want to use tags to distinguish between domestic and international shipments, or between insured and uninsured shipments.  Or maybe you want to create a tag for each of your customers so you can easily retrieve every shipment for a customer.
	 */
	export interface TagFormProperties {

		/**
		 * The tag name.
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateTagFormGroup() {
		return new FormGroup<TagFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A shipment add tag response body */
	export interface Tag_shipment_response_body {

		/**
		 * A string that uniquely identifies the shipment
		 * Required
		 */
		shipment_id: string;

		/**
		 * The tag that is now associated with this shipment
		 * Required
		 */
		tag: Tag;
	}

	/** A shipment add tag response body */
	export interface Tag_shipment_response_bodyFormProperties {

		/**
		 * A string that uniquely identifies the shipment
		 * Required
		 */
		shipment_id: FormControl<string | null | undefined>,
	}
	export function CreateTag_shipment_response_bodyFormGroup() {
		return new FormGroup<Tag_shipment_response_bodyFormProperties>({
			shipment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A tax identifier object */
	export interface Tax_identifier {

		/** Required */
		identifier_type: Identifier_type;

		/**
		 * The authority that issued this tax. This must be a valid 2 character ISO 3166 Alpha 2 country code.
		 * Required
		 */
		issuing_authority: string;

		/** Required */
		taxable_entity_type: Taxable_entity_type;

		/**
		 * The value of the identifier
		 * Required
		 */
		value: string;
	}

	/** A tax identifier object */
	export interface Tax_identifierFormProperties {

		/** Required */
		identifier_type: FormControl<Identifier_type | null | undefined>,

		/**
		 * The authority that issued this tax. This must be a valid 2 character ISO 3166 Alpha 2 country code.
		 * Required
		 */
		issuing_authority: FormControl<string | null | undefined>,

		/** Required */
		taxable_entity_type: FormControl<Taxable_entity_type | null | undefined>,

		/**
		 * The value of the identifier
		 * Required
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateTax_identifierFormGroup() {
		return new FormGroup<Tax_identifierFormProperties>({
			identifier_type: new FormControl<Identifier_type | null | undefined>(undefined, [Validators.required]),
			issuing_authority: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			taxable_entity_type: new FormControl<Taxable_entity_type | null | undefined>(undefined, [Validators.required]),
			value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The taxable entity type for this tax item. Valid values include the following
	 * |Value       |Description
	 * |:---------  |:-----------------------------------------------------
	 * |`shipper`   | The shipper is responsible for this tax.
	 * |`recipient` | The recipient of the shipment is responsible for this tax.
	 */
	export enum Taxable_entity_type { shipper = 'shipper', recipient = 'recipient' }

	export interface Tokens_get_ephemeral_token_response_bodyyaml {

		/** The redirect url formatted with the requested token. */
		redirect_url?: string | null;

		/** The requested token that expires in 10 seconds. */
		token?: string | null;
	}
	export interface Tokens_get_ephemeral_token_response_bodyyamlFormProperties {

		/** The redirect url formatted with the requested token. */
		redirect_url: FormControl<string | null | undefined>,

		/** The requested token that expires in 10 seconds. */
		token: FormControl<string | null | undefined>,
	}
	export function CreateTokens_get_ephemeral_token_response_bodyyamlFormGroup() {
		return new FormGroup<Tokens_get_ephemeral_token_response_bodyyamlFormProperties>({
			redirect_url: new FormControl<string | null | undefined>(undefined),
			token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A track event */
	export interface Track_event {

		/**
		 * Carrier detail code
		 * Required
		 * Min length: 1
		 */
		carrier_detail_code: string;

		/** Carrier timestamp for the event, it is assumed to be the local time of where the event occurred. */
		carrier_occurred_at?: Date;

		/**
		 * Carrier status code
		 * Required
		 * Min length: 1
		 */
		carrier_status_code: string;

		/**
		 * carrier status description
		 * Required
		 * Min length: 0
		 */
		carrier_status_description: string;

		/**
		 * City locality
		 * Required
		 * Min length: 0
		 */
		city_locality: string;

		/**
		 * Company Name
		 * Min length: 0
		 */
		company_name?: string | null;
		country_code?: string;

		/**
		 * Event description
		 * Min length: 0
		 */
		description?: string | null;

		/**
		 * Event Code
		 * Min length: 0
		 */
		event_code?: string | null;

		/**
		 * Latitude coordinate of tracking event.
		 * Minimum: -90
		 * Maximum: 90
		 */
		latitude?: number | null;

		/**
		 * Longitude coordinate of tracking event.
		 * Minimum: -180
		 * Maximum: 180
		 */
		longitude?: number | null;

		/**
		 * Timestamp for carrier event
		 * Required
		 */
		occurred_at: Date;

		/**
		 * Postal code
		 * Required
		 * Min length: 0
		 */
		postal_code: string;

		/**
		 * Signer information
		 * Min length: 0
		 */
		signer?: string | null;

		/**
		 * State province
		 * Required
		 * Min length: 2
		 */
		state_province: string;

		/** Required */
		status_code: Status_code;

		/**
		 * Event Status Description
		 * Required
		 * Min length: 1
		 */
		status_description: string;
	}

	/** A track event */
	export interface Track_eventFormProperties {

		/**
		 * Carrier detail code
		 * Required
		 * Min length: 1
		 */
		carrier_detail_code: FormControl<string | null | undefined>,

		/** Carrier timestamp for the event, it is assumed to be the local time of where the event occurred. */
		carrier_occurred_at: FormControl<Date | null | undefined>,

		/**
		 * Carrier status code
		 * Required
		 * Min length: 1
		 */
		carrier_status_code: FormControl<string | null | undefined>,

		/**
		 * carrier status description
		 * Required
		 * Min length: 0
		 */
		carrier_status_description: FormControl<string | null | undefined>,

		/**
		 * City locality
		 * Required
		 * Min length: 0
		 */
		city_locality: FormControl<string | null | undefined>,

		/**
		 * Company Name
		 * Min length: 0
		 */
		company_name: FormControl<string | null | undefined>,
		country_code: FormControl<string | null | undefined>,

		/**
		 * Event description
		 * Min length: 0
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Event Code
		 * Min length: 0
		 */
		event_code: FormControl<string | null | undefined>,

		/**
		 * Latitude coordinate of tracking event.
		 * Minimum: -90
		 * Maximum: 90
		 */
		latitude: FormControl<number | null | undefined>,

		/**
		 * Longitude coordinate of tracking event.
		 * Minimum: -180
		 * Maximum: 180
		 */
		longitude: FormControl<number | null | undefined>,

		/**
		 * Timestamp for carrier event
		 * Required
		 */
		occurred_at: FormControl<Date | null | undefined>,

		/**
		 * Postal code
		 * Required
		 * Min length: 0
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * Signer information
		 * Min length: 0
		 */
		signer: FormControl<string | null | undefined>,

		/**
		 * State province
		 * Required
		 * Min length: 2
		 */
		state_province: FormControl<string | null | undefined>,

		/** Required */
		status_code: FormControl<Status_code | null | undefined>,

		/**
		 * Event Status Description
		 * Required
		 * Min length: 1
		 */
		status_description: FormControl<string | null | undefined>,
	}
	export function CreateTrack_eventFormGroup() {
		return new FormGroup<Track_eventFormProperties>({
			carrier_detail_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			carrier_occurred_at: new FormControl<Date | null | undefined>(undefined),
			carrier_status_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			carrier_status_description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0)]),
			city_locality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0)]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			country_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			event_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			latitude: new FormControl<number | null | undefined>(undefined, [Validators.min(-90), Validators.max(90)]),
			longitude: new FormControl<number | null | undefined>(undefined, [Validators.min(-180), Validators.max(180)]),
			occurred_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0)]),
			signer: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			state_province: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			status_code: new FormControl<Status_code | null | undefined>(undefined, [Validators.required]),
			status_description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A tracking information resource */
	export interface Tracking_information {
		actual_delivery_date?: Date;
		carrier_code?: string;

		/**
		 * Carrier detail code
		 * Min length: 1
		 */
		carrier_detail_code?: string | null;
		carrier_id?: string;

		/**
		 * Carrier status code
		 * Min length: 1
		 */
		carrier_status_code?: string | null;

		/**
		 * carrier status description
		 * Min length: 0
		 */
		carrier_status_description?: string | null;
		estimated_delivery_date?: Date;

		/** The events that have occured during the lifetime of this tracking number. */
		events?: Array<Track_event>;

		/**
		 * Exception description
		 * Min length: 0
		 */
		exception_description?: string | null;
		ship_date?: Date;
		status_code?: Status_code;

		/**
		 * Status description
		 * Min length: 0
		 */
		status_description?: string | null;
		tracking_number?: string;

		/** Carrier Tracking Url, if available */
		tracking_url?: string | null;
	}

	/** A tracking information resource */
	export interface Tracking_informationFormProperties {
		actual_delivery_date: FormControl<Date | null | undefined>,
		carrier_code: FormControl<string | null | undefined>,

		/**
		 * Carrier detail code
		 * Min length: 1
		 */
		carrier_detail_code: FormControl<string | null | undefined>,
		carrier_id: FormControl<string | null | undefined>,

		/**
		 * Carrier status code
		 * Min length: 1
		 */
		carrier_status_code: FormControl<string | null | undefined>,

		/**
		 * carrier status description
		 * Min length: 0
		 */
		carrier_status_description: FormControl<string | null | undefined>,
		estimated_delivery_date: FormControl<Date | null | undefined>,

		/**
		 * Exception description
		 * Min length: 0
		 */
		exception_description: FormControl<string | null | undefined>,
		ship_date: FormControl<Date | null | undefined>,
		status_code: FormControl<Status_code | null | undefined>,

		/**
		 * Status description
		 * Min length: 0
		 */
		status_description: FormControl<string | null | undefined>,
		tracking_number: FormControl<string | null | undefined>,

		/** Carrier Tracking Url, if available */
		tracking_url: FormControl<string | null | undefined>,
	}
	export function CreateTracking_informationFormGroup() {
		return new FormGroup<Tracking_informationFormProperties>({
			actual_delivery_date: new FormControl<Date | null | undefined>(undefined),
			carrier_code: new FormControl<string | null | undefined>(undefined),
			carrier_detail_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			carrier_id: new FormControl<string | null | undefined>(undefined),
			carrier_status_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			carrier_status_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			estimated_delivery_date: new FormControl<Date | null | undefined>(undefined),
			exception_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			ship_date: new FormControl<Date | null | undefined>(undefined),
			status_code: new FormControl<Status_code | null | undefined>(undefined),
			status_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			tracking_number: new FormControl<string | null | undefined>(undefined),
			tracking_url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A ShipEngine account settings images request body */
	export interface Update_account_settings_image_request_body {
	}

	/** A ShipEngine account settings images request body */
	export interface Update_account_settings_image_request_bodyFormProperties {
	}
	export function CreateUpdate_account_settings_image_request_bodyFormGroup() {
		return new FormGroup<Update_account_settings_image_request_bodyFormProperties>({
		});

	}


	/** An amazon buy shipping account settings request body */
	export interface Update_amazon_buy_shipping_request_body {

		/**
		 * Email
		 * Min length: 1
		 */
		email?: string | null;
	}

	/** An amazon buy shipping account settings request body */
	export interface Update_amazon_buy_shipping_request_bodyFormProperties {

		/**
		 * Email
		 * Min length: 1
		 */
		email: FormControl<string | null | undefined>,
	}
	export function CreateUpdate_amazon_buy_shipping_request_bodyFormGroup() {
		return new FormGroup<Update_amazon_buy_shipping_request_bodyFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
		});

	}

	export interface Update_carrier_settings_request_body {
	}
	export interface Update_carrier_settings_request_bodyFormProperties {
	}
	export function CreateUpdate_carrier_settings_request_bodyFormGroup() {
		return new FormGroup<Update_carrier_settings_request_bodyFormProperties>({
		});

	}


	/** An update dhl express settings request body */
	export interface Update_dhl_express_settings_request_body {
	}

	/** An update dhl express settings request body */
	export interface Update_dhl_express_settings_request_bodyFormProperties {
	}
	export function CreateUpdate_dhl_express_settings_request_bodyFormGroup() {
		return new FormGroup<Update_dhl_express_settings_request_bodyFormProperties>({
		});

	}


	/** An update Fedex settings request body */
	export interface Update_fedex_settings_request_body {
	}

	/** An update Fedex settings request body */
	export interface Update_fedex_settings_request_bodyFormProperties {
	}
	export function CreateUpdate_fedex_settings_request_bodyFormGroup() {
		return new FormGroup<Update_fedex_settings_request_bodyFormProperties>({
		});

	}


	/** A newgistics account settings request body */
	export interface Update_newgistics_settings_request_body {
		include_barcode_with_order_number?: boolean | null;
		receive_email_on_manifest_processing?: boolean | null;
	}

	/** A newgistics account settings request body */
	export interface Update_newgistics_settings_request_bodyFormProperties {
		include_barcode_with_order_number: FormControl<boolean | null | undefined>,
		receive_email_on_manifest_processing: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdate_newgistics_settings_request_bodyFormGroup() {
		return new FormGroup<Update_newgistics_settings_request_bodyFormProperties>({
			include_barcode_with_order_number: new FormControl<boolean | null | undefined>(undefined),
			receive_email_on_manifest_processing: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** An update package type request body */
	export interface Update_package_type_request_body {
	}

	/** An update package type request body */
	export interface Update_package_type_request_bodyFormProperties {
	}
	export function CreateUpdate_package_type_request_bodyFormGroup() {
		return new FormGroup<Update_package_type_request_bodyFormProperties>({
		});

	}

	export interface Update_shipment_fields {
		validate_address?: Validate_address;
	}
	export interface Update_shipment_fieldsFormProperties {
		validate_address: FormControl<Validate_address | null | undefined>,
	}
	export function CreateUpdate_shipment_fieldsFormGroup() {
		return new FormGroup<Update_shipment_fieldsFormProperties>({
			validate_address: new FormControl<Validate_address | null | undefined>(undefined),
		});

	}


	/** An update shipment request body */
	export interface Update_shipment_request_body {
	}

	/** An update shipment request body */
	export interface Update_shipment_request_bodyFormProperties {
	}
	export function CreateUpdate_shipment_request_bodyFormGroup() {
		return new FormGroup<Update_shipment_request_bodyFormProperties>({
		});

	}


	/** An update shipment response body */
	export interface Update_shipment_response_body {
	}

	/** An update shipment response body */
	export interface Update_shipment_response_bodyFormProperties {
	}
	export function CreateUpdate_shipment_response_bodyFormGroup() {
		return new FormGroup<Update_shipment_response_bodyFormProperties>({
		});

	}


	/** An update UPS settings request body */
	export interface Update_ups_settings_request_body {
	}

	/** An update UPS settings request body */
	export interface Update_ups_settings_request_bodyFormProperties {
	}
	export function CreateUpdate_ups_settings_request_bodyFormGroup() {
		return new FormGroup<Update_ups_settings_request_bodyFormProperties>({
		});

	}


	/** An update warehouse request body */
	export interface Update_warehouse_request_body {
	}

	/** An update warehouse request body */
	export interface Update_warehouse_request_bodyFormProperties {
	}
	export function CreateUpdate_warehouse_request_bodyFormGroup() {
		return new FormGroup<Update_warehouse_request_bodyFormProperties>({
		});

	}


	/** An update warehouse settings request body */
	export interface Update_warehouse_settings_request_body {

		/** The default property on the warehouse. */
		is_default?: boolean | null;
	}

	/** An update warehouse settings request body */
	export interface Update_warehouse_settings_request_bodyFormProperties {

		/** The default property on the warehouse. */
		is_default: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdate_warehouse_settings_request_bodyFormGroup() {
		return new FormGroup<Update_warehouse_settings_request_bodyFormProperties>({
			is_default: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** An update webhook request body */
	export interface Update_webhook_request_body {

		/** The url that the wehbook sends the request */
		url?: string;
	}

	/** An update webhook request body */
	export interface Update_webhook_request_bodyFormProperties {

		/** The url that the wehbook sends the request */
		url: FormControl<string | null | undefined>,
	}
	export function CreateUpdate_webhook_request_bodyFormGroup() {
		return new FormGroup<Update_webhook_request_bodyFormProperties>({
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** UPS account settings */
	export interface Ups_account_settings {

		/**
		 * account postal code
		 * Min length: 5
		 */
		account_postal_code?: string | null;

		/** The invoice */
		invoice?: Ups_invoice;

		/** Indicates if this is the primary UPS account */
		is_primary_account?: boolean | null;

		/**
		 * mail innovations cost center
		 * Min length: 0
		 */
		mail_innovations_cost_center?: string | null;
		mail_innovations_endorsement?: Ancillary_service_endorsement;

		/**
		 * nickname
		 * Min length: 1
		 */
		nickname?: string | null;
		pickup_type?: Ups_pickup_type;

		/** The use carbon neutral shipping program */
		use_carbon_neutral_shipping_program?: boolean | null;

		/** The use consolidation services */
		use_consolidation_services?: boolean | null;

		/** The use ground freight pricing */
		use_ground_freight_pricing?: boolean | null;

		/** The use negotiated rates */
		use_negotiated_rates?: boolean | null;

		/** The use order number on mail innovations labels */
		use_order_number_on_mail_innovations_labels?: boolean | null;
	}

	/** UPS account settings */
	export interface Ups_account_settingsFormProperties {

		/**
		 * account postal code
		 * Min length: 5
		 */
		account_postal_code: FormControl<string | null | undefined>,

		/** Indicates if this is the primary UPS account */
		is_primary_account: FormControl<boolean | null | undefined>,

		/**
		 * mail innovations cost center
		 * Min length: 0
		 */
		mail_innovations_cost_center: FormControl<string | null | undefined>,
		mail_innovations_endorsement: FormControl<Ancillary_service_endorsement | null | undefined>,

		/**
		 * nickname
		 * Min length: 1
		 */
		nickname: FormControl<string | null | undefined>,
		pickup_type: FormControl<Ups_pickup_type | null | undefined>,

		/** The use carbon neutral shipping program */
		use_carbon_neutral_shipping_program: FormControl<boolean | null | undefined>,

		/** The use consolidation services */
		use_consolidation_services: FormControl<boolean | null | undefined>,

		/** The use ground freight pricing */
		use_ground_freight_pricing: FormControl<boolean | null | undefined>,

		/** The use negotiated rates */
		use_negotiated_rates: FormControl<boolean | null | undefined>,

		/** The use order number on mail innovations labels */
		use_order_number_on_mail_innovations_labels: FormControl<boolean | null | undefined>,
	}
	export function CreateUps_account_settingsFormGroup() {
		return new FormGroup<Ups_account_settingsFormProperties>({
			account_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(5)]),
			is_primary_account: new FormControl<boolean | null | undefined>(undefined),
			mail_innovations_cost_center: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0)]),
			mail_innovations_endorsement: new FormControl<Ancillary_service_endorsement | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			pickup_type: new FormControl<Ups_pickup_type | null | undefined>(undefined),
			use_carbon_neutral_shipping_program: new FormControl<boolean | null | undefined>(undefined),
			use_consolidation_services: new FormControl<boolean | null | undefined>(undefined),
			use_ground_freight_pricing: new FormControl<boolean | null | undefined>(undefined),
			use_negotiated_rates: new FormControl<boolean | null | undefined>(undefined),
			use_order_number_on_mail_innovations_labels: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The possible ups pickup type values */
	export enum Ups_pickup_type { daily_pickup = 'daily_pickup', occasional_pickup = 'occasional_pickup', customer_counter = 'customer_counter' }


	/** A UPS settings response body */
	export interface Ups_settings_response_body {
	}

	/** A UPS settings response body */
	export interface Ups_settings_response_bodyFormProperties {
	}
	export function CreateUps_settings_response_bodyFormGroup() {
		return new FormGroup<Ups_settings_response_bodyFormProperties>({
		});

	}

	export interface Validate_shipment_fields {
		validate_address?: Validate_address;
	}
	export interface Validate_shipment_fieldsFormProperties {
		validate_address: FormControl<Validate_address | null | undefined>,
	}
	export function CreateValidate_shipment_fieldsFormGroup() {
		return new FormGroup<Validate_shipment_fieldsFormProperties>({
			validate_address: new FormControl<Validate_address | null | undefined>(undefined),
		});

	}


	/** A void label response body */
	export interface Void_label_response_body {

		/**
		 * Indicates whether the attempt to void the label was successful
		 * Required
		 */
		approved: boolean;

		/**
		 * Required
		 * Min length: 0
		 */
		message: string;
	}

	/** A void label response body */
	export interface Void_label_response_bodyFormProperties {

		/**
		 * Indicates whether the attempt to void the label was successful
		 * Required
		 */
		approved: FormControl<boolean | null | undefined>,

		/**
		 * Required
		 * Min length: 0
		 */
		message: FormControl<string | null | undefined>,
	}
	export function CreateVoid_label_response_bodyFormGroup() {
		return new FormGroup<Void_label_response_bodyFormProperties>({
			approved: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(0)]),
		});

	}


	/** A warehouse */
	export interface Warehouse {

		/**
		 * Timestamp that indicates when the warehouse was created
		 * Min length: 1
		 */
		created_at?: Date | null;

		/** Designates which single warehouse is the default on the account */
		is_default?: boolean | null;

		/**
		 * Name of the warehouse
		 * Min length: 1
		 */
		name?: string | null;

		/** The origin address of the warehouse */
		origin_address?: Address;

		/** The return address associated with the warehouse */
		return_address?: Address;

		/** A string that uniquely identifies the warehouse */
		warehouse_id?: string;
	}

	/** A warehouse */
	export interface WarehouseFormProperties {

		/**
		 * Timestamp that indicates when the warehouse was created
		 * Min length: 1
		 */
		created_at: FormControl<Date | null | undefined>,

		/** Designates which single warehouse is the default on the account */
		is_default: FormControl<boolean | null | undefined>,

		/**
		 * Name of the warehouse
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the warehouse */
		warehouse_id: FormControl<string | null | undefined>,
	}
	export function CreateWarehouseFormGroup() {
		return new FormGroup<WarehouseFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.minLength(1)]),
			is_default: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			warehouse_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A webhook */
	export interface Webhook {
		event?: Webhook_event;

		/** The url that the webhook sends the request to */
		url?: string;

		/** A string that uniquely identifies the webhook */
		webhook_id?: string;
	}

	/** A webhook */
	export interface WebhookFormProperties {
		event: FormControl<Webhook_event | null | undefined>,

		/** The url that the webhook sends the request to */
		url: FormControl<string | null | undefined>,

		/** A string that uniquely identifies the webhook */
		webhook_id: FormControl<string | null | undefined>,
	}
	export function CreateWebhookFormGroup() {
		return new FormGroup<WebhookFormProperties>({
			event: new FormControl<Webhook_event | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
			webhook_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * List Account Settings
		 * List all account settings for the ShipEngine account
		 * Get v1/account/settings
		 * @return {Get_account_settings_response_body} The request was a success.
		 */
		List_account_settings(): Observable<Get_account_settings_response_body> {
			return this.http.get<Get_account_settings_response_body>(this.baseUri + 'v1/account/settings', {});
		}

		/**
		 * List Account Images
		 * List all account images for the ShipEngine account
		 * Get v1/account/settings/images
		 * @return {List_account_settings_images_response_body} The request was a success.
		 */
		List_account_images(): Observable<List_account_settings_images_response_body> {
			return this.http.get<List_account_settings_images_response_body>(this.baseUri + 'v1/account/settings/images', {});
		}

		/**
		 * Create an Account Image
		 * Create an Account Image
		 * Post v1/account/settings/images
		 * @return {Get_account_settings_images_response_body} The requested object creation was a success.
		 */
		Create_account_image(requestBody: Create_account_settings_image_request_body): Observable<Get_account_settings_images_response_body> {
			return this.http.post<Get_account_settings_images_response_body>(this.baseUri + 'v1/account/settings/images', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete Account Image By Id
		 * Delete Account Image By Id
		 * Delete v1/account/settings/images/{label_image_id}
		 * @param {string} label_image_id Label Image Id
		 * @return {void} 
		 */
		Delete_account_image_by_id(label_image_id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/account/settings/images/' + (label_image_id == null ? '' : encodeURIComponent(label_image_id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Account Image By ID
		 * Retrieve information for an account image.
		 * Get v1/account/settings/images/{label_image_id}
		 * @param {string} label_image_id Label Image Id
		 * @return {Get_account_settings_images_response_body} The request was a success.
		 */
		Get_account_settings_images_by_id(label_image_id: string): Observable<Get_account_settings_images_response_body> {
			return this.http.get<Get_account_settings_images_response_body>(this.baseUri + 'v1/account/settings/images/' + (label_image_id == null ? '' : encodeURIComponent(label_image_id)), {});
		}

		/**
		 * Update Account Image By ID
		 * Update information for an account image.
		 * Put v1/account/settings/images/{label_image_id}
		 * @param {string} label_image_id Label Image Id
		 * @return {void} 
		 */
		Update_account_settings_images_by_id(label_image_id: string, requestBody: Update_account_settings_image_request_body): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/account/settings/images/' + (label_image_id == null ? '' : encodeURIComponent(label_image_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Parse an address
		 * The address-recognition API makes it easy for you to extract address data from unstructured text, including the recipient name, line 1, line 2, city, postal code, and more.
		 * Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine's address-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed address data is returned in the same structure that's used for other ShipEngine APIs, such as address validation, rate quotes, and shipping labels.
		 * > **Note:** Address recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland.
		 * Put v1/addresses/recognize
		 * @param {Parse_address_request_body} requestBody The only required field is `text`, which is the text to be parsed. You can optionally also provide an `address` containing already-known values. For example, you may already know the recipient's name, city, and country, and only want to parse the street address into separate lines.
		 * @return {Parse_address_response_body} Returns the parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.
		 */
		Parse_address(requestBody: Parse_address_request_body): Observable<Parse_address_response_body> {
			return this.http.put<Parse_address_response_body>(this.baseUri + 'v1/addresses/recognize', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Validate An Address
		 * Address validation ensures accurate addresses and can lead to reduced shipping costs by preventing address correction surcharges.
		 * ShipEngine cross references multiple databases to validate addresses and identify potential deliverability issues.
		 * Post v1/addresses/validate
		 * @return {Array<string>} The request was a success.
		 */
		Validate_address(requestBody: Array<string>): Observable<Array<string>> {
			return this.http.post<Array<string>>(this.baseUri + 'v1/addresses/validate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Batches
		 * List Batches associated with your Shipengine account
		 * Get v1/batches
		 * @param {number} page Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned.
		 * @param {number} page_size The number of results to return per response.
		 * @param {Sort_dir} sort_dir Controls the sort order of the query.
		 * @param {string} batch_number Batch Number
		 * @return {List_batches_response_body} The request was a success.
		 */
		List_batches(status: Batch_status | null | undefined, page: number | null | undefined, page_size: number | null | undefined, sort_dir: Sort_dir | null | undefined, batch_number: string | null | undefined, sort_by: Batches_sort_by | null | undefined): Observable<List_batches_response_body> {
			return this.http.get<List_batches_response_body>(this.baseUri + 'v1/batches?status=' + status + '&page=' + page + '&page_size=' + page_size + '&sort_dir=' + sort_dir + '&batch_number=' + (batch_number == null ? '' : encodeURIComponent(batch_number)) + '&sort_by=' + sort_by, {});
		}

		/**
		 * Create A Batch
		 * Create a Batch
		 * Post v1/batches
		 * @return {Create_batch_response_body} The requested object creation was a success.
		 */
		Create_batch(requestBody: Create_batch_request_body): Observable<Create_batch_response_body> {
			return this.http.post<Create_batch_response_body>(this.baseUri + 'v1/batches', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Batch By External ID
		 * Get Batch By External ID
		 * Get v1/batches/external_batch_id/{external_batch_id}
		 * @return {Get_batch_by_external_id_response_body} The request was a success.
		 */
		Get_batch_by_external_id(): Observable<Get_batch_by_external_id_response_body> {
			return this.http.get<Get_batch_by_external_id_response_body>(this.baseUri + 'v1/batches/external_batch_id/{external_batch_id}', {});
		}

		/**
		 * Delete Batch By Id
		 * Delete Batch By Id
		 * Delete v1/batches/{batch_id}
		 * @return {void} 
		 */
		Delete_batch(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/batches/{batch_id}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Batch By ID
		 * Get Batch By ID
		 * Get v1/batches/{batch_id}
		 * @return {Get_batch_by_id_response_body} The request was a success.
		 */
		Get_batch_by_id(): Observable<Get_batch_by_id_response_body> {
			return this.http.get<Get_batch_by_id_response_body>(this.baseUri + 'v1/batches/{batch_id}', {});
		}

		/**
		 * Update Batch By Id
		 * Update Batch By Id
		 * Put v1/batches/{batch_id}
		 * @return {void} 
		 */
		Update_batch(): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/batches/{batch_id}', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add to a Batch
		 * Add a Shipment or Rate to a Batch
		 * Post v1/batches/{batch_id}/add
		 * @return {void} 
		 */
		Add_to_batch(requestBody: Add_to_batch_request_body): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1/batches/{batch_id}/add', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Batch Errors
		 * Error handling in batches are handled differently than in a single synchronous request.
		 * You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors.
		 * Get v1/batches/{batch_id}/errors
		 * @param {number} page Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned.
		 * @return {List_batch_errors_response_body} The request was a success.
		 */
		List_batch_errors(page: number | null | undefined, pagesize: number | null | undefined): Observable<List_batch_errors_response_body> {
			return this.http.get<List_batch_errors_response_body>(this.baseUri + 'v1/batches/{batch_id}/errors?page=' + page + '&pagesize=' + pagesize, {});
		}

		/**
		 * Process Batch ID Labels
		 * Process Batch ID Labels
		 * Post v1/batches/{batch_id}/process/labels
		 * @return {void} 
		 */
		Process_batch(requestBody: Process_batch_request_body): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1/batches/{batch_id}/process/labels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Remove From Batch
		 * Remove a shipment or rate from a batch
		 * Post v1/batches/{batch_id}/remove
		 * @return {void} 
		 */
		Remove_from_batch(requestBody: Remove_from_batch_request_body): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1/batches/{batch_id}/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List Carriers
		 * List all carriers that have been added to this account
		 * Get v1/carriers
		 * @return {Get_carriers_response_body} The request was a success.
		 */
		List_carriers(): Observable<Get_carriers_response_body> {
			return this.http.get<Get_carriers_response_body>(this.baseUri + 'v1/carriers', {});
		}

		/**
		 * Get Carrier By ID
		 * Retrive carrier info by ID
		 * Get v1/carriers/{carrier_id}
		 * @return {Get_carrier_by_id_response_body} The request was a success.
		 */
		Get_carrier_by_id(): Observable<Get_carrier_by_id_response_body> {
			return this.http.get<Get_carrier_by_id_response_body>(this.baseUri + 'v1/carriers/{carrier_id}', {});
		}

		/**
		 * Add Funds To Carrier
		 * Add Funds To A Carrier
		 * Put v1/carriers/{carrier_id}/add_funds
		 * @return {Add_funds_to_carrier_response_body} The request was a success.
		 */
		Add_funds_to_carrier(requestBody: Add_funds_to_carrier_request_body): Observable<Add_funds_to_carrier_response_body> {
			return this.http.put<Add_funds_to_carrier_response_body>(this.baseUri + 'v1/carriers/{carrier_id}/add_funds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Carrier Options
		 * Get a list of the options available for the carrier
		 * Get v1/carriers/{carrier_id}/options
		 * @return {Get_carrier_options_response_body} The request was a success.
		 */
		Get_carrier_options(): Observable<Get_carrier_options_response_body> {
			return this.http.get<Get_carrier_options_response_body>(this.baseUri + 'v1/carriers/{carrier_id}/options', {});
		}

		/**
		 * List Carrier Package Types
		 * List the package types associated with the carrier
		 * Get v1/carriers/{carrier_id}/packages
		 * @return {List_carrier_package_types_response_body} The request was a success.
		 */
		List_carrier_package_types(): Observable<List_carrier_package_types_response_body> {
			return this.http.get<List_carrier_package_types_response_body>(this.baseUri + 'v1/carriers/{carrier_id}/packages', {});
		}

		/**
		 * List Carrier Services
		 * List the services associated with the carrier ID
		 * Get v1/carriers/{carrier_id}/services
		 * @return {List_carrier_services_response_body} The request was a success.
		 */
		List_carrier_services(): Observable<List_carrier_services_response_body> {
			return this.http.get<List_carrier_services_response_body>(this.baseUri + 'v1/carriers/{carrier_id}/services', {});
		}

		/**
		 * Connect a carrier account
		 * Connect a carrier account
		 * Post v1/connections/carriers/{carrier_name}
		 * @return {Connect_carrier_response_body} The request was a success.
		 */
		Connect_carrier(requestBody: Connect_carrier_request_body): Observable<Connect_carrier_response_body> {
			return this.http.post<Connect_carrier_response_body>(this.baseUri + 'v1/connections/carriers/{carrier_name}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Disconnect a carrier
		 * Disconnect a carrier
		 * Delete v1/connections/carriers/{carrier_name}/{carrier_id}
		 * @return {void} 
		 */
		Disconnect_carrier(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/connections/carriers/{carrier_name}/{carrier_id}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get carrier settings
		 * Get carrier settings
		 * Get v1/connections/carriers/{carrier_name}/{carrier_id}/settings
		 * @return {Get_carrier_settings_response_body} The request was a success.
		 */
		Get_carrier_settings(): Observable<Get_carrier_settings_response_body> {
			return this.http.get<Get_carrier_settings_response_body>(this.baseUri + 'v1/connections/carriers/{carrier_name}/{carrier_id}/settings', {});
		}

		/**
		 * Update carrier settings
		 * Update carrier settings
		 * Put v1/connections/carriers/{carrier_name}/{carrier_id}/settings
		 * @return {void} 
		 */
		Update_carrier_settings(requestBody: Update_carrier_settings_request_body): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/connections/carriers/{carrier_name}/{carrier_id}/settings', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Disconnect a Shipsurance Account
		 * Disconnect a Shipsurance Account
		 * Delete v1/connections/insurance/shipsurance
		 * @return {Disconnect_insurer_response_body} The request was a success
		 */
		Disconnect_insurer(): Observable<Disconnect_insurer_response_body> {
			return this.http.delete<Disconnect_insurer_response_body>(this.baseUri + 'v1/connections/insurance/shipsurance', {});
		}

		/**
		 * Connect a Shipsurance Account
		 * Connect a Shipsurance Account
		 * Post v1/connections/insurance/shipsurance
		 * @return {Connect_insurer_response_body} The request was a success
		 */
		Connect_insurer(requestBody: Connect_insurer_request_body): Observable<Connect_insurer_response_body> {
			return this.http.post<Connect_insurer_response_body>(this.baseUri + 'v1/connections/insurance/shipsurance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Download File
		 * Get File
		 * Get v1/downloads/{dir}/{subdir}/{filename}
		 * @return {void} The request was a success
		 */
		Download_file(download: string | null | undefined, rotation: number | null | undefined): Observable<HttpResponse<string>> {
			return this.http.get(this.baseUri + 'v1/downloads/{dir}/{subdir}/{filename}?download=' + (download == null ? '' : encodeURIComponent(download)) + '&rotation=' + rotation, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List Webhooks
		 * List all webhooks currently enabled for the account.
		 * Get v1/environment/webhooks
		 * @return {Array<string>} The request was a success.
		 */
		List_webhooks(): Observable<Array<string>> {
			return this.http.get<Array<string>>(this.baseUri + 'v1/environment/webhooks', {});
		}

		/**
		 * Create a Webhook
		 * Create a webook for specific events in the environment.
		 * Post v1/environment/webhooks
		 * @return {Create_webhook_response_body} The request was a success.
		 */
		Create_webhook(requestBody: Create_webhook_request_body): Observable<Create_webhook_response_body> {
			return this.http.post<Create_webhook_response_body>(this.baseUri + 'v1/environment/webhooks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete Webhook By ID
		 * Delete a webhook
		 * Delete v1/environment/webhooks/{webhook_id}
		 * @return {void} 
		 */
		Delete_webhook(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/environment/webhooks/{webhook_id}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Webhook By ID
		 * Retrieve individual webhook by an ID
		 * Get v1/environment/webhooks/{webhook_id}
		 * @return {Get_webhook_by_id_response_body} The request was a success.
		 */
		Get_webhook_by_id(): Observable<Get_webhook_by_id_response_body> {
			return this.http.get<Get_webhook_by_id_response_body>(this.baseUri + 'v1/environment/webhooks/{webhook_id}', {});
		}

		/**
		 * Update a Webhook
		 * Update the webhook url property
		 * Put v1/environment/webhooks/{webhook_id}
		 * @return {void} 
		 */
		Update_webhook(requestBody: Update_webhook_request_body): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/environment/webhooks/{webhook_id}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Add Funds To Insurance
		 * You may need to auto fund your account from time to time. For example, if you don't normally ship items over $100,
		 * and may want to add funds to insurance rather than keeping the account funded.
		 * Patch v1/insurance/shipsurance/add_funds
		 * @return {Add_funds_to_insurance_response_body} The request was a success.
		 */
		Add_funds_to_insurance(requestBody: Add_funds_to_insurance_request_body): Observable<Add_funds_to_insurance_response_body> {
			return this.http.patch<Add_funds_to_insurance_response_body>(this.baseUri + 'v1/insurance/shipsurance/add_funds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Insurance Funds Balance
		 * Retrieve the balance of your Shipsurance account.
		 * Get v1/insurance/shipsurance/balance
		 * @return {Get_insurance_balance_response_body} The request was a success.
		 */
		Get_insurance_balance(): Observable<Get_insurance_balance_response_body> {
			return this.http.get<Get_insurance_balance_response_body>(this.baseUri + 'v1/insurance/shipsurance/balance', {});
		}

		/**
		 * List labels
		 * This endpoint returns a list of labels that you've [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.
		 * By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both `warehouse_id` and `carrier_id`
		 * Get v1/labels
		 * @param {Label_status} label_status Only return labels that are currently in the specified status
		 * @param {string} service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/)
		 * @param {string} carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/)
		 * @param {string} tracking_number Only return labels with a specific tracking number
		 * @param {string} batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/)
		 * @param {string} rate_id Rate ID
		 * @param {string} shipment_id Shipment ID
		 * @param {string} warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/)
		 * @param {Date} created_at_start Only return labels that were created on or after a specific date/time
		 * @param {Date} created_at_end Only return labels that were created on or before a specific date/time
		 * @param {number} page Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned.
		 * @param {number} page_size The number of results to return per response.
		 * @param {Sort_dir} sort_dir Controls the sort order of the query.
		 * @param {Shipments_sort_by} sort_by Controls which field the query is sorted by.
		 * @return {List_labels_response_body} The response includes a `labels` array containing a page of results (as determined by the `page_size` query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.
		 */
		List_labels(label_status: Label_status | null | undefined, service_code: string | null | undefined, carrier_id: string | null | undefined, tracking_number: string | null | undefined, batch_id: string | null | undefined, rate_id: string | null | undefined, shipment_id: string | null | undefined, warehouse_id: string | null | undefined, created_at_start: Date | null | undefined, created_at_end: Date | null | undefined, page: number | null | undefined, page_size: number | null | undefined, sort_dir: Sort_dir | null | undefined, sort_by: Shipments_sort_by | null | undefined): Observable<List_labels_response_body> {
			return this.http.get<List_labels_response_body>(this.baseUri + 'v1/labels?label_status=' + label_status + '&service_code=' + (service_code == null ? '' : encodeURIComponent(service_code)) + '&carrier_id=' + (carrier_id == null ? '' : encodeURIComponent(carrier_id)) + '&tracking_number=' + (tracking_number == null ? '' : encodeURIComponent(tracking_number)) + '&batch_id=' + (batch_id == null ? '' : encodeURIComponent(batch_id)) + '&rate_id=' + (rate_id == null ? '' : encodeURIComponent(rate_id)) + '&shipment_id=' + (shipment_id == null ? '' : encodeURIComponent(shipment_id)) + '&warehouse_id=' + (warehouse_id == null ? '' : encodeURIComponent(warehouse_id)) + '&created_at_start=' + created_at_start?.toISOString() + '&created_at_end=' + created_at_end?.toISOString() + '&page=' + page + '&page_size=' + page_size + '&sort_dir=' + sort_dir + '&sort_by=' + sort_by, {});
		}

		/**
		 * Purchase Label
		 * Purchase and print a label for shipment
		 * Post v1/labels
		 * @return {Create_label_response_body} The requested object creation was a success.
		 */
		Create_label(requestBody: Create_label_request_body): Observable<Create_label_response_body> {
			return this.http.post<Create_label_response_body>(this.baseUri + 'v1/labels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Label By External Shipment ID
		 * Find a label by using the external shipment id that was used during label creation
		 * Get v1/labels/external_shipment_id/{external_shipment_id}
		 * @return {Get_label_by_external_shipment_id_response_body} The requested object creation was a success.
		 */
		Get_label_by_external_shipment_id(label_download_type: Label_download_type | null | undefined): Observable<Get_label_by_external_shipment_id_response_body> {
			return this.http.get<Get_label_by_external_shipment_id_response_body>(this.baseUri + 'v1/labels/external_shipment_id/{external_shipment_id}?label_download_type=' + label_download_type, {});
		}

		/**
		 * Purchase Label with Rate ID
		 * When retrieving rates for shipments using the `/rates` endpoint, the returned information contains a `rate_id` property that can be used
		 * to generate a label without having to refill in the shipment information repeatedly.
		 * Post v1/labels/rates/{rate_id}
		 * @return {Create_label_from_rate_response_body} The requested object creation was a success.
		 */
		Create_label_from_rate(requestBody: Create_label_from_rate_request_body): Observable<Create_label_from_rate_response_body> {
			return this.http.post<Create_label_from_rate_response_body>(this.baseUri + 'v1/labels/rates/{rate_id}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Purchase Label with Shipment ID
		 * Purchase a label using a shipment ID that has already been created with the desired address and
		 * package info.
		 * Post v1/labels/shipment/{shipment_id}
		 * @return {Create_label_from_shipment_response_body} The requested object creation was a success.
		 */
		Create_label_from_shipment(requestBody: Create_label_from_shipment_request_body): Observable<Create_label_from_shipment_response_body> {
			return this.http.post<Create_label_from_shipment_response_body>(this.baseUri + 'v1/labels/shipment/{shipment_id}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Label By ID
		 * Retrieve information for individual labels.
		 * Get v1/labels/{label_id}
		 * @return {Get_label_by_id_response_body} The request was a success.
		 */
		Get_label_by_id(label_download_type: Label_download_type | null | undefined): Observable<Get_label_by_id_response_body> {
			return this.http.get<Get_label_by_id_response_body>(this.baseUri + 'v1/labels/{label_id}?label_download_type=' + label_download_type, {});
		}

		/**
		 * Create a return label
		 * Create a return label
		 * Post v1/labels/{label_id}/return
		 * @return {Create_return_label_response_body} The request was a success.
		 */
		Create_return_label(requestBody: Create_return_label_request_body): Observable<Create_return_label_response_body> {
			return this.http.post<Create_return_label_response_body>(this.baseUri + 'v1/labels/{label_id}/return', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Label Tracking Information
		 * Retrieve the label's tracking information
		 * Get v1/labels/{label_id}/track
		 * @return {Get_tracking_log_from_label_response_body} The request was a success.
		 */
		Get_tracking_log_from_label(): Observable<Get_tracking_log_from_label_response_body> {
			return this.http.get<Get_tracking_log_from_label_response_body>(this.baseUri + 'v1/labels/{label_id}/track', {});
		}

		/**
		 * Void a Label By ID
		 * Void a label by ID to get a refund.
		 * Put v1/labels/{label_id}/void
		 * @return {Void_label_response_body} The request was a success.
		 */
		Void_label(): Observable<Void_label_response_body> {
			return this.http.put<Void_label_response_body>(this.baseUri + 'v1/labels/{label_id}/void', null, {});
		}

		/**
		 * List Manifests
		 * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
		 * Get v1/manifests
		 * @param {string} warehouse_id Warehouse ID
		 * @param {Date} ship_date_start ship date start range
		 * @param {Date} ship_date_end ship date end range
		 * @param {Date} created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
		 * @param {Date} created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time)
		 * @param {string} carrier_id Carrier ID
		 * @param {number} page Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned.
		 * @param {number} page_size The number of results to return per response.
		 * @return {List_manifests_response_body} The request was a success.
		 */
		List_manifests(warehouse_id: string | null | undefined, ship_date_start: Date | null | undefined, ship_date_end: Date | null | undefined, created_at_start: Date | null | undefined, created_at_end: Date | null | undefined, carrier_id: string | null | undefined, page: number | null | undefined, page_size: number | null | undefined, label_ids: Array<string> | null | undefined): Observable<List_manifests_response_body> {
			return this.http.get<List_manifests_response_body>(this.baseUri + 'v1/manifests?warehouse_id=' + (warehouse_id == null ? '' : encodeURIComponent(warehouse_id)) + '&ship_date_start=' + ship_date_start?.toISOString() + '&ship_date_end=' + ship_date_end?.toISOString() + '&created_at_start=' + created_at_start?.toISOString() + '&created_at_end=' + created_at_end?.toISOString() + '&carrier_id=' + (carrier_id == null ? '' : encodeURIComponent(carrier_id)) + '&page=' + page + '&page_size=' + page_size + '&' + label_ids?.map(z => `label_ids=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Create Manifest
		 * Each ShipEngine manifest is created for a specific warehouse, so you'll need to provide the warehouse_id
		 * rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for.
		 * Post v1/manifests
		 * @return {Create_manifest_response_body} The request was a success.
		 */
		Create_manifest(requestBody: Create_manifest_request_body): Observable<Create_manifest_response_body> {
			return this.http.post<Create_manifest_response_body>(this.baseUri + 'v1/manifests', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Manifest Request By Id
		 * Get Manifest Request By Id
		 * Get v1/manifests/requests/{manifest_request_id}
		 * @return {Create_manifest_response_body} The request was a success.
		 */
		Get_manifest_request_by_id(): Observable<Create_manifest_response_body> {
			return this.http.get<Create_manifest_response_body>(this.baseUri + 'v1/manifests/requests/{manifest_request_id}', {});
		}

		/**
		 * Get Manifest By Id
		 * Get Manifest By Id
		 * Get v1/manifests/{manifest_id}
		 * @return {Get_manifest_by_id_response_body} The request was a success.
		 */
		Get_manifest_by_id(): Observable<Get_manifest_by_id_response_body> {
			return this.http.get<Get_manifest_by_id_response_body>(this.baseUri + 'v1/manifests/{manifest_id}', {});
		}

		/**
		 * List Custom Package Types
		 * List the custom package types associated with the account
		 * Get v1/packages
		 * @return {List_package_types_response_body} The request was a success.
		 */
		List_package_types(): Observable<List_package_types_response_body> {
			return this.http.get<List_package_types_response_body>(this.baseUri + 'v1/packages', {});
		}

		/**
		 * Create Custom Package Type
		 * Create a custom package type to better assist in getting accurate rate estimates
		 * Post v1/packages
		 * @return {Create_package_type_response_body} The request was a success.
		 */
		Create_package_type(requestBody: Create_package_type_request_body): Observable<Create_package_type_response_body> {
			return this.http.post<Create_package_type_response_body>(this.baseUri + 'v1/packages', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete A Custom Package By ID
		 * Delete a custom package using the ID
		 * Delete v1/packages/{package_id}
		 * @return {void} 
		 */
		Delete_package_type(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/packages/{package_id}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Custom Package Type By ID
		 * Get Custom Package Type by ID
		 * Get v1/packages/{package_id}
		 * @return {Get_package_type_by_id_response_body} The request was a success.
		 */
		Get_package_type_by_id(): Observable<Get_package_type_by_id_response_body> {
			return this.http.get<Get_package_type_by_id_response_body>(this.baseUri + 'v1/packages/{package_id}', {});
		}

		/**
		 * Update Custom Package Type By ID
		 * Update the custom package type object by ID
		 * Put v1/packages/{package_id}
		 * @return {void} 
		 */
		Update_package_type(requestBody: Update_package_type_request_body): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/packages/{package_id}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * List Scheduled Pickups
		 * List all pickups that have been scheduled for this carrier
		 * Get v1/pickups
		 * @param {string} carrier_id Carrier ID
		 * @param {string} warehouse_id Warehouse ID
		 * @param {Date} created_at_start Only return scheduled pickups that were created on or after a specific date/time
		 * @param {Date} created_at_end Only return scheduled pickups that were created on or before a specific date/time
		 * @param {number} page Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned.
		 * @param {number} page_size The number of results to return per response.
		 * @return {Get_pickups_response_body} The request was a success.
		 */
		List_scheduled_pickups(carrier_id: string | null | undefined, warehouse_id: string | null | undefined, created_at_start: Date | null | undefined, created_at_end: Date | null | undefined, page: number | null | undefined, page_size: number | null | undefined): Observable<Get_pickups_response_body> {
			return this.http.get<Get_pickups_response_body>(this.baseUri + 'v1/pickups?carrier_id=' + (carrier_id == null ? '' : encodeURIComponent(carrier_id)) + '&warehouse_id=' + (warehouse_id == null ? '' : encodeURIComponent(warehouse_id)) + '&created_at_start=' + created_at_start?.toISOString() + '&created_at_end=' + created_at_end?.toISOString() + '&page=' + page + '&page_size=' + page_size, {});
		}

		/**
		 * Schedule a Pickup
		 * Schedule a package pickup with a carrier
		 * Post v1/pickups
		 * @return {Schedule_pickup_response_body} The request was a success.
		 */
		Schedule_pickup(requestBody: Schedule_pickup_request_body): Observable<Schedule_pickup_response_body> {
			return this.http.post<Schedule_pickup_response_body>(this.baseUri + 'v1/pickups', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete a Scheduled Pickup
		 * Delete a previously-scheduled pickup by ID
		 * Delete v1/pickups/{pickup_id}
		 * @return {Delete_pickup_by_id_response_body} Return the `pickup_id` of the scheduled pickup that was successfully deleted
		 */
		Delete_scheduled_pickup(): Observable<Delete_pickup_by_id_response_body> {
			return this.http.delete<Delete_pickup_by_id_response_body>(this.baseUri + 'v1/pickups/{pickup_id}', {});
		}

		/**
		 * Get Pickup By ID
		 * Get Pickup By ID
		 * Get v1/pickups/{pickup_id}
		 * @return {Get_pickup_by_id_response_body} The request was a success.
		 */
		Get_pickup_by_id(): Observable<Get_pickup_by_id_response_body> {
			return this.http.get<Get_pickup_by_id_response_body>(this.baseUri + 'v1/pickups/{pickup_id}', {});
		}

		/**
		 * Get Shipping Rates
		 * It's not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don't solely ship things using a single shipping option;
		 * so we provide functionality to show you all your options!
		 * Post v1/rates
		 * @return {Calculate_rates_response_body} The request was a success.
		 */
		Calculate_rates(requestBody: Calculate_rates_request_body): Observable<Calculate_rates_response_body> {
			return this.http.post<Calculate_rates_response_body>(this.baseUri + 'v1/rates', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Bulk Rates
		 * Get Bulk Shipment Rates
		 * Post v1/rates/bulk
		 * @return {Array<Bulk_rate>} The request was a success.
		 */
		Compare_bulk_rates(requestBody: Compare_bulk_rates_request_body): Observable<Array<Bulk_rate>> {
			return this.http.post<Array<Bulk_rate>>(this.baseUri + 'v1/rates/bulk', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Estimate Rates
		 * Get Rate Estimates
		 * Post v1/rates/estimate
		 * @return {Array<string>} The request was a success.
		 */
		Estimate_rates(requestBody: Estimate_rates_request_body): Observable<Array<string>> {
			return this.http.post<Array<string>>(this.baseUri + 'v1/rates/estimate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Rate By ID
		 * Retrieve a previously queried rate by its ID
		 * Get v1/rates/{rate_id}
		 * @return {Get_rate_by_id_response_body} The request was a success.
		 */
		Get_rate_by_id(): Observable<Get_rate_by_id_response_body> {
			return this.http.get<Get_rate_by_id_response_body>(this.baseUri + 'v1/rates/{rate_id}', {});
		}

		/**
		 * List Service Points
		 * List carrier service points by location
		 * Post v1/service_points/list
		 * @return {List_service_points_response_body} The request was a success.
		 */
		Service_points_list(requestBody: Get_service_points_request): Observable<List_service_points_response_body> {
			return this.http.post<List_service_points_response_body>(this.baseUri + 'v1/service_points/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Service Point By ID
		 * Returns a carrier service point by using the service_point_id
		 * Get v1/service_points/{carrier_code}/{country_code}/{service_point_id}
		 * @return {Get_service_point_by_id_response_body} The request was a success.
		 */
		Service_points_get_by_id(): Observable<Get_service_point_by_id_response_body> {
			return this.http.get<Get_service_point_by_id_response_body>(this.baseUri + 'v1/service_points/{carrier_code}/{country_code}/{service_point_id}', {});
		}

		/**
		 * List Shipments
		 * Get list of Shipments
		 * Get v1/shipments
		 * @param {string} batch_id Batch ID
		 * @param {string} tag Search for shipments based on the custom tag added to the shipment object
		 * @param {Date} created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
		 * @param {Date} created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time)
		 * @param {Date} modified_at_start Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time)
		 * @param {Date} modified_at_end Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time)
		 * @param {number} page Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned.
		 * @param {number} page_size The number of results to return per response.
		 * @param {string} sales_order_id Sales Order ID
		 * @param {Sort_dir} sort_dir Controls the sort order of the query.
		 * @return {List_shipments_response_body} The request was a success.
		 */
		List_shipments(shipment_status: Shipment_status | null | undefined, batch_id: string | null | undefined, tag: string | null | undefined, created_at_start: Date | null | undefined, created_at_end: Date | null | undefined, modified_at_start: Date | null | undefined, modified_at_end: Date | null | undefined, page: number | null | undefined, page_size: number | null | undefined, sales_order_id: string | null | undefined, sort_dir: Sort_dir | null | undefined, sort_by: Shipments_sort_by | null | undefined): Observable<List_shipments_response_body> {
			return this.http.get<List_shipments_response_body>(this.baseUri + 'v1/shipments?shipment_status=' + shipment_status + '&batch_id=' + (batch_id == null ? '' : encodeURIComponent(batch_id)) + '&tag=' + (tag == null ? '' : encodeURIComponent(tag)) + '&created_at_start=' + created_at_start?.toISOString() + '&created_at_end=' + created_at_end?.toISOString() + '&modified_at_start=' + modified_at_start?.toISOString() + '&modified_at_end=' + modified_at_end?.toISOString() + '&page=' + page + '&page_size=' + page_size + '&sales_order_id=' + (sales_order_id == null ? '' : encodeURIComponent(sales_order_id)) + '&sort_dir=' + sort_dir + '&sort_by=' + sort_by, {});
		}

		/**
		 * Create Shipments
		 * Create one or multiple shipments.
		 * Post v1/shipments
		 * @return {Create_shipments_response_body} The requested object creation was a success.
		 */
		Create_shipments(requestBody: Create_shipments_request_body): Observable<Create_shipments_response_body> {
			return this.http.post<Create_shipments_response_body>(this.baseUri + 'v1/shipments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Shipment By External ID
		 * Query Shipments created using your own custom ID convention using this endpint
		 * Get v1/shipments/external_shipment_id/{external_shipment_id}
		 * @return {Get_shipment_by_external_id_response_body} The request was a success.
		 */
		Get_shipment_by_external_id(): Observable<Get_shipment_by_external_id_response_body> {
			return this.http.get<Get_shipment_by_external_id_response_body>(this.baseUri + 'v1/shipments/external_shipment_id/{external_shipment_id}', {});
		}

		/**
		 * Parse shipping info
		 * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people's names, addresses, package weights and dimensions, insurance and delivery requirements, and more.
		 * Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine's shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that's used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.
		 * > **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland.
		 * Put v1/shipments/recognize
		 * @param {Parse_shipment_request_body} requestBody The only required field is `text`, which is the text to be parsed. You can optionally also provide a `shipment` containing any already-known values. For example, you probably already know the `ship_from` address, and you may also already know what carrier and service you want to use.
		 * @return {Parse_shipment_response_body} Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.
		 */
		Parse_shipment(requestBody: Parse_shipment_request_body): Observable<Parse_shipment_response_body> {
			return this.http.put<Parse_shipment_response_body>(this.baseUri + 'v1/shipments/recognize', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Shipment By ID
		 * Get an individual shipment based on its ID
		 * Get v1/shipments/{shipment_id}
		 * @return {Get_shipment_by_id_response_body} The request was a success.
		 */
		Get_shipment_by_id(): Observable<Get_shipment_by_id_response_body> {
			return this.http.get<Get_shipment_by_id_response_body>(this.baseUri + 'v1/shipments/{shipment_id}', {});
		}

		/**
		 * Update Shipment By ID
		 * Update a shipment object based on its ID
		 * Put v1/shipments/{shipment_id}
		 * @return {Update_shipment_response_body} The request was a success.
		 */
		Update_shipment(requestBody: Update_shipment_request_body): Observable<Update_shipment_response_body> {
			return this.http.put<Update_shipment_response_body>(this.baseUri + 'v1/shipments/{shipment_id}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Cancel a Shipment
		 * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first
		 * An example use case would be if a batch label creation job is going to run at a set time and only queries `pending` shipments. Marking a shipment as cancelled
		 * would remove it from this process
		 * Put v1/shipments/{shipment_id}/cancel
		 * @return {void} 
		 */
		Cancel_shipments(): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/shipments/{shipment_id}/cancel', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Shipment Rates
		 * Get Rates for the shipment information associated with the shipment ID
		 * Get v1/shipments/{shipment_id}/rates
		 * @param {Date} created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
		 * @return {List_shipment_rates_response_body} The request was a success.
		 */
		List_shipment_rates(created_at_start: Date | null | undefined): Observable<List_shipment_rates_response_body> {
			return this.http.get<List_shipment_rates_response_body>(this.baseUri + 'v1/shipments/{shipment_id}/rates?created_at_start=' + created_at_start?.toISOString(), {});
		}

		/**
		 * Remove Tag from Shipment
		 * Remove an existing tag from the Shipment object
		 * Delete v1/shipments/{shipment_id}/tags/{tag_name}
		 * @return {void} 
		 */
		Untag_shipment(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/shipments/{shipment_id}/tags/{tag_name}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Add Tag to Shipment
		 * Add a tag to the shipment object
		 * Post v1/shipments/{shipment_id}/tags/{tag_name}
		 * @return {Tag_shipment_response_body} The requested object creation was a success.
		 */
		Tag_shipment(): Observable<Tag_shipment_response_body> {
			return this.http.post<Tag_shipment_response_body>(this.baseUri + 'v1/shipments/{shipment_id}/tags/{tag_name}', null, {});
		}

		/**
		 * Get Tags
		 * Get a list of all tags associated with an account.
		 * Get v1/tags
		 * @return {List_tags_response_body} The request was a success.
		 */
		List_tags(): Observable<List_tags_response_body> {
			return this.http.get<List_tags_response_body>(this.baseUri + 'v1/tags', {});
		}

		/**
		 * Delete Tag
		 * Delete a tag that is no longer needed
		 * Delete v1/tags/{tag_name}
		 * @return {void} 
		 */
		Delete_tag(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/tags/{tag_name}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Create a New Tag
		 * Create a new Tag for customizing how you track your shipments
		 * Post v1/tags/{tag_name}
		 * @return {Create_tag_response_body} The request was a success.
		 */
		Create_tag(): Observable<Create_tag_response_body> {
			return this.http.post<Create_tag_response_body>(this.baseUri + 'v1/tags/{tag_name}', null, {});
		}

		/**
		 * Update Tag Name
		 * Change a tag name while still keeping the relevant shipments attached to it
		 * Put v1/tags/{tag_name}/{new_tag_name}
		 * @return {void} 
		 */
		Rename_tag(): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/tags/{tag_name}/{new_tag_name}', null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Ephemeral Token
		 * This endpoint returns a token that can be passed to an application for authorized access.  The lifetime of this token is 10 seconds.
		 * Post v1/tokens/ephemeral
		 * @param {Redirect} redirect Include a redirect url to the application formatted with the ephemeral token.
		 * @return {Tokens_get_ephemeral_token_response_bodyyaml} OK
		 */
		Tokens_get_ephemeral_token(redirect: Redirect | null | undefined): Observable<Tokens_get_ephemeral_token_response_bodyyaml> {
			return this.http.post<Tokens_get_ephemeral_token_response_bodyyaml>(this.baseUri + 'v1/tokens/ephemeral?redirect=' + redirect, null, {});
		}

		/**
		 * Get Tracking Information
		 * Retrieve package tracking information
		 * Get v1/tracking
		 * @param {string} carrier_code Carrier code used to retrieve tracking information
		 * @param {string} tracking_number The tracking number associated with a shipment
		 * @return {Get_tracking_log_response_body} The request was a success.
		 */
		Get_tracking_log(carrier_code: string | null | undefined, tracking_number: string | null | undefined): Observable<Get_tracking_log_response_body> {
			return this.http.get<Get_tracking_log_response_body>(this.baseUri + 'v1/tracking?carrier_code=' + (carrier_code == null ? '' : encodeURIComponent(carrier_code)) + '&tracking_number=' + (tracking_number == null ? '' : encodeURIComponent(tracking_number)), {});
		}

		/**
		 * Start Tracking a Package
		 * Allows you to subscribe to tracking updates for a package. You specify the carrier_code and tracking_number of the package,
		 * and receive notifications via webhooks whenever the shipping status changes.
		 * Post v1/tracking/start
		 * @param {string} carrier_code Carrier code used to retrieve tracking information
		 * @param {string} tracking_number The tracking number associated with a shipment
		 * @return {void} 
		 */
		Start_tracking(carrier_code: string | null | undefined, tracking_number: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1/tracking/start?carrier_code=' + (carrier_code == null ? '' : encodeURIComponent(carrier_code)) + '&tracking_number=' + (tracking_number == null ? '' : encodeURIComponent(tracking_number)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * Stop Tracking a Package
		 * Unsubscribe from tracking updates for a package.
		 * Post v1/tracking/stop
		 * @param {string} carrier_code Carrier code used to retrieve tracking information
		 * @param {string} tracking_number The tracking number associated with a shipment
		 * @return {void} 
		 */
		Stop_tracking(carrier_code: string | null | undefined, tracking_number: string | null | undefined): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'v1/tracking/stop?carrier_code=' + (carrier_code == null ? '' : encodeURIComponent(carrier_code)) + '&tracking_number=' + (tracking_number == null ? '' : encodeURIComponent(tracking_number)), null, { observe: 'response', responseType: 'text' });
		}

		/**
		 * List Warehouses
		 * Retrieve a list of warehouses associated with this account.
		 * Get v1/warehouses
		 * @return {List_warehouses_response_body} The request was a success.
		 */
		List_warehouses(): Observable<List_warehouses_response_body> {
			return this.http.get<List_warehouses_response_body>(this.baseUri + 'v1/warehouses', {});
		}

		/**
		 * Create Warehouse
		 * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id.
		 * If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well
		 * Post v1/warehouses
		 * @return {Create_warehouse_response_body} The request was a success.
		 */
		Create_warehouse(requestBody: Create_warehouse_request_body): Observable<Create_warehouse_response_body> {
			return this.http.post<Create_warehouse_response_body>(this.baseUri + 'v1/warehouses', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete Warehouse By ID
		 * Delete a warehouse by ID
		 * Delete v1/warehouses/{warehouse_id}
		 * @return {void} 
		 */
		Delete_warehouse(): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'v1/warehouses/{warehouse_id}', { observe: 'response', responseType: 'text' });
		}

		/**
		 * Get Warehouse By Id
		 * Retrieve warehouse data based on the warehouse ID
		 * Get v1/warehouses/{warehouse_id}
		 * @return {Get_warehouse_by_id_response_body} The request was a success.
		 */
		Get_warehouse_by_id(): Observable<Get_warehouse_by_id_response_body> {
			return this.http.get<Get_warehouse_by_id_response_body>(this.baseUri + 'v1/warehouses/{warehouse_id}', {});
		}

		/**
		 * Update Warehouse By Id
		 * Update Warehouse object information
		 * Put v1/warehouses/{warehouse_id}
		 * @return {void} 
		 */
		Update_warehouse(requestBody: Update_warehouse_request_body): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/warehouses/{warehouse_id}', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Update Warehouse Settings
		 * Update Warehouse settings object information
		 * Put v1/warehouses/{warehouse_id}/settings
		 * @return {void} 
		 */
		Update_warehouse_settings(requestBody: Update_warehouse_settings_request_body): Observable<HttpResponse<string>> {
			return this.http.put(this.baseUri + 'v1/warehouses/{warehouse_id}/settings', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}
	}

}

