//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class AccountMyWorkResult
	{
		
		/// <summary>
		/// True, when length of WorkItemDetails is same as the limit
		/// </summary>
		public System.Nullable<System.Boolean> QuerySizeLimitExceeded { get; set; }
		
		/// <summary>
		/// WorkItem Details
		/// </summary>
		public AccountWorkWorkItemModel[] WorkItemDetails { get; set; }
	}
	
	public class AccountWorkWorkItemModel
	{
		
		public string AssignedTo { get; set; }
		
		public System.Nullable<System.DateTimeOffset> ChangedDate { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string State { get; set; }
		
		public string TeamProject { get; set; }
		
		public string Title { get; set; }
		
		public string WorkItemType { get; set; }
	}
	
	/// <summary>
	/// Represents Work Item Recent Activity
	/// </summary>
	public class AccountRecentActivityWorkItemModel
	{
		
		/// <summary>
		/// Assigned To
		/// </summary>
		public string AssignedTo { get; set; }
	}
	
	/// <summary>
	/// Represents Work Item Recent Activity
	/// </summary>
	public class AccountRecentActivityWorkItemModel2
	{
		
		public IdentityRef AssignedTo { get; set; }
	}
	
	public class IdentityRef
	{
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string DirectoryAlias { get; set; }
		
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
		/// </summary>
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsAadIdentity { get; set; }
		
		/// <summary>
		/// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
		/// </summary>
		public System.Nullable<System.Boolean> IsContainer { get; set; }
		
		public System.Nullable<System.Boolean> IsDeletedInOrigin { get; set; }
		
		/// <summary>
		/// Deprecated - not in use in most preexisting implementations of ToIdentityRef
		/// </summary>
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// Deprecated - use Domain+PrincipalName instead
		/// </summary>
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Represents Work Item Recent Activity
	/// </summary>
	public class AccountRecentActivityWorkItemModelBase
	{
		
		/// <summary>
		/// Date of the last Activity by the user
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ActivityDate { get; set; }
		
		/// <summary>
		/// Type of the activity
		/// </summary>
		public System.Nullable<AccountRecentActivityWorkItemModelBaseActivityType> ActivityType { get; set; }
		
		/// <summary>
		/// Last changed date of the work item
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ChangedDate { get; set; }
		
		/// <summary>
		/// Work Item Id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// TeamFoundationId of the user this activity belongs to
		/// </summary>
		public string IdentityId { get; set; }
		
		/// <summary>
		/// State of the work item
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Team project the work item belongs to
		/// </summary>
		public string TeamProject { get; set; }
		
		/// <summary>
		/// Title of the work item
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Type of Work Item
		/// </summary>
		public string WorkItemType { get; set; }
	}
	
	public enum AccountRecentActivityWorkItemModelBaseActivityType
	{
		
		visited = 0,
		
		edited = 1,
		
		deleted = 2,
		
		restored = 3,
	}
	
	/// <summary>
	/// Represents Recent Mention Work Item
	/// </summary>
	public class AccountRecentMentionWorkItemModel
	{
		
		/// <summary>
		/// Assigned To
		/// </summary>
		public string AssignedTo { get; set; }
		
		/// <summary>
		/// Work Item Id
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Latest date that the user were mentioned
		/// </summary>
		public System.Nullable<System.DateTimeOffset> MentionedDateField { get; set; }
		
		/// <summary>
		/// State of the work item
		/// </summary>
		public string State { get; set; }
		
		/// <summary>
		/// Team project the work item belongs to
		/// </summary>
		public string TeamProject { get; set; }
		
		/// <summary>
		/// Title of the work item
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// Type of Work Item
		/// </summary>
		public string WorkItemType { get; set; }
	}
	
	/// <summary>
	/// Contains criteria for querying work items based on artifact URI.
	/// </summary>
	public class ArtifactUriQuery
	{
		
		/// <summary>
		/// List of artifact URIs to use for querying work items.
		/// </summary>
		public string[] ArtifactUris { get; set; }
	}
	
	/// <summary>
	/// Defines result of artifact URI query on work items. Contains mapping of work item IDs to artifact URI.
	/// </summary>
	public class ArtifactUriQueryResult
	{
		
		/// <summary>
		/// A Dictionary that maps a list of work item references to the given list of artifact URI.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, WorkItemReference[]> ArtifactUrisQueryResult { get; set; }
	}
	
	/// <summary>
	/// Contains reference to a work item.
	/// </summary>
	public class WorkItemReference
	{
		
		/// <summary>
		/// Work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// REST API URL of the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	public class AttachmentReference
	{
		
		public string Id { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Comment on a Work Item.
	/// </summary>
	public class Comment
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// The creation date of the comment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Effective Date/time value for adding the comment. Can be optionally different from CreatedDate.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOnBehalfDate { get; set; }
		
		public IdentityRef CreatedOnBehalfOf { get; set; }
		
		/// <summary>
		/// The id assigned to the comment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates if the comment has been deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The mentions of the comment.
		/// </summary>
		public CommentMention[] Mentions { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		/// <summary>
		/// The last modification date of the comment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// The reactions of the comment.
		/// </summary>
		public CommentReaction[] Reactions { get; set; }
		
		/// <summary>
		/// The text of the comment.
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// The current version of the comment.
		/// </summary>
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// The id of the work item this comment belongs to.
		/// </summary>
		public System.Nullable<System.Int32> WorkItemId { get; set; }
	}
	
	public class CommentMention
	{
		
		/// <summary>
		/// The artifact portion of the parsed text. (i.e. the work item's id)
		/// </summary>
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// The type the parser assigned to the mention. (i.e. person, work item, etc)
		/// </summary>
		public string ArtifactType { get; set; }
		
		/// <summary>
		/// The comment id of the mention.
		/// </summary>
		public System.Nullable<System.Int32> CommentId { get; set; }
		
		/// <summary>
		/// The resolved target of the mention. An example of this could be a user's tfid
		/// </summary>
		public string TargetId { get; set; }
	}
	
	/// <summary>
	/// Contains information about work item comment reaction for a particular reaction type.
	/// </summary>
	public class CommentReaction
	{
		
		/// <summary>
		/// The id of the comment this reaction belongs to.
		/// </summary>
		public System.Nullable<System.Int32> CommentId { get; set; }
		
		/// <summary>
		/// Total number of reactions for the CommentReactionType.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
		/// </summary>
		public System.Nullable<System.Boolean> IsCurrentUserEngaged { get; set; }
		
		/// <summary>
		/// Type of the reaction.
		/// </summary>
		public System.Nullable<CommentReactionType> Type { get; set; }
	}
	
	public enum CommentReactionType
	{
		
		like = 0,
		
		dislike = 1,
		
		heart = 2,
		
		hooray = 3,
		
		smile = 4,
		
		confused = 5,
	}
	
	/// <summary>
	/// Represents a request to create a work item comment.
	/// </summary>
	public class CommentCreate
	{
		
		/// <summary>
		/// The text of the comment.
		/// </summary>
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Represents a list of work item comments.
	/// </summary>
	public class CommentList
	{
		
		/// <summary>
		/// List of comments in the current batch.
		/// </summary>
		public Comment[] Comments { get; set; }
		
		/// <summary>
		/// A string token that can be used to retrieving next page of comments if available. Otherwise null.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The count of comments in the current batch.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Uri to the next page of comments if it is available. Otherwise null.
		/// </summary>
		public string NextPage { get; set; }
		
		/// <summary>
		/// Total count of comments on a work item.
		/// </summary>
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Represents a request to update a work item comment.
	/// </summary>
	public class CommentUpdate
	{
		
		/// <summary>
		/// The updated text of the comment.
		/// </summary>
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Represents a specific version of a comment on a work item.
	/// </summary>
	public class CommentVersion
	{
		
		public IdentityRef CreatedBy { get; set; }
		
		/// <summary>
		/// The creation date of the comment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Effective Date/time value for adding the comment. Can be optionally different from CreatedDate.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedOnBehalfDate { get; set; }
		
		public IdentityRef CreatedOnBehalfOf { get; set; }
		
		/// <summary>
		/// The id assigned to the comment.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates if the comment has been deleted at this version.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		public IdentityRef ModifiedBy { get; set; }
		
		/// <summary>
		/// The modification date of the comment for this version.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// The rendered content of the comment at this version.
		/// </summary>
		public string RenderedText { get; set; }
		
		/// <summary>
		/// The text of the comment at this version.
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// The version number.
		/// </summary>
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class ExternalDeployment
	{
		
		public string ArtifactId { get; set; }
		
		public string CreatedBy { get; set; }
		
		public string Description { get; set; }
		
		public string DisplayName { get; set; }
		
		public ExternalEnvironment Environment { get; set; }
		
		public string Group { get; set; }
		
		public ExternalPipeline Pipeline { get; set; }
		
		public int[] RelatedWorkItemIds { get; set; }
		
		public System.Nullable<System.Int32> RunId { get; set; }
		
		public System.Nullable<System.Int32> SequenceNumber { get; set; }
		
		public string Status { get; set; }
		
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
		
		public string Url { get; set; }
	}
	
	public class ExternalEnvironment
	{
		
		public string DisplayName { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Type { get; set; }
	}
	
	public class ExternalPipeline
	{
		
		public string DisplayName { get; set; }
		
		public System.Nullable<System.Int32> Id { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Describes a list of dependent fields for a rule.
	/// </summary>
	public class FieldDependentRule
	{
		
		/// <summary>
		/// The dependent fields.
		/// </summary>
		public WorkItemFieldReference[] DependentFields { get; set; }
	}
	
	/// <summary>
	/// Reference to a field in a work item
	/// </summary>
	public class WorkItemFieldReference
	{
		
		/// <summary>
		/// The friendly name of the field.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The reference name of the field.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// The REST URL of the resource.
		/// </summary>
		public string Url { get; set; }
	}
	
	public class GraphSubjectBase
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
		
		/// <summary>
		/// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
		/// </summary>
		public string Descriptor { get; set; }
		
		/// <summary>
		/// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
		/// </summary>
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This url is the full route to the source resource of this graph subject.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class to represent a collection of REST reference links.
	/// </summary>
	public class ReferenceLinks
	{
		
		/// <summary>
		/// The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Links { get; set; }
	}
	
	/// <summary>
	/// Describes a reference to an identity.
	/// </summary>
	public class IdentityReference
	{
		
		public string Id { get; set; }
		
		/// <summary>
		/// Legacy back-compat property. This has been the WIT specific value from Constants. Will be hidden (but exists) on the client unless they are targeting the newest version
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The JSON model for JSON Patch Operations
	/// </summary>
	public class JsonPatchDocument
	{
	}
	
	/// <summary>
	/// The JSON model for a JSON Patch operation
	/// </summary>
	public class JsonPatchOperation
	{
		
		/// <summary>
		/// The path to copy from for the Move/Copy operation.
		/// </summary>
		public string From { get; set; }
		
		/// <summary>
		/// The patch operation
		/// </summary>
		public System.Nullable<JsonPatchOperationOp> Op { get; set; }
		
		/// <summary>
		/// The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The value for the operation. This is either a primitive or a JToken.
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum JsonPatchOperationOp
	{
		
		add = 0,
		
		remove = 1,
		
		replace = 2,
		
		move = 3,
		
		copy = 4,
		
		test = 5,
	}
	
	/// <summary>
	/// Link description.
	/// </summary>
	public class Link
	{
		
		/// <summary>
		/// Collection of link attributes.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
		
		/// <summary>
		/// Relation type.
		/// </summary>
		public string Rel { get; set; }
		
		/// <summary>
		/// Link url.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Stores process ID.
	/// </summary>
	public class ProcessIdModel
	{
		
		/// <summary>
		/// The ID of the process.
		/// </summary>
		public string TypeId { get; set; }
	}
	
	/// <summary>
	/// Stores project ID and its process ID.
	/// </summary>
	public class ProcessMigrationResultModel
	{
		
		/// <summary>
		/// The ID of the process.
		/// </summary>
		public string ProcessId { get; set; }
		
		/// <summary>
		/// The ID of the project.
		/// </summary>
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Project work item type state colors
	/// </summary>
	public class ProjectWorkItemStateColors
	{
		
		/// <summary>
		/// Project name
		/// </summary>
		public string ProjectName { get; set; }
		
		/// <summary>
		/// State colors for all work item type in a project
		/// </summary>
		public WorkItemTypeStateColors[] WorkItemTypeStateColors { get; set; }
	}
	
	/// <summary>
	/// State colors for a work item type
	/// </summary>
	public class WorkItemTypeStateColors
	{
		
		/// <summary>
		/// Work item type state colors
		/// </summary>
		public WorkItemStateColor[] StateColors { get; set; }
		
		/// <summary>
		/// Work item type name
		/// </summary>
		public string WorkItemTypeName { get; set; }
	}
	
	/// <summary>
	/// Work item type state name, color and state category
	/// </summary>
	public class WorkItemStateColor
	{
		
		/// <summary>
		/// Category of state
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Color value
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// Work item type state name
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of an update work item type XML update operation.
	/// </summary>
	public class ProvisioningResult
	{
		
		/// <summary>
		/// Details about of the provisioning import events.
		/// </summary>
		public string[] ProvisioningImportEvents { get; set; }
	}
	
	/// <summary>
	/// Describes a request to get a list of queries
	/// </summary>
	public class QueryBatchGetRequest
	{
		
		/// <summary>
		/// The expand parameters for queries. Possible options are { None, Wiql, Clauses, All, Minimal }
		/// </summary>
		public System.Nullable<QueryBatchGetRequestExpand> Expand { get; set; }
		
		/// <summary>
		/// The flag to control error policy in a query batch request. Possible options are { Fail, Omit }.
		/// </summary>
		public System.Nullable<QueryBatchGetRequestErrorPolicy> ErrorPolicy { get; set; }
		
		/// <summary>
		/// The requested query ids
		/// </summary>
		public string[] Ids { get; set; }
	}
	
	public enum QueryBatchGetRequestExpand
	{
		
		none = 0,
		
		wiql = 1,
		
		clauses = 2,
		
		all = 3,
		
		minimal = 4,
	}
	
	public enum QueryBatchGetRequestErrorPolicy
	{
		
		fail = 0,
		
		omit = 1,
	}
	
	/// <summary>
	/// Represents an item in the work item query hierarchy. This can be either a query or a folder.
	/// </summary>
	public class QueryHierarchyItem
	{
		
		/// <summary>
		/// The child query items inside a query folder.
		/// </summary>
		public QueryHierarchyItem[] Children { get; set; }
		
		/// <summary>
		/// Represents a clause in a work item query. This shows the structure of a work item query.
		/// </summary>
		public WorkItemQueryClause Clauses { get; set; }
		
		/// <summary>
		/// The columns of the query.
		/// </summary>
		public WorkItemFieldReference[] Columns { get; set; }
		
		/// <summary>
		/// Describes a reference to an identity.
		/// </summary>
		public IdentityReference CreatedBy { get; set; }
		
		/// <summary>
		/// When the query item was created.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The link query mode.
		/// </summary>
		public System.Nullable<QueryHierarchyItemFilterOptions> FilterOptions { get; set; }
		
		/// <summary>
		/// If this is a query folder, indicates if it contains any children.
		/// </summary>
		public System.Nullable<System.Boolean> HasChildren { get; set; }
		
		/// <summary>
		/// The id of the query item.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates if this query item is deleted. Setting this to false on a deleted query item will undelete it. Undeleting a query or folder will not bring back the permission changes that were previously applied to it.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// Indicates if this is a query folder or a query.
		/// </summary>
		public System.Nullable<System.Boolean> IsFolder { get; set; }
		
		/// <summary>
		/// Indicates if the WIQL of this query is invalid. This could be due to invalid syntax or a no longer valid area/iteration path.
		/// </summary>
		public System.Nullable<System.Boolean> IsInvalidSyntax { get; set; }
		
		/// <summary>
		/// Indicates if this query item is public or private.
		/// </summary>
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Describes a reference to an identity.
		/// </summary>
		public IdentityReference LastExecutedBy { get; set; }
		
		/// <summary>
		/// When the query was last run.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastExecutedDate { get; set; }
		
		/// <summary>
		/// Describes a reference to an identity.
		/// </summary>
		public IdentityReference LastModifiedBy { get; set; }
		
		/// <summary>
		/// When the query item was last modified.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		/// <summary>
		/// Represents a clause in a work item query. This shows the structure of a work item query.
		/// </summary>
		public WorkItemQueryClause LinkClauses { get; set; }
		
		/// <summary>
		/// The name of the query item.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The path of the query item.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// The recursion option for use in a tree query.
		/// </summary>
		public System.Nullable<QueryHierarchyItemQueryRecursionOption> QueryRecursionOption { get; set; }
		
		/// <summary>
		/// The type of query.
		/// </summary>
		public System.Nullable<QueryHierarchyItemQueryType> QueryType { get; set; }
		
		/// <summary>
		/// The sort columns of the query.
		/// </summary>
		public WorkItemQuerySortColumn[] SortColumns { get; set; }
		
		/// <summary>
		/// Represents a clause in a work item query. This shows the structure of a work item query.
		/// </summary>
		public WorkItemQueryClause SourceClauses { get; set; }
		
		/// <summary>
		/// Represents a clause in a work item query. This shows the structure of a work item query.
		/// </summary>
		public WorkItemQueryClause TargetClauses { get; set; }
		
		/// <summary>
		/// The WIQL text of the query
		/// </summary>
		public string Wiql { get; set; }
	}
	
	/// <summary>
	/// Represents a clause in a work item query. This shows the structure of a work item query.
	/// </summary>
	public class WorkItemQueryClause
	{
		
		/// <summary>
		/// Child clauses if the current clause is a logical operator
		/// </summary>
		public WorkItemQueryClause[] Clauses { get; set; }
		
		/// <summary>
		/// Reference to a field in a work item
		/// </summary>
		public WorkItemFieldReference Field { get; set; }
		
		/// <summary>
		/// Reference to a field in a work item
		/// </summary>
		public WorkItemFieldReference FieldValue { get; set; }
		
		/// <summary>
		/// Determines if this is a field to field comparison
		/// </summary>
		public System.Nullable<System.Boolean> IsFieldValue { get; set; }
		
		/// <summary>
		/// Logical operator separating the condition clause
		/// </summary>
		public System.Nullable<WorkItemQueryClauseLogicalOperator> LogicalOperator { get; set; }
		
		/// <summary>
		/// Describes a work item field operation.
		/// </summary>
		public WorkItemFieldOperation Operator { get; set; }
		
		/// <summary>
		/// Right side of the condition when a field to value comparison
		/// </summary>
		public string Value { get; set; }
	}
	
	public enum WorkItemQueryClauseLogicalOperator
	{
		
		none = 0,
		
		and = 1,
		
		or = 2,
	}
	
	/// <summary>
	/// Describes a work item field operation.
	/// </summary>
	public class WorkItemFieldOperation
	{
		
		/// <summary>
		/// Friendly name of the operation.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Reference name of the operation.
		/// </summary>
		public string ReferenceName { get; set; }
	}
	
	public enum QueryHierarchyItemFilterOptions
	{
		
		workItems = 0,
		
		linksOneHopMustContain = 1,
		
		linksOneHopMayContain = 2,
		
		linksOneHopDoesNotContain = 3,
		
		linksRecursiveMustContain = 4,
		
		linksRecursiveMayContain = 5,
		
		linksRecursiveDoesNotContain = 6,
	}
	
	public enum QueryHierarchyItemQueryRecursionOption
	{
		
		parentFirst = 0,
		
		childFirst = 1,
	}
	
	public enum QueryHierarchyItemQueryType
	{
		
		flat = 0,
		
		tree = 1,
		
		oneHop = 2,
	}
	
	/// <summary>
	/// A sort column.
	/// </summary>
	public class WorkItemQuerySortColumn
	{
		
		/// <summary>
		/// The direction to sort by.
		/// </summary>
		public System.Nullable<System.Boolean> Descending { get; set; }
		
		/// <summary>
		/// Reference to a field in a work item
		/// </summary>
		public WorkItemFieldReference Field { get; set; }
	}
	
	public class QueryHierarchyItemsResult
	{
		
		/// <summary>
		/// The count of items.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Indicates if the max return limit was hit but there are still more items
		/// </summary>
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		/// <summary>
		/// The list of items
		/// </summary>
		public QueryHierarchyItem[] Value { get; set; }
	}
	
	public class ReportingWorkItemLinksBatch
	{
	}
	
	public class ReportingWorkItemRevisionsBatch
	{
	}
	
	/// <summary>
	/// The class represents the reporting work item revision filer.
	/// </summary>
	public class ReportingWorkItemRevisionsFilter
	{
		
		/// <summary>
		/// A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.
		/// </summary>
		public string[] Fields { get; set; }
		
		/// <summary>
		/// Include deleted work item in the result.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeDeleted { get; set; }
		
		/// <summary>
		/// Return an identity reference instead of a string value for identity fields.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeIdentityRef { get; set; }
		
		/// <summary>
		/// Include only the latest version of a work item, skipping over all previous revisions of the work item.
		/// </summary>
		public System.Nullable<System.Boolean> IncludeLatestOnly { get; set; }
		
		/// <summary>
		/// Include tag reference instead of string value for System.Tags field
		/// </summary>
		public System.Nullable<System.Boolean> IncludeTagRef { get; set; }
		
		/// <summary>
		/// A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.
		/// </summary>
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// The class describes reporting work item revision batch.
	/// </summary>
	public class StreamedBatch
	{
		
		/// <summary>
		/// ContinuationToken acts as a waterMark. Used while querying large results.
		/// </summary>
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// Returns 'true' if it's last batch, 'false' otherwise.
		/// </summary>
		public System.Nullable<System.Boolean> IsLastBatch { get; set; }
		
		/// <summary>
		/// The next link for the work item.
		/// </summary>
		public string NextLink { get; set; }
		
		/// <summary>
		/// Values such as rel, sourceId, TargetId, ChangedDate, isActive.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// The Team Context for an operation.
	/// </summary>
	public class TeamContext
	{
		
		/// <summary>
		/// The team project Id or name.  Ignored if ProjectId is set.
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// The Team Project ID.  Required if Project is not set.
		/// </summary>
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The Team Id or name.  Ignored if TeamId is set.
		/// </summary>
		public string Team { get; set; }
		
		/// <summary>
		/// The Team Id
		/// </summary>
		public string TeamId { get; set; }
	}
	
	/// <summary>
	/// Describes an update request for a work item field.
	/// </summary>
	public class UpdateWorkItemField
	{
		
		/// <summary>
		/// Indicates whether the user wants to restore the field.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
	}
	
	/// <summary>
	/// This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
	/// </summary>
	public class VssJsonCollectionWrapper
	{
		
		public string Value { get; set; }
	}
	
	public class VssJsonCollectionWrapperBase
	{
		
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// A WIQL query
	/// </summary>
	public class Wiql
	{
		
		/// <summary>
		/// The text of the WIQL query
		/// </summary>
		public string Query { get; set; }
	}
	
	/// <summary>
	/// A work artifact link describes an outbound artifact link type.
	/// </summary>
	public class WorkArtifactLink
	{
		
		/// <summary>
		/// Target artifact type.
		/// </summary>
		public string ArtifactType { get; set; }
		
		/// <summary>
		/// Outbound link type.
		/// </summary>
		public string LinkType { get; set; }
		
		/// <summary>
		/// Target tool type.
		/// </summary>
		public string ToolType { get; set; }
	}
	
	/// <summary>
	/// Describes a work item.
	/// </summary>
	public class WorkItem
	{
		
		/// <summary>
		/// Represents the reference to a specific version of a comment on a Work Item.
		/// </summary>
		public WorkItemCommentVersionRef CommentVersionRef { get; set; }
		
		/// <summary>
		/// Map of field and values for the work item.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Fields { get; set; }
		
		/// <summary>
		/// The work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Relations of the work item.
		/// </summary>
		public WorkItemRelation[] Relations { get; set; }
		
		/// <summary>
		/// Revision number of the work item.
		/// </summary>
		public System.Nullable<System.Int32> Rev { get; set; }
	}
	
	/// <summary>
	/// Represents the reference to a specific version of a comment on a Work Item.
	/// </summary>
	public class WorkItemCommentVersionRef
	{
		
		/// <summary>
		/// The id assigned to the comment.
		/// </summary>
		public System.Nullable<System.Int32> CommentId { get; set; }
		
		/// <summary>
		/// [Internal] The work item revision where this comment was originally added.
		/// </summary>
		public System.Nullable<System.Int32> CreatedInRevision { get; set; }
		
		/// <summary>
		/// [Internal] Specifies whether comment was deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// [Internal] The text of the comment.
		/// </summary>
		public string Text { get; set; }
		
		/// <summary>
		/// The version number.
		/// </summary>
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class WorkItemRelation
	{
	}
	
	/// <summary>
	/// Describes a request to get a set of work items
	/// </summary>
	public class WorkItemBatchGetRequest
	{
		
		/// <summary>
		/// The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }
		/// </summary>
		public System.Nullable<WorkItemBatchGetRequestExpand> Expand { get; set; }
		
		/// <summary>
		/// AsOf UTC date time string
		/// </summary>
		public System.Nullable<System.DateTimeOffset> AsOf { get; set; }
		
		/// <summary>
		/// The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}.
		/// </summary>
		public System.Nullable<WorkItemBatchGetRequestErrorPolicy> ErrorPolicy { get; set; }
		
		/// <summary>
		/// The requested fields
		/// </summary>
		public string[] Fields { get; set; }
		
		/// <summary>
		/// The requested work item ids
		/// </summary>
		public int[] Ids { get; set; }
	}
	
	public enum WorkItemBatchGetRequestExpand
	{
		
		none = 0,
		
		relations = 1,
		
		fields = 2,
		
		links = 3,
		
		all = 4,
	}
	
	public enum WorkItemBatchGetRequestErrorPolicy
	{
		
		fail = 0,
		
		omit = 1,
	}
	
	/// <summary>
	/// Defines a classification node for work item tracking.
	/// </summary>
	public class WorkItemClassificationNode
	{
		
		/// <summary>
		/// Dictionary that has node attributes like start/finish date for iteration nodes.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
		
		/// <summary>
		/// List of child nodes fetched.
		/// </summary>
		public WorkItemClassificationNode[] Children { get; set; }
		
		/// <summary>
		/// Flag that indicates if the classification node has any child nodes.
		/// </summary>
		public System.Nullable<System.Boolean> HasChildren { get; set; }
		
		/// <summary>
		/// Integer ID of the classification node.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// GUID ID of the classification node.
		/// </summary>
		public string Identifier { get; set; }
		
		/// <summary>
		/// Name of the classification node.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Path of the classification node.
		/// </summary>
		public string Path { get; set; }
		
		/// <summary>
		/// Node structure type.
		/// </summary>
		public System.Nullable<WorkItemClassificationNodeStructureType> StructureType { get; set; }
	}
	
	public enum WorkItemClassificationNodeStructureType
	{
		
		area = 0,
		
		iteration = 1,
	}
	
	/// <summary>
	/// Comment on Work Item
	/// </summary>
	public class WorkItemComment
	{
		
		/// <summary>
		/// Describes a reference to an identity.
		/// </summary>
		public IdentityReference RevisedBy { get; set; }
		
		/// <summary>
		/// The date of comment.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> RevisedDate { get; set; }
		
		/// <summary>
		/// The work item revision number.
		/// </summary>
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The text of the comment.
		/// </summary>
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Collection of comments.
	/// </summary>
	public class WorkItemComments
	{
		
		/// <summary>
		/// Comments collection.
		/// </summary>
		public WorkItemComment[] Comments { get; set; }
		
		/// <summary>
		/// The count of comments.
		/// </summary>
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Count of comments from the revision.
		/// </summary>
		public System.Nullable<System.Int32> FromRevisionCount { get; set; }
		
		/// <summary>
		/// Total count of comments.
		/// </summary>
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Full deleted work item object. Includes the work item itself.
	/// </summary>
	public class WorkItemDelete
	{
		
		/// <summary>
		/// Describes a work item.
		/// </summary>
		public WorkItem Resource { get; set; }
	}
	
	/// <summary>
	/// Reference to a deleted work item.
	/// </summary>
	public class WorkItemDeleteReference
	{
		
		/// <summary>
		/// The HTTP status code for work item operation in a batch request.
		/// </summary>
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// The user who deleted the work item type.
		/// </summary>
		public string DeletedBy { get; set; }
		
		/// <summary>
		/// The work item deletion date.
		/// </summary>
		public string DeletedDate { get; set; }
		
		/// <summary>
		/// Work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The exception message for work item operation in a batch request.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// Name or title of the work item.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Parent project of the deleted work item.
		/// </summary>
		public string Project { get; set; }
		
		/// <summary>
		/// Type of work item.
		/// </summary>
		public string Type { get; set; }
		
		/// <summary>
		/// REST API URL of the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Shallow Reference to a deleted work item.
	/// </summary>
	public class WorkItemDeleteShallowReference
	{
		
		/// <summary>
		/// Work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// REST API URL of the resource
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Describes an update request for a deleted work item.
	/// </summary>
	public class WorkItemDeleteUpdate
	{
		
		/// <summary>
		/// Sets a value indicating whether this work item is deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
	}
	
	/// <summary>
	/// Describes a field on a work item and it's properties specific to that work item type.
	/// </summary>
	public class WorkItemField
	{
		
		/// <summary>
		/// Indicates whether the field is sortable in server queries.
		/// </summary>
		public System.Nullable<System.Boolean> CanSortBy { get; set; }
		
		/// <summary>
		/// The description of the field.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether this field is deleted.
		/// </summary>
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// Indicates whether this field is an identity field.
		/// </summary>
		public System.Nullable<System.Boolean> IsIdentity { get; set; }
		
		/// <summary>
		/// Indicates whether this instance is picklist.
		/// </summary>
		public System.Nullable<System.Boolean> IsPicklist { get; set; }
		
		/// <summary>
		/// Indicates whether this instance is a suggested picklist .
		/// </summary>
		public System.Nullable<System.Boolean> IsPicklistSuggested { get; set; }
		
		/// <summary>
		/// Indicates whether the field can be queried in the server.
		/// </summary>
		public System.Nullable<System.Boolean> IsQueryable { get; set; }
		
		/// <summary>
		/// The name of the field.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// If this field is picklist, the identifier of the picklist associated, otherwise null
		/// </summary>
		public string PicklistId { get; set; }
		
		/// <summary>
		/// Indicates whether the field is [read only].
		/// </summary>
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The reference name of the field.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// The supported operations on this field.
		/// </summary>
		public WorkItemFieldOperation[] SupportedOperations { get; set; }
		
		/// <summary>
		/// The type of the field.
		/// </summary>
		public System.Nullable<WorkItemFieldType> Type { get; set; }
		
		/// <summary>
		/// The usage of the field.
		/// </summary>
		public System.Nullable<WorkItemFieldUsage> Usage { get; set; }
	}
	
	public enum WorkItemFieldType
	{
		
		_string = 0,
		
		integer = 1,
		
		dateTime = 2,
		
		plainText = 3,
		
		html = 4,
		
		treePath = 5,
		
		history = 6,
		
		_double = 7,
		
		guid = 8,
		
		boolean = 9,
		
		identity = 10,
		
		picklistString = 11,
		
		picklistInteger = 12,
		
		picklistDouble = 13,
	}
	
	public enum WorkItemFieldUsage
	{
		
		none = 0,
		
		workItem = 1,
		
		workItemLink = 2,
		
		tree = 3,
		
		workItemTypeExtension = 4,
	}
	
	/// <summary>
	/// Describes an update to a work item field.
	/// </summary>
	public class WorkItemFieldUpdate
	{
		
		/// <summary>
		/// The new value of the field.
		/// </summary>
		public string NewValue { get; set; }
		
		/// <summary>
		/// The old value of the field.
		/// </summary>
		public string OldValue { get; set; }
	}
	
	public class WorkItemHistory
	{
		
		public System.Nullable<System.Int32> Rev { get; set; }
		
		/// <summary>
		/// Describes a reference to an identity.
		/// </summary>
		public IdentityReference RevisedBy { get; set; }
		
		public System.Nullable<System.DateTimeOffset> RevisedDate { get; set; }
		
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Reference to a work item icon.
	/// </summary>
	public class WorkItemIcon
	{
		
		/// <summary>
		/// The identifier of the icon.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The REST URL of the resource.
		/// </summary>
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A link between two work items.
	/// </summary>
	public class WorkItemLink
	{
		
		/// <summary>
		/// The type of link.
		/// </summary>
		public string Rel { get; set; }
		
		/// <summary>
		/// Contains reference to a work item.
		/// </summary>
		public WorkItemReference Source { get; set; }
		
		/// <summary>
		/// Contains reference to a work item.
		/// </summary>
		public WorkItemReference Target { get; set; }
	}
	
	/// <summary>
	/// Describes the next state for a work item.
	/// </summary>
	public class WorkItemNextStateOnTransition
	{
		
		/// <summary>
		/// Error code if there is no next state transition possible.
		/// </summary>
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Work item ID.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Error message if there is no next state transition possible.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// Name of the next state on transition.
		/// </summary>
		public string StateOnTransition { get; set; }
	}
	
	/// <summary>
	/// The result of a work item query.
	/// </summary>
	public class WorkItemQueryResult
	{
		
		/// <summary>
		/// The date the query was run in the context of.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> AsOf { get; set; }
		
		/// <summary>
		/// The columns of the query.
		/// </summary>
		public WorkItemFieldReference[] Columns { get; set; }
		
		/// <summary>
		/// The result type
		/// </summary>
		public System.Nullable<WorkItemQueryResultQueryResultType> QueryResultType { get; set; }
		
		/// <summary>
		/// The type of the query
		/// </summary>
		public System.Nullable<WorkItemQueryResultQueryType> QueryType { get; set; }
		
		/// <summary>
		/// The sort columns of the query.
		/// </summary>
		public WorkItemQuerySortColumn[] SortColumns { get; set; }
		
		/// <summary>
		/// The work item links returned by the query.
		/// </summary>
		public WorkItemLink[] WorkItemRelations { get; set; }
		
		/// <summary>
		/// The work items returned by the query.
		/// </summary>
		public WorkItemReference[] WorkItems { get; set; }
	}
	
	public enum WorkItemQueryResultQueryResultType
	{
		
		workItem = 0,
		
		workItemLink = 1,
	}
	
	public enum WorkItemQueryResultQueryType
	{
		
		flat = 0,
		
		tree = 1,
		
		oneHop = 2,
	}
	
	/// <summary>
	/// Represents the work item type relation type.
	/// </summary>
	public class WorkItemRelationType
	{
		
		/// <summary>
		/// The collection of relation type attributes.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
	}
	
	/// <summary>
	/// Describes updates to a work item's relations.
	/// </summary>
	public class WorkItemRelationUpdates
	{
		
		/// <summary>
		/// List of newly added relations.
		/// </summary>
		public WorkItemRelation[] Added { get; set; }
		
		/// <summary>
		/// List of removed relations.
		/// </summary>
		public WorkItemRelation[] Removed { get; set; }
		
		/// <summary>
		/// List of updated relations.
		/// </summary>
		public WorkItemRelation[] Updated { get; set; }
	}
	
	/// <summary>
	/// Describes a state transition in a work item.
	/// </summary>
	public class WorkItemStateTransition
	{
		
		/// <summary>
		/// Gets a list of actions needed to transition to that state.
		/// </summary>
		public string[] Actions { get; set; }
		
		/// <summary>
		/// Name of the next state.
		/// </summary>
		public string To { get; set; }
	}
	
	public class WorkItemTagDefinition
	{
		
		public string Id { get; set; }
		
		public string Name { get; set; }
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Describes a work item template.
	/// </summary>
	public class WorkItemTemplate
	{
		
		/// <summary>
		/// Mapping of field and its templated value.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Fields { get; set; }
	}
	
	/// <summary>
	/// Describes a shallow reference to a work item template.
	/// </summary>
	public class WorkItemTemplateReference
	{
		
		/// <summary>
		/// The description of the work item template.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the work item template.
		/// </summary>
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the work item template.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the work item type.
		/// </summary>
		public string WorkItemTypeName { get; set; }
	}
	
	public class WorkItemTrackingReference
	{
		
		/// <summary>
		/// The name.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The reference name.
		/// </summary>
		public string ReferenceName { get; set; }
	}
	
	/// <summary>
	/// Base class for WIT REST resources.
	/// </summary>
	public class WorkItemTrackingResource
	{
		
		/// <summary>
		/// The class to represent a collection of REST reference links.
		/// </summary>
		public ReferenceLinks _links { get; set; }
	}
	
	/// <summary>
	/// Base class for work item tracking resource references.
	/// </summary>
	public class WorkItemTrackingResourceReference
	{
		
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Describes a work item type.
	/// </summary>
	public class WorkItemType
	{
		
		/// <summary>
		/// The color.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// The description of the work item type.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The fields that exist on the work item type.
		/// </summary>
		public WorkItemTypeFieldInstance[] FieldInstances { get; set; }
		
		/// <summary>
		/// The fields that exist on the work item type.
		/// </summary>
		public WorkItemTypeFieldInstance[] Fields { get; set; }
		
		/// <summary>
		/// Reference to a work item icon.
		/// </summary>
		public WorkItemIcon Icon { get; set; }
		
		/// <summary>
		/// True if work item type is disabled
		/// </summary>
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Gets the name of the work item type.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The reference name of the work item type.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Gets state information for the work item type.
		/// </summary>
		public WorkItemStateColor[] States { get; set; }
		
		/// <summary>
		/// Gets the various state transition mappings in the work item type.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, WorkItemStateTransition[]> Transitions { get; set; }
		
		/// <summary>
		/// The XML form.
		/// </summary>
		public string XmlForm { get; set; }
	}
	
	/// <summary>
	/// Field instance of a work item type.
	/// </summary>
	public class WorkItemTypeFieldInstance
	{
		
		/// <summary>
		/// The list of field allowed values.
		/// </summary>
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Represents the default value of the field.
		/// </summary>
		public string DefaultValue { get; set; }
	}
	
	/// <summary>
	/// Describes a work item type category.
	/// </summary>
	public class WorkItemTypeCategory
	{
		
		/// <summary>
		/// Reference to a work item type.
		/// </summary>
		public WorkItemTypeReference DefaultWorkItemType { get; set; }
		
		/// <summary>
		/// The name of the category.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The reference name of the category.
		/// </summary>
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// The work item types that belong to the category.
		/// </summary>
		public WorkItemTypeReference[] WorkItemTypes { get; set; }
	}
	
	/// <summary>
	/// Reference to a work item type.
	/// </summary>
	public class WorkItemTypeReference
	{
		
		/// <summary>
		/// Name of the work item type.
		/// </summary>
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes a work item type's colors.
	/// </summary>
	public class WorkItemTypeColor
	{
		
		/// <summary>
		/// Gets or sets the color of the primary.
		/// </summary>
		public string PrimaryColor { get; set; }
		
		/// <summary>
		/// Gets or sets the color of the secondary.
		/// </summary>
		public string SecondaryColor { get; set; }
		
		/// <summary>
		/// The name of the work item type.
		/// </summary>
		public string WorkItemTypeName { get; set; }
	}
	
	/// <summary>
	/// Describes work item type nam, its icon and color.
	/// </summary>
	public class WorkItemTypeColorAndIcon
	{
		
		/// <summary>
		/// The color of the work item type in hex format.
		/// </summary>
		public string Color { get; set; }
		
		/// <summary>
		/// The work item type icon.
		/// </summary>
		public string Icon { get; set; }
		
		/// <summary>
		/// The name of the work item type.
		/// </summary>
		public string WorkItemTypeName { get; set; }
	}
	
	/// <summary>
	/// Base field instance for workItemType fields.
	/// </summary>
	public class WorkItemTypeFieldInstanceBase
	{
		
		/// <summary>
		/// Indicates whether field value is always required.
		/// </summary>
		public System.Nullable<System.Boolean> AlwaysRequired { get; set; }
		
		/// <summary>
		/// The list of dependent fields.
		/// </summary>
		public WorkItemFieldReference[] DependentFields { get; set; }
		
		/// <summary>
		/// Gets the help text for the field.
		/// </summary>
		public string HelpText { get; set; }
	}
	
	/// <summary>
	/// Field Instance of a workItemype with detailed references.
	/// </summary>
	public class WorkItemTypeFieldWithReferences
	{
		
		/// <summary>
		/// The list of field allowed values.
		/// </summary>
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Represents the default value of the field.
		/// </summary>
		public string DefaultValue { get; set; }
	}
	
	/// <summary>
	/// Describes a work item type template.
	/// </summary>
	public class WorkItemTypeTemplate
	{
		
		/// <summary>
		/// XML template in string format.
		/// </summary>
		public string Template { get; set; }
	}
	
	/// <summary>
	/// Describes a update work item type template request body.
	/// </summary>
	public class WorkItemTypeTemplateUpdateModel
	{
		
		/// <summary>
		/// Describes the type of the action for the update request.
		/// </summary>
		public System.Nullable<WorkItemTypeTemplateUpdateModelActionType> ActionType { get; set; }
		
		/// <summary>
		/// Methodology to which the template belongs, eg. Agile, Scrum, CMMI.
		/// </summary>
		public string Methodology { get; set; }
		
		/// <summary>
		/// String representation of the work item type template.
		/// </summary>
		public string Template { get; set; }
		
		/// <summary>
		/// The type of the template described in the request body.
		/// </summary>
		public System.Nullable<WorkItemTypeTemplateUpdateModelTemplateType> TemplateType { get; set; }
	}
	
	public enum WorkItemTypeTemplateUpdateModelActionType
	{
		
		import = 0,
		
		validate = 1,
	}
	
	public enum WorkItemTypeTemplateUpdateModelTemplateType
	{
		
		workItemType = 0,
		
		globalWorkflow = 1,
	}
	
	/// <summary>
	/// Describes an update to a work item.
	/// </summary>
	public class WorkItemUpdate
	{
		
		/// <summary>
		/// List of updates to fields.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, WorkItemFieldUpdate> Fields { get; set; }
		
		/// <summary>
		/// ID of update.
		/// </summary>
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Describes updates to a work item's relations.
		/// </summary>
		public WorkItemRelationUpdates Relations { get; set; }
		
		/// <summary>
		/// The revision number of work item update.
		/// </summary>
		public System.Nullable<System.Int32> Rev { get; set; }
		
		/// <summary>
		/// Describes a reference to an identity.
		/// </summary>
		public IdentityReference RevisedBy { get; set; }
		
		/// <summary>
		/// The work item updates revision date.
		/// </summary>
		public System.Nullable<System.DateTimeOffset> RevisedDate { get; set; }
		
		/// <summary>
		/// The work item ID.
		/// </summary>
		public System.Nullable<System.Int32> WorkItemId { get; set; }
	}
	
	public partial class MyClient
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public MyClient(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the list of work item tracking outbound artifact link types.
		/// Artifact_Link_Types_List {organization}/_apis/wit/artifactlinktypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkArtifactLink[]> Artifact_Link_Types_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/artifactlinktypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkArtifactLink[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the list of work item tracking outbound artifact link types.
		/// Artifact_Link_Types_List {organization}/_apis/wit/artifactlinktypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkArtifactLink[] Artifact_Link_Types_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/artifactlinktypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkArtifactLink[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of all work item icons.
		/// Work_Item_Icons_List {organization}/_apis/wit/workitemicons
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemIcon[]> Work_Item_Icons_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemicons&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemIcon[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of all work item icons.
		/// Work_Item_Icons_List {organization}/_apis/wit/workitemicons
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemIcon[] Work_Item_Icons_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemicons&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemIcon[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a work item icon given the friendly name and icon color.
		/// Work_Item_Icons_Get {organization}/_apis/wit/workitemicons/{icon}
		/// </summary>
		/// <param name="icon">The name of the icon</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="color">The 6-digit hex color for the icon</param>
		/// <param name="v">The version of the icon (used only for cache invalidation)</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemIcon> Work_Item_Icons_GetAsync(string icon, string organization, string color, int v, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemicons/"+ (icon==null? "" : System.Uri.EscapeDataString(icon))+"&color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&v="+v+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemIcon>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a work item icon given the friendly name and icon color.
		/// Work_Item_Icons_Get {organization}/_apis/wit/workitemicons/{icon}
		/// </summary>
		/// <param name="icon">The name of the icon</param>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="color">The 6-digit hex color for the icon</param>
		/// <param name="v">The version of the icon (used only for cache invalidation)</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemIcon Work_Item_Icons_Get(string icon, string organization, string color, int v, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemicons/"+ (icon==null? "" : System.Uri.EscapeDataString(icon))+"&color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&v="+v+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemIcon>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the work item relation types.
		/// Work_Item_Relation_Types_List {organization}/_apis/wit/workitemrelationtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemRelationType[]> Work_Item_Relation_Types_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemrelationtypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemRelationType[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the work item relation types.
		/// Work_Item_Relation_Types_List {organization}/_apis/wit/workitemrelationtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemRelationType[] Work_Item_Relation_Types_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemrelationtypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemRelationType[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the work item relation type definition.
		/// Work_Item_Relation_Types_Get {organization}/_apis/wit/workitemrelationtypes/{relation}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="relation">The relation name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemRelationType> Work_Item_Relation_Types_GetAsync(string organization, string relation, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemrelationtypes/"+ (relation==null? "" : System.Uri.EscapeDataString(relation))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemRelationType>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the work item relation type definition.
		/// Work_Item_Relation_Types_Get {organization}/_apis/wit/workitemrelationtypes/{relation}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="relation">The relation name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemRelationType Work_Item_Relation_Types_Get(string organization, string relation, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemrelationtypes/"+ (relation==null? "" : System.Uri.EscapeDataString(relation))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemRelationType>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the next state on the given work item IDs.
		/// Work_Item_Transitions_List {organization}/_apis/wit/workitemtransitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="ids">list of work item ids</param>
		/// <param name="action">possible actions. Currently only supports checkin</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemNextStateOnTransition[]> Work_Item_Transitions_ListAsync(string organization, string ids, string action, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemtransitions&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&action=" + (action==null? "" : System.Uri.EscapeDataString(action))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemNextStateOnTransition[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the next state on the given work item IDs.
		/// Work_Item_Transitions_List {organization}/_apis/wit/workitemtransitions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="ids">list of work item ids</param>
		/// <param name="action">possible actions. Currently only supports checkin</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemNextStateOnTransition[] Work_Item_Transitions_List(string organization, string ids, string action, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/wit/workitemtransitions&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&action=" + (action==null? "" : System.Uri.EscapeDataString(action))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemNextStateOnTransition[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets recent work item activities
		/// Account_My_Work_Recent_Activity_List {organization}/_apis/work/accountmyworkrecentactivity
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<AccountRecentActivityWorkItemModel2[]> Account_My_Work_Recent_Activity_ListAsync(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/work/accountmyworkrecentactivity&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountRecentActivityWorkItemModel2[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets recent work item activities
		/// Account_My_Work_Recent_Activity_List {organization}/_apis/work/accountmyworkrecentactivity
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public AccountRecentActivityWorkItemModel2[] Account_My_Work_Recent_Activity_List(string organization, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/_apis/work/accountmyworkrecentactivity&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountRecentActivityWorkItemModel2[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Queries work items linked to a given list of artifact URI.
		/// Artifact_Uri_Query_Query {organization}/{project}/_apis/wit/artifacturiquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Defines a list of artifact URI for querying work items.</param>
		/// <returns>successful operation</returns>
		public async Task<ArtifactUriQueryResult> Artifact_Uri_Query_QueryAsync(string organization, string project, string api_version, ArtifactUriQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/artifacturiquery&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtifactUriQueryResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Queries work items linked to a given list of artifact URI.
		/// Artifact_Uri_Query_Query {organization}/{project}/_apis/wit/artifacturiquery
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Defines a list of artifact URI for querying work items.</param>
		/// <returns>successful operation</returns>
		public ArtifactUriQueryResult Artifact_Uri_Query_Query(string organization, string project, string api_version, ArtifactUriQuery requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/artifacturiquery&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtifactUriQueryResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Downloads an attachment.
		/// Attachments_Get {organization}/{project}/_apis/wit/attachments/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">Attachment ID</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fileName">Name of the file</param>
		/// <param name="download">If set to <c>true</c> always download attachment</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Attachments_GetAsync(string organization, string id, string project, string fileName, bool download, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/attachments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&fileName=" + (fileName==null? "" : System.Uri.EscapeDataString(fileName))+"&download="+download+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Downloads an attachment.
		/// Attachments_Get {organization}/{project}/_apis/wit/attachments/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">Attachment ID</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fileName">Name of the file</param>
		/// <param name="download">If set to <c>true</c> always download attachment</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Attachments_Get(string organization, string id, string project, string fileName, bool download, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/attachments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&fileName=" + (fileName==null? "" : System.Uri.EscapeDataString(fileName))+"&download="+download+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets root classification nodes under the project.
		/// Classification_Nodes_Get_Root_Nodes {organization}/{project}/_apis/wit/classificationnodes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="depth">Depth of children to fetch.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemClassificationNode[]> Classification_Nodes_Get_Root_NodesAsync(string organization, string project, int depth, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes&$depth="+depth+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets root classification nodes under the project.
		/// Classification_Nodes_Get_Root_Nodes {organization}/{project}/_apis/wit/classificationnodes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="depth">Depth of children to fetch.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemClassificationNode[] Classification_Nodes_Get_Root_Nodes(string organization, string project, int depth, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes&$depth="+depth+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the classification node for a given node path.
		/// Classification_Nodes_Get {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="depth">Depth of children to fetch.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemClassificationNode> Classification_Nodes_GetAsync(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, int depth, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&$depth="+depth+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the classification node for a given node path.
		/// Classification_Nodes_Get {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="depth">Depth of children to fetch.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemClassificationNode Classification_Nodes_Get(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, int depth, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&$depth="+depth+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new or update an existing classification node.
		/// Classification_Nodes_Create_Or_Update {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Node to create or update.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemClassificationNode> Classification_Nodes_Create_Or_UpdateAsync(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, string api_version, WorkItemClassificationNode requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new or update an existing classification node.
		/// Classification_Nodes_Create_Or_Update {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Node to create or update.</param>
		/// <returns>successful operation</returns>
		public WorkItemClassificationNode Classification_Nodes_Create_Or_Update(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, string api_version, WorkItemClassificationNode requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an existing classification node.
		/// Classification_Nodes_Delete {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="reclassifyId">Id of the target classification node for reclassification.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Classification_Nodes_DeleteAsync(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, int reclassifyId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&$reclassifyId="+reclassifyId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an existing classification node.
		/// Classification_Nodes_Delete {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="reclassifyId">Id of the target classification node for reclassification.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Classification_Nodes_Delete(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, int reclassifyId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&$reclassifyId="+reclassifyId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an existing classification node.
		/// Classification_Nodes_Update {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Node to create or update.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemClassificationNode> Classification_Nodes_UpdateAsync(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, string api_version, WorkItemClassificationNode requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an existing classification node.
		/// Classification_Nodes_Update {organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="structureGroup">Structure group of the classification node, area or iteration.</param>
		/// <param name="path">Path of the classification node.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Node to create or update.</param>
		/// <returns>successful operation</returns>
		public WorkItemClassificationNode Classification_Nodes_Update(string organization, string project, Classification_Nodes_GetStructureGroup structureGroup, string path, string api_version, WorkItemClassificationNode requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/classificationnodes/"+structureGroup+"/"+ (path==null? "" : System.Uri.EscapeDataString(path))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemClassificationNode>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information for all fields. The project ID/name parameter is optional.
		/// Fields_List {organization}/{project}/_apis/wit/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="expand">Use ExtensionFields to include extension fields, otherwise exclude them. Unless the feature flag for this parameter is enabled, extension fields are always included.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemField[]> Fields_ListAsync(string organization, string project, Fields_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information for all fields. The project ID/name parameter is optional.
		/// Fields_List {organization}/{project}/_apis/wit/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="expand">Use ExtensionFields to include extension fields, otherwise exclude them. Unless the feature flag for this parameter is enabled, extension fields are always included.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemField[] Fields_List(string organization, string project, Fields_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new field.
		/// Fields_Create {organization}/{project}/_apis/wit/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">New field definition</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemField> Fields_CreateAsync(string organization, string project, string api_version, WorkItemField requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new field.
		/// Fields_Create {organization}/{project}/_apis/wit/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">New field definition</param>
		/// <returns>successful operation</returns>
		public WorkItemField Fields_Create(string organization, string project, string api_version, WorkItemField requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information on a specific field.
		/// Fields_Get {organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fieldNameOrRefName">Field simple name or reference name</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemField> Fields_GetAsync(string organization, string fieldNameOrRefName, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields/"+ (fieldNameOrRefName==null? "" : System.Uri.EscapeDataString(fieldNameOrRefName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information on a specific field.
		/// Fields_Get {organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fieldNameOrRefName">Field simple name or reference name</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemField Fields_Get(string organization, string fieldNameOrRefName, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields/"+ (fieldNameOrRefName==null? "" : System.Uri.EscapeDataString(fieldNameOrRefName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the field. To undelete a filed, see "Update Field" API.
		/// Fields_Delete {organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fieldNameOrRefName">Field simple name or reference name</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Fields_DeleteAsync(string organization, string fieldNameOrRefName, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields/"+ (fieldNameOrRefName==null? "" : System.Uri.EscapeDataString(fieldNameOrRefName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the field. To undelete a filed, see "Update Field" API.
		/// Fields_Delete {organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fieldNameOrRefName">Field simple name or reference name</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Fields_Delete(string organization, string fieldNameOrRefName, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields/"+ (fieldNameOrRefName==null? "" : System.Uri.EscapeDataString(fieldNameOrRefName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a field.
		/// Fields_Update {organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fieldNameOrRefName">Name/reference name of the field to be updated</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Payload contains desired value of the field's properties</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemField> Fields_UpdateAsync(string organization, string fieldNameOrRefName, string project, string api_version, UpdateWorkItemField requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields/"+ (fieldNameOrRefName==null? "" : System.Uri.EscapeDataString(fieldNameOrRefName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a field.
		/// Fields_Update {organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="fieldNameOrRefName">Name/reference name of the field to be updated</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Payload contains desired value of the field's properties</param>
		/// <returns>successful operation</returns>
		public WorkItemField Fields_Update(string organization, string fieldNameOrRefName, string project, string api_version, UpdateWorkItemField requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/fields/"+ (fieldNameOrRefName==null? "" : System.Uri.EscapeDataString(fieldNameOrRefName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemField>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Migrates a project to a different process within the same OOB type. For example, you can only migrate a project from agile/custom-agile to agile/custom-agile.
		/// Project_Process_Migration_Migrate_Projects_Process {organization}/{project}/_apis/wit/projectprocessmigration
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ProcessMigrationResultModel> Project_Process_Migration_Migrate_Projects_ProcessAsync(string organization, string project, string api_version, ProcessIdModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/projectprocessmigration&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProcessMigrationResultModel>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Migrates a project to a different process within the same OOB type. For example, you can only migrate a project from agile/custom-agile to agile/custom-agile.
		/// Project_Process_Migration_Migrate_Projects_Process {organization}/{project}/_apis/wit/projectprocessmigration
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ProcessMigrationResultModel Project_Process_Migration_Migrate_Projects_Process(string organization, string project, string api_version, ProcessIdModel requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/projectprocessmigration&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProcessMigrationResultModel>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the root queries and their children
		/// Queries_List {organization}/{project}/_apis/wit/queries
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="expand">Include the query string (wiql), clauses, query result columns, and sort options in the results.</param>
		/// <param name="depth">In the folder of queries, return child queries and folders to this depth.</param>
		/// <param name="includeDeleted">Include deleted queries and folders</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<QueryHierarchyItem[]> Queries_ListAsync(string organization, string project, QueryBatchGetRequestExpand expand, int depth, bool includeDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries&$expand=" + expand+"&$depth="+depth+"&$includeDeleted="+includeDeleted+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the root queries and their children
		/// Queries_List {organization}/{project}/_apis/wit/queries
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="expand">Include the query string (wiql), clauses, query result columns, and sort options in the results.</param>
		/// <param name="depth">In the folder of queries, return child queries and folders to this depth.</param>
		/// <param name="includeDeleted">Include deleted queries and folders</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public QueryHierarchyItem[] Queries_List(string organization, string project, QueryBatchGetRequestExpand expand, int depth, bool includeDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries&$expand=" + expand+"&$depth="+depth+"&$includeDeleted="+includeDeleted+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an individual query and its children
		/// Queries_Get {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">ID or path of the query.</param>
		/// <param name="expand">Include the query string (wiql), clauses, query result columns, and sort options in the results.</param>
		/// <param name="depth">In the folder of queries, return child queries and folders to this depth.</param>
		/// <param name="includeDeleted">Include deleted queries and folders</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<QueryHierarchyItem> Queries_GetAsync(string organization, string project, string query, QueryBatchGetRequestExpand expand, int depth, bool includeDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&$expand=" + expand+"&$depth="+depth+"&$includeDeleted="+includeDeleted+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an individual query and its children
		/// Queries_Get {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">ID or path of the query.</param>
		/// <param name="expand">Include the query string (wiql), clauses, query result columns, and sort options in the results.</param>
		/// <param name="depth">In the folder of queries, return child queries and folders to this depth.</param>
		/// <param name="includeDeleted">Include deleted queries and folders</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public QueryHierarchyItem Queries_Get(string organization, string project, string query, QueryBatchGetRequestExpand expand, int depth, bool includeDeleted, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&$expand=" + expand+"&$depth="+depth+"&$includeDeleted="+includeDeleted+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a query, or moves a query.
		/// 
		/// Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc=/vsts/work/track/toc.json&bc=/vsts/work/track/breadcrumb/toc.json&view=vsts).
		/// Queries_Create {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">The parent id or path under which the query is to be created.</param>
		/// <param name="validateWiqlOnly">If you only want to validate your WIQL query without actually creating one, set it to true. Default is false.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The query to create.</param>
		/// <returns>successful operation</returns>
		public async Task<QueryHierarchyItem> Queries_CreateAsync(string organization, string project, string query, bool validateWiqlOnly, string api_version, QueryHierarchyItem requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&validateWiqlOnly="+validateWiqlOnly+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a query, or moves a query.
		/// 
		/// Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc=/vsts/work/track/toc.json&bc=/vsts/work/track/breadcrumb/toc.json&view=vsts).
		/// Queries_Create {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">The parent id or path under which the query is to be created.</param>
		/// <param name="validateWiqlOnly">If you only want to validate your WIQL query without actually creating one, set it to true. Default is false.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The query to create.</param>
		/// <returns>successful operation</returns>
		public QueryHierarchyItem Queries_Create(string organization, string project, string query, bool validateWiqlOnly, string api_version, QueryHierarchyItem requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&validateWiqlOnly="+validateWiqlOnly+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
		/// Queries_Delete {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">ID or path of the query or folder to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Queries_DeleteAsync(string organization, string project, string query, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
		/// Queries_Delete {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">ID or path of the query or folder to delete.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Queries_Delete(string organization, string project, string query, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a query or a folder. This allows you to update, rename and move queries and folders.
		/// Queries_Update {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">The ID or path for the query to update.</param>
		/// <param name="undeleteDescendants">Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The query to update.</param>
		/// <returns>successful operation</returns>
		public async Task<QueryHierarchyItem> Queries_UpdateAsync(string organization, string project, string query, bool undeleteDescendants, string api_version, QueryHierarchyItem requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&$undeleteDescendants="+undeleteDescendants+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a query or a folder. This allows you to update, rename and move queries and folders.
		/// Queries_Update {organization}/{project}/_apis/wit/queries/{query}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="query">The ID or path for the query to update.</param>
		/// <param name="undeleteDescendants">Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The query to update.</param>
		/// <returns>successful operation</returns>
		public QueryHierarchyItem Queries_Update(string organization, string project, string query, bool undeleteDescendants, string api_version, QueryHierarchyItem requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queries/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"&$undeleteDescendants="+undeleteDescendants+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of queries by ids (Maximum 1000)
		/// Queries_Get_Queries_Batch {organization}/{project}/_apis/wit/queriesbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<QueryHierarchyItem[]> Queries_Get_Queries_BatchAsync(string organization, string project, string api_version, QueryBatchGetRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queriesbatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of queries by ids (Maximum 1000)
		/// Queries_Get_Queries_Batch {organization}/{project}/_apis/wit/queriesbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public QueryHierarchyItem[] Queries_Get_Queries_Batch(string organization, string project, string api_version, QueryBatchGetRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/queriesbatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryHierarchyItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of the IDs and the URLs of the deleted the work items in the Recycle Bin.
		/// Recyclebin_Get_Deleted_Work_Item_Shallow_References {organization}/{project}/_apis/wit/recyclebin
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemDeleteShallowReference[]> Recyclebin_Get_Deleted_Work_Item_Shallow_ReferencesAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDeleteShallowReference[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of the IDs and the URLs of the deleted the work items in the Recycle Bin.
		/// Recyclebin_Get_Deleted_Work_Item_Shallow_References {organization}/{project}/_apis/wit/recyclebin
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemDeleteShallowReference[] Recyclebin_Get_Deleted_Work_Item_Shallow_References(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDeleteShallowReference[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a deleted work item from Recycle Bin.
		/// Recyclebin_Get {organization}/{project}/_apis/wit/recyclebin/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be returned</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemDelete> Recyclebin_GetAsync(string organization, int id, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin/"+id+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDelete>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a deleted work item from Recycle Bin.
		/// Recyclebin_Get {organization}/{project}/_apis/wit/recyclebin/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be returned</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemDelete Recyclebin_Get(string organization, int id, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin/"+id+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDelete>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Destroys the specified work item permanently from the Recycle Bin. This action can not be undone.
		/// Recyclebin_Destroy_Work_Item {organization}/{project}/_apis/wit/recyclebin/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be destroyed permanently</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Recyclebin_Destroy_Work_ItemAsync(string organization, int id, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin/"+id+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Destroys the specified work item permanently from the Recycle Bin. This action can not be undone.
		/// Recyclebin_Destroy_Work_Item {organization}/{project}/_apis/wit/recyclebin/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be destroyed permanently</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Recyclebin_Destroy_Work_Item(string organization, int id, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin/"+id+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Restores the deleted work item from Recycle Bin.
		/// Recyclebin_Restore_Work_Item {organization}/{project}/_apis/wit/recyclebin/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be restored</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Paylod with instructions to update the IsDeleted flag to false</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemDelete> Recyclebin_Restore_Work_ItemAsync(string organization, int id, string project, string api_version, WorkItemDeleteUpdate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin/"+id+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDelete>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Restores the deleted work item from Recycle Bin.
		/// Recyclebin_Restore_Work_Item {organization}/{project}/_apis/wit/recyclebin/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be restored</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">Paylod with instructions to update the IsDeleted flag to false</param>
		/// <returns>successful operation</returns>
		public WorkItemDelete Recyclebin_Restore_Work_Item(string organization, int id, string project, string api_version, WorkItemDeleteUpdate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/recyclebin/"+id+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDelete>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a batch of work item links
		/// Reporting_Work_Item_Links_Get {organization}/{project}/_apis/wit/reporting/workitemlinks
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="linkTypes">A list of types to filter the results to specific link types. Omit this parameter to get work item links of all link types.</param>
		/// <param name="types">A list of types to filter the results to specific work item types. Omit this parameter to get work item links of all work item types.</param>
		/// <param name="continuationToken">Specifies the continuationToken to start the batch from. Omit this parameter to get the first batch of links.</param>
		/// <param name="startDateTime">Date/time to use as a starting point for link changes. Only link changes that occurred after that date/time will be returned. Cannot be used in conjunction with 'watermark' parameter.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ReportingWorkItemLinksBatch> Reporting_Work_Item_Links_GetAsync(string organization, string project, string linkTypes, string types, string continuationToken, System.DateTimeOffset startDateTime, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workitemlinks&linkTypes=" + (linkTypes==null? "" : System.Uri.EscapeDataString(linkTypes))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemLinksBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a batch of work item links
		/// Reporting_Work_Item_Links_Get {organization}/{project}/_apis/wit/reporting/workitemlinks
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="linkTypes">A list of types to filter the results to specific link types. Omit this parameter to get work item links of all link types.</param>
		/// <param name="types">A list of types to filter the results to specific work item types. Omit this parameter to get work item links of all work item types.</param>
		/// <param name="continuationToken">Specifies the continuationToken to start the batch from. Omit this parameter to get the first batch of links.</param>
		/// <param name="startDateTime">Date/time to use as a starting point for link changes. Only link changes that occurred after that date/time will be returned. Cannot be used in conjunction with 'watermark' parameter.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ReportingWorkItemLinksBatch Reporting_Work_Item_Links_Get(string organization, string project, string linkTypes, string types, string continuationToken, System.DateTimeOffset startDateTime, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workitemlinks&linkTypes=" + (linkTypes==null? "" : System.Uri.EscapeDataString(linkTypes))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemLinksBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a batch of work item revisions with the option of including deleted items
		/// Reporting_Work_Item_Revisions_Read_Reporting_Revisions_Get {organization}/{project}/_apis/wit/reporting/workitemrevisions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fields">A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.</param>
		/// <param name="types">A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.</param>
		/// <param name="continuationToken">Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.</param>
		/// <param name="startDateTime">Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.</param>
		/// <param name="includeIdentityRef">Return an identity reference instead of a string value for identity fields.</param>
		/// <param name="includeDeleted">Specify if the deleted item should be returned.</param>
		/// <param name="includeTagRef">Specify if the tag objects should be returned for System.Tags field.</param>
		/// <param name="includeLatestOnly">Return only the latest revisions of work items, skipping all historical revisions</param>
		/// <param name="expand">Return all the fields in work item revisions, including long text fields which are not returned by default</param>
		/// <param name="includeDiscussionChangesOnly">Return only the those revisions of work items, where only history field was changed</param>
		/// <param name="maxPageSize">The maximum number of results to return in this batch</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ReportingWorkItemRevisionsBatch> Reporting_Work_Item_Revisions_Read_Reporting_Revisions_GetAsync(string organization, string project, string fields, string types, string continuationToken, System.DateTimeOffset startDateTime, bool includeIdentityRef, bool includeDeleted, bool includeTagRef, bool includeLatestOnly, Reporting_Work_Item_Revisions_Read_Reporting_Revisions_GetExpand expand, bool includeDiscussionChangesOnly, int maxPageSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workitemrevisions&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&includeIdentityRef="+includeIdentityRef+"&includeDeleted="+includeDeleted+"&includeTagRef="+includeTagRef+"&includeLatestOnly="+includeLatestOnly+"&$expand=" + expand+"&includeDiscussionChangesOnly="+includeDiscussionChangesOnly+"&$maxPageSize="+maxPageSize+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemRevisionsBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a batch of work item revisions with the option of including deleted items
		/// Reporting_Work_Item_Revisions_Read_Reporting_Revisions_Get {organization}/{project}/_apis/wit/reporting/workitemrevisions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fields">A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.</param>
		/// <param name="types">A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.</param>
		/// <param name="continuationToken">Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.</param>
		/// <param name="startDateTime">Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.</param>
		/// <param name="includeIdentityRef">Return an identity reference instead of a string value for identity fields.</param>
		/// <param name="includeDeleted">Specify if the deleted item should be returned.</param>
		/// <param name="includeTagRef">Specify if the tag objects should be returned for System.Tags field.</param>
		/// <param name="includeLatestOnly">Return only the latest revisions of work items, skipping all historical revisions</param>
		/// <param name="expand">Return all the fields in work item revisions, including long text fields which are not returned by default</param>
		/// <param name="includeDiscussionChangesOnly">Return only the those revisions of work items, where only history field was changed</param>
		/// <param name="maxPageSize">The maximum number of results to return in this batch</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ReportingWorkItemRevisionsBatch Reporting_Work_Item_Revisions_Read_Reporting_Revisions_Get(string organization, string project, string fields, string types, string continuationToken, System.DateTimeOffset startDateTime, bool includeIdentityRef, bool includeDeleted, bool includeTagRef, bool includeLatestOnly, Reporting_Work_Item_Revisions_Read_Reporting_Revisions_GetExpand expand, bool includeDiscussionChangesOnly, int maxPageSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workitemrevisions&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&includeIdentityRef="+includeIdentityRef+"&includeDeleted="+includeDeleted+"&includeTagRef="+includeTagRef+"&includeLatestOnly="+includeLatestOnly+"&$expand=" + expand+"&includeDiscussionChangesOnly="+includeDiscussionChangesOnly+"&$maxPageSize="+maxPageSize+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemRevisionsBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.
		/// Reporting_Work_Item_Revisions_Read_Reporting_Revisions_Post {organization}/{project}/_apis/wit/reporting/workitemrevisions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.</param>
		/// <param name="startDateTime">Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">An object that contains request settings: field filter, type filter, identity format</param>
		/// <returns>successful operation</returns>
		public async Task<ReportingWorkItemRevisionsBatch> Reporting_Work_Item_Revisions_Read_Reporting_Revisions_PostAsync(string organization, string project, string continuationToken, System.DateTimeOffset startDateTime, Reporting_Work_Item_Revisions_Read_Reporting_Revisions_GetExpand expand, string api_version, ReportingWorkItemRevisionsFilter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workitemrevisions&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemRevisionsBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.
		/// Reporting_Work_Item_Revisions_Read_Reporting_Revisions_Post {organization}/{project}/_apis/wit/reporting/workitemrevisions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="continuationToken">Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.</param>
		/// <param name="startDateTime">Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">An object that contains request settings: field filter, type filter, identity format</param>
		/// <returns>successful operation</returns>
		public ReportingWorkItemRevisionsBatch Reporting_Work_Item_Revisions_Read_Reporting_Revisions_Post(string organization, string project, string continuationToken, System.DateTimeOffset startDateTime, Reporting_Work_Item_Revisions_Read_Reporting_Revisions_GetExpand expand, string api_version, ReportingWorkItemRevisionsFilter requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workitemrevisions&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemRevisionsBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Work_Item_Revisions_Discussions_Read_Reporting_Discussions {organization}/{project}/_apis/wit/reporting/workItemRevisions/discussions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<ReportingWorkItemRevisionsBatch> Work_Item_Revisions_Discussions_Read_Reporting_DiscussionsAsync(string organization, string project, string continuationToken, int maxPageSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workItemRevisions/discussions&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&$maxPageSize="+maxPageSize+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemRevisionsBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Work_Item_Revisions_Discussions_Read_Reporting_Discussions {organization}/{project}/_apis/wit/reporting/workItemRevisions/discussions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public ReportingWorkItemRevisionsBatch Work_Item_Revisions_Discussions_Read_Reporting_Discussions(string organization, string project, string continuationToken, int maxPageSize, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/reporting/workItemRevisions/discussions&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&$maxPageSize="+maxPageSize+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportingWorkItemRevisionsBatch>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_List {organization}/{project}/_apis/wit/tags
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTagDefinition[]> Tags_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTagDefinition[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_List {organization}/{project}/_apis/wit/tags
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTagDefinition[] Tags_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTagDefinition[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_Get {organization}/{project}/_apis/wit/tags/{tagIdOrName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTagDefinition> Tags_GetAsync(string organization, string project, string tagIdOrName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags/"+ (tagIdOrName==null? "" : System.Uri.EscapeDataString(tagIdOrName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTagDefinition>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_Get {organization}/{project}/_apis/wit/tags/{tagIdOrName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTagDefinition Tags_Get(string organization, string project, string tagIdOrName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags/"+ (tagIdOrName==null? "" : System.Uri.EscapeDataString(tagIdOrName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTagDefinition>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_Delete {organization}/{project}/_apis/wit/tags/{tagIdOrName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Tags_DeleteAsync(string organization, string project, string tagIdOrName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags/"+ (tagIdOrName==null? "" : System.Uri.EscapeDataString(tagIdOrName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_Delete {organization}/{project}/_apis/wit/tags/{tagIdOrName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Tags_Delete(string organization, string project, string tagIdOrName, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags/"+ (tagIdOrName==null? "" : System.Uri.EscapeDataString(tagIdOrName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_Update {organization}/{project}/_apis/wit/tags/{tagIdOrName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTagDefinition> Tags_UpdateAsync(string organization, string project, string tagIdOrName, string api_version, WorkItemTagDefinition requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags/"+ (tagIdOrName==null? "" : System.Uri.EscapeDataString(tagIdOrName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTagDefinition>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tags_Update {organization}/{project}/_apis/wit/tags/{tagIdOrName}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTagDefinition Tags_Update(string organization, string project, string tagIdOrName, string api_version, WorkItemTagDefinition requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/tags/"+ (tagIdOrName==null? "" : System.Uri.EscapeDataString(tagIdOrName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTagDefinition>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of work items (Maximum 200)
		/// Work_Items_List {organization}/{project}/_apis/wit/workitems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="ids">The comma-separated list of requested work item ids. (Maximum 200 ids allowed).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fields">Comma-separated list of requested fields</param>
		/// <param name="asOf">AsOf UTC date time string</param>
		/// <param name="expand">The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.</param>
		/// <param name="errorPolicy">The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItem[]> Work_Items_ListAsync(string organization, string ids, string project, string fields, System.DateTimeOffset asOf, WorkItemBatchGetRequestExpand expand, QueryBatchGetRequestErrorPolicy errorPolicy, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&asOf=" + asOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&errorPolicy=" + errorPolicy+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of work items (Maximum 200)
		/// Work_Items_List {organization}/{project}/_apis/wit/workitems
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="ids">The comma-separated list of requested work item ids. (Maximum 200 ids allowed).</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fields">Comma-separated list of requested fields</param>
		/// <param name="asOf">AsOf UTC date time string</param>
		/// <param name="expand">The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.</param>
		/// <param name="errorPolicy">The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItem[] Work_Items_List(string organization, string ids, string project, string fields, System.DateTimeOffset asOf, WorkItemBatchGetRequestExpand expand, QueryBatchGetRequestErrorPolicy errorPolicy, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&asOf=" + asOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&errorPolicy=" + errorPolicy+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single work item from a template.
		/// Work_Items_Get_Work_Item_Template {organization}/{project}/_apis/wit/workitems/${type}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">The work item type name</param>
		/// <param name="fields">Comma-separated list of requested fields</param>
		/// <param name="asOf">AsOf UTC date time string</param>
		/// <param name="expand">The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItem> Work_Items_Get_Work_Item_TemplateAsync(string organization, string project, string type, string fields, System.DateTimeOffset asOf, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems/$"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&asOf=" + asOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single work item from a template.
		/// Work_Items_Get_Work_Item_Template {organization}/{project}/_apis/wit/workitems/${type}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">The work item type name</param>
		/// <param name="fields">Comma-separated list of requested fields</param>
		/// <param name="asOf">AsOf UTC date time string</param>
		/// <param name="expand">The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItem Work_Items_Get_Work_Item_Template(string organization, string project, string type, string fields, System.DateTimeOffset asOf, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems/$"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&asOf=" + asOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single work item.
		/// Work_Items_Get_Work_Item {organization}/{project}/_apis/wit/workitems/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The work item id</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fields">Comma-separated list of requested fields</param>
		/// <param name="asOf">AsOf UTC date time string</param>
		/// <param name="expand">The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItem> Work_Items_Get_Work_ItemAsync(string organization, int id, string project, string fields, System.DateTimeOffset asOf, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems/"+id+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&asOf=" + asOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single work item.
		/// Work_Items_Get_Work_Item {organization}/{project}/_apis/wit/workitems/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The work item id</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="fields">Comma-separated list of requested fields</param>
		/// <param name="asOf">AsOf UTC date time string</param>
		/// <param name="expand">The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItem Work_Items_Get_Work_Item(string organization, int id, string project, string fields, System.DateTimeOffset asOf, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems/"+id+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&asOf=" + asOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified work item and sends it to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion. It is recommended NOT to use this parameter. If you do, please use this parameter with extreme caution.
		/// Work_Items_Delete {organization}/{project}/_apis/wit/workitems/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be deleted</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="destroy">Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemDelete> Work_Items_DeleteAsync(string organization, int id, string project, bool destroy, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems/"+id+"&destroy="+destroy+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDelete>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified work item and sends it to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion. It is recommended NOT to use this parameter. If you do, please use this parameter with extreme caution.
		/// Work_Items_Delete {organization}/{project}/_apis/wit/workitems/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">ID of the work item to be deleted</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="destroy">Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemDelete Work_Items_Delete(string organization, int id, string project, bool destroy, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitems/"+id+"&destroy="+destroy+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemDelete>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of fully hydrated work item revisions, paged.
		/// Revisions_List {organization}/{project}/_apis/wit/workItems/{id}/revisions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItem[]> Revisions_ListAsync(string organization, int id, string project, int top, int skip, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/revisions&$top="+top+"&$skip="+skip+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of fully hydrated work item revisions, paged.
		/// Revisions_List {organization}/{project}/_apis/wit/workItems/{id}/revisions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItem[] Revisions_List(string organization, int id, string project, int top, int skip, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/revisions&$top="+top+"&$skip="+skip+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a fully hydrated work item for the requested revision
		/// Revisions_Get {organization}/{project}/_apis/wit/workItems/{id}/revisions/{revisionNumber}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItem> Revisions_GetAsync(string organization, int id, int revisionNumber, string project, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/revisions/"+revisionNumber+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a fully hydrated work item for the requested revision
		/// Revisions_Get {organization}/{project}/_apis/wit/workItems/{id}/revisions/{revisionNumber}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItem Revisions_Get(string organization, int id, int revisionNumber, string project, WorkItemBatchGetRequestExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/revisions/"+revisionNumber+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a the deltas between work item revisions
		/// Updates_List {organization}/{project}/_apis/wit/workItems/{id}/updates
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemUpdate[]> Updates_ListAsync(string organization, int id, string project, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/updates&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemUpdate[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a the deltas between work item revisions
		/// Updates_List {organization}/{project}/_apis/wit/workItems/{id}/updates
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemUpdate[] Updates_List(string organization, int id, string project, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/updates&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemUpdate[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single update for a work item
		/// Updates_Get {organization}/{project}/_apis/wit/workItems/{id}/updates/{updateNumber}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemUpdate> Updates_GetAsync(string organization, int id, int updateNumber, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/updates/"+updateNumber+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemUpdate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single update for a work item
		/// Updates_Get {organization}/{project}/_apis/wit/workItems/{id}/updates/{updateNumber}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemUpdate Updates_Get(string organization, int id, int updateNumber, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+id+"/updates/"+updateNumber+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemUpdate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of work item comments by ids.
		/// Comments_Get_Comments_Batch {organization}/{project}/_apis/wit/workItems/{workItemId}/comments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item to get comments for.</param>
		/// <param name="ids">Comma-separated list of comment ids to return.</param>
		/// <param name="includeDeleted">Specify if the deleted comments should be retrieved.</param>
		/// <param name="expand">Specifies the additional data retrieval options for work item comments.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CommentList> Comments_Get_Comments_BatchAsync(string organization, string project, int workItemId, string ids, bool includeDeleted, Comments_Get_Comments_BatchExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&includeDeleted="+includeDeleted+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of work item comments by ids.
		/// Comments_Get_Comments_Batch {organization}/{project}/_apis/wit/workItems/{workItemId}/comments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item to get comments for.</param>
		/// <param name="ids">Comma-separated list of comment ids to return.</param>
		/// <param name="includeDeleted">Specify if the deleted comments should be retrieved.</param>
		/// <param name="expand">Specifies the additional data retrieval options for work item comments.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CommentList Comments_Get_Comments_Batch(string organization, string project, int workItemId, string ids, bool includeDeleted, Comments_Get_Comments_BatchExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&includeDeleted="+includeDeleted+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a comment on a work item.
		/// Comments_Add {organization}/{project}/_apis/wit/workItems/{workItemId}/comments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Comment create request.</param>
		/// <returns>successful operation</returns>
		public async Task<Comment> Comments_AddAsync(string organization, string project, int workItemId, string api_version, CommentCreate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a comment on a work item.
		/// Comments_Add {organization}/{project}/_apis/wit/workItems/{workItemId}/comments
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Comment create request.</param>
		/// <returns>successful operation</returns>
		public Comment Comments_Add(string organization, string project, int workItemId, string api_version, CommentCreate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a work item comment.
		/// Comments_Get_Comment {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item to get the comment.</param>
		/// <param name="commentId">Id of the comment to return.</param>
		/// <param name="includeDeleted">Specify if the deleted comment should be retrieved.</param>
		/// <param name="expand">Specifies the additional data retrieval options for work item comments.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<Comment> Comments_Get_CommentAsync(string organization, string project, int workItemId, int commentId, bool includeDeleted, Comments_Get_Comments_BatchExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"&includeDeleted="+includeDeleted+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a work item comment.
		/// Comments_Get_Comment {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item to get the comment.</param>
		/// <param name="commentId">Id of the comment to return.</param>
		/// <param name="includeDeleted">Specify if the deleted comment should be retrieved.</param>
		/// <param name="expand">Specifies the additional data retrieval options for work item comments.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public Comment Comments_Get_Comment(string organization, string project, int workItemId, int commentId, bool includeDeleted, Comments_Get_Comments_BatchExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"&includeDeleted="+includeDeleted+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a comment on a work item.
		/// Comments_Delete {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Comments_DeleteAsync(string organization, string project, int workItemId, int commentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a comment on a work item.
		/// Comments_Delete {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Comments_Delete(string organization, string project, int workItemId, int commentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a comment on a work item.
		/// Comments_Update {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Comment update request.</param>
		/// <returns>successful operation</returns>
		public async Task<Comment> Comments_UpdateAsync(string organization, string project, int workItemId, int commentId, string api_version, CommentUpdate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a comment on a work item.
		/// Comments_Update {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">Id of a work item.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <param name="requestBody">Comment update request.</param>
		/// <returns>successful operation</returns>
		public Comment Comments_Update(string organization, string project, int workItemId, int commentId, string api_version, CommentUpdate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets reactions of a comment.
		/// Comments_Reactions_List {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID</param>
		/// <param name="commentId">Comment ID</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CommentReaction[]> Comments_Reactions_ListAsync(string organization, string project, int workItemId, int commentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReaction[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets reactions of a comment.
		/// Comments_Reactions_List {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID</param>
		/// <param name="commentId">Comment ID</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CommentReaction[] Comments_Reactions_List(string organization, string project, int workItemId, int commentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReaction[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a new reaction to a comment.
		/// Comments_Reactions_Create {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID</param>
		/// <param name="commentId">Comment ID</param>
		/// <param name="reactionType">Type of the reaction</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CommentReaction> Comments_Reactions_CreateAsync(string organization, string project, int workItemId, int commentId, CommentReactionType reactionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions/"+reactionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReaction>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a new reaction to a comment.
		/// Comments_Reactions_Create {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID</param>
		/// <param name="commentId">Comment ID</param>
		/// <param name="reactionType">Type of the reaction</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CommentReaction Comments_Reactions_Create(string organization, string project, int workItemId, int commentId, CommentReactionType reactionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions/"+reactionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReaction>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing reaction on a comment.
		/// Comments_Reactions_Delete {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID</param>
		/// <param name="commentId">Comment ID</param>
		/// <param name="reactionType">Type of the reaction</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CommentReaction> Comments_Reactions_DeleteAsync(string organization, string project, int workItemId, int commentId, CommentReactionType reactionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions/"+reactionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReaction>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing reaction on a comment.
		/// Comments_Reactions_Delete {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID</param>
		/// <param name="commentId">Comment ID</param>
		/// <param name="reactionType">Type of the reaction</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CommentReaction Comments_Reactions_Delete(string organization, string project, int workItemId, int commentId, CommentReactionType reactionType, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions/"+reactionType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReaction>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get users who reacted on the comment.
		/// Comment_Reactions_Engaged_Users_List {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}/users
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID.</param>
		/// <param name="commentId">Comment ID.</param>
		/// <param name="reactionType">Type of the reaction.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<IdentityRef[]> Comment_Reactions_Engaged_Users_ListAsync(string organization, string project, int workItemId, int commentId, CommentReactionType reactionType, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions/"+reactionType+"/users&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IdentityRef[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get users who reacted on the comment.
		/// Comment_Reactions_Engaged_Users_List {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}/users
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="workItemId">WorkItem ID.</param>
		/// <param name="commentId">Comment ID.</param>
		/// <param name="reactionType">Type of the reaction.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public IdentityRef[] Comment_Reactions_Engaged_Users_List(string organization, string project, int workItemId, int commentId, CommentReactionType reactionType, int top, int skip, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/reactions/"+reactionType+"/users&$top="+top+"&$skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IdentityRef[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Comments_Versions_List {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/versions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CommentVersion[]> Comments_Versions_ListAsync(string organization, string project, int workItemId, int commentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/versions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentVersion[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Comments_Versions_List {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/versions
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CommentVersion[] Comments_Versions_List(string organization, string project, int workItemId, int commentId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/versions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentVersion[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Comments_Versions_Get {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/versions/{version}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<CommentVersion> Comments_Versions_GetAsync(string organization, string project, int workItemId, int commentId, int version, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/versions/"+version+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentVersion>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Comments_Versions_Get {organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/versions/{version}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public CommentVersion Comments_Versions_Get(string organization, string project, int workItemId, int commentId, int version, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workItems/"+workItemId+"/comments/"+commentId+"/versions/"+version+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentVersion>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets work items for a list of work item ids (Maximum 200)
		/// Work_Items_Get_Work_Items_Batch {organization}/{project}/_apis/wit/workitemsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItem[]> Work_Items_Get_Work_Items_BatchAsync(string organization, string project, string api_version, WorkItemBatchGetRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemsbatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets work items for a list of work item ids (Maximum 200)
		/// Work_Items_Get_Work_Items_Batch {organization}/{project}/_apis/wit/workitemsbatch
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItem[] Work_Items_Get_Work_Items_Batch(string organization, string project, string api_version, WorkItemBatchGetRequest requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemsbatch&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItem[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all work item type categories.
		/// Work_Item_Type_Categories_List {organization}/{project}/_apis/wit/workitemtypecategories
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeCategory[]> Work_Item_Type_Categories_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypecategories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeCategory[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all work item type categories.
		/// Work_Item_Type_Categories_List {organization}/{project}/_apis/wit/workitemtypecategories
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeCategory[] Work_Item_Type_Categories_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypecategories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeCategory[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get specific work item type category by name.
		/// Work_Item_Type_Categories_Get {organization}/{project}/_apis/wit/workitemtypecategories/{category}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="category">The category name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeCategory> Work_Item_Type_Categories_GetAsync(string organization, string project, string category, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypecategories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeCategory>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get specific work item type category by name.
		/// Work_Item_Type_Categories_Get {organization}/{project}/_apis/wit/workitemtypecategories/{category}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="category">The category name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeCategory Work_Item_Type_Categories_Get(string organization, string project, string category, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypecategories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeCategory>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of work item types
		/// Work_Item_Types_List {organization}/{project}/_apis/wit/workitemtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemType[]> Work_Item_Types_ListAsync(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemType[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of work item types
		/// Work_Item_Types_List {organization}/{project}/_apis/wit/workitemtypes
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemType[] Work_Item_Types_List(string organization, string project, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemType[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a work item type definition.
		/// Work_Item_Types_Get {organization}/{project}/_apis/wit/workitemtypes/{type}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">Work item type name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemType> Work_Item_Types_GetAsync(string organization, string project, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemType>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a work item type definition.
		/// Work_Item_Types_Get {organization}/{project}/_apis/wit/workitemtypes/{type}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">Work item type name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemType Work_Item_Types_Get(string organization, string project, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemType>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of fields for a work item type with detailed references.
		/// Work_Item_Types_Field_List {organization}/{project}/_apis/wit/workitemtypes/{type}/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">Work item type.</param>
		/// <param name="expand">Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeFieldWithReferences[]> Work_Item_Types_Field_ListAsync(string organization, string project, string type, Work_Item_Types_Field_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/fields&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeFieldWithReferences[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of fields for a work item type with detailed references.
		/// Work_Item_Types_Field_List {organization}/{project}/_apis/wit/workitemtypes/{type}/fields
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">Work item type.</param>
		/// <param name="expand">Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeFieldWithReferences[] Work_Item_Types_Field_List(string organization, string project, string type, Work_Item_Types_Field_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/fields&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeFieldWithReferences[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a field for a work item type with detailed references.
		/// Work_Item_Types_Field_Get {organization}/{project}/_apis/wit/workitemtypes/{type}/fields/{field}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">Work item type.</param>
		/// <param name="expand">Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTypeFieldWithReferences> Work_Item_Types_Field_GetAsync(string organization, string project, string type, string field, Work_Item_Types_Field_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/fields/"+ (field==null? "" : System.Uri.EscapeDataString(field))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeFieldWithReferences>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a field for a work item type with detailed references.
		/// Work_Item_Types_Field_Get {organization}/{project}/_apis/wit/workitemtypes/{type}/fields/{field}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">Work item type.</param>
		/// <param name="expand">Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.3' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTypeFieldWithReferences Work_Item_Types_Field_Get(string organization, string project, string type, string field, Work_Item_Types_Field_ListExpand expand, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/fields/"+ (field==null? "" : System.Uri.EscapeDataString(field))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTypeFieldWithReferences>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the state names and colors for a work item type.
		/// Work_Item_Type_States_List {organization}/{project}/_apis/wit/workitemtypes/{type}/states
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">The state name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemStateColor[]> Work_Item_Type_States_ListAsync(string organization, string project, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/states&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemStateColor[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the state names and colors for a work item type.
		/// Work_Item_Type_States_List {organization}/{project}/_apis/wit/workitemtypes/{type}/states
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="type">The state name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemStateColor[] Work_Item_Type_States_List(string organization, string project, string type, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/_apis/wit/workitemtypes/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/states&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemStateColor[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets template
		/// Templates_List {organization}/{project}/{team}/_apis/wit/templates
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="workitemtypename">Optional, When specified returns templates for given Work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTemplateReference[]> Templates_ListAsync(string organization, string project, string team, string workitemtypename, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates&workitemtypename=" + (workitemtypename==null? "" : System.Uri.EscapeDataString(workitemtypename))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplateReference[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets template
		/// Templates_List {organization}/{project}/{team}/_apis/wit/templates
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="workitemtypename">Optional, When specified returns templates for given Work item type.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTemplateReference[] Templates_List(string organization, string project, string team, string workitemtypename, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates&workitemtypename=" + (workitemtypename==null? "" : System.Uri.EscapeDataString(workitemtypename))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplateReference[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a template
		/// Templates_Create {organization}/{project}/{team}/_apis/wit/templates
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Template contents</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTemplate> Templates_CreateAsync(string organization, string project, string team, string api_version, WorkItemTemplate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a template
		/// Templates_Create {organization}/{project}/{team}/_apis/wit/templates
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Template contents</param>
		/// <returns>successful operation</returns>
		public WorkItemTemplate Templates_Create(string organization, string project, string team, string api_version, WorkItemTemplate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the template with specified id
		/// Templates_Get {organization}/{project}/{team}/_apis/wit/templates/{templateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="templateId">Template Id</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTemplate> Templates_GetAsync(string organization, string project, string team, string templateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the template with specified id
		/// Templates_Get {organization}/{project}/{team}/_apis/wit/templates/{templateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="templateId">Template Id</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemTemplate Templates_Get(string organization, string project, string team, string templateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replace template contents
		/// Templates_Replace_Template {organization}/{project}/{team}/_apis/wit/templates/{templateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="templateId">Template id</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Template contents to replace with</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemTemplate> Templates_Replace_TemplateAsync(string organization, string project, string team, string templateId, string api_version, WorkItemTemplate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Replace template contents
		/// Templates_Replace_Template {organization}/{project}/{team}/_apis/wit/templates/{templateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="templateId">Template id</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <param name="requestBody">Template contents to replace with</param>
		/// <returns>successful operation</returns>
		public WorkItemTemplate Templates_Replace_Template(string organization, string project, string team, string templateId, string api_version, WorkItemTemplate requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemTemplate>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the template with given id
		/// Templates_Delete {organization}/{project}/{team}/_apis/wit/templates/{templateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="templateId">Template id</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task Templates_DeleteAsync(string organization, string project, string team, string templateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the template with given id
		/// Templates_Delete {organization}/{project}/{team}/_apis/wit/templates/{templateId}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="templateId">Template id</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.1' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public void Templates_Delete(string organization, string project, string team, string templateId, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the results of the query given its WIQL.
		/// Wiql_Query_By_Wiql {organization}/{project}/{team}/_apis/wit/wiql
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="timePrecision">Whether or not to use time precision.</param>
		/// <param name="top">The max number of results to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The query containing the WIQL.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemQueryResult> Wiql_Query_By_WiqlAsync(string organization, string project, string team, bool timePrecision, int top, string api_version, Wiql requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/wiql&timePrecision="+timePrecision+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemQueryResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the results of the query given its WIQL.
		/// Wiql_Query_By_Wiql {organization}/{project}/{team}/_apis/wit/wiql
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="timePrecision">Whether or not to use time precision.</param>
		/// <param name="top">The max number of results to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <param name="requestBody">The query containing the WIQL.</param>
		/// <returns>successful operation</returns>
		public WorkItemQueryResult Wiql_Query_By_Wiql(string organization, string project, string team, bool timePrecision, int top, string api_version, Wiql requestBody)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/wiql&timePrecision="+timePrecision+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemQueryResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the results of the query given the query ID.
		/// Wiql_Query_By_Id {organization}/{project}/{team}/_apis/wit/wiql/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The query ID.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="timePrecision">Whether or not to use time precision.</param>
		/// <param name="top">The max number of results to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public async Task<WorkItemQueryResult> Wiql_Query_By_IdAsync(string organization, string id, string project, string team, bool timePrecision, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/wiql/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&timePrecision="+timePrecision+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemQueryResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the results of the query given the query ID.
		/// Wiql_Query_By_Id {organization}/{project}/{team}/_apis/wit/wiql/{id}
		/// </summary>
		/// <param name="organization">The name of the Azure DevOps organization.</param>
		/// <param name="id">The query ID.</param>
		/// <param name="project">Project ID or project name</param>
		/// <param name="team">Team ID or team name</param>
		/// <param name="timePrecision">Whether or not to use time precision.</param>
		/// <param name="top">The max number of results to return.</param>
		/// <param name="api_version">Version of the API to use.  This should be set to '6.0-preview.2' to use this version of the api.</param>
		/// <returns>successful operation</returns>
		public WorkItemQueryResult Wiql_Query_By_Id(string organization, string id, string project, string team, bool timePrecision, int top, string api_version)
		{
			var requestUri = ""+ (organization==null? "" : System.Uri.EscapeDataString(organization))+"/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team))+"/_apis/wit/wiql/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&timePrecision="+timePrecision+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = httpClient.Send(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = responseMessage.Content.ReadAsStream();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkItemQueryResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Classification_Nodes_GetStructureGroup
	{
		
		areas = 0,
		
		iterations = 1,
	}
	
	public enum Fields_ListExpand
	{
		
		none = 0,
		
		extensionFields = 1,
		
		includeDeleted = 2,
	}
	
	public enum Reporting_Work_Item_Revisions_Read_Reporting_Revisions_GetExpand
	{
		
		none = 0,
		
		fields = 1,
	}
	
	public enum Comments_Get_Comments_BatchExpand
	{
		
		none = 0,
		
		reactions = 1,
		
		renderedText = 2,
		
		renderedTextOnly = 3,
		
		all = 4,
	}
	
	public enum Work_Item_Types_Field_ListExpand
	{
		
		none = 0,
		
		allowedValues = 1,
		
		dependentFields = 2,
		
		all = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
