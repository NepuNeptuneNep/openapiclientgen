//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Indicates whether the merchant sells adult content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultContent")]
		public System.Nullable<System.Boolean> AdultContent { get; set; }
		
		/// <summary>
		/// List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the AdWords interface or through the AdWords API. To delete an active link, or to cancel a link request, remove it from the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adwordsLinks")]
		public AccountAdwordsLink[] AdwordsLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessInformation")]
		public AccountBusinessInformation BusinessInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleMyBusinessLink")]
		public AccountGoogleMyBusinessLink GoogleMyBusinessLink { get; set; }
		
		/// <summary>
		/// Required for update. Merchant Center account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#account`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required. Display name for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// [DEPRECATED] This field is never returned and will be ignored if provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewsUrl")]
		public string ReviewsUrl { get; set; }
		
		/// <summary>
		/// Client-specific, locally-unique, internal ID for the child account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerId")]
		public string SellerId { get; set; }
		
		/// <summary>
		/// Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public AccountUser[] Users { get; set; }
		
		/// <summary>
		/// The merchant's website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
		
		/// <summary>
		/// List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeChannelLinks")]
		public AccountYouTubeChannelLink[] YoutubeChannelLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAdwordsLink
	{
		
		/// <summary>
		/// Customer ID of the AdWords account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adwordsId")]
		public string AdwordsId { get; set; }
		
		/// <summary>
		/// Status of the link between this Merchant Center account and the AdWords account. Upon retrieval, it represents the actual status of the link and can be either `active` if it was approved in Google AdWords or `pending` if it's pending approval. Upon insertion, it represents the *intended* status of the link. Re-uploading a link with status `active` when it's still pending or with status `pending` when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status `inactive` is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending. Acceptable values are: - "`active`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountBusinessInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerService")]
		public AccountCustomerService CustomerService { get; set; }
		
		/// <summary>
		/// The 10-digit [Korean business registration number](https://support.google.com/merchants/answer/9037766) separated with dashes in the format: XXX-XX-XXXXX. This field will only be updated if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="koreanBusinessRegistrationNumber")]
		public string KoreanBusinessRegistrationNumber { get; set; }
		
		/// <summary>
		/// The phone number of the business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAddress
	{
		
		/// <summary>
		/// CLDR country code (e.g. "US"). This value cannot be set for a sub-account of an MCA. All MCA sub-accounts inherit the country of their parent MCA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Postal code or ZIP (e.g. "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street-level part of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountCustomerService
	{
		
		/// <summary>
		/// Customer service email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Customer service phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Customer service URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountGoogleMyBusinessLink
	{
		
		/// <summary>
		/// The GMB email address of which a specific account within a GMB account. A sample account within a GMB account could be a business account with set of locations, managed under the GMB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbEmail")]
		public string GmbEmail { get; set; }
		
		/// <summary>
		/// Status of the link between this Merchant Center account and the GMB account. Acceptable values are: - "`active`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountUser
	{
		
		/// <summary>
		/// Whether user is an admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public System.Nullable<System.Boolean> Admin { get; set; }
		
		/// <summary>
		/// User's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Whether user is an order manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderManager")]
		public System.Nullable<System.Boolean> OrderManager { get; set; }
		
		/// <summary>
		/// Whether user can access payment statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsAnalyst")]
		public System.Nullable<System.Boolean> PaymentsAnalyst { get; set; }
		
		/// <summary>
		/// Whether user can manage payment settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsManager")]
		public System.Nullable<System.Boolean> PaymentsManager { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountYouTubeChannelLink
	{
		
		/// <summary>
		/// Channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Status of the link between this Merchant Center account and the YouTube channel. Upon retrieval, it represents the actual status of the link and can be either `active` if it was approved in YT Creator Studio or `pending` if it's pending approval. Upon insertion, it represents the *intended* status of the link. Re-uploading a link with status `active` when it's still pending or with status `pending` when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status `inactive` is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountIdentifier
	{
		
		/// <summary>
		/// The aggregator ID, set for aggregators and subaccounts (in that case, it represents the aggregator of the subaccount).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregatorId")]
		public string AggregatorId { get; set; }
		
		/// <summary>
		/// The merchant account ID, set for individual accounts and subaccounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
	}
	
	/// <summary>
	/// The status of an account, i.e., information about its products, which is computed offline and not returned immediately at insertion time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatus
	{
		
		/// <summary>
		/// The ID of the account for which the status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of account level issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLevelIssues")]
		public AccountStatusAccountLevelIssue[] AccountLevelIssues { get; set; }
		
		/// <summary>
		/// DEPRECATED - never populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataQualityIssues")]
		public AccountStatusDataQualityIssue[] DataQualityIssues { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountStatus`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public AccountStatusProducts[] Products { get; set; }
		
		/// <summary>
		/// Whether the account's website is claimed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteClaimed")]
		public System.Nullable<System.Boolean> WebsiteClaimed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusAccountLevelIssue
	{
		
		/// <summary>
		/// Country for which this issue is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The destination the issue applies to. If this field is empty then the issue applies to all available destinations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Additional details about the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Issue identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Severity of the issue. Acceptable values are: - "`critical`" - "`error`" - "`suggestion`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// Short description of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusDataQualityIssue
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayedValue")]
		public string DisplayedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exampleItems")]
		public AccountStatusExampleItem[] ExampleItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChecked")]
		public string LastChecked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numItems")]
		public System.Nullable<System.UInt32> NumItems { get; set; }
		
		/// <summary>
		///  Acceptable values are: - "`critical`" - "`error`" - "`suggestion`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submittedValue")]
		public string SubmittedValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusExampleItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submittedValue")]
		public string SubmittedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueOnLandingPage")]
		public string ValueOnLandingPage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusProducts
	{
		
		/// <summary>
		/// The channel the data applies to. Acceptable values are: - "`local`" - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// The country the data applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The destination the data applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// List of item-level issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemLevelIssues")]
		public AccountStatusItemLevelIssue[] ItemLevelIssues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public AccountStatusStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusItemLevelIssue
	{
		
		/// <summary>
		/// The attribute's name, if the issue is caused by a single attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The error code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A short issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A detailed issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help with resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Number of items with this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numItems")]
		public string NumItems { get; set; }
		
		/// <summary>
		/// Whether the issue can be resolved by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// How this issue affects serving of the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servability")]
		public string Servability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusStatistics
	{
		
		/// <summary>
		/// Number of active offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public string Active { get; set; }
		
		/// <summary>
		/// Number of disapproved offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapproved")]
		public string Disapproved { get; set; }
		
		/// <summary>
		/// Number of expiring offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiring")]
		public string Expiring { get; set; }
		
		/// <summary>
		/// Number of pending offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public string Pending { get; set; }
	}
	
	/// <summary>
	/// The tax settings of a merchant account. All methods require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountTax
	{
		
		/// <summary>
		/// Required. The ID of the account to which these account tax settings belong.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountTax".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Tax rules. Updating the tax rules will enable US taxes (not reversible). Defining no rules is equivalent to not charging tax at all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public AccountTaxTaxRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Tax calculation rule to apply in a state or province (USA only).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountTaxTaxRule
	{
		
		/// <summary>
		/// Country code in which tax is applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratePercent")]
		public string RatePercent { get; set; }
		
		/// <summary>
		/// If true, shipping charges are also taxed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingTaxed")]
		public System.Nullable<System.Boolean> ShippingTaxed { get; set; }
		
		/// <summary>
		/// Whether the tax rate is taken from a global tax table or specified explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useGlobalRate")]
		public System.Nullable<System.Boolean> UseGlobalRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsAuthInfoResponse
	{
		
		/// <summary>
		/// The account identifiers corresponding to the authenticated user. - For an individual account: only the merchant ID is defined - For an aggregator: only the aggregator ID is defined - For a subaccount of an MCA: both the merchant ID and the aggregator ID are defined. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIdentifiers")]
		public AccountIdentifier[] AccountIdentifiers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountsAuthInfoResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsClaimWebsiteResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountsClaimWebsiteResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounts request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// The ID of the targeted account. Only defined if the method is not `insert`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Whether the account should be deleted if the account has offers. Only applicable if the method is `delete`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// Label IDs for the 'updatelabels' request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkRequest")]
		public AccountsCustomBatchRequestEntryLinkRequest LinkRequest { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`claimWebsite`" - "`delete`" - "`get`" - "`insert`" - "`link`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Only applicable if the method is `claimwebsite`. Indicates whether or not to take the claim from another account in case there is a conflict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overwrite")]
		public System.Nullable<System.Boolean> Overwrite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchRequestEntryLinkRequest
	{
		
		/// <summary>
		/// Action to perform for this link. The `"request"` action is only available to select merchants. Acceptable values are: - "`approve`" - "`remove`" - "`request`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Type of the link between the two accounts. Acceptable values are: - "`channelPartner`" - "`eCommercePlatform`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		/// <summary>
		/// The ID of the linked account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAccountId")]
		public string LinkedAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountsCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounts response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Deprecated. This field is never set. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkStatus")]
		public string LinkStatus { get; set; }
	}
	
	/// <summary>
	/// A list of errors returned by a failed batch entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Errors
	{
		
		/// <summary>
		/// The HTTP status of the first error in `errors`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.UInt32> Code { get; set; }
		
		/// <summary>
		/// A list of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors1 { get; set; }
		
		/// <summary>
		/// The message of the first error in `errors`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An error returned by the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The domain of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// A description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsLinkRequest
	{
		
		/// <summary>
		/// Action to perform for this link. The `"request"` action is only available to select merchants. Acceptable values are: - "`approve`" - "`remove`" - "`request`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Type of the link between the two accounts. Acceptable values are: - "`channelPartner`" - "`eCommercePlatform`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		/// <summary>
		/// The ID of the linked account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAccountId")]
		public string LinkedAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsLinkResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountsLinkResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Account[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountstatusesCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accountstatuses request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the (sub-)account whose status to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountstatusesCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountstatusesCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accountstatuses response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The status of an account, i.e., information about its products, which is computed offline and not returned immediately at insertion time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountStatus")]
		public AccountStatus AccountStatus { get; set; }
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accountstatusesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of account statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AccountStatus[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccounttaxCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounttax request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the account for which to get/update account tax settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The tax settings of a merchant account. All methods require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountTax")]
		public AccountTax AccountTax { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccounttaxCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accounttaxCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounttax response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The tax settings of a merchant account. All methods require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountTax")]
		public AccountTax AccountTax { get; set; }
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accounttaxCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#accounttaxListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of account tax settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AccountTax[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// Required. Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Required. City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Required. [CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)(e.g. "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Required. Postal code or ZIP (e.g. "94043"). Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Street-level part of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Amount
	{
		
		[System.Runtime.Serialization.DataMember(Name="pretax")]
		public Price Pretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public Price Tax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// The currency of the price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The price represented as a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessDayConfig
	{
		
		/// <summary>
		/// Regular business days, such as '"monday"'. May not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessDays")]
		public string[] BusinessDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CarrierRate
	{
		
		/// <summary>
		/// Carrier service, such as `"UPS"` or `"Fedex"`. The list of supported carriers can be retrieved via the `getSupportedCarriers` method. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// Carrier service, such as `"ground"` or `"2 days"`. The list of supported services for a carrier can be retrieved via the `getSupportedCarriers` method. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierService")]
		public string CarrierService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flatAdjustment")]
		public Price FlatAdjustment { get; set; }
		
		/// <summary>
		/// Name of the carrier rate. Must be unique per rate group. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Shipping origin for this carrier rate. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originPostalCode")]
		public string OriginPostalCode { get; set; }
		
		/// <summary>
		/// Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example `"5.4"` increases the rate by 5.4%, `"-3"` decreases the rate by 3%. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentageAdjustment")]
		public string PercentageAdjustment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CarriersCarrier
	{
		
		/// <summary>
		/// The CLDR country code of the carrier (e.g., "US"). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A list of services supported for EDD (Estimated Delivery Date) calculation. This is the list of valid values for WarehouseBasedDeliveryTime.carrierService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eddServices")]
		public string[] EddServices { get; set; }
		
		/// <summary>
		/// The name of the carrier (e.g., `"UPS"`). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of supported services (e.g., `"ground"`) for that carrier. Contains at least one service. This is the list of valid values for CarrierRate.carrierService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomAttribute
	{
		
		/// <summary>
		/// The name of the attribute. Underscores will be replaced by spaces upon insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the attribute. Acceptable values are: - "`boolean`" - "`datetimerange`" - "`float`" - "`group`" - "`int`" - "`price`" - "`text`" - "`time`" - "`url`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Free-form unit of the attribute. Unit can only be used for values of type int, float, or price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The value of the attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomGroup
	{
		
		/// <summary>
		/// The sub-attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CustomAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// The name of the group. Underscores will be replaced by spaces upon insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerReturnReason
	{
		
		/// <summary>
		/// Description of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Code of the return reason. Acceptable values are: - "`betterPriceFound`" - "`changedMind`" - "`damagedOrDefectiveItem`" - "`didNotMatchDescription`" - "`doesNotFit`" - "`expiredItem`" - "`incorrectItemReceived`" - "`noLongerNeeded`" - "`notSpecified`" - "`orderedWrongItem`" - "`other`" - "`qualityNotExpected`" - "`receivedTooLate`" - "`undeliverable`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CutoffTime
	{
		
		/// <summary>
		/// Hour of the cutoff time until which an order has to be placed to be processed in the same day. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.UInt32> Hour { get; set; }
		
		/// <summary>
		/// Minute of the cutoff time until which an order has to be placed to be processed in the same day. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.UInt32> Minute { get; set; }
		
		/// <summary>
		/// Timezone identifier for the cutoff time. A list of identifiers can be found in the AdWords API documentation. E.g. "Europe/Zurich". Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// Datafeed configuration data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Datafeed
	{
		
		/// <summary>
		/// The two-letter ISO 639-1 language in which the attributes are defined in the data feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeLanguage")]
		public string AttributeLanguage { get; set; }
		
		/// <summary>
		/// [DEPRECATED] Please use targets[].language instead. The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targetCountry`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - "`local products`" - "`product inventory`" - "`products`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchSchedule")]
		public DatafeedFetchSchedule FetchSchedule { get; set; }
		
		/// <summary>
		/// Required. The filename of the feed. All feeds must have a unique file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public DatafeedFormat Format { get; set; }
		
		/// <summary>
		/// Required for update. The ID of the data feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// [DEPRECATED] Please use targets[].includedDestinations instead. The list of intended destinations (corresponds to checked check boxes in Merchant Center).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intendedDestinations")]
		public string[] IntendedDestinations { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeed`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required for insert. A descriptive name of the data feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// [DEPRECATED] Please use targets[].country instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// The targets this feed should apply to (country, language, destinations).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public DatafeedTarget[] Targets { get; set; }
	}
	
	/// <summary>
	/// The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedFetchSchedule
	{
		
		/// <summary>
		/// The day of the month the feed file should be fetched (1-31).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public System.Nullable<System.UInt32> DayOfMonth { get; set; }
		
		/// <summary>
		/// The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchUrl")]
		public string FetchUrl { get; set; }
		
		/// <summary>
		/// The hour of the day the feed file should be fetched (0-23).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.UInt32> Hour { get; set; }
		
		/// <summary>
		/// The minute of the hour the feed file should be fetched (0-59). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minuteOfHour")]
		public System.Nullable<System.UInt32> MinuteOfHour { get; set; }
		
		/// <summary>
		/// An optional password for fetch_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Whether the scheduled fetch is paused or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paused")]
		public System.Nullable<System.Boolean> Paused { get; set; }
		
		/// <summary>
		/// Time zone used for schedule. UTC by default. E.g., "America/Los_Angeles".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// An optional user name for fetch_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// The day of the week the feed file should be fetched. Acceptable values are: - "`monday`" - "`tuesday`" - "`wednesday`" - "`thursday`" - "`friday`" - "`saturday`" - "`sunday`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekday")]
		public string Weekday { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedFormat
	{
		
		/// <summary>
		/// Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - "`pipe`" - "`tab`" - "`tilde`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnDelimiter")]
		public string ColumnDelimiter { get; set; }
		
		/// <summary>
		/// Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected. Acceptable values are: - "`latin-1`" - "`utf-16be`" - "`utf-16le`" - "`utf-8`" - "`windows-1252`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileEncoding")]
		public string FileEncoding { get; set; }
		
		/// <summary>
		/// Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - "`normal character`" - "`value quoting`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotingMode")]
		public string QuotingMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedTarget
	{
		
		/// <summary>
		/// The country where the items in the feed will be included in the search index, represented as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The list of destinations to exclude for this target (corresponds to unchecked check boxes in Merchant Center).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedDestinations")]
		public string[] ExcludedDestinations { get; set; }
		
		/// <summary>
		/// The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`. List of supported destinations (if available to the account): - DisplayAds - Shopping - ShoppingActions - SurfacesAcrossGoogle 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedDestinations")]
		public string[] IncludedDestinations { get; set; }
		
		/// <summary>
		/// The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targets[].country`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
	}
	
	/// <summary>
	/// The status of a datafeed, i.e., the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedStatus
	{
		
		/// <summary>
		/// The country for which the status is reported, represented as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ID of the feed for which the status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedId")]
		public string DatafeedId { get; set; }
		
		/// <summary>
		/// The list of errors occurring in the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DatafeedStatusError[] Errors { get; set; }
		
		/// <summary>
		/// The number of items in the feed that were processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsTotal")]
		public string ItemsTotal { get; set; }
		
		/// <summary>
		/// The number of items in the feed that were valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsValid")]
		public string ItemsValid { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedStatus`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The two-letter ISO 639-1 language for which the status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The last date at which the feed was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUploadDate")]
		public string LastUploadDate { get; set; }
		
		/// <summary>
		/// The processing status of the feed. Acceptable values are: - "`"`failure`": The feed could not be processed or all items had errors.`" - "`in progress`": The feed is being processed. - "`none`": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - "`success`": The feed was processed successfully, though some items might have had errors. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public string ProcessingStatus { get; set; }
		
		/// <summary>
		/// The list of errors occurring in the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public DatafeedStatusError[] Warnings { get; set; }
	}
	
	/// <summary>
	/// An error occurring in the feed, like "invalid price".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedStatusError
	{
		
		/// <summary>
		/// The code of the error, e.g., "validation/invalid_value".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The number of occurrences of the error in the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// A list of example occurrences of the error, grouped by product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public DatafeedStatusExample[] Examples { get; set; }
		
		/// <summary>
		/// The error message, e.g., "Invalid price".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An example occurrence for a particular error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedStatusExample
	{
		
		/// <summary>
		/// The ID of the example item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Line number in the data feed where the example is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public string LineNumber { get; set; }
		
		/// <summary>
		/// The problematic value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeeds request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Datafeed configuration data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeed")]
		public Datafeed Datafeed { get; set; }
		
		/// <summary>
		/// The ID of the data feed to get, delete or fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedId")]
		public string DatafeedId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`delete`" - "`fetchNow`" - "`get`" - "`insert`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#datafeedsCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeeds response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Datafeed configuration data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeed")]
		public Datafeed Datafeed { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsFetchNowResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#datafeedsFetchNowResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#datafeedsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of datafeeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Datafeed[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedstatusesCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeedstatuses request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The country for which to get the datafeed status. If this parameter is provided then language must also be provided. Note that for multi-target datafeeds this parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ID of the data feed to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedId")]
		public string DatafeedId { get; set; }
		
		/// <summary>
		/// The language for which to get the datafeed status. If this parameter is provided then country must also be provided. Note that for multi-target datafeeds this parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedstatusesCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#datafeedstatusesCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeedstatuses response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The status of a datafeed, i.e., the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedStatus")]
		public DatafeedStatus DatafeedStatus { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#datafeedstatusesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of datafeed statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public DatafeedStatus[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="cutoffTime")]
		public CutoffTime CutoffTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="handlingBusinessDayConfig")]
		public BusinessDayConfig HandlingBusinessDayConfig { get; set; }
		
		/// <summary>
		/// Holiday cutoff definitions. If configured, they specify order cutoff times for holiday-specific shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidayCutoffs")]
		public HolidayCutoff[] HolidayCutoffs { get; set; }
		
		/// <summary>
		/// Maximum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped. Must be greater than or equal to `minHandlingTimeInDays`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxHandlingTimeInDays")]
		public System.Nullable<System.UInt32> MaxHandlingTimeInDays { get; set; }
		
		/// <summary>
		/// Maximum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Must be greater than or equal to `minTransitTimeInDays`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTransitTimeInDays")]
		public System.Nullable<System.UInt32> MaxTransitTimeInDays { get; set; }
		
		/// <summary>
		/// Minimum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHandlingTimeInDays")]
		public System.Nullable<System.UInt32> MinHandlingTimeInDays { get; set; }
		
		/// <summary>
		/// Minimum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Either `{min,max}TransitTimeInDays` or `transitTimeTable` must be set, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTransitTimeInDays")]
		public System.Nullable<System.UInt32> MinTransitTimeInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitBusinessDayConfig")]
		public BusinessDayConfig TransitBusinessDayConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitTimeTable")]
		public TransitTable TransitTimeTable { get; set; }
		
		/// <summary>
		/// Indicates that the delivery time should be calculated per warehouse (shipping origin location) based on the settings of the selected carrier. When set, no other transit time related field in DeliveryTime should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseBasedDeliveryTimes")]
		public WarehouseBasedDeliveryTime[] WarehouseBasedDeliveryTimes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HolidayCutoff
	{
		
		/// <summary>
		/// Date of the order deadline, in ISO 8601 format. E.g. "2016-11-29" for 29th November 2016. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineDate")]
		public string DeadlineDate { get; set; }
		
		/// <summary>
		/// Hour of the day on the deadline date until which the order has to be placed to qualify for the delivery guarantee. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineHour")]
		public System.Nullable<System.UInt32> DeadlineHour { get; set; }
		
		/// <summary>
		/// Timezone identifier for the deadline hour. A list of identifiers can be found in the AdWords API documentation. E.g. "Europe/Zurich". Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineTimezone")]
		public string DeadlineTimezone { get; set; }
		
		/// <summary>
		/// Unique identifier for the holiday. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidayId")]
		public string HolidayId { get; set; }
		
		/// <summary>
		/// Date on which the deadline will become visible to consumers in ISO 8601 format. E.g. "2016-10-31" for 31st October 2016. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleFromDate")]
		public string VisibleFromDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransitTable
	{
		
		/// <summary>
		/// A list of postal group names. The last value can be `"all other locations"`. Example: `["zone 1", "zone 2", "all other locations"]`. The referred postal code groups must match the delivery country of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeGroupNames")]
		public string[] PostalCodeGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TransitTableTransitTimeRow[] Rows { get; set; }
		
		/// <summary>
		/// A list of transit time labels. The last value can be `"all other labels"`. Example: `["food", "electronics", "all other labels"]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTimeLabels")]
		public string[] TransitTimeLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransitTableTransitTimeRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public TransitTableTransitTimeRowTransitTimeValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransitTableTransitTimeRowTransitTimeValue
	{
		
		/// <summary>
		/// Must be greater than or equal to `minTransitTimeInDays`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTransitTimeInDays")]
		public System.Nullable<System.UInt32> MaxTransitTimeInDays { get; set; }
		
		/// <summary>
		/// Transit time range (min-max) in business days. 0 means same day delivery, 1 means next day delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTransitTimeInDays")]
		public System.Nullable<System.UInt32> MinTransitTimeInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WarehouseBasedDeliveryTime
	{
		
		/// <summary>
		/// Required. Carrier, such as `"UPS"` or `"Fedex"`. The list of supported carriers can be retrieved via the `listSupportedCarriers` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Required. Carrier service, such as `"ground"` or `"2 days"`. The list of supported services for a carrier can be retrieved via the `listSupportedCarriers` method. The name of the service must be in the eddSupportedServices list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierService")]
		public string CarrierService { get; set; }
		
		/// <summary>
		/// Shipping origin's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originAdministrativeArea")]
		public string OriginAdministrativeArea { get; set; }
		
		/// <summary>
		/// Shipping origin's city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originCity")]
		public string OriginCity { get; set; }
		
		/// <summary>
		/// Shipping origin's country represented as a [CLDR territory code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originCountry")]
		public string OriginCountry { get; set; }
		
		/// <summary>
		/// Shipping origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originPostalCode")]
		public string OriginPostalCode { get; set; }
		
		/// <summary>
		/// Shipping origin's street address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originStreetAddress")]
		public string OriginStreetAddress { get; set; }
		
		/// <summary>
		/// The name of the warehouse. Warehouse name need to be matched with name. If warehouseName is set, the below fields will be ignored. The warehouse info will be read from warehouse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseName")]
		public string WarehouseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GmbAccounts
	{
		
		/// <summary>
		/// The ID of the Merchant Center account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of GMB accounts which are available to the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbAccounts")]
		public GmbAccountsGmbAccount[] GmbAccounts1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GmbAccountsGmbAccount
	{
		
		/// <summary>
		/// The email which identifies the GMB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Number of listings under this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listingCount")]
		public string ListingCount { get; set; }
		
		/// <summary>
		/// The name of the GMB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the GMB account (User or Business).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A non-empty list of row or column headers for a table. Exactly one of `prices`, `weights`, `numItems`, `postalCodeGroupNames`, or `location` must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Headers
	{
		
		/// <summary>
		/// A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LocationIdSet[] Locations { get; set; }
		
		/// <summary>
		/// A list of inclusive number of items upper bounds. The last value can be `"infinity"`. For example `["10", "50", "infinity"]` represents the headers "<= 10 items", "<= 50 items", and "> 50 items". Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfItems")]
		public string[] NumberOfItems { get; set; }
		
		/// <summary>
		/// A list of postal group names. The last value can be `"all other locations"`. Example: `["zone 1", "zone 2", "all other locations"]`. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeGroupNames")]
		public string[] PostalCodeGroupNames { get; set; }
		
		/// <summary>
		/// A list of inclusive order price upper bounds. The last price's value can be `"infinity"`. For example `[{"value": "10", "currency": "USD"}, {"value": "500", "currency": "USD"}, {"value": "infinity", "currency": "USD"}]` represents the headers "<= $10", "<= $500", and "> $500". All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prices")]
		public Price[] Prices { get; set; }
		
		/// <summary>
		/// A list of inclusive order weight upper bounds. The last weight's value can be `"infinity"`. For example `[{"value": "10", "unit": "kg"}, {"value": "50", "unit": "kg"}, {"value": "infinity", "unit": "kg"}]` represents the headers "<= 10kg", "<= 50kg", and "> 50kg". All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weights")]
		public Weight[] Weights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationIdSet
	{
		
		/// <summary>
		/// A non-empty list of location IDs. They must all be of the same location type (e.g., state).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationIds")]
		public string[] LocationIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Weight
	{
		
		/// <summary>
		/// Required. The weight unit. Acceptable values are: - "`kg`" - "`lb`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Required. The weight represented as a number. The weight can have a maximum precision of four decimal places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HolidaysHoliday
	{
		
		/// <summary>
		/// The CLDR territory code of the country in which the holiday is available. E.g. "US", "DE", "GB". A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Date of the holiday, in ISO 8601 format. E.g. "2016-12-25" for Christmas 2016. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Date on which the order has to arrive at the customer's, in ISO 8601 format. E.g. "2016-12-24" for 24th December 2016. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryGuaranteeDate")]
		public string DeliveryGuaranteeDate { get; set; }
		
		/// <summary>
		/// Hour of the day in the delivery location's timezone on the guaranteed delivery date by which the order has to arrive at the customer's. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryGuaranteeHour")]
		public string DeliveryGuaranteeHour { get; set; }
		
		/// <summary>
		/// Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The holiday type. Always present. Acceptable values are: - "`Christmas`" - "`Easter`" - "`Father's Day`" - "`Halloween`" - "`Independence Day (USA)`" - "`Mother's Day`" - "`Thanksgiving`" - "`Valentine's Day`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Installment
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// The number of installments the buyer has to pay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvoiceSummary
	{
		
		/// <summary>
		/// Summary of the total amounts of the additional charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalChargeSummaries")]
		public InvoiceSummaryAdditionalChargeSummary[] AdditionalChargeSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBalance")]
		public Amount CustomerBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleBalance")]
		public Amount GoogleBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchantBalance")]
		public Amount MerchantBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTotal")]
		public Amount ProductTotal { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionSummaries")]
		public Promotion[] PromotionSummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvoiceSummaryAdditionalChargeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalAmount")]
		public Amount TotalAmount { get; set; }
		
		/// <summary>
		/// [required] Type of the additional charge. Acceptable values are: - "`shipping`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Promotion
	{
		
		[System.Runtime.Serialization.DataMember(Name="promotionAmount")]
		public Amount PromotionAmount { get; set; }
		
		/// <summary>
		/// [required] ID of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionId")]
		public string PromotionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaAboutPageSettings
	{
		
		/// <summary>
		/// The status of the verification process for the About page. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The URL for the About page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaCountrySettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public LiaAboutPageSettings About { get; set; }
		
		/// <summary>
		/// Required. CLDR country code (e.g. "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The status of the "Merchant hosted local storefront" feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostedLocalStorefrontActive")]
		public System.Nullable<System.Boolean> HostedLocalStorefrontActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public LiaInventorySettings Inventory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onDisplayToOrder")]
		public LiaOnDisplayToOrderSettings OnDisplayToOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posDataProvider")]
		public LiaPosDataProvider PosDataProvider { get; set; }
		
		/// <summary>
		/// The status of the "Store pickup" feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storePickupActive")]
		public System.Nullable<System.Boolean> StorePickupActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaInventorySettings
	{
		
		/// <summary>
		/// The email of the contact for the inventory verification process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryVerificationContactEmail")]
		public string InventoryVerificationContactEmail { get; set; }
		
		/// <summary>
		/// The name of the contact for the inventory verification process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryVerificationContactName")]
		public string InventoryVerificationContactName { get; set; }
		
		/// <summary>
		/// The status of the verification contact. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryVerificationContactStatus")]
		public string InventoryVerificationContactStatus { get; set; }
		
		/// <summary>
		/// The status of the inventory verification process. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaOnDisplayToOrderSettings
	{
		
		/// <summary>
		/// Shipping cost and policy URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingCostPolicyUrl")]
		public string ShippingCostPolicyUrl { get; set; }
		
		/// <summary>
		/// The status of the ?On display to order? feature. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaPosDataProvider
	{
		
		/// <summary>
		/// The ID of the POS data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviderId")]
		public string PosDataProviderId { get; set; }
		
		/// <summary>
		/// The account ID by which this merchant is known to the POS data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posExternalAccountId")]
		public string PosExternalAccountId { get; set; }
	}
	
	/// <summary>
	/// Local Inventory ads (LIA) settings. All methods except listposdataproviders require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaSettings
	{
		
		/// <summary>
		/// The ID of the account to which these LIA settings belong. Ignored upon update, always present in get request responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The LIA settings for each country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countrySettings")]
		public LiaCountrySettings[] CountrySettings { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liaSettings`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public LiasettingsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the account for which to get/update account LIA settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Inventory validation contact email. Required only for SetInventoryValidationContact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// Inventory validation contact name. Required only for SetInventoryValidationContact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactName")]
		public string ContactName { get; set; }
		
		/// <summary>
		/// The country code. Required only for RequestInventoryVerification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The GMB account. Required only for RequestGmbAccess.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbEmail")]
		public string GmbEmail { get; set; }
		
		/// <summary>
		/// Local Inventory ads (LIA) settings. All methods except listposdataproviders require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liaSettings")]
		public LiaSettings LiaSettings { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" - "`getAccessibleGmbAccounts`" - "`requestGmbAccess`" - "`requestInventoryVerification`" - "`setInventoryVerificationContact`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The ID of POS data provider. Required only for SetPosProvider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviderId")]
		public string PosDataProviderId { get; set; }
		
		/// <summary>
		/// The account ID by which this merchant is known to the POS provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posExternalAccountId")]
		public string PosExternalAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public LiasettingsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gmbAccounts")]
		public GmbAccounts GmbAccounts { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Local Inventory ads (LIA) settings. All methods except listposdataproviders require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liaSettings")]
		public LiaSettings LiaSettings { get; set; }
		
		/// <summary>
		/// The list of POS data providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviders")]
		public PosDataProviders[] PosDataProviders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosDataProviders
	{
		
		/// <summary>
		/// Country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A list of POS data providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviders")]
		public PosDataProvidersPosDataProvider[] PosDataProviders1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosDataProvidersPosDataProvider
	{
		
		/// <summary>
		/// The display name of Pos data Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The full name of this POS data Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// The ID of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsGetAccessibleGmbAccountsResponse
	{
		
		/// <summary>
		/// The ID of the Merchant Center account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of GMB accounts which are available to the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbAccounts")]
		public GmbAccountsGmbAccount[] GmbAccounts { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsGetAccessibleGmbAccountsResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsListPosDataProvidersResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsListPosDataProvidersResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of POS data providers for each eligible country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviders")]
		public PosDataProviders[] PosDataProviders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of LIA settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public LiaSettings[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsRequestGmbAccessResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsRequestGmbAccessResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsRequestInventoryVerificationResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsRequestInventoryVerificationResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsSetInventoryVerificationContactResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsSetInventoryVerificationContactResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsSetPosDataProviderResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#liasettingsSetPosDataProviderResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoyaltyPoints
	{
		
		/// <summary>
		/// Name of loyalty points program. It is recommended to limit the name to 12 full-width characters or 24 Roman characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The retailer's loyalty points in absolute value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointsValue")]
		public string PointsValue { get; set; }
		
		/// <summary>
		/// The ratio of a point when converted to currency. Google assumes currency based on Merchant Center settings. If ratio is left out, it defaults to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratio")]
		public System.Nullable<System.Double> Ratio { get; set; }
	}
	
	/// <summary>
	/// Order return. Production access (all methods) requires the order manager role. Sandbox access does not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MerchantOrderReturn
	{
		
		/// <summary>
		/// The date of creation of the return, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Merchant defined order ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// Google order ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Order return ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderReturnId")]
		public string OrderReturnId { get; set; }
		
		/// <summary>
		/// Items of the return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnItems")]
		public MerchantOrderReturnItem[] ReturnItems { get; set; }
		
		/// <summary>
		/// Shipments of the return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnShipments")]
		public ReturnShipment[] ReturnShipments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MerchantOrderReturnItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="customerReturnReason")]
		public CustomerReturnReason CustomerReturnReason { get; set; }
		
		/// <summary>
		/// Product level item ID. If the returned items are of the same product, they will have the same ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchantReturnReason")]
		public RefundReason MerchantReturnReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public OrderLineItemProduct Product { get; set; }
		
		/// <summary>
		/// IDs of the return shipments that this return item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnShipmentIds")]
		public string[] ReturnShipmentIds { get; set; }
		
		/// <summary>
		/// State of the item. Acceptable values are: - "`canceled`" - "`new`" - "`received`" - "`refunded`" - "`rejected`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefundReason
	{
		
		/// <summary>
		/// Description of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Code of the refund reason. Acceptable values are: - "`adjustment`" - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`customerSupportRequested`" - "`deliveredLateByCarrier`" - "`deliveredTooLate`" - "`expiredItem`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`feeAdjustment`" - "`invalidCoupon`" - "`lateShipmentCredit`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceAdjustment`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`promoReallocation`" - "`qualityNotAsExpected`" - "`returnRefundAbuse`" - "`shippingCostAdjustment`" - "`shippingPriceError`" - "`taxAdjustment`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemProduct
	{
		
		/// <summary>
		/// Brand of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The item's channel (online or local). Acceptable values are: - "`local`" - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// Condition or state of the item. Acceptable values are: - "`new`" - "`refurbished`" - "`used`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Associated fees at order creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public OrderLineItemProductFee[] Fees { get; set; }
		
		/// <summary>
		/// Global Trade Item Number (GTIN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// The REST ID of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// URL of an image of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string ImageLink { get; set; }
		
		/// <summary>
		/// Shared identifier for all variants of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// Manufacturer Part Number (MPN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// An identifier of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// URL to the cached image shown to the user when order was placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shownImage")]
		public string ShownImage { get; set; }
		
		/// <summary>
		/// The CLDR territory // code of the target country of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// The title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantAttributes")]
		public OrderLineItemProductVariantAttribute[] VariantAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemProductFee
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// Name of the fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemProductVariantAttribute
	{
		
		/// <summary>
		/// The dimension of the variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// The value for the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnShipment
	{
		
		/// <summary>
		/// The date of creation of the shipment, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The date of delivery of the shipment, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// Type of the return method. Acceptable values are: - "`byMail`" - "`contactCustomerSupport`" - "`returnless`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnMethodType")]
		public string ReturnMethodType { get; set; }
		
		/// <summary>
		/// Shipment ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// Tracking information of the shipment. One return shipment might be handled by several shipping carriers sequentially.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentTrackingInfos")]
		public ShipmentTrackingInfo[] ShipmentTrackingInfos { get; set; }
		
		/// <summary>
		/// The date of shipping of the shipment, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingDate")]
		public string ShippingDate { get; set; }
		
		/// <summary>
		/// State of the shipment. Acceptable values are: - "`completed`" - "`new`" - "`shipped`" - "`undeliverable`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipmentTrackingInfo
	{
		
		/// <summary>
		/// The shipping carrier that handles the package. Acceptable values are: - "`boxtal`" - "`bpost`" - "`chronopost`" - "`colisPrive`" - "`colissimo`" - "`cxt`" - "`deliv`" - "`dhl`" - "`dpd`" - "`dynamex`" - "`eCourier`" - "`easypost`" - "`efw`" - "`fedex`" - "`fedexSmartpost`" - "`geodis`" - "`gls`" - "`googleCourier`" - "`gsx`" - "`jdLogistics`" - "`laPoste`" - "`lasership`" - "`manual`" - "`mpx`" - "`onTrac`" - "`other`" - "`tnt`" - "`uds`" - "`ups`" - "`usps`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// The tracking number for the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MinimumOrderValueTable
	{
		
		[System.Runtime.Serialization.DataMember(Name="storeCodeSetWithMovs")]
		public MinimumOrderValueTableStoreCodeSetWithMov[] StoreCodeSetWithMovs { get; set; }
	}
	
	/// <summary>
	/// A list of store code sets sharing the same minimum order value. At least two sets are required and the last one must be empty, which signifies 'MOV for all other stores'. Each store code can only appear once across all the sets. All prices within a service must have the same currency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MinimumOrderValueTableStoreCodeSetWithMov
	{
		
		/// <summary>
		/// A list of unique store codes or empty for the catch all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCodes")]
		public string[] StoreCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Price Value { get; set; }
	}
	
	/// <summary>
	/// Order. Production access (all methods) requires the order manager role. Sandbox access does not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Order
	{
		
		/// <summary>
		/// Whether the order was acknowledged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledged")]
		public System.Nullable<System.Boolean> Acknowledged { get; set; }
		
		/// <summary>
		/// Deprecated. Acceptable values are: - "`googleExpress`" - "`purchasesOnGoogle`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public string ChannelType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public OrderCustomer Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryDetails")]
		public OrderDeliveryDetails DeliveryDetails { get; set; }
		
		/// <summary>
		/// The REST ID of the order. Globally unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#order`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Line items that are ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderLineItem[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Merchant-provided ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netAmount")]
		public Price NetAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentMethod")]
		public OrderPaymentMethod PaymentMethod { get; set; }
		
		/// <summary>
		/// The status of the payment. Acceptable values are: - "`paymentCaptured`" - "`paymentRejected`" - "`paymentSecured`" - "`pendingAuthorization`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public string PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickupDetails")]
		public OrderPickupDetails PickupDetails { get; set; }
		
		/// <summary>
		/// The date when the order was placed, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placedDate")]
		public string PlacedDate { get; set; }
		
		/// <summary>
		/// The details of the merchant provided promotions applied to the order. To determine which promotions apply to which products, check the `Promotions[].Benefits[].OfferIds` field against the `LineItems[].Product.OfferId` field for each promotion. If a promotion is applied to more than 1 `offerId`, divide the discount value by the number of affected offers to determine how much discount to apply to each `offerId`. Examples: 1. To calculate the line item level discount for a single specific item: For each promotion, subtract the `Promotions[].Benefits[].Discount.value` amount from the `LineItems[].Price.value`. 2. To calculate the line item level discount for multiple quantity of a specific item: For each promotion, divide the `Promotions[].Benefits[].Discount.value` by the quantity of products and substract it from `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotions")]
		public OrderLegacyPromotion[] Promotions { get; set; }
		
		/// <summary>
		/// Refunds for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public OrderRefund[] Refunds { get; set; }
		
		/// <summary>
		/// Shipments of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipments")]
		public OrderShipment[] Shipments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCost")]
		public Price ShippingCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCostTax")]
		public Price ShippingCostTax { get; set; }
		
		/// <summary>
		/// Deprecated. Shipping details are provided with line items instead. Acceptable values are: - "`economy`" - "`expedited`" - "`oneDay`" - "`sameDay`" - "`standard`" - "`twoDay`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingOption")]
		public string ShippingOption { get; set; }
		
		/// <summary>
		/// The status of the order. Acceptable values are: - "`canceled`" - "`delivered`" - "`inProgress`" - "`partiallyDelivered`" - "`partiallyReturned`" - "`partiallyShipped`" - "`pendingShipment`" - "`returned`" - "`shipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The party responsible for collecting and remitting taxes. Acceptable values are: - "`marketplaceFacilitator`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCollector")]
		public string TaxCollector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCustomer
	{
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Deprecated. Please use marketingRightsInfo instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitMarketingPreference")]
		public System.Nullable<System.Boolean> ExplicitMarketingPreference { get; set; }
		
		/// <summary>
		/// Full name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// Email address for the merchant to send value-added tax or invoice documentation of the order. Only the last document sent is made available to the customer. For more information, see About automated VAT invoicing for Buy on Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceReceivingEmail")]
		public string InvoiceReceivingEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingRightsInfo")]
		public OrderCustomerMarketingRightsInfo MarketingRightsInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCustomerMarketingRightsInfo
	{
		
		/// <summary>
		/// Last known customer selection regarding marketing preferences. In certain cases this selection might not be known, so this field would be empty. If a customer selected `granted` in their most recent order, they can be subscribed to marketing emails. Customers who have chosen `denied` must not be subscribed, or must be unsubscribed if already opted-in. Acceptable values are: - "`denied`" - "`granted`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitMarketingPreference")]
		public string ExplicitMarketingPreference { get; set; }
		
		/// <summary>
		/// Timestamp when last time marketing preference was updated. Could be empty, if user wasn't offered a selection yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestamp")]
		public string LastUpdatedTimestamp { get; set; }
		
		/// <summary>
		/// Email address that can be used for marketing purposes. The field may be empty even if `explicitMarketingPreference` is 'granted'. This happens when retrieving an old order from the customer who deleted their account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingEmailAddress")]
		public string MarketingEmailAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderDeliveryDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public OrderAddress Address { get; set; }
		
		/// <summary>
		/// The phone number of the person receiving the delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderAddress
	{
		
		/// <summary>
		/// CLDR country code (e.g. "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Strings representing the lines of the printed label for mailing the order, for example: John Smith 1600 Amphitheatre Parkway Mountain View, CA, 94043 United States 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullAddress")]
		public string[] FullAddress { get; set; }
		
		/// <summary>
		/// Whether the address is a post office box.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPostOfficeBox")]
		public System.Nullable<System.Boolean> IsPostOfficeBox { get; set; }
		
		/// <summary>
		/// City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Postal Code or ZIP (e.g. "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientName")]
		public string RecipientName { get; set; }
		
		/// <summary>
		/// Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street-level part of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string[] StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItem
	{
		
		/// <summary>
		/// Annotations that are attached to the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public OrderMerchantProvidedAnnotation[] Annotations { get; set; }
		
		/// <summary>
		/// Cancellations of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellations")]
		public OrderCancellation[] Cancellations { get; set; }
		
		/// <summary>
		/// The ID of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public OrderLineItemProduct Product { get; set; }
		
		/// <summary>
		/// Number of items canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityCanceled")]
		public System.Nullable<System.UInt32> QuantityCanceled { get; set; }
		
		/// <summary>
		/// Number of items delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityDelivered")]
		public System.Nullable<System.UInt32> QuantityDelivered { get; set; }
		
		/// <summary>
		/// Number of items ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOrdered")]
		public System.Nullable<System.UInt32> QuantityOrdered { get; set; }
		
		/// <summary>
		/// Number of items pending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityPending")]
		public System.Nullable<System.UInt32> QuantityPending { get; set; }
		
		/// <summary>
		/// Number of items ready for pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityReadyForPickup")]
		public System.Nullable<System.UInt32> QuantityReadyForPickup { get; set; }
		
		/// <summary>
		/// Number of items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityReturned")]
		public System.Nullable<System.UInt32> QuantityReturned { get; set; }
		
		/// <summary>
		/// Number of items shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityShipped")]
		public System.Nullable<System.UInt32> QuantityShipped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnInfo")]
		public OrderLineItemReturnInfo ReturnInfo { get; set; }
		
		/// <summary>
		/// Returns of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returns")]
		public OrderReturn[] Returns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingDetails")]
		public OrderLineItemShippingDetails ShippingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public Price Tax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderMerchantProvidedAnnotation
	{
		
		/// <summary>
		/// Key for additional merchant provided (as key-value pairs) annotation about the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value for additional merchant provided (as key-value pairs) annotation about the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCancellation
	{
		
		/// <summary>
		/// The actor that created the cancellation. Acceptable values are: - "`customer`" - "`googleBot`" - "`googleCustomerService`" - "`googlePayments`" - "`googleSabre`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public string Actor { get; set; }
		
		/// <summary>
		/// Date on which the cancellation has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The quantity that was canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Orders that are canceled with a noInventory reason will lead to the removal of the product from Buy on Google until you make an update to that product. This will not affect your Shopping ads. Acceptable values are: - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`customerCanceled`" - "`customerInitiatedCancel`" - "`customerSupportRequested`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceError`" - "`returnRefundAbuse`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemReturnInfo
	{
		
		/// <summary>
		/// Required. How many days later the item can be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysToReturn")]
		public System.Nullable<System.Int32> DaysToReturn { get; set; }
		
		/// <summary>
		/// Required. Whether the item is returnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReturnable")]
		public System.Nullable<System.Boolean> IsReturnable { get; set; }
		
		/// <summary>
		/// Required. URL of the item return policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyUrl")]
		public string PolicyUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderReturn
	{
		
		/// <summary>
		/// The actor that created the refund. Acceptable values are: - "`customer`" - "`googleBot`" - "`googleCustomerService`" - "`googlePayments`" - "`googleSabre`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public string Actor { get; set; }
		
		/// <summary>
		/// Date on which the item has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Quantity that is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemShippingDetails
	{
		
		/// <summary>
		/// Required. The delivery by date, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliverByDate")]
		public string DeliverByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public OrderLineItemShippingDetailsMethod Method { get; set; }
		
		/// <summary>
		/// Required. The ship by date, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipByDate")]
		public string ShipByDate { get; set; }
		
		/// <summary>
		/// Type of shipment. Indicates whether `deliveryDetails` or `pickupDetails` is applicable for this shipment. Acceptable values are: - "`delivery`" - "`pickup`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemShippingDetailsMethod
	{
		
		/// <summary>
		/// The carrier for the shipping. Optional. See `shipments[].carrier` for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Required. Maximum transit time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDaysInTransit")]
		public System.Nullable<System.UInt32> MaxDaysInTransit { get; set; }
		
		/// <summary>
		/// Required. The name of the shipping method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodName")]
		public string MethodName { get; set; }
		
		/// <summary>
		/// Required. Minimum transit time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minDaysInTransit")]
		public System.Nullable<System.UInt32> MinDaysInTransit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPaymentMethod
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingAddress")]
		public OrderAddress BillingAddress { get; set; }
		
		/// <summary>
		/// The card expiration month (January = 1, February = 2 etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationMonth")]
		public System.Nullable<System.Int32> ExpirationMonth { get; set; }
		
		/// <summary>
		/// The card expiration year (4-digit, e.g. 2015).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationYear")]
		public System.Nullable<System.Int32> ExpirationYear { get; set; }
		
		/// <summary>
		/// The last four digits of the card number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastFourDigits")]
		public string LastFourDigits { get; set; }
		
		/// <summary>
		/// The billing phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The type of instrument. Acceptable values are: - "`AMEX`" - "`DISCOVER`" - "`JCB`" - "`MASTERCARD`" - "`UNIONPAY`" - "`VISA`" - "``" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPickupDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public OrderAddress Address { get; set; }
		
		/// <summary>
		/// Collectors authorized to pick up shipment from the pickup location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectors")]
		public OrderPickupDetailsCollector[] Collectors { get; set; }
		
		/// <summary>
		/// ID of the pickup location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPickupDetailsCollector
	{
		
		/// <summary>
		/// Name of the person picking up the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone number of the person picking up the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLegacyPromotion
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefits")]
		public OrderLegacyPromotionBenefit[] Benefits { get; set; }
		
		/// <summary>
		/// The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review. Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveDates")]
		public string EffectiveDates { get; set; }
		
		/// <summary>
		/// Optional. The text code that corresponds to the promotion when applied on the retailer?s website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericRedemptionCode")]
		public string GenericRedemptionCode { get; set; }
		
		/// <summary>
		/// The unique ID of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The full title of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longTitle")]
		public string LongTitle { get; set; }
		
		/// <summary>
		/// Whether the promotion is applicable to all products or only specific products. Acceptable values are: - "`allProducts`" - "`specificProducts`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productApplicability")]
		public string ProductApplicability { get; set; }
		
		/// <summary>
		/// Indicates that the promotion is valid online. Acceptable values are: - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionChannel")]
		public string RedemptionChannel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLegacyPromotionBenefit
	{
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public Price Discount { get; set; }
		
		/// <summary>
		/// The OfferId(s) that were purchased in this order and map to this specific benefit of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerIds")]
		public string[] OfferIds { get; set; }
		
		/// <summary>
		/// Further describes the benefit of the promotion. Note that we will expand on this enumeration as we support new promotion sub-types. Acceptable values are: - "`buyMGetMoneyOff`" - "`buyMGetNMoneyOff`" - "`buyMGetNPercentOff`" - "`buyMGetPercentOff`" - "`freeGift`" - "`freeGiftWithItemId`" - "`freeGiftWithValue`" - "`freeOvernightShipping`" - "`freeShipping`" - "`freeTwoDayShipping`" - "`moneyOff`" - "`percentageOff`" - "`rewardPoints`" - "`salePrice`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public string SubType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxImpact")]
		public Price TaxImpact { get; set; }
		
		/// <summary>
		/// Describes whether the promotion applies to products (e.g. 20% off) or to shipping (e.g. Free Shipping). Acceptable values are: - "`product`" - "`shipping`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderRefund
	{
		
		/// <summary>
		/// The actor that created the refund. Acceptable values are: - "`customer`" - "`googleBot`" - "`googleCustomerService`" - "`googlePayments`" - "`googleSabre`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public string Actor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// Date on which the item has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The reason for the refund. Acceptable values are: - "`adjustment`" - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`customerSupportRequested`" - "`deliveredLateByCarrier`" - "`deliveredTooLate`" - "`expiredItem`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`feeAdjustment`" - "`invalidCoupon`" - "`lateShipmentCredit`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceAdjustment`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`promoReallocation`" - "`qualityNotAsExpected`" - "`returnRefundAbuse`" - "`shippingCostAdjustment`" - "`shippingPriceError`" - "`taxAdjustment`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderShipment
	{
		
		/// <summary>
		/// The carrier handling the shipment. For supported carriers, Google includes the carrier name and tracking URL in emails to customers. For select supported carriers, Google also automatically updates the shipment status based on the provided shipment ID. *Note:* You can also use unsupported carriers, but emails to customers will not include the carrier name or tracking URL, and there will be no automatic order status updates. Supported carriers for US are: - "`ups`" (United Parcel Service) *automatic status updates* - "`usps`" (United States Postal Service) *automatic status updates* - "`fedex`" (FedEx) *automatic status updates * - "`dhl`" (DHL eCommerce) *automatic status updates* (US only) - "`ontrac`" (OnTrac) *automatic status updates * - "`dhl express`" (DHL Express) - "`deliv`" (Deliv) - "`dynamex`" (TForce) - "`lasership`" (LaserShip) - "`mpx`" (Military Parcel Xpress) - "`uds`" (United Delivery Service) - "`efw`" (Estes Forwarding Worldwide) - "`jd logistics`" (JD Logistics) - "`yunexpress`" (YunExpress) - "`china post`" (China Post) - "`china ems`" (China Post Express Mail Service) - "`singapore post`" (Singapore Post) - "`pos malaysia`" (Pos Malaysia) - "`postnl`" (PostNL) - "`ptt`" (PTT Turkish Post) - "`eub`" (ePacket) - "`chukou1`" (Chukou1 Logistics) - "`bestex`" (Best Express) - "`canada post`" (Canada Post) - "`purolator`" (Purolator) - "`canpar`" (Canpar) - "`india post`" (India Post) - "`blue dart`" (Blue Dart) - "`delhivery`" (Delhivery) - "`dtdc`" (DTDC) - "`tpc india`" (TPC India) Supported carriers for FR are: - "`la poste`" (La Poste) *automatic status updates * - "`colissimo`" (Colissimo by La Poste) *automatic status updates* - "`ups`" (United Parcel Service) *automatic status updates * - "`chronopost`" (Chronopost by La Poste) - "`gls`" (General Logistics Systems France) - "`dpd`" (DPD Group by GeoPost) - "`bpost`" (Belgian Post Group) - "`colis prive`" (Colis Privé) - "`boxtal`" (Boxtal) - "`geodis`" (GEODIS) - "`tnt`" (TNT) - "`db schenker`" (DB Schenker) - "`aramex`" (Aramex) 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been delivered, in ISO 8601 format. Present only if `status` is `delivered`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The line items that are shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderShipmentLineItemShipment[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledDeliveryDetails")]
		public OrderShipmentScheduledDeliveryDetails ScheduledDeliveryDetails { get; set; }
		
		/// <summary>
		/// The status of the shipment. Acceptable values are: - "`delivered`" - "`readyForPickup`" - "`shipped`" - "`undeliverable`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderShipmentLineItemShipment
	{
		
		/// <summary>
		/// The ID of the line item that is shipped. This value is assigned by Google when an order is created. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to ship. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity that is shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderShipmentScheduledDeliveryDetails
	{
		
		/// <summary>
		/// The phone number of the carrier fulfilling the delivery. The phone number is formatted as the international notation in ITU-T Recommendation E.123 (e.g., "+41 44 668 1800").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierPhoneNumber")]
		public string CarrierPhoneNumber { get; set; }
		
		/// <summary>
		/// The date a shipment is scheduled for delivery, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public string ScheduledDate { get; set; }
	}
	
	/// <summary>
	/// Order disbursement. All methods require the payment analyst role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderReportDisbursement
	{
		
		[System.Runtime.Serialization.DataMember(Name="disbursementAmount")]
		public Price DisbursementAmount { get; set; }
		
		/// <summary>
		/// The disbursement date, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementCreationDate")]
		public string DisbursementCreationDate { get; set; }
		
		/// <summary>
		/// The date the disbursement was initiated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementDate")]
		public string DisbursementDate { get; set; }
		
		/// <summary>
		/// The ID of the disbursement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementId")]
		public string DisbursementId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderReportTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="disbursementAmount")]
		public Price DisbursementAmount { get; set; }
		
		/// <summary>
		/// The date the disbursement was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementCreationDate")]
		public string DisbursementCreationDate { get; set; }
		
		/// <summary>
		/// The date the disbursement was initiated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementDate")]
		public string DisbursementDate { get; set; }
		
		/// <summary>
		/// The ID of the disbursement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementId")]
		public string DisbursementId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Merchant-provided ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// The ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productAmount")]
		public Amount ProductAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productAmountWithRemittedTax")]
		public ProductAmount ProductAmountWithRemittedTax { get; set; }
		
		/// <summary>
		/// The date of the transaction, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		public string TransactionDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remittedTaxAmount")]
		public Price RemittedTaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateChargeInvoiceRequest
	{
		
		/// <summary>
		/// [required] The ID of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceSummary")]
		public InvoiceSummary InvoiceSummary { get; set; }
		
		/// <summary>
		/// [required] Invoice details per line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemInvoices")]
		public ShipmentInvoiceLineItemInvoice[] LineItemInvoices { get; set; }
		
		/// <summary>
		/// [required] The ID of the operation, unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// [required] ID of the shipment group. It is assigned by the merchant in the `shipLineItems` method and is used to group multiple line items that have the same kind of shipping charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipmentInvoiceLineItemInvoice
	{
		
		/// <summary>
		/// ID of the line item. Either lineItemId or productId must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// ID of the product. This is the REST ID used in the products service. Either lineItemId or productId must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// [required] The shipment unit ID is assigned by the merchant and defines individual quantities within a line item. The same ID can be assigned to units that are the same while units that differ must be assigned a different ID (for example: free or promotional units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentUnitIds")]
		public string[] ShipmentUnitIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitInvoice")]
		public UnitInvoice UnitInvoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnitInvoice
	{
		
		/// <summary>
		/// Additional charges for a unit, e.g. shipping costs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalCharges")]
		public UnitInvoiceAdditionalCharge[] AdditionalCharges { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotions")]
		public Promotion[] Promotions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPricePretax")]
		public Price UnitPricePretax { get; set; }
		
		/// <summary>
		/// Tax amounts to apply to the unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPriceTaxes")]
		public UnitInvoiceTaxLine[] UnitPriceTaxes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnitInvoiceAdditionalCharge
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalChargeAmount")]
		public Amount AdditionalChargeAmount { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalChargePromotions")]
		public Promotion[] AdditionalChargePromotions { get; set; }
		
		/// <summary>
		/// [required] Type of the additional charge. Acceptable values are: - "`shipping`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnitInvoiceTaxLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
		
		/// <summary>
		/// Optional name of the tax type. This should only be provided if `taxType` is `otherFeeTax`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxName")]
		public string TaxName { get; set; }
		
		/// <summary>
		/// [required] Type of the tax. Acceptable values are: - "`otherFee`" - "`otherFeeTax`" - "`sales`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxType")]
		public string TaxType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateChargeInvoiceResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#orderinvoicesCreateChargeInvoiceResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateRefundInvoiceRequest
	{
		
		/// <summary>
		/// [required] The ID of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// [required] The ID of the operation, unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refundOnlyOption")]
		public OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption RefundOnlyOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnOption")]
		public OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption ReturnOption { get; set; }
		
		/// <summary>
		/// Invoice details for different shipment groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentInvoices")]
		public ShipmentInvoice[] ShipmentInvoices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption
	{
		
		/// <summary>
		/// Optional description of the refund reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [required] Reason for the refund. Acceptable values are: - "`adjustment`" - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`customerSupportRequested`" - "`deliveredLateByCarrier`" - "`deliveredTooLate`" - "`expiredItem`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`feeAdjustment`" - "`invalidCoupon`" - "`lateShipmentCredit`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceAdjustment`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`promoReallocation`" - "`qualityNotAsExpected`" - "`returnRefundAbuse`" - "`shippingCostAdjustment`" - "`shippingPriceError`" - "`taxAdjustment`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption
	{
		
		/// <summary>
		/// Optional description of the return reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [required] Reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipmentInvoice
	{
		
		[System.Runtime.Serialization.DataMember(Name="invoiceSummary")]
		public InvoiceSummary InvoiceSummary { get; set; }
		
		/// <summary>
		/// [required] Invoice details per line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemInvoices")]
		public ShipmentInvoiceLineItemInvoice[] LineItemInvoices { get; set; }
		
		/// <summary>
		/// [required] ID of the shipment group. It is assigned by the merchant in the `shipLineItems` method and is used to group multiple line items that have the same kind of shipping charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateRefundInvoiceResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#orderinvoicesCreateRefundInvoiceResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreportsListDisbursementsResponse
	{
		
		/// <summary>
		/// The list of disbursements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public OrderReportDisbursement[] Disbursements { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#orderreportsListDisbursementsResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of disbursements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreportsListTransactionsResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#orderreportsListTransactionsResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public OrderReportTransaction[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#orderreturnsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public MerchantOrderReturn[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersAcknowledgeRequest
	{
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersAcknowledgeResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersAcknowledgeResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersAdvanceTestOrderResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersAdvanceTestOrderResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelLineItemRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the line item to cancel. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to cancel. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to cancel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`customerInitiatedCancel`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`noInventory`" - "`other`" - "`priceError`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelLineItemResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelRequest
	{
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`customerInitiatedCancel`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`noInventory`" - "`other`" - "`priceError`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelTestOrderByCustomerRequest
	{
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`changedMind`" - "`orderedWrongItem`" - "`other`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelTestOrderByCustomerResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersCancelTestOrderByCustomerResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestOrderRequest
	{
		
		/// <summary>
		/// The CLDR territory code of the country of the test order to create. Affects the currency and addresses of orders created via `template_name`, or the addresses of orders created via `test_order`. Acceptable values are: - "`US`" - "`FR`" Defaults to `US`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The test order template to use. Specify as an alternative to `testOrder` as a shortcut for retrieving a template and then creating an order using that template. Acceptable values are: - "`template1`" - "`template1a`" - "`template1b`" - "`template2`" - "`template3`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testOrder")]
		public TestOrder TestOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public TestOrderCustomer Customer { get; set; }
		
		/// <summary>
		/// Whether the orderinvoices service should support this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableOrderinvoices")]
		public System.Nullable<System.Boolean> EnableOrderinvoices { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#testOrder`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required. Line items that are ordered. At least one line item must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public TestOrderLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Restricted. Do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationMode")]
		public string NotificationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentMethod")]
		public TestOrderPaymentMethod PaymentMethod { get; set; }
		
		/// <summary>
		/// Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - "`dwight`" - "`jim`" - "`pam`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedDeliveryAddress")]
		public string PredefinedDeliveryAddress { get; set; }
		
		/// <summary>
		/// Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - "`dwight`" - "`jim`" - "`pam`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedPickupDetails")]
		public string PredefinedPickupDetails { get; set; }
		
		/// <summary>
		/// Deprecated. Ignored if provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotions")]
		public OrderLegacyPromotion[] Promotions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCost")]
		public Price ShippingCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCostTax")]
		public Price ShippingCostTax { get; set; }
		
		/// <summary>
		/// Required. The requested shipping option. Acceptable values are: - "`economy`" - "`expedited`" - "`oneDay`" - "`sameDay`" - "`standard`" - "`twoDay`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingOption")]
		public string ShippingOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderCustomer
	{
		
		/// <summary>
		/// Required. Email address of the customer. Acceptable values are: - "`pog.dwight.schrute@gmail.com`" - "`pog.jim.halpert@gmail.com`" - "`penpog.pam.beesly@gmail.comding`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Deprecated. Please use marketingRightsInfo instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitMarketingPreference")]
		public System.Nullable<System.Boolean> ExplicitMarketingPreference { get; set; }
		
		/// <summary>
		/// Full name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingRightsInfo")]
		public TestOrderCustomerMarketingRightsInfo MarketingRightsInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderCustomerMarketingRightsInfo
	{
		
		/// <summary>
		/// Last know user use selection regards marketing preferences. In certain cases selection might not be known, so this field would be empty. Acceptable values are: - "`denied`" - "`granted`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitMarketingPreference")]
		public string ExplicitMarketingPreference { get; set; }
		
		/// <summary>
		/// Timestamp when last time marketing preference was updated. Could be empty, if user wasn't offered a selection yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestamp")]
		public string LastUpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderLineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public TestOrderLineItemProduct Product { get; set; }
		
		/// <summary>
		/// Required. Number of items ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOrdered")]
		public System.Nullable<System.UInt32> QuantityOrdered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnInfo")]
		public OrderLineItemReturnInfo ReturnInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingDetails")]
		public OrderLineItemShippingDetails ShippingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitTax")]
		public Price UnitTax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderLineItemProduct
	{
		
		/// <summary>
		/// Required. Brand of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// Deprecated. Acceptable values are: - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// Required. Condition or state of the item. Acceptable values are: - "`new`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item. Acceptable values are: - "`en`" - "`fr`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Fees for the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public OrderLineItemProductFee[] Fees { get; set; }
		
		/// <summary>
		/// Global Trade Item Number (GTIN) of the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. URL of an image of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string ImageLink { get; set; }
		
		/// <summary>
		/// Shared identifier for all variants of the same product. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// Manufacturer Part Number (MPN) of the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// Required. An identifier of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory // code of the target country of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Variant attributes for the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantAttributes")]
		public OrderLineItemProductVariantAttribute[] VariantAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderPaymentMethod
	{
		
		/// <summary>
		/// The card expiration month (January = 1, February = 2 etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationMonth")]
		public System.Nullable<System.Int32> ExpirationMonth { get; set; }
		
		/// <summary>
		/// The card expiration year (4-digit, e.g. 2015).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationYear")]
		public System.Nullable<System.Int32> ExpirationYear { get; set; }
		
		/// <summary>
		/// The last four digits of the card number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastFourDigits")]
		public string LastFourDigits { get; set; }
		
		/// <summary>
		/// The billing address. Acceptable values are: - "`dwight`" - "`jim`" - "`pam`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedBillingAddress")]
		public string PredefinedBillingAddress { get; set; }
		
		/// <summary>
		/// The type of instrument. Note that real orders might have different values than the four values accepted by `createTestOrder`. Acceptable values are: - "`AMEX`" - "`DISCOVER`" - "`MASTERCARD`" - "`VISA`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestOrderResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersCreateTestOrderResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID of the newly created test order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestReturnRequest
	{
		
		/// <summary>
		/// Returned items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public OrdersCustomBatchRequestEntryCreateTestReturnReturnItem[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryCreateTestReturnReturnItem
	{
		
		/// <summary>
		/// The ID of the line item to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// Quantity that is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestReturnResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersCreateTestReturnResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID of the newly created test order return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnId")]
		public string ReturnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public OrdersCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancel")]
		public OrdersCustomBatchRequestEntryCancel Cancel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelLineItem")]
		public OrdersCustomBatchRequestEntryCancelLineItem CancelLineItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inStoreRefundLineItem")]
		public OrdersCustomBatchRequestEntryInStoreRefundLineItem InStoreRefundLineItem { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The merchant order ID. Required for `updateMerchantOrderId` and `getByMerchantOrderId` methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`acknowledge`" - "`cancel`" - "`cancelLineItem`" - "`get`" - "`getByMerchantOrderId`" - "`inStoreRefundLineItem`" - "`refund`" - "`rejectReturnLineItem`" - "`returnLineItem`" - "`returnRefundLineItem`" - "`setLineItemMetadata`" - "`shipLineItems`" - "`updateLineItemShippingDetails`" - "`updateMerchantOrderId`" - "`updateShipment`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order. Required for all methods beside `get` and `getByMerchantOrderId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the order. Required for all methods beside `getByMerchantOrderId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public OrdersCustomBatchRequestEntryRefund Refund { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectReturnLineItem")]
		public OrdersCustomBatchRequestEntryRejectReturnLineItem RejectReturnLineItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnLineItem")]
		public OrdersCustomBatchRequestEntryReturnLineItem ReturnLineItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnRefundLineItem")]
		public OrdersCustomBatchRequestEntryReturnRefundLineItem ReturnRefundLineItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setLineItemMetadata")]
		public OrdersCustomBatchRequestEntrySetLineItemMetadata SetLineItemMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipLineItems")]
		public OrdersCustomBatchRequestEntryShipLineItems ShipLineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateLineItemShippingDetails")]
		public OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails UpdateLineItemShippingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateShipment")]
		public OrdersCustomBatchRequestEntryUpdateShipment UpdateShipment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryCancel
	{
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`customerInitiatedCancel`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`noInventory`" - "`other`" - "`priceError`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryCancelLineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the line item to cancel. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to cancel. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to cancel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`customerInitiatedCancel`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`noInventory`" - "`other`" - "`priceError`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryInStoreRefundLineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryRefund
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The reason for the refund. Acceptable values are: - "`adjustment`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`deliveredLateByCarrier`" - "`feeAdjustment`" - "`lateShipmentCredit`" - "`noInventory`" - "`other`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`shippingCostAdjustment`" - "`taxAdjustment`" - "`undeliverableShippingAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryRejectReturnLineItem
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`damagedOrUsed`" - "`missingComponent`" - "`notEligible`" - "`other`" - "`outOfReturnWindow`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryReturnLineItem
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryReturnRefundLineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntrySetLineItemMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public OrderMerchantProvidedAnnotation[] Annotations { get; set; }
		
		/// <summary>
		/// The ID of the line item to set metadata. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to set metadata. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryShipLineItems
	{
		
		/// <summary>
		/// Deprecated. Please use shipmentInfo instead. The carrier handling the shipment. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Line items to ship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderShipmentLineItemShipment[] LineItems { get; set; }
		
		/// <summary>
		/// ID of the shipment group. Required for orders that use the orderinvoices service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
		
		/// <summary>
		/// Deprecated. Please use shipmentInfo instead. The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentInfos")]
		public OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo[] ShipmentInfos { get; set; }
		
		/// <summary>
		/// Deprecated. Please use shipmentInfo instead. The tracking ID for the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo
	{
		
		/// <summary>
		/// The carrier handling the shipment. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Required. The ID of the shipment. This is assigned by the merchant and is unique to each shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails
	{
		
		/// <summary>
		/// Updated delivery by date, in ISO 8601 format. If not specified only ship by date is updated. Provided date should be within 1 year timeframe and can not be a date in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliverByDate")]
		public string DeliverByDate { get; set; }
		
		/// <summary>
		/// The ID of the line item to set metadata. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to set metadata. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Updated ship by date, in ISO 8601 format. If not specified only deliver by date is updated. Provided date should be within 1 year timeframe and can not be a date in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipByDate")]
		public string ShipByDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryUpdateShipment
	{
		
		/// <summary>
		/// The carrier handling the shipment. Not updated if missing. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been delivered, in ISO 8601 format. Optional and can be provided only if `status` is `delivered`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// New status for the shipment. Not updated if missing. Acceptable values are: - "`delivered`" - "`undeliverable`" - "`readyForPickup`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment. Not updated if missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public OrdersCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// The status of the execution. Only defined if 1. the request was successful; and 2. the method is not `get`, `getByMerchantOrderId`, or one of the test methods. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Order. Production access (all methods) requires the order manager role. Sandbox access does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersGetByMerchantOrderIdResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersGetByMerchantOrderIdResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Order. Production access (all methods) requires the order manager role. Sandbox access does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersGetTestOrderTemplateResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersGetTestOrderTemplateResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public TestOrder Template { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersInStoreRefundLineItemRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersInStoreRefundLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersInStoreRefundLineItemResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Order[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRefundRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The reason for the refund. Acceptable values are: - "`adjustment`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`deliveredLateByCarrier`" - "`feeAdjustment`" - "`lateShipmentCredit`" - "`noInventory`" - "`other`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`shippingCostAdjustment`" - "`taxAdjustment`" - "`undeliverableShippingAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRefundResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersRefundResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRejectReturnLineItemRequest
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`damagedOrUsed`" - "`missingComponent`" - "`notEligible`" - "`other`" - "`outOfReturnWindow`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRejectReturnLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersRejectReturnLineItemResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersReturnLineItemRequest
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersReturnLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersReturnLineItemResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersReturnRefundLineItemRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="amountPretax")]
		public Price AmountPretax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountTax")]
		public Price AmountTax { get; set; }
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund. Quantity is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersReturnRefundLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersReturnRefundLineItemResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersSetLineItemMetadataRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public OrderMerchantProvidedAnnotation[] Annotations { get; set; }
		
		/// <summary>
		/// The ID of the line item to set metadata. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to set metadata. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersSetLineItemMetadataResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersSetLineItemMetadataResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersShipLineItemsRequest
	{
		
		/// <summary>
		/// Deprecated. Please use shipmentInfo instead. The carrier handling the shipment. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Line items to ship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderShipmentLineItemShipment[] LineItems { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// ID of the shipment group. Required for orders that use the orderinvoices service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
		
		/// <summary>
		/// Deprecated. Please use shipmentInfo instead. The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentInfos")]
		public OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo[] ShipmentInfos { get; set; }
		
		/// <summary>
		/// Deprecated. Please use shipmentInfo instead. The tracking ID for the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersShipLineItemsResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersShipLineItemsResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateLineItemShippingDetailsRequest
	{
		
		/// <summary>
		/// Updated delivery by date, in ISO 8601 format. If not specified only ship by date is updated. Provided date should be within 1 year timeframe and can not be a date in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliverByDate")]
		public string DeliverByDate { get; set; }
		
		/// <summary>
		/// The ID of the line item to set metadata. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to set metadata. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Updated ship by date, in ISO 8601 format. If not specified only deliver by date is updated. Provided date should be within 1 year timeframe and can not be a date in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipByDate")]
		public string ShipByDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateLineItemShippingDetailsResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateLineItemShippingDetailsResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateMerchantOrderIdRequest
	{
		
		/// <summary>
		/// The merchant order id to be assigned to the order. Must be unique per merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateMerchantOrderIdResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateMerchantOrderIdResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateShipmentRequest
	{
		
		/// <summary>
		/// The carrier handling the shipment. Not updated if missing. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been delivered, in ISO 8601 format. Optional and can be provided only if `status` is `delivered`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// New status for the shipment. Not updated if missing. Acceptable values are: - "`delivered`" - "`undeliverable`" - "`readyForPickup`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment. Not updated if missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateShipmentResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#ordersUpdateShipmentResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PickupCarrierService
	{
		
		/// <summary>
		/// The name of the pickup carrier (e.g., `"UPS"`). Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The name of the pickup service (e.g., `"Access point"`). Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PickupServicesPickupService
	{
		
		/// <summary>
		/// The name of the carrier (e.g., `"UPS"`). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The CLDR country code of the carrier (e.g., "US"). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The name of the pickup service (e.g., `"Access point"`). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public PosCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The absolute quantity of an item available at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public PosInventory Inventory { get; set; }
		
		/// <summary>
		/// The ID of the POS data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`delete`" - "`get`" - "`insert`" - "`inventory`" - "`sale`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The change of the available quantity of an item at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sale")]
		public PosSale Sale { get; set; }
		
		/// <summary>
		/// Store resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store")]
		public PosStore Store { get; set; }
		
		/// <summary>
		/// The store code. This should be set only if the method is `delete` or `get`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// The ID of the account for which to get/submit data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetMerchantId")]
		public string TargetMerchantId { get; set; }
	}
	
	/// <summary>
	/// The absolute quantity of an item available at the given store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosInventory
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posInventory`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The available quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// The change of the available quantity of an item at the given store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosSale
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posSale`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The relative change of the available quantity. Negative for items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// A unique ID to group items from the same sale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleId")]
		public string SaleId { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// Store resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosStore
	{
		
		/// <summary>
		/// The business type of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcidCategory")]
		public string[] GcidCategory { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posStore`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The store phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The Google Place Id of the store location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// Required. The street address of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeAddress")]
		public string StoreAddress { get; set; }
		
		/// <summary>
		/// Required. A store identifier that is unique for the given merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// The merchant or store name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		/// <summary>
		/// The website url for the store or merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public PosCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#posCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// The absolute quantity of an item available at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public PosInventory Inventory { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The change of the available quantity of an item at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sale")]
		public PosSale Sale { get; set; }
		
		/// <summary>
		/// Store resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store")]
		public PosStore Store { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosInventoryRequest
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The available quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosInventoryResponse
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#posInventoryResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The available quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#posListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public PosStore[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosSaleRequest
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The relative change of the available quantity. Negative for items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// A unique ID to group items from the same sale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleId")]
		public string SaleId { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosSaleResponse
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#posSaleResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The relative change of the available quantity. Negative for items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// A unique ID to group items from the same sale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleId")]
		public string SaleId { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalCodeGroup
	{
		
		/// <summary>
		/// The CLDR territory code of the country the postal code group applies to. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The name of the postal code group, referred to in headers. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A range of postal codes. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRanges")]
		public PostalCodeRange[] PostalCodeRanges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalCodeRange
	{
		
		/// <summary>
		/// A postal code or a pattern of the form `prefix*` denoting the inclusive lower bound of the range defining the area. Examples values: `"94108"`, `"9410*"`, `"9*"`. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRangeBegin")]
		public string PostalCodeRangeBegin { get; set; }
		
		/// <summary>
		/// A postal code or a pattern of the form `prefix*` denoting the inclusive upper bound of the range defining the area. It must have the same length as `postalCodeRangeBegin`: if `postalCodeRangeBegin` is a postal code then `postalCodeRangeEnd` must be a postal code too; if `postalCodeRangeBegin` is a pattern then `postalCodeRangeEnd` must be a pattern with the same prefix length. Optional: if not set, then the area is defined as being all the postal codes matching `postalCodeRangeBegin`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRangeEnd")]
		public string PostalCodeRangeEnd { get; set; }
	}
	
	/// <summary>
	///  Required product attributes are primarily defined by the products data specification. See the Products Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Product
	{
		
		/// <summary>
		/// Additional URLs of images of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalImageLinks")]
		public string[] AdditionalImageLinks { get; set; }
		
		/// <summary>
		/// Additional categories of the item (formatted as in products data specification).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalProductTypes")]
		public string[] AdditionalProductTypes { get; set; }
		
		/// <summary>
		/// Should be set to true if the item is targeted towards adults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adult")]
		public System.Nullable<System.Boolean> Adult { get; set; }
		
		/// <summary>
		/// Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adwordsGrouping")]
		public string AdwordsGrouping { get; set; }
		
		/// <summary>
		/// Similar to adwords_grouping, but only works on CPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adwordsLabels")]
		public string[] AdwordsLabels { get; set; }
		
		/// <summary>
		/// Allows advertisers to override the item URL when the product is shown within the context of Product Ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adwordsRedirect")]
		public string AdwordsRedirect { get; set; }
		
		/// <summary>
		/// Target age group of the item. Acceptable values are: - "`adult`" - "`infant`" - "`kids`" - "`newborn`" - "`toddler`" - "`youngAdult`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageGroup")]
		public string AgeGroup { get; set; }
		
		/// <summary>
		/// Deprecated. Do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspects")]
		public ProductAspect[] Aspects { get; set; }
		
		/// <summary>
		/// Availability status of the item. Acceptable values are: - "`in stock`" - "`out of stock`" - "`preorder`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// The day a pre-ordered product becomes available for delivery, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityDate")]
		public string AvailabilityDate { get; set; }
		
		/// <summary>
		/// Brand of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// URL for the canonical version of your item's landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalLink")]
		public string CanonicalLink { get; set; }
		
		/// <summary>
		/// Required. The item's channel (online or local). Acceptable values are: - "`local`" - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// Color of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Condition or state of the item. Acceptable values are: - "`new`" - "`refurbished`" - "`used`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costOfGoodsSold")]
		public Price CostOfGoodsSold { get; set; }
		
		/// <summary>
		/// A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (e.g., `{ "name": "size type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google (formerly known as Shopping Actions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public CustomAttribute[] CustomAttributes { get; set; }
		
		/// <summary>
		/// A list of custom (merchant-provided) custom attribute groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customGroups")]
		public CustomGroup[] CustomGroups { get; set; }
		
		/// <summary>
		/// Custom label 0 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel0")]
		public string CustomLabel0 { get; set; }
		
		/// <summary>
		/// Custom label 1 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel1")]
		public string CustomLabel1 { get; set; }
		
		/// <summary>
		/// Custom label 2 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel2")]
		public string CustomLabel2 { get; set; }
		
		/// <summary>
		/// Custom label 3 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel3")]
		public string CustomLabel3 { get; set; }
		
		/// <summary>
		/// Custom label 4 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel4")]
		public string CustomLabel4 { get; set; }
		
		/// <summary>
		/// Description of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the intended destinations for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public ProductDestination[] Destinations { get; set; }
		
		/// <summary>
		/// An identifier for an item for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsId")]
		public string DisplayAdsId { get; set; }
		
		/// <summary>
		/// URL directly to your item's landing page for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsLink")]
		public string DisplayAdsLink { get; set; }
		
		/// <summary>
		/// Advertiser-specified recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsSimilarIds")]
		public string[] DisplayAdsSimilarIds { get; set; }
		
		/// <summary>
		/// Title of an item for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsTitle")]
		public string DisplayAdsTitle { get; set; }
		
		/// <summary>
		/// Offer margin for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsValue")]
		public System.Nullable<System.Double> DisplayAdsValue { get; set; }
		
		/// <summary>
		/// The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - "`A`" - "`A+`" - "`A++`" - "`A+++`" - "`B`" - "`C`" - "`D`" - "`E`" - "`F`" - "`G`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficiencyClass")]
		public string EnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in `productstatuses` as `googleExpirationDate` and might be earlier if `expirationDate` is too far in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// Target gender of the item. Acceptable values are: - "`female`" - "`male`" - "`unisex`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleProductCategory")]
		public string GoogleProductCategory { get; set; }
		
		/// <summary>
		/// Global Trade Item Number (GTIN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// The REST ID of the product. Content API methods that operate on products take this as their `productId` parameter. The REST ID for a product is of the form channel:contentLanguage: targetCountry: offerId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifierExists")]
		public System.Nullable<System.Boolean> IdentifierExists { get; set; }
		
		/// <summary>
		/// URL of an image of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string ImageLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="installment")]
		public Installment Installment { get; set; }
		
		/// <summary>
		/// Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBundle")]
		public System.Nullable<System.Boolean> IsBundle { get; set; }
		
		/// <summary>
		/// Shared identifier for all variants of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#product`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// URL directly linking to your item's page on your website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loyaltyPoints")]
		public LoyaltyPoints LoyaltyPoints { get; set; }
		
		/// <summary>
		/// The material of which the item is made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material")]
		public string Material { get; set; }
		
		/// <summary>
		/// The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - "`A`" - "`A+`" - "`A++`" - "`A+++`" - "`B`" - "`C`" - "`D`" - "`E`" - "`F`" - "`G`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxEnergyEfficiencyClass")]
		public string MaxEnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// Maximal product handling time (in business days).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxHandlingTime")]
		public string MaxHandlingTime { get; set; }
		
		/// <summary>
		/// The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - "`A`" - "`A+`" - "`A++`" - "`A+++`" - "`B`" - "`C`" - "`D`" - "`E`" - "`F`" - "`G`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minEnergyEfficiencyClass")]
		public string MinEnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// Minimal product handling time (in business days).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHandlingTime")]
		public string MinHandlingTime { get; set; }
		
		/// <summary>
		/// URL for the mobile-optimized version of your item's landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileLink")]
		public string MobileLink { get; set; }
		
		/// <summary>
		/// Manufacturer Part Number (MPN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// The number of identical products in a merchant-defined multipack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipack")]
		public string Multipack { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details. *Note:* Content API methods that operate on products take the REST ID of the product, *not* this identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlineOnly")]
		public System.Nullable<System.Boolean> OnlineOnly { get; set; }
		
		/// <summary>
		/// The item's pattern (e.g. polka dots).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Your category of the item (formatted as in products data specification).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public string ProductType { get; set; }
		
		/// <summary>
		/// The unique ID of a promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionIds")]
		public string[] PromotionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salePrice")]
		public Price SalePrice { get; set; }
		
		/// <summary>
		/// Date range during which the item is on sale (see products data specification ).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salePriceEffectiveDate")]
		public string SalePriceEffectiveDate { get; set; }
		
		/// <summary>
		/// The quantity of the product that is available for selling on Google. Supported only for online products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellOnGoogleQuantity")]
		public string SellOnGoogleQuantity { get; set; }
		
		/// <summary>
		/// Shipping rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public ProductShipping[] Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingHeight")]
		public ProductShippingDimension ShippingHeight { get; set; }
		
		/// <summary>
		/// The shipping label of the product, used to group product in account-level shipping rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingLabel")]
		public string ShippingLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingLength")]
		public ProductShippingDimension ShippingLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingWeight")]
		public ProductShippingWeight ShippingWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingWidth")]
		public ProductShippingDimension ShippingWidth { get; set; }
		
		/// <summary>
		/// System in which the size is specified. Recommended for apparel items. Acceptable values are: - "`AU`" - "`BR`" - "`CN`" - "`DE`" - "`EU`" - "`FR`" - "`IT`" - "`JP`" - "`MEX`" - "`UK`" - "`US`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeSystem")]
		public string SizeSystem { get; set; }
		
		/// <summary>
		/// The cut of the item. Recommended for apparel items. Acceptable values are: - "`big and tall`" - "`maternity`" - "`oversize`" - "`petite`" - "`plus`" - "`regular`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeType")]
		public string SizeType { get; set; }
		
		/// <summary>
		/// Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see size definition).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public string[] Sizes { get; set; }
		
		/// <summary>
		/// The source of the offer, i.e., how the offer was created. Acceptable values are: - "`api`" - "`crawl`" - "`feed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Tax information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public ProductTax[] Taxes { get; set; }
		
		/// <summary>
		/// Title of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPricingBaseMeasure")]
		public ProductUnitPricingBaseMeasure UnitPricingBaseMeasure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPricingMeasure")]
		public ProductUnitPricingMeasure UnitPricingMeasure { get; set; }
		
		/// <summary>
		/// Deprecated. The read-only list of intended destinations which passed validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validatedDestinations")]
		public string[] ValidatedDestinations { get; set; }
		
		/// <summary>
		/// Read-only warnings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public Error[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductAspect
	{
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspectName")]
		public string AspectName { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intention")]
		public string Intention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductDestination
	{
		
		/// <summary>
		/// The name of the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Whether the destination is required, excluded or should be validated. Acceptable values are: - "`default`" - "`excluded`" - "`optional`" - "`required`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intention")]
		public string Intention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductShipping
	{
		
		/// <summary>
		/// The CLDR territory code of the country to which an item will ship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The location where the shipping is applicable, represented by a location group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationGroupName")]
		public string LocationGroupName { get; set; }
		
		/// <summary>
		/// The numeric ID of a location that the shipping rate applies to as defined in the AdWords API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// The geographic region to which a shipping rate applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// A free-form description of the service class or delivery speed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductShippingDimension
	{
		
		/// <summary>
		/// The unit of value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The dimension of the product used to calculate the shipping cost of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductShippingWeight
	{
		
		/// <summary>
		/// The unit of value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The weight of the product used to calculate the shipping cost of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductTax
	{
		
		/// <summary>
		/// The country within which the item is taxed, specified as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The numeric ID of a location that the tax rate applies to as defined in the AdWords API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The postal code range that the tax rate applies to, represented by a ZIP code, a ZIP code prefix using * wildcard, a range between two ZIP codes or two ZIP code prefixes of equal length. Examples: 94114, 94*, 94002-95460, 94*-95*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The percentage of tax rate that applies to the item price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// The geographic region to which the tax rate applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Should be set to true if tax is charged on shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxShip")]
		public System.Nullable<System.Boolean> TaxShip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductUnitPricingBaseMeasure
	{
		
		/// <summary>
		/// The unit of the denominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The denominator of the unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductUnitPricingMeasure
	{
		
		/// <summary>
		/// The unit of the measure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The measure of an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// The status of a product, i.e., information about a product computed asynchronously.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatus
	{
		
		/// <summary>
		/// Date on which the item has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// DEPRECATED - never populated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataQualityIssues")]
		public ProductStatusDataQualityIssue[] DataQualityIssues { get; set; }
		
		/// <summary>
		/// The intended destinations for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStatuses")]
		public ProductStatusDestinationStatus[] DestinationStatuses { get; set; }
		
		/// <summary>
		/// Date on which the item expires in Google Shopping, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleExpirationDate")]
		public string GoogleExpirationDate { get; set; }
		
		/// <summary>
		/// A list of all issues associated with the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemLevelIssues")]
		public ProductStatusItemLevelIssue[] ItemLevelIssues { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productStatus`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Date on which the item has been last updated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDate")]
		public string LastUpdateDate { get; set; }
		
		/// <summary>
		/// The link to the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		///  Required product attributes are primarily defined by the products data specification. See the Products Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		/// <summary>
		/// The ID of the product for which status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatusDataQualityIssue
	{
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fetchStatus")]
		public string FetchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueOnLandingPage")]
		public string ValueOnLandingPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueProvided")]
		public string ValueProvided { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatusDestinationStatus
	{
		
		/// <summary>
		/// Whether the approval status might change due to further processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalPending")]
		public System.Nullable<System.Boolean> ApprovalPending { get; set; }
		
		/// <summary>
		/// The destination's approval status. Acceptable values are: - "`approved`" - "`disapproved`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalStatus")]
		public string ApprovalStatus { get; set; }
		
		/// <summary>
		/// The name of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Provided for backward compatibility only. Always set to "required". Acceptable values are: - "`default`" - "`excluded`" - "`optional`" - "`required`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intention")]
		public string Intention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatusItemLevelIssue
	{
		
		/// <summary>
		/// The attribute's name, if the issue is caused by a single attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The error code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A short issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The destination the issue applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// A detailed issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help with resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Whether the issue can be resolved by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// How this issue affects serving of the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servability")]
		public string Servability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch products request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`delete`" - "`get`" - "`insert`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		///  Required product attributes are primarily defined by the products data specification. See the Products Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		/// <summary>
		/// The ID of the product to get or delete. Only defined if the method is `get` or `delete`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#productsCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch products response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		///  Required product attributes are primarily defined by the products data specification. See the Products Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#productsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Product[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductstatusesCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch productstatuses request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeAttributes")]
		public System.Nullable<System.Boolean> IncludeAttributes { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The ID of the product whose status to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductstatusesCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#productstatusesCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch productstatuses response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productstatusesCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The status of a product, i.e., information about a product computed asynchronously.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productStatus")]
		public ProductStatus ProductStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#productstatusesListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of products statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ProductStatus[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RateGroup
	{
		
		/// <summary>
		/// A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableShippingLabels")]
		public string[] ApplicableShippingLabels { get; set; }
		
		/// <summary>
		/// A list of carrier rates that can be referred to by `mainTable` or `singleValue`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierRates")]
		public CarrierRate[] CarrierRates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainTable")]
		public Table MainTable { get; set; }
		
		/// <summary>
		/// Name of the rate group. Optional. If set has to be unique within shipping service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The single value of a rate group or the value of a rate group table's cell. Exactly one of `noShipping`, `flatRate`, `pricePercentage`, `carrierRateName`, `subtableName` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleValue")]
		public Value SingleValue { get; set; }
		
		/// <summary>
		/// A list of subtables referred to by `mainTable`. Can only be set if `mainTable` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtables")]
		public Table[] Subtables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Table
	{
		
		/// <summary>
		/// A non-empty list of row or column headers for a table. Exactly one of `prices`, `weights`, `numItems`, `postalCodeGroupNames`, or `location` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnHeaders")]
		public Headers ColumnHeaders { get; set; }
		
		/// <summary>
		/// Name of the table. Required for subtables, ignored for the main table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A non-empty list of row or column headers for a table. Exactly one of `prices`, `weights`, `numItems`, `postalCodeGroupNames`, or `location` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowHeaders")]
		public Headers RowHeaders { get; set; }
		
		/// <summary>
		/// The list of rows that constitute the table. Must have the same length as `rowHeaders`. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		/// <summary>
		/// The list of cells that constitute the row. Must have the same length as `columnHeaders` for two-dimensional tables, a length of 1 for one-dimensional tables. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public Value[] Cells { get; set; }
	}
	
	/// <summary>
	/// The single value of a rate group or the value of a rate group table's cell. Exactly one of `noShipping`, `flatRate`, `pricePercentage`, `carrierRateName`, `subtableName` must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Value
	{
		
		/// <summary>
		/// The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierRateName")]
		public string CarrierRateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flatRate")]
		public Price FlatRate { get; set; }
		
		/// <summary>
		/// If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noShipping")]
		public System.Nullable<System.Boolean> NoShipping { get; set; }
		
		/// <summary>
		/// A percentage of the price represented as a number in decimal notation (e.g., `"5.4"`). Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricePercentage")]
		public string PricePercentage { get; set; }
		
		/// <summary>
		/// The name of a subtable. Can only be set in table cells (i.e., not for single values), and only if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtableName")]
		public string SubtableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Service
	{
		
		/// <summary>
		/// A boolean exposing the active status of the shipping service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The CLDR territory code of the country to which the service applies. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCountry")]
		public string DeliveryCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryTime")]
		public DeliveryTime DeliveryTime { get; set; }
		
		/// <summary>
		/// Eligibility for this service. Acceptable values are: - "`All scenarios`" - "`All scenarios except Shopping Actions`" - "`Shopping Actions`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibility")]
		public string Eligibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumOrderValue")]
		public Price MinimumOrderValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumOrderValueTable")]
		public MinimumOrderValueTable MinimumOrderValueTable { get; set; }
		
		/// <summary>
		/// Free-form name of the service. Must be unique within target account. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickupService")]
		public PickupCarrierService PickupService { get; set; }
		
		/// <summary>
		/// Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means "everything else". The other `applicableShippingLabels` must not overlap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateGroups")]
		public RateGroup[] RateGroups { get; set; }
		
		/// <summary>
		/// Type of locations this service ships orders to. Acceptable values are: - "`delivery`" - "`pickup`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentType")]
		public string ShipmentType { get; set; }
	}
	
	/// <summary>
	/// The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingSettings
	{
		
		/// <summary>
		/// The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of postal code groups that can be referred to in `services`. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeGroups")]
		public PostalCodeGroup[] PostalCodeGroups { get; set; }
		
		/// <summary>
		/// The target account's list of services. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Service[] Services { get; set; }
		
		/// <summary>
		/// Optional. A list of warehouses which can be referred to in `services`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouses")]
		public Warehouse[] Warehouses { get; set; }
	}
	
	/// <summary>
	/// A fulfillment warehouse, which stores and handles inventory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Warehouse
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessDayConfig")]
		public BusinessDayConfig BusinessDayConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cutoffTime")]
		public WarehouseCutoffTime CutoffTime { get; set; }
		
		/// <summary>
		/// Required. The number of days it takes for this warehouse to pack up and ship an item. This is on the warehouse level, but can be overridden on the offer level based on the attributes of an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handlingDays")]
		public string HandlingDays { get; set; }
		
		/// <summary>
		/// Required. The name of the warehouse. Must be unique within account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WarehouseCutoffTime
	{
		
		/// <summary>
		/// Required. Hour (24-hour clock) of the cutoff time until which an order has to be placed to be processed in the same day by the warehouse. Hour is based on the timezone of warehouse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.Int32> Hour { get; set; }
		
		/// <summary>
		/// Required. Minute of the cutoff time until which an order has to be placed to be processed in the same day by the warehouse. Minute is based on the timezone of warehouse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ShippingsettingsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch shippingsettings request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the account for which to get/update account shipping settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingSettings")]
		public ShippingSettings ShippingSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ShippingsettingsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsCustomBatchResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch shipping settings response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingSettings")]
		public ShippingSettings ShippingSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsGetSupportedCarriersResponse
	{
		
		/// <summary>
		/// A list of supported carriers. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carriers")]
		public CarriersCarrier[] Carriers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsGetSupportedCarriersResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsGetSupportedHolidaysResponse
	{
		
		/// <summary>
		/// A list of holidays applicable for delivery guarantees. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidays")]
		public HolidaysHoliday[] Holidays { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsGetSupportedHolidaysResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsGetSupportedPickupServicesResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsGetSupportedPickupServicesResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A list of supported pickup services. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupServices")]
		public PickupServicesPickupService[] PickupServices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "content#shippingsettingsListResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of shipping settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ShippingSettings[] Resources { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns information about the authenticated user.
		/// Content_accounts_authinfo accounts/authinfo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountsAuthInfoResponse> Content_accounts_authinfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/authinfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountsAuthInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
		/// Content_accounts_custombatch accounts/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsCustomBatchResponse> Content_accounts_custombatchAsync(bool dryRun, AccountsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountsCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves multiple Merchant Center account statuses in a single request.
		/// Content_accountstatuses_custombatch accountstatuses/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountstatusesCustomBatchResponse> Content_accountstatuses_custombatchAsync(AccountstatusesCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accountstatuses/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountstatusesCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves and updates tax settings of multiple accounts in a single request.
		/// Content_accounttax_custombatch accounttax/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<AccounttaxCustomBatchResponse> Content_accounttax_custombatchAsync(bool dryRun, AccounttaxCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounttax/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccounttaxCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
		/// Content_datafeeds_custombatch datafeeds/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedsCustomBatchResponse> Content_datafeeds_custombatchAsync(bool dryRun, DatafeedsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datafeeds/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatafeedsCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets multiple Merchant Center datafeed statuses in a single request.
		/// Content_datafeedstatuses_custombatch datafeedstatuses/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DatafeedstatusesCustomBatchResponse> Content_datafeedstatuses_custombatchAsync(DatafeedstatusesCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datafeedstatuses/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatafeedstatusesCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves and/or updates the LIA settings of multiple accounts in a single request.
		/// Content_liasettings_custombatch liasettings/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsCustomBatchResponse> Content_liasettings_custombatchAsync(bool dryRun, LiasettingsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "liasettings/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of POS data providers that have active settings for the all eiligible countries.
		/// Content_liasettings_listposdataproviders liasettings/posdataproviders
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsListPosDataProvidersResponse> Content_liasettings_listposdataprovidersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "liasettings/posdataproviders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsListPosDataProvidersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves or modifies multiple orders in a single request.
		/// Content_orders_custombatch orders/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<OrdersCustomBatchResponse> Content_orders_custombatchAsync(OrdersCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batches multiple POS-related calls in a single request.
		/// Content_pos_custombatch pos/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<PosCustomBatchResponse> Content_pos_custombatchAsync(bool dryRun, PosCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PosCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves, inserts, and deletes multiple products in a single request.
		/// Content_products_custombatch products/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<ProductsCustomBatchResponse> Content_products_custombatchAsync(bool dryRun, ProductsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductsCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the statuses of multiple products in a single request.
		/// Content_productstatuses_custombatch productstatuses/batch
		/// </summary>
		/// <param name="includeAttributes">Flag to include full product data in the results of this request. The default value is false.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductstatusesCustomBatchResponse> Content_productstatuses_custombatchAsync(bool includeAttributes, ProductstatusesCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "productstatuses/batch?includeAttributes="+includeAttributes;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductstatusesCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves and updates the shipping settings of multiple accounts in a single request.
		/// Content_shippingsettings_custombatch shippingsettings/batch
		/// </summary>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsCustomBatchResponse> Content_shippingsettings_custombatchAsync(bool dryRun, ShippingsettingsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shippingsettings/batch?dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingsettingsCustomBatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the sub-accounts in your Merchant Center account.
		/// Content_accounts_list {merchantId}/accounts
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of accounts to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsListResponse> Content_accounts_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Merchant Center sub-account.
		/// Content_accounts_insert {merchantId}/accounts
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Content_accounts_insertAsync(string merchantId, bool dryRun, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Merchant Center sub-account.
		/// Content_accounts_delete {merchantId}/accounts/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account, and accountId must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <param name="force">Flag to delete sub-accounts with products. The default value is false.</param>
		/// <returns>Successful response</returns>
		public async Task Content_accounts_deleteAsync(string merchantId, string accountId, bool dryRun, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&dryRun="+dryRun+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a Merchant Center account.
		/// Content_accounts_get {merchantId}/accounts/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Content_accounts_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
		/// Content_accounts_update {merchantId}/accounts/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Content_accounts_updateAsync(string merchantId, string accountId, bool dryRun, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Claims the website of a Merchant Center sub-account.
		/// Content_accounts_claimwebsite {merchantId}/accounts/{accountId}/claimwebsite
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account whose website is claimed.</param>
		/// <param name="overwrite">Only available to selected merchants. When set to `True`, this flag removes any existing claim on the requested website by another account and replaces it with a claim from this account.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsClaimWebsiteResponse> Content_accounts_claimwebsiteAsync(string merchantId, string accountId, bool overwrite, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/claimwebsite&overwrite="+overwrite;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountsClaimWebsiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
		/// Content_accounts_link {merchantId}/accounts/{accountId}/link
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account that should be linked.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsLinkResponse> Content_accounts_linkAsync(string merchantId, string accountId, AccountsLinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/link";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountsLinkResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the statuses of the sub-accounts in your Merchant Center account.
		/// Content_accountstatuses_list {merchantId}/accountstatuses
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <param name="maxResults">The maximum number of account statuses to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountstatusesListResponse> Content_accountstatuses_listAsync(string merchantId, string[] destinations, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accountstatuses&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountstatusesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts.
		/// Content_accountstatuses_get {merchantId}/accountstatuses/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountStatus> Content_accountstatuses_getAsync(string merchantId, string accountId, string[] destinations, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accountstatuses/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tax settings of the sub-accounts in your Merchant Center account.
		/// Content_accounttax_list {merchantId}/accounttax
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of tax settings to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccounttaxListResponse> Content_accounttax_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounttax&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccounttaxListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the tax settings of the account.
		/// Content_accounttax_get {merchantId}/accounttax/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update account tax settings.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountTax> Content_accounttax_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounttax/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountTax>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the tax settings of the account. Any fields that are not provided are deleted from the resource.
		/// Content_accounttax_update {merchantId}/accounttax/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update account tax settings.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<AccountTax> Content_accounttax_updateAsync(string merchantId, string accountId, bool dryRun, AccountTax requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounttax/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountTax>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the configurations for datafeeds in your Merchant Center account.
		/// Content_datafeeds_list {merchantId}/datafeeds
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeeds. This account cannot be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of products to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedsListResponse> Content_datafeeds_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatafeedsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers a datafeed configuration with your Merchant Center account.
		/// Content_datafeeds_insert {merchantId}/datafeeds
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<Datafeed> Content_datafeeds_insertAsync(string merchantId, bool dryRun, Datafeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Datafeed>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a datafeed configuration from your Merchant Center account.
		/// Content_datafeeds_delete {merchantId}/datafeeds/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task Content_datafeeds_deleteAsync(string merchantId, string datafeedId, bool dryRun, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a datafeed configuration from your Merchant Center account.
		/// Content_datafeeds_get {merchantId}/datafeeds/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <returns>Successful response</returns>
		public async Task<Datafeed> Content_datafeeds_getAsync(string merchantId, string datafeedId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Datafeed>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.
		/// Content_datafeeds_update {merchantId}/datafeeds/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<Datafeed> Content_datafeeds_updateAsync(string merchantId, string datafeedId, bool dryRun, Datafeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Datafeed>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the Products service to update your product data.
		/// Content_datafeeds_fetchnow {merchantId}/datafeeds/{datafeedId}/fetchNow
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed to be fetched.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedsFetchNowResponse> Content_datafeeds_fetchnowAsync(string merchantId, string datafeedId, bool dryRun, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId))+"/fetchNow&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatafeedsFetchNowResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the statuses of the datafeeds in your Merchant Center account.
		/// Content_datafeedstatuses_list {merchantId}/datafeedstatuses
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeeds. This account cannot be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of products to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedstatusesListResponse> Content_datafeedstatuses_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeedstatuses&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatafeedstatusesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the status of a datafeed from your Merchant Center account.
		/// Content_datafeedstatuses_get {merchantId}/datafeedstatuses/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <param name="country">The country for which to get the datafeed status. If this parameter is provided then language must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.</param>
		/// <param name="language">The language for which to get the datafeed status. If this parameter is provided then country must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedStatus> Content_datafeedstatuses_getAsync(string merchantId, string datafeedId, string country, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeedstatuses/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatafeedStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the LIA settings of the sub-accounts in your Merchant Center account.
		/// Content_liasettings_list {merchantId}/liasettings
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of LIA settings to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsListResponse> Content_liasettings_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the LIA settings of the account.
		/// Content_liasettings_get {merchantId}/liasettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get or update LIA settings.</param>
		/// <returns>Successful response</returns>
		public async Task<LiaSettings> Content_liasettings_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiaSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.
		/// Content_liasettings_update {merchantId}/liasettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get or update LIA settings.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<LiaSettings> Content_liasettings_updateAsync(string merchantId, string accountId, bool dryRun, LiaSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiaSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the list of accessible Google My Business accounts.
		/// Content_liasettings_getaccessiblegmbaccounts {merchantId}/liasettings/{accountId}/accessiblegmbaccounts
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to retrieve accessible Google My Business accounts.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsGetAccessibleGmbAccountsResponse> Content_liasettings_getaccessiblegmbaccountsAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/accessiblegmbaccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsGetAccessibleGmbAccountsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests access to a specified Google My Business account.
		/// Content_liasettings_requestgmbaccess {merchantId}/liasettings/{accountId}/requestgmbaccess
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which GMB access is requested.</param>
		/// <param name="gmbEmail">The email of the Google My Business account.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsRequestGmbAccessResponse> Content_liasettings_requestgmbaccessAsync(string merchantId, string accountId, string gmbEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/requestgmbaccess&gmbEmail=" + (gmbEmail==null? "" : System.Uri.EscapeDataString(gmbEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsRequestGmbAccessResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests inventory validation for the specified country.
		/// Content_liasettings_requestinventoryverification {merchantId}/liasettings/{accountId}/requestinventoryverification/{country}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="country">The country for which inventory validation is requested.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsRequestInventoryVerificationResponse> Content_liasettings_requestinventoryverificationAsync(string merchantId, string accountId, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/requestinventoryverification/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsRequestInventoryVerificationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the inventory verification contract for the specified country.
		/// Content_liasettings_setinventoryverificationcontact {merchantId}/liasettings/{accountId}/setinventoryverificationcontact
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="country">The country for which inventory verification is requested.</param>
		/// <param name="language">The language for which inventory verification is requested.</param>
		/// <param name="contactName">The name of the inventory verification contact.</param>
		/// <param name="contactEmail">The email of the inventory verification contact.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsSetInventoryVerificationContactResponse> Content_liasettings_setinventoryverificationcontactAsync(string merchantId, string accountId, string country, string language, string contactName, string contactEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/setinventoryverificationcontact&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&contactName=" + (contactName==null? "" : System.Uri.EscapeDataString(contactName))+"&contactEmail=" + (contactEmail==null? "" : System.Uri.EscapeDataString(contactEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsSetInventoryVerificationContactResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the POS data provider for the specified country.
		/// Content_liasettings_setposdataprovider {merchantId}/liasettings/{accountId}/setposdataprovider
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to retrieve accessible Google My Business accounts.</param>
		/// <param name="country">The country for which the POS data provider is selected.</param>
		/// <param name="posDataProviderId">The ID of POS data provider.</param>
		/// <param name="posExternalAccountId">The account ID by which this merchant is known to the POS data provider.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsSetPosDataProviderResponse> Content_liasettings_setposdataproviderAsync(string merchantId, string accountId, string country, string posDataProviderId, string posExternalAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/setposdataprovider&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&posDataProviderId=" + (posDataProviderId==null? "" : System.Uri.EscapeDataString(posDataProviderId))+"&posExternalAccountId=" + (posExternalAccountId==null? "" : System.Uri.EscapeDataString(posExternalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LiasettingsSetPosDataProviderResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice enabled orders.
		/// Content_orderinvoices_createchargeinvoice {merchantId}/orderinvoices/{orderId}/createChargeInvoice
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderinvoicesCreateChargeInvoiceResponse> Content_orderinvoices_createchargeinvoiceAsync(string merchantId, string orderId, OrderinvoicesCreateChargeInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderinvoices/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/createChargeInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrderinvoicesCreateChargeInvoiceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice enabled orders. This can only be used for line items that have previously been charged using `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the previous invoice.
		/// Content_orderinvoices_createrefundinvoice {merchantId}/orderinvoices/{orderId}/createRefundInvoice
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderinvoicesCreateRefundInvoiceResponse> Content_orderinvoices_createrefundinvoiceAsync(string merchantId, string orderId, OrderinvoicesCreateRefundInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderinvoices/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/createRefundInvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrderinvoicesCreateRefundInvoiceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report for disbursements from your Merchant Center account.
		/// Content_orderreports_listdisbursements {merchantId}/orderreports/disbursements
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="disbursementEndDate">The last date which disbursements occurred. In ISO 8601 format. Default: current date.</param>
		/// <param name="disbursementStartDate">The first date which disbursements occurred. In ISO 8601 format.</param>
		/// <param name="maxResults">The maximum number of disbursements to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreportsListDisbursementsResponse> Content_orderreports_listdisbursementsAsync(string merchantId, string disbursementEndDate, string disbursementStartDate, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreports/disbursements&disbursementEndDate=" + (disbursementEndDate==null? "" : System.Uri.EscapeDataString(disbursementEndDate))+"&disbursementStartDate=" + (disbursementStartDate==null? "" : System.Uri.EscapeDataString(disbursementStartDate))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrderreportsListDisbursementsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of transactions for a disbursement from your Merchant Center account.
		/// Content_orderreports_listtransactions {merchantId}/orderreports/disbursements/{disbursementId}/transactions
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="disbursementId">The Google-provided ID of the disbursement (found in Wallet).</param>
		/// <param name="maxResults">The maximum number of disbursements to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="transactionEndDate">The last date in which transaction occurred. In ISO 8601 format. Default: current date.</param>
		/// <param name="transactionStartDate">The first date in which transaction occurred. In ISO 8601 format.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreportsListTransactionsResponse> Content_orderreports_listtransactionsAsync(string merchantId, string disbursementId, int maxResults, string pageToken, string transactionEndDate, string transactionStartDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreports/disbursements/"+ (disbursementId==null? "" : System.Uri.EscapeDataString(disbursementId))+"/transactions&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&transactionEndDate=" + (transactionEndDate==null? "" : System.Uri.EscapeDataString(transactionEndDate))+"&transactionStartDate=" + (transactionStartDate==null? "" : System.Uri.EscapeDataString(transactionStartDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrderreportsListTransactionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists order returns in your Merchant Center account.
		/// Content_orderreturns_list {merchantId}/orderreturns
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="createdEndDate">Obtains order returns created before this date (inclusively), in ISO 8601 format.</param>
		/// <param name="createdStartDate">Obtains order returns created after this date (inclusively), in ISO 8601 format.</param>
		/// <param name="maxResults">The maximum number of order returns to return in the response, used for paging. The default value is 25 returns per page, and the maximum allowed value is 250 returns per page.</param>
		/// <param name="orderBy">Return the results in the specified order.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreturnsListResponse> Content_orderreturns_listAsync(string merchantId, string createdEndDate, string createdStartDate, int maxResults, Content_orderreturns_listOrderBy orderBy, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns&createdEndDate=" + (createdEndDate==null? "" : System.Uri.EscapeDataString(createdEndDate))+"&createdStartDate=" + (createdStartDate==null? "" : System.Uri.EscapeDataString(createdStartDate))+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrderreturnsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an order return from your Merchant Center account.
		/// Content_orderreturns_get {merchantId}/orderreturns/{returnId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="returnId">Merchant order return ID generated by Google.</param>
		/// <returns>Successful response</returns>
		public async Task<MerchantOrderReturn> Content_orderreturns_getAsync(string merchantId, string returnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns/"+ (returnId==null? "" : System.Uri.EscapeDataString(returnId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MerchantOrderReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the orders in your Merchant Center account.
		/// Content_orders_list {merchantId}/orders
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="acknowledged">Obtains orders that match the acknowledgement status. When set to true, obtains orders that have been acknowledged. When false, obtains orders that have not been acknowledged. We recommend using this filter set to `false`, in conjunction with the `acknowledge` call, such that only un-acknowledged orders are returned. </param>
		/// <param name="maxResults">The maximum number of orders to return in the response, used for paging. The default value is 25 orders per page, and the maximum allowed value is 250 orders per page.</param>
		/// <param name="orderBy">Order results by placement date in descending or ascending order. Acceptable values are: - placedDateAsc - placedDateDesc </param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="placedDateEnd">Obtains orders placed before this date (exclusively), in ISO 8601 format.</param>
		/// <param name="placedDateStart">Obtains orders placed after this date (inclusively), in ISO 8601 format.</param>
		/// <param name="statuses">Obtains orders that match any of the specified statuses. Please note that `active` is a shortcut for `pendingShipment` and `partiallyShipped`, and `completed` is a shortcut for `shipped`, `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`, and `canceled`.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersListResponse> Content_orders_listAsync(string merchantId, bool acknowledged, int maxResults, string orderBy, string pageToken, string placedDateEnd, string placedDateStart, string[] statuses, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders&acknowledged="+acknowledged+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&placedDateEnd=" + (placedDateEnd==null? "" : System.Uri.EscapeDataString(placedDateEnd))+"&placedDateStart=" + (placedDateStart==null? "" : System.Uri.EscapeDataString(placedDateStart))+"&"+string.Join("&", statuses.Select(z => $"statuses={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an order from your Merchant Center account.
		/// Content_orders_get {merchantId}/orders/{orderId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<Order> Content_orders_getAsync(string merchantId, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Order>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marks an order as acknowledged.
		/// Content_orders_acknowledge {merchantId}/orders/{orderId}/acknowledge
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersAcknowledgeResponse> Content_orders_acknowledgeAsync(string merchantId, string orderId, OrdersAcknowledgeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/acknowledge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersAcknowledgeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels all line items in an order, making a full refund.
		/// Content_orders_cancel {merchantId}/orders/{orderId}/cancel
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order to cancel.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCancelResponse> Content_orders_cancelAsync(string merchantId, string orderId, OrdersCancelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersCancelResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a line item, making a full refund.
		/// Content_orders_cancellineitem {merchantId}/orders/{orderId}/cancelLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCancelLineItemResponse> Content_orders_cancellineitemAsync(string merchantId, string orderId, OrdersCancelLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancelLineItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersCancelLineItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (e.g. cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding via Google then via an in-store return.
		/// Content_orders_instorerefundlineitem {merchantId}/orders/{orderId}/inStoreRefundLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersInStoreRefundLineItemResponse> Content_orders_instorerefundlineitemAsync(string merchantId, string orderId, OrdersInStoreRefundLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/inStoreRefundLineItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersInStoreRefundLineItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated, please use returnRefundLineItem instead.
		/// Content_orders_refund {merchantId}/orders/{orderId}/refund
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order to refund.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersRefundResponse> Content_orders_refundAsync(string merchantId, string orderId, OrdersRefundRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/refund";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersRefundResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects return on an line item.
		/// Content_orders_rejectreturnlineitem {merchantId}/orders/{orderId}/rejectReturnLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersRejectReturnLineItemResponse> Content_orders_rejectreturnlineitemAsync(string merchantId, string orderId, OrdersRejectReturnLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/rejectReturnLineItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersRejectReturnLineItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a line item.
		/// Content_orders_returnlineitem {merchantId}/orders/{orderId}/returnLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersReturnLineItemResponse> Content_orders_returnlineitemAsync(string merchantId, string orderId, OrdersReturnLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/returnLineItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersReturnLineItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns and refunds a line item. Note that this method can only be called on fully shipped orders. Please also note that the Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund.
		/// Content_orders_returnrefundlineitem {merchantId}/orders/{orderId}/returnRefundLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersReturnRefundLineItemResponse> Content_orders_returnrefundlineitemAsync(string merchantId, string orderId, OrdersReturnRefundLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/returnRefundLineItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersReturnRefundLineItemResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
		/// Content_orders_setlineitemmetadata {merchantId}/orders/{orderId}/setLineItemMetadata
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersSetLineItemMetadataResponse> Content_orders_setlineitemmetadataAsync(string merchantId, string orderId, OrdersSetLineItemMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/setLineItemMetadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersSetLineItemMetadataResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marks line item(s) as shipped.
		/// Content_orders_shiplineitems {merchantId}/orders/{orderId}/shipLineItems
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersShipLineItemsResponse> Content_orders_shiplineitemsAsync(string merchantId, string orderId, OrdersShipLineItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/shipLineItems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersShipLineItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sandbox only. Creates a test return.
		/// Content_orders_createtestreturn {merchantId}/orders/{orderId}/testreturn
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCreateTestReturnResponse> Content_orders_createtestreturnAsync(string merchantId, string orderId, OrdersCreateTestReturnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/testreturn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersCreateTestReturnResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates ship by and delivery by dates for a line item.
		/// Content_orders_updatelineitemshippingdetails {merchantId}/orders/{orderId}/updateLineItemShippingDetails
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersUpdateLineItemShippingDetailsResponse> Content_orders_updatelineitemshippingdetailsAsync(string merchantId, string orderId, OrdersUpdateLineItemShippingDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/updateLineItemShippingDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersUpdateLineItemShippingDetailsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the merchant order ID for a given order.
		/// Content_orders_updatemerchantorderid {merchantId}/orders/{orderId}/updateMerchantOrderId
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersUpdateMerchantOrderIdResponse> Content_orders_updatemerchantorderidAsync(string merchantId, string orderId, OrdersUpdateMerchantOrderIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/updateMerchantOrderId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersUpdateMerchantOrderIdResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a shipment's status, carrier, and/or tracking ID.
		/// Content_orders_updateshipment {merchantId}/orders/{orderId}/updateShipment
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersUpdateShipmentResponse> Content_orders_updateshipmentAsync(string merchantId, string orderId, OrdersUpdateShipmentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/updateShipment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersUpdateShipmentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an order using merchant order ID.
		/// Content_orders_getbymerchantorderid {merchantId}/ordersbymerchantid/{merchantOrderId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="merchantOrderId">The merchant order ID to be looked for.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersGetByMerchantOrderIdResponse> Content_orders_getbymerchantorderidAsync(string merchantId, string merchantOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/ordersbymerchantid/"+ (merchantOrderId==null? "" : System.Uri.EscapeDataString(merchantOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersGetByMerchantOrderIdResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit inventory for the given merchant.
		/// Content_pos_inventory {merchantId}/pos/{targetMerchantId}/inventory
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<PosInventoryResponse> Content_pos_inventoryAsync(string merchantId, string targetMerchantId, bool dryRun, PosInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/inventory&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PosInventoryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a sale event for the given merchant.
		/// Content_pos_sale {merchantId}/pos/{targetMerchantId}/sale
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<PosSaleResponse> Content_pos_saleAsync(string merchantId, string targetMerchantId, bool dryRun, PosSaleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/sale&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PosSaleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the stores of the target merchant.
		/// Content_pos_list {merchantId}/pos/{targetMerchantId}/store
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosListResponse> Content_pos_listAsync(string merchantId, string targetMerchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PosListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a store for the given merchant.
		/// Content_pos_insert {merchantId}/pos/{targetMerchantId}/store
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<PosStore> Content_pos_insertAsync(string merchantId, string targetMerchantId, bool dryRun, PosStore requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PosStore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a store for the given merchant.
		/// Content_pos_delete {merchantId}/pos/{targetMerchantId}/store/{storeCode}
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="storeCode">A store code that is unique per merchant.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task Content_pos_deleteAsync(string merchantId, string targetMerchantId, string storeCode, bool dryRun, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store/"+ (storeCode==null? "" : System.Uri.EscapeDataString(storeCode))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the given store.
		/// Content_pos_get {merchantId}/pos/{targetMerchantId}/store/{storeCode}
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="storeCode">A store code that is unique per merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosStore> Content_pos_getAsync(string merchantId, string targetMerchantId, string storeCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store/"+ (storeCode==null? "" : System.Uri.EscapeDataString(storeCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PosStore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested.
		/// Content_products_list {merchantId}/products
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the products. This account cannot be a multi-client account.</param>
		/// <param name="includeInvalidInsertedItems">Flag to include the invalid inserted items in the result of the list request. By default the invalid items are not shown (the default value is false).</param>
		/// <param name="maxResults">The maximum number of products to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductsListResponse> Content_products_listAsync(string merchantId, bool includeInvalidInsertedItems, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products&includeInvalidInsertedItems="+includeInvalidInsertedItems+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry.
		/// Content_products_insert {merchantId}/products
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Content_products_insertAsync(string merchantId, bool dryRun, Product requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Product>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a product from your Merchant Center account.
		/// Content_products_delete {merchantId}/products/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task Content_products_deleteAsync(string merchantId, string productId, bool dryRun, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a product from your Merchant Center account.
		/// Content_products_get {merchantId}/products/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product.</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Content_products_getAsync(string merchantId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Product>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the statuses of the products in your Merchant Center account.
		/// Content_productstatuses_list {merchantId}/productstatuses
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the products. This account cannot be a multi-client account.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <param name="includeAttributes">Flag to include full product data in the results of the list request. The default value is false.</param>
		/// <param name="includeInvalidInsertedItems">Flag to include the invalid inserted items in the result of the list request. By default the invalid items are not shown (the default value is false).</param>
		/// <param name="maxResults">The maximum number of product statuses to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductstatusesListResponse> Content_productstatuses_listAsync(string merchantId, string[] destinations, bool includeAttributes, bool includeInvalidInsertedItems, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productstatuses&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"))+"&includeAttributes="+includeAttributes+"&includeInvalidInsertedItems="+includeInvalidInsertedItems+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductstatusesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the status of a product from your Merchant Center account.
		/// Content_productstatuses_get {merchantId}/productstatuses/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <param name="includeAttributes">Flag to include full product data in the result of this get request. The default value is false.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductStatus> Content_productstatuses_getAsync(string merchantId, string productId, string[] destinations, bool includeAttributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productstatuses/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"))+"&includeAttributes="+includeAttributes;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the shipping settings of the sub-accounts in your Merchant Center account.
		/// Content_shippingsettings_list {merchantId}/shippingsettings
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of shipping settings to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsListResponse> Content_shippingsettings_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shippingsettings&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingsettingsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the shipping settings of the account.
		/// Content_shippingsettings_get {merchantId}/shippingsettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update shipping settings.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingSettings> Content_shippingsettings_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shippingsettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource.
		/// Content_shippingsettings_update {merchantId}/shippingsettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update shipping settings.</param>
		/// <param name="dryRun">Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingSettings> Content_shippingsettings_updateAsync(string merchantId, string accountId, bool dryRun, ShippingSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shippingsettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&dryRun="+dryRun;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves supported carriers and carrier services for an account.
		/// Content_shippingsettings_getsupportedcarriers {merchantId}/supportedCarriers
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to retrieve the supported carriers.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsGetSupportedCarriersResponse> Content_shippingsettings_getsupportedcarriersAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/supportedCarriers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingsettingsGetSupportedCarriersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves supported holidays for an account.
		/// Content_shippingsettings_getsupportedholidays {merchantId}/supportedHolidays
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to retrieve the supported holidays.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsGetSupportedHolidaysResponse> Content_shippingsettings_getsupportedholidaysAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/supportedHolidays";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingsettingsGetSupportedHolidaysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves supported pickup services for an account.
		/// Content_shippingsettings_getsupportedpickupservices {merchantId}/supportedPickupServices
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to retrieve the supported pickup services.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsGetSupportedPickupServicesResponse> Content_shippingsettings_getsupportedpickupservicesAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/supportedPickupServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShippingsettingsGetSupportedPickupServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sandbox only. Creates a test order.
		/// Content_orders_createtestorder {merchantId}/testorders
		/// </summary>
		/// <param name="merchantId">The ID of the account that should manage the order. This cannot be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCreateTestOrderResponse> Content_orders_createtestorderAsync(string merchantId, OrdersCreateTestOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testorders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersCreateTestOrderResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`".
		/// Content_orders_advancetestorder {merchantId}/testorders/{orderId}/advance
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the test order to modify.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersAdvanceTestOrderResponse> Content_orders_advancetestorderAsync(string merchantId, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testorders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/advance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersAdvanceTestOrderResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sandbox only. Cancels a test order for customer-initiated cancellation.
		/// Content_orders_canceltestorderbycustomer {merchantId}/testorders/{orderId}/cancelByCustomer
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the test order to cancel.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCancelTestOrderByCustomerResponse> Content_orders_canceltestorderbycustomerAsync(string merchantId, string orderId, OrdersCancelTestOrderByCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testorders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancelByCustomer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersCancelTestOrderByCustomerResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox.
		/// Content_orders_gettestordertemplate {merchantId}/testordertemplates/{templateName}
		/// </summary>
		/// <param name="merchantId">The ID of the account that should manage the order. This cannot be a multi-client account.</param>
		/// <param name="templateName">The name of the template to retrieve.</param>
		/// <param name="country">The country of the template to retrieve. Defaults to `US`.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersGetTestOrderTemplateResponse> Content_orders_gettestordertemplateAsync(string merchantId, Content_orders_gettestordertemplateTemplateName templateName, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testordertemplates/"+templateName+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OrdersGetTestOrderTemplateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Content_orderreturns_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN_CREATION_TIME_DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN_CREATION_TIME_ASC = 1,
	}
	
	public enum Content_orders_gettestordertemplateTemplateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE1A = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE1B = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE3 = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
