//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Abschlussbelegdaten
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Abschluss-Beginn-Datum-Uhrzeit")]
		public string Abschluss_Beginn_Datum_Uhrzeit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Abschluss-Ende-Datum-Uhrzeit")]
		public string Abschluss_Ende_Datum_Uhrzeit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrierkasseUuid")]
		public string RegistrierkasseUuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Beleg
	{
		
		[System.Runtime.Serialization.DataMember(Name="Beleg-Codes")]
		public string[] Beleg_Codes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Beleg-Typen")]
		public string[] Beleg_Typen { get; set; }
		
		/// <summary>
		/// The complete `Beleg` that has been signed by the "Signaturerstellungseinheit" and stored in the "Datenerfassungsprotokoll".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SignierteBelegdaten Belegdaten { get; set; }
		
		/// <summary>
		/// The signed `Beleg` as a JWS signature token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JWS { get; set; }
		
		/// <summary>
		/// The portion of the `JWS` token to be used for generating QR codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QR { get; set; }
		
		/// <summary>
		/// A hyperlink that retrieves the `QR` data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="QR-Link")]
		public string QR_Link { get; set; }
		
		/// <summary>
		/// The `_uuid` of the `Registrierkasse` that has issued this `Beleg`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Registrierkasse-UUID")]
		public string Registrierkasse_UUID { get; set; }
		
		/// <summary>
		/// The `_uuid` of the `Signaturerstellungseinheit` that has signed this `Beleg`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Signaturerstellungseinheit-UUID")]
		public string Signaturerstellungseinheit_UUID { get; set; }
		
		/// <summary>
		/// URL of the particular `Beleg` instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _href { get; set; }
		
		/// <summary>
		/// Unique ID of the particular `Beleg` instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _uuid { get; set; }
	}
	
	/// <summary>
	/// The complete `Beleg` that has been signed by the "Signaturerstellungseinheit" and stored in the "Datenerfassungsprotokoll".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SignierteBelegdaten
	{
		
		[System.Runtime.Serialization.DataMember(Name="Beleg-Datum-Uhrzeit")]
		public string Beleg_Datum_Uhrzeit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Belegnummer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Betrag-Brutto")]
		public System.Nullable<System.Int32> Betrag_Brutto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Betrag-Netto")]
		public System.Nullable<System.Int32> Betrag_Netto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Besonders-Brutto")]
		public System.Nullable<System.Int32> Betrag_Satz_Besonders_Brutto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Besonders-Netto")]
		public System.Nullable<System.Int32> Betrag_Satz_Besonders_Netto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Ermaessigt-1-Brutto")]
		public System.Nullable<System.Int32> Betrag_Satz_Ermaessigt_1_Brutto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Ermaessigt-1-Netto")]
		public System.Nullable<System.Int32> Betrag_Satz_Ermaessigt_1_Netto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Ermaessigt-2-Brutto")]
		public System.Nullable<System.Int32> Betrag_Satz_Ermaessigt_2_Brutto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Ermaessigt-2-Netto")]
		public System.Nullable<System.Int32> Betrag_Satz_Ermaessigt_2_Netto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Normal-Brutto")]
		public System.Nullable<System.Int32> Betrag_Satz_Normal_Brutto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Normal-Netto")]
		public System.Nullable<System.Int32> Betrag_Satz_Normal_Netto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Null-Brutto")]
		public System.Nullable<System.Int32> Betrag_Satz_Null_Brutto { get; set; }
		
		/// <summary>
		/// The total amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Betrag-Satz-Null-Netto")]
		public System.Nullable<System.Int32> Betrag_Satz_Null_Netto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Belegkreis")]
		public string Externer_Beleg_Belegkreis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Bezeichnung")]
		public string Externer_Beleg_Bezeichnung { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Referenz")]
		public string Externer_Beleg_Referenz { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Kassen-ID")]
		public string Kassen_ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Kunde { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notizen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Posten[] Posten { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rabatt[] Rabatte { get; set; }
		
		/// <summary>
		/// Storno?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Storno { get; set; }
		
		/// <summary>
		/// The `Beleg-UUID` property of the `Beleg` to be cancelled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Storno-Beleg-UUID")]
		public string Storno_Beleg_UUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Storno-Text")]
		public string Storno_Text { get; set; }
		
		/// <summary>
		/// Training?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Training { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Adresse1")]
		public string Unternehmen_Adresse1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Adresse2")]
		public string Unternehmen_Adresse2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Fusszeile")]
		public string Unternehmen_Fusszeile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-ID")]
		public string Unternehmen_ID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-ID-Typ")]
		public System.Nullable<SignierteBelegdatenUnternehmen_ID_Typ> Unternehmen_ID_Typ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Kopfzeile")]
		public string Unternehmen_Kopfzeile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Name")]
		public string Unternehmen_Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Ort")]
		public string Unternehmen_Ort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-PLZ")]
		public string Unternehmen_PLZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Zahlung[] Zahlungen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Zertifikat-Seriennummer")]
		public string Zertifikat_Seriennummer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Posten
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bezeichnung { get; set; }
		
		/// <summary>
		/// The amount in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BruttoBetrag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Belegkreis")]
		public string Externer_Beleg_Belegkreis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Bezeichnung")]
		public string Externer_Beleg_Bezeichnung { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Referenz")]
		public string Externer_Beleg_Referenz { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Menge { get; set; }
		
		/// <summary>
		/// The amount in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NettoBetrag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PostenSatz Satz { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PostenSatz
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORMAL")]
		NORMAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERMAESSIGT1")]
		ERMAESSIGT1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERMAESSIGT2")]
		ERMAESSIGT2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BESONDERS")]
		BESONDERS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NULL")]
		NULL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rabatt
	{
		
		/// <summary>
		/// The amount in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Betrag-Brutto")]
		public int Betrag_Brutto { get; set; }
		
		/// <summary>
		/// The amount in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Betrag-Netto")]
		public int Betrag_Netto { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bezeichnung { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PostenSatz Satz { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SignierteBelegdatenUnternehmen_ID_Typ
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="steuernummer")]
		steuernummer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uid")]
		uid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gln")]
		gln = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Zahlung
	{
		
		/// <summary>
		/// The amount in cents
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Betrag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bezeichnung { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Referenz { get; set; }
	}
	
	/// <summary>
	/// The `Beleg` to be signed by the "Signaturerstellungseinheit" and stored in the "Datenerfassungsprotokoll".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Belegdaten
	{
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Belegkreis")]
		public string Externer_Beleg_Belegkreis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Bezeichnung")]
		public string Externer_Beleg_Bezeichnung { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Externer-Beleg-Referenz")]
		public string Externer_Beleg_Referenz { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Kunde { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Notizen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Posten[] Posten { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rabatt[] Rabatte { get; set; }
		
		/// <summary>
		/// Storno?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Storno { get; set; }
		
		/// <summary>
		/// The `Beleg-UUID` property of the `Beleg` to be cancelled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Storno-Beleg-UUID")]
		public string Storno_Beleg_UUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Storno-Text")]
		public string Storno_Text { get; set; }
		
		/// <summary>
		/// Training?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Training { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Adresse1")]
		public string Unternehmen_Adresse1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Adresse2")]
		public string Unternehmen_Adresse2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Fusszeile")]
		public string Unternehmen_Fusszeile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-ID")]
		public string Unternehmen_ID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-ID-Typ")]
		public SignierteBelegdatenUnternehmen_ID_Typ Unternehmen_ID_Typ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Kopfzeile")]
		public string Unternehmen_Kopfzeile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Name")]
		public string Unternehmen_Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-Ort")]
		public string Unternehmen_Ort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Unternehmen-PLZ")]
		public string Unternehmen_PLZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Zahlung[] Zahlungen { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Belege
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Belegformat
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Beleg[] Belege { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Exportformat
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Belege-Gruppe")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ExportformatBelege_Gruppe[] ExportformatBelege_Gruppe { get; set; }
	}
	
	public class ExportformatBelege_Gruppe
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Belege-kompakt")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Belege_kompakt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Signaturzertifikat { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Zertifizierungsstellen { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Monatsbeleg
	{
		
		[System.Runtime.Serialization.DataMember(Name="Beleg-UUID")]
		public string Beleg_UUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="FON-Geprueft-Datum-Uhrzeit")]
		public string FON_Geprueft_Datum_Uhrzeit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="FON-Geprueft-Erfolgreich")]
		public System.Nullable<System.Boolean> FON_Geprueft_Erfolgreich { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Jahr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Monat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Registrierkasse
	{
		
		/// <summary>
		/// The base64 encoded AES 256 key used for encrypting the "Umsatzzaehler".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Benutzerschluessel { get; set; }
		
		/// <summary>
		/// The (RKSV) "Kassenidentifikationsnummer" of this particular `Registrierkasse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Kassen-ID")]
		public string Kassen_ID { get; set; }
		
		/// <summary>
		/// The `_uuid` of the paired "Signaturerstellungseinheit".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Signaturerstellungseinheit-UUID")]
		public string Signaturerstellungseinheit_UUID { get; set; }
		
		/// <summary>
		/// URL of the particular `Registrierkasse` instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _href { get; set; }
		
		/// <summary>
		/// Unique ID of the particular `Registrierkasse` instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _uuid { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Request a JWT access token using your obono username and password.
		/// AuthGet auth
		/// </summary>
		/// <returns>The JWT `accessToken` to use for accessing secured resourced as well as the `registrierkassenUuid` of the corresponding "Registrierkasse".</returns>
		public async Task<AuthResult> AuthGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a particular `Beleg` from the "Datenerfassungsprotokoll".
		/// Belege_belegUuidGet belege/{belegUuid}
		/// </summary>
		/// <param name="belegUuid">The `_uuid` of the `Beleg` to fetch.</param>
		/// <returns>The requested `Beleg` resource.</returns>
		public async Task<Beleg> Belege_belegUuidGetAsync(string belegUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Beleg>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportCsvRegistrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfterAndPosten export/csv/registrierkassen/{registrierkasseUuid}/belege
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to export.</param>
		/// <param name="before">Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="after">Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="posten">Export `Posten` instead of `Belegdaten`.</param>
		/// <returns>The exported data of a particular `Registrierkasse` in its CSV representation.</returns>
		public async Task ExportCsvRegistrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfterAndPostenAsync(string registrierkasseUuid, string before, string after, bool posten, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/csv/registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege&before=" + (before==null? "" : System.Uri.EscapeDataString(before))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&posten="+posten;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportDep131Registrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfter export/dep131/registrierkassen/{registrierkasseUuid}/belege
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to export.</param>
		/// <param name="before">Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="after">Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <returns>The exported data of a particular `Registrierkasse` in its DEP131 / CSV representation.</returns>
		public async Task ExportDep131Registrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfterAsync(string registrierkasseUuid, string before, string after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/dep131/registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege&before=" + (before==null? "" : System.Uri.EscapeDataString(before))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportDep7Registrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfter export/dep7/registrierkassen/{registrierkasseUuid}/belege
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to export.</param>
		/// <param name="before">Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="after">Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <returns>The exported data of a particular `Registrierkasse` in its DEP7 representation.</returns>
		public async Task ExportDep7Registrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfterAsync(string registrierkasseUuid, string before, string after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/dep7/registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege&before=" + (before==null? "" : System.Uri.EscapeDataString(before))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportGobdRegistrierkassen_registrierkasseUuidGetByBeforeAndAfter export/gobd/registrierkassen/{registrierkasseUuid}
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to export.</param>
		/// <param name="before">Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="after">Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <returns>The exported data of a particular `Registrierkasse` in its GoBD representation.</returns>
		public async Task ExportGobdRegistrierkassen_registrierkasseUuidGetByBeforeAndAfterAsync(string registrierkasseUuid, string before, string after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/gobd/registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"&before=" + (before==null? "" : System.Uri.EscapeDataString(before))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportHtmlBelege_belegUuidGet export/html/belege/{belegUuid}
		/// </summary>
		/// <param name="belegUuid">The `_uuid` of a particular `Beleg` to export.</param>
		/// <returns>A particular `Beleg` in its HTML representation.</returns>
		public async Task ExportHtmlBelege_belegUuidGetAsync(string belegUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/html/belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportPdfBelege_belegUuidGet export/pdf/belege/{belegUuid}
		/// </summary>
		/// <param name="belegUuid">The `_uuid` of a particular `Beleg` to export.</param>
		/// <returns>A particular `Beleg` in its PDF representation.</returns>
		public async Task ExportPdfBelege_belegUuidGetAsync(string belegUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/pdf/belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportQrBelege_belegUuidGet export/qr/belege/{belegUuid}
		/// </summary>
		/// <param name="belegUuid">The `_uuid` of a particular `Beleg` to export.</param>
		/// <returns>The RKSV QR-Code as PNG file.</returns>
		public async Task ExportQrBelege_belegUuidGetAsync(string belegUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/qr/belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportThermal_printBelege_belegUuidGetByQrAndWidthAndDialectAndEncoding export/thermal-print/belege/{belegUuid}
		/// </summary>
		/// <param name="belegUuid">The `_uuid` of a particular `Beleg` to export.</param>
		/// <param name="qr">Should the RKSV QR code should be rendered?</param>
		/// <param name="width">Number of characters per line.</param>
		/// <param name="dialect">The thermal printer dialect.</param>
		/// <param name="encoding">The encoding of the binary data.</param>
		/// <returns>A particular `Beleg` in its ESC/POS or STAR representation.</returns>
		public async Task ExportThermal_printBelege_belegUuidGetByQrAndWidthAndDialectAndEncodingAsync(string belegUuid, bool qr, int width, ExportThermal_printBelege_belegUuidGetByQrAndWidthAndDialectAndEncodingDialect dialect, ExportThermal_printBelege_belegUuidGetByQrAndWidthAndDialectAndEncodingEncoding encoding, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/thermal-print/belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid))+"&qr="+qr+"&width="+width+"&dialect=" + dialect+"&encoding=" + encoding;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ExportXlsRegistrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfter export/xls/registrierkassen/{registrierkasseUuid}/belege
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to export.</param>
		/// <param name="before">Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="after">Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <returns>The exported data of a particular `Registrierkasse` in its Microsoft Excel representation.</returns>
		public async Task ExportXlsRegistrierkassen_registrierkasseUuidBelegeGetByBeforeAndAfterAsync(string registrierkasseUuid, string before, string after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/xls/registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege&before=" + (before==null? "" : System.Uri.EscapeDataString(before))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a particular `Registrierkasse`.
		/// Registrierkassen_registrierkasseUuidGet registrierkassen/{registrierkasseUuid}
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of a particular `Registrierkasse` to fetch.</param>
		/// <returns>Information about a particular `Registrierkasse`.</returns>
		public async Task<Registrierkasse> Registrierkassen_registrierkasseUuidGetAsync(string registrierkasseUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Registrierkasse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates an `Abschlussbeleg`.
		/// Registrierkassen_registrierkasseUuidAbschlussPost registrierkassen/{registrierkasseUuid}/abschluss
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection.</param>
		/// <param name="requestBody">An object that contains all data for a particular `Abschlussbeleg`.</param>
		public async Task Registrierkassen_registrierkasseUuidAbschlussPostAsync(string registrierkasseUuid, Abschlussbelegdaten requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/abschluss";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the `Beleg` collection from the "Datenerfassungsprotokoll".
		/// Registrierkassen_registrierkasseUuidBelegeGetByFormatAndOrderAndLimitAndOffsetAndBeforeAndAfterAndGteAndLte registrierkassen/{registrierkasseUuid}/belege
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection.</param>
		/// <param name="format">Determines the format of the `Beleg` collection.</param>
		/// <param name="order">Determines the sorting order.</param>
		/// <param name="limit">Limits the number of returned results.</param>
		/// <param name="offset">Skips the specified number of results from the result set.</param>
		/// <param name="before">Only return results that where saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="after">Only return results that where saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).</param>
		/// <param name="gte">Only return results that have at least a particular `Belegnummer`.</param>
		/// <param name="lte">Only return results that have at most a particular `Belegnummer`.</param>
		/// <returns>The `Beleg` collection from the "Datenerfassungsprotokoll".</returns>
		public async Task<Belege> Registrierkassen_registrierkasseUuidBelegeGetByFormatAndOrderAndLimitAndOffsetAndBeforeAndAfterAndGteAndLteAsync(string registrierkasseUuid, Registrierkassen_registrierkasseUuidBelegeGetByFormatAndOrderAndLimitAndOffsetAndBeforeAndAfterAndGteAndLteFormat format, Registrierkassen_registrierkasseUuidBelegeGetByFormatAndOrderAndLimitAndOffsetAndBeforeAndAfterAndGteAndLteOrder order, int limit, int offset, string before, string after, int gte, int lte, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege&format=" + format+"&order=" + order+"&limit="+limit+"&offset="+offset+"&before=" + (before==null? "" : System.Uri.EscapeDataString(before))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&gte="+gte+"&lte="+lte;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Belege>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a particular `Beleg` from the "Datenerfassungsprotokoll".
		/// Registrierkassen_registrierkasseUuidBelege_belegUuidGet registrierkassen/{registrierkasseUuid}/belege/{belegUuid}
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` that contains the requested `Beleg`.</param>
		/// <param name="belegUuid">The `_uuid` of the `Beleg` to fetch.</param>
		/// <returns>The requested `Beleg` resource.</returns>
		public async Task<Beleg> Registrierkassen_registrierkasseUuidBelege_belegUuidGetAsync(string registrierkasseUuid, string belegUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Beleg>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Signs a receipt and stores it in the "Datenerfassungsprotokoll".
		/// Registrierkassen_registrierkasseUuidBelege_belegUuidPut registrierkassen/{registrierkasseUuid}/belege/{belegUuid}
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to use for signing data.</param>
		/// <param name="belegUuid">The `_uuid` of the `Beleg` to store.</param>
		/// <param name="requestBody">An object that contains all data for a particular `Beleg` and is formatted according to RKSV "Signaturformat".</param>
		public async Task Registrierkassen_registrierkasseUuidBelege_belegUuidPutAsync(string registrierkasseUuid, string belegUuid, Belegdaten requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/belege/"+ (belegUuid==null? "" : System.Uri.EscapeDataString(belegUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates a DEP file.
		/// Registrierkassen_registrierkasseUuidDepGet registrierkassen/{registrierkasseUuid}/dep
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse` to retrieve the DEP file.</param>
		/// <returns>The DEP file.</returns>
		public async Task Registrierkassen_registrierkasseUuidDepGetAsync(string registrierkasseUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/dep";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of `Monatsbelege`.
		/// Registrierkassen_registrierkasseUuidMonatsbelegeGetByYearAndMonth registrierkassen/{registrierkasseUuid}/monatsbelege
		/// </summary>
		/// <param name="registrierkasseUuid">The `_uuid` of the `Registrierkasse`.</param>
		/// <returns>Information about `Monatsbelege`.</returns>
		public async Task<Monatsbeleg[]> Registrierkassen_registrierkasseUuidMonatsbelegeGetByYearAndMonthAsync(string registrierkasseUuid, int year, int month, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrierkassen/"+ (registrierkasseUuid==null? "" : System.Uri.EscapeDataString(registrierkasseUuid))+"/monatsbelege&year="+year+"&month="+month;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Monatsbeleg[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ExportThermal_printBelege_belegUuidGetByQrAndWidthAndDialectAndEncodingDialect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="escpos")]
		escpos = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="escposlite")]
		escposlite = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="star")]
		star = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 3,
	}
	
	public enum ExportThermal_printBelege_belegUuidGetByQrAndWidthAndDialectAndEncodingEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="raw")]
		raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="base64")]
		base64 = 1,
	}
	
	public enum Registrierkassen_registrierkasseUuidBelegeGetByFormatAndOrderAndLimitAndOffsetAndBeforeAndAfterAndGteAndLteFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="export")]
		export = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="beleg")]
		beleg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uuidlist")]
		uuidlist = 2,
	}
	
	public enum Registrierkassen_registrierkasseUuidBelegeGetByFormatAndOrderAndLimitAndOffsetAndBeforeAndAfterAndGteAndLteOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asc")]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desc")]
		desc = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
