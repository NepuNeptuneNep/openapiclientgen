//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artifact
	{
		
		[System.Runtime.Serialization.DataMember(Name="node_index")]
		public System.Nullable<System.Int32> Node_index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pretty_path")]
		public string Pretty_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Aws
	{
		
		[System.Runtime.Serialization.DataMember(Name="keypair")]
		public string Keypair { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Build
	{
		
		/// <summary>
		/// commit message body
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="build_time_millis")]
		public System.Nullable<System.Int32> Build_time_millis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="build_url")]
		public string Build_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer_email")]
		public string Committer_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer_name")]
		public string Committer_name { get; set; }
		
		/// <summary>
		/// reason why we didn't build, if we didn't build
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dont_build")]
		public string Dont_build { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycle")]
		public System.Nullable<BuildLifecycle> Lifecycle { get; set; }
		
		/// <summary>
		/// previous build
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public PreviousBuild Previous { get; set; }
		
		/// <summary>
		/// time build was queued
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queued_at")]
		public System.Nullable<System.DateTimeOffset> Queued_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reponame")]
		public string Reponame { get; set; }
		
		/// <summary>
		/// build_num of the build this is a retry of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retry_of")]
		public System.Nullable<System.Int32> Retry_of { get; set; }
		
		/// <summary>
		/// time build started
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// time build finished
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop_time")]
		public System.Nullable<System.DateTimeOffset> Stop_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcs_url")]
		public string Vcs_url { get; set; }
		
		/// <summary>
		/// short string explaining the reason we built
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="why")]
		public string Why { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BuildLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_run")]
		not_run = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_running")]
		not_running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finished")]
		finished = 5,
	}
	
	/// <summary>
	/// previous build
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PreviousBuild
	{
		
		[System.Runtime.Serialization.DataMember(Name="build_num")]
		public System.Nullable<System.Int32> Build_num { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="build_time_millis")]
		public System.Nullable<System.Int32> Build_time_millis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PreviousBuildStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PreviousBuildStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="retried")]
		retried = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infrastructure_fail")]
		infrastructure_fail = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timedout")]
		timedout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_run")]
		not_run = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_running")]
		not_running = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_tests")]
		no_tests = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 12,
	}
	
	/// <summary>
	/// previous build
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_commit_details")]
		public CommitDetail[] All_commit_details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compare")]
		public string Compare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="job_name")]
		public string Job_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="node")]
		public object Node { get; set; }
		
		/// <summary>
		/// previous build
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_successful_build")]
		public PreviousBuild Previous_successful_build { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retries")]
		public System.Nullable<System.Boolean> Retries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssh_enabled")]
		public System.Nullable<System.Boolean> Ssh_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timedout")]
		public System.Nullable<System.Boolean> Timedout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage_queued_at")]
		public System.Nullable<System.DateTimeOffset> Usage_queued_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="author_date")]
		public System.Nullable<System.DateTimeOffset> Author_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_email")]
		public string Author_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_login")]
		public string Author_login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_name")]
		public string Author_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commit")]
		public string Commit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commit_url")]
		public string Commit_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer_date")]
		public System.Nullable<System.DateTimeOffset> Committer_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer_email")]
		public string Committer_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer_login")]
		public string Committer_login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer_name")]
		public string Committer_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public System.Nullable<System.Boolean> Admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_emails")]
		public string[] All_emails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="analytics_id")]
		public string Analytics_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avatar_url")]
		public string Avatar_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basic_email_prefs")]
		public string Basic_email_prefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bitbucket")]
		public System.Nullable<System.Int32> Bitbucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bitbucket_authorized")]
		public System.Nullable<System.Boolean> Bitbucket_authorized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public System.Nullable<System.Int32> Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_left_in_trial")]
		public System.Nullable<System.Int32> Days_left_in_trial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dev_admin")]
		public System.Nullable<System.Boolean> Dev_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrolled_betas")]
		public string[] Enrolled_betas { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="github_id")]
		public System.Nullable<System.Int32> Github_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="github_oauth_scopes")]
		public string[] Github_oauth_scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gravatar_id")]
		public System.Nullable<System.Int32> Gravatar_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heroku_api_key")]
		public string Heroku_api_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="in_beta_program")]
		public System.Nullable<System.Boolean> In_beta_program { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_prefs")]
		public string Organization_prefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parallelism")]
		public System.Nullable<System.Int32> Parallelism { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public string Plan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pusher_id")]
		public string Pusher_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selected_email")]
		public string Selected_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sign_in_count")]
		public System.Nullable<System.Int32> Sign_in_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trial_end")]
		public System.Nullable<System.DateTimeOffset> Trial_end { get; set; }
	}
	
	/// <summary>
	/// Additional environment variables to inject into the build environment. A map of names to values.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public System.Nullable<System.DateTimeOffset> Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="build_num")]
		public System.Nullable<System.Int32> Build_num { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public System.Nullable<BuildSummaryOutcome> Outcome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pushed_at")]
		public System.Nullable<System.DateTimeOffset> Pushed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BuildSummaryStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcs_revision")]
		public string Vcs_revision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BuildSummaryOutcome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infrastructure_fail")]
		infrastructure_fail = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timedout")]
		timedout = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_tests")]
		no_tests = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BuildSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="retried")]
		retried = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infrastructure_fail")]
		infrastructure_fail = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timedout")]
		timedout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_run")]
		not_run = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_running")]
		not_running = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_tests")]
		no_tests = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Envvar
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Key
	{
		
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferred")]
		public System.Nullable<System.Boolean> Preferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
		
		/// <summary>
		/// when the key was issued
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// can be "deploy-key" or "github-user-key"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<KeyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deploy-key")]
		deployMinuskey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-user-key")]
		githubMinususerMinuskey = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Lifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_run")]
		not_run = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_running")]
		not_running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finished")]
		finished = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Outcome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infrastructure_fail")]
		infrastructure_fail = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timedout")]
		timedout = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_tests")]
		no_tests = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="aws")]
		public Aws Aws { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branches")]
		public string Branches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="campfire_notify_prefs")]
		public string Campfire_notify_prefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="campfire_room")]
		public string Campfire_room { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="campfire_subdomain")]
		public string Campfire_subdomain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="campfire_token")]
		public string Campfire_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compile")]
		public string Compile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default_branch")]
		public string Default_branch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public string Dependencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extra")]
		public string Extra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feature_flags")]
		public ProjectFeature_flags Feature_flags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowdock_api_token")]
		public string Flowdock_api_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followed")]
		public System.Nullable<System.Boolean> Followed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_usable_key")]
		public System.Nullable<System.Boolean> Has_usable_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heroku_deploy_user")]
		public string Heroku_deploy_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hipchat_api_token")]
		public string Hipchat_api_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hipchat_notify")]
		public string Hipchat_notify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hipchat_notify_prefs")]
		public string Hipchat_notify_prefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hipchat_room")]
		public string Hipchat_room { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="irc_channel")]
		public string Irc_channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="irc_keyword")]
		public string Irc_keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="irc_notify_prefs")]
		public string Irc_notify_prefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="irc_password")]
		public string Irc_password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="irc_server")]
		public string Irc_server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="irc_username")]
		public string Irc_username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oss")]
		public System.Nullable<System.Boolean> Oss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parallel")]
		public System.Nullable<System.Int32> Parallel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reponame")]
		public string Reponame { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public Scope[] Scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setup")]
		public string Setup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack_api_token")]
		public string Slack_api_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack_channel")]
		public string Slack_channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack_channel_override")]
		public string Slack_channel_override { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack_notify_prefs")]
		public string Slack_notify_prefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack_subdomain")]
		public string Slack_subdomain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slack_webhook_url")]
		public string Slack_webhook_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssh_keys")]
		public string[] Ssh_keys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test")]
		public string Test { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcs_type")]
		public string Vcs_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcs_url")]
		public string Vcs_url { get; set; }
	}
	
	public class ProjectFeature_flags
	{
		
		[System.Runtime.Serialization.DataMember(Name="build-fork-prs")]
		public System.Nullable<System.Boolean> Build_fork_prs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fleet")]
		public System.Nullable<System.Boolean> Fleet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="junit")]
		public System.Nullable<System.Boolean> Junit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oss")]
		public System.Nullable<System.Boolean> Oss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osx")]
		public System.Nullable<System.Boolean> Osx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="set-github-status")]
		public System.Nullable<System.Boolean> Set_github_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trusty-beta")]
		public System.Nullable<System.Boolean> Trusty_beta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="write-settings")]
		writeMinussettings = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="view-builds")]
		viewMinusbuilds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="read-settings")]
		readMinussettings = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trigger-builds")]
		triggerMinusbuilds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="status")]
		status = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="retried")]
		retried = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infrastructure_fail")]
		infrastructure_fail = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timedout")]
		timedout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_run")]
		not_run = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_running")]
		not_running = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_tests")]
		no_tests = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tests
	{
		
		[System.Runtime.Serialization.DataMember(Name="tests")]
		public TestsTests1[] TestsTests1 { get; set; }
	}
	
	public class TestsTests1
	{
		
		[System.Runtime.Serialization.DataMember(Name="classname")]
		public string Classname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<TestsTests1Result> Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="run_time")]
		public System.Nullable<System.Double> Run_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TestsTests1Result
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="retried")]
		retried = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infrastructure_fail")]
		infrastructure_fail = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timedout")]
		timedout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_run")]
		not_run = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_running")]
		not_running = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_tests")]
		no_tests = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 12,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Provides information about the signed in user.
		/// 
		/// MeGet me
		/// </summary>
		/// <returns>signed in user</returns>
		public async Task<User> MeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Build summary for each of the last 30 builds for a single git repo.
		/// 
		/// Project_username_projectGetByLimitAndOffsetAndFilter project/{username}/{project}
		/// </summary>
		/// <param name="limit">The number of builds to return. Maximum 100, defaults to 30.
		///
		/// Maximum: 100
		// </param>
		/// <param name="offset">The API returns builds starting from this offset, defaults to 0.
		///</param>
		/// <param name="filter">Restricts which builds are returned.
		///Set to "completed", "successful", "failed", "running", or defaults to no filter.
		///</param>
		/// <returns>Build summary for each of the last 30 builds</returns>
		public async Task<Build[]> Project_username_projectGetByLimitAndOffsetAndFilterAsync(int limit, int offset, Project_username_projectGetByLimitAndOffsetAndFilterFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}?limit="+limit+"&offset="+offset+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Build[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers a new build, returns a summary of the build.
		/// 
		/// Project_username_projectPost project/{username}/{project}
		/// </summary>
		public async Task Project_username_projectPostAsync(Project_username_projectPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears the cache for a project.
		/// 
		/// Project_username_projectBuild_cacheDelete project/{username}/{project}/build-cache
		/// </summary>
		/// <returns>status message</returns>
		public async Task<Project_username_projectBuild_cacheDeleteReturn> Project_username_projectBuild_cacheDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/build-cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project_username_projectBuild_cacheDeleteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists checkout keys.
		/// 
		/// Project_username_projectCheckout_keyGet project/{username}/{project}/checkout-key
		/// </summary>
		/// <returns>checkout keys</returns>
		public async Task<Key[]> Project_username_projectCheckout_keyGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/checkout-key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Key[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new checkout key.
		/// Only usable with a user API token.
		/// 
		/// Project_username_projectCheckout_keyPost project/{username}/{project}/checkout-key
		/// </summary>
		/// <param name="requestBody">The type of key to create. Can be 'deploy-key' or 'github-user-key'.
		///</param>
		/// <returns>checkout key</returns>
		public async Task<Key> Project_username_projectCheckout_keyPostAsync(Project_username_projectCheckout_keyPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/checkout-key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Key>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a checkout key.
		/// 
		/// Project_username_projectCheckout_key_fingerprintDelete project/{username}/{project}/checkout-key/{fingerprint}
		/// </summary>
		/// <returns>status message</returns>
		public async Task<Project_username_projectCheckout_key_fingerprintDeleteReturn> Project_username_projectCheckout_key_fingerprintDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/checkout-key/{fingerprint}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project_username_projectCheckout_key_fingerprintDeleteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a checkout key.
		/// 
		/// Project_username_projectCheckout_key_fingerprintGet project/{username}/{project}/checkout-key/{fingerprint}
		/// </summary>
		/// <returns>checkout key</returns>
		public async Task<Key> Project_username_projectCheckout_key_fingerprintGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/checkout-key/{fingerprint}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Key>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the environment variables for :project
		/// 
		/// Project_username_projectEnvvarGet project/{username}/{project}/envvar
		/// </summary>
		/// <returns>XXX</returns>
		public async Task<Envvar[]> Project_username_projectEnvvarGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/envvar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Envvar[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new environment variable
		/// 
		/// Project_username_projectEnvvarPost project/{username}/{project}/envvar
		/// </summary>
		/// <returns>XXX</returns>
		public async Task<Envvar> Project_username_projectEnvvarPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/envvar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Envvar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the environment variable named ':name'
		/// 
		/// Project_username_projectEnvvar_nameDelete project/{username}/{project}/envvar/{name}
		/// </summary>
		/// <returns>Deletes the environment variable named ':name'
		///</returns>
		public async Task<Project_username_projectEnvvar_nameDeleteReturn> Project_username_projectEnvvar_nameDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/envvar/{name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project_username_projectEnvvar_nameDeleteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the hidden value of environment variable :name
		/// 
		/// Project_username_projectEnvvar_nameGet project/{username}/{project}/envvar/{name}
		/// </summary>
		/// <returns>XXX</returns>
		public async Task<Envvar> Project_username_projectEnvvar_nameGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/envvar/{name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Envvar>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an ssh key used to access external systems that require SSH key-based authentication
		/// 
		/// Project_username_projectSsh_keyPost project/{username}/{project}/ssh-key
		/// </summary>
		public async Task Project_username_projectSsh_keyPostAsync(Project_username_projectSsh_keyPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/ssh-key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggers a new build, returns a summary of the build.
		/// Optional build parameters can be set using an experimental API.
		/// 
		/// Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)
		/// 
		/// Project_username_projectTree_branchPost project/{username}/{project}/tree/{branch}
		/// </summary>
		public async Task Project_username_projectTree_branchPostAsync(Project_username_projectTree_branchPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/tree/{branch}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Full details for a single build. The response includes all of the fields from the build summary.
		/// This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.
		/// 
		/// Project_username_project_build_numGet project/{username}/{project}/{build_num}
		/// </summary>
		/// <returns>Full details for a single build</returns>
		public async Task<BuildDetail> Project_username_project_build_numGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/{build_num}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the artifacts produced by a given build.
		/// 
		/// Project_username_project_build_numArtifactsGet project/{username}/{project}/{build_num}/artifacts
		/// </summary>
		/// <returns>List the artifacts produced by a given build</returns>
		public async Task<Artifact[]> Project_username_project_build_numArtifactsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/{build_num}/artifacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Artifact[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the build, returns a summary of the build.
		/// 
		/// Project_username_project_build_numCancelPost project/{username}/{project}/{build_num}/cancel
		/// </summary>
		/// <returns>returns a summary of the build</returns>
		public async Task<Build> Project_username_project_build_numCancelPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/{build_num}/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Build>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retries the build, returns a summary of the new build.
		/// 
		/// Project_username_project_build_numRetryPost project/{username}/{project}/{build_num}/retry
		/// </summary>
		/// <returns>returns a summary of the new build</returns>
		public async Task<Build> Project_username_project_build_numRetryPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/{build_num}/retry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Build>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides test metadata for a build
		/// Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)
		/// 
		/// Project_username_project_build_numTestsGet project/{username}/{project}/{build_num}/tests
		/// </summary>
		/// <returns>test metadata for a build
		///</returns>
		public async Task<Tests> Project_username_project_build_numTestsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project/{username}/{project}/{build_num}/tests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tests>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the projects you're following on CircleCI, with build information organized by branch.
		/// 
		/// ProjectsGet projects
		/// </summary>
		/// <returns>List of all the projects you're following on CircleCI
		///</returns>
		public async Task<Project[]> ProjectsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Build summary for each of the last 30 recent builds, ordered by build_num.
		/// 
		/// Recent_buildsGetByLimitAndOffset recent-builds
		/// </summary>
		/// <param name="limit">The number of builds to return. Maximum 100, defaults to 30.
		///
		/// Maximum: 100
		// </param>
		/// <param name="offset">The API returns builds starting from this offset, defaults to 0.
		///</param>
		/// <returns>Build summary for each of the last 30 recent builds</returns>
		public async Task<Build[]> Recent_buildsGetByLimitAndOffsetAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recent-builds?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Build[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds your Heroku API key to CircleCI, takes apikey as form param name.
		/// 
		/// UserHeroku_keyPost user/heroku-key
		/// </summary>
		public async Task UserHeroku_keyPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/heroku-key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Project_username_projectGetByLimitAndOffsetAndFilterFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="successful")]
		successful = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 3,
	}
	
	public class Project_username_projectPostPostBody
	{
		
		/// <summary>
		/// Additional environment variables to inject into the build environment. A map of names to values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build_parameters")]
		public BuildParameters Build_parameters { get; set; }
		
		/// <summary>
		/// The number of containers to use to run the build. Default is null and the project default is used.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallel")]
		public string Parallel { get; set; }
		
		/// <summary>
		/// The specific revision to build.
		///Default is null and the head of the branch is used. Cannot be used with tag parameter.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// The tag to build. Default is null. Cannot be used with revision parameter.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	public class Project_username_projectBuild_cacheDeleteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public enum Project_username_projectCheckout_keyPostPostBody
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deploy-key")]
		deployMinuskey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-user-key")]
		githubMinususerMinuskey = 1,
	}
	
	public class Project_username_projectCheckout_key_fingerprintDeleteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public System.Nullable<Project_username_projectCheckout_key_fingerprintDeleteReturnMessage> Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Project_username_projectCheckout_key_fingerprintDeleteReturnMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
	}
	
	public class Project_username_projectEnvvar_nameDeleteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Project_username_projectCheckout_key_fingerprintDeleteReturnMessage Message { get; set; }
	}
	
	public enum Project_username_projectSsh_keyPostContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 0,
	}
	
	public class Project_username_projectSsh_keyPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private_key")]
		public string Private_key { get; set; }
	}
	
	public class Project_username_projectTree_branchPostPostBody
	{
		
		/// <summary>
		/// Additional environment variables to inject into the build environment. A map of names to values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build_parameters")]
		public BuildParameters Build_parameters { get; set; }
		
		/// <summary>
		/// The number of containers to use to run the build. Default is null and the project default is used.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallel")]
		public string Parallel { get; set; }
		
		/// <summary>
		/// The specific revision to build.
		///Default is null and the head of the branch is used. Cannot be used with tag parameter.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
