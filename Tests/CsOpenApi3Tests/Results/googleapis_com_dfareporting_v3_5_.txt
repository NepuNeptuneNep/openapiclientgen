//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Creative Click Tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickTag
	{
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public CreativeClickThroughUrl ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset's creativeAssetId.name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Click-through URL
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeClickThroughUrl
	{
		
		/// <summary>
		/// Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: - If landingPageId is specified then that landing page's URL is assigned to this field. - Otherwise, the customClickThroughUrl is assigned to this field. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computedClickThroughUrl")]
		public string ComputedClickThroughUrl { get; set; }
		
		/// <summary>
		/// Custom click-through URL. Applicable if the landingPageId field is left unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClickThroughUrl")]
		public string CustomClickThroughUrl { get; set; }
		
		/// <summary>
		/// ID of the landing page for the click-through URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPageId")]
		public string LandingPageId { get; set; }
	}
	
	/// <summary>
	/// Creative Asset ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAssetId
	{
		
		/// <summary>
		/// Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: ".-_ ". Spaces are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreativeAssetIdType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeAssetIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML_IMAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 5,
	}
	
	/// <summary>
	/// CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeAssetMetadata
	{
		
		/// <summary>
		/// Creative Asset ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetIdentifier")]
		public CreativeAssetId AssetIdentifier { get; set; }
		
		/// <summary>
		/// List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTags")]
		public ClickTag[] ClickTags { get; set; }
		
		/// <summary>
		/// List of counter events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counterCustomEvents")]
		public CreativeCustomEvent[] CounterCustomEvents { get; set; }
		
		/// <summary>
		/// List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedFeatures")]
		public string[] DetectedFeatures { get; set; }
		
		/// <summary>
		/// List of exit events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCustomEvents")]
		public CreativeCustomEvent[] ExitCustomEvents { get; set; }
		
		/// <summary>
		/// Numeric ID of the asset. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a DimensionValue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idDimensionValue")]
		public DimensionValue IdDimensionValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#creativeAssetMetadata".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Extra information added to operations that support Scotty media requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaRequestInfo")]
		public MediaRequestInfo MediaRequestInfo { get; set; }
		
		/// <summary>
		/// This message is for backends to pass their scotty media specific fields to ESF. Backend will include this in their response message to ESF. Example: ExportFile is an rpc defined for upload using scotty from ESF. rpc ExportFile(ExportFileRequest) returns (ExportFileResponse) Message ExportFileResponse will include apiserving.MediaResponseInfo to tell ESF about data like dynamic_dropzone it needs to pass to Scotty. message ExportFileResponse { optional gdata.Media blob = 1; optional apiserving.MediaResponseInfo media_response_info = 2 }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaResponseInfo")]
		public MediaResponseInfo MediaResponseInfo { get; set; }
		
		/// <summary>
		/// True if the uploaded asset is a rich media asset. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richMedia")]
		public System.Nullable<System.Boolean> RichMedia { get; set; }
		
		/// <summary>
		/// List of timer events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerCustomEvents")]
		public CreativeCustomEvent[] TimerCustomEvents { get; set; }
		
		/// <summary>
		/// Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - "ADMOB_REFERENCED" - "ASSET_FORMAT_UNSUPPORTED_DCM" - "ASSET_INVALID" - "CLICK_TAG_HARD_CODED" - "CLICK_TAG_INVALID" - "CLICK_TAG_IN_GWD" - "CLICK_TAG_MISSING" - "CLICK_TAG_MORE_THAN_ONE" - "CLICK_TAG_NON_TOP_LEVEL" - "COMPONENT_UNSUPPORTED_DCM" - "ENABLER_UNSUPPORTED_METHOD_DCM" - "EXTERNAL_FILE_REFERENCED" - "FILE_DETAIL_EMPTY" - "FILE_TYPE_INVALID" - "GWD_PROPERTIES_INVALID" - "HTML5_FEATURE_UNSUPPORTED" - "LINKED_FILE_NOT_FOUND" - "MAX_FLASH_VERSION_11" - "MRAID_REFERENCED" - "NOT_SSL_COMPLIANT" - "ORPHANED_ASSET" - "PRIMARY_HTML_MISSING" - "SVG_INVALID" - "ZIP_INVALID" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnedValidationRules")]
		public string[] WarnedValidationRules { get; set; }
	}
	
	/// <summary>
	/// Creative Custom Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeCustomEvent
	{
		
		/// <summary>
		/// Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserCustomEventId")]
		public string AdvertiserCustomEventId { get; set; }
		
		/// <summary>
		/// User-entered name for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserCustomEventName")]
		public string AdvertiserCustomEventName { get; set; }
		
		/// <summary>
		/// Type of the event. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserCustomEventType")]
		public System.Nullable<CreativeCustomEventAdvertiserCustomEventType> AdvertiserCustomEventType { get; set; }
		
		/// <summary>
		/// Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artworkLabel")]
		public string ArtworkLabel { get; set; }
		
		/// <summary>
		/// Artwork type used by the creative.This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artworkType")]
		public System.Nullable<CreativeCustomEventArtworkType> ArtworkType { get; set; }
		
		/// <summary>
		/// Click-through URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitClickThroughUrl")]
		public CreativeClickThroughUrl ExitClickThroughUrl { get; set; }
		
		/// <summary>
		/// ID of this event. This is a required field and should not be modified after insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Popup Window Properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popupWindowProperties")]
		public PopupWindowProperties PopupWindowProperties { get; set; }
		
		/// <summary>
		/// Target type used by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public System.Nullable<CreativeCustomEventTargetType> TargetType { get; set; }
		
		/// <summary>
		/// Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoReportingId")]
		public string VideoReportingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeCustomEventAdvertiserCustomEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_EVENT_TIMER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_EVENT_EXIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISER_EVENT_COUNTER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeCustomEventArtworkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_FLASH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_HTML5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_MIXED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTWORK_TYPE_IMAGE = 3,
	}
	
	/// <summary>
	/// Popup Window Properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PopupWindowProperties
	{
		
		/// <summary>
		/// Represents the dimensions of ads, placements, creatives, or creative assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public Size Dimension { get; set; }
		
		/// <summary>
		/// Offset Position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public OffsetPosition Offset { get; set; }
		
		/// <summary>
		/// Popup window position either centered or at specific coordinate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionType")]
		public System.Nullable<PopupWindowPropertiesPositionType> PositionType { get; set; }
		
		/// <summary>
		/// Whether to display the browser address bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showAddressBar")]
		public System.Nullable<System.Boolean> ShowAddressBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser menu bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showMenuBar")]
		public System.Nullable<System.Boolean> ShowMenuBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser scroll bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showScrollBar")]
		public System.Nullable<System.Boolean> ShowScrollBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser status bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showStatusBar")]
		public System.Nullable<System.Boolean> ShowStatusBar { get; set; }
		
		/// <summary>
		/// Whether to display the browser tool bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showToolBar")]
		public System.Nullable<System.Boolean> ShowToolBar { get; set; }
		
		/// <summary>
		/// Title of popup window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Represents the dimensions of ads, placements, creatives, or creative assets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Size
	{
		
		/// <summary>
		/// Height of this size. Acceptable values are 0 to 32767, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// IAB standard size. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iab")]
		public System.Nullable<System.Boolean> Iab { get; set; }
		
		/// <summary>
		/// ID of this size. This is a read-only, auto-generated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "dfareporting#size".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Width of this size. Acceptable values are 0 to 32767, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Offset Position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OffsetPosition
	{
		
		/// <summary>
		/// Offset distance from left side of an asset or a window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Int32> Left { get; set; }
		
		/// <summary>
		/// Offset distance from top side of an asset or a window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Int32> Top { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PopupWindowPropertiesPositionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COORDINATES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeCustomEventTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_BLANK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_TOP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_SELF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_PARENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_POPUP = 4,
	}
	
	/// <summary>
	/// Represents a DimensionValue resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionValue
	{
		
		/// <summary>
		/// The name of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// The eTag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID associated with the value if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of resource this is, in this case dfareporting#dimensionValue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public System.Nullable<DimensionValueMatchType> MatchType { get; set; }
		
		/// <summary>
		/// The value of the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionValueMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGINS_WITH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WILDCARD_EXPRESSION = 3,
	}
	
	/// <summary>
	/// Extra information added to operations that support Scotty media requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediaRequestInfo
	{
		
		/// <summary>
		/// The number of current bytes uploaded or downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentBytes")]
		public string CurrentBytes { get; set; }
		
		/// <summary>
		/// Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffObjectVersion")]
		public string DiffObjectVersion { get; set; }
		
		/// <summary>
		/// The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalStatus")]
		public System.Nullable<System.Int32> FinalStatus { get; set; }
		
		/// <summary>
		/// The type of notification received from Scotty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<MediaRequestInfoNotificationType> NotificationType { get; set; }
		
		/// <summary>
		/// The Scotty request ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// The partition of the Scotty server handling this request. type is uploader_service.RequestReceivedParamsServingInfo LINT.IfChange(request_received_params_serving_info_annotations) LINT.ThenChange()
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestReceivedParamsServingInfo")]
		public string RequestReceivedParamsServingInfo { get; set; }
		
		/// <summary>
		/// The total size of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytes")]
		public string TotalBytes { get; set; }
		
		/// <summary>
		/// Whether the total bytes field contains an estimated data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesIsEstimated")]
		public System.Nullable<System.Boolean> TotalBytesIsEstimated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediaRequestInfoNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_SENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	/// <summary>
	/// This message is for backends to pass their scotty media specific fields to ESF. Backend will include this in their response message to ESF. Example: ExportFile is an rpc defined for upload using scotty from ESF. rpc ExportFile(ExportFileRequest) returns (ExportFileResponse) Message ExportFileResponse will include apiserving.MediaResponseInfo to tell ESF about data like dynamic_dropzone it needs to pass to Scotty. message ExportFileResponse { optional gdata.Media blob = 1; optional apiserving.MediaResponseInfo media_response_info = 2 }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediaResponseInfo
	{
		
		/// <summary>
		/// Data to copy from backend response to the next backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Specifies any transformation to be applied to data before persisting it or retrieving from storage. E.g., encryption options for blobstore2. This should be of the form uploader_service.DataStorageTransform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataStorageTransform")]
		public string DataStorageTransform { get; set; }
		
		/// <summary>
		/// Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the location specified in this drop target. Unlike drop zones, the drop target is the final storage location for an upload. So, the agent does not need to clone the blob at the end of the upload. The agent is responsible for garbage collecting any orphaned blobs that may occur due to aborted uploads. For more information, see the drop target design doc here: http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the identified field in the response must be of the type uploader.agent.DropTarget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicDropTarget")]
		public string DynamicDropTarget { get; set; }
		
		/// <summary>
		/// Specifies the Scotty dropzone to use for uploads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicDropzone")]
		public string DynamicDropzone { get; set; }
		
		/// <summary>
		/// Request class to use for all Blobstore operations for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestClass")]
		public System.Nullable<MediaResponseInfoRequestClass> RequestClass { get; set; }
		
		/// <summary>
		/// Requester ID passed along to be recorded in the Scotty logs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scottyAgentUserId")]
		public string ScottyAgentUserId { get; set; }
		
		/// <summary>
		/// Customer-specific data to be recorded in the Scotty logs type is logs_proto_scotty.CustomerLog
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scottyCustomerLog")]
		public string ScottyCustomerLog { get; set; }
		
		/// <summary>
		/// Specifies the TrafficClass that Scotty should use for any RPCs to fetch the response bytes. Will override the traffic class GTOS of the incoming http request. This is a temporary field to facilitate whitelisting and experimentation by the bigstore agent only. For instance, this does not apply to RTMP reads. WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficClassField")]
		public System.Nullable<MediaResponseInfoTrafficClassField> TrafficClassField { get; set; }
		
		/// <summary>
		/// Tells Scotty to verify hashes on the agent's behalf by parsing out the X-Goog-Hash header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyHashFromHeader")]
		public System.Nullable<System.Boolean> VerifyHashFromHeader { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediaResponseInfoRequestClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_REQUEST_CLASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATENCY_SENSITIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION_BATCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEST_EFFORT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediaResponseInfoTrafficClassField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC0 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE0 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LLQ = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LLQ1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LLQ2 = 10,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
