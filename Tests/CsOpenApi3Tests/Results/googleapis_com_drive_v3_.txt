//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information about the user, the user's Drive, and system capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class About
	{
		
		/// <summary>
		/// Whether the user has installed the requesting app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInstalled")]
		public System.Nullable<System.Boolean> AppInstalled { get; set; }
		
		/// <summary>
		/// Whether the user can create shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCreateDrives")]
		public System.Nullable<System.Boolean> CanCreateDrives { get; set; }
		
		/// <summary>
		/// Deprecated: Use `canCreateDrives` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCreateTeamDrives")]
		public System.Nullable<System.Boolean> CanCreateTeamDrives { get; set; }
		
		/// <summary>
		/// A list of themes that are supported for shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveThemes")]
		public AboutDriveThemes[] AboutDriveThemes { get; set; }
		
		/// <summary>
		/// A map of source MIME type to possible targets for all supported exports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportFormats")]
		public System.Collections.Generic.Dictionary<string, string[]> ExportFormats { get; set; }
		
		/// <summary>
		/// The currently supported folder colors as RGB hex strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderColorPalette")]
		public string[] FolderColorPalette { get; set; }
		
		/// <summary>
		/// A map of source MIME type to possible targets for all supported imports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importFormats")]
		public System.Collections.Generic.Dictionary<string, string[]> ImportFormats { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#about"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#about")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#about";
		
		/// <summary>
		/// A map of maximum import sizes by MIME type, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxImportSizes")]
		public System.Collections.Generic.Dictionary<string, string> MaxImportSizes { get; set; }
		
		/// <summary>
		/// The maximum upload size in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxUploadSize")]
		public string MaxUploadSize { get; set; }
		
		/// <summary>
		/// The user's storage quota limits and usage. All fields are measured in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageQuota")]
		public AboutStorageQuota StorageQuota { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveThemes` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDriveThemes")]
		public AboutTeamDriveThemes[] AboutTeamDriveThemes { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class AboutDriveThemes
	{
		
		/// <summary>
		/// A link to this theme's background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// The color of this theme as an RGB hex string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// The ID of the theme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class AboutStorageQuota
	{
		
		/// <summary>
		/// The usage limit, if applicable. This will not be present if the user has unlimited storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// The total usage across all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public string Usage { get; set; }
		
		/// <summary>
		/// The usage by all files in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageInDrive")]
		public string UsageInDrive { get; set; }
		
		/// <summary>
		/// The usage by trashed files in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageInDriveTrash")]
		public string UsageInDriveTrash { get; set; }
	}
	
	public class AboutTeamDriveThemes
	{
		
		/// <summary>
		/// Deprecated: Use `driveThemes/backgroundImageLink` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveThemes/colorRgb` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveThemes/id` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Information about a Drive user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Output only. A plain text displayable name for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#user"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#user")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#user";
		
		/// <summary>
		/// Output only. Whether this user is the requesting user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="me")]
		public System.Nullable<System.Boolean> Me { get; set; }
		
		/// <summary>
		/// Output only. The user's ID as visible in Permission resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
		
		/// <summary>
		/// Output only. A link to the user's profile photo, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoLink")]
		public string PhotoLink { get; set; }
	}
	
	/// <summary>
	/// A change to a file or shared drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Change
	{
		
		/// <summary>
		/// The type of the change. Possible values are `file` and `drive`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public string ChangeType { get; set; }
		
		/// <summary>
		/// Representation of a shared drive. Some resource methods (such as `drives.update`) require a `driveId`. Use the `drives.list` method to retrieve the ID for a shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drive")]
		public Drive Drive { get; set; }
		
		/// <summary>
		/// The ID of the shared drive associated with this change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveId")]
		public string DriveId { get; set; }
		
		/// <summary>
		/// The metadata for a file. Some resource methods (such as `files.update`) require a `fileId`. Use the `files.list` method to retrieve the ID for a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public File File { get; set; }
		
		/// <summary>
		/// The ID of the file which has changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#change"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#change")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#change";
		
		/// <summary>
		/// Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removed")]
		public System.Nullable<System.Boolean> Removed { get; set; }
		
		/// <summary>
		/// Deprecated: use the drive collection instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrive")]
		public TeamDrive TeamDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveId` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDriveId")]
		public string TeamDriveId { get; set; }
		
		/// <summary>
		/// The time of this change (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// Deprecated: Use `changeType` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Representation of a shared drive. Some resource methods (such as `drives.update`) require a `driveId`. Use the `drives.list` method to retrieve the ID for a shared drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Drive
	{
		
		/// <summary>
		/// An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on `drive.drives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageFile")]
		public DriveBackgroundImageFile BackgroundImageFile { get; set; }
		
		/// <summary>
		/// Output only. A short-lived link to this shared drive's background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// Output only. Capabilities the current user has on this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public DriveCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// The color of this shared drive as an RGB hex string. It can only be set on a `drive.drives.update` request that does not set `themeId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// The time at which the shared drive was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Whether the shared drive is hidden from default view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#drive"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#drive")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#drive";
		
		/// <summary>
		/// The name of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// A set of restrictions that apply to this shared drive or items inside this shared drive. Note that restrictions can't be set when creating a shared drive. To add a restriction, first create a shared drive and then use `drives.update` to add restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public DriveRestrictions Restrictions { get; set; }
		
		/// <summary>
		/// The ID of the theme from which the background image and color will be set. The set of possible `driveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.drives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	public class DriveBackgroundImageFile
	{
		
		/// <summary>
		/// The ID of an image file in Google Drive to use for the background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
		
		/// <summary>
		/// The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xCoordinate")]
		public System.Nullable<System.Single> XCoordinate { get; set; }
		
		/// <summary>
		/// The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yCoordinate")]
		public System.Nullable<System.Single> YCoordinate { get; set; }
	}
	
	public class DriveCapabilities
	{
		
		/// <summary>
		/// Output only. Whether the current user can add children to folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddChildren")]
		public System.Nullable<System.Boolean> CanAddChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeCopyRequiresWriterPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeCopyRequiresWriterPermissionRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `domainUsersOnly` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDomainUsersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeDomainUsersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the background of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDriveBackground")]
		public System.Nullable<System.Boolean> CanChangeDriveBackground { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `driveMembersOnly` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDriveMembersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeDriveMembersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeSharingFoldersRequiresOrganizerPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeSharingFoldersRequiresOrganizerPermissionRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can comment on files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can copy files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCopy")]
		public System.Nullable<System.Boolean> CanCopy { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete children from folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteChildren")]
		public System.Nullable<System.Boolean> CanDeleteChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteDrive")]
		public System.Nullable<System.Boolean> CanDeleteDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can download files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDownload")]
		public System.Nullable<System.Boolean> CanDownload { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can edit files in this shared drive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can list the children of folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canListChildren")]
		public System.Nullable<System.Boolean> CanListChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add members to this shared drive or remove them or change their role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the revisions resource of files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can rename files or folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRename")]
		public System.Nullable<System.Boolean> CanRename { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can rename this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRenameDrive")]
		public System.Nullable<System.Boolean> CanRenameDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can reset the shared drive restrictions to defaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canResetDriveRestrictions")]
		public System.Nullable<System.Boolean> CanResetDriveRestrictions { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can share files or folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can trash children from folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrashChildren")]
		public System.Nullable<System.Boolean> CanTrashChildren { get; set; }
	}
	
	public class DriveRestrictions
	{
		
		/// <summary>
		/// Whether administrative privileges on this shared drive are required to modify restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminManagedRestrictions")]
		public System.Nullable<System.Boolean> AdminManagedRestrictions { get; set; }
		
		/// <summary>
		/// Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUsersOnly")]
		public System.Nullable<System.Boolean> DomainUsersOnly { get; set; }
		
		/// <summary>
		/// Whether access to items inside this shared drive is restricted to its members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveMembersOnly")]
		public System.Nullable<System.Boolean> DriveMembersOnly { get; set; }
		
		/// <summary>
		/// If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingFoldersRequiresOrganizerPermission")]
		public System.Nullable<System.Boolean> SharingFoldersRequiresOrganizerPermission { get; set; }
	}
	
	/// <summary>
	/// The metadata for a file. Some resource methods (such as `files.update`) require a `fileId`. Use the `files.list` method to retrieve the ID for a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		/// <summary>
		/// A collection of arbitrary key-value pairs which are private to the requesting app.
		///Entries with null values are cleared in update and copy requests. These properties can only be retrieved using an authenticated request. An authenticated request uses an access token obtained with a OAuth 2 client ID. You cannot use an API key to retrieve private properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appProperties")]
		public System.Collections.Generic.Dictionary<string, string> AppProperties { get; set; }
		
		/// <summary>
		/// Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public FileCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// Additional information about the content of the file. These fields are never populated in responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHints")]
		public FileContentHints ContentHints { get; set; }
		
		/// <summary>
		/// Restrictions for accessing the content of the file. Only populated if such a restriction exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRestrictions")]
		public ContentRestriction[] ContentRestrictions { get; set; }
		
		/// <summary>
		/// Whether the options to copy, print, or download this file, should be disabled for readers and commenters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// The time at which the file was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// A short description of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveId")]
		public string DriveId { get; set; }
		
		/// <summary>
		/// Output only. Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitlyTrashed")]
		public System.Nullable<System.Boolean> ExplicitlyTrashed { get; set; }
		
		/// <summary>
		/// Output only. Links for exporting Docs Editors files to specific formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportLinks")]
		public System.Collections.Generic.Dictionary<string, string> ExportLinks { get; set; }
		
		/// <summary>
		/// Output only. The final component of `fullFileExtension`. This is only available for files with binary content in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileExtension")]
		public string FileExtension { get; set; }
		
		/// <summary>
		/// The color for a folder or a shortcut to a folder as an RGB hex string. The supported colors are published in the `folderColorPalette` field of the About resource. If an unsupported color is specified, the closest color in the palette is used instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderColorRgb")]
		public string FolderColorRgb { get; set; }
		
		/// <summary>
		/// Output only. The full file extension extracted from the `name` field. May contain multiple concatenated extensions, such as "tar.gz". This is only available for files with binary content in Google Drive. This is automatically updated when the `name` field changes, however it is not cleared if the new name does not contain a valid extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullFileExtension")]
		public string FullFileExtension { get; set; }
		
		/// <summary>
		/// Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAugmentedPermissions")]
		public System.Nullable<System.Boolean> HasAugmentedPermissions { get; set; }
		
		/// <summary>
		/// Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasThumbnail")]
		public System.Nullable<System.Boolean> HasThumbnail { get; set; }
		
		/// <summary>
		/// Output only. The ID of the file's head revision. This is currently only available for files with binary content in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headRevisionId")]
		public string HeadRevisionId { get; set; }
		
		/// <summary>
		/// Output only. A static, unauthenticated link to the file's icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconLink")]
		public string IconLink { get; set; }
		
		/// <summary>
		/// The ID of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Additional metadata about image media, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageMediaMetadata")]
		public FileImageMediaMetadata ImageMediaMetadata { get; set; }
		
		/// <summary>
		/// Output only. Whether the file was created or opened by the requesting app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAppAuthorized")]
		public System.Nullable<System.Boolean> IsAppAuthorized { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#file"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#file")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#file";
		
		/// <summary>
		/// Output only. An overview of the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelInfo")]
		public FileLabelInfo LabelInfo { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyingUser")]
		public User LastModifyingUser { get; set; }
		
		/// <summary>
		/// Contains details about the link URLs that clients are using to refer to this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkShareMetadata")]
		public FileLinkShareMetadata LinkShareMetadata { get; set; }
		
		/// <summary>
		/// Output only. The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Checksum")]
		public string Md5Checksum { get; set; }
		
		/// <summary>
		/// The MIME type of the file. Google Drive attempts to automatically detect an appropriate value from uploaded content, if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content is imported, if possible. The supported import formats are published in the About resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Output only. Whether the file has been modified by this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedByMe")]
		public System.Nullable<System.Boolean> ModifiedByMe { get; set; }
		
		/// <summary>
		/// The last time the file was modified by the user (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedByMeTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedByMeTime { get; set; }
		
		/// <summary>
		/// he last time the file was modified by anyone (RFC 3339 date-time). Note that setting modifiedTime will also update modifiedByMeTime for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
		
		/// <summary>
		/// The name of the file. This is not necessarily unique within a folder. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the name is constant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The original filename of the uploaded content if available, or else the original value of the `name` field. This is only available for files with binary content in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalFilename")]
		public string OriginalFilename { get; set; }
		
		/// <summary>
		/// Output only. Whether the user owns the file. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownedByMe")]
		public System.Nullable<System.Boolean> OwnedByMe { get; set; }
		
		/// <summary>
		/// Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public User[] Owners { get; set; }
		
		/// <summary>
		/// The IDs of the parent folders which contain the file. If not specified as part of a create request, the file is placed directly in the user's My Drive folder. If not specified as part of a copy request, the file inherits any discoverable parents of the source file. Update requests must use the `addParents` and `removeParents` parameters to modify the parents list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parents")]
		public string[] Parents { get; set; }
		
		/// <summary>
		/// Output only. List of permission IDs for users with access to this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionIds")]
		public string[] PermissionIds { get; set; }
		
		/// <summary>
		/// Output only. The full list of permissions for the file. This is only available if the requesting user can share the file. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions { get; set; }
		
		/// <summary>
		/// A collection of arbitrary key-value pairs which are visible to all apps.
		///Entries with null values are cleared in update and copy requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Output only. The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with `keepForever` enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesUsed")]
		public string QuotaBytesUsed { get; set; }
		
		/// <summary>
		/// Output only. A key needed to access the item via a shared link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceKey")]
		public string ResourceKey { get; set; }
		
		/// <summary>
		/// Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Checksum")]
		public string Sha1Checksum { get; set; }
		
		/// <summary>
		/// Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
		
		/// <summary>
		/// Output only. Whether the file has been shared. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shared")]
		public System.Nullable<System.Boolean> Shared { get; set; }
		
		/// <summary>
		/// The time at which the file was shared with the user, if applicable (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedWithMeTime")]
		public System.Nullable<System.DateTimeOffset> SharedWithMeTime { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingUser")]
		public User SharingUser { get; set; }
		
		/// <summary>
		/// Shortcut file details. Only populated for shortcut files, which have the mimeType field set to `application/vnd.google-apps.shortcut`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortcutDetails")]
		public FileShortcutDetails ShortcutDetails { get; set; }
		
		/// <summary>
		/// Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Output only. The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaces")]
		public string[] Spaces { get; set; }
		
		/// <summary>
		/// Whether the user has starred the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `driveId` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDriveId")]
		public string TeamDriveId { get; set; }
		
		/// <summary>
		/// Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailLink")]
		public string ThumbnailLink { get; set; }
		
		/// <summary>
		/// Output only. The thumbnail version for use in thumbnail cache invalidation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailVersion")]
		public string ThumbnailVersion { get; set; }
		
		/// <summary>
		/// Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner's trash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashed")]
		public System.Nullable<System.Boolean> Trashed { get; set; }
		
		/// <summary>
		/// The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashedTime")]
		public System.Nullable<System.DateTimeOffset> TrashedTime { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashingUser")]
		public User TrashingUser { get; set; }
		
		/// <summary>
		/// Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// Output only. Additional metadata about video media. This may not be available immediately upon upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoMediaMetadata")]
		public FileVideoMediaMetadata VideoMediaMetadata { get; set; }
		
		/// <summary>
		/// Output only. Whether the file has been viewed by this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewedByMe")]
		public System.Nullable<System.Boolean> ViewedByMe { get; set; }
		
		/// <summary>
		/// The last time the file was viewed by the user (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewedByMeTime")]
		public System.Nullable<System.DateTimeOffset> ViewedByMeTime { get; set; }
		
		/// <summary>
		/// Deprecated: Use `copyRequiresWriterPermission` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewersCanCopyContent")]
		public System.Nullable<System.Boolean> ViewersCanCopyContent { get; set; }
		
		/// <summary>
		/// Output only. A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webContentLink")]
		public string WebContentLink { get; set; }
		
		/// <summary>
		/// Output only. A link for opening the file in a relevant Google editor or viewer in a browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webViewLink")]
		public string WebViewLink { get; set; }
		
		/// <summary>
		/// Whether users with only `writer` permission can modify the file's permissions. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writersCanShare")]
		public System.Nullable<System.Boolean> WritersCanShare { get; set; }
	}
	
	public class FileCapabilities
	{
		
		/// <summary>
		/// Output only. Whether the current user is the pending owner of the file. Not populated for shared drive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAcceptOwnership")]
		public System.Nullable<System.Boolean> CanAcceptOwnership { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add children to this folder. This is always false when the item is not a folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddChildren")]
		public System.Nullable<System.Boolean> CanAddChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add a folder from another drive (different shared drive or My Drive) to this folder. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddFolderFromAnotherDrive")]
		public System.Nullable<System.Boolean> CanAddFolderFromAnotherDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add a parent for the item without removing an existing parent in the same request. Not populated for shared drive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddMyDriveParent")]
		public System.Nullable<System.Boolean> CanAddMyDriveParent { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeCopyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CanChangeCopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the securityUpdateEnabled field on link share metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeSecurityUpdateEnabled")]
		public System.Nullable<System.Boolean> CanChangeSecurityUpdateEnabled { get; set; }
		
		/// <summary>
		/// Deprecated: Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeViewersCanCopyContent")]
		public System.Nullable<System.Boolean> CanChangeViewersCanCopyContent { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can comment on this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can copy this file. For an item in a shared drive, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCopy")]
		public System.Nullable<System.Boolean> CanCopy { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDelete")]
		public System.Nullable<System.Boolean> CanDelete { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteChildren")]
		public System.Nullable<System.Boolean> CanDeleteChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can download this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDownload")]
		public System.Nullable<System.Boolean> CanDownload { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can edit this file. Other factors may limit the type of changes a user can make to a file. For example, see `canChangeCopyRequiresWriterPermission` or `canModifyContent`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can list the children of this folder. This is always false when the item is not a folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canListChildren")]
		public System.Nullable<System.Boolean> CanListChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can modify the content of this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyContent")]
		public System.Nullable<System.Boolean> CanModifyContent { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use one of `canModifyEditorContentRestriction`, `canModifyOwnerContentRestriction` or `canRemoveContentRestriction`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyContentRestriction")]
		public System.Nullable<System.Boolean> CanModifyContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add or modify content restrictions on the file which are editor restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyEditorContentRestriction")]
		public System.Nullable<System.Boolean> CanModifyEditorContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can modify the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyLabels")]
		public System.Nullable<System.Boolean> CanModifyLabels { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add or modify content restrictions which are owner restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyOwnerContentRestriction")]
		public System.Nullable<System.Boolean> CanModifyOwnerContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move children of this folder outside of the shared drive. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenOutOfDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenOutOfDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canMoveChildrenOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenOutOfTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenOutOfTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move children of this folder within this drive. This is false when the item is not a folder. Note that a request to move the child may still fail depending on the current user's access to the child and to the destination folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenWithinDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenWithinDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canMoveChildrenWithinDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenWithinTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenWithinTeamDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canMoveItemOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemIntoTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveItemIntoTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move this item outside of this drive by changing its parent. Note that a request to change the parent of the item may still fail depending on the new parent that is being added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemOutOfDrive")]
		public System.Nullable<System.Boolean> CanMoveItemOutOfDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canMoveItemOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemOutOfTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveItemOutOfTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move this item within this drive. Note that a request to change the parent of the item may still fail depending on the new parent that is being added and the parent that is being removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemWithinDrive")]
		public System.Nullable<System.Boolean> CanMoveItemWithinDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canMoveItemWithinDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemWithinTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveItemWithinTeamDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canMoveItemWithinDrive` or `canMoveItemOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveTeamDriveItem")]
		public System.Nullable<System.Boolean> CanMoveTeamDriveItem { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the shared drive to which this file belongs. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadDrive")]
		public System.Nullable<System.Boolean> CanReadDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadLabels")]
		public System.Nullable<System.Boolean> CanReadLabels { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the revisions resource of this file. For a shared drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `canReadDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadTeamDrive")]
		public System.Nullable<System.Boolean> CanReadTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can remove children from this folder. This is always false when the item is not a folder. For a folder in a shared drive, use `canDeleteChildren` or `canTrashChildren` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveChildren")]
		public System.Nullable<System.Boolean> CanRemoveChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether there is a content restriction on the file that can be removed by the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveContentRestriction")]
		public System.Nullable<System.Boolean> CanRemoveContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can remove a parent from the item without adding another parent in the same request. Not populated for shared drive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveMyDriveParent")]
		public System.Nullable<System.Boolean> CanRemoveMyDriveParent { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can rename this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRename")]
		public System.Nullable<System.Boolean> CanRename { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can modify the sharing settings for this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move this file to trash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrash")]
		public System.Nullable<System.Boolean> CanTrash { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can trash children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrashChildren")]
		public System.Nullable<System.Boolean> CanTrashChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can restore this file from trash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canUntrash")]
		public System.Nullable<System.Boolean> CanUntrash { get; set; }
	}
	
	public class FileContentHints
	{
		
		/// <summary>
		/// Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length and may contain HTML elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexableText")]
		public string IndexableText { get; set; }
		
		/// <summary>
		/// A thumbnail for the file. This will only be used if Google Drive cannot generate a standard thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public FileContentHintsThumbnail Thumbnail { get; set; }
	}
	
	public class FileContentHintsThumbnail
	{
		
		/// <summary>
		/// The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The MIME type of the thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// A restriction for accessing the content of the file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentRestriction
	{
		
		/// <summary>
		/// Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerRestricted")]
		public System.Nullable<System.Boolean> OwnerRestricted { get; set; }
		
		/// <summary>
		/// Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictingUser")]
		public User RestrictingUser { get; set; }
		
		/// <summary>
		/// The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictionTime")]
		public System.Nullable<System.DateTimeOffset> RestrictionTime { get; set; }
		
		/// <summary>
		/// Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemRestricted")]
		public System.Nullable<System.Boolean> SystemRestricted { get; set; }
		
		/// <summary>
		/// Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class FileImageMediaMetadata
	{
		
		/// <summary>
		/// Output only. The aperture used to create the photo (f-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aperture")]
		public System.Nullable<System.Single> Aperture { get; set; }
		
		/// <summary>
		/// Output only. The make of the camera used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraMake")]
		public string CameraMake { get; set; }
		
		/// <summary>
		/// Output only. The model of the camera used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraModel")]
		public string CameraModel { get; set; }
		
		/// <summary>
		/// Output only. The color space of the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorSpace")]
		public string ColorSpace { get; set; }
		
		/// <summary>
		/// Output only. The exposure bias of the photo (APEX value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureBias")]
		public System.Nullable<System.Single> ExposureBias { get; set; }
		
		/// <summary>
		/// Output only. The exposure mode used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureMode")]
		public string ExposureMode { get; set; }
		
		/// <summary>
		/// Output only. The length of the exposure, in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureTime")]
		public System.Nullable<System.Single> ExposureTime { get; set; }
		
		/// <summary>
		/// Output only. Whether a flash was used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flashUsed")]
		public System.Nullable<System.Boolean> FlashUsed { get; set; }
		
		/// <summary>
		/// Output only. The focal length used to create the photo, in millimeters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="focalLength")]
		public System.Nullable<System.Single> FocalLength { get; set; }
		
		/// <summary>
		/// Output only. The height of the image in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Output only. The ISO speed used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isoSpeed")]
		public System.Nullable<System.Int32> IsoSpeed { get; set; }
		
		/// <summary>
		/// Output only. The lens used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lens")]
		public string Lens { get; set; }
		
		/// <summary>
		/// Output only. Geographic location information stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public FileImageMediaMetadataLocation Location { get; set; }
		
		/// <summary>
		/// Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxApertureValue")]
		public System.Nullable<System.Single> MaxApertureValue { get; set; }
		
		/// <summary>
		/// Output only. The metering mode used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meteringMode")]
		public string MeteringMode { get; set; }
		
		/// <summary>
		/// Output only. The number of clockwise 90 degree rotations applied from the image's original orientation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<System.Int32> Rotation { get; set; }
		
		/// <summary>
		/// Output only. The type of sensor used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensor")]
		public string Sensor { get; set; }
		
		/// <summary>
		/// Output only. The distance to the subject of the photo, in meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectDistance")]
		public System.Nullable<System.Int32> SubjectDistance { get; set; }
		
		/// <summary>
		/// Output only. The date and time the photo was taken (EXIF DateTime).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// Output only. The white balance mode used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whiteBalance")]
		public string WhiteBalance { get; set; }
		
		/// <summary>
		/// Output only. The width of the image in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class FileImageMediaMetadataLocation
	{
		
		/// <summary>
		/// Output only. The altitude stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		/// <summary>
		/// Output only. The latitude stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Output only. The longitude stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class FileLabelInfo
	{
		
		/// <summary>
		/// Output only. The set of labels on the file as requested by the label IDs in the `includeLabels` parameter. By default, no labels are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
	}
	
	/// <summary>
	/// Representation of label and label fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		/// <summary>
		/// A map of the fields on the label, keyed by the field's ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, LabelField> Fields { get; set; }
		
		/// <summary>
		/// The ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is always drive#label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The revision ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Representation of field, which is a typed key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelField
	{
		
		/// <summary>
		/// Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateString")]
		public string[] DateString { get; set; }
		
		/// <summary>
		/// The identifier of this label field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `integer`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integer")]
		public string[] Integer { get; set; }
		
		/// <summary>
		/// This is always drive#labelField.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `selection`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection")]
		public string[] Selection { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `text`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string[] Text { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `user`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User[] User { get; set; }
		
		/// <summary>
		/// The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public string ValueType { get; set; }
	}
	
	public class FileLinkShareMetadata
	{
		
		/// <summary>
		/// Output only. Whether the file is eligible for security update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityUpdateEligible")]
		public System.Nullable<System.Boolean> SecurityUpdateEligible { get; set; }
		
		/// <summary>
		/// Output only. Whether the security update is enabled for this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityUpdateEnabled")]
		public System.Nullable<System.Boolean> SecurityUpdateEnabled { get; set; }
	}
	
	/// <summary>
	/// A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as `permissions.update`) require a `permissionId`. Use the `permissions.list` method to retrieve the ID for a file, folder, or shared drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Permission
	{
		
		/// <summary>
		/// Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type `domain` or `anyone`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowFileDiscovery")]
		public System.Nullable<System.Boolean> AllowFileDiscovery { get; set; }
		
		/// <summary>
		/// Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. The "pretty" name of the value of the permission. The following is a list of examples for each type of permission: * `user` - User's full name, as defined for their Google account, such as "Joe Smith." * `group` - Name of the Google Group, such as "The Company Administrators." * `domain` - String domain name, such as "thecompany.com." * `anyone` - No `displayName` is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The domain to which this permission refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The email address of the user or group to which this permission refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions: - They can only be set on user and group permissions - The time must be in the future - The time cannot be more than a year in the future
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Output only. The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as `permissionId`. IDs should be treated as opaque values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#permission"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#permission")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#permission";
		
		/// <summary>
		/// Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingOwner")]
		public System.Nullable<System.Boolean> PendingOwner { get; set; }
		
		/// <summary>
		/// Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionDetails")]
		public PermissionPermissionDetails[] PermissionPermissionDetails { get; set; }
		
		/// <summary>
		/// Output only. A link to the user's profile photo, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoLink")]
		public string PhotoLink { get; set; }
		
		/// <summary>
		/// The role granted by this permission. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Output only. Use `permissionDetails` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrivePermissionDetails")]
		public PermissionTeamDrivePermissionDetails[] PermissionTeamDrivePermissionDetails { get; set; }
		
		/// <summary>
		/// The type of the grantee. Valid values are: * `user` * `group` * `domain` * `anyone` When creating a permission, if `type` is `user` or `group`, you must provide an `emailAddress` for the user or group. When `type` is `domain`, you must provide a `domain`. There isn't extra information required for an `anyone` type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Indicates the view for this permission. Only populated for permissions that belong to a view. 'published' is the only supported value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public string View { get; set; }
	}
	
	public class PermissionPermissionDetails
	{
		
		/// <summary>
		/// Output only. Whether this permission is inherited. This field is always populated. This is an output-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inherited")]
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// Output only. The ID of the item from which this permission is inherited. This is an output-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritedFrom")]
		public string InheritedFrom { get; set; }
		
		/// <summary>
		/// Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public string PermissionType { get; set; }
		
		/// <summary>
		/// Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	public class PermissionTeamDrivePermissionDetails
	{
		
		/// <summary>
		/// Deprecated: Output only. Use `permissionDetails/inherited` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inherited")]
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `permissionDetails/inheritedFrom` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritedFrom")]
		public string InheritedFrom { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `permissionDetails/role` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use `permissionDetails/permissionType` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrivePermissionType")]
		public string TeamDrivePermissionType { get; set; }
	}
	
	public class FileShortcutDetails
	{
		
		/// <summary>
		/// The ID of the file that this shortcut points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		/// <summary>
		/// Output only. The MIME type of the file that this shortcut points to. The value of this field is a snapshot of the target's MIME type, captured when the shortcut is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetMimeType")]
		public string TargetMimeType { get; set; }
		
		/// <summary>
		/// Output only. The ResourceKey for the target file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceKey")]
		public string TargetResourceKey { get; set; }
	}
	
	public class FileVideoMediaMetadata
	{
		
		/// <summary>
		/// Output only. The duration of the video in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMillis")]
		public string DurationMillis { get; set; }
		
		/// <summary>
		/// Output only. The height of the video in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Output only. The width of the video in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Deprecated: use the drive collection instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamDrive
	{
		
		/// <summary>
		/// An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on `drive.teamdrives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageFile")]
		public TeamDriveBackgroundImageFile BackgroundImageFile { get; set; }
		
		/// <summary>
		/// A short-lived link to this Team Drive's background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// Capabilities the current user has on this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public TeamDriveCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// The color of this Team Drive as an RGB hex string. It can only be set on a `drive.teamdrives.update` request that does not set `themeId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// The time at which the Team Drive was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#teamDrive"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#teamDrive")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#teamDrive";
		
		/// <summary>
		/// The name of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// A set of restrictions that apply to this Team Drive or items inside this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public TeamDriveRestrictions Restrictions { get; set; }
		
		/// <summary>
		/// The ID of the theme from which the background image and color will be set. The set of possible `teamDriveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.teamdrives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	public class TeamDriveBackgroundImageFile
	{
		
		/// <summary>
		/// The ID of an image file in Drive to use for the background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
		
		/// <summary>
		/// The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xCoordinate")]
		public System.Nullable<System.Single> XCoordinate { get; set; }
		
		/// <summary>
		/// The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yCoordinate")]
		public System.Nullable<System.Single> YCoordinate { get; set; }
	}
	
	public class TeamDriveCapabilities
	{
		
		/// <summary>
		/// Whether the current user can add children to folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddChildren")]
		public System.Nullable<System.Boolean> CanAddChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `copyRequiresWriterPermission` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeCopyRequiresWriterPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeCopyRequiresWriterPermissionRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `domainUsersOnly` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDomainUsersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeDomainUsersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeSharingFoldersRequiresOrganizerPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeSharingFoldersRequiresOrganizerPermissionRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can change the background of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeTeamDriveBackground")]
		public System.Nullable<System.Boolean> CanChangeTeamDriveBackground { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `teamMembersOnly` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeTeamMembersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeTeamMembersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can comment on files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Whether the current user can copy files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCopy")]
		public System.Nullable<System.Boolean> CanCopy { get; set; }
		
		/// <summary>
		/// Whether the current user can delete children from folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteChildren")]
		public System.Nullable<System.Boolean> CanDeleteChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can delete this Team Drive. Attempting to delete the Team Drive may still fail if there are untrashed items inside the Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteTeamDrive")]
		public System.Nullable<System.Boolean> CanDeleteTeamDrive { get; set; }
		
		/// <summary>
		/// Whether the current user can download files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDownload")]
		public System.Nullable<System.Boolean> CanDownload { get; set; }
		
		/// <summary>
		/// Whether the current user can edit files in this Team Drive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Whether the current user can list the children of folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canListChildren")]
		public System.Nullable<System.Boolean> CanListChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can add members to this Team Drive or remove them or change their role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		/// <summary>
		/// Whether the current user can read the revisions resource of files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Deprecated: Use `canDeleteChildren` or `canTrashChildren` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveChildren")]
		public System.Nullable<System.Boolean> CanRemoveChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can rename files or folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRename")]
		public System.Nullable<System.Boolean> CanRename { get; set; }
		
		/// <summary>
		/// Whether the current user can rename this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRenameTeamDrive")]
		public System.Nullable<System.Boolean> CanRenameTeamDrive { get; set; }
		
		/// <summary>
		/// Whether the current user can reset the Team Drive restrictions to defaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canResetTeamDriveRestrictions")]
		public System.Nullable<System.Boolean> CanResetTeamDriveRestrictions { get; set; }
		
		/// <summary>
		/// Whether the current user can share files or folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
		
		/// <summary>
		/// Whether the current user can trash children from folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrashChildren")]
		public System.Nullable<System.Boolean> CanTrashChildren { get; set; }
	}
	
	public class TeamDriveRestrictions
	{
		
		/// <summary>
		/// Whether administrative privileges on this Team Drive are required to modify restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminManagedRestrictions")]
		public System.Nullable<System.Boolean> AdminManagedRestrictions { get; set; }
		
		/// <summary>
		/// Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUsersOnly")]
		public System.Nullable<System.Boolean> DomainUsersOnly { get; set; }
		
		/// <summary>
		/// If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingFoldersRequiresOrganizerPermission")]
		public System.Nullable<System.Boolean> SharingFoldersRequiresOrganizerPermission { get; set; }
		
		/// <summary>
		/// Whether access to items inside this Team Drive is restricted to members of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMembersOnly")]
		public System.Nullable<System.Boolean> TeamMembersOnly { get; set; }
	}
	
	/// <summary>
	/// A list of changes for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeList
	{
		
		/// <summary>
		/// The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public Change[] Changes { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#changeList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#changeList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#changeList";
		
		/// <summary>
		/// The starting page token for future changes. This will be present only if the end of the current changes list has been reached. The page token doesn't expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newStartPageToken")]
		public string NewStartPageToken { get; set; }
		
		/// <summary>
		/// The page token for the next page of changes. This will be absent if the end of the changes list has been reached. The page token doesn't expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A notification channel used to watch for resource changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// The address where notifications are delivered for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// A UUID or similar unique string that identifies this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.
		/// </summary>
		[System.ComponentModel.DefaultValue("api#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "api#channel";
		
		/// <summary>
		/// Additional parameters controlling delivery channel behavior. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		/// <summary>
		/// A Boolean value to indicate whether payload is wanted. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Nullable<System.Boolean> Payload { get; set; }
		
		/// <summary>
		/// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A version-specific identifier for the watched resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of delivery mechanism used for this channel. Valid values are "web_hook" or "webhook".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A comment on a file. Some resource methods (such as `comments.update`) require a `commentId`. Use the `comments.list` method to retrieve the ID for a comment in a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		/// <summary>
		/// A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anchor")]
		public string Anchor { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		/// <summary>
		/// The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The time at which the comment was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Output only. Whether the comment has been deleted. A deleted comment has no content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. The content of the comment with HTML formatting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlContent")]
		public string HtmlContent { get; set; }
		
		/// <summary>
		/// Output only. The ID of the comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#comment"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#comment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#comment";
		
		/// <summary>
		/// The last time the comment or any of its replies was modified (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
		
		/// <summary>
		/// The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedFileContent")]
		public CommentQuotedFileContent QuotedFileContent { get; set; }
		
		/// <summary>
		/// Output only. The full list of replies to the comment in chronological order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Reply[] Replies { get; set; }
		
		/// <summary>
		/// Output only. Whether the comment has been resolved by one of its replies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolved")]
		public System.Nullable<System.Boolean> Resolved { get; set; }
	}
	
	public class CommentQuotedFileContent
	{
		
		/// <summary>
		/// The MIME type of the quoted content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The quoted content itself. This is interpreted as plain text if set through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A reply to a comment on a file. Some resource methods (such as `replies.update`) require a `replyId`. Use the `replies.list` method to retrieve the ID for a reply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reply
	{
		
		/// <summary>
		/// The action the reply performed to the parent comment. Valid values are: * `resolve` * `reopen`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		/// <summary>
		/// The plain text content of the reply. This field is used for setting the content, while `htmlContent` should be displayed. This is required on creates if no `action` is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The time at which the reply was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Output only. Whether the reply has been deleted. A deleted reply has no content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. The content of the reply with HTML formatting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlContent")]
		public string HtmlContent { get; set; }
		
		/// <summary>
		/// Output only. The ID of the reply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#reply"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#reply")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#reply";
		
		/// <summary>
		/// The last time the reply was modified (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
	}
	
	/// <summary>
	/// A list of comments on a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentList
	{
		
		/// <summary>
		/// The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#commentList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#commentList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#commentList";
		
		/// <summary>
		/// The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of shared drives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriveList
	{
		
		/// <summary>
		/// The list of shared drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drives")]
		public Drive[] Drives { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#driveList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#driveList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#driveList";
		
		/// <summary>
		/// The page token for the next page of shared drives. This will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileList
	{
		
		/// <summary>
		/// The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
		
		/// <summary>
		/// Whether the search process was incomplete. If true, then some search results might be missing, since all documents were not searched. This can occur when searching multiple drives with the 'allDrives' corpora, but all corpora couldn't be searched. When this happens, it's suggested that clients narrow their query by choosing a different corpus such as 'user' or 'drive'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompleteSearch")]
		public System.Nullable<System.Boolean> IncompleteSearch { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#fileList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#fileList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#fileList";
		
		/// <summary>
		/// The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of generated file IDs which can be provided in create requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeneratedIds
	{
		
		/// <summary>
		/// The IDs generated for the requesting user in the specified space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#generatedIds"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#generatedIds")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#generatedIds";
		
		/// <summary>
		/// The type of file that can be created with these IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="space")]
		public string Space { get; set; }
	}
	
	/// <summary>
	/// A modification to a label's field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelFieldModification
	{
		
		/// <summary>
		/// The ID of the field to be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldId")]
		public string FieldId { get; set; }
		
		/// <summary>
		/// This is always drive#labelFieldModification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setDateValues")]
		public string[] SetDateValues { get; set; }
		
		/// <summary>
		/// Replaces the value of an `integer` field with these new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setIntegerValues")]
		public string[] SetIntegerValues { get; set; }
		
		/// <summary>
		/// Replaces a `selection` field with these new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setSelectionValues")]
		public string[] SetSelectionValues { get; set; }
		
		/// <summary>
		/// Sets the value of a `text` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setTextValues")]
		public string[] SetTextValues { get; set; }
		
		/// <summary>
		/// Replaces a `user` field with these new values. The values must be valid email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setUserValues")]
		public string[] SetUserValues { get; set; }
		
		/// <summary>
		/// Unsets the values for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsetValues")]
		public System.Nullable<System.Boolean> UnsetValues { get; set; }
	}
	
	/// <summary>
	/// A list of labels applied to a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelList
	{
		
		/// <summary>
		/// This is always drive#labelList
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		/// <summary>
		/// The page token for the next page of labels. This field will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A modification to a label on a file. A LabelModification can be used to apply a label to a file, update an existing label on a file, or remove a label from a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelModification
	{
		
		/// <summary>
		/// The list of modifications to this label's fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldModifications")]
		public LabelFieldModification[] FieldModifications { get; set; }
		
		/// <summary>
		/// This is always drive#labelModification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID of the label to modify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelId")]
		public string LabelId { get; set; }
		
		/// <summary>
		/// If true, the label will be removed from the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLabel")]
		public System.Nullable<System.Boolean> RemoveLabel { get; set; }
	}
	
	/// <summary>
	/// A request to modify the set of labels on a file. This request may contain many modifications that will either all succeed or all fail atomically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyLabelsRequest
	{
		
		/// <summary>
		/// This is always drive#modifyLabelsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of modifications to apply to the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelModifications")]
		public LabelModification[] LabelModifications { get; set; }
	}
	
	/// <summary>
	/// Response to a ModifyLabels request. This contains only those labels which were added or updated by the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyLabelsResponse
	{
		
		/// <summary>
		/// This is always drive#modifyLabelsResponse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of labels which were added or updated by the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedLabels")]
		public Label[] ModifiedLabels { get; set; }
	}
	
	/// <summary>
	/// A list of permissions for a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionList
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#permissionList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#permissionList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#permissionList";
		
		/// <summary>
		/// The page token for the next page of permissions. This field will be absent if the end of the permissions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of permissions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions { get; set; }
	}
	
	/// <summary>
	/// A list of replies to a comment on a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplyList
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#replyList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#replyList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#replyList";
		
		/// <summary>
		/// The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Reply[] Replies { get; set; }
	}
	
	/// <summary>
	/// The metadata for a revision to a file. Some resource methods (such as `revisions.update`) require a `revisionId`. Use the `revisions.list` method to retrieve the ID for a revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Revision
	{
		
		/// <summary>
		/// Output only. Links for exporting Docs Editors files to specific formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportLinks")]
		public System.Collections.Generic.Dictionary<string, string> ExportLinks { get; set; }
		
		/// <summary>
		/// Output only. The ID of the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepForever")]
		public System.Nullable<System.Boolean> KeepForever { get; set; }
		
		/// <summary>
		/// Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#revision"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#revision")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#revision";
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyingUser")]
		public User LastModifyingUser { get; set; }
		
		/// <summary>
		/// Output only. The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Checksum")]
		public string Md5Checksum { get; set; }
		
		/// <summary>
		/// Output only. The MIME type of the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The last time the revision was modified (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
		
		/// <summary>
		/// Output only. The original filename used to create this revision. This is only applicable to files with binary content in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalFilename")]
		public string OriginalFilename { get; set; }
		
		/// <summary>
		/// Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishAuto")]
		public System.Nullable<System.Boolean> PublishAuto { get; set; }
		
		/// <summary>
		/// Whether this revision is published. This is only applicable to Docs Editors files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public System.Nullable<System.Boolean> Published { get; set; }
		
		/// <summary>
		/// Output only. A link to the published revision. This is only populated for Google Sites files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedLink")]
		public string PublishedLink { get; set; }
		
		/// <summary>
		/// Whether this revision is published outside the domain. This is only applicable to Docs Editors files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedOutsideDomain")]
		public System.Nullable<System.Boolean> PublishedOutsideDomain { get; set; }
		
		/// <summary>
		/// Output only. The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	/// <summary>
	/// A list of revisions of a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevisionList
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#revisionList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#revisionList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#revisionList";
		
		/// <summary>
		/// The page token for the next page of revisions. This will be absent if the end of the revisions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public Revision[] Revisions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartPageToken
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#startPageToken"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#startPageToken")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#startPageToken";
		
		/// <summary>
		/// The starting page token for listing future changes. The page token doesn't expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startPageToken")]
		public string StartPageToken1 { get; set; }
	}
	
	/// <summary>
	/// A list of Team Drives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamDriveList
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#teamDriveList"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#teamDriveList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#teamDriveList";
		
		/// <summary>
		/// The page token for the next page of Team Drives. This will be absent if the end of the Team Drives list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of Team Drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrives")]
		public TeamDrive[] TeamDrives { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets information about the user, the user's Drive, and system capabilities.
		/// Drive_about_get about
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<About> Drive_about_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "about";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<About>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the changes for a user or shared drive.
		/// Drive_changes_list changes
		/// </summary>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.</param>
		/// <param name="driveId">The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.</param>
		/// <param name="includeCorpusRemovals">Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.</param>
		/// <param name="includeItemsFromAllDrives">Whether both My Drive and shared drive items should be included in results.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="includeRemoved">Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.</param>
		/// <param name="includeTeamDriveItems">Deprecated: Use `includeItemsFromAllDrives` instead.</param>
		/// <param name="pageSize">The maximum number of changes to return per page.</param>
		/// <param name="restrictToMyDrive">Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive.</param>
		/// <param name="spaces">A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<ChangeList> Drive_changes_listAsync(string pageToken, string driveId, bool includeCorpusRemovals, bool includeItemsFromAllDrives, string includeLabels, string includePermissionsForView, bool includeRemoved, bool includeTeamDriveItems, int pageSize, bool restrictToMyDrive, string spaces, bool supportsAllDrives, bool supportsTeamDrives, string teamDriveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&includeCorpusRemovals="+includeCorpusRemovals+"&includeItemsFromAllDrives="+includeItemsFromAllDrives+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&includeRemoved="+includeRemoved+"&includeTeamDriveItems="+includeTeamDriveItems+"&pageSize="+pageSize+"&restrictToMyDrive="+restrictToMyDrive+"&spaces=" + (spaces==null? "" : System.Uri.EscapeDataString(spaces))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChangeList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the starting pageToken for listing future changes.
		/// Drive_changes_getStartPageToken changes/startPageToken
		/// </summary>
		/// <param name="driveId">The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<StartPageToken> Drive_changes_getStartPageTokenAsync(string driveId, bool supportsAllDrives, bool supportsTeamDrives, string teamDriveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes/startPageToken?driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPageToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribes to changes for a user.
		/// Drive_changes_watch changes/watch
		/// </summary>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.</param>
		/// <param name="driveId">The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.</param>
		/// <param name="includeCorpusRemovals">Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.</param>
		/// <param name="includeItemsFromAllDrives">Whether both My Drive and shared drive items should be included in results.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="includeRemoved">Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.</param>
		/// <param name="includeTeamDriveItems">Deprecated: Use `includeItemsFromAllDrives` instead.</param>
		/// <param name="pageSize">The maximum number of changes to return per page.</param>
		/// <param name="restrictToMyDrive">Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive.</param>
		/// <param name="spaces">A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Drive_changes_watchAsync(
					string pageToken, 
					string driveId, 
					bool includeCorpusRemovals, 
					bool includeItemsFromAllDrives, 
					string includeLabels, 
					string includePermissionsForView, 
					bool includeRemoved, 
					bool includeTeamDriveItems, 
					int pageSize, 
					bool restrictToMyDrive, 
					string spaces, 
					bool supportsAllDrives, 
					bool supportsTeamDrives, 
					string teamDriveId, 
					Channel requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes/watch?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&includeCorpusRemovals="+includeCorpusRemovals+"&includeItemsFromAllDrives="+includeItemsFromAllDrives+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&includeRemoved="+includeRemoved+"&includeTeamDriveItems="+includeTeamDriveItems+"&pageSize="+pageSize+"&restrictToMyDrive="+restrictToMyDrive+"&spaces=" + (spaces==null? "" : System.Uri.EscapeDataString(spaces))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops watching resources through this channel.
		/// Drive_channels_stop channels/stop
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Drive_channels_stopAsync(Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the user's shared drives. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/drive/api/guides/search-shareddrives) guide.
		/// Drive_drives_list drives
		/// </summary>
		/// <param name="pageSize">Maximum number of shared drives to return per page.</param>
		/// <param name="pageToken">Page token for shared drives.</param>
		/// <param name="q">Query string for searching shared drives.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then all shared drives of the domain in which the requester is an administrator are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<DriveList> Drive_drives_listAsync(int pageSize, string pageToken, string q, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DriveList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a shared drive.
		/// Drive_drives_create drives
		/// </summary>
		/// <param name="requestId">Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_createAsync(string requestId, Drive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives?requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a shared drive for which the user is an `organizer`. The shared drive cannot contain any untrashed items.
		/// Drive_drives_delete drives/{driveId}
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <param name="allowItemDeletion">Whether any items inside the shared drive should also be deleted. This option is only supported when `useDomainAdminAccess` is also set to `true`.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_drives_deleteAsync(string driveId, bool allowItemDeletion, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&allowItemDeletion="+allowItemDeletion+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a shared drive's metadata by ID.
		/// Drive_drives_get drives/{driveId}
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_getAsync(string driveId, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the metadate for a shared drive.
		/// Drive_drives_update drives/{driveId}
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_updateAsync(string driveId, bool useDomainAdminAccess, Drive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Hides a shared drive from the default view.
		/// Drive_drives_hide drives/{driveId}/hide
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_hideAsync(string driveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"/hide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a shared drive to the default view.
		/// Drive_drives_unhide drives/{driveId}/unhide
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_unhideAsync(string driveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"/unhide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the user's files. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for files & folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don't want trashed files to appear in the list, use the `trashed=false` query parameter to remove trashed files from the results.
		/// Drive_files_list files
		/// </summary>
		/// <param name="corpora">Bodies of items (files/documents) to which the query applies. Supported bodies are 'user', 'domain', 'drive', and 'allDrives'. Prefer 'user' or 'drive' to 'allDrives' for efficiency. By default, corpora is set to 'user'. However, this can change depending on the filter set through the 'q' parameter.</param>
		/// <param name="corpus">Deprecated: The source of files to list. Use 'corpora' instead.</param>
		/// <param name="driveId">ID of the shared drive to search.</param>
		/// <param name="includeItemsFromAllDrives">Whether both My Drive and shared drive items should be included in results.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="includeTeamDriveItems">Deprecated: Use `includeItemsFromAllDrives` instead.</param>
		/// <param name="orderBy">A comma-separated list of sort keys. Valid keys are 'createdTime', 'folder', 'modifiedByMeTime', 'modifiedTime', 'name', 'name_natural', 'quotaBytesUsed', 'recency', 'sharedWithMeTime', 'starred', and 'viewedByMeTime'. Each key sorts ascending by default, but can be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedTime desc,name.</param>
		/// <param name="pageSize">The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.</param>
		/// <param name="q">A query for filtering the file results. See the "Search for files & folders" guide for supported syntax.</param>
		/// <param name="spaces">A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<FileList> Drive_files_listAsync(
					string corpora, 
					Drive_files_listCorpus corpus, 
					string driveId, 
					bool includeItemsFromAllDrives, 
					string includeLabels, 
					string includePermissionsForView, 
					bool includeTeamDriveItems, 
					string orderBy, 
					int pageSize, 
					string pageToken, 
					string q, 
					string spaces, 
					bool supportsAllDrives, 
					bool supportsTeamDrives, 
					string teamDriveId, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files?corpora=" + (corpora==null? "" : System.Uri.EscapeDataString(corpora))+"&corpus=" + corpus+"&driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&includeItemsFromAllDrives="+includeItemsFromAllDrives+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&includeTeamDriveItems="+includeTeamDriveItems+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&spaces=" + (spaces==null? "" : System.Uri.EscapeDataString(spaces))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FileList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a set of file IDs which can be provided in create or copy requests.
		/// Drive_files_generateIds files/generateIds
		/// </summary>
		/// <param name="count">The number of IDs to return.</param>
		/// <param name="space">The space in which the IDs can be used to create new files. Supported values are 'drive' and 'appDataFolder'. (Default: 'drive')</param>
		/// <param name="type">The type of items which the IDs can be used for. Supported values are 'files' and 'shortcuts'. Note that 'shortcuts' are only supported in the `drive` 'space'. (Default: 'files')</param>
		/// <returns>Successful response</returns>
		public async Task<GeneratedIds> Drive_files_generateIdsAsync(int count, string space, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/generateIds?count="+count+"&space=" + (space==null? "" : System.Uri.EscapeDataString(space))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GeneratedIds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes all of the user's trashed files.
		/// Drive_files_emptyTrash files/trash
		/// </summary>
		/// <param name="driveId">If set, empties the trash of the provided shared drive.</param>
		/// <param name="enforceSingleParent">Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item will be placed under its owner's root.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_files_emptyTrashAsync(string driveId, bool enforceSingleParent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/trash?driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&enforceSingleParent="+enforceSingleParent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an `organizer` on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
		/// Drive_files_delete files/{fileId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="enforceSingleParent">Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item will be placed under its owner's root.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_files_deleteAsync(string fileId, bool enforceSingleParent, bool supportsAllDrives, bool supportsTeamDrives, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"&enforceSingleParent="+enforceSingleParent+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a file's metadata or content by ID. If you provide the URL parameter `alt=media`, then the response includes the file contents in the response body. Downloading content with `alt=media` only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [`files.export`](/drive/api/reference/rest/v3/files/export) instead. For more information, see [Download & export files](/drive/api/guides/manage-downloads).
		/// Drive_files_get files/{fileId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="acknowledgeAbuse">Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_getAsync(string fileId, bool acknowledgeAbuse, string includeLabels, string includePermissionsForView, bool supportsAllDrives, bool supportsTeamDrives, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"&acknowledgeAbuse="+acknowledgeAbuse+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a file's comments.
		/// Drive_comments_list files/{fileId}/comments
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="includeDeleted">Whether to include deleted comments. Deleted comments will not include their original content.</param>
		/// <param name="pageSize">The maximum number of comments to return per page.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.</param>
		/// <param name="startModifiedTime">The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).</param>
		/// <returns>Successful response</returns>
		public async Task<CommentList> Drive_comments_listAsync(string fileId, bool includeDeleted, int pageSize, string pageToken, string startModifiedTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments&includeDeleted="+includeDeleted+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startModifiedTime=" + (startModifiedTime==null? "" : System.Uri.EscapeDataString(startModifiedTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a comment on a file.
		/// Drive_comments_create files/{fileId}/comments
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_createAsync(string fileId, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Drive_comments_delete files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_comments_deleteAsync(string fileId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a comment by ID.
		/// Drive_comments_get files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="includeDeleted">Whether to return deleted comments. Deleted comments will not include their original content.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_getAsync(string fileId, string commentId, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a comment with patch semantics.
		/// Drive_comments_update files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_updateAsync(string fileId, string commentId, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a comment's replies.
		/// Drive_replies_list files/{fileId}/comments/{commentId}/replies
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="includeDeleted">Whether to include deleted replies. Deleted replies will not include their original content.</param>
		/// <param name="pageSize">The maximum number of replies to return per page.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<ReplyList> Drive_replies_listAsync(string fileId, string commentId, bool includeDeleted, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies&includeDeleted="+includeDeleted+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReplyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a reply to a comment.
		/// Drive_replies_create files/{fileId}/comments/{commentId}/replies
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task<Reply> Drive_replies_createAsync(string fileId, string commentId, Reply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Reply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a reply.
		/// Drive_replies_delete files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_replies_deleteAsync(string fileId, string commentId, string replyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a reply by ID.
		/// Drive_replies_get files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <param name="includeDeleted">Whether to return deleted replies. Deleted replies will not include their original content.</param>
		/// <returns>Successful response</returns>
		public async Task<Reply> Drive_replies_getAsync(string fileId, string commentId, string replyId, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId))+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Reply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a reply with patch semantics.
		/// Drive_replies_update files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <returns>Successful response</returns>
		public async Task<Reply> Drive_replies_updateAsync(string fileId, string commentId, string replyId, Reply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Reply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a copy of a file and applies any requested updates with patch semantics.
		/// Drive_files_copy files/{fileId}/copy
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="enforceSingleParent">Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts instead.</param>
		/// <param name="ignoreDefaultVisibility">Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="keepRevisionForever">Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions.</param>
		/// <param name="ocrLanguage">A language hint for OCR processing during image import (ISO 639-1 code).</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_copyAsync(string fileId, bool enforceSingleParent, bool ignoreDefaultVisibility, string includeLabels, string includePermissionsForView, bool keepRevisionForever, string ocrLanguage, bool supportsAllDrives, bool supportsTeamDrives, File requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/copy&enforceSingleParent="+enforceSingleParent+"&ignoreDefaultVisibility="+ignoreDefaultVisibility+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&keepRevisionForever="+keepRevisionForever+"&ocrLanguage=" + (ocrLanguage==null? "" : System.Uri.EscapeDataString(ocrLanguage))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
		/// Drive_files_export files/{fileId}/export
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="mimeType">Required. The MIME type of the format requested for this export.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_files_exportAsync(string fileId, string mimeType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/export&mimeType=" + (mimeType==null? "" : System.Uri.EscapeDataString(mimeType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the labels on a file.
		/// Drive_files_listLabels files/{fileId}/listLabels
		/// </summary>
		/// <param name="fileId">The ID for the file.</param>
		/// <param name="maxResults">The maximum number of labels to return per page. When not set, defaults to 100.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<LabelList> Drive_files_listLabelsAsync(string fileId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/listLabels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
		/// Drive_files_modifyLabels files/{fileId}/modifyLabels
		/// </summary>
		/// <param name="fileId">The ID of the file to which the labels belong.</param>
		/// <returns>Successful response</returns>
		public async Task<ModifyLabelsResponse> Drive_files_modifyLabelsAsync(string fileId, ModifyLabelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/modifyLabels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ModifyLabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a file's or shared drive's permissions.
		/// Drive_permissions_list files/{fileId}/permissions
		/// </summary>
		/// <param name="fileId">The ID of the file or shared drive.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="pageSize">The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<PermissionList> Drive_permissions_listAsync(string fileId, string includePermissionsForView, int pageSize, string pageToken, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_create files/{fileId}/permissions
		/// </summary>
		/// <param name="fileId">The ID of the file or shared drive.</param>
		/// <param name="emailMessage">A plain text custom message to include in the notification email.</param>
		/// <param name="enforceSingleParent">Deprecated: See `moveToNewOwnersRoot` for details.</param>
		/// <param name="moveToNewOwnersRoot">This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. If set to `true`, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to `false`, parents are not changed.</param>
		/// <param name="sendNotificationEmail">Whether to send a notification email when sharing to users or groups. This defaults to true for users and groups, and is not allowed for other requests. It must not be disabled for ownership transfers.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="transferOwnership">Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_createAsync(string fileId, string emailMessage, bool enforceSingleParent, bool moveToNewOwnersRoot, bool sendNotificationEmail, bool supportsAllDrives, bool supportsTeamDrives, bool transferOwnership, bool useDomainAdminAccess, Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions&emailMessage=" + (emailMessage==null? "" : System.Uri.EscapeDataString(emailMessage))+"&enforceSingleParent="+enforceSingleParent+"&moveToNewOwnersRoot="+moveToNewOwnersRoot+"&sendNotificationEmail="+sendNotificationEmail+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&transferOwnership="+transferOwnership+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_delete files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID of the file or shared drive.</param>
		/// <param name="permissionId">The ID of the permission.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_permissions_deleteAsync(string fileId, string permissionId, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a permission by ID.
		/// Drive_permissions_get files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="permissionId">The ID of the permission.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_getAsync(string fileId, string permissionId, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a permission with patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_update files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID of the file or shared drive.</param>
		/// <param name="permissionId">The ID of the permission.</param>
		/// <param name="removeExpiration">Whether to remove the expiration date.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="transferOwnership">Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_updateAsync(string fileId, string permissionId, bool removeExpiration, bool supportsAllDrives, bool supportsTeamDrives, bool transferOwnership, bool useDomainAdminAccess, Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&removeExpiration="+removeExpiration+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&transferOwnership="+transferOwnership+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a file's revisions.
		/// Drive_revisions_list files/{fileId}/revisions
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="pageSize">The maximum number of revisions to return per page.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<RevisionList> Drive_revisions_listAsync(string fileId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RevisionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted.
		/// Drive_revisions_delete files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="revisionId">The ID of the revision.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_revisions_deleteAsync(string fileId, string revisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a revision's metadata or content by ID.
		/// Drive_revisions_get files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="revisionId">The ID of the revision.</param>
		/// <param name="acknowledgeAbuse">Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.</param>
		/// <returns>Successful response</returns>
		public async Task<Revision> Drive_revisions_getAsync(string fileId, string revisionId, bool acknowledgeAbuse, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId))+"&acknowledgeAbuse="+acknowledgeAbuse;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Revision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a revision with patch semantics.
		/// Drive_revisions_update files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="revisionId">The ID of the revision.</param>
		/// <returns>Successful response</returns>
		public async Task<Revision> Drive_revisions_updateAsync(string fileId, string revisionId, Revision requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Revision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Subscribes to changes to a file.
		/// Drive_files_watch files/{fileId}/watch
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="acknowledgeAbuse">Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when alt=media.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only 'published' is supported.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Drive_files_watchAsync(string fileId, bool acknowledgeAbuse, string includeLabels, string includePermissionsForView, bool supportsAllDrives, bool supportsTeamDrives, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/watch&acknowledgeAbuse="+acknowledgeAbuse+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.list` instead.
		/// Drive_teamdrives_list teamdrives
		/// </summary>
		/// <param name="pageSize">Maximum number of Team Drives to return.</param>
		/// <param name="pageToken">Page token for Team Drives.</param>
		/// <param name="q">Query string for searching Team Drives.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDriveList> Drive_teamdrives_listAsync(int pageSize, string pageToken, string q, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDriveList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.create` instead.
		/// Drive_teamdrives_create teamdrives
		/// </summary>
		/// <param name="requestId">Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDrive> Drive_teamdrives_createAsync(string requestId, TeamDrive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives?requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDrive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.delete` instead.
		/// Drive_teamdrives_delete teamdrives/{teamDriveId}
		/// </summary>
		/// <param name="teamDriveId">The ID of the Team Drive</param>
		/// <returns>Successful response</returns>
		public async Task Drive_teamdrives_deleteAsync(string teamDriveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives/"+ (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.get` instead.
		/// Drive_teamdrives_get teamdrives/{teamDriveId}
		/// </summary>
		/// <param name="teamDriveId">The ID of the Team Drive</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDrive> Drive_teamdrives_getAsync(string teamDriveId, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives/"+ (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDrive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.update` instead.
		/// Drive_teamdrives_update teamdrives/{teamDriveId}
		/// </summary>
		/// <param name="teamDriveId">The ID of the Team Drive</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDrive> Drive_teamdrives_updateAsync(string teamDriveId, bool useDomainAdminAccess, TeamDrive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives/"+ (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDrive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Drive_files_listCorpus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		domain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
