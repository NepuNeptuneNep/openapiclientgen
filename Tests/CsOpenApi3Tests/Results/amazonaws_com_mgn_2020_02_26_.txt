//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Application
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationAggregatedStatus")]
		public ApplicationAggregatedStatus ApplicationAggregatedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public string CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDateTime")]
		public string LastModifiedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	/// <summary>
	/// Application aggregated status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationAggregatedStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthStatus")]
		public ApplicationHealthStatus HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDateTime")]
		public string LastUpdateDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progressStatus")]
		public ApplicationProgressStatus ProgressStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalSourceServers")]
		public System.Nullable<System.Int32> TotalSourceServers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationHealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTHY")]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAGGING")]
		LAGGING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationProgressStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UninitializedAccountException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wave
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public string CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDateTime")]
		public string LastModifiedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveAggregatedStatus")]
		public WaveAggregatedStatus WaveAggregatedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	/// <summary>
	/// Wave aggregated status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WaveAggregatedStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthStatus")]
		public ApplicationHealthStatus HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDateTime")]
		public string LastUpdateDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progressStatus")]
		public ApplicationProgressStatus ProgressStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationStartedDateTime")]
		public string ReplicationStartedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalApplications")]
		public System.Nullable<System.Int32> TotalApplications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateApplicationsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateSourceServersResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationInfo")]
		public DataReplicationInfo DataReplicationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fqdnForActionFramework")]
		public string FqdnForActionFramework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchedInstance")]
		public LaunchedInstance LaunchedInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifeCycle")]
		public LifeCycle LifeCycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationType")]
		public ReplicationType ReplicationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceProperties")]
		public SourceProperties SourceProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userProvidedID")]
		public string UserProvidedID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenterClientID")]
		public string VcenterClientID { get; set; }
	}
	
	/// <summary>
	/// Request data replication info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataReplicationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationError")]
		public DataReplicationError DataReplicationError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationInitiation")]
		public DataReplicationInitiation DataReplicationInitiation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataReplicationState")]
		public DataReplicationState DataReplicationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="etaDateTime")]
		public string EtaDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lagDuration")]
		public string LagDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSnapshotDateTime")]
		public string LastSnapshotDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public DataReplicationInfoReplicatedDisk[] ReplicatedDisks { get; set; }
	}
	
	/// <summary>
	/// Error in data replication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataReplicationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public DataReplicationErrorString Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataReplicationErrorString
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AGENT_NOT_SEEN")]
		AGENT_NOT_SEEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNAPSHOTS_FAILURE")]
		SNAPSHOTS_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CONVERGING")]
		NOT_CONVERGING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSTABLE_NETWORK")]
		UNSTABLE_NETWORK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_CREATE_SECURITY_GROUP")]
		FAILED_TO_CREATE_SECURITY_GROUP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_LAUNCH_REPLICATION_SERVER")]
		FAILED_TO_LAUNCH_REPLICATION_SERVER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_BOOT_REPLICATION_SERVER")]
		FAILED_TO_BOOT_REPLICATION_SERVER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_AUTHENTICATE_WITH_SERVICE")]
		FAILED_TO_AUTHENTICATE_WITH_SERVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE")]
		FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_CREATE_STAGING_DISKS")]
		FAILED_TO_CREATE_STAGING_DISKS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_ATTACH_STAGING_DISKS")]
		FAILED_TO_ATTACH_STAGING_DISKS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT")]
		FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER")]
		FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_START_DATA_TRANSFER")]
		FAILED_TO_START_DATA_TRANSFER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_VM_CONFIGURATION")]
		UNSUPPORTED_VM_CONFIGURATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAST_SNAPSHOT_JOB_FAILED")]
		LAST_SNAPSHOT_JOB_FAILED = 15,
	}
	
	/// <summary>
	/// Data replication initiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataReplicationInitiation
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextAttemptDateTime")]
		public string NextAttemptDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public DataReplicationInitiationStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// Data replication initiation step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataReplicationInitiationStep
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public DataReplicationInitiationStepName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataReplicationInitiationStepStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataReplicationInitiationStepName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WAIT")]
		WAIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_SECURITY_GROUP")]
		CREATE_SECURITY_GROUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCH_REPLICATION_SERVER")]
		LAUNCH_REPLICATION_SERVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOT_REPLICATION_SERVER")]
		BOOT_REPLICATION_SERVER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHENTICATE_WITH_SERVICE")]
		AUTHENTICATE_WITH_SERVICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOWNLOAD_REPLICATION_SOFTWARE")]
		DOWNLOAD_REPLICATION_SOFTWARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_STAGING_DISKS")]
		CREATE_STAGING_DISKS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACH_STAGING_DISKS")]
		ATTACH_STAGING_DISKS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAIR_REPLICATION_SERVER_WITH_AGENT")]
		PAIR_REPLICATION_SERVER_WITH_AGENT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECT_AGENT_TO_REPLICATION_SERVER")]
		CONNECT_AGENT_TO_REPLICATION_SERVER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_DATA_TRANSFER")]
		START_DATA_TRANSFER = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataReplicationInitiationStepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIPPED")]
		SKIPPED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataReplicationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPED")]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIATING")]
		INITIATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIAL_SYNC")]
		INITIAL_SYNC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BACKLOG")]
		BACKLOG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING_SNAPSHOT")]
		CREATING_SNAPSHOT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTINUOUS")]
		CONTINUOUS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSED")]
		PAUSED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESCAN")]
		RESCAN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STALLED")]
		STALLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCONNECTED")]
		DISCONNECTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_SNAPSHOT_SHIPPING")]
		PENDING_SNAPSHOT_SHIPPING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHIPPING_SNAPSHOT")]
		SHIPPING_SNAPSHOT = 11,
	}
	
	/// <summary>
	/// Request to query disks replicated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataReplicationInfoReplicatedDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="backloggedStorageBytes")]
		public System.Nullable<System.Int32> BackloggedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedStorageBytes")]
		public System.Nullable<System.Int32> ReplicatedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rescannedStorageBytes")]
		public System.Nullable<System.Int32> RescannedStorageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalStorageBytes")]
		public System.Nullable<System.Int32> TotalStorageBytes { get; set; }
	}
	
	/// <summary>
	/// Launched instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchedInstance
	{
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceID")]
		public string Ec2InstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstBoot")]
		public FirstBoot FirstBoot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FirstBoot
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WAITING")]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPED")]
		STOPPED = 3,
	}
	
	/// <summary>
	/// Lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycle
	{
		
		[System.Runtime.Serialization.DataMember(Name="addedToServiceDateTime")]
		public string AddedToServiceDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elapsedReplicationDuration")]
		public string ElapsedReplicationDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstByteDateTime")]
		public string FirstByteDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastCutover")]
		public LifeCycleLastCutover LastCutover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSeenByServiceDateTime")]
		public string LastSeenByServiceDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTest")]
		public LifeCycleLastTest LastTest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public LifeCycleState State { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Cutover .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastCutover
	{
		
		[System.Runtime.Serialization.DataMember(Name="finalized")]
		public LifeCycleLastCutoverFinalized Finalized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiated")]
		public LifeCycleLastCutoverInitiated Initiated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverted")]
		public LifeCycleLastCutoverReverted Reverted { get; set; }
	}
	
	/// <summary>
	/// Lifecycle Cutover finalized
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastCutoverFinalized
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Cutover initiated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastCutoverInitiated
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Cutover reverted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastCutoverReverted
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastTest
	{
		
		[System.Runtime.Serialization.DataMember(Name="finalized")]
		public LifeCycleLastTestFinalized Finalized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiated")]
		public LifeCycleLastTestInitiated Initiated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverted")]
		public LifeCycleLastTestReverted Reverted { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Test finalized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastTestFinalized
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Test initiated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastTestInitiated
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
	}
	
	/// <summary>
	/// Lifecycle last Test reverted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifeCycleLastTestReverted
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiCallDateTime")]
		public string ApiCallDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LifeCycleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPED")]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_READY")]
		NOT_READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY_FOR_TEST")]
		READY_FOR_TEST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TESTING")]
		TESTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY_FOR_CUTOVER")]
		READY_FOR_CUTOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUTTING_OVER")]
		CUTTING_OVER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUTOVER")]
		CUTOVER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCONNECTED")]
		DISCONNECTED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOVERED")]
		DISCOVERED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_INSTALLATION")]
		PENDING_INSTALLATION = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AGENT_BASED")]
		AGENT_BASED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNAPSHOT_SHIPPING")]
		SNAPSHOT_SHIPPING = 1,
	}
	
	/// <summary>
	/// Source server properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public CPU[] Cpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public Disk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identificationHints")]
		public IdentificationHints IdentificationHints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public string LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkInterfaces")]
		public NetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public OS Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramBytes")]
		public System.Nullable<System.Int32> RamBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendedInstanceType")]
		public string RecommendedInstanceType { get; set; }
	}
	
	/// <summary>
	/// Source server CPU information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CPU
	{
		
		[System.Runtime.Serialization.DataMember(Name="cores")]
		public System.Nullable<System.Int32> Cores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
	}
	
	/// <summary>
	/// The disk identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Disk
	{
		
		[System.Runtime.Serialization.DataMember(Name="bytes")]
		public System.Nullable<System.Int32> Bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
	}
	
	/// <summary>
	/// Identification hints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentificationHints
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsInstanceID")]
		public string AwsInstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmPath")]
		public string VmPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmWareUuid")]
		public string VmWareUuid { get; set; }
	}
	
	/// <summary>
	/// Network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember(Name="ips")]
		public string[] Ips { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrimary")]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
	}
	
	/// <summary>
	/// Operating System.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OS
	{
		
		[System.Runtime.Serialization.DataMember(Name="fullString")]
		public string FullString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeServerLifeCycleStateSourceServerLifecycleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY_FOR_TEST")]
		READY_FOR_TEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY_FOR_CUTOVER")]
		READY_FOR_CUTOVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUTOVER")]
		CUTOVER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchConfigurationTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatePublicIpAddress")]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2LaunchTemplateID")]
		public string Ec2LaunchTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largeVolumeConf")]
		public LaunchTemplateDiskConf LargeVolumeConf { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configure Licensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		public string MapAutoTaggingMpeID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public PostLaunchActions PostLaunchActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallVolumeConf")]
		public LaunchTemplateDiskConf SmallVolumeConf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallVolumeMaxSize")]
		public System.Nullable<System.Int32> SmallVolumeMaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BootMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEGACY_BIOS")]
		LEGACY_BIOS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UEFI")]
		UEFI = 1,
	}
	
	/// <summary>
	/// Launch template disk configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchTemplateDiskConf
	{
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public VolumeType VolumeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VolumeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="io1")]
		io1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="io2")]
		io2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gp3")]
		gp3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gp2")]
		gp2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="st1")]
		st1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sc1")]
		sc1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LaunchDisposition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPED")]
		STOPPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 1,
	}
	
	/// <summary>
	/// Configure Licensing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Licensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	/// <summary>
	/// Post Launch Actions to executed on the Test or Cutover instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostLaunchActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogGroupName")]
		public string CloudWatchLogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public PostLaunchActionsDeploymentType Deployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3LogBucket")]
		public string S3LogBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3OutputKeyPrefix")]
		public string S3OutputKeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmDocuments")]
		public SsmDocument[] SsmDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PostLaunchActionsDeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEST_AND_CUTOVER")]
		TEST_AND_CUTOVER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUTOVER_ONLY")]
		CUTOVER_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEST_ONLY")]
		TEST_ONLY = 2,
	}
	
	/// <summary>
	/// AWS Systems Manager Document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SsmDocument
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public SsmDocumentExternalParameters ExternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SsmDocumentParameters Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ssmDocumentName")]
		public string SsmDocumentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SsmDocumentExternalParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SsmDocumentParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetInstanceTypeRightSizingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationConfigurationTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		public string ReplicationConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplicationConfigurationDataPlaneRouting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_IP")]
		PRIVATE_IP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLIC_IP")]
		PUBLIC_IP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplicationConfigurationDefaultLargeStagingDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GP2")]
		GP2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST1")]
		ST1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GP3")]
		GP3 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplicationConfigurationEbsEncryption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLaunchConfigurationTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReplicationConfigurationTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSourceServerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWaveResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobLogItemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public JobLog[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Job log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobLog
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public JobLogEvent Event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		public JobLogEventData EventData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logDateTime")]
		public string LogDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobLogEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOB_START")]
		JOB_START = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVER_SKIPPED")]
		SERVER_SKIPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEANUP_START")]
		CLEANUP_START = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEANUP_END")]
		CLEANUP_END = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEANUP_FAIL")]
		CLEANUP_FAIL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNAPSHOT_START")]
		SNAPSHOT_START = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNAPSHOT_END")]
		SNAPSHOT_END = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNAPSHOT_FAIL")]
		SNAPSHOT_FAIL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USING_PREVIOUS_SNAPSHOT")]
		USING_PREVIOUS_SNAPSHOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONVERSION_START")]
		CONVERSION_START = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONVERSION_END")]
		CONVERSION_END = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONVERSION_FAIL")]
		CONVERSION_FAIL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCH_START")]
		LAUNCH_START = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCH_FAILED")]
		LAUNCH_FAILED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOB_CANCEL")]
		JOB_CANCEL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOB_END")]
		JOB_END = 15,
	}
	
	/// <summary>
	/// Job log data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobLogEventData
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversionServerID")]
		public string ConversionServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceID")]
		public string TargetInstanceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Job[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public string CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiatedBy")]
		public InitiatedBy InitiatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participatingServers")]
		public ParticipatingServer[] ParticipatingServers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public JobType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InitiatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_TEST")]
		START_TEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_CUTOVER")]
		START_CUTOVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIAGNOSTIC")]
		DIAGNOSTIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERMINATE")]
		TERMINATE = 3,
	}
	
	/// <summary>
	/// Server participating in Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParticipatingServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchStatus")]
		public LaunchStatus LaunchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchedEc2InstanceID")]
		public string LaunchedEc2InstanceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postLaunchActionsStatus")]
		public PostLaunchActionsStatus PostLaunchActionsStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LaunchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCHED")]
		LAUNCHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERMINATED")]
		TERMINATED = 4,
	}
	
	/// <summary>
	/// Status of the Post Launch Actions running on the Test or Cutover instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostLaunchActionsStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="postLaunchActionsLaunchStatusList")]
		public JobPostLaunchActionsLaunchStatus[] PostLaunchActionsLaunchStatusList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmAgentDiscoveryDatetime")]
		public string SsmAgentDiscoveryDatetime { get; set; }
	}
	
	/// <summary>
	/// Launch Status of the Job Post Launch Actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobPostLaunchActionsLaunchStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionID")]
		public string ExecutionID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public PostLaunchActionExecutionStatus ExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmDocument")]
		public SsmDocument SsmDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmDocumentType")]
		public SsmDocumentType SsmDocumentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PostLaunchActionExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SsmDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATION")]
		AUTOMATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMAND")]
		COMMAND = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCH")]
		LAUNCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERMINATE")]
		TERMINATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLaunchConfigurationTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LaunchConfigurationTemplate[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReplicationConfigurationTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReplicationConfigurationTemplate[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSourceServersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SourceServer[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeVcenterClientsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VcenterClient[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// vCenter client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VcenterClient
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datacenterName")]
		public string DatacenterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSeenDatetime")]
		public string LastSeenDatetime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerTags")]
		public TagsMap SourceServerTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenterClientID")]
		public string VcenterClientID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenterUUID")]
		public string VcenterUUID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateApplicationsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateSourceServersResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2LaunchTemplateID")]
		public string Ec2LaunchTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		public string MapAutoTaggingMpeID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Post Launch Actions to executed on the Test or Cutover instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public PostLaunchActions PostLaunchActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public ReplicationConfigurationReplicatedDisk[] ReplicatedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	/// <summary>
	/// Replication Configuration replicated disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationConfigurationReplicatedDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBootDisk")]
		public System.Nullable<System.Boolean> IsBootDisk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingDiskType")]
		public ReplicationConfigurationReplicatedDiskStagingDiskType StagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplicationConfigurationReplicatedDiskStagingDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GP2")]
		GP2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IO1")]
		IO1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SC1")]
		SC1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST1")]
		ST1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GP3")]
		GP3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IO2")]
		IO2 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InitializeServiceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApplicationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Application[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List export errors response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExportErrorsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ExportTaskError[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Export task error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportTaskError
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorData")]
		public ExportErrorData ErrorData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorDateTime")]
		public string ErrorDateTime { get; set; }
	}
	
	/// <summary>
	/// Export errors data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportErrorData
	{
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
	}
	
	/// <summary>
	/// List export response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExportsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ExportTask[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Export task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public string CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportID")]
		public string ExportID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progressPercentage")]
		public float ProgressPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketOwner")]
		public string S3BucketOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		public string S3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public ExportTaskSummary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 3,
	}
	
	/// <summary>
	/// Export task summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportTaskSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationsCount")]
		public System.Nullable<System.Int32> ApplicationsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serversCount")]
		public System.Nullable<System.Int32> ServersCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wavesCount")]
		public System.Nullable<System.Int32> WavesCount { get; set; }
	}
	
	/// <summary>
	/// List imports errors response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportErrorsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ImportTaskError[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Import task error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportTaskError
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorData")]
		public ImportErrorData ErrorData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorDateTime")]
		public string ErrorDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public ImportErrorType ErrorType { get; set; }
	}
	
	/// <summary>
	/// Import error data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportErrorData
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2LaunchTemplateID")]
		public string Ec2LaunchTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawError")]
		public string RawError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowNumber")]
		public System.Nullable<System.Int32> RowNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION_ERROR")]
		VALIDATION_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING_ERROR")]
		PROCESSING_ERROR = 1,
	}
	
	/// <summary>
	/// List import response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ImportTask[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Import task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public string CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importID")]
		public string ImportID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progressPercentage")]
		public float ProgressPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketSource")]
		public S3BucketSource S3BucketSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public ImportTaskSummary Summary { get; set; }
	}
	
	/// <summary>
	/// S3 bucket source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3BucketSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketOwner")]
		public string S3BucketOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		public string S3Key { get; set; }
	}
	
	/// <summary>
	/// Import task summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportTaskSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public ImportTaskSummaryApplications Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="servers")]
		public ImportTaskSummaryServers Servers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waves")]
		public ImportTaskSummaryWaves Waves { get; set; }
	}
	
	/// <summary>
	/// Import task summary applications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportTaskSummaryApplications
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdCount")]
		public System.Nullable<System.Int32> CreatedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedCount")]
		public System.Nullable<System.Int32> ModifiedCount { get; set; }
	}
	
	/// <summary>
	/// Import task summary servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportTaskSummaryServers
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdCount")]
		public System.Nullable<System.Int32> CreatedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedCount")]
		public System.Nullable<System.Int32> ModifiedCount { get; set; }
	}
	
	/// <summary>
	/// Import task summery waves.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportTaskSummaryWaves
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdCount")]
		public System.Nullable<System.Int32> CreatedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedCount")]
		public System.Nullable<System.Int32> ModifiedCount { get; set; }
	}
	
	/// <summary>
	/// List managed accounts response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListManagedAccountsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ManagedAccount[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Managed account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceServerActionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SourceServerActionDocument[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceServerActionDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		public string ActionID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentIdentifier")]
		public string DocumentIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public SsmDocumentExternalParameters ExternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SsmDocumentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISASTER_RECOVERY")]
		DISASTER_RECOVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATING_SYSTEM")]
		OPERATING_SYSTEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LICENSE_AND_SUBSCRIPTION")]
		LICENSE_AND_SUBSCRIPTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION")]
		VALIDATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OBSERVABILITY")]
		OBSERVABILITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECURITY")]
		SECURITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NETWORKING")]
		NETWORKING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURATION")]
		CONFIGURATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BACKUP")]
		BACKUP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateActionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TemplateActionDocument[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateActionDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		public string ActionID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentIdentifier")]
		public string DocumentIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public SsmDocumentExternalParameters ExternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		public string OperatingSystem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SsmDocumentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWavesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Wave[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// AWS Systems Manager Document external parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SsmExternalParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="dynamicPath")]
		public string DynamicPath { get; set; }
	}
	
	/// <summary>
	/// AWS Systems Manager Parameter Store parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SsmParameterStoreParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameterName")]
		public string ParameterName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameterType")]
		public SsmParameterStoreParameterType ParameterType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SsmParameterStoreParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveSourceServerActionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTemplateActionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartCutoverResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// Start export response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartExportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportTask")]
		public ExportTask ExportTask { get; set; }
	}
	
	/// <summary>
	/// Start import response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="importTask")]
		public ImportTask ImportTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartTestResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateTargetInstancesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchiveWaveRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateApplicationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		public string[] ApplicationIDs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateSourceServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
	}
	
	/// <summary>
	/// The request to change the source server migration lifecycle state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeServerLifeCycleStateSourceServerLifecycle
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ChangeServerLifeCycleStateSourceServerLifecycleState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeServerLifeCycleStateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lifeCycle")]
		public ChangeServerLifeCycleStateSourceServerLifecycle LifeCycle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLaunchConfigurationTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatePublicIpAddress")]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largeVolumeConf")]
		public LaunchTemplateDiskConf LargeVolumeConf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configure Licensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		public string MapAutoTaggingMpeID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public PostLaunchActions PostLaunchActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallVolumeConf")]
		public LaunchTemplateDiskConf SmallVolumeConf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallVolumeMaxSize")]
		public System.Nullable<System.Int32> SmallVolumeMaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReplicationConfigurationTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public bool AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public int BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public bool CreatePublicIP { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public bool UseDedicatedReplicationServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWaveRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLaunchConfigurationTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReplicationConfigurationTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		public string ReplicationConfigurationTemplateID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSourceServerRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVcenterClientRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vcenterClientID")]
		public string VcenterClientID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWaveRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobLogItemsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		public string JobID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Request to describe Job log filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public string FromDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobIDs")]
		public string[] JobIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public string ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeJobsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLaunchConfigurationTemplatesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateIDs")]
		public string[] LaunchConfigurationTemplateIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReplicationConfigurationTemplatesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateIDs")]
		public string[] ReplicationConfigurationTemplateIDs { get; set; }
	}
	
	/// <summary>
	/// Request to filter Source Servers list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSourceServersRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		public string[] ApplicationIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifeCycleStates")]
		public LifeCycleState[] LifeCycleStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationTypes")]
		public ReplicationType[] ReplicationTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSourceServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeSourceServersRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeVcenterClientsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateApplicationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		public string[] ApplicationIDs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateSourceServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisconnectFromServiceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FinalizeCutoverRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InitializeServiceRequest
	{
	}
	
	/// <summary>
	/// Applications list filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApplicationsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		public string[] ApplicationIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveIDs")]
		public string[] WaveIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApplicationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListApplicationsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List export errors request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExportErrorsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportID")]
		public string ExportID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List exports request filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExportsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportIDs")]
		public string[] ExportIDs { get; set; }
	}
	
	/// <summary>
	/// List export request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExportsRequest
	{
		
		/// <summary>
		/// List exports request filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListExportsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List import errors request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportErrorsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importID")]
		public string ImportID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List imports request filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="importIDs")]
		public string[] ImportIDs { get; set; }
	}
	
	/// <summary>
	/// List imports request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListImportsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List managed accounts request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListManagedAccountsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Source server post migration custom action filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceServerActionsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionIDs")]
		public string[] ActionIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceServerActionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SourceServerActionsRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// Template post migration custom action filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateActionsRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionIDs")]
		public string[] ActionIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateActionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public TemplateActionsRequestFilters Filters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Waves list filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWavesRequestFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveIDs")]
		public string[] WaveIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWavesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListWavesRequestFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarkAsArchivedRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PauseReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSourceServerActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentIdentifier")]
		public string DocumentIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public SsmDocumentExternalParameters ExternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public int Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SsmDocumentParameters Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutTemplateActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentIdentifier")]
		public string DocumentIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public SsmDocumentExternalParameters ExternalParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		public string OperatingSystem { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public int Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SsmDocumentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveSourceServerActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTemplateActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResumeReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryDataReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartCutoverRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// Start export request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartExportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketOwner")]
		public string S3BucketOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		public string S3Key { get; set; }
	}
	
	/// <summary>
	/// Start import request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartImportRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketSource")]
		public S3BucketSource S3BucketSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartTestRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateTargetInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnarchiveApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnarchiveWaveRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		public string ApplicationID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		public string MapAutoTaggingMpeID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Post Launch Actions to executed on the Test or Cutover instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public PostLaunchActions PostLaunchActions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLaunchConfigurationTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatePublicIpAddress")]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largeVolumeConf")]
		public LaunchTemplateDiskConf LargeVolumeConf { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configure Licensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public Licensing Licensing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		public string MapAutoTaggingMpeID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public PostLaunchActions PostLaunchActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallVolumeConf")]
		public LaunchTemplateDiskConf SmallVolumeConf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallVolumeMaxSize")]
		public System.Nullable<System.Int32> SmallVolumeMaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		public ReplicationConfigurationReplicatedDisk[] ReplicatedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReplicationConfigurationTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		public string ReplicationConfigurationTemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		public string ReplicationServerInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		public string StagingAreaSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public TagsMap StagingAreaTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSourceServerReplicationTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationType")]
		public ReplicationType ReplicationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		public string SourceServerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWaveRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public string AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		public string WaveID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WaveHealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTHY")]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAGGING")]
		LAGGING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WaveProgressStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Archive application.
		/// ArchiveApplication ArchiveApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Application> ArchiveApplicationAsync(ArchiveApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ArchiveApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Archive wave.
		/// ArchiveWave ArchiveWave
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Wave> ArchiveWaveAsync(ArchiveWavePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ArchiveWave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wave>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associate applications to wave.
		/// AssociateApplications AssociateApplications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateApplicationsResponse> AssociateApplicationsAsync(AssociateApplicationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "AssociateApplications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateApplicationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associate source servers to application.
		/// AssociateSourceServers AssociateSourceServers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateSourceServersResponse> AssociateSourceServersAsync(AssociateSourceServersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "AssociateSourceServers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateSourceServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)
		/// ChangeServerLifeCycleState ChangeServerLifeCycleState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> ChangeServerLifeCycleStateAsync(ChangeServerLifeCycleStatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ChangeServerLifeCycleState";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create application.
		/// CreateApplication CreateApplication
		/// </summary>
		public async Task CreateApplicationAsync(CreateApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Launch Configuration Template.
		/// CreateLaunchConfigurationTemplate CreateLaunchConfigurationTemplate
		/// </summary>
		public async Task CreateLaunchConfigurationTemplateAsync(CreateLaunchConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateLaunchConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new ReplicationConfigurationTemplate.
		/// CreateReplicationConfigurationTemplate CreateReplicationConfigurationTemplate
		/// </summary>
		public async Task CreateReplicationConfigurationTemplateAsync(CreateReplicationConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateReplicationConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create wave.
		/// CreateWave CreateWave
		/// </summary>
		public async Task CreateWaveAsync(CreateWavePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreateWave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete application.
		/// DeleteApplication DeleteApplication
		/// </summary>
		public async Task DeleteApplicationAsync(DeleteApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Job by ID.
		/// DeleteJob DeleteJob
		/// </summary>
		public async Task DeleteJobAsync(DeleteJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Launch Configuration Template by ID.
		/// DeleteLaunchConfigurationTemplate DeleteLaunchConfigurationTemplate
		/// </summary>
		public async Task DeleteLaunchConfigurationTemplateAsync(DeleteLaunchConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteLaunchConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Replication Configuration Template by ID
		/// DeleteReplicationConfigurationTemplate DeleteReplicationConfigurationTemplate
		/// </summary>
		public async Task DeleteReplicationConfigurationTemplateAsync(DeleteReplicationConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteReplicationConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a single source server by ID.
		/// DeleteSourceServer DeleteSourceServer
		/// </summary>
		public async Task DeleteSourceServerAsync(DeleteSourceServerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteSourceServer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a given vCenter client by ID.
		/// DeleteVcenterClient DeleteVcenterClient
		/// </summary>
		public async Task DeleteVcenterClientAsync(DeleteVcenterClientPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteVcenterClient";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete wave.
		/// DeleteWave DeleteWave
		/// </summary>
		public async Task DeleteWaveAsync(DeleteWavePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DeleteWave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves detailed job log items with paging.
		/// DescribeJobLogItems DescribeJobLogItems
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobLogItemsResponse> DescribeJobLogItemsAsync(string maxResults, string nextToken, DescribeJobLogItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeJobLogItems?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobLogItemsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.
		/// DescribeJobs DescribeJobs
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobsResponse> DescribeJobsAsync(string maxResults, string nextToken, DescribeJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeJobs?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs
		/// DescribeLaunchConfigurationTemplates DescribeLaunchConfigurationTemplates
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeLaunchConfigurationTemplatesResponse> DescribeLaunchConfigurationTemplatesAsync(string maxResults, string nextToken, DescribeLaunchConfigurationTemplatesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeLaunchConfigurationTemplates?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeLaunchConfigurationTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.
		/// DescribeReplicationConfigurationTemplates DescribeReplicationConfigurationTemplates
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeReplicationConfigurationTemplatesResponse> DescribeReplicationConfigurationTemplatesAsync(string maxResults, string nextToken, DescribeReplicationConfigurationTemplatesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeReplicationConfigurationTemplates?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeReplicationConfigurationTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves all SourceServers or multiple SourceServers by ID.
		/// DescribeSourceServers DescribeSourceServers
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSourceServersResponse> DescribeSourceServersAsync(string maxResults, string nextToken, DescribeSourceServersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeSourceServers?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSourceServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the installed vCenter clients.
		/// DescribeVcenterClients DescribeVcenterClients
		/// </summary>
		/// <param name="maxResults">Maximum results to be returned in DescribeVcenterClients.</param>
		/// <param name="nextToken">Next pagination token to be provided for DescribeVcenterClients.</param>
		/// <returns>Success</returns>
		public async Task<DescribeVcenterClientsResponse> DescribeVcenterClientsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DescribeVcenterClients?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeVcenterClientsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociate applications from wave.
		/// DisassociateApplications DisassociateApplications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateApplicationsResponse> DisassociateApplicationsAsync(DisassociateApplicationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DisassociateApplications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateApplicationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociate source servers from application.
		/// DisassociateSourceServers DisassociateSourceServers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateSourceServersResponse> DisassociateSourceServersAsync(DisassociateSourceServersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DisassociateSourceServers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateSourceServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
		/// DisconnectFromService DisconnectFromService
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> DisconnectFromServiceAsync(DisconnectFromServicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "DisconnectFromService";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
		/// FinalizeCutover FinalizeCutover
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> FinalizeCutoverAsync(FinalizeCutoverPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "FinalizeCutover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all LaunchConfigurations available, filtered by Source Server IDs.
		/// GetLaunchConfiguration GetLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchConfiguration> GetLaunchConfigurationAsync(GetLaunchConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all ReplicationConfigurations, filtered by Source Server ID.
		/// GetReplicationConfiguration GetReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReplicationConfiguration> GetReplicationConfigurationAsync(GetReplicationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReplicationConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initialize Application Migration Service.
		/// InitializeService InitializeService
		/// </summary>
		public async Task InitializeServiceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "InitializeService";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all applications or multiple applications by ID.
		/// ListApplications ListApplications
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationsResponse> ListApplicationsAsync(string maxResults, string nextToken, ListApplicationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListApplications?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListApplicationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List export errors.
		/// ListExportErrors ListExportErrors
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListExportErrorsResponse> ListExportErrorsAsync(string maxResults, string nextToken, ListExportErrorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListExportErrors?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExportErrorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List exports.
		/// ListExports ListExports
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListExportsResponse> ListExportsAsync(string maxResults, string nextToken, ListExportsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListExports?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List import errors.
		/// ListImportErrors ListImportErrors
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImportErrorsResponse> ListImportErrorsAsync(string maxResults, string nextToken, ListImportErrorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImportErrors?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImportErrorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List imports.
		/// ListImports ListImports
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImportsResponse> ListImportsAsync(string maxResults, string nextToken, ListImportsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListImports?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Managed Accounts.
		/// ListManagedAccounts ListManagedAccounts
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListManagedAccountsResponse> ListManagedAccountsAsync(string maxResults, string nextToken, ListManagedAccountsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListManagedAccounts?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListManagedAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List source server post migration custom actions.
		/// ListSourceServerActions ListSourceServerActions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSourceServerActionsResponse> ListSourceServerActionsAsync(string maxResults, string nextToken, ListSourceServerActionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListSourceServerActions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSourceServerActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all tags for your Application Migration Service resources.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">List tags for resource request by ARN.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">Tag resource by ARN.</param>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List template post migration custom actions.
		/// ListTemplateActions ListTemplateActions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTemplateActionsResponse> ListTemplateActionsAsync(string maxResults, string nextToken, ListTemplateActionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListTemplateActions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTemplateActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves all waves or multiple waves by ID.
		/// ListWaves ListWaves
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWavesResponse> ListWavesAsync(string maxResults, string nextToken, ListWavesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ListWaves?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWavesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.
		/// MarkAsArchived MarkAsArchived
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> MarkAsArchivedAsync(MarkAsArchivedPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "MarkAsArchived";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pause Replication.
		/// PauseReplication PauseReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> PauseReplicationAsync(PauseReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PauseReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Put source server post migration custom action.
		/// PutSourceServerAction PutSourceServerAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServerActionDocument> PutSourceServerActionAsync(PutSourceServerActionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PutSourceServerAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServerActionDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Put template post migration custom action.
		/// PutTemplateAction PutTemplateAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TemplateActionDocument> PutTemplateActionAsync(PutTemplateActionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PutTemplateAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TemplateActionDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove source server post migration custom action.
		/// RemoveSourceServerAction RemoveSourceServerAction
		/// </summary>
		public async Task RemoveSourceServerActionAsync(RemoveSourceServerActionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RemoveSourceServerAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove template post migration custom action.
		/// RemoveTemplateAction RemoveTemplateAction
		/// </summary>
		public async Task RemoveTemplateActionAsync(RemoveTemplateActionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RemoveTemplateAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resume Replication.
		/// ResumeReplication ResumeReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> ResumeReplicationAsync(ResumeReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ResumeReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.
		/// RetryDataReplication RetryDataReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> RetryDataReplicationAsync(RetryDataReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RetryDataReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.
		/// StartCutover StartCutover
		/// </summary>
		public async Task StartCutoverAsync(StartCutoverPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartCutover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start export.
		/// StartExport StartExport
		/// </summary>
		public async Task StartExportAsync(StartExportPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartExport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start import.
		/// StartImport StartImport
		/// </summary>
		public async Task StartImportAsync(StartImportPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartImport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts replication for SNAPSHOT_SHIPPING agents.
		/// StartReplication StartReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> StartReplicationAsync(StartReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.
		/// StartTest StartTest
		/// </summary>
		public async Task StartTestAsync(StartTestPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StartTest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stop Replication.
		/// StopReplication StopReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> StopReplicationAsync(StopReplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StopReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.
		/// TerminateTargetInstances TerminateTargetInstances
		/// </summary>
		public async Task TerminateTargetInstancesAsync(TerminateTargetInstancesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TerminateTargetInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unarchive application.
		/// UnarchiveApplication UnarchiveApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Application> UnarchiveApplicationAsync(UnarchiveApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UnarchiveApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unarchive wave.
		/// UnarchiveWave UnarchiveWave
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Wave> UnarchiveWaveAsync(UnarchiveWavePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UnarchiveWave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wave>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified set of tags from the specified set of Application Migration Service resources.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">Untag resource by ARN.</param>
		/// <param name="tagKeys">Untag resource by Keys.</param>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update application.
		/// UpdateApplication UpdateApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Application> UpdateApplicationAsync(UpdateApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates multiple LaunchConfigurations by Source Server ID.
		/// UpdateLaunchConfiguration UpdateLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchConfiguration> UpdateLaunchConfigurationAsync(UpdateLaunchConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Launch Configuration Template by ID.
		/// UpdateLaunchConfigurationTemplate UpdateLaunchConfigurationTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchConfigurationTemplate> UpdateLaunchConfigurationTemplateAsync(UpdateLaunchConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateLaunchConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchConfigurationTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to update multiple ReplicationConfigurations by Source Server ID.
		/// UpdateReplicationConfiguration UpdateReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReplicationConfiguration> UpdateReplicationConfigurationAsync(UpdateReplicationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReplicationConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates multiple ReplicationConfigurationTemplates by ID.
		/// UpdateReplicationConfigurationTemplate UpdateReplicationConfigurationTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReplicationConfigurationTemplate> UpdateReplicationConfigurationTemplateAsync(UpdateReplicationConfigurationTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateReplicationConfigurationTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReplicationConfigurationTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.
		/// UpdateSourceServerReplicationType UpdateSourceServerReplicationType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SourceServer> UpdateSourceServerReplicationTypeAsync(UpdateSourceServerReplicationTypePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateSourceServerReplicationType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update wave.
		/// UpdateWave UpdateWave
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Wave> UpdateWaveAsync(UpdateWavePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UpdateWave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wave>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class ArchiveApplicationPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^app-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^app-[0-9a-zA-Z]{17}$")]
		public string ApplicationID { get; set; }
	}
	
	public class ArchiveWavePostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Wave ID.
		/// Required
		/// Max length: 22
		/// Min length: 22
		/// Pattern: ^wave-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wave-[0-9a-zA-Z]{17}$")]
		public string WaveID { get; set; }
	}
	
	public class AssociateApplicationsPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application IDs list.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] ApplicationIDs { get; set; }
		
		/// <summary>
		/// Wave ID.
		/// Required
		/// Max length: 22
		/// Min length: 22
		/// Pattern: ^wave-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wave-[0-9a-zA-Z]{17}$")]
		public string WaveID { get; set; }
	}
	
	public class AssociateSourceServersPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^app-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^app-[0-9a-zA-Z]{17}$")]
		public string ApplicationID { get; set; }
		
		/// <summary>
		/// Source server IDs list.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] SourceServerIDs { get; set; }
	}
	
	public class ChangeServerLifeCycleStatePostBody
	{
		
		/// <summary>
		/// The request to change the source server migration account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// The request to change the source server migration lifecycle state.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lifeCycle")]
		public ChangeServerLifeCycleStatePostBodyLifeCycle LifeCycle { get; set; }
		
		/// <summary>
		/// The request to change the source server migration lifecycle state by source server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class ChangeServerLifeCycleStatePostBodyLifeCycle
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ChangeServerLifeCycleStateSourceServerLifecycleState State { get; set; }
	}
	
	public class CreateApplicationPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application description.
		/// Max length: 600
		/// Min length: 0
		/// Pattern: ^[^\x00]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\x00]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Application name.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[^\s\x00]( *[^\s\x00])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\s\x00]( *[^\s\x00])*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Application tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Associate public Ip address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatePublicIpAddress")]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		/// <summary>
		/// Launch configuration template boot mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		/// <summary>
		/// Copy private Ip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		/// <summary>
		/// Copy tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// Enable map auto tagging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		/// <summary>
		/// Launch template disk configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeVolumeConf")]
		public CreateLaunchConfigurationTemplatePostBodyLargeVolumeConf LargeVolumeConf { get; set; }
		
		/// <summary>
		/// Launch disposition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configure Licensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public CreateLaunchConfigurationTemplatePostBodyLicensing Licensing { get; set; }
		
		/// <summary>
		/// Launch configuration template map auto tagging MPE ID.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string MapAutoTaggingMpeID { get; set; }
		
		/// <summary>
		/// Post Launch Actions to executed on the Test or Cutover instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public CreateLaunchConfigurationTemplatePostBodyPostLaunchActions PostLaunchActions { get; set; }
		
		/// <summary>
		/// Launch template disk configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallVolumeConf")]
		public CreateLaunchConfigurationTemplatePostBodySmallVolumeConf SmallVolumeConf { get; set; }
		
		/// <summary>
		/// Small volume maximum size.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallVolumeMaxSize")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> SmallVolumeMaxSize { get; set; }
		
		/// <summary>
		/// Request to associate tags during creation of a Launch Configuration Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Target instance type right-sizing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBodyLargeVolumeConf
	{
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public VolumeType VolumeType { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBodyLicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBodyPostLaunchActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogGroupName")]
		public string CloudWatchLogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public PostLaunchActionsDeploymentType Deployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3LogBucket")]
		public string S3LogBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3OutputKeyPrefix")]
		public string S3OutputKeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmDocuments")]
		public SsmDocument[] SsmDocuments { get; set; }
	}
	
	public class CreateLaunchConfigurationTemplatePostBodySmallVolumeConf
	{
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public VolumeType VolumeType { get; set; }
	}
	
	public class CreateReplicationConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Request to associate the default Application Migration Service Security group with the Replication Settings template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public bool AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Request to configure bandwidth throttling during Replication Settings template creation.
		/// Required
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public int BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Request to create Public IP during Replication Settings template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public bool CreatePublicIP { get; set; }
		
		/// <summary>
		/// Request to configure data plane routing during Replication Settings template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// Request to configure the default large staging disk EBS volume type during Replication Settings template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// Request to configure EBS encryption during Replication Settings template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		/// <summary>
		/// Request to configure an EBS encryption key during Replication Settings template creation.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Request to configure the Replication Server instance type during Replication Settings template creation.
		/// Required
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// Request to configure the Replication Server Security group ID during Replication Settings template creation.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Request to configure the Staging Area subnet ID during Replication Settings template creation.
		/// Required
		/// Max length: 255
		/// Min length: 0
		/// Pattern: ^subnet-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^subnet-[0-9a-fA-F]{8,}$")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// Request to configure Staging Area tags during Replication Settings template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public System.Collections.Generic.Dictionary<string, string> StagingAreaTags { get; set; }
		
		/// <summary>
		/// Request to configure tags during Replication Settings template creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Request to use Dedicated Replication Servers during Replication Settings template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public bool UseDedicatedReplicationServer { get; set; }
		
		/// <summary>
		/// Request to use Fips Endpoint during Replication Settings template creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	public class CreateWavePostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Wave description.
		/// Max length: 600
		/// Min length: 0
		/// Pattern: ^[^\x00]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\x00]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Wave name.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[^\s\x00]( *[^\s\x00])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\s\x00]( *[^\s\x00])*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Wave tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class DeleteApplicationPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^app-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^app-[0-9a-zA-Z]{17}$")]
		public string ApplicationID { get; set; }
	}
	
	public class DeleteJobPostBody
	{
		
		/// <summary>
		/// Request to delete Job from service by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to delete Job from service by Job ID.
		/// Required
		/// Max length: 24
		/// Min length: 24
		/// Pattern: ^mgnjob-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^mgnjob-[0-9a-zA-Z]{17}$")]
		public string JobID { get; set; }
	}
	
	public class DeleteLaunchConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// ID of resource to be deleted.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
	}
	
	public class DeleteReplicationConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Request to delete Replication Configuration Template from service by Replication Configuration Template ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^rct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^rct-[0-9a-zA-Z]{17}$")]
		public string ReplicationConfigurationTemplateID { get; set; }
	}
	
	public class DeleteSourceServerPostBody
	{
		
		/// <summary>
		/// Request to delete Source Server from service by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to delete Source Server from service by Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class DeleteVcenterClientPostBody
	{
		
		/// <summary>
		/// ID of resource to be deleted.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^vcc-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vcenterClientID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^vcc-[0-9a-zA-Z]{17}$")]
		public string VcenterClientID { get; set; }
	}
	
	public class DeleteWavePostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Wave ID.
		/// Required
		/// Max length: 22
		/// Min length: 22
		/// Pattern: ^wave-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wave-[0-9a-zA-Z]{17}$")]
		public string WaveID { get; set; }
	}
	
	public class DescribeJobLogItemsPostBody
	{
		
		/// <summary>
		/// Request to describe Job log Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to describe Job log job ID.
		/// Required
		/// Max length: 24
		/// Min length: 24
		/// Pattern: ^mgnjob-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobID")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^mgnjob-[0-9a-zA-Z]{17}$")]
		public string JobID { get; set; }
		
		/// <summary>
		/// Request to describe Job log item maximum results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Request to describe Job log next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeJobsPostBody
	{
		
		/// <summary>
		/// Request to describe job log items by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to describe Job log filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeJobsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Request to describe job log items by max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Request to describe job log items by next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeJobsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public string FromDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobIDs")]
		public string[] JobIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public string ToDate { get; set; }
	}
	
	public class DescribeLaunchConfigurationTemplatesPostBody
	{
		
		/// <summary>
		/// Request to filter Launch Configuration Templates list by Launch Configuration Template ID.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] LaunchConfigurationTemplateIDs { get; set; }
		
		/// <summary>
		/// Maximum results to be returned in DescribeLaunchConfigurationTemplates.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Next pagination token returned from DescribeLaunchConfigurationTemplates.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeReplicationConfigurationTemplatesPostBody
	{
		
		/// <summary>
		/// Request to describe Replication Configuration template by max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Request to describe Replication Configuration template by next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Request to describe Replication Configuration template by template IDs.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] ReplicationConfigurationTemplateIDs { get; set; }
	}
	
	public class DescribeSourceServersPostBody
	{
		
		/// <summary>
		/// Request to filter Source Servers list by Accoun ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to filter Source Servers list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DescribeSourceServersPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Request to filter Source Servers list by maximum results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Request to filter Source Servers list by next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class DescribeSourceServersPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		public string[] ApplicationIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifeCycleStates")]
		public LifeCycleState[] LifeCycleStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationTypes")]
		public ReplicationType[] ReplicationTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		public string[] SourceServerIDs { get; set; }
	}
	
	public class DisassociateApplicationsPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application IDs list.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] ApplicationIDs { get; set; }
		
		/// <summary>
		/// Wave ID.
		/// Required
		/// Max length: 22
		/// Min length: 22
		/// Pattern: ^wave-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wave-[0-9a-zA-Z]{17}$")]
		public string WaveID { get; set; }
	}
	
	public class DisassociateSourceServersPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^app-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^app-[0-9a-zA-Z]{17}$")]
		public string ApplicationID { get; set; }
		
		/// <summary>
		/// Source server IDs list.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] SourceServerIDs { get; set; }
	}
	
	public class DisconnectFromServicePostBody
	{
		
		/// <summary>
		/// Request to disconnect Source Server from service by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to disconnect Source Server from service by Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class FinalizeCutoverPostBody
	{
		
		/// <summary>
		/// Request to finalize Cutover by Source Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to finalize Cutover by Source Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class GetLaunchConfigurationPostBody
	{
		
		/// <summary>
		/// Request to get Launch Configuration information by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to get Launch Configuration information by Source Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class GetReplicationConfigurationPostBody
	{
		
		/// <summary>
		/// Request to get Replication Configuration by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Request to get Replication Configuration by Source Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class ListApplicationsPostBody
	{
		
		/// <summary>
		/// Applications list Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Applications list filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListApplicationsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum results to return when listing applications.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListApplicationsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationIDs")]
		public string[] ApplicationIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveIDs")]
		public string[] WaveIDs { get; set; }
	}
	
	public class ListExportErrorsPostBody
	{
		
		/// <summary>
		/// List export errors request export id.
		/// Required
		/// Max length: 24
		/// Min length: 24
		/// Pattern: ^export-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportID")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^export-[0-9a-zA-Z]{17}$")]
		public string ExportID { get; set; }
		
		/// <summary>
		/// List export errors request max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// List export errors request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListExportsPostBody
	{
		
		/// <summary>
		/// List exports request filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListExportsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// List export request max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// List export request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListExportsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportIDs")]
		public string[] ExportIDs { get; set; }
	}
	
	public class ListImportErrorsPostBody
	{
		
		/// <summary>
		/// List import errors request import id.
		/// Required
		/// Max length: 24
		/// Min length: 24
		/// Pattern: ^import-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importID")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^import-[0-9a-zA-Z]{17}$")]
		public string ImportID { get; set; }
		
		/// <summary>
		/// List import errors request max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// List import errors request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListImportsPostBody
	{
		
		/// <summary>
		/// List imports request filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListImportsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// List imports request max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// List imports request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListImportsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="importIDs")]
		public string[] ImportIDs { get; set; }
	}
	
	public class ListManagedAccountsPostBody
	{
		
		/// <summary>
		/// List managed accounts request max results.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// List managed accounts request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListSourceServerActionsPostBody
	{
		
		/// <summary>
		/// Account ID to return when listing source server post migration custom actions.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Source server post migration custom action filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListSourceServerActionsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum amount of items to return when listing source server post migration custom actions.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Next token to use when listing source server post migration custom actions.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Source server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class ListSourceServerActionsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionIDs")]
		public string[] ActionIDs { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Tag resource by Tags.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListTemplateActionsPostBody
	{
		
		/// <summary>
		/// Template post migration custom action filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListTemplateActionsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Launch configuration template ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		/// <summary>
		/// Maximum amount of items to return when listing template post migration custom actions.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Next token to use when listing template post migration custom actions.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListTemplateActionsPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionIDs")]
		public string[] ActionIDs { get; set; }
	}
	
	public class ListWavesPostBody
	{
		
		/// <summary>
		/// Request account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Waves list filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListWavesPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// Maximum results to return when listing waves.
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Request next token.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string NextToken { get; set; }
	}
	
	public class ListWavesPostBodyFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="isArchived")]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveIDs")]
		public string[] WaveIDs { get; set; }
	}
	
	public class MarkAsArchivedPostBody
	{
		
		/// <summary>
		/// Mark as archived by Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Mark as archived by Source Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class PauseReplicationPostBody
	{
		
		/// <summary>
		/// Pause Replication Request account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Pause Replication Request source server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class PutSourceServerActionPostBody
	{
		
		/// <summary>
		/// Source server post migration custom account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Source server post migration custom action ID.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-zA-Z]$")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Source server post migration custom action name.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[^\s\x00]( *[^\s\x00])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\s\x00]( *[^\s\x00])*$")]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Source server post migration custom action active status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Source server post migration custom action category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Source server post migration custom action description.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^[0-9a-zA-Z ():/.,'-_#*; ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z ():/.,'-_#*; ]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Source server post migration custom action document identifier.
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DocumentIdentifier { get; set; }
		
		/// <summary>
		/// Source server post migration custom action document version.
		/// Pattern: ^(\$DEFAULT|\$LATEST|[0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\$DEFAULT|\$LATEST|[0-9]+)$")]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Source server post migration custom action external parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public System.Collections.Generic.Dictionary<string, SsmExternalParameter> ExternalParameters { get; set; }
		
		/// <summary>
		/// Source server post migration custom action must succeed for cutover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		/// <summary>
		/// Source server post migration custom action order.
		/// Required
		/// Minimum: 1001
		/// Maximum: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		[System.ComponentModel.DataAnnotations.Range(1001, 10000)]
		public int Order { get; set; }
		
		/// <summary>
		/// Source server post migration custom action parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, SsmParameterStoreParameter[]> Parameters { get; set; }
		
		/// <summary>
		/// Source server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
		
		/// <summary>
		/// Source server post migration custom action timeout in seconds.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	public class PutTemplateActionPostBody
	{
		
		/// <summary>
		/// Template post migration custom action ID.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-zA-Z]$")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Template post migration custom action name.
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Template post migration custom action active status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Template post migration custom action category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Template post migration custom action description.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^[0-9a-zA-Z ():/.,'-_#*; ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z ():/.,'-_#*; ]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Template post migration custom action document identifier.
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DocumentIdentifier { get; set; }
		
		/// <summary>
		/// Template post migration custom action document version.
		/// Pattern: ^(\$DEFAULT|\$LATEST|[0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\$DEFAULT|\$LATEST|[0-9]+)$")]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Template post migration custom action external parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public System.Collections.Generic.Dictionary<string, SsmExternalParameter> ExternalParameters { get; set; }
		
		/// <summary>
		/// Launch configuration template ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		/// <summary>
		/// Template post migration custom action must succeed for cutover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustSucceedForCutover")]
		public System.Nullable<System.Boolean> MustSucceedForCutover { get; set; }
		
		/// <summary>
		/// Operating system eligible for this template post migration custom action.
		/// Pattern: ^(linux|windows)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(linux|windows)$")]
		public string OperatingSystem { get; set; }
		
		/// <summary>
		/// Template post migration custom action order.
		/// Required
		/// Minimum: 1001
		/// Maximum: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		[System.ComponentModel.DataAnnotations.Range(1001, 10000)]
		public int Order { get; set; }
		
		/// <summary>
		/// Template post migration custom action parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, SsmParameterStoreParameter[]> Parameters { get; set; }
		
		/// <summary>
		/// Template post migration custom action timeout in seconds.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	public class RemoveSourceServerActionPostBody
	{
		
		/// <summary>
		/// Source server post migration account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Source server post migration custom action ID to remove.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-zA-Z]$")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Source server ID of the post migration custom action to remove.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class RemoveTemplateActionPostBody
	{
		
		/// <summary>
		/// Template post migration custom action ID to remove.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionID")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-zA-Z]$")]
		public string ActionID { get; set; }
		
		/// <summary>
		/// Launch configuration template ID of the post migration custom action to remove.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
	}
	
	public class ResumeReplicationPostBody
	{
		
		/// <summary>
		/// Resume Replication Request account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Resume Replication Request source server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class RetryDataReplicationPostBody
	{
		
		/// <summary>
		/// Retry data replication for Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Retry data replication for Source Server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class StartCutoverPostBody
	{
		
		/// <summary>
		/// Start Cutover by Account IDs
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Start Cutover by Source Server IDs.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] SourceServerIDs { get; set; }
		
		/// <summary>
		/// Start Cutover by Tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartExportPostBody
	{
		
		/// <summary>
		/// Start export request s3 bucket.
		/// Required
		/// Pattern: ^[a-zA-Z0-9.\-_]{1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9.\-_]{1,255}$")]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Start export request s3 bucket owner.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3BucketOwner")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string S3BucketOwner { get; set; }
		
		/// <summary>
		/// Start export request s3key.
		/// Required
		/// Pattern: ^[^\x00]{1,1020}\.csv$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\x00]{1,1020}\.csv$")]
		public string S3Key { get; set; }
	}
	
	public class StartImportPostBody
	{
		
		/// <summary>
		/// Start import request client token.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// S3 bucket source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3BucketSource")]
		public StartImportPostBodyS3BucketSource S3BucketSource { get; set; }
	}
	
	public class StartImportPostBodyS3BucketSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketOwner")]
		public string S3BucketOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		public string S3Key { get; set; }
	}
	
	public class StartReplicationPostBody
	{
		
		/// <summary>
		/// Account ID on which to start replication.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// ID of source server on which to start replication.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class StartTestPostBody
	{
		
		/// <summary>
		/// Start Test for Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Start Test for Source Server IDs.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] SourceServerIDs { get; set; }
		
		/// <summary>
		/// Start Test by Tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StopReplicationPostBody
	{
		
		/// <summary>
		/// Stop Replication Request account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Stop Replication Request source server ID.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class TerminateTargetInstancesPostBody
	{
		
		/// <summary>
		/// Terminate Target instance by Account ID
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Terminate Target instance by Source Server IDs.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] SourceServerIDs { get; set; }
		
		/// <summary>
		/// Terminate Target instance by Tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UnarchiveApplicationPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^app-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^app-[0-9a-zA-Z]{17}$")]
		public string ApplicationID { get; set; }
	}
	
	public class UnarchiveWavePostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Wave ID.
		/// Required
		/// Max length: 22
		/// Min length: 22
		/// Pattern: ^wave-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wave-[0-9a-zA-Z]{17}$")]
		public string WaveID { get; set; }
	}
	
	public class UpdateApplicationPostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Application ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^app-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^app-[0-9a-zA-Z]{17}$")]
		public string ApplicationID { get; set; }
		
		/// <summary>
		/// Application description.
		/// Max length: 600
		/// Min length: 0
		/// Pattern: ^[^\x00]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\x00]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Application name.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[^\s\x00]( *[^\s\x00])*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\s\x00]( *[^\s\x00])*$")]
		public string Name { get; set; }
	}
	
	public class UpdateLaunchConfigurationPostBody
	{
		
		/// <summary>
		/// Update Launch configuration Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Update Launch configuration boot mode request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		/// <summary>
		/// Update Launch configuration copy Private IP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		/// <summary>
		/// Update Launch configuration copy Tags request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// Enable map auto tagging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		/// <summary>
		/// Update Launch configuration launch disposition request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configure Licensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public UpdateLaunchConfigurationPostBodyLicensing Licensing { get; set; }
		
		/// <summary>
		/// Launch configuration map auto tagging MPE ID.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string MapAutoTaggingMpeID { get; set; }
		
		/// <summary>
		/// Update Launch configuration name request.
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// Post Launch Actions to executed on the Test or Cutover instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public UpdateLaunchConfigurationPostBodyPostLaunchActions PostLaunchActions { get; set; }
		
		/// <summary>
		/// Update Launch configuration by Source Server ID request.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
		
		/// <summary>
		/// Update Launch configuration Target instance right sizing request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	public class UpdateLaunchConfigurationPostBodyLicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	public class UpdateLaunchConfigurationPostBodyPostLaunchActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogGroupName")]
		public string CloudWatchLogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public PostLaunchActionsDeploymentType Deployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3LogBucket")]
		public string S3LogBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3OutputKeyPrefix")]
		public string S3OutputKeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmDocuments")]
		public SsmDocument[] SsmDocuments { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Associate public Ip address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatePublicIpAddress")]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		/// <summary>
		/// Launch configuration template boot mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootMode")]
		public BootMode BootMode { get; set; }
		
		/// <summary>
		/// Copy private Ip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPrivateIp")]
		public System.Nullable<System.Boolean> CopyPrivateIp { get; set; }
		
		/// <summary>
		/// Copy tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyTags")]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// Enable map auto tagging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMapAutoTagging")]
		public System.Nullable<System.Boolean> EnableMapAutoTagging { get; set; }
		
		/// <summary>
		/// Launch template disk configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeVolumeConf")]
		public UpdateLaunchConfigurationTemplatePostBodyLargeVolumeConf LargeVolumeConf { get; set; }
		
		/// <summary>
		/// Launch Configuration Template ID.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^lct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^lct-[0-9a-zA-Z]{17}$")]
		public string LaunchConfigurationTemplateID { get; set; }
		
		/// <summary>
		/// Launch disposition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchDisposition")]
		public LaunchDisposition LaunchDisposition { get; set; }
		
		/// <summary>
		/// Configure Licensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensing")]
		public UpdateLaunchConfigurationTemplatePostBodyLicensing Licensing { get; set; }
		
		/// <summary>
		/// Launch configuration template map auto tagging MPE ID.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapAutoTaggingMpeID")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string MapAutoTaggingMpeID { get; set; }
		
		/// <summary>
		/// Post Launch Actions to executed on the Test or Cutover instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postLaunchActions")]
		public UpdateLaunchConfigurationTemplatePostBodyPostLaunchActions PostLaunchActions { get; set; }
		
		/// <summary>
		/// Launch template disk configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallVolumeConf")]
		public UpdateLaunchConfigurationTemplatePostBodySmallVolumeConf SmallVolumeConf { get; set; }
		
		/// <summary>
		/// Small volume maximum size.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallVolumeMaxSize")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> SmallVolumeMaxSize { get; set; }
		
		/// <summary>
		/// Target instance type right-sizing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceTypeRightSizingMethod")]
		public TargetInstanceTypeRightSizingMethod TargetInstanceTypeRightSizingMethod { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBodyLargeVolumeConf
	{
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public VolumeType VolumeType { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBodyLicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="osByol")]
		public System.Nullable<System.Boolean> OsByol { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBodyPostLaunchActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogGroupName")]
		public string CloudWatchLogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public PostLaunchActionsDeploymentType Deployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3LogBucket")]
		public string S3LogBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3OutputKeyPrefix")]
		public string S3OutputKeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmDocuments")]
		public SsmDocument[] SsmDocuments { get; set; }
	}
	
	public class UpdateLaunchConfigurationTemplatePostBodySmallVolumeConf
	{
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public VolumeType VolumeType { get; set; }
	}
	
	public class UpdateReplicationConfigurationPostBody
	{
		
		/// <summary>
		/// Update replication configuration Account ID request.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Update replication configuration associate default Application Migration Service Security group request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Update replication configuration bandwidth throttling request.
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Update replication configuration create Public IP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		/// <summary>
		/// Update replication configuration data plane routing request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// Update replication configuration use default large Staging Disk type request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// Update replication configuration EBS encryption request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		/// <summary>
		/// Update replication configuration EBS encryption key ARN request.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Update replication configuration name request.
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// Update replication configuration replicated disks request.
		/// Minimum items: 0
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicatedDisks")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public ReplicationConfigurationReplicatedDisk[] ReplicatedDisks { get; set; }
		
		/// <summary>
		/// Update replication configuration Replication Server instance type request.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// Update replication configuration Replication Server Security Groups IDs request.
		/// Minimum items: 0
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Update replication configuration Source Server ID request.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
		
		/// <summary>
		/// Update replication configuration Staging Area subnet request.
		/// Max length: 255
		/// Min length: 0
		/// Pattern: ^subnet-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^subnet-[0-9a-fA-F]{8,}$")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// Update replication configuration Staging Area Tags request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public System.Collections.Generic.Dictionary<string, string> StagingAreaTags { get; set; }
		
		/// <summary>
		/// Update replication configuration use dedicated Replication Server request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
		
		/// <summary>
		/// Update replication configuration use Fips Endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	public class UpdateReplicationConfigurationTemplatePostBody
	{
		
		/// <summary>
		/// Update replication configuration template ARN request.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Update replication configuration template associate default Application Migration Service Security group request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associateDefaultSecurityGroup")]
		public System.Nullable<System.Boolean> AssociateDefaultSecurityGroup { get; set; }
		
		/// <summary>
		/// Update replication configuration template bandwidth throttling request.
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottling")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> BandwidthThrottling { get; set; }
		
		/// <summary>
		/// Update replication configuration template create Public IP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createPublicIP")]
		public System.Nullable<System.Boolean> CreatePublicIP { get; set; }
		
		/// <summary>
		/// Update replication configuration template data plane routing request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneRouting")]
		public ReplicationConfigurationDataPlaneRouting DataPlaneRouting { get; set; }
		
		/// <summary>
		/// Update replication configuration template use default large Staging Disk type request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLargeStagingDiskType")]
		public ReplicationConfigurationDefaultLargeStagingDiskType DefaultLargeStagingDiskType { get; set; }
		
		/// <summary>
		/// Update replication configuration template EBS encryption request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryption")]
		public ReplicationConfigurationEbsEncryption EbsEncryption { get; set; }
		
		/// <summary>
		/// Update replication configuration template EBS encryption key ARN request.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsEncryptionKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EbsEncryptionKeyArn { get; set; }
		
		/// <summary>
		/// Update replication configuration template template ID request.
		/// Required
		/// Max length: 21
		/// Min length: 21
		/// Pattern: ^rct-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationTemplateID")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^rct-[0-9a-zA-Z]{17}$")]
		public string ReplicationConfigurationTemplateID { get; set; }
		
		/// <summary>
		/// Update replication configuration template Replication Server instance type request.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServerInstanceType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReplicationServerInstanceType { get; set; }
		
		/// <summary>
		/// Update replication configuration template Replication Server Security groups IDs request.
		/// Minimum items: 0
		/// Maximum items: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationServersSecurityGroupsIDs")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string[] ReplicationServersSecurityGroupsIDs { get; set; }
		
		/// <summary>
		/// Update replication configuration template Staging Area subnet ID request.
		/// Max length: 255
		/// Min length: 0
		/// Pattern: ^subnet-[0-9a-fA-F]{8,}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaSubnetId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^subnet-[0-9a-fA-F]{8,}$")]
		public string StagingAreaSubnetId { get; set; }
		
		/// <summary>
		/// Update replication configuration template Staging Area Tags request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stagingAreaTags")]
		public System.Collections.Generic.Dictionary<string, string> StagingAreaTags { get; set; }
		
		/// <summary>
		/// Update replication configuration template use dedicated Replication Server request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDedicatedReplicationServer")]
		public System.Nullable<System.Boolean> UseDedicatedReplicationServer { get; set; }
		
		/// <summary>
		/// Update replication configuration template use Fips Endpoint request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useFipsEndpoint")]
		public System.Nullable<System.Boolean> UseFipsEndpoint { get; set; }
	}
	
	public class UpdateSourceServerReplicationTypePostBody
	{
		
		/// <summary>
		/// Account ID on which to update replication type.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Replication type to which to update source server.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationType")]
		public ReplicationType ReplicationType { get; set; }
		
		/// <summary>
		/// ID of source server on which to update replication type.
		/// Required
		/// Max length: 19
		/// Min length: 19
		/// Pattern: ^s-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerID")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^s-[0-9a-zA-Z]{17}$")]
		public string SourceServerID { get; set; }
	}
	
	public class UpdateWavePostBody
	{
		
		/// <summary>
		/// Account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12,}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12,}")]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Wave description.
		/// Max length: 600
		/// Min length: 0
		/// Pattern: ^[^\x00]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\x00]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Wave name.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[^\s\x00]( *[^\s\x00])*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\s\x00]( *[^\s\x00])*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Wave ID.
		/// Required
		/// Max length: 22
		/// Min length: 22
		/// Pattern: ^wave-[0-9a-zA-Z]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waveID")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^wave-[0-9a-zA-Z]{17}$")]
		public string WaveID { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
