//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Advanced Moon Phase Data
		/// Get Advanced Moon Phase Data
		/// GetAdvancedMoonPhaseData advanced
		/// </summary>
		/// <param name="filters">Filter data in the Advanced Moon API by specifying the desired fields using the `filters` parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details.</param>
		/// <returns>Get Advanced Moon Phase Data</returns>
		public async Task<GetAdvancedMoonPhaseDataReturn> GetAdvancedMoonPhaseDataAsync(string filters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "advanced?filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAdvancedMoonPhaseDataReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Basic Moon Phase Data
		/// Get Basic Moon Phase Data
		/// GetBasicMoonPhaseData basic
		/// </summary>
		/// <returns>Get Basic Moon Phase Data</returns>
		public async Task<GetBasicMoonPhaseDataReturn> GetBasicMoonPhaseDataAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "basic";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBasicMoonPhaseDataReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Lunar Calendar
		/// Get Lunar Calendar
		/// GetLunarCalendar calendar
		/// </summary>
		/// <param name="filters">Filter data in the Advanced Moon API by specifying the desired fields using the `filters` parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details.</param>
		/// <returns>Get Lunar Calendar</returns>
		public async Task GetLunarCalendarAsync(string filters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar?filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Emoji of Moon Phase
		/// Get Emoji of Moon Phase
		/// GetEmojiOfMoonPhase emoji
		/// </summary>
		/// <returns>Get Emoji of Moon Phase</returns>
		public async Task GetEmojiOfMoonPhaseAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "emoji";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Plain Text Moon Phase Data
		/// Get Plain Text Moon Phase Data
		/// GetPlainTextMoonPhaseData plain-text
		/// </summary>
		/// <returns>Get Plain Text Moon Phase Data</returns>
		public async Task GetPlainTextMoonPhaseDataAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "plain-text";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetAdvancedMoonPhaseDataReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moon")]
		public GetAdvancedMoonPhaseDataReturnMoon Moon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moon_phases")]
		public GetAdvancedMoonPhaseDataReturnMoon_phases Moon_phases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public GetAdvancedMoonPhaseDataReturnSun Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon
	{
		
		[System.Runtime.Serialization.DataMember(Name="age_days")]
		public System.Nullable<System.Double> Age_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emoji")]
		public string Emoji { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="illumination")]
		public string Illumination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lunar_cycle")]
		public string Lunar_cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moon_altitude")]
		public System.Nullable<System.Double> Moon_altitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moon_azimuth")]
		public System.Nullable<System.Double> Moon_azimuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moon_distance")]
		public System.Nullable<System.Double> Moon_distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moon_parallactic_angle")]
		public System.Nullable<System.Double> Moon_parallactic_angle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moonrise")]
		public string Moonrise { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moonrise_timestamp")]
		public System.Nullable<System.Double> Moonrise_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moonset")]
		public string Moonset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moonset_timestamp")]
		public System.Nullable<System.Double> Moonset_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public string Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase_name")]
		public string Phase_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public string Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zodiac_sign")]
		public string Zodiac_sign { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phases
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_quarter")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesFirst_quarter First_quarter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="full_moon")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesFull_moon Full_moon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_quarter")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesLast_quarter Last_quarter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_moon")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesNew_moon New_moon { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesFirst_quarter
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesFirst_quarterCurrent Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesFirst_quarterNext Next { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesFirst_quarterCurrent
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ago")]
		public System.Nullable<System.Double> Days_ago { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesFirst_quarterNext
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ahead")]
		public System.Nullable<System.Double> Days_ahead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesFull_moon
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesFull_moonCurrent Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesFull_moonNext Next { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesFull_moonCurrent
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ago")]
		public System.Nullable<System.Double> Days_ago { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesFull_moonNext
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ahead")]
		public System.Nullable<System.Double> Days_ahead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesLast_quarter
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesLast_quarterCurrent Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesLast_quarterNext Next { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesLast_quarterCurrent
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ago")]
		public System.Nullable<System.Double> Days_ago { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesLast_quarterNext
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ahead")]
		public System.Nullable<System.Double> Days_ahead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesNew_moon
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesNew_moonCurrent Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public GetAdvancedMoonPhaseDataReturnMoon_phasesNew_moonNext Next { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesNew_moonCurrent
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ago")]
		public System.Nullable<System.Double> Days_ago { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnMoon_phasesNew_moonNext
	{
		
		[System.Runtime.Serialization.DataMember(Name="datestamp")]
		public string Datestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_ahead")]
		public System.Nullable<System.Double> Days_ahead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
	}
	
	public class GetAdvancedMoonPhaseDataReturnSun
	{
		
		[System.Runtime.Serialization.DataMember(Name="day_length")]
		public string Day_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solar_noon")]
		public string Solar_noon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun_altitude")]
		public System.Nullable<System.Double> Sun_altitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun_azimuth")]
		public System.Nullable<System.Double> Sun_azimuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun_distance")]
		public System.Nullable<System.Double> Sun_distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sunrise")]
		public System.Nullable<System.Double> Sunrise { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sunrise_timestamp")]
		public string Sunrise_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sunset")]
		public System.Nullable<System.Double> Sunset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sunset_timestamp")]
		public string Sunset_timestamp { get; set; }
	}
	
	public class GetBasicMoonPhaseDataReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="days_until_next_full_moon")]
		public System.Nullable<System.Double> Days_until_next_full_moon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="days_until_next_new_moon")]
		public System.Nullable<System.Double> Days_until_next_new_moon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase_name")]
		public string Phase_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public string Stage { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
