//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get forecast and realtime information for known points<br/>None
		/// CompareStation v1.0/compareStation/{stationName}/
		/// </summary>
		/// <param name="stationName">Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma | EWXXX</param>
		/// <returns>No response was specified</returns>
		public async Task CompareStationAsync(string stationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/compareStation/"+ (stationName==null? "" : System.Uri.EscapeDataString(stationName))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data from the aemet stations<br/>None
		/// GetAemetStation v1.0/getAemetStation/{stationName}/{period}/
		/// </summary>
		/// <param name="stationName">station name currently: aeropuertopalma | caboblanco </param>
		/// <param name="period">Period of time to get the data. Options: lastdata lastday</param>
		/// <returns>No response was specified</returns>
		public async Task GetAemetStationAsync(string stationName, string period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getAemetStation/"+ (stationName==null? "" : System.Uri.EscapeDataString(stationName))+"/"+ (period==null? "" : System.Uri.EscapeDataString(period))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data from the easywind weather stations<br/>None
		/// GetEasywind v1.0/getEasyWind/{easywindId}/
		/// </summary>
		/// <param name="easywindId">currently: 'EW013'|'EW008'</param>
		/// <param name="period">Period of time to get the data latestdata|latesthour|latestday</param>
		/// <returns>No response was specified</returns>
		public async Task GetEasywindAsync(string easywindId, string period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getEasyWind/"+ (easywindId==null? "" : System.Uri.EscapeDataString(easywindId))+"/&period=" + (period==null? "" : System.Uri.EscapeDataString(period));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get stations in an event<br/>None
		/// GetEventStations v1.0/getEventStations/{eventId}/
		/// </summary>
		/// <param name="eventId">currently: 'trofeoprincesasofia|palmavela'</param>
		/// <returns>No response was specified</returns>
		public async Task GetEventStationsAsync(string eventId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getEventStations/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get forecast points of a yatchclub<br/>None
		/// GetForecastPoints v1.0/getForecastPoints/{yatchclubid}/language/{language}
		/// </summary>
		/// <param name="yatchclubid">base URL for the the</param>
		/// <returns>No response was specified</returns>
		public async Task GetForecastPointsAsync(string yatchclubid, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getForecastPoints/"+ (yatchclubid==null? "" : System.Uri.EscapeDataString(yatchclubid))+"/language/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get timeseries forecast information<br/>None
		/// GetForecastTimeSeries v1.0/getForecastTimeSeries/{latitude}/{longitude}/
		/// </summary>
		/// <param name="latitude">latitude for the forecast</param>
		/// <param name="longitude">longitude for the forecast</param>
		/// <param name="inittime">initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ</param>
		/// <param name="endtime">end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ</param>
		/// <param name="days">optional number of days in string. Will be added to init forecast date</param>
		/// <param name="hours">optional number of hours in string. Will be added to init forecast date</param>
		/// <param name="weather"> Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&wave=height,direction,period</param>
		/// <param name="wave"> Comma separated values for the wave parameteres height,direction,period</param>
		/// <param name="entryid">Direct file I want to extract</param>
		/// <returns>No response was specified</returns>
		public async Task GetForecastTimeSeriesAsync(float latitude, float longitude, string inittime, string endtime, int days, int hours, string weather, string wave, string entryid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getForecastTimeSeries/"+latitude+"/"+longitude+"/?inittime=" + (inittime==null? "" : System.Uri.EscapeDataString(inittime))+"&endtime=" + (endtime==null? "" : System.Uri.EscapeDataString(endtime))+"&days="+days+"&hours="+hours+"&weather=" + (weather==null? "" : System.Uri.EscapeDataString(weather))+"&wave=" + (wave==null? "" : System.Uri.EscapeDataString(wave))+"&entryid=" + (entryid==null? "" : System.Uri.EscapeDataString(entryid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get timeseries forecast information<br/>None
		/// GetForecastTimeSeriesWrf v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/
		/// </summary>
		/// <param name="latitude">latitude for the forecast</param>
		/// <param name="longitude">longitude for the forecast</param>
		/// <param name="inittime">initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ</param>
		/// <param name="endtime">end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ</param>
		/// <param name="days">optional number of days in string. Will be added to init forecast date</param>
		/// <param name="hours">optional number of hours in string. Will be added to init forecast date</param>
		/// <param name="weather"> Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&wave=height,direction,period</param>
		/// <param name="wave"> Comma separated values for the wave parameteres height,direction,period</param>
		/// <param name="entryid">Direct file I want to extract</param>
		/// <returns>No response was specified</returns>
		public async Task GetForecastTimeSeriesWrfAsync(float latitude, float longitude, string inittime, string endtime, int days, int hours, string weather, string wave, string entryid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getForecastTimeSeriesWrf/"+latitude+"/"+longitude+"/?inittime=" + (inittime==null? "" : System.Uri.EscapeDataString(inittime))+"&endtime=" + (endtime==null? "" : System.Uri.EscapeDataString(endtime))+"&days="+days+"&hours="+hours+"&weather=" + (weather==null? "" : System.Uri.EscapeDataString(weather))+"&wave=" + (wave==null? "" : System.Uri.EscapeDataString(wave))+"&entryid=" + (entryid==null? "" : System.Uri.EscapeDataString(entryid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data from the socib bahia de palma buoy<br/>None
		/// GetSocibWeatherStation v1.0/getSocibWeatherStation/{stationName}/{period}/
		/// </summary>
		/// <param name="stationName">station name currently: boyaenderrocat | playadepalma</param>
		/// <param name="period">Period of time to get the data. Options: lastdata lasthour lastday</param>
		/// <returns>No response was specified</returns>
		public async Task GetSocibWeatherStationAsync(string stationName, string period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getSocibWeatherStation/"+ (stationName==null? "" : System.Uri.EscapeDataString(stationName))+"/"+ (period==null? "" : System.Uri.EscapeDataString(period))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data from the weather display software<br/>None
		/// GetWeatherDisplay v1.0/getWeatherDisplay/{stationName}/
		/// </summary>
		/// <param name="stationName">currently: 'cnarenal'|'campastilla' | 'cncg'</param>
		/// <param name="period">Period of time to get the data latestdata|latesthour|latestday|dailylog</param>
		/// <returns>No response was specified</returns>
		public async Task GetWeatherDisplayAsync(string stationName, string period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getWeatherDisplay/"+ (stationName==null? "" : System.Uri.EscapeDataString(stationName))+"/&period=" + (period==null? "" : System.Uri.EscapeDataString(period));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get forecast and realtime information for known points<br/>None
		/// GetWebCams v1.0/getWebCams/
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GetWebCamsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1.0/getWebCams/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
