//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyImageSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceImageSetProperties")]
		public CopySourceImageSetProperties SourceImageSetProperties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationImageSetProperties")]
		public CopyDestinationImageSetProperties DestinationImageSetProperties { get; set; }
	}
	
	/// <summary>
	/// Copy source image set properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopySourceImageSetProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latestVersionId")]
		public string LatestVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetState")]
		public ImageSetState ImageSetState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetWorkflowStatus")]
		public ImageSetWorkflowStatus ImageSetWorkflowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetArn")]
		public string ImageSetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageSetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageSetWorkflowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPYING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPYING_WITH_READ_ONLY_ACCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 9,
	}
	
	/// <summary>
	/// Copy the image set properties of the destination image set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyDestinationImageSetProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latestVersionId")]
		public string LatestVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetState")]
		public ImageSetState ImageSetState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetWorkflowStatus")]
		public ImageSetWorkflowStatus ImageSetWorkflowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetArn")]
		public string ImageSetArn { get; set; }
	}
	
	/// <summary>
	/// Copy source image set information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopySourceImageSetInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latestVersionId")]
		public string LatestVersionId { get; set; }
	}
	
	/// <summary>
	/// Copy the destination image set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyDestinationImageSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latestVersionId")]
		public string LatestVersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatastoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreStatus")]
		public DatastoreStatus DatastoreStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatastoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatastoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreStatus")]
		public DatastoreStatus DatastoreStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteImageSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetState")]
		public ImageSetState ImageSetState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetWorkflowStatus")]
		public ImageSetWorkflowStatus ImageSetWorkflowStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDICOMImportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobProperties")]
		public DICOMImportJobProperties JobProperties { get; set; }
	}
	
	/// <summary>
	/// Properties of the import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DICOMImportJobProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public JobStatus JobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataAccessRoleArn")]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endedAt")]
		public System.DateTimeOffset EndedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submittedAt")]
		public System.DateTimeOffset SubmittedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputS3Uri")]
		public string InputS3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputS3Uri")]
		public string OutputS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDatastoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreProperties")]
		public DatastoreProperties DatastoreProperties { get; set; }
	}
	
	/// <summary>
	/// The properties associated with the data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreStatus")]
		public DatastoreStatus DatastoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastoreArn")]
		public string DatastoreArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImageFrameResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageFrameBlob")]
		public string ImageFrameBlob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImageSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetState")]
		public ImageSetState ImageSetState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetWorkflowStatus")]
		public ImageSetWorkflowStatus ImageSetWorkflowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedAt")]
		public System.DateTimeOffset DeletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetArn")]
		public string ImageSetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImageSetMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetMetadataBlob")]
		public string ImageSetMetadataBlob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDICOMImportJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSummaries")]
		public DICOMImportJobSummary[] JobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DICOMImportJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public JobStatus JobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataAccessRoleArn")]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endedAt")]
		public System.DateTimeOffset EndedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submittedAt")]
		public System.DateTimeOffset SubmittedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatastoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datastoreSummaries")]
		public DatastoreSummary[] DatastoreSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List of summaries of data stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreStatus")]
		public DatastoreStatus DatastoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastoreArn")]
		public string DatastoreArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImageSetVersionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetPropertiesList")]
		public ImageSetProperties[] ImageSetPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The image set properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageSetProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetState")]
		public ImageSetState ImageSetState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageSetWorkflowStatus ImageSetWorkflowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedAt")]
		public System.DateTimeOffset DeletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchImageSetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetsMetadataSummaries")]
		public ImageSetsMetadataSummary[] ImageSetsMetadataSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the image set metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageSetsMetadataSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DICOMTags DICOMTags { get; set; }
	}
	
	/// <summary>
	/// The DICOM attributes returned as a part of a response. Each image set has these properties as part of a search result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DICOMTags
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMPatientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMPatientName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMPatientBirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMPatientSex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyInstanceUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DICOMNumberOfStudyRelatedSeries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DICOMNumberOfStudyRelatedInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMAccessionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyTime { get; set; }
	}
	
	/// <summary>
	/// The search filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SearchByAttributeValue[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public Operator Operator { get; set; }
	}
	
	/// <summary>
	/// The search input attribute value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchByAttributeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMPatientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMAccessionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyInstanceUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DICOMStudyDateAndTime DICOMStudyDateAndTime { get; set; }
	}
	
	/// <summary>
	/// The aggregated structure to store DICOM study date and study time for search capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DICOMStudyDateAndTime
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DICOMStudyTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Operator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDICOMImportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public JobStatus JobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submittedAt")]
		public System.DateTimeOffset SubmittedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateImageSetMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreId")]
		public string DatastoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetId")]
		public string ImageSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latestVersionId")]
		public string LatestVersionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSetState")]
		public ImageSetState ImageSetState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageSetWorkflowStatus")]
		public ImageSetWorkflowStatus ImageSetWorkflowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The object containing <code>removableAttributes</code> and <code>updatableAttributes</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DICOMUpdates
	{
		
		[System.Runtime.Serialization.DataMember(Name="removableAttributes")]
		public string RemovableAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatableAttributes")]
		public string UpdatableAttributes { get; set; }
	}
	
	/// <summary>
	/// Copy image set information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyImageSetInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceImageSet")]
		public CopySourceImageSetInformation SourceImageSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationImageSet")]
		public CopyDestinationImageSet DestinationImageSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyImageSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyImageSetInformation")]
		public CopyImageSetInformation CopyImageSetInformation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatastoreRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatastoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteImageSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDICOMImportJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDatastoreRequest
	{
	}
	
	/// <summary>
	/// Information about the image frame (pixel data) identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageFrameInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageFrameId")]
		public string ImageFrameId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImageFrameRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageFrameInformation")]
		public ImageFrameInformation ImageFrameInformation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImageSetMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetImageSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDICOMImportJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatastoresRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImageSetVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// Contains DICOMUpdates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetadataUpdates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DICOMUpdates DICOMUpdates { get; set; }
	}
	
	/// <summary>
	/// The search criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SearchFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchImageSetsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchCriteria")]
		public SearchCriteria SearchCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDICOMImportJobRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataAccessRoleArn")]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputS3Uri")]
		public string InputS3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputS3Uri")]
		public string OutputS3Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateImageSetMetadataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateImageSetMetadataUpdates")]
		public MetadataUpdates UpdateImageSetMetadataUpdates { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Copy an image set.
		/// CopyImageSet datastore/{datastoreId}/imageSet/{sourceImageSetId}/copyImageSet
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="sourceImageSetId">The source image set identifier.</param>
		/// <returns>Success</returns>
		public async Task<CopyImageSetResponse> CopyImageSetAsync(string datastoreId, string sourceImageSetId, CopyImageSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (sourceImageSetId==null? "" : System.Uri.EscapeDataString(sourceImageSetId))+"/copyImageSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CopyImageSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a data store.
		/// CreateDatastore datastore
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatastoreResponse> CreateDatastoreAsync(CreateDatastorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateDatastoreResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List data stores created by this AWS account.
		/// ListDatastores datastore
		/// </summary>
		/// <param name="datastoreStatus">The data store status.</param>
		/// <param name="nextToken">The pagination token used to request the list of data stores on the next page.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="maxResults">Valid Range: Minimum value of 1. Maximum value of 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDatastoresResponse> ListDatastoresAsync(DatastoreStatus datastoreStatus, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore?datastoreStatus=" + datastoreStatus+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDatastoresResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Delete a data store.</p> <note> <p>Before a data store can be deleted, you must first delete all image sets within it.</p> </note>
		/// DeleteDatastore datastore/{datastoreId}
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDatastoreResponse> DeleteDatastoreAsync(string datastoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteDatastoreResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get data store properties.
		/// GetDatastore datastore/{datastoreId}
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetDatastoreResponse> GetDatastoreAsync(string datastoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDatastoreResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an image set.
		/// DeleteImageSet datastore/{datastoreId}/imageSet/{imageSetId}/deleteImageSet
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="imageSetId">The image set identifier.</param>
		/// <returns>Success</returns>
		public async Task<DeleteImageSetResponse> DeleteImageSetAsync(string datastoreId, string imageSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (imageSetId==null? "" : System.Uri.EscapeDataString(imageSetId))+"/deleteImageSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteImageSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the import job properties to learn more about the job or job progress.
		/// GetDICOMImportJob getDICOMImportJob/datastore/{datastoreId}/job/{jobId}
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="jobId">The import job identifier.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDICOMImportJobResponse> GetDICOMImportJobAsync(string datastoreId, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getDICOMImportJob/datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/job/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDICOMImportJobResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an image frame (pixel data) for an image set.
		/// GetImageFrame datastore/{datastoreId}/imageSet/{imageSetId}/getImageFrame
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="imageSetId">The image set identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetImageFrameResponse> GetImageFrameAsync(string datastoreId, string imageSetId, GetImageFramePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (imageSetId==null? "" : System.Uri.EscapeDataString(imageSetId))+"/getImageFrame";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetImageFrameResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get image set properties.
		/// GetImageSet datastore/{datastoreId}/imageSet/{imageSetId}/getImageSet
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="imageSetId">The image set identifier.</param>
		/// <param name="version">The image set version identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetImageSetResponse> GetImageSetAsync(string datastoreId, string imageSetId, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (imageSetId==null? "" : System.Uri.EscapeDataString(imageSetId))+"/getImageSet&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetImageSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get metadata attributes for an image set.
		/// GetImageSetMetadata datastore/{datastoreId}/imageSet/{imageSetId}/getImageSetMetadata
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="imageSetId">The image set identifier.</param>
		/// <param name="version">The image set version identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetImageSetMetadataResponse> GetImageSetMetadataAsync(string datastoreId, string imageSetId, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (imageSetId==null? "" : System.Uri.EscapeDataString(imageSetId))+"/getImageSetMetadata&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetImageSetMetadataResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List import jobs created by this AWS account for a specific data store.
		/// ListDICOMImportJobs listDICOMImportJobs/datastore/{datastoreId}
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="jobStatus">The filters for listing import jobs based on status.</param>
		/// <param name="nextToken">The pagination token used to request the list of import jobs on the next page.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="maxResults">The max results count. The upper bound is determined by load testing.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDICOMImportJobsResponse> ListDICOMImportJobsAsync(string datastoreId, JobStatus jobStatus, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listDICOMImportJobs/datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"&jobStatus=" + jobStatus+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDICOMImportJobsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List image set versions.
		/// ListImageSetVersions datastore/{datastoreId}/imageSet/{imageSetId}/listImageSetVersions
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="imageSetId">The image set identifier.</param>
		/// <param name="nextToken">The pagination token used to request the list of image set versions on the next page.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <param name="maxResults">The max results count.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListImageSetVersionsResponse> ListImageSetVersionsAsync(string datastoreId, string imageSetId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (imageSetId==null? "" : System.Uri.EscapeDataString(imageSetId))+"/listImageSetVersions&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListImageSetVersionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all tags associated with a medical imaging resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the medical imaging resource to list tags for.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a user-specifed key and value tag to a medical imaging resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the medical imaging resource that tags are being added to.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search image sets based on defined input attributes.
		/// SearchImageSets datastore/{datastoreId}/searchImageSets
		/// </summary>
		/// <param name="datastoreId">The identifier of the data store where the image sets reside.</param>
		/// <param name="maxResults">The maximum number of results that can be returned in a search.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">The token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.
		/// Min length: 1
		/// Max length: 8192
		// </param>
		/// <returns>Success</returns>
		public async Task<SearchImageSetsResponse> SearchImageSetsAsync(string datastoreId, int maxResults, string nextToken, SearchImageSetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/searchImageSets&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchImageSetsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start importing bulk data into an <code>ACTIVE</code> data store. The import job imports DICOM P10 files found in the S3 prefix specified by the <code>inputS3Uri</code> parameter. The import job stores processing results in the file specified by the <code>outputS3Uri</code> parameter.
		/// StartDICOMImportJob startDICOMImportJob/datastore/{datastoreId}
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <returns>Success</returns>
		public async Task<StartDICOMImportJobResponse> StartDICOMImportJobAsync(string datastoreId, StartDICOMImportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "startDICOMImportJob/datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartDICOMImportJobResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes tags from a medical imaging resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the medical imaging resource that tags are being removed from.</param>
		/// <param name="tagKeys">The keys for the tags to be removed from the medical imaging resource.
		/// Minimum items: 0
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update image set metadata attributes.
		/// UpdateImageSetMetadata datastore/{datastoreId}/imageSet/{imageSetId}/updateImageSetMetadata#latestVersion
		/// </summary>
		/// <param name="datastoreId">The data store identifier.</param>
		/// <param name="imageSetId">The image set identifier.</param>
		/// <param name="latestVersion">The latest image set version identifier.</param>
		/// <returns>Success</returns>
		public async Task<UpdateImageSetMetadataResponse> UpdateImageSetMetadataAsync(string datastoreId, string imageSetId, string latestVersion, UpdateImageSetMetadataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastore/"+ (datastoreId==null? "" : System.Uri.EscapeDataString(datastoreId))+"/imageSet/"+ (imageSetId==null? "" : System.Uri.EscapeDataString(imageSetId))+"/updateImageSetMetadata#latestVersion&latestVersion=" + (latestVersion==null? "" : System.Uri.EscapeDataString(latestVersion));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateImageSetMetadataResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CopyImageSetPostBody
	{
		
		/// <summary>
		/// Copy image set information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyImageSetInformation")]
		public CopyImageSetPostBodyCopyImageSetInformation CopyImageSetInformation { get; set; }
	}
	
	public class CopyImageSetPostBodyCopyImageSetInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceImageSet")]
		public CopySourceImageSetInformation SourceImageSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationImageSet")]
		public CopyDestinationImageSet DestinationImageSet { get; set; }
	}
	
	public class CreateDatastorePostBody
	{
		
		/// <summary>
		/// The data store name.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [A-Za-z0-9._/#-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._/#-]+")]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// A unique identifier for API idempotency.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._-]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags provided when creating a data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// ARN referencing a KMS key or KMS key alias.
		/// Min length: 1
		/// Max length: 512
		/// Pattern: arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\d{1}:\d{12}:((key/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})|(alias/[a-zA-Z0-9:/_-]{1,256}))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\d{1}:\d{12}:((key/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})|(alias/[a-zA-Z0-9:/_-]{1,256}))")]
		public string KmsKeyArn { get; set; }
	}
	
	public class GetImageFramePostBody
	{
		
		/// <summary>
		/// Information about the image frame (pixel data) identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageFrameInformation")]
		public GetImageFramePostBodyImageFrameInformation ImageFrameInformation { get; set; }
	}
	
	public class GetImageFramePostBodyImageFrameInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageFrameId")]
		public string ImageFrameId { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The user-specified key and value tag pairs added to a medical imaging resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class SearchImageSetsPostBody
	{
		
		/// <summary>
		/// The search criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchCriteria")]
		public SearchImageSetsPostBodySearchCriteria SearchCriteria { get; set; }
	}
	
	public class SearchImageSetsPostBodySearchCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SearchFilter[] Filters { get; set; }
	}
	
	public class StartDICOMImportJobPostBody
	{
		
		/// <summary>
		/// The import job name.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._/#-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._/#-]+")]
		public string JobName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role that grants permission to access medical imaging resources.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataAccessRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+")]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// A unique identifier for API idempotency.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._-]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The input prefix path for the S3 bucket that contains the DICOM files to be imported.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputS3Uri")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?")]
		public string InputS3Uri { get; set; }
		
		/// <summary>
		/// The output prefix of the S3 bucket to upload the results of the DICOM import job.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputS3Uri")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?")]
		public string OutputS3Uri { get; set; }
	}
	
	public class UpdateImageSetMetadataPostBody
	{
		
		/// <summary>
		/// Contains DICOMUpdates.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateImageSetMetadataUpdates")]
		public UpdateImageSetMetadataPostBodyUpdateImageSetMetadataUpdates UpdateImageSetMetadataUpdates { get; set; }
	}
	
	public class UpdateImageSetMetadataPostBodyUpdateImageSetMetadataUpdates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DICOMUpdates DICOMUpdates { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
