//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiResponseFailure
	{
		
		/// <summary>
		/// The reason for the PDF generation failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Will be false if the operation failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiResponseSuccess
	{
		
		/// <summary>
		/// Cost of the operation (mbIn + mbOut) * $.001
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		/// The amount of megabytes of bandwidth used to process the pdf
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mbIn")]
		public System.Nullable<System.Double> MbIn { get; set; }
		
		/// <summary>
		/// The amount of megabytes of bandwidth generated from the resulting pdf
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mbOut")]
		public System.Nullable<System.Double> MbOut { get; set; }
		
		/// <summary>
		/// A url to the PDF that will exist only for 24 hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdf")]
		public string Pdf { get; set; }
		
		/// <summary>
		/// Will be true if the operation suceeded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChromeAdvancedOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="landscape")]
		public string Landscape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printBackground")]
		public System.Nullable<System.Boolean> PrintBackground { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChromeHtmlToPdfRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlinePdf")]
		public System.Nullable<System.Boolean> InlinePdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ChromeAdvancedOptions Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChromeUrlToPdfRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlinePdf")]
		public System.Nullable<System.Boolean> InlinePdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ChromeAdvancedOptions Options { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LibreOfficeConvertRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlinePdf")]
		public System.Nullable<System.Boolean> InlinePdf { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlinePdf")]
		public System.Nullable<System.Boolean> InlinePdf { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WkHtmlToPdfAdvancedOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public string PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WkHtmlToPdfHtmlToPdfRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlinePdf")]
		public System.Nullable<System.Boolean> InlinePdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public WkHtmlToPdfAdvancedOptions Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WkHtmlToPdfUrlToPdfRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlinePdf")]
		public System.Nullable<System.Boolean> InlinePdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public WkHtmlToPdfAdvancedOptions Options { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Convert raw HTML to PDF
		/// Convert HTML to a PDF using Headless Chrome on AWS Lambda.
		/// ### Authorize via Header of Request
		/// **Authorization: YOUR-API-KEY**
		/// ChromeFromHtmlPost chrome/html
		/// </summary>
		/// <param name="requestBody">A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
		///- `html` *(string, required)* - raw HTML to convert to PDF
		///- `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
		///- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
		///- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).</param>
		/// <returns>A JSON object containing the url to the PDF and other meta data</returns>
		public async Task<ApiResponseSuccess> ChromeFromHtmlPostAsync(ChromeHtmlToPdfRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chrome/html";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Convert URL to PDF
		/// Convert a URL or Web Page to PDF using Headless Chrome on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.
		/// ### Authorize via Query String Parameter
		/// **apikey=YOUR-API-KEY**
		/// ### Example
		/// ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```
		/// ChromeFromUrlGET chrome/url
		/// </summary>
		/// <param name="url">Url of the page to convert to PDF. Must start with http:// or https://.</param>
		/// <param name="output">Specify output=json to receive a JSON output. Defaults to PDF file.</param>
		/// <returns>A PDF file or a JSON object depending on the `output` query parameter</returns>
		public async Task<ApiResponseSuccess> ChromeFromUrlGETAsync(string url, string output, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chrome/url?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&output=" + (output==null? "" : System.Uri.EscapeDataString(output));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Convert URL to PDF
		/// Convert a URL or Web Page to PDF using Headless Chrome on AWS Lambda..
		/// ### Authorize via Header of Request
		/// **Authorization: YOUR-API-KEY**
		/// ChromeFromUrlPost chrome/url
		/// </summary>
		/// <param name="requestBody">A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
		///- `url` *(string, required)* - Url to the web page to convert to PDF
		///- `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
		///- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
		///- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).</param>
		/// <returns>A JSON object containing the url to the PDF and other meta data</returns>
		public async Task<ApiResponseSuccess> ChromeFromUrlPostAsync(ChromeUrlToPdfRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chrome/url";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Convert office document or image to PDF
		/// Convert an office document (Word, Excel, Powerpoint) or an image (jpg, gif, png) to a PDF using LibreOffice on AWS Lambda.
		/// ### Authorize via Header of Request
		/// **Authorization: YOUR-API-KEY**
		/// LibreConvertPost libreoffice/convert
		/// </summary>
		/// <param name="requestBody">A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
		///- `url` *(string, required)* - A direct URL to the file. Api2Pdf will consume the file at that URL and then convert it.
		///- `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
		///- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified. </param>
		/// <returns>A JSON object containing the url to the PDF and other meta data</returns>
		public async Task<ApiResponseSuccess> LibreConvertPostAsync(LibreOfficeConvertRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "libreoffice/convert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Merge multiple PDFs together
		/// Merge two or more PDFs together on AWS Lambda.
		/// ### Authorize via Header of Request
		/// **Authorization: YOUR-API-KEY**
		/// MergePost merge
		/// </summary>
		/// <param name="requestBody">A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
		///- `urls` *(array of urls, required)* - A JSON array of direct URLs to PDFs. Api2Pdf will consume the PDF files in the list and then merge them all together..
		///- `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
		///- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified. </param>
		/// <returns>A JSON object containing the url to the PDF and other meta data</returns>
		public async Task<ApiResponseSuccess> MergePostAsync(MergeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "merge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Convert raw HTML to PDF
		/// Convert HTML to a PDF using WkHtmlToPdf on AWS Lambda.
		/// ### Authorize via Header of Request
		/// **Authorization: YOUR-API-KEY**
		/// WkhtmltopdfFromHtmlPost wkhtmltopdf/html
		/// </summary>
		/// <param name="requestBody">A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
		///- `html` *(string, required)* - raw HTML to convert to PDF
		///- `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
		///- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
		///- `options` *(object, optional)* - Include advanced WkHtmlToPdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).</param>
		/// <returns>A JSON object containing the url to the PDF and other meta data</returns>
		public async Task<ApiResponseSuccess> WkhtmltopdfFromHtmlPostAsync(WkHtmlToPdfHtmlToPdfRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wkhtmltopdf/html";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Convert URL to PDF
		/// Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.
		/// ### Authorize via Query String Parameter
		/// **apikey=YOUR-API-KEY**
		/// ### Example
		/// ``` https://v2018.api2pdf.com/wkhtmltopdf/url?url={UrlToConvert}&apikey={YourApiKey} ```
		/// WkhtmltopdfFromUrlGET wkhtmltopdf/url
		/// </summary>
		/// <param name="url">Url of the page to convert to PDF. Must start with http:// or https://.</param>
		/// <param name="output">Specify output=json to receive a JSON output. Defaults to PDF file.</param>
		/// <returns>A PDF file or a JSON object depending on the `output` query parameter</returns>
		public async Task<ApiResponseSuccess> WkhtmltopdfFromUrlGETAsync(string url, string output, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wkhtmltopdf/url?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&output=" + (output==null? "" : System.Uri.EscapeDataString(output));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Convert URL to PDF
		/// Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda..
		/// ### Authorize via Header of Request
		/// **Authorization: YOUR-API-KEY**
		/// WkhtmltopdfFromUrlPost wkhtmltopdf/url
		/// </summary>
		/// <param name="requestBody">A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
		///- `url` *(string, required)* - Url to the web page to convert to PDF
		///- `inlinePdf` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
		///- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
		///- `options` *(object, optional)* - Include advanced WkHtmlToPdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).</param>
		/// <returns>A JSON object containing the url to the PDF and other meta data</returns>
		public async Task<ApiResponseSuccess> WkhtmltopdfFromUrlPostAsync(WkHtmlToPdfUrlToPdfRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wkhtmltopdf/url";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponseSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate bar codes and QR codes with ZXING.
		/// See full list of options and documentation [here](https://www.api2pdf.com/documentation/advanced-options-zxing-zebra-crossing-barcodes/)
		/// ### Authorize via Query String Parameter
		/// **apikey=YOUR-API-KEY**
		/// ### Example
		/// ``` https://v2018.api2pdf.com/zebra?format={format}&apikey={YourApiKey}&value={YourText} ```
		/// ZebraGET zebra
		/// </summary>
		/// <param name="format">Most common is CODE_39 or QR_CODE</param>
		/// <param name="value">Specify the text value you want to convert</param>
		/// <param name="showlabel">Show label of text below barcode</param>
		/// <param name="height">Height of the barcode generated image</param>
		/// <param name="width">Width of the barcode generated image</param>
		/// <returns>An image of the generated barcode or QR code</returns>
		public async Task ZebraGETAsync(string format, string value, bool showlabel, int height, int width, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "zebra?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&value=" + (value==null? "" : System.Uri.EscapeDataString(value))+"&showlabel="+showlabel+"&height="+height+"&width="+width;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
