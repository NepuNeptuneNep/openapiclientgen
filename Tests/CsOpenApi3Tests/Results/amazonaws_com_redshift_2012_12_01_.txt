//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptReservedNodeExchangeOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode ExchangedReservedNode { get; set; }
	}
	
	/// <summary>
	/// Describes a reserved node. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RecurringCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeOfferingType ReservedNodeOfferingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservedNodeOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Regular")]
		Regular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Upgradable")]
		Upgradable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReservedNodeStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeAlreadyMigratedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeOfferingNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedOperationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependentServiceUnavailableFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerIntegrationOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartnerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedPartnerIntegrationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataShare
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProducerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowPubliclyAccessibleConsumers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataShareAssociation[] DataShareAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManagedBy { get; set; }
	}
	
	/// <summary>
	/// The association of a datashare from a producer account with a data consumer. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataShareAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataShareStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusChangeDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_AUTHORIZATION")]
		PENDING_AUTHORIZATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHORIZED")]
		AUTHORIZED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEAUTHORIZED")]
		DEAUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDataShareFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNamespaceFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeClusterSecurityGroupIngressResult
	{
		
		/// <summary>
		/// Describes a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup ClusterSecurityGroup { get; set; }
	}
	
	/// <summary>
	/// Describes a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EC2SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IPRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSecurityGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterSecurityGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationQuotaExceededFault
	{
	}
	
	/// <summary>
	/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAuthorization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Grantor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Grantee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AuthorizeTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowedAllVPCs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowedVPCs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndpointCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthorizationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Authorized")]
		Authorized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Revoking")]
		Revoking = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAuthorizationsPerClusterLimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAuthorizationAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidAuthorizationStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeSnapshotAccessResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	/// <summary>
	/// Describes a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SnapshotCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineFullVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EncryptedWithHSM { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountsWithRestoreAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBackupSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActualIncrementalBackupSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BackupProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentBackupRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedSecondsToCompletion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RestorableNodeTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRemainingDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SnapshotRetentionStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSnapshotNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependentServiceRequestThrottlingFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterSnapshotStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteClusterSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteRequestSizeExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchModifyClusterSnapshotsOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRetentionPeriodFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchModifyClusterSnapshotsLimitExceededFault
	{
	}
	
	/// <summary>
	/// Describes the result of a cluster resize operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResizeProgressMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetNumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportTablesCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportTablesInProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportTablesNotStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AvgResizeRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalResizeDataInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedTimeToCompletionInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResizeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetEncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DataTransferProgressPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResizeNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSnapshotAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSnapshotQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuthenticationProfileResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationProfileAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationProfileQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidAuthenticationProfileRequestFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	/// <summary>
	/// Describes a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterAvailabilityStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModifyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterParameterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestoreStatus RestoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataTransferProgress DataTransferProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HsmStatus HsmStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterSnapshotCopyStatus ClusterSnapshotCopyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterNode[] ClusterNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticIpStatus ElasticIpStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterRevisionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PendingActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticResizeNumberOfNodeOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeferredMaintenanceWindows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleState SnapshotScheduleState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpectedNextSnapshotScheduleTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedNextSnapshotScheduleTimeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NextMaintenanceWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResizeInfo ResizeInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneRelocationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterNamespaceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalStorageCapacityInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AquaConfiguration AquaConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultIamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeExchangeStatus ReservedNodeExchangeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CustomDomainCertificateExpiryDate { get; set; }
	}
	
	/// <summary>
	/// Describes a connection endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcEndpoints { get; set; }
	}
	
	/// <summary>
	/// Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionType { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentRestoreRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedTimeToCompletionInSeconds { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a cluster while it is in the process of resizing with an incremental resize.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataTransferProgress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalDataInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferredInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedTimeToCompletionInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
	}
	
	/// <summary>
	/// Describes the status of changes to HSM settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Returns the destination region and retention period that are configured for cross-region snapshot copy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSnapshotCopyStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
	}
	
	/// <summary>
	/// The identifier of a node in a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIPAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIPAddress { get; set; }
	}
	
	/// <summary>
	/// Describes the status of the elastic IP (EIP) address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElasticIpStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFYING")]
		MODIFYING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	/// <summary>
	/// Describes a resize operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResizeInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResizeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowCancelResize { get; set; }
	}
	
	/// <summary>
	/// The operation that uses this structure is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AquaConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AquaStatus AquaStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AquaConfigurationStatus AquaConfigurationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AquaStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="applying")]
		applying = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AquaConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="auto")]
		auto = 2,
	}
	
	/// <summary>
	/// Reserved-node status details, such as the source reserved-node identifier, the target reserved-node identifier, the node type, the node count, and other details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeExchangeStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeExchangeRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeExchangeStatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceReservedNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SourceReservedNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetReservedNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetReservedNodeCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservedNodeExchangeStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUESTED")]
		REQUESTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETRYING")]
		RETRYING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 5,
	}
	
	/// <summary>
	/// A tag consisting of a name/value pair for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientClusterCapacityFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberOfNodesQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberOfNodesPerClusterLimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSubnetGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidVPCNetworkStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterSubnetGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSubnet
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedOperation
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmClientCertificateNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmConfigurationNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidElasticIpFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagLimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTagFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterTrackFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotScheduleNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterParameterGroupResult
	{
		
		/// <summary>
		/// Describes a parameter group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterParameterGroup ClusterParameterGroup { get; set; }
	}
	
	/// <summary>
	/// Describes a parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterSecurityGroupResult
	{
		
		/// <summary>
		/// Describes a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup ClusterSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSecurityGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSecurityGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterSubnetGroupResult
	{
		
		/// <summary>
		/// Describes a subnet group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSubnetGroup ClusterSubnetGroup { get; set; }
	}
	
	/// <summary>
	/// Describes a subnet group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSubnetGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSubnetGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSubnetQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomDomainAssociationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertExpiryTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomCnameAssociationFault
	{
	}
	
	/// <summary>
	/// Describes a Redshift-managed VPC endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAccess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndpointCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroups { get; set; }
		
		/// <summary>
		/// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcEndpoint VpcEndpoint { get; set; }
	}
	
	/// <summary>
	/// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessToClusterDeniedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointsPerClusterLimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointsPerAuthorizationLimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEventSubscriptionResult
	{
		
		/// <summary>
		/// Describes event subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	/// <summary>
	/// Describes event subscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAwsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustSubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubscriptionCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceIdsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategoriesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSubscriptionQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionAlreadyExistFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNSInvalidTopicFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNSNoAuthorizationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNSTopicArnNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionEventIdNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionCategoryNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionSeverityNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHsmClientCertificateResult
	{
		
		/// <summary>
		/// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HsmClientCertificate HsmClientCertificate { get; set; }
	}
	
	/// <summary>
	/// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmClientCertificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificatePublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmClientCertificateAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmClientCertificateQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHsmConfigurationResult
	{
		
		/// <summary>
		/// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HsmConfiguration HsmConfiguration { get; set; }
	}
	
	/// <summary>
	/// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmPartitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmConfigurationAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmConfigurationQuotaExceededFault
	{
	}
	
	/// <summary>
	/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see <a>ScheduledActionType</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionType TargetAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NextInvocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	/// <summary>
	/// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResizeClusterMessage ResizeCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PauseClusterMessage PauseCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResumeClusterMessage ResumeCluster { get; set; }
	}
	
	/// <summary>
	/// Describes a resize cluster operation. For example, a scheduled action to run the <code>ResizeCluster</code> API operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResizeClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Classic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetReservedNodeOfferingId { get; set; }
	}
	
	/// <summary>
	/// Describes a pause cluster operation. For example, a scheduled action to run the <code>PauseCluster</code> API operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PauseClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a resume cluster operation. For example, a scheduled action to run the <code>ResumeCluster</code> API operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResumeClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduledActionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionTypeUnsupportedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidScheduleFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidScheduledActionFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSnapshotCopyGrantResult
	{
		
		/// <summary>
		/// <p>The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnapshotCopyGrant SnapshotCopyGrant { get; set; }
	}
	
	/// <summary>
	/// <p>The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyGrant
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyGrantAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyGrantQuotaExceededFault
	{
	}
	
	/// <summary>
	/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduleDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NextInvocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AssociatedClusterCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AssociatedClusters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotScheduleAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotScheduleQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleDefinitionTypeUnsupportedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundFault
	{
	}
	
	/// <summary>
	/// Describes a usage limit object for a cluster. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageLimit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitFeatureType FeatureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitLimitType LimitType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitPeriod Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitBreachAction BreachAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageLimitFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spectrum")]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="concurrency-scaling")]
		concurrencyMinusscaling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-region-datasharing")]
		crossMinusregionMinusdatasharing = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageLimitLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time")]
		time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="data-scanned")]
		dataMinusscanned = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageLimitPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageLimitBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="log")]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="emit-metric")]
		emitMinusmetric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disable")]
		disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageLimitAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidUsageLimitFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuthenticationProfileResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationProfileNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterParameterGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterSubnetStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidEndpointStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSubscriptionStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidHsmClientCertificateStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidHsmConfigurationStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSnapshotCopyGrantStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyGrantNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClusterSnapshotScheduleStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageLimitNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountAttributeList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuthenticationProfilesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationProfile[] AuthenticationProfiles { get; set; }
	}
	
	/// <summary>
	/// Describes an authentication profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterDbRevisionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterDbRevisions { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterParameterGroups</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ParameterGroups { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterParameters</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSecurityGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterSecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterSnapshots</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Snapshots { get; set; }
	}
	
	/// <summary>
	/// Describes a sorting entity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotSortingEntity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SnapshotAttributeToSortBy Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortByOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SnapshotAttributeToSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_TYPE")]
		SOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOTAL_SIZE")]
		TOTAL_SIZE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_TIME")]
		CREATE_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortByOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASC")]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESC")]
		DESC = 1,
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterSubnetGroups</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSubnetGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterSubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MaintenanceTracks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterVersions</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterVersions { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusters</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Clusters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDomainAssociationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Associations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDomainAssociationNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataSharesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataShare[] DataShares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataSharesForConsumerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataShare[] DataShares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataSharesForProducerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataShare[] DataShares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDefaultClusterParametersResult
	{
		
		/// <summary>
		/// Describes the default cluster parameters for a parameter group family.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DefaultClusterParameters DefaultClusterParameters { get; set; }
	}
	
	/// <summary>
	/// Describes the default cluster parameters for a parameter group family.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultClusterParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAccessList
	{
		
		[System.Runtime.Serialization.DataMember(Name="EndpointAccessList")]
		public EndpointAccess[] EndpointAccessList1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAuthorizationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="EndpointAuthorizationList")]
		public EndpointAuthorization[] EndpointAuthorizationList1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategoriesMapList { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventSubscriptionsList { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Events { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmClientCertificateMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HsmClientCertificates { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HsmConfigurationMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HsmConfigurations { get; set; }
	}
	
	/// <summary>
	/// Describes the status of logging for a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> LoggingEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastSuccessfulDeliveryTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastFailureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastFailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogDestinationType LogDestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogExports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s3")]
		s3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cloudwatch")]
		cloudwatch = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeConfigurationOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeConfigurationOptionList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// A set of elements to filter the returned node configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeConfigurationOptionsFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NodeConfigurationOptionsFilterName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperatorType Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodeConfigurationOptionsFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NodeType")]
		NodeType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NumberOfNodes")]
		NumberOfNodes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EstimatedDiskUtilizationPercent")]
		EstimatedDiskUtilizationPercent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mode")]
		Mode = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eq")]
		eq = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lt")]
		lt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gt")]
		gt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="le")]
		le = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ge")]
		ge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="between")]
		between = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessToSnapshotDeniedFault
	{
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeOrderableClusterOptions</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderableClusterOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrderableClusterOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePartnersOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PartnerIntegrationInfoList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedNodeExchangeStatusOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedNodeExchangeStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeExchangeNotFoundFault
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeOfferingsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedNodeOfferings { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedNodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduledActions { get; set; }
	}
	
	/// <summary>
	/// A set of elements to filter the returned scheduled actions. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionFilterName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduledActionFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-identifier")]
		clusterMinusidentifier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iam-role")]
		iamMinusrole = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyGrantMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotCopyGrants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSnapshotSchedulesOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerStorageMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBackupSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalProvisionedStorageInMegaBytes { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableRestoreStatusMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TableRestoreStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableRestoreNotFoundFault
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaggedResourceListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TaggedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageLimitList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimit[] UsageLimits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableSnapshotCopyResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyAlreadyDisabledFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BucketNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientS3BucketPolicyFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidS3KeyPrefixFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidS3BucketNameFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableSnapshotCopyResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncompatibleOrderableOptions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyToRegionDisabledFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyAlreadyEnabledFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnknownSnapshotCopyRegionFault
	{
	}
	
	/// <summary>
	/// Temporary credentials with authorization to log on to an Amazon Redshift database. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DbUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterExtendedCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DbUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NextRefreshTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReservedNodeExchangeConfigurationOptionsOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedNodeConfigurationOptionList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReservedNodeExchangeOfferingsOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedNodeOfferings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyAquaOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AquaConfiguration AquaConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyAuthenticationProfileResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedOptionFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableLimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterDbRevisionResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterOnLatestRevisionFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterIamRolesResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterMaintenanceResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupStatus { get; set; }
	}
	
	/// <summary>
	/// Describes a parameter in a cluster parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterApplyType ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ParameterApplyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static")]
		_static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dynamic")]
		dynamic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterSubnetGroupResult
	{
		
		/// <summary>
		/// Describes a subnet group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSubnetGroup ClusterSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetAlreadyInUse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCustomDomainAssociationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertExpiryTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyEventSubscriptionResult
	{
		
		/// <summary>
		/// Describes event subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifySnapshotCopyRetentionPeriodResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotCopyDisabledFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotScheduleUpdateInProgressFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PauseClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseReservedNodeOfferingResult
	{
		
		/// <summary>
		/// Describes a reserved node. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode ReservedNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResizeClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreFromClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRestoreFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreTableFromClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes the status of a <a>RestoreTableFromClusterSnapshot</a> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TableRestoreStatus TableRestoreStatus { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a <a>RestoreTableFromClusterSnapshot</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableRestoreStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TableRestoreRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TableRestoreStatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalDataInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSchemaName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceTableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetSchemaName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewTableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TableRestoreStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InProgressTableRestoreQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTableRestoreArgumentFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResumeClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeClusterSecurityGroupIngressResult
	{
		
		/// <summary>
		/// Describes a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup ClusterSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAuthorizationNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeSnapshotAccessResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotateEncryptionKeyResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptReservedNodeExchangeInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetReservedNodeOfferingId { get; set; }
	}
	
	/// <summary>
	/// A name value pair that describes an aspect of an account. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeValues { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon Web Services account authorized to restore a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountWithRestoreAccess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="restore-cluster")]
		restoreMinuscluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recommend-node-config")]
		recommendMinusnodeMinusconfig = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resize-cluster")]
		resizeMinuscluster = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateDataShareConsumerMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociateEntireAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerRegion { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterAssociatedToSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleState ScheduleAssociationState { get; set; }
	}
	
	/// <summary>
	/// Contains information about the custom domain name association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Association
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CustomDomainCertificateExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CertificateAssociations { get; set; }
	}
	
	/// <summary>
	/// Describes an attribute value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributeValueTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeClusterSecurityGroupIngressMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeDataShareMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeEndpointAccessMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcIds { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeSnapshotAccessMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountWithRestoreAccess { get; set; }
	}
	
	/// <summary>
	/// Describes an availability zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedPlatforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteClusterSnapshotsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Identifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchModifyClusterSnapshotsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotIdentifierList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	/// <summary>
	/// Describes the errors returned by a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotErrorMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelResizeMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// A cluster ID and custom domain name tied to a specific certificate. These are typically returned in a list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a <code>ClusterDbRevision</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterDbRevision
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentDatabaseRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DatabaseRevisionReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RevisionTargets { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) role that can be used by the associated Amazon Redshift cluster to access other Amazon Web Services services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterIamRole
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyStatus { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyErrorDescription { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterParameterGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterParameterStatus[] ClusterParameterStatusList { get; set; }
	}
	
	/// <summary>
	/// Describes a cluster security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes a cluster version, including the parameter group family and description of the version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="ClusterVersion")]
		public string ClusterVersion1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyClusterSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuthenticationProfileMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileContent { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AvailabilityZoneRelocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AquaConfigurationStatus AquaConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultIamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadSampleData { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterSecurityGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomDomainAssociationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEndpointAccessMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEventSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHsmClientCertificateMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHsmConfigurationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmIpAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmPartitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmPartitionPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmServerPublicCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateScheduledActionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionType TargetAction { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
	}
	
	/// <summary>
	/// The result of the <code>CreateSnapshotCopyGrant</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSnapshotCopyGrantMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSnapshotScheduleMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduleDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NextInvocations { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <code>CreateTags</code> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTagsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUsageLimitMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitFeatureType FeatureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitLimitType LimitType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitPeriod Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitBreachAction BreachAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataShareStatusForConsumer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataShareStatusForProducer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHORIZED")]
		AUTHORIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_AUTHORIZATION")]
		PENDING_AUTHORIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEAUTHORIZED")]
		DEAUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeauthorizeDataShareMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a deferred maintenance window
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeferredMaintenanceWindow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeferMaintenanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeferMaintenanceStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeferMaintenanceEndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuthenticationProfileMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalClusterSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FinalClusterSnapshotRetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterSecurityGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteClusterSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomDomainAssociationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEndpointAccessMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEventSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteHsmClientCertificateMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteHsmConfigurationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScheduledActionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
	}
	
	/// <summary>
	/// The result of the <code>DeleteSnapshotCopyGrant</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSnapshotCopyGrantMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSnapshotScheduleMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <code>DeleteTags</code> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUsageLimitMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountAttributesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuthenticationProfilesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterDbRevisionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterParametersMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterSecurityGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterSnapshotsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClusterExists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SortingEntities { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterSubnetGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterTracksMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCustomDomainAssociationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataSharesForConsumerMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataShareStatusForConsumer Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataSharesForProducerMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProducerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataShareStatusForProducer Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataSharesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDefaultClusterParametersMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointAccessMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointAuthorizationMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Grantee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster")]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-parameter-group")]
		clusterMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-security-group")]
		clusterMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-snapshot")]
		clusterMinussnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled-action")]
		scheduledMinusaction = 4,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHsmClientCertificatesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHsmConfigurationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoggingStatusMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNodeConfigurationOptionsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOrderableClusterOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePartnersInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartnerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedNodeExchangeStatusInputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeExchangeRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedNodeOfferingsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedNodesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeResizeMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduledActionTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResizeCluster")]
		ResizeCluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PauseCluster")]
		PauseCluster = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResumeCluster")]
		ResumeCluster = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScheduledActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionTypeValues TargetActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	/// <summary>
	/// The result of the <code>DescribeSnapshotCopyGrants</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSnapshotCopyGrantsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSnapshotSchedulesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTableRestoreStatusMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TableRestoreRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTagsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUsageLimitsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitFeatureType FeatureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableLoggingMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableSnapshotCopyMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateDataShareConsumerMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateEntireAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerRegion { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon EC2 security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EC2SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// A maintenance track that you can switch the current track to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedOperations { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableLoggingMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogDestinationType LogDestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogExports { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableSnapshotCopyMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Describes an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
	}
	
	/// <summary>
	/// Describes event categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventCategoriesMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Events { get; set; }
	}
	
	/// <summary>
	/// Describes event information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventInfoMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// The request parameters to get cluster credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetClusterCredentialsMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DbUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DbGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetClusterCredentialsWithIAMMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DbName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservedNodeExchangeActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="restore-cluster")]
		restoreMinuscluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resize-cluster")]
		resizeMinuscluster = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReservedNodeExchangeConfigurationOptionsInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeExchangeActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReservedNodeExchangeOfferingsInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes an IP range used in a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IPRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Defines a maintenance track that determines which Amazon Redshift version to apply during a maintenance window. If the value for <code>MaintenanceTrack</code> is <code>current</code>, the cluster is updated to the most recently certified maintenance release. If the value is <code>trailing</code>, the cluster is updated to the previously certified maintenance release. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceTrack
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UpdateTargets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high-performance")]
		highMinusperformance = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyAquaInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AquaConfigurationStatus AquaConfigurationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyAuthenticationProfileMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationProfileContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterDbRevisionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionTarget { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterIamRolesMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddIamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveIamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultIamRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterMaintenanceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeferMaintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeferMaintenanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeferMaintenanceStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeferMaintenanceEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeferMaintenanceDuration { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AvailabilityZoneRelocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	/// <summary>
	/// Describes a modify cluster parameter group operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterSnapshotScheduleMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateSchedule { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyClusterSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCustomDomainAssociationMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomDomainCertificateArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyEndpointAccessMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyEventSubscriptionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyScheduledActionMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionType TargetAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifySnapshotCopyRetentionPeriodMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Manual { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifySnapshotScheduleMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduleDefinitions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyUsageLimitMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitBreachAction BreachAction { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// A list of node configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeConfigurationOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EstimatedDiskUtilizationPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mode Mode { get; set; }
	}
	
	/// <summary>
	/// Describes an orderable cluster option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderableClusterOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartnerIntegrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inactive")]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RuntimeFailure")]
		RuntimeFailure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConnectionFailure")]
		ConnectionFailure = 3,
	}
	
	/// <summary>
	/// Describes a partner integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerIntegrationInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartnerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartnerIntegrationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerIntegrationInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PartnerName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseReservedNodeOfferingMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NodeCount { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a recurring charge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RecurringChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecurringChargeFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectDataShareMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataShareArn { get; set; }
	}
	
	/// <summary>
	/// Describes a reserved node offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeOffering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RecurringCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeOfferingType ReservedNodeOfferingType { get; set; }
	}
	
	/// <summary>
	/// Details for a reserved-node exchange. Examples include the node type for a reserved node, the price for a node, the node's state, and other details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedNodeConfigurationOption
	{
		
		/// <summary>
		/// Describes a reserved node. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode SourceReservedNode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetReservedNodeCount { get; set; }
		
		/// <summary>
		/// Describes a reserved node offering.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeOffering TargetReservedNodeOffering { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetClusterParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreFromClusterSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AvailabilityZoneRelocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AquaConfigurationStatus AquaConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultIamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreTableFromClusterSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSchemaName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceTableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetSchemaName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NewTableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableCaseSensitiveIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a <code>RevisionTarget</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevisionTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DatabaseRevisionReleaseDate { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeClusterSecurityGroupIngressMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeEndpointAccessMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeSnapshotAccessMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountWithRestoreAccess { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotateEncryptionKeyMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetStatus { get; set; }
	}
	
	/// <summary>
	/// Describes the operations that are allowed on a maintenance track.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedOperation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
	}
	
	/// <summary>
	/// A list of supported platforms for orderable clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedPlatform
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A tag and its associated resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaggedResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePartnerStatusInputMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PartnerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PartnerIntegrationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// Describes the members of a VPC security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs.
		/// GET_AcceptReservedNodeExchange #Action=AcceptReservedNodeExchange
		/// </summary>
		/// <param name="ReservedNodeId">A string representing the node identifier of the DC1 Reserved Node to be exchanged.
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetReservedNodeOfferingId">The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_AcceptReservedNodeExchangeAsync(string ReservedNodeId, string TargetReservedNodeOfferingId, GET_AcceptReservedNodeExchangeAction Action, GET_AcceptReservedNodeExchangeVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptReservedNodeExchange?ReservedNodeId=" + (ReservedNodeId==null? "" : System.Uri.EscapeDataString(ReservedNodeId))+"&TargetReservedNodeOfferingId=" + (TargetReservedNodeOfferingId==null? "" : System.Uri.EscapeDataString(TargetReservedNodeOfferingId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a partner integration to a cluster. This operation authorizes a partner to push status updates for the specified database. To complete the integration, you also set up the integration on the partner website.
		/// GET_AddPartner #Action=AddPartner
		/// </summary>
		/// <param name="AccountId">The Amazon Web Services account ID that owns the cluster.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster that receives data from the partner.
		/// Max length: 63
		// </param>
		/// <param name="DatabaseName">The name of the database that receives data from the partner.
		/// Max length: 127
		// </param>
		/// <param name="PartnerName">The name of the partner that is authorized to send data.
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task GET_AddPartnerAsync(string AccountId, string ClusterIdentifier, string DatabaseName, string PartnerName, GET_AddPartnerAction Action, GET_AddPartnerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddPartner?AccountId=" + (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DatabaseName=" + (DatabaseName==null? "" : System.Uri.EscapeDataString(DatabaseName))+"&PartnerName=" + (PartnerName==null? "" : System.Uri.EscapeDataString(PartnerName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// From a datashare consumer account, associates a datashare with the account (AssociateEntireAccount) or the specified namespace (ConsumerArn). If you make this association, the consumer can consume the datashare.
		/// GET_AssociateDataShareConsumer #Action=AssociateDataShareConsumer
		/// </summary>
		/// <param name="DataShareArn">The Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
		/// Max length: 2147483647
		// </param>
		/// <param name="AssociateEntireAccount">A value that specifies whether the datashare is associated with the entire account.</param>
		/// <param name="ConsumerArn">The Amazon Resource Name (ARN) of the consumer that is associated with the datashare.
		/// Max length: 2147483647
		// </param>
		/// <param name="ConsumerRegion">From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified Amazon Web Services Region.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_AssociateDataShareConsumerAsync(string DataShareArn, bool AssociateEntireAccount, string ConsumerArn, string ConsumerRegion, GET_AssociateDataShareConsumerAction Action, GET_AssociateDataShareConsumerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateDataShareConsumer?DataShareArn=" + (DataShareArn==null? "" : System.Uri.EscapeDataString(DataShareArn))+"&AssociateEntireAccount="+AssociateEntireAccount+"&ConsumerArn=" + (ConsumerArn==null? "" : System.Uri.EscapeDataString(ConsumerArn))+"&ConsumerRegion=" + (ConsumerRegion==null? "" : System.Uri.EscapeDataString(ConsumerRegion))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same Amazon Web Services Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_AuthorizeClusterSecurityGroupIngress #Action=AuthorizeClusterSecurityGroupIngress
		/// </summary>
		/// <param name="ClusterSecurityGroupName">The name of the security group to which the ingress rule is added.
		/// Max length: 2147483647
		// </param>
		/// <param name="CIDRIP">The IP range to be added the Amazon Redshift security group.
		/// Max length: 2147483647
		// </param>
		/// <param name="EC2SecurityGroupName">The EC2 security group to be added the Amazon Redshift security group.
		/// Max length: 2147483647
		// </param>
		/// <param name="EC2SecurityGroupOwnerId"><p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeClusterSecurityGroupIngressAsync(string ClusterSecurityGroupName, string CIDRIP, string EC2SecurityGroupName, string EC2SecurityGroupOwnerId, GET_AuthorizeClusterSecurityGroupIngressAction Action, GET_AuthorizeClusterSecurityGroupIngressVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeClusterSecurityGroupIngress?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : System.Uri.EscapeDataString(ClusterSecurityGroupName))+"&CIDRIP=" + (CIDRIP==null? "" : System.Uri.EscapeDataString(CIDRIP))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// From a data producer account, authorizes the sharing of a datashare with one or more consumer accounts or managing entities. To authorize a datashare for a data consumer, the producer account must have the correct access permissions.
		/// GET_AuthorizeDataShare #Action=AuthorizeDataShare
		/// </summary>
		/// <param name="DataShareArn">The Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
		/// Max length: 2147483647
		// </param>
		/// <param name="ConsumerIdentifier">The identifier of the data consumer that is authorized to access the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeDataShareAsync(string DataShareArn, string ConsumerIdentifier, GET_AuthorizeDataShareAction Action, GET_AuthorizeDataShareVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeDataShare?DataShareArn=" + (DataShareArn==null? "" : System.Uri.EscapeDataString(DataShareArn))+"&ConsumerIdentifier=" + (ConsumerIdentifier==null? "" : System.Uri.EscapeDataString(ConsumerIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Grants access to a cluster.
		/// GET_AuthorizeEndpointAccess #Action=AuthorizeEndpointAccess
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster to grant access to.
		/// Max length: 2147483647
		// </param>
		/// <param name="Account">The Amazon Web Services account ID to grant access to.
		/// Max length: 2147483647
		// </param>
		/// <param name="VpcIds">The virtual private cloud (VPC) identifiers to grant access to.</param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeEndpointAccessAsync(string ClusterIdentifier, string Account, string[] VpcIds, GET_AuthorizeEndpointAccessAction Action, GET_AuthorizeEndpointAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeEndpointAccess?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Account=" + (Account==null? "" : System.Uri.EscapeDataString(Account))+"&"+string.Join("&", VpcIds.Select(z => $"VpcIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Authorizes the specified Amazon Web Services account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_AuthorizeSnapshotAccess #Action=AuthorizeSnapshotAccess
		/// </summary>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot the account is authorized to restore.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotArn">The Amazon Resource Name (ARN) of the snapshot to authorize access to.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotClusterIdentifier">The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
		/// Max length: 2147483647
		// </param>
		/// <param name="AccountWithRestoreAccess"><p>The identifier of the Amazon Web Services account authorized to restore the specified snapshot.</p> <p>To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeSnapshotAccessAsync(string SnapshotIdentifier, string SnapshotArn, string SnapshotClusterIdentifier, string AccountWithRestoreAccess, GET_AuthorizeSnapshotAccessAction Action, GET_AuthorizeSnapshotAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeSnapshotAccess?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotArn=" + (SnapshotArn==null? "" : System.Uri.EscapeDataString(SnapshotArn))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotClusterIdentifier))+"&AccountWithRestoreAccess=" + (AccountWithRestoreAccess==null? "" : System.Uri.EscapeDataString(AccountWithRestoreAccess))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a set of cluster snapshots.
		/// GET_BatchDeleteClusterSnapshots #Action=BatchDeleteClusterSnapshots
		/// </summary>
		/// <param name="Identifiers">A list of identifiers for the snapshots that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_BatchDeleteClusterSnapshotsAsync(string[] Identifiers, GET_BatchDeleteClusterSnapshotsAction Action, GET_BatchDeleteClusterSnapshotsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchDeleteClusterSnapshots?"+string.Join("&", Identifiers.Select(z => $"Identifiers={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the settings for a set of cluster snapshots.
		/// GET_BatchModifyClusterSnapshots #Action=BatchModifyClusterSnapshots
		/// </summary>
		/// <param name="SnapshotIdentifierList">A list of snapshot identifiers you want to modify.</param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p></param>
		/// <param name="Force">A boolean value indicating whether to override an exception if the retention period has passed. </param>
		/// <returns>Success</returns>
		public async Task GET_BatchModifyClusterSnapshotsAsync(string[] SnapshotIdentifierList, int ManualSnapshotRetentionPeriod, bool Force, GET_BatchModifyClusterSnapshotsAction Action, GET_BatchModifyClusterSnapshotsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchModifyClusterSnapshots?"+string.Join("&", SnapshotIdentifierList.Select(z => $"SnapshotIdentifierList={System.Uri.EscapeDataString(z.ToString())}"))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Force="+Force+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a resize operation for a cluster.
		/// GET_CancelResize #Action=CancelResize
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier for the cluster that you want to cancel a resize operation for.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_CancelResizeAsync(string ClusterIdentifier, GET_CancelResizeAction Action, GET_CancelResizeVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelResize?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CopyClusterSnapshot #Action=CopyClusterSnapshot
		/// </summary>
		/// <param name="SourceSnapshotIdentifier"><p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceSnapshotClusterIdentifier"><p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetSnapshotIdentifier"><p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the Amazon Web Services account that is making the request.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CopyClusterSnapshotAsync(string SourceSnapshotIdentifier, string SourceSnapshotClusterIdentifier, string TargetSnapshotIdentifier, int ManualSnapshotRetentionPeriod, GET_CopyClusterSnapshotAction Action, GET_CopyClusterSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopyClusterSnapshot?SourceSnapshotIdentifier=" + (SourceSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SourceSnapshotIdentifier))+"&SourceSnapshotClusterIdentifier=" + (SourceSnapshotClusterIdentifier==null? "" : System.Uri.EscapeDataString(SourceSnapshotClusterIdentifier))+"&TargetSnapshotIdentifier=" + (TargetSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(TargetSnapshotIdentifier))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an authentication profile with the specified parameters.
		/// GET_CreateAuthenticationProfile #Action=CreateAuthenticationProfile
		/// </summary>
		/// <param name="AuthenticationProfileName">The name of the authentication profile to be created.
		/// Max length: 63
		// </param>
		/// <param name="AuthenticationProfileContent">The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_CreateAuthenticationProfileAsync(string AuthenticationProfileName, string AuthenticationProfileContent, GET_CreateAuthenticationProfileAction Action, GET_CreateAuthenticationProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateAuthenticationProfile?AuthenticationProfileName=" + (AuthenticationProfileName==null? "" : System.Uri.EscapeDataString(AuthenticationProfileName))+"&AuthenticationProfileContent=" + (AuthenticationProfileContent==null? "" : System.Uri.EscapeDataString(AuthenticationProfileContent))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateCluster #Action=CreateCluster
		/// </summary>
		/// <param name="DBName"><p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterIdentifier"><p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterType"><p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="NodeType"><p>The node type to be provisioned for the cluster. For information about node types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.xlplus</code> | <code>ra3.4xlarge</code> | <code>ra3.16xlarge</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="MasterUsername"><p>The user name associated with the admin user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Must not contain a colon (:) or a slash (/).</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="MasterUserPassword"><p>The password associated with the admin user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33-126) except <code>'</code> (single quote), <code>"</code> (double quote), <code>\</code>, <code>/</code>, or <code>@</code>.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterSecurityGroups"><p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p></param>
		/// <param name="VpcSecurityGroupIds"><p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p></param>
		/// <param name="ClusterSubnetGroupName"><p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="AvailabilityZone"><p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterParameterGroupName"><p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="AutomatedSnapshotRetentionPeriod"><p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <param name="Port"><p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p></param>
		/// <param name="ClusterVersion"><p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="AllowVersionUpgrade"><p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p></param>
		/// <param name="NumberOfNodes"><p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p></param>
		/// <param name="PubliclyAccessible">If <code>true</code>, the cluster can be accessed from a public network. </param>
		/// <param name="Encrypted"><p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p></param>
		/// <param name="HsmClientCertificateIdentifier">Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmConfigurationIdentifier">Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="ElasticIp"><p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on. For more information about provisioning clusters in EC2-VPC, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <param name="KmsKeyId">The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="EnhancedVpcRouting"><p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p></param>
		/// <param name="AdditionalInfo">Reserved.
		/// Max length: 2147483647
		// </param>
		/// <param name="IamRoles"><p>A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. </p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p></param>
		/// <param name="MaintenanceTrackName">An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotScheduleIdentifier">A unique identifier for the snapshot schedule.
		/// Max length: 2147483647
		// </param>
		/// <param name="AvailabilityZoneRelocation">The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is created.</param>
		/// <param name="AquaConfigurationStatus">This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).</param>
		/// <param name="DefaultIamRoleArn">The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created. 
		/// Max length: 2147483647
		// </param>
		/// <param name="LoadSampleData">A flag that specifies whether to load sample data once the cluster is created.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterAsync(
					string DBName, 
					string ClusterIdentifier, 
					string ClusterType, 
					string NodeType, 
					string MasterUsername, 
					string MasterUserPassword, 
					string[] ClusterSecurityGroups, 
					string[] VpcSecurityGroupIds, 
					string ClusterSubnetGroupName, 
					string AvailabilityZone, 
					string PreferredMaintenanceWindow, 
					string ClusterParameterGroupName, 
					int AutomatedSnapshotRetentionPeriod, 
					int ManualSnapshotRetentionPeriod, 
					int Port, 
					string ClusterVersion, 
					bool AllowVersionUpgrade, 
					int NumberOfNodes, 
					bool PubliclyAccessible, 
					bool Encrypted, 
					string HsmClientCertificateIdentifier, 
					string HsmConfigurationIdentifier, 
					string ElasticIp, 
					string[] Tags, 
					string KmsKeyId, 
					bool EnhancedVpcRouting, 
					string AdditionalInfo, 
					string[] IamRoles, 
					string MaintenanceTrackName, 
					string SnapshotScheduleIdentifier, 
					bool AvailabilityZoneRelocation, 
					AquaConfigurationStatus AquaConfigurationStatus, 
					string DefaultIamRoleArn, 
					string LoadSampleData, 
					GET_CreateClusterAction Action, 
					GET_CreateClusterVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCluster?DBName=" + (DBName==null? "" : System.Uri.EscapeDataString(DBName))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ClusterType=" + (ClusterType==null? "" : System.Uri.EscapeDataString(ClusterType))+"&NodeType=" + (NodeType==null? "" : System.Uri.EscapeDataString(NodeType))+"&MasterUsername=" + (MasterUsername==null? "" : System.Uri.EscapeDataString(MasterUsername))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : System.Uri.EscapeDataString(MasterUserPassword))+"&"+string.Join("&", ClusterSecurityGroups.Select(z => $"ClusterSecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : System.Uri.EscapeDataString(ClusterSubnetGroupName))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&ClusterParameterGroupName=" + (ClusterParameterGroupName==null? "" : System.Uri.EscapeDataString(ClusterParameterGroupName))+"&AutomatedSnapshotRetentionPeriod="+AutomatedSnapshotRetentionPeriod+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Port="+Port+"&ClusterVersion=" + (ClusterVersion==null? "" : System.Uri.EscapeDataString(ClusterVersion))+"&AllowVersionUpgrade="+AllowVersionUpgrade+"&NumberOfNodes="+NumberOfNodes+"&PubliclyAccessible="+PubliclyAccessible+"&Encrypted="+Encrypted+"&HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : System.Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : System.Uri.EscapeDataString(HsmConfigurationIdentifier))+"&ElasticIp=" + (ElasticIp==null? "" : System.Uri.EscapeDataString(ElasticIp))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&EnhancedVpcRouting="+EnhancedVpcRouting+"&AdditionalInfo=" + (AdditionalInfo==null? "" : System.Uri.EscapeDataString(AdditionalInfo))+"&"+string.Join("&", IamRoles.Select(z => $"IamRoles={System.Uri.EscapeDataString(z.ToString())}"))+"&MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : System.Uri.EscapeDataString(MaintenanceTrackName))+"&SnapshotScheduleIdentifier=" + (SnapshotScheduleIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotScheduleIdentifier))+"&AvailabilityZoneRelocation="+AvailabilityZoneRelocation+"&AquaConfigurationStatus=" + AquaConfigurationStatus+"&DefaultIamRoleArn=" + (DefaultIamRoleArn==null? "" : System.Uri.EscapeDataString(DefaultIamRoleArn))+"&LoadSampleData=" + (LoadSampleData==null? "" : System.Uri.EscapeDataString(LoadSampleData))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterParameterGroup #Action=CreateClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName"><p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your Amazon Web Services account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note>
		/// Max length: 2147483647
		// </param>
		/// <param name="ParameterGroupFamily"><p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your Amazon Web Services account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="Description">A description of the parameter group.
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterParameterGroupAsync(string ParameterGroupName, string ParameterGroupFamily, string Description, string[] Tags, GET_CreateClusterParameterGroupAction Action, GET_CreateClusterParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : System.Uri.EscapeDataString(ParameterGroupName))+"&ParameterGroupFamily=" + (ParameterGroupFamily==null? "" : System.Uri.EscapeDataString(ParameterGroupFamily))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterSecurityGroup #Action=CreateClusterSecurityGroup
		/// </summary>
		/// <param name="ClusterSecurityGroupName"><p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all security groups that are created by your Amazon Web Services account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="Description">A description for the security group.
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterSecurityGroupAsync(string ClusterSecurityGroupName, string Description, string[] Tags, GET_CreateClusterSecurityGroupAction Action, GET_CreateClusterSecurityGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClusterSecurityGroup?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : System.Uri.EscapeDataString(ClusterSecurityGroupName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterSnapshot #Action=CreateClusterSnapshot
		/// </summary>
		/// <param name="SnapshotIdentifier"><p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterIdentifier">The cluster identifier for which you want a snapshot.
		/// Max length: 2147483647
		// </param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterSnapshotAsync(string SnapshotIdentifier, string ClusterIdentifier, int ManualSnapshotRetentionPeriod, string[] Tags, GET_CreateClusterSnapshotAction Action, GET_CreateClusterSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClusterSnapshot?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterSubnetGroup #Action=CreateClusterSubnetGroup
		/// </summary>
		/// <param name="ClusterSubnetGroupName"><p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your Amazon Web Services account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="Description">A description for the subnet group.
		/// Max length: 2147483647
		// </param>
		/// <param name="SubnetIds">An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterSubnetGroupAsync(string ClusterSubnetGroupName, string Description, string[] SubnetIds, string[] Tags, GET_CreateClusterSubnetGroupAction Action, GET_CreateClusterSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClusterSubnetGroup?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : System.Uri.EscapeDataString(ClusterSubnetGroupName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", SubnetIds.Select(z => $"SubnetIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create a custom domain name for a cluster. Properties include the custom domain name, the cluster the custom domain is associated with, and the certificate Amazon Resource Name (ARN).
		/// GET_CreateCustomDomainAssociation #Action=CreateCustomDomainAssociation
		/// </summary>
		/// <param name="CustomDomainName">The custom domain name for a custom domain association.
		/// Max length: 253
		/// Min length: 1
		// </param>
		/// <param name="CustomDomainCertificateArn">The certificate Amazon Resource Name (ARN) for the custom domain name association.
		/// Max length: 2048
		/// Min length: 20
		// </param>
		/// <param name="ClusterIdentifier">The cluster identifier that the custom domain is associated with.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_CreateCustomDomainAssociationAsync(string CustomDomainName, string CustomDomainCertificateArn, string ClusterIdentifier, GET_CreateCustomDomainAssociationAction Action, GET_CreateCustomDomainAssociationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCustomDomainAssociation?CustomDomainName=" + (CustomDomainName==null? "" : System.Uri.EscapeDataString(CustomDomainName))+"&CustomDomainCertificateArn=" + (CustomDomainCertificateArn==null? "" : System.Uri.EscapeDataString(CustomDomainCertificateArn))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Redshift-managed VPC endpoint.
		/// GET_CreateEndpointAccess #Action=CreateEndpointAccess
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster to access.
		/// Max length: 2147483647
		// </param>
		/// <param name="ResourceOwner">The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
		/// Max length: 2147483647
		// </param>
		/// <param name="EndpointName"><p>The Redshift-managed VPC endpoint name.</p> <p>An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="SubnetGroupName">The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
		/// Max length: 2147483647
		// </param>
		/// <param name="VpcSecurityGroupIds">The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateEndpointAccessAsync(string ClusterIdentifier, string ResourceOwner, string EndpointName, string SubnetGroupName, string[] VpcSecurityGroupIds, GET_CreateEndpointAccessAction Action, GET_CreateEndpointAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateEndpointAccess?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ResourceOwner=" + (ResourceOwner==null? "" : System.Uri.EscapeDataString(ResourceOwner))+"&EndpointName=" + (EndpointName==null? "" : System.Uri.EscapeDataString(EndpointName))+"&SubnetGroupName=" + (SubnetGroupName==null? "" : System.Uri.EscapeDataString(SubnetGroupName))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your Amazon Web Services account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your Amazon Web Services account. You must specify a source type if you specify a source ID.</p>
		/// GET_CreateEventSubscription #Action=CreateEventSubscription
		/// </summary>
		/// <param name="SubscriptionName"><p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="SnsTopicArn">The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceType"><p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceIds"><p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p></param>
		/// <param name="EventCategories"><p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security, pending</p></param>
		/// <param name="Severity"><p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="Enabled">A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, string[] SourceIds, string[] EventCategories, string Severity, bool Enabled, string[] Tags, GET_CreateEventSubscriptionAction Action, GET_CreateEventSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : System.Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : System.Uri.EscapeDataString(SourceType))+"&"+string.Join("&", SourceIds.Select(z => $"SourceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", EventCategories.Select(z => $"EventCategories={System.Uri.EscapeDataString(z.ToString())}"))+"&Severity=" + (Severity==null? "" : System.Uri.EscapeDataString(Severity))+"&Enabled="+Enabled+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html#working-with-HSM">Hardware Security Modules</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateHsmClientCertificate #Action=CreateHsmClientCertificate
		/// </summary>
		/// <param name="HsmClientCertificateIdentifier">The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateHsmClientCertificateAsync(string HsmClientCertificateIdentifier, string[] Tags, GET_CreateHsmClientCertificateAction Action, GET_CreateHsmClientCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateHsmClientCertificate?HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : System.Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
		/// GET_CreateHsmConfiguration #Action=CreateHsmConfiguration
		/// </summary>
		/// <param name="HsmConfigurationIdentifier">The identifier to be assigned to the new Amazon Redshift HSM configuration.
		/// Max length: 2147483647
		// </param>
		/// <param name="Description">A text description of the HSM configuration to be created.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmIpAddress">The IP address that the Amazon Redshift cluster must use to access the HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmPartitionName">The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmPartitionPassword">The password required to access the HSM partition.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmServerPublicCertificate">The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateHsmConfigurationAsync(string HsmConfigurationIdentifier, string Description, string HsmIpAddress, string HsmPartitionName, string HsmPartitionPassword, string HsmServerPublicCertificate, string[] Tags, GET_CreateHsmConfigurationAction Action, GET_CreateHsmConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateHsmConfiguration?HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : System.Uri.EscapeDataString(HsmConfigurationIdentifier))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&HsmIpAddress=" + (HsmIpAddress==null? "" : System.Uri.EscapeDataString(HsmIpAddress))+"&HsmPartitionName=" + (HsmPartitionName==null? "" : System.Uri.EscapeDataString(HsmPartitionName))+"&HsmPartitionPassword=" + (HsmPartitionPassword==null? "" : System.Uri.EscapeDataString(HsmPartitionPassword))+"&HsmServerPublicCertificate=" + (HsmServerPublicCertificate==null? "" : System.Uri.EscapeDataString(HsmServerPublicCertificate))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation.
		/// GET_CreateScheduledAction #Action=CreateScheduledAction
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetAction">A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Schedule">The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
		/// Max length: 2147483647
		// </param>
		/// <param name="IamRole">The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. 
		/// Max length: 2147483647
		// </param>
		/// <param name="ScheduledActionDescription">The description of the scheduled action. 
		/// Max length: 2147483647
		// </param>
		/// <param name="StartTime">The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.</param>
		/// <param name="EndTime">The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Enable">If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. </param>
		/// <returns>Success</returns>
		public async Task GET_CreateScheduledActionAsync(string ScheduledActionName, GET_CreateScheduledActionTargetAction TargetAction, string Schedule, string IamRole, string ScheduledActionDescription, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, bool Enable, GET_CreateScheduledActionAction Action, GET_CreateScheduledActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateScheduledAction?ScheduledActionName=" + (ScheduledActionName==null? "" : System.Uri.EscapeDataString(ScheduledActionName))+"&TargetAction=" + TargetAction+"&Schedule=" + (Schedule==null? "" : System.Uri.EscapeDataString(Schedule))+"&IamRole=" + (IamRole==null? "" : System.Uri.EscapeDataString(IamRole))+"&ScheduledActionDescription=" + (ScheduledActionDescription==null? "" : System.Uri.EscapeDataString(ScheduledActionDescription))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Enable="+Enable+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot copy grant that permits Amazon Redshift to use an encrypted symmetric key from Key Management Service (KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// GET_CreateSnapshotCopyGrant #Action=CreateSnapshotCopyGrant
		/// </summary>
		/// <param name="SnapshotCopyGrantName"><p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="KmsKeyId">The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotCopyGrantAsync(string SnapshotCopyGrantName, string KmsKeyId, string[] Tags, GET_CreateSnapshotCopyGrantAction Action, GET_CreateSnapshotCopyGrantVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshotCopyGrant?SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : System.Uri.EscapeDataString(SnapshotCopyGrantName))+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a snapshot schedule that can be associated to a cluster and which overrides the default system backup schedule.
		/// GET_CreateSnapshotSchedule #Action=CreateSnapshotSchedule
		/// </summary>
		/// <param name="ScheduleDefinitions">The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)". </param>
		/// <param name="ScheduleIdentifier">A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
		/// Max length: 2147483647
		// </param>
		/// <param name="ScheduleDescription">The description of the snapshot schedule.
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">An optional set of tags you can use to search for the schedule.</param>
		/// <param name="DryRun"><p/></param>
		/// <param name="NextInvocations"><p/></param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotScheduleAsync(string[] ScheduleDefinitions, string ScheduleIdentifier, string ScheduleDescription, string[] Tags, bool DryRun, int NextInvocations, GET_CreateSnapshotScheduleAction Action, GET_CreateSnapshotScheduleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshotSchedule?"+string.Join("&", ScheduleDefinitions.Select(z => $"ScheduleDefinitions={System.Uri.EscapeDataString(z.ToString())}"))+"&ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : System.Uri.EscapeDataString(ScheduleIdentifier))+"&ScheduleDescription=" + (ScheduleDescription==null? "" : System.Uri.EscapeDataString(ScheduleDescription))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&NextInvocations="+NextInvocations+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
		/// GET_CreateTags #Action=CreateTags
		/// </summary>
		/// <param name="ResourceName">The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
		/// Max length: 2147483647
		// </param>
		/// <param name="Tags">One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0"</code>. </param>
		/// <returns>Success</returns>
		public async Task GET_CreateTagsAsync(string ResourceName, string[] Tags, GET_CreateTagsAction Action, GET_CreateTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTags?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit is identified by the returned usage limit identifier.
		/// GET_CreateUsageLimit #Action=CreateUsageLimit
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster that you want to limit usage.
		/// Max length: 2147483647
		// </param>
		/// <param name="FeatureType">The Amazon Redshift feature that you want to limit.</param>
		/// <param name="LimitType">The type of limit. Depending on the feature type, this can be based on a time duration or data size. If <code>FeatureType</code> is <code>spectrum</code>, then <code>LimitType</code> must be <code>data-scanned</code>. If <code>FeatureType</code> is <code>concurrency-scaling</code>, then <code>LimitType</code> must be <code>time</code>. If <code>FeatureType</code> is <code>cross-region-datasharing</code>, then <code>LimitType</code> must be <code>data-scanned</code>. </param>
		/// <param name="Amount">The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number. </param>
		/// <param name="Period">The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </param>
		/// <param name="BreachAction">The action that Amazon Redshift takes when the limit is reached. The default is log. For more information about this parameter, see <a>UsageLimit</a>.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateUsageLimitAsync(string ClusterIdentifier, GET_CreateUsageLimitFeatureType FeatureType, GET_CreateUsageLimitLimitType LimitType, int Amount, UsageLimitPeriod Period, GET_CreateUsageLimitBreachAction BreachAction, string[] Tags, GET_CreateUsageLimitAction Action, GET_CreateUsageLimitVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateUsageLimit?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&FeatureType=" + FeatureType+"&LimitType=" + LimitType+"&Amount="+Amount+"&Period=" + Period+"&BreachAction=" + BreachAction+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// From a datashare producer account, removes authorization from the specified datashare.
		/// GET_DeauthorizeDataShare #Action=DeauthorizeDataShare
		/// </summary>
		/// <param name="DataShareArn">The Amazon Resource Name (ARN) of the datashare to remove authorization from.
		/// Max length: 2147483647
		// </param>
		/// <param name="ConsumerIdentifier">The identifier of the data consumer that is to have authorization removed from the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeauthorizeDataShareAsync(string DataShareArn, string ConsumerIdentifier, GET_DeauthorizeDataShareAction Action, GET_DeauthorizeDataShareVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeauthorizeDataShare?DataShareArn=" + (DataShareArn==null? "" : System.Uri.EscapeDataString(DataShareArn))+"&ConsumerIdentifier=" + (ConsumerIdentifier==null? "" : System.Uri.EscapeDataString(ConsumerIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an authentication profile.
		/// GET_DeleteAuthenticationProfile #Action=DeleteAuthenticationProfile
		/// </summary>
		/// <param name="AuthenticationProfileName">The name of the authentication profile to delete.
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAuthenticationProfileAsync(string AuthenticationProfileName, GET_DeleteAuthenticationProfileAction Action, GET_DeleteAuthenticationProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAuthenticationProfile?AuthenticationProfileName=" + (AuthenticationProfileName==null? "" : System.Uri.EscapeDataString(AuthenticationProfileName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DeleteCluster #Action=DeleteCluster
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="SkipFinalClusterSnapshot"><p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p></param>
		/// <param name="FinalClusterSnapshotIdentifier"><p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="FinalClusterSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterAsync(string ClusterIdentifier, bool SkipFinalClusterSnapshot, string FinalClusterSnapshotIdentifier, int FinalClusterSnapshotRetentionPeriod, GET_DeleteClusterAction Action, GET_DeleteClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&SkipFinalClusterSnapshot="+SkipFinalClusterSnapshot+"&FinalClusterSnapshotIdentifier=" + (FinalClusterSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(FinalClusterSnapshotIdentifier))+"&FinalClusterSnapshotRetentionPeriod="+FinalClusterSnapshotRetentionPeriod+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
		/// GET_DeleteClusterParameterGroup #Action=DeleteClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName"><p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterParameterGroupAsync(string ParameterGroupName, GET_DeleteClusterParameterGroupAction Action, GET_DeleteClusterParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : System.Uri.EscapeDataString(ParameterGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DeleteClusterSecurityGroup #Action=DeleteClusterSecurityGroup
		/// </summary>
		/// <param name="ClusterSecurityGroupName">The name of the cluster security group to be deleted.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterSecurityGroupAsync(string ClusterSecurityGroupName, GET_DeleteClusterSecurityGroupAction Action, GET_DeleteClusterSecurityGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClusterSecurityGroup?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : System.Uri.EscapeDataString(ClusterSecurityGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
		/// GET_DeleteClusterSnapshot #Action=DeleteClusterSnapshot
		/// </summary>
		/// <param name="SnapshotIdentifier"><p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotClusterIdentifier"><p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterSnapshotAsync(string SnapshotIdentifier, string SnapshotClusterIdentifier, GET_DeleteClusterSnapshotAction Action, GET_DeleteClusterSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClusterSnapshot?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified cluster subnet group.
		/// GET_DeleteClusterSubnetGroup #Action=DeleteClusterSubnetGroup
		/// </summary>
		/// <param name="ClusterSubnetGroupName">The name of the cluster subnet group name to be deleted.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterSubnetGroupAsync(string ClusterSubnetGroupName, GET_DeleteClusterSubnetGroupAction Action, GET_DeleteClusterSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClusterSubnetGroup?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : System.Uri.EscapeDataString(ClusterSubnetGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Contains information about deleting a custom domain association for a cluster.
		/// GET_DeleteCustomDomainAssociation #Action=DeleteCustomDomainAssociation
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster to delete a custom domain association for.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteCustomDomainAssociationAsync(string ClusterIdentifier, GET_DeleteCustomDomainAssociationAction Action, GET_DeleteCustomDomainAssociationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCustomDomainAssociation?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Redshift-managed VPC endpoint.
		/// GET_DeleteEndpointAccess #Action=DeleteEndpointAccess
		/// </summary>
		/// <param name="EndpointName">The Redshift-managed VPC endpoint to delete.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEndpointAccessAsync(string EndpointName, GET_DeleteEndpointAccessAction Action, GET_DeleteEndpointAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteEndpointAccess?EndpointName=" + (EndpointName==null? "" : System.Uri.EscapeDataString(EndpointName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Redshift event notification subscription.
		/// GET_DeleteEventSubscription #Action=DeleteEventSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the Amazon Redshift event notification subscription to be deleted.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEventSubscriptionAsync(string SubscriptionName, GET_DeleteEventSubscriptionAction Action, GET_DeleteEventSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified HSM client certificate.
		/// GET_DeleteHsmClientCertificate #Action=DeleteHsmClientCertificate
		/// </summary>
		/// <param name="HsmClientCertificateIdentifier">The identifier of the HSM client certificate to be deleted.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteHsmClientCertificateAsync(string HsmClientCertificateIdentifier, GET_DeleteHsmClientCertificateAction Action, GET_DeleteHsmClientCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteHsmClientCertificate?HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : System.Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Redshift HSM configuration.
		/// GET_DeleteHsmConfiguration #Action=DeleteHsmConfiguration
		/// </summary>
		/// <param name="HsmConfigurationIdentifier">The identifier of the Amazon Redshift HSM configuration to be deleted.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteHsmConfigurationAsync(string HsmConfigurationIdentifier, GET_DeleteHsmConfigurationAction Action, GET_DeleteHsmConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteHsmConfiguration?HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : System.Uri.EscapeDataString(HsmConfigurationIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a partner integration from a cluster. Data can still flow to the cluster until the integration is deleted at the partner's website.
		/// GET_DeletePartner #Action=DeletePartner
		/// </summary>
		/// <param name="AccountId">The Amazon Web Services account ID that owns the cluster.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster that receives data from the partner.
		/// Max length: 63
		// </param>
		/// <param name="DatabaseName">The name of the database that receives data from the partner.
		/// Max length: 127
		// </param>
		/// <param name="PartnerName">The name of the partner that is authorized to send data.
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeletePartnerAsync(string AccountId, string ClusterIdentifier, string DatabaseName, string PartnerName, GET_DeletePartnerAction Action, GET_DeletePartnerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePartner?AccountId=" + (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DatabaseName=" + (DatabaseName==null? "" : System.Uri.EscapeDataString(DatabaseName))+"&PartnerName=" + (PartnerName==null? "" : System.Uri.EscapeDataString(PartnerName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a scheduled action.
		/// GET_DeleteScheduledAction #Action=DeleteScheduledAction
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action to delete. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteScheduledActionAsync(string ScheduledActionName, GET_DeleteScheduledActionAction Action, GET_DeleteScheduledActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteScheduledAction?ScheduledActionName=" + (ScheduledActionName==null? "" : System.Uri.EscapeDataString(ScheduledActionName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified snapshot copy grant.
		/// GET_DeleteSnapshotCopyGrant #Action=DeleteSnapshotCopyGrant
		/// </summary>
		/// <param name="SnapshotCopyGrantName">The name of the snapshot copy grant to delete.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSnapshotCopyGrantAsync(string SnapshotCopyGrantName, GET_DeleteSnapshotCopyGrantAction Action, GET_DeleteSnapshotCopyGrantVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSnapshotCopyGrant?SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : System.Uri.EscapeDataString(SnapshotCopyGrantName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a snapshot schedule.
		/// GET_DeleteSnapshotSchedule #Action=DeleteSnapshotSchedule
		/// </summary>
		/// <param name="ScheduleIdentifier">A unique identifier of the snapshot schedule to delete.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSnapshotScheduleAsync(string ScheduleIdentifier, GET_DeleteSnapshotScheduleAction Action, GET_DeleteSnapshotScheduleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSnapshotSchedule?ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : System.Uri.EscapeDataString(ScheduleIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
		/// GET_DeleteTags #Action=DeleteTags
		/// </summary>
		/// <param name="ResourceName">The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">The tag key that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTagsAsync(string ResourceName, string[] TagKeys, GET_DeleteTagsAction Action, GET_DeleteTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTags?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a usage limit from a cluster.
		/// GET_DeleteUsageLimit #Action=DeleteUsageLimit
		/// </summary>
		/// <param name="UsageLimitId">The identifier of the usage limit to delete.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUsageLimitAsync(string UsageLimitId, GET_DeleteUsageLimitAction Action, GET_DeleteUsageLimitVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteUsageLimit?UsageLimitId=" + (UsageLimitId==null? "" : System.Uri.EscapeDataString(UsageLimitId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of attributes attached to an account
		/// GET_DescribeAccountAttributes #Action=DescribeAccountAttributes
		/// </summary>
		/// <param name="AttributeNames">A list of attribute names.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountAttributesAsync(string[] AttributeNames, GET_DescribeAccountAttributesAction Action, GET_DescribeAccountAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAccountAttributes?"+string.Join("&", AttributeNames.Select(z => $"AttributeNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an authentication profile.
		/// GET_DescribeAuthenticationProfiles #Action=DescribeAuthenticationProfiles
		/// </summary>
		/// <param name="AuthenticationProfileName">The name of the authentication profile to describe. If not specified then all authentication profiles owned by the account are listed.
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAuthenticationProfilesAsync(string AuthenticationProfileName, GET_DescribeAuthenticationProfilesAction Action, GET_DescribeAuthenticationProfilesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAuthenticationProfiles?AuthenticationProfileName=" + (AuthenticationProfileName==null? "" : System.Uri.EscapeDataString(AuthenticationProfileName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>ClusterDbRevision</code> objects.
		/// GET_DescribeClusterDbRevisions #Action=DescribeClusterDbRevisions
		/// </summary>
		/// <param name="ClusterIdentifier">A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterDbRevisionsAsync(string ClusterIdentifier, int MaxRecords, string Marker, GET_DescribeClusterDbRevisionsAction Action, GET_DescribeClusterDbRevisionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterDbRevisions?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterParameterGroups #Action=DescribeClusterParameterGroups
		/// </summary>
		/// <param name="ParameterGroupName">The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterParameterGroupsAsync(string ParameterGroupName, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeClusterParameterGroupsAction Action, GET_DescribeClusterParameterGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterParameterGroups?ParameterGroupName=" + (ParameterGroupName==null? "" : System.Uri.EscapeDataString(ParameterGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DescribeClusterParameters #Action=DescribeClusterParameters
		/// </summary>
		/// <param name="ParameterGroupName">The name of a cluster parameter group for which to return details.
		/// Max length: 2147483647
		// </param>
		/// <param name="Source"><p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterParametersAsync(string ParameterGroupName, string Source, int MaxRecords, string Marker, GET_DescribeClusterParametersAction Action, GET_DescribeClusterParametersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterParameters?ParameterGroupName=" + (ParameterGroupName==null? "" : System.Uri.EscapeDataString(ParameterGroupName))+"&Source=" + (Source==null? "" : System.Uri.EscapeDataString(Source))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterSecurityGroups #Action=DescribeClusterSecurityGroups
		/// </summary>
		/// <param name="ClusterSecurityGroupName"><p>The name of a cluster security group for which you are requesting details. You must specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You must specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterSecurityGroupsAsync(string ClusterSecurityGroupName, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeClusterSecurityGroupsAction Action, GET_DescribeClusterSecurityGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterSecurityGroups?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : System.Uri.EscapeDataString(ClusterSecurityGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by your Amazon Web Services account. No information is returned for snapshots owned by inactive Amazon Web Services accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterSnapshots #Action=DescribeClusterSnapshots
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster which generated the requested snapshots.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotIdentifier">The snapshot identifier of the snapshot about which to return information.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotArn">The Amazon Resource Name (ARN) of the snapshot associated with the message to describe cluster snapshots.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotType"><p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="StartTime"><p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p></param>
		/// <param name="EndTime"><p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="OwnerAccount">The Amazon Web Services account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your Amazon Web Services account, or do not specify the parameter.
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.</param>
		/// <param name="ClusterExists"><p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul></param>
		/// <param name="SortingEntities"><p/></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterSnapshotsAsync(
					string ClusterIdentifier, 
					string SnapshotIdentifier, 
					string SnapshotArn, 
					string SnapshotType, 
					System.DateTimeOffset StartTime, 
					System.DateTimeOffset EndTime, 
					int MaxRecords, 
					string Marker, 
					string OwnerAccount, 
					string[] TagKeys, 
					string[] TagValues, 
					bool ClusterExists, 
					string[] SortingEntities, 
					GET_DescribeClusterSnapshotsAction Action, 
					GET_DescribeClusterSnapshotsVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterSnapshots?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotArn=" + (SnapshotArn==null? "" : System.Uri.EscapeDataString(SnapshotArn))+"&SnapshotType=" + (SnapshotType==null? "" : System.Uri.EscapeDataString(SnapshotType))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&OwnerAccount=" + (OwnerAccount==null? "" : System.Uri.EscapeDataString(OwnerAccount))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&ClusterExists="+ClusterExists+"&"+string.Join("&", SortingEntities.Select(z => $"SortingEntities={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterSubnetGroups #Action=DescribeClusterSubnetGroups
		/// </summary>
		/// <param name="ClusterSubnetGroupName">The name of the cluster subnet group for which information is requested.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterSubnetGroupsAsync(string ClusterSubnetGroupName, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeClusterSubnetGroupsAction Action, GET_DescribeClusterSubnetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterSubnetGroups?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : System.Uri.EscapeDataString(ClusterSubnetGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the available maintenance tracks.
		/// GET_DescribeClusterTracks #Action=DescribeClusterTracks
		/// </summary>
		/// <param name="MaintenanceTrackName">The name of the maintenance track. 
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">An integer value for the maximum number of maintenance tracks to return.</param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterTracksAsync(string MaintenanceTrackName, int MaxRecords, string Marker, GET_DescribeClusterTracksAction Action, GET_DescribeClusterTracksVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterTracks?MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : System.Uri.EscapeDataString(MaintenanceTrackName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_DescribeClusterVersions #Action=DescribeClusterVersions
		/// </summary>
		/// <param name="ClusterVersion"><p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterParameterGroupFamily"><p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterVersionsAsync(string ClusterVersion, string ClusterParameterGroupFamily, int MaxRecords, string Marker, GET_DescribeClusterVersionsAction Action, GET_DescribeClusterVersionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusterVersions?ClusterVersion=" + (ClusterVersion==null? "" : System.Uri.EscapeDataString(ClusterVersion))+"&ClusterParameterGroupFamily=" + (ClusterParameterGroupFamily==null? "" : System.Uri.EscapeDataString(ClusterParameterGroupFamily))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusters #Action=DescribeClusters
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClustersAsync(string ClusterIdentifier, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeClustersAction Action, GET_DescribeClustersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClusters?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Contains information for custom domain associations for a cluster.
		/// GET_DescribeCustomDomainAssociations #Action=DescribeCustomDomainAssociations
		/// </summary>
		/// <param name="CustomDomainName">The custom domain name for the custom domain association.
		/// Max length: 253
		/// Min length: 1
		// </param>
		/// <param name="CustomDomainCertificateArn">The certificate Amazon Resource Name (ARN) for the custom domain association.
		/// Max length: 2048
		/// Min length: 20
		// </param>
		/// <param name="MaxRecords">The maximum records setting for the associated custom domain.</param>
		/// <param name="Marker">The marker for the custom domain association.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCustomDomainAssociationsAsync(string CustomDomainName, string CustomDomainCertificateArn, int MaxRecords, string Marker, GET_DescribeCustomDomainAssociationsAction Action, GET_DescribeCustomDomainAssociationsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCustomDomainAssociations?CustomDomainName=" + (CustomDomainName==null? "" : System.Uri.EscapeDataString(CustomDomainName))+"&CustomDomainCertificateArn=" + (CustomDomainCertificateArn==null? "" : System.Uri.EscapeDataString(CustomDomainCertificateArn))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shows the status of any inbound or outbound datashares available in the specified account.
		/// GET_DescribeDataShares #Action=DescribeDataShares
		/// </summary>
		/// <param name="DataShareArn">The identifier of the datashare to describe details of.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataShares</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDataSharesAsync(string DataShareArn, int MaxRecords, string Marker, GET_DescribeDataSharesAction Action, GET_DescribeDataSharesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDataShares?DataShareArn=" + (DataShareArn==null? "" : System.Uri.EscapeDataString(DataShareArn))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of datashares where the account identifier being called is a consumer account identifier.
		/// GET_DescribeDataSharesForConsumer #Action=DescribeDataSharesForConsumer
		/// </summary>
		/// <param name="ConsumerArn">The Amazon Resource Name (ARN) of the consumer that returns in the list of datashares.
		/// Max length: 2147483647
		// </param>
		/// <param name="Status">An identifier giving the status of a datashare in the consumer cluster. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.</param>
		/// <param name="MaxRecords">The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataSharesForConsumer</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDataSharesForConsumerAsync(string ConsumerArn, DataShareStatusForConsumer Status, int MaxRecords, string Marker, GET_DescribeDataSharesForConsumerAction Action, GET_DescribeDataSharesForConsumerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDataSharesForConsumer?ConsumerArn=" + (ConsumerArn==null? "" : System.Uri.EscapeDataString(ConsumerArn))+"&Status=" + Status+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of datashares when the account identifier being called is a producer account identifier.
		/// GET_DescribeDataSharesForProducer #Action=DescribeDataSharesForProducer
		/// </summary>
		/// <param name="ProducerArn">The Amazon Resource Name (ARN) of the producer that returns in the list of datashares.
		/// Max length: 2147483647
		// </param>
		/// <param name="Status">An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.</param>
		/// <param name="MaxRecords">The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataSharesForProducer</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDataSharesForProducerAsync(string ProducerArn, DataShareStatusForProducer Status, int MaxRecords, string Marker, GET_DescribeDataSharesForProducerAction Action, GET_DescribeDataSharesForProducerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDataSharesForProducer?ProducerArn=" + (ProducerArn==null? "" : System.Uri.EscapeDataString(ProducerArn))+"&Status=" + Status+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DescribeDefaultClusterParameters #Action=DescribeDefaultClusterParameters
		/// </summary>
		/// <param name="ParameterGroupFamily">The name of the cluster parameter group family.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDefaultClusterParametersAsync(string ParameterGroupFamily, int MaxRecords, string Marker, GET_DescribeDefaultClusterParametersAction Action, GET_DescribeDefaultClusterParametersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDefaultClusterParameters?ParameterGroupFamily=" + (ParameterGroupFamily==null? "" : System.Uri.EscapeDataString(ParameterGroupFamily))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a Redshift-managed VPC endpoint.
		/// GET_DescribeEndpointAccess #Action=DescribeEndpointAccess
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster identifier associated with the described endpoint.
		/// Max length: 2147483647
		// </param>
		/// <param name="ResourceOwner">The Amazon Web Services account ID of the owner of the cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="EndpointName">The name of the endpoint to be described.
		/// Max length: 2147483647
		// </param>
		/// <param name="VpcId">The virtual private cloud (VPC) identifier with access to the cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a <code>Marker</code> is included in the response so that the remaining results can be retrieved.</param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeEndpointAccess</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEndpointAccessAsync(string ClusterIdentifier, string ResourceOwner, string EndpointName, string VpcId, int MaxRecords, string Marker, GET_DescribeEndpointAccessAction Action, GET_DescribeEndpointAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEndpointAccess?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ResourceOwner=" + (ResourceOwner==null? "" : System.Uri.EscapeDataString(ResourceOwner))+"&EndpointName=" + (EndpointName==null? "" : System.Uri.EscapeDataString(EndpointName))+"&VpcId=" + (VpcId==null? "" : System.Uri.EscapeDataString(VpcId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an endpoint authorization.
		/// GET_DescribeEndpointAuthorization #Action=DescribeEndpointAuthorization
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster to access.
		/// Max length: 2147483647
		// </param>
		/// <param name="Account">The Amazon Web Services account ID of either the cluster owner (grantor) or grantee. If <code>Grantee</code> parameter is true, then the <code>Account</code> value is of the grantor.
		/// Max length: 2147483647
		// </param>
		/// <param name="Grantee">Indicates whether to check authorization from a grantor or grantee point of view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If false (default), checks authorization from a grantor point of view.</param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a <code>Marker</code> is included in the response so that the remaining results can be retrieved.</param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeEndpointAuthorization</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEndpointAuthorizationAsync(string ClusterIdentifier, string Account, bool Grantee, int MaxRecords, string Marker, GET_DescribeEndpointAuthorizationAction Action, GET_DescribeEndpointAuthorizationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEndpointAuthorization?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Account=" + (Account==null? "" : System.Uri.EscapeDataString(Account))+"&Grantee="+Grantee+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
		/// GET_DescribeEventCategories #Action=DescribeEventCategories
		/// </summary>
		/// <param name="SourceType"><p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventCategoriesAsync(string SourceType, GET_DescribeEventCategoriesAction Action, GET_DescribeEventCategoriesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEventCategories?SourceType=" + (SourceType==null? "" : System.Uri.EscapeDataString(SourceType))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeEventSubscriptions #Action=DescribeEventSubscriptions
		/// </summary>
		/// <param name="SubscriptionName">The name of the Amazon Redshift event notification subscription to be described.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventSubscriptionsAsync(string SubscriptionName, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeEventSubscriptionsAction Action, GET_DescribeEventSubscriptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEventSubscriptions?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
		/// GET_DescribeEvents #Action=DescribeEvents
		/// </summary>
		/// <param name="SourceIdentifier"><p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceType"><p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul></param>
		/// <param name="StartTime"><p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p></param>
		/// <param name="EndTime"><p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p></param>
		/// <param name="Duration"><p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string SourceIdentifier, GET_DescribeEventsSourceType SourceType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Duration, int MaxRecords, string Marker, GET_DescribeEventsAction Action, GET_DescribeEventsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEvents?SourceIdentifier=" + (SourceIdentifier==null? "" : System.Uri.EscapeDataString(SourceIdentifier))+"&SourceType=" + SourceType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Duration="+Duration+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeHsmClientCertificates #Action=DescribeHsmClientCertificates
		/// </summary>
		/// <param name="HsmClientCertificateIdentifier">The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your Amazon Web Services account.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHsmClientCertificatesAsync(string HsmClientCertificateIdentifier, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeHsmClientCertificatesAction Action, GET_DescribeHsmClientCertificatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHsmClientCertificates?HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : System.Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeHsmConfigurations #Action=DescribeHsmConfigurations
		/// </summary>
		/// <param name="HsmConfigurationIdentifier">The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your Amazon Web Services account.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHsmConfigurationsAsync(string HsmConfigurationIdentifier, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeHsmConfigurationsAction Action, GET_DescribeHsmConfigurationsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHsmConfigurations?HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : System.Uri.EscapeDataString(HsmConfigurationIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
		/// GET_DescribeLoggingStatus #Action=DescribeLoggingStatus
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoggingStatusAsync(string ClusterIdentifier, GET_DescribeLoggingStatusAction Action, GET_DescribeLoggingStatusVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLoggingStatus?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
		/// GET_DescribeNodeConfigurationOptions #Action=DescribeNodeConfigurationOptions
		/// </summary>
		/// <param name="ActionType">The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster. </param>
		/// <param name="ClusterIdentifier">The identifier of the cluster to evaluate for possible node configurations.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot to evaluate for possible node configurations.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotArn">The Amazon Resource Name (ARN) of the snapshot associated with the message to describe node configuration.
		/// Max length: 2147483647
		// </param>
		/// <param name="OwnerAccount">The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
		/// Max length: 2147483647
		// </param>
		/// <param name="Filter">A set of name, operator, and value items to filter the results.</param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNodeConfigurationOptionsAsync(GET_DescribeNodeConfigurationOptionsActionType ActionType, string ClusterIdentifier, string SnapshotIdentifier, string SnapshotArn, string OwnerAccount, string[] Filter, string Marker, int MaxRecords, GET_DescribeNodeConfigurationOptionsAction Action, GET_DescribeNodeConfigurationOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNodeConfigurationOptions?ActionType=" + ActionType+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotArn=" + (SnapshotArn==null? "" : System.Uri.EscapeDataString(SnapshotArn))+"&OwnerAccount=" + (OwnerAccount==null? "" : System.Uri.EscapeDataString(OwnerAccount))+"&"+string.Join("&", Filter.Select(z => $"Filter={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific Amazon Web Services Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_DescribeOrderableClusterOptions #Action=DescribeOrderableClusterOptions
		/// </summary>
		/// <param name="ClusterVersion"><p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="NodeType">The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeOrderableClusterOptionsAsync(string ClusterVersion, string NodeType, int MaxRecords, string Marker, GET_DescribeOrderableClusterOptionsAction Action, GET_DescribeOrderableClusterOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeOrderableClusterOptions?ClusterVersion=" + (ClusterVersion==null? "" : System.Uri.EscapeDataString(ClusterVersion))+"&NodeType=" + (NodeType==null? "" : System.Uri.EscapeDataString(NodeType))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the partner integrations defined for a cluster.
		/// GET_DescribePartners #Action=DescribePartners
		/// </summary>
		/// <param name="AccountId">The Amazon Web Services account ID that owns the cluster.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster whose partner integration is being described.
		/// Max length: 63
		// </param>
		/// <param name="DatabaseName">The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.
		/// Max length: 127
		// </param>
		/// <param name="PartnerName">The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribePartnersAsync(string AccountId, string ClusterIdentifier, string DatabaseName, string PartnerName, GET_DescribePartnersAction Action, GET_DescribePartnersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePartners?AccountId=" + (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DatabaseName=" + (DatabaseName==null? "" : System.Uri.EscapeDataString(DatabaseName))+"&PartnerName=" + (PartnerName==null? "" : System.Uri.EscapeDataString(PartnerName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns exchange status details and associated metadata for a reserved-node exchange. Statuses include such values as in progress and requested.
		/// GET_DescribeReservedNodeExchangeStatus #Action=DescribeReservedNodeExchangeStatus
		/// </summary>
		/// <param name="ReservedNodeId">The identifier of the source reserved node in a reserved-node exchange request.
		/// Max length: 2147483647
		// </param>
		/// <param name="ReservedNodeExchangeRequestId">The identifier of the reserved-node exchange request.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedNodeExchangeStatusAsync(string ReservedNodeId, string ReservedNodeExchangeRequestId, int MaxRecords, string Marker, GET_DescribeReservedNodeExchangeStatusAction Action, GET_DescribeReservedNodeExchangeStatusVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedNodeExchangeStatus?ReservedNodeId=" + (ReservedNodeId==null? "" : System.Uri.EscapeDataString(ReservedNodeId))+"&ReservedNodeExchangeRequestId=" + (ReservedNodeExchangeRequestId==null? "" : System.Uri.EscapeDataString(ReservedNodeExchangeRequestId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DescribeReservedNodeOfferings #Action=DescribeReservedNodeOfferings
		/// </summary>
		/// <param name="ReservedNodeOfferingId">The unique identifier for the offering.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedNodeOfferingsAsync(string ReservedNodeOfferingId, int MaxRecords, string Marker, GET_DescribeReservedNodeOfferingsAction Action, GET_DescribeReservedNodeOfferingsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedNodeOfferings?ReservedNodeOfferingId=" + (ReservedNodeOfferingId==null? "" : System.Uri.EscapeDataString(ReservedNodeOfferingId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the descriptions of the reserved nodes.
		/// GET_DescribeReservedNodes #Action=DescribeReservedNodes
		/// </summary>
		/// <param name="ReservedNodeId">Identifier for the node reservation.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedNodesAsync(string ReservedNodeId, int MaxRecords, string Marker, GET_DescribeReservedNodesAction Action, GET_DescribeReservedNodesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedNodes?ReservedNodeId=" + (ReservedNodeId==null? "" : System.Uri.EscapeDataString(ReservedNodeId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
		/// GET_DescribeResize #Action=DescribeResize
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an Amazon Web Services account are returned.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeResizeAsync(string ClusterIdentifier, GET_DescribeResizeAction Action, GET_DescribeResizeVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeResize?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes properties of scheduled actions.
		/// GET_DescribeScheduledActions #Action=DescribeScheduledActions
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action to retrieve. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetActionType">The type of the scheduled actions to retrieve. </param>
		/// <param name="StartTime">The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.</param>
		/// <param name="EndTime">The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.</param>
		/// <param name="Active">If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. </param>
		/// <param name="Filters">List of scheduled action filters. </param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeScheduledActionsAsync(string ScheduledActionName, ScheduledActionTypeValues TargetActionType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, bool Active, string[] Filters, string Marker, int MaxRecords, GET_DescribeScheduledActionsAction Action, GET_DescribeScheduledActionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScheduledActions?ScheduledActionName=" + (ScheduledActionName==null? "" : System.Uri.EscapeDataString(ScheduledActionName))+"&TargetActionType=" + TargetActionType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Active="+Active+"&"+string.Join("&", Filters.Select(z => $"Filters={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of snapshot copy grants owned by the Amazon Web Services account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// GET_DescribeSnapshotCopyGrants #Action=DescribeSnapshotCopyGrants
		/// </summary>
		/// <param name="SnapshotCopyGrantName">The name of the snapshot copy grant.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotCopyGrantsAsync(string SnapshotCopyGrantName, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeSnapshotCopyGrantsAction Action, GET_DescribeSnapshotCopyGrantsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshotCopyGrants?SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : System.Uri.EscapeDataString(SnapshotCopyGrantName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of snapshot schedules.
		/// GET_DescribeSnapshotSchedules #Action=DescribeSnapshotSchedules
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier for the cluster whose snapshot schedules you want to view.
		/// Max length: 2147483647
		// </param>
		/// <param name="ScheduleIdentifier">A unique identifier for a snapshot schedule.
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">The key value for a snapshot schedule tag.</param>
		/// <param name="TagValues">The value corresponding to the key of the snapshot schedule tag.</param>
		/// <param name="Marker">A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotSchedulesAsync(string ClusterIdentifier, string ScheduleIdentifier, string[] TagKeys, string[] TagValues, string Marker, int MaxRecords, GET_DescribeSnapshotSchedulesAction Action, GET_DescribeSnapshotSchedulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshotSchedules?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : System.Uri.EscapeDataString(ScheduleIdentifier))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns account level backups storage size and provisional storage.
		/// GET_DescribeStorage #Action=DescribeStorage
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeStorageAsync(GET_DescribeStorageAction Action, GET_DescribeStorageVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeStorage?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns account level backups storage size and provisional storage.
		/// POST_DescribeStorage #Action=DescribeStorage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeStorageAsync(GET_DescribeStorageAction Action, POST_DescribeStorageVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeStorage?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
		/// GET_DescribeTableRestoreStatus #Action=DescribeTableRestoreStatus
		/// </summary>
		/// <param name="ClusterIdentifier">The Amazon Redshift cluster that the table is being restored to.
		/// Max length: 2147483647
		// </param>
		/// <param name="TableRestoreRequestId">The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTableRestoreStatusAsync(string ClusterIdentifier, string TableRestoreRequestId, int MaxRecords, string Marker, GET_DescribeTableRestoreStatusAction Action, GET_DescribeTableRestoreStatusVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTableRestoreStatus?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&TableRestoreRequestId=" + (TableRestoreRequestId==null? "" : System.Uri.EscapeDataString(TableRestoreRequestId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeTags #Action=DescribeTags
		/// </summary>
		/// <param name="ResourceName">The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
		/// Max length: 2147483647
		// </param>
		/// <param name="ResourceType"><p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. </param>
		/// <param name="Marker">A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(string ResourceName, string ResourceType, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeTagsAction Action, GET_DescribeTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTags?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&ResourceType=" + (ResourceType==null? "" : System.Uri.EscapeDataString(ResourceType))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:</p> <ul> <li> <p>If usage limit identifier, cluster identifier, and feature type are not provided, then all usage limit objects for the current account in the current region are returned.</p> </li> <li> <p>If usage limit identifier is provided, then the corresponding usage limit object is returned.</p> </li> <li> <p>If cluster identifier is provided, then all usage limit objects for the specified cluster are returned.</p> </li> <li> <p>If cluster identifier and feature type are provided, then all usage limit objects for the combination of cluster and feature are returned.</p> </li> </ul>
		/// GET_DescribeUsageLimits #Action=DescribeUsageLimits
		/// </summary>
		/// <param name="UsageLimitId">The identifier of the usage limit to describe.
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterIdentifier">The identifier of the cluster for which you want to describe usage limits.
		/// Max length: 2147483647
		// </param>
		/// <param name="FeatureType">The feature type for which you want to describe usage limits.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeUsageLimits</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching usage limit objects that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the usage limit objects have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching usage limit objects that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the usage limit objects that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeUsageLimitsAsync(string UsageLimitId, string ClusterIdentifier, GET_DescribeUsageLimitsFeatureType FeatureType, int MaxRecords, string Marker, string[] TagKeys, string[] TagValues, GET_DescribeUsageLimitsAction Action, GET_DescribeUsageLimitsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeUsageLimits?UsageLimitId=" + (UsageLimitId==null? "" : System.Uri.EscapeDataString(UsageLimitId))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&FeatureType=" + FeatureType+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagValues.Select(z => $"TagValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
		/// GET_DisableLogging #Action=DisableLogging
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DisableLoggingAsync(string ClusterIdentifier, GET_DisableLoggingAction Action, GET_DisableLoggingVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableLogging?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using an encrypted symmetric key from Key Management Service, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the key in the destination region. </p>
		/// GET_DisableSnapshotCopy #Action=DisableSnapshotCopy
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DisableSnapshotCopyAsync(string ClusterIdentifier, GET_DisableSnapshotCopyAction Action, GET_DisableSnapshotCopyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableSnapshotCopy?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// From a datashare consumer account, remove association for the specified datashare.
		/// GET_DisassociateDataShareConsumer #Action=DisassociateDataShareConsumer
		/// </summary>
		/// <param name="DataShareArn">The Amazon Resource Name (ARN) of the datashare to remove association for. 
		/// Max length: 2147483647
		// </param>
		/// <param name="DisassociateEntireAccount">A value that specifies whether association for the datashare is removed from the entire account.</param>
		/// <param name="ConsumerArn">The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.
		/// Max length: 2147483647
		// </param>
		/// <param name="ConsumerRegion">From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateDataShareConsumerAsync(string DataShareArn, bool DisassociateEntireAccount, string ConsumerArn, string ConsumerRegion, GET_DisassociateDataShareConsumerAction Action, GET_DisassociateDataShareConsumerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateDataShareConsumer?DataShareArn=" + (DataShareArn==null? "" : System.Uri.EscapeDataString(DataShareArn))+"&DisassociateEntireAccount="+DisassociateEntireAccount+"&ConsumerArn=" + (ConsumerArn==null? "" : System.Uri.EscapeDataString(ConsumerArn))+"&ConsumerRegion=" + (ConsumerRegion==null? "" : System.Uri.EscapeDataString(ConsumerRegion))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
		/// GET_EnableLogging #Action=EnableLogging
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="BucketName"><p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="S3KeyPrefix"><p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="LogDestinationType">The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.</param>
		/// <param name="LogExports">The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableLoggingAsync(string ClusterIdentifier, string BucketName, string S3KeyPrefix, LogDestinationType LogDestinationType, string[] LogExports, GET_EnableLoggingAction Action, GET_EnableLoggingVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableLogging?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&BucketName=" + (BucketName==null? "" : System.Uri.EscapeDataString(BucketName))+"&S3KeyPrefix=" + (S3KeyPrefix==null? "" : System.Uri.EscapeDataString(S3KeyPrefix))+"&LogDestinationType=" + LogDestinationType+"&"+string.Join("&", LogExports.Select(z => $"LogExports={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the automatic copy of snapshots from one region to another region for a specified cluster.
		/// GET_EnableSnapshotCopy #Action=EnableSnapshotCopy
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="DestinationRegion"><p>The destination Amazon Web Services Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="RetentionPeriod"><p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p></param>
		/// <param name="SnapshotCopyGrantName">The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.
		/// Max length: 2147483647
		// </param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <returns>Success</returns>
		public async Task GET_EnableSnapshotCopyAsync(string ClusterIdentifier, string DestinationRegion, int RetentionPeriod, string SnapshotCopyGrantName, int ManualSnapshotRetentionPeriod, GET_EnableSnapshotCopyAction Action, GET_EnableSnapshotCopyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableSnapshotCopy?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DestinationRegion=" + (DestinationRegion==null? "" : System.Uri.EscapeDataString(DestinationRegion))+"&RetentionPeriod="+RetentionPeriod+"&SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : System.Uri.EscapeDataString(SnapshotCopyGrantName))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The Identity and Access Management (IAM) user or role that runs GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> permission.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
		/// GET_GetClusterCredentials #Action=GetClusterCredentials
		/// </summary>
		/// <param name="DbUser"><p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="DbName"><p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterIdentifier">The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.
		/// Max length: 2147483647
		// </param>
		/// <param name="DurationSeconds"><p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p></param>
		/// <param name="AutoCreate">Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.</param>
		/// <param name="DbGroups"><p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul></param>
		/// <param name="CustomDomainName">The custom domain name for the cluster credentials.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_GetClusterCredentialsAsync(string DbUser, string DbName, string ClusterIdentifier, int DurationSeconds, bool AutoCreate, string[] DbGroups, string CustomDomainName, GET_GetClusterCredentialsAction Action, GET_GetClusterCredentialsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetClusterCredentials?DbUser=" + (DbUser==null? "" : System.Uri.EscapeDataString(DbUser))+"&DbName=" + (DbName==null? "" : System.Uri.EscapeDataString(DbName))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DurationSeconds="+DurationSeconds+"&AutoCreate="+AutoCreate+"&"+string.Join("&", DbGroups.Select(z => $"DbGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&CustomDomainName=" + (CustomDomainName==null? "" : System.Uri.EscapeDataString(CustomDomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a database user name and temporary password with temporary authorization to log in to an Amazon Redshift database. The database user is mapped 1:1 to the source Identity and Access Management (IAM) identity. For more information about IAM identities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html">IAM Identities (users, user groups, and roles)</a> in the Amazon Web Services Identity and Access Management User Guide.</p> <p>The Identity and Access Management (IAM) identity that runs this operation must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html">Using identity-based policies (IAM policies)</a> in the Amazon Redshift Cluster Management Guide. </p>
		/// GET_GetClusterCredentialsWithIAM #Action=GetClusterCredentialsWithIAM
		/// </summary>
		/// <param name="DbName">The name of the database for which you are requesting credentials. If the database name is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. If the database name is not specified, access to all databases is allowed.
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterIdentifier">The unique identifier of the cluster that contains the database for which you are requesting credentials. 
		/// Max length: 2147483647
		// </param>
		/// <param name="DurationSeconds"><p>The number of seconds until the returned temporary password expires.</p> <p>Range: 900-3600. Default: 900.</p></param>
		/// <param name="CustomDomainName">The custom domain name for the IAM message cluster credentials.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_GetClusterCredentialsWithIAMAsync(string DbName, string ClusterIdentifier, int DurationSeconds, string CustomDomainName, GET_GetClusterCredentialsWithIAMAction Action, GET_GetClusterCredentialsWithIAMVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetClusterCredentialsWithIAM?DbName=" + (DbName==null? "" : System.Uri.EscapeDataString(DbName))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DurationSeconds="+DurationSeconds+"&CustomDomainName=" + (CustomDomainName==null? "" : System.Uri.EscapeDataString(CustomDomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node offering. Details include the node type, the price, the node count, and the offering type.
		/// GET_GetReservedNodeExchangeConfigurationOptions #Action=GetReservedNodeExchangeConfigurationOptions
		/// </summary>
		/// <param name="ActionType">The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.</param>
		/// <param name="ClusterIdentifier">The identifier for the cluster that is the source for a reserved-node exchange.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotIdentifier">The identifier for the snapshot that is the source for the reserved-node exchange.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_GetReservedNodeExchangeConfigurationOptionsAsync(GET_GetReservedNodeExchangeConfigurationOptionsActionType ActionType, string ClusterIdentifier, string SnapshotIdentifier, int MaxRecords, string Marker, GET_GetReservedNodeExchangeConfigurationOptionsAction Action, GET_GetReservedNodeExchangeConfigurationOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetReservedNodeExchangeConfigurationOptions?ActionType=" + ActionType+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
		/// GET_GetReservedNodeExchangeOfferings #Action=GetReservedNodeExchangeOfferings
		/// </summary>
		/// <param name="ReservedNodeId">A string representing the node identifier for the DC1 Reserved Node to be exchanged.
		/// Max length: 2147483647
		// </param>
		/// <param name="MaxRecords">An integer setting the maximum number of ReservedNodeOfferings to retrieve.</param>
		/// <param name="Marker">A value that indicates the starting point for the next set of ReservedNodeOfferings.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_GetReservedNodeExchangeOfferingsAsync(string ReservedNodeId, int MaxRecords, string Marker, GET_GetReservedNodeExchangeOfferingsAction Action, GET_GetReservedNodeExchangeOfferingsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetReservedNodeExchangeOfferings?ReservedNodeId=" + (ReservedNodeId==null? "" : System.Uri.EscapeDataString(ReservedNodeId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation is retired. Calling this operation does not change AQUA configuration. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
		/// GET_ModifyAquaConfiguration #Action=ModifyAquaConfiguration
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster to be modified.
		/// Max length: 2147483647
		// </param>
		/// <param name="AquaConfigurationStatus">This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyAquaConfigurationAsync(string ClusterIdentifier, AquaConfigurationStatus AquaConfigurationStatus, GET_ModifyAquaConfigurationAction Action, GET_ModifyAquaConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyAquaConfiguration?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&AquaConfigurationStatus=" + AquaConfigurationStatus+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies an authentication profile.
		/// GET_ModifyAuthenticationProfile #Action=ModifyAuthenticationProfile
		/// </summary>
		/// <param name="AuthenticationProfileName">The name of the authentication profile to replace.
		/// Max length: 63
		// </param>
		/// <param name="AuthenticationProfileContent">The new content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyAuthenticationProfileAsync(string AuthenticationProfileName, string AuthenticationProfileContent, GET_ModifyAuthenticationProfileAction Action, GET_ModifyAuthenticationProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyAuthenticationProfile?AuthenticationProfileName=" + (AuthenticationProfileName==null? "" : System.Uri.EscapeDataString(AuthenticationProfileName))+"&AuthenticationProfileContent=" + (AuthenticationProfileContent==null? "" : System.Uri.EscapeDataString(AuthenticationProfileContent))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the admin user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_ModifyCluster #Action=ModifyCluster
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterType"><p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="NodeType"><p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.xlplus</code> | <code>ra3.4xlarge</code> | <code>ra3.16xlarge</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="NumberOfNodes"><p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p></param>
		/// <param name="ClusterSecurityGroups"><p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <param name="VpcSecurityGroupIds">A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.</param>
		/// <param name="MasterUserPassword"><p>The new password for the cluster admin user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the admin user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33-126) except <code>'</code> (single quote), <code>"</code> (double quote), <code>\</code>, <code>/</code>, or <code>@</code>.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterParameterGroupName"><p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="AutomatedSnapshotRetentionPeriod"><p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterVersion"><p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="AllowVersionUpgrade"><p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p></param>
		/// <param name="HsmClientCertificateIdentifier">Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmConfigurationIdentifier">Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="NewClusterIdentifier"><p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="PubliclyAccessible">If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.</param>
		/// <param name="ElasticIp"><p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="EnhancedVpcRouting"><p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p></param>
		/// <param name="MaintenanceTrackName">The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
		/// Max length: 2147483647
		// </param>
		/// <param name="Encrypted"><p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. </p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p></param>
		/// <param name="KmsKeyId">The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="AvailabilityZoneRelocation">The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.</param>
		/// <param name="AvailabilityZone">The option to initiate relocation for an Amazon Redshift cluster to the target Availability Zone.
		/// Max length: 2147483647
		// </param>
		/// <param name="Port">The option to change the port of an Amazon Redshift cluster.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterAsync(
					string ClusterIdentifier, 
					string ClusterType, 
					string NodeType, 
					int NumberOfNodes, 
					string[] ClusterSecurityGroups, 
					string[] VpcSecurityGroupIds, 
					string MasterUserPassword, 
					string ClusterParameterGroupName, 
					int AutomatedSnapshotRetentionPeriod, 
					int ManualSnapshotRetentionPeriod, 
					string PreferredMaintenanceWindow, 
					string ClusterVersion, 
					bool AllowVersionUpgrade, 
					string HsmClientCertificateIdentifier, 
					string HsmConfigurationIdentifier, 
					string NewClusterIdentifier, 
					bool PubliclyAccessible, 
					string ElasticIp, 
					bool EnhancedVpcRouting, 
					string MaintenanceTrackName, 
					bool Encrypted, 
					string KmsKeyId, 
					bool AvailabilityZoneRelocation, 
					string AvailabilityZone, 
					int Port, 
					GET_ModifyClusterAction Action, 
					GET_ModifyClusterVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ClusterType=" + (ClusterType==null? "" : System.Uri.EscapeDataString(ClusterType))+"&NodeType=" + (NodeType==null? "" : System.Uri.EscapeDataString(NodeType))+"&NumberOfNodes="+NumberOfNodes+"&"+string.Join("&", ClusterSecurityGroups.Select(z => $"ClusterSecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : System.Uri.EscapeDataString(MasterUserPassword))+"&ClusterParameterGroupName=" + (ClusterParameterGroupName==null? "" : System.Uri.EscapeDataString(ClusterParameterGroupName))+"&AutomatedSnapshotRetentionPeriod="+AutomatedSnapshotRetentionPeriod+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&ClusterVersion=" + (ClusterVersion==null? "" : System.Uri.EscapeDataString(ClusterVersion))+"&AllowVersionUpgrade="+AllowVersionUpgrade+"&HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : System.Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : System.Uri.EscapeDataString(HsmConfigurationIdentifier))+"&NewClusterIdentifier=" + (NewClusterIdentifier==null? "" : System.Uri.EscapeDataString(NewClusterIdentifier))+"&PubliclyAccessible="+PubliclyAccessible+"&ElasticIp=" + (ElasticIp==null? "" : System.Uri.EscapeDataString(ElasticIp))+"&EnhancedVpcRouting="+EnhancedVpcRouting+"&MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : System.Uri.EscapeDataString(MaintenanceTrackName))+"&Encrypted="+Encrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&AvailabilityZoneRelocation="+AvailabilityZoneRelocation+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&Port="+Port+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
		/// GET_ModifyClusterDbRevision #Action=ModifyClusterDbRevision
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="RevisionTarget">The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterDbRevisionAsync(string ClusterIdentifier, string RevisionTarget, GET_ModifyClusterDbRevisionAction Action, GET_ModifyClusterDbRevisionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterDbRevision?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&RevisionTarget=" + (RevisionTarget==null? "" : System.Uri.EscapeDataString(RevisionTarget))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.</p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_ModifyClusterIamRoles #Action=ModifyClusterIamRoles
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
		/// Max length: 2147483647
		// </param>
		/// <param name="AddIamRoles">Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. </param>
		/// <param name="RemoveIamRoles">Zero or more IAM roles in ARN format to disassociate from the cluster. </param>
		/// <param name="DefaultIamRoleArn">The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterIamRolesAsync(string ClusterIdentifier, string[] AddIamRoles, string[] RemoveIamRoles, string DefaultIamRoleArn, GET_ModifyClusterIamRolesAction Action, GET_ModifyClusterIamRolesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterIamRoles?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&"+string.Join("&", AddIamRoles.Select(z => $"AddIamRoles={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", RemoveIamRoles.Select(z => $"RemoveIamRoles={System.Uri.EscapeDataString(z.ToString())}"))+"&DefaultIamRoleArn=" + (DefaultIamRoleArn==null? "" : System.Uri.EscapeDataString(DefaultIamRoleArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the maintenance settings of a cluster.
		/// GET_ModifyClusterMaintenance #Action=ModifyClusterMaintenance
		/// </summary>
		/// <param name="ClusterIdentifier">A unique identifier for the cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="DeferMaintenance">A boolean indicating whether to enable the deferred maintenance window. </param>
		/// <param name="DeferMaintenanceIdentifier">A unique identifier for the deferred maintenance window.
		/// Max length: 2147483647
		// </param>
		/// <param name="DeferMaintenanceStartTime">A timestamp indicating the start time for the deferred maintenance window.</param>
		/// <param name="DeferMaintenanceEndTime">A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.</param>
		/// <param name="DeferMaintenanceDuration">An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterMaintenanceAsync(string ClusterIdentifier, bool DeferMaintenance, string DeferMaintenanceIdentifier, System.DateTimeOffset DeferMaintenanceStartTime, System.DateTimeOffset DeferMaintenanceEndTime, int DeferMaintenanceDuration, GET_ModifyClusterMaintenanceAction Action, GET_ModifyClusterMaintenanceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterMaintenance?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DeferMaintenance="+DeferMaintenance+"&DeferMaintenanceIdentifier=" + (DeferMaintenanceIdentifier==null? "" : System.Uri.EscapeDataString(DeferMaintenanceIdentifier))+"&DeferMaintenanceStartTime=" + DeferMaintenanceStartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DeferMaintenanceEndTime=" + DeferMaintenanceEndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DeferMaintenanceDuration="+DeferMaintenanceDuration+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the parameters of a parameter group. For the parameters parameter, it can't contain ASCII characters.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_ModifyClusterParameterGroup #Action=ModifyClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName">The name of the parameter group to be modified.
		/// Max length: 2147483647
		// </param>
		/// <param name="Parameters"><p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterParameterGroupAsync(string ParameterGroupName, string[] Parameters, GET_ModifyClusterParameterGroupAction Action, GET_ModifyClusterParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : System.Uri.EscapeDataString(ParameterGroupName))+"&"+string.Join("&", Parameters.Select(z => $"Parameters={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
		/// GET_ModifyClusterSnapshot #Action=ModifyClusterSnapshot
		/// </summary>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot whose setting you want to modify.
		/// Max length: 2147483647
		// </param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <param name="Force">A Boolean option to override an exception if the retention period has already passed.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterSnapshotAsync(string SnapshotIdentifier, int ManualSnapshotRetentionPeriod, bool Force, GET_ModifyClusterSnapshotAction Action, GET_ModifyClusterSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterSnapshot?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Force="+Force+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a snapshot schedule for a cluster.
		/// GET_ModifyClusterSnapshotSchedule #Action=ModifyClusterSnapshotSchedule
		/// </summary>
		/// <param name="ClusterIdentifier">A unique identifier for the cluster whose snapshot schedule you want to modify. 
		/// Max length: 2147483647
		// </param>
		/// <param name="ScheduleIdentifier">A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="DisassociateSchedule">A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterSnapshotScheduleAsync(string ClusterIdentifier, string ScheduleIdentifier, bool DisassociateSchedule, GET_ModifyClusterSnapshotScheduleAction Action, GET_ModifyClusterSnapshotScheduleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterSnapshotSchedule?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : System.Uri.EscapeDataString(ScheduleIdentifier))+"&DisassociateSchedule="+DisassociateSchedule+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
		/// GET_ModifyClusterSubnetGroup #Action=ModifyClusterSubnetGroup
		/// </summary>
		/// <param name="ClusterSubnetGroupName">The name of the subnet group to be modified.
		/// Max length: 2147483647
		// </param>
		/// <param name="Description">A text description of the subnet group to be modified.
		/// Max length: 2147483647
		// </param>
		/// <param name="SubnetIds">An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterSubnetGroupAsync(string ClusterSubnetGroupName, string Description, string[] SubnetIds, GET_ModifyClusterSubnetGroupAction Action, GET_ModifyClusterSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClusterSubnetGroup?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : System.Uri.EscapeDataString(ClusterSubnetGroupName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", SubnetIds.Select(z => $"SubnetIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Contains information for changing a custom domain association.
		/// GET_ModifyCustomDomainAssociation #Action=ModifyCustomDomainAssociation
		/// </summary>
		/// <param name="CustomDomainName">The custom domain name for a changed custom domain association.
		/// Max length: 253
		/// Min length: 1
		// </param>
		/// <param name="CustomDomainCertificateArn">The certificate Amazon Resource Name (ARN) for the changed custom domain association.
		/// Max length: 2048
		/// Min length: 20
		// </param>
		/// <param name="ClusterIdentifier">The identifier of the cluster to change a custom domain association for.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyCustomDomainAssociationAsync(string CustomDomainName, string CustomDomainCertificateArn, string ClusterIdentifier, GET_ModifyCustomDomainAssociationAction Action, GET_ModifyCustomDomainAssociationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCustomDomainAssociation?CustomDomainName=" + (CustomDomainName==null? "" : System.Uri.EscapeDataString(CustomDomainName))+"&CustomDomainCertificateArn=" + (CustomDomainCertificateArn==null? "" : System.Uri.EscapeDataString(CustomDomainCertificateArn))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a Redshift-managed VPC endpoint.
		/// GET_ModifyEndpointAccess #Action=ModifyEndpointAccess
		/// </summary>
		/// <param name="EndpointName">The endpoint to be modified.
		/// Max length: 2147483647
		// </param>
		/// <param name="VpcSecurityGroupIds">The complete list of VPC security groups associated with the endpoint after the endpoint is modified.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyEndpointAccessAsync(string EndpointName, string[] VpcSecurityGroupIds, GET_ModifyEndpointAccessAction Action, GET_ModifyEndpointAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyEndpointAccess?EndpointName=" + (EndpointName==null? "" : System.Uri.EscapeDataString(EndpointName))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies an existing Amazon Redshift event notification subscription.
		/// GET_ModifyEventSubscription #Action=ModifyEventSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the modified Amazon Redshift event notification subscription.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnsTopicArn">The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceType"><p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceIds"><p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p></param>
		/// <param name="EventCategories"><p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security, pending</p></param>
		/// <param name="Severity"><p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="Enabled">A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, string[] SourceIds, string[] EventCategories, string Severity, bool Enabled, GET_ModifyEventSubscriptionAction Action, GET_ModifyEventSubscriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : System.Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : System.Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : System.Uri.EscapeDataString(SourceType))+"&"+string.Join("&", SourceIds.Select(z => $"SourceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", EventCategories.Select(z => $"EventCategories={System.Uri.EscapeDataString(z.ToString())}"))+"&Severity=" + (Severity==null? "" : System.Uri.EscapeDataString(Severity))+"&Enabled="+Enabled+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a scheduled action.
		/// GET_ModifyScheduledAction #Action=ModifyScheduledAction
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action to modify. 
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetAction">A modified JSON format of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Schedule">A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
		/// Max length: 2147483647
		// </param>
		/// <param name="IamRole">A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.
		/// Max length: 2147483647
		// </param>
		/// <param name="ScheduledActionDescription">A modified description of the scheduled action. 
		/// Max length: 2147483647
		// </param>
		/// <param name="StartTime">A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="EndTime">A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Enable">A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyScheduledActionAsync(string ScheduledActionName, GET_ModifyScheduledActionTargetAction TargetAction, string Schedule, string IamRole, string ScheduledActionDescription, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, bool Enable, GET_ModifyScheduledActionAction Action, GET_ModifyScheduledActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyScheduledAction?ScheduledActionName=" + (ScheduledActionName==null? "" : System.Uri.EscapeDataString(ScheduledActionName))+"&TargetAction=" + TargetAction+"&Schedule=" + (Schedule==null? "" : System.Uri.EscapeDataString(Schedule))+"&IamRole=" + (IamRole==null? "" : System.Uri.EscapeDataString(IamRole))+"&ScheduledActionDescription=" + (ScheduledActionDescription==null? "" : System.Uri.EscapeDataString(ScheduledActionDescription))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Enable="+Enable+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the number of days to retain snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period.
		/// GET_ModifySnapshotCopyRetentionPeriod #Action=ModifySnapshotCopyRetentionPeriod
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination Amazon Web Services Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="RetentionPeriod"><p>The number of days to retain automated snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination Amazon Web Services Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination Amazon Web Services Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p></param>
		/// <param name="Manual">Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifySnapshotCopyRetentionPeriodAsync(string ClusterIdentifier, int RetentionPeriod, bool Manual, GET_ModifySnapshotCopyRetentionPeriodAction Action, GET_ModifySnapshotCopyRetentionPeriodVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySnapshotCopyRetentionPeriod?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&RetentionPeriod="+RetentionPeriod+"&Manual="+Manual+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
		/// GET_ModifySnapshotSchedule #Action=ModifySnapshotSchedule
		/// </summary>
		/// <param name="ScheduleIdentifier">A unique alphanumeric identifier of the schedule to modify.
		/// Max length: 2147483647
		// </param>
		/// <param name="ScheduleDefinitions">An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".</param>
		/// <returns>Success</returns>
		public async Task GET_ModifySnapshotScheduleAsync(string ScheduleIdentifier, string[] ScheduleDefinitions, GET_ModifySnapshotScheduleAction Action, GET_ModifySnapshotScheduleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySnapshotSchedule?ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : System.Uri.EscapeDataString(ScheduleIdentifier))+"&"+string.Join("&", ScheduleDefinitions.Select(z => $"ScheduleDefinitions={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a usage limit in a cluster. You can't modify the feature type or period of a usage limit.
		/// GET_ModifyUsageLimit #Action=ModifyUsageLimit
		/// </summary>
		/// <param name="UsageLimitId">The identifier of the usage limit to modify.
		/// Max length: 2147483647
		// </param>
		/// <param name="Amount">The new limit amount. For more information about this parameter, see <a>UsageLimit</a>. </param>
		/// <param name="BreachAction">The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>. </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyUsageLimitAsync(string UsageLimitId, int Amount, GET_ModifyUsageLimitBreachAction BreachAction, GET_ModifyUsageLimitAction Action, GET_ModifyUsageLimitVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyUsageLimit?UsageLimitId=" + (UsageLimitId==null? "" : System.Uri.EscapeDataString(UsageLimitId))+"&Amount="+Amount+"&BreachAction=" + BreachAction+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pauses a cluster.
		/// GET_PauseCluster #Action=PauseCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster to be paused.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_PauseClusterAsync(string ClusterIdentifier, GET_PauseClusterAction Action, GET_PauseClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PauseCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_PurchaseReservedNodeOffering #Action=PurchaseReservedNodeOffering
		/// </summary>
		/// <param name="ReservedNodeOfferingId">The unique identifier of the reserved node offering you want to purchase.
		/// Max length: 2147483647
		// </param>
		/// <param name="NodeCount"><p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_PurchaseReservedNodeOfferingAsync(string ReservedNodeOfferingId, int NodeCount, GET_PurchaseReservedNodeOfferingAction Action, GET_PurchaseReservedNodeOfferingVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseReservedNodeOffering?ReservedNodeOfferingId=" + (ReservedNodeOfferingId==null? "" : System.Uri.EscapeDataString(ReservedNodeOfferingId))+"&NodeCount="+NodeCount+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_RebootCluster #Action=RebootCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster identifier.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_RebootClusterAsync(string ClusterIdentifier, GET_RebootClusterAction Action, GET_RebootClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RebootCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// From a datashare consumer account, rejects the specified datashare.
		/// GET_RejectDataShare #Action=RejectDataShare
		/// </summary>
		/// <param name="DataShareArn">The Amazon Resource Name (ARN) of the datashare to reject.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_RejectDataShareAsync(string DataShareArn, GET_RejectDataShareAction Action, GET_RejectDataShareVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectDataShare?DataShareArn=" + (DataShareArn==null? "" : System.Uri.EscapeDataString(DataShareArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters.
		/// GET_ResetClusterParameterGroup #Action=ResetClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName">The name of the cluster parameter group to be reset.
		/// Max length: 2147483647
		// </param>
		/// <param name="ResetAllParameters"><p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p></param>
		/// <param name="Parameters"><p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ResetClusterParameterGroupAsync(string ParameterGroupName, bool ResetAllParameters, string[] Parameters, GET_ResetClusterParameterGroupAction Action, GET_ResetClusterParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : System.Uri.EscapeDataString(ParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+string.Join("&", Parameters.Select(z => $"Parameters={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc1.large (if your cluster is in a VPC)</p> </li> <li> <p>dc1.8xlarge (if your cluster is in a VPC)</p> </li> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.xlplus</p> </li> <li> <p>ra3.4xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
		/// GET_ResizeCluster #Action=ResizeCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier for the cluster to resize.
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterType">The new cluster type for the specified cluster.
		/// Max length: 2147483647
		// </param>
		/// <param name="NodeType">The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
		/// Max length: 2147483647
		// </param>
		/// <param name="NumberOfNodes">The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.</param>
		/// <param name="Classic">A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. </param>
		/// <param name="ReservedNodeId">The identifier of the reserved node.
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetReservedNodeOfferingId">The identifier of the target reserved node offering.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ResizeClusterAsync(string ClusterIdentifier, string ClusterType, string NodeType, int NumberOfNodes, bool Classic, string ReservedNodeId, string TargetReservedNodeOfferingId, GET_ResizeClusterAction Action, GET_ResizeClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResizeCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&ClusterType=" + (ClusterType==null? "" : System.Uri.EscapeDataString(ClusterType))+"&NodeType=" + (NodeType==null? "" : System.Uri.EscapeDataString(NodeType))+"&NumberOfNodes="+NumberOfNodes+"&Classic="+Classic+"&ReservedNodeId=" + (ReservedNodeId==null? "" : System.Uri.EscapeDataString(ReservedNodeId))+"&TargetReservedNodeOfferingId=" + (TargetReservedNodeOfferingId==null? "" : System.Uri.EscapeDataString(TargetReservedNodeOfferingId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_RestoreFromClusterSnapshot #Action=RestoreFromClusterSnapshot
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotIdentifier"><p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You must specify this parameter or <code>snapshotArn</code>, but not both.</p> <p>Example: <code>my-snapshot-id</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotArn">The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You must specify this parameter or <code>snapshotIdentifier</code>, but not both.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotClusterIdentifier">The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
		/// Max length: 2147483647
		// </param>
		/// <param name="Port"><p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p></param>
		/// <param name="AvailabilityZone"><p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="AllowVersionUpgrade"><p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p></param>
		/// <param name="ClusterSubnetGroupName"><p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="PubliclyAccessible">If <code>true</code>, the cluster can be accessed from a public network. </param>
		/// <param name="OwnerAccount">The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmClientCertificateIdentifier">Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="HsmConfigurationIdentifier">Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
		/// Max length: 2147483647
		// </param>
		/// <param name="ElasticIp">The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterParameterGroupName"><p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
		/// Max length: 2147483647
		// </param>
		/// <param name="ClusterSecurityGroups"><p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p></param>
		/// <param name="VpcSecurityGroupIds"><p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
		/// Max length: 2147483647
		// </param>
		/// <param name="AutomatedSnapshotRetentionPeriod"><p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <param name="KmsKeyId">The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.
		/// Max length: 2147483647
		// </param>
		/// <param name="NodeType"><p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// Max length: 2147483647
		// </param>
		/// <param name="EnhancedVpcRouting"><p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p></param>
		/// <param name="AdditionalInfo">Reserved.
		/// Max length: 2147483647
		// </param>
		/// <param name="IamRoles"><p>A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. </p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p></param>
		/// <param name="MaintenanceTrackName">The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotScheduleIdentifier">A unique identifier for the snapshot schedule.
		/// Max length: 2147483647
		// </param>
		/// <param name="NumberOfNodes">The number of nodes specified when provisioning the restored cluster.</param>
		/// <param name="AvailabilityZoneRelocation">The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.</param>
		/// <param name="AquaConfigurationStatus">This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).</param>
		/// <param name="DefaultIamRoleArn">The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.
		/// Max length: 2147483647
		// </param>
		/// <param name="ReservedNodeId">The identifier of the target reserved node offering.
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetReservedNodeOfferingId">The identifier of the target reserved node offering.
		/// Max length: 2147483647
		// </param>
		/// <param name="Encrypted">Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreFromClusterSnapshotAsync(
					string ClusterIdentifier, 
					string SnapshotIdentifier, 
					string SnapshotArn, 
					string SnapshotClusterIdentifier, 
					int Port, 
					string AvailabilityZone, 
					bool AllowVersionUpgrade, 
					string ClusterSubnetGroupName, 
					bool PubliclyAccessible, 
					string OwnerAccount, 
					string HsmClientCertificateIdentifier, 
					string HsmConfigurationIdentifier, 
					string ElasticIp, 
					string ClusterParameterGroupName, 
					string[] ClusterSecurityGroups, 
					string[] VpcSecurityGroupIds, 
					string PreferredMaintenanceWindow, 
					int AutomatedSnapshotRetentionPeriod, 
					int ManualSnapshotRetentionPeriod, 
					string KmsKeyId, 
					string NodeType, 
					bool EnhancedVpcRouting, 
					string AdditionalInfo, 
					string[] IamRoles, 
					string MaintenanceTrackName, 
					string SnapshotScheduleIdentifier, 
					int NumberOfNodes, 
					bool AvailabilityZoneRelocation, 
					AquaConfigurationStatus AquaConfigurationStatus, 
					string DefaultIamRoleArn, 
					string ReservedNodeId, 
					string TargetReservedNodeOfferingId, 
					bool Encrypted, 
					GET_RestoreFromClusterSnapshotAction Action, 
					GET_RestoreFromClusterSnapshotVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RestoreFromClusterSnapshot?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotArn=" + (SnapshotArn==null? "" : System.Uri.EscapeDataString(SnapshotArn))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotClusterIdentifier))+"&Port="+Port+"&AvailabilityZone=" + (AvailabilityZone==null? "" : System.Uri.EscapeDataString(AvailabilityZone))+"&AllowVersionUpgrade="+AllowVersionUpgrade+"&ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : System.Uri.EscapeDataString(ClusterSubnetGroupName))+"&PubliclyAccessible="+PubliclyAccessible+"&OwnerAccount=" + (OwnerAccount==null? "" : System.Uri.EscapeDataString(OwnerAccount))+"&HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : System.Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : System.Uri.EscapeDataString(HsmConfigurationIdentifier))+"&ElasticIp=" + (ElasticIp==null? "" : System.Uri.EscapeDataString(ElasticIp))+"&ClusterParameterGroupName=" + (ClusterParameterGroupName==null? "" : System.Uri.EscapeDataString(ClusterParameterGroupName))+"&"+string.Join("&", ClusterSecurityGroups.Select(z => $"ClusterSecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&AutomatedSnapshotRetentionPeriod="+AutomatedSnapshotRetentionPeriod+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&NodeType=" + (NodeType==null? "" : System.Uri.EscapeDataString(NodeType))+"&EnhancedVpcRouting="+EnhancedVpcRouting+"&AdditionalInfo=" + (AdditionalInfo==null? "" : System.Uri.EscapeDataString(AdditionalInfo))+"&"+string.Join("&", IamRoles.Select(z => $"IamRoles={System.Uri.EscapeDataString(z.ToString())}"))+"&MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : System.Uri.EscapeDataString(MaintenanceTrackName))+"&SnapshotScheduleIdentifier=" + (SnapshotScheduleIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotScheduleIdentifier))+"&NumberOfNodes="+NumberOfNodes+"&AvailabilityZoneRelocation="+AvailabilityZoneRelocation+"&AquaConfigurationStatus=" + AquaConfigurationStatus+"&DefaultIamRoleArn=" + (DefaultIamRoleArn==null? "" : System.Uri.EscapeDataString(DefaultIamRoleArn))+"&ReservedNodeId=" + (ReservedNodeId==null? "" : System.Uri.EscapeDataString(ReservedNodeId))+"&TargetReservedNodeOfferingId=" + (TargetReservedNodeOfferingId==null? "" : System.Uri.EscapeDataString(TargetReservedNodeOfferingId))+"&Encrypted="+Encrypted+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p> <p>You can't use this operation to restore tables with <a href="https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved">interleaved sort keys</a>.</p>
		/// GET_RestoreTableFromClusterSnapshot #Action=RestoreTableFromClusterSnapshot
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the Amazon Redshift cluster to restore the table to.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceDatabaseName">The name of the source database that contains the table to restore from.
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceSchemaName">The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
		/// Max length: 2147483647
		// </param>
		/// <param name="SourceTableName">The name of the source table to restore from.
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetDatabaseName">The name of the database to restore the table to.
		/// Max length: 2147483647
		// </param>
		/// <param name="TargetSchemaName">The name of the schema to restore the table to.
		/// Max length: 2147483647
		// </param>
		/// <param name="NewTableName">The name of the table to create as a result of the current request.
		/// Max length: 2147483647
		// </param>
		/// <param name="EnableCaseSensitiveIdentifier">Indicates whether name identifiers for database, schema, and table are case sensitive. If <code>true</code>, the names are case sensitive. If <code>false</code> (default), the names are not case sensitive.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreTableFromClusterSnapshotAsync(string ClusterIdentifier, string SnapshotIdentifier, string SourceDatabaseName, string SourceSchemaName, string SourceTableName, string TargetDatabaseName, string TargetSchemaName, string NewTableName, bool EnableCaseSensitiveIdentifier, GET_RestoreTableFromClusterSnapshotAction Action, GET_RestoreTableFromClusterSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RestoreTableFromClusterSnapshot?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SourceDatabaseName=" + (SourceDatabaseName==null? "" : System.Uri.EscapeDataString(SourceDatabaseName))+"&SourceSchemaName=" + (SourceSchemaName==null? "" : System.Uri.EscapeDataString(SourceSchemaName))+"&SourceTableName=" + (SourceTableName==null? "" : System.Uri.EscapeDataString(SourceTableName))+"&TargetDatabaseName=" + (TargetDatabaseName==null? "" : System.Uri.EscapeDataString(TargetDatabaseName))+"&TargetSchemaName=" + (TargetSchemaName==null? "" : System.Uri.EscapeDataString(TargetSchemaName))+"&NewTableName=" + (NewTableName==null? "" : System.Uri.EscapeDataString(NewTableName))+"&EnableCaseSensitiveIdentifier="+EnableCaseSensitiveIdentifier+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resumes a paused cluster.
		/// GET_ResumeCluster #Action=ResumeCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster to be resumed.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ResumeClusterAsync(string ClusterIdentifier, GET_ResumeClusterAction Action, GET_ResumeClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResumeCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_RevokeClusterSecurityGroupIngress #Action=RevokeClusterSecurityGroupIngress
		/// </summary>
		/// <param name="ClusterSecurityGroupName">The name of the security Group from which to revoke the ingress rule.
		/// Max length: 2147483647
		// </param>
		/// <param name="CIDRIP">The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. 
		/// Max length: 2147483647
		// </param>
		/// <param name="EC2SecurityGroupName">The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. 
		/// Max length: 2147483647
		// </param>
		/// <param name="EC2SecurityGroupOwnerId"><p>The Amazon Web Services account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_RevokeClusterSecurityGroupIngressAsync(string ClusterSecurityGroupName, string CIDRIP, string EC2SecurityGroupName, string EC2SecurityGroupOwnerId, GET_RevokeClusterSecurityGroupIngressAction Action, GET_RevokeClusterSecurityGroupIngressVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeClusterSecurityGroupIngress?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : System.Uri.EscapeDataString(ClusterSecurityGroupName))+"&CIDRIP=" + (CIDRIP==null? "" : System.Uri.EscapeDataString(CIDRIP))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes access to a cluster.
		/// GET_RevokeEndpointAccess #Action=RevokeEndpointAccess
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster to revoke access from.
		/// Max length: 2147483647
		// </param>
		/// <param name="Account">The Amazon Web Services account ID whose access is to be revoked.
		/// Max length: 2147483647
		// </param>
		/// <param name="VpcIds">The virtual private cloud (VPC) identifiers for which access is to be revoked.</param>
		/// <param name="Force">Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_RevokeEndpointAccessAsync(string ClusterIdentifier, string Account, string[] VpcIds, bool Force, GET_RevokeEndpointAccessAction Action, GET_RevokeEndpointAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeEndpointAccess?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Account=" + (Account==null? "" : System.Uri.EscapeDataString(Account))+"&"+string.Join("&", VpcIds.Select(z => $"VpcIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Force="+Force+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the ability of the specified Amazon Web Services account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_RevokeSnapshotAccess #Action=RevokeSnapshotAccess
		/// </summary>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot that the account can no longer access.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotArn">The Amazon Resource Name (ARN) of the snapshot associated with the message to revoke access.
		/// Max length: 2147483647
		// </param>
		/// <param name="SnapshotClusterIdentifier">The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
		/// Max length: 2147483647
		// </param>
		/// <param name="AccountWithRestoreAccess">The identifier of the Amazon Web Services account that can no longer restore the specified snapshot.
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_RevokeSnapshotAccessAsync(string SnapshotIdentifier, string SnapshotArn, string SnapshotClusterIdentifier, string AccountWithRestoreAccess, GET_RevokeSnapshotAccessAction Action, GET_RevokeSnapshotAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeSnapshotAccess?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotArn=" + (SnapshotArn==null? "" : System.Uri.EscapeDataString(SnapshotArn))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : System.Uri.EscapeDataString(SnapshotClusterIdentifier))+"&AccountWithRestoreAccess=" + (AccountWithRestoreAccess==null? "" : System.Uri.EscapeDataString(AccountWithRestoreAccess))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotates the encryption keys for a cluster.
		/// GET_RotateEncryptionKey #Action=RotateEncryptionKey
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
		/// Max length: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task GET_RotateEncryptionKeyAsync(string ClusterIdentifier, GET_RotateEncryptionKeyAction Action, GET_RotateEncryptionKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RotateEncryptionKey?ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the status of a partner integration.
		/// GET_UpdatePartnerStatus #Action=UpdatePartnerStatus
		/// </summary>
		/// <param name="AccountId">The Amazon Web Services account ID that owns the cluster.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="ClusterIdentifier">The cluster identifier of the cluster whose partner integration status is being updated.
		/// Max length: 63
		// </param>
		/// <param name="DatabaseName">The name of the database whose partner integration status is being updated.
		/// Max length: 127
		// </param>
		/// <param name="PartnerName">The name of the partner whose integration status is being updated.
		/// Max length: 255
		// </param>
		/// <param name="Status">The value of the updated status.</param>
		/// <param name="StatusMessage">The status message provided by the partner.
		/// Max length: 262144
		// </param>
		/// <returns>Success</returns>
		public async Task GET_UpdatePartnerStatusAsync(string AccountId, string ClusterIdentifier, string DatabaseName, string PartnerName, PartnerIntegrationStatus Status, string StatusMessage, GET_UpdatePartnerStatusAction Action, GET_UpdatePartnerStatusVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdatePartnerStatus?AccountId=" + (AccountId==null? "" : System.Uri.EscapeDataString(AccountId))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : System.Uri.EscapeDataString(ClusterIdentifier))+"&DatabaseName=" + (DatabaseName==null? "" : System.Uri.EscapeDataString(DatabaseName))+"&PartnerName=" + (PartnerName==null? "" : System.Uri.EscapeDataString(PartnerName))+"&Status=" + Status+"&StatusMessage=" + (StatusMessage==null? "" : System.Uri.EscapeDataString(StatusMessage))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AcceptReservedNodeExchangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptReservedNodeExchange")]
		AcceptReservedNodeExchange = 0,
	}
	
	public enum GET_AcceptReservedNodeExchangeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AcceptReservedNodeExchangeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_AddPartnerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddPartner")]
		AddPartner = 0,
	}
	
	public enum GET_AddPartnerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AddPartnerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_AssociateDataShareConsumerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AssociateDataShareConsumer")]
		AssociateDataShareConsumer = 0,
	}
	
	public enum GET_AssociateDataShareConsumerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AssociateDataShareConsumerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_AuthorizeClusterSecurityGroupIngressAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthorizeClusterSecurityGroupIngress")]
		AuthorizeClusterSecurityGroupIngress = 0,
	}
	
	public enum GET_AuthorizeClusterSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AuthorizeClusterSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_AuthorizeDataShareAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthorizeDataShare")]
		AuthorizeDataShare = 0,
	}
	
	public enum GET_AuthorizeDataShareVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AuthorizeDataShareVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_AuthorizeEndpointAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthorizeEndpointAccess")]
		AuthorizeEndpointAccess = 0,
	}
	
	public enum GET_AuthorizeEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AuthorizeEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_AuthorizeSnapshotAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthorizeSnapshotAccess")]
		AuthorizeSnapshotAccess = 0,
	}
	
	public enum GET_AuthorizeSnapshotAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_AuthorizeSnapshotAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_BatchDeleteClusterSnapshotsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BatchDeleteClusterSnapshots")]
		BatchDeleteClusterSnapshots = 0,
	}
	
	public enum GET_BatchDeleteClusterSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_BatchDeleteClusterSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_BatchModifyClusterSnapshotsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BatchModifyClusterSnapshots")]
		BatchModifyClusterSnapshots = 0,
	}
	
	public enum GET_BatchModifyClusterSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_BatchModifyClusterSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CancelResizeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CancelResize")]
		CancelResize = 0,
	}
	
	public enum GET_CancelResizeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CancelResizeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CopyClusterSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CopyClusterSnapshot")]
		CopyClusterSnapshot = 0,
	}
	
	public enum GET_CopyClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CopyClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateAuthenticationProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateAuthenticationProfile")]
		CreateAuthenticationProfile = 0,
	}
	
	public enum GET_CreateAuthenticationProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateAuthenticationProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCluster")]
		CreateCluster = 0,
	}
	
	public enum GET_CreateClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateClusterParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateClusterParameterGroup")]
		CreateClusterParameterGroup = 0,
	}
	
	public enum GET_CreateClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateClusterSecurityGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateClusterSecurityGroup")]
		CreateClusterSecurityGroup = 0,
	}
	
	public enum GET_CreateClusterSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateClusterSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateClusterSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateClusterSnapshot")]
		CreateClusterSnapshot = 0,
	}
	
	public enum GET_CreateClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateClusterSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateClusterSubnetGroup")]
		CreateClusterSubnetGroup = 0,
	}
	
	public enum GET_CreateClusterSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateClusterSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateCustomDomainAssociationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCustomDomainAssociation")]
		CreateCustomDomainAssociation = 0,
	}
	
	public enum GET_CreateCustomDomainAssociationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateCustomDomainAssociationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateEndpointAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateEndpointAccess")]
		CreateEndpointAccess = 0,
	}
	
	public enum GET_CreateEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateEventSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateEventSubscription")]
		CreateEventSubscription = 0,
	}
	
	public enum GET_CreateEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateHsmClientCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateHsmClientCertificate")]
		CreateHsmClientCertificate = 0,
	}
	
	public enum GET_CreateHsmClientCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateHsmClientCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateHsmConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateHsmConfiguration")]
		CreateHsmConfiguration = 0,
	}
	
	public enum GET_CreateHsmConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateHsmConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public class GET_CreateScheduledActionTargetAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResizeClusterMessage ResizeCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PauseClusterMessage PauseCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResumeClusterMessage ResumeCluster { get; set; }
	}
	
	public enum GET_CreateScheduledActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateScheduledAction")]
		CreateScheduledAction = 0,
	}
	
	public enum GET_CreateScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateSnapshotCopyGrantAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateSnapshotCopyGrant")]
		CreateSnapshotCopyGrant = 0,
	}
	
	public enum GET_CreateSnapshotCopyGrantVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateSnapshotCopyGrantVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateSnapshotScheduleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateSnapshotSchedule")]
		CreateSnapshotSchedule = 0,
	}
	
	public enum GET_CreateSnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateSnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateTags")]
		CreateTags = 0,
	}
	
	public enum GET_CreateTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_CreateUsageLimitFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spectrum")]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="concurrency-scaling")]
		concurrencyMinusscaling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-region-datasharing")]
		crossMinusregionMinusdatasharing = 2,
	}
	
	public enum GET_CreateUsageLimitLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time")]
		time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="data-scanned")]
		dataMinusscanned = 1,
	}
	
	public enum GET_CreateUsageLimitBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="log")]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="emit-metric")]
		emitMinusmetric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disable")]
		disable = 2,
	}
	
	public enum GET_CreateUsageLimitAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateUsageLimit")]
		CreateUsageLimit = 0,
	}
	
	public enum GET_CreateUsageLimitVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_CreateUsageLimitVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeauthorizeDataShareAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeauthorizeDataShare")]
		DeauthorizeDataShare = 0,
	}
	
	public enum GET_DeauthorizeDataShareVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeauthorizeDataShareVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteAuthenticationProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteAuthenticationProfile")]
		DeleteAuthenticationProfile = 0,
	}
	
	public enum GET_DeleteAuthenticationProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteAuthenticationProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCluster")]
		DeleteCluster = 0,
	}
	
	public enum GET_DeleteClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteClusterParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteClusterParameterGroup")]
		DeleteClusterParameterGroup = 0,
	}
	
	public enum GET_DeleteClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteClusterSecurityGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteClusterSecurityGroup")]
		DeleteClusterSecurityGroup = 0,
	}
	
	public enum GET_DeleteClusterSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteClusterSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteClusterSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteClusterSnapshot")]
		DeleteClusterSnapshot = 0,
	}
	
	public enum GET_DeleteClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteClusterSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteClusterSubnetGroup")]
		DeleteClusterSubnetGroup = 0,
	}
	
	public enum GET_DeleteClusterSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteClusterSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteCustomDomainAssociationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCustomDomainAssociation")]
		DeleteCustomDomainAssociation = 0,
	}
	
	public enum GET_DeleteCustomDomainAssociationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteCustomDomainAssociationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteEndpointAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteEndpointAccess")]
		DeleteEndpointAccess = 0,
	}
	
	public enum GET_DeleteEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteEventSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteEventSubscription")]
		DeleteEventSubscription = 0,
	}
	
	public enum GET_DeleteEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteHsmClientCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteHsmClientCertificate")]
		DeleteHsmClientCertificate = 0,
	}
	
	public enum GET_DeleteHsmClientCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteHsmClientCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteHsmConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteHsmConfiguration")]
		DeleteHsmConfiguration = 0,
	}
	
	public enum GET_DeleteHsmConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteHsmConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeletePartnerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeletePartner")]
		DeletePartner = 0,
	}
	
	public enum GET_DeletePartnerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeletePartnerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteScheduledActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteScheduledAction")]
		DeleteScheduledAction = 0,
	}
	
	public enum GET_DeleteScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteSnapshotCopyGrantAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteSnapshotCopyGrant")]
		DeleteSnapshotCopyGrant = 0,
	}
	
	public enum GET_DeleteSnapshotCopyGrantVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteSnapshotCopyGrantVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteSnapshotScheduleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteSnapshotSchedule")]
		DeleteSnapshotSchedule = 0,
	}
	
	public enum GET_DeleteSnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteSnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteTags")]
		DeleteTags = 0,
	}
	
	public enum GET_DeleteTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteUsageLimitAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteUsageLimit")]
		DeleteUsageLimit = 0,
	}
	
	public enum GET_DeleteUsageLimitVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteUsageLimitVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeAccountAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeAccountAttributes")]
		DescribeAccountAttributes = 0,
	}
	
	public enum GET_DescribeAccountAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeAccountAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeAuthenticationProfilesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeAuthenticationProfiles")]
		DescribeAuthenticationProfiles = 0,
	}
	
	public enum GET_DescribeAuthenticationProfilesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeAuthenticationProfilesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterDbRevisionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterDbRevisions")]
		DescribeClusterDbRevisions = 0,
	}
	
	public enum GET_DescribeClusterDbRevisionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterDbRevisionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterParameterGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterParameterGroups")]
		DescribeClusterParameterGroups = 0,
	}
	
	public enum GET_DescribeClusterParameterGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterParameterGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterParametersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterParameters")]
		DescribeClusterParameters = 0,
	}
	
	public enum GET_DescribeClusterParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterSecurityGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterSecurityGroups")]
		DescribeClusterSecurityGroups = 0,
	}
	
	public enum GET_DescribeClusterSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterSnapshotsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterSnapshots")]
		DescribeClusterSnapshots = 0,
	}
	
	public enum GET_DescribeClusterSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterSubnetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterSubnetGroups")]
		DescribeClusterSubnetGroups = 0,
	}
	
	public enum GET_DescribeClusterSubnetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterSubnetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterTracksAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterTracks")]
		DescribeClusterTracks = 0,
	}
	
	public enum GET_DescribeClusterTracksVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterTracksVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClusterVersionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusterVersions")]
		DescribeClusterVersions = 0,
	}
	
	public enum GET_DescribeClusterVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClusterVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeClustersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeClusters")]
		DescribeClusters = 0,
	}
	
	public enum GET_DescribeClustersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeClustersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeCustomDomainAssociationsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCustomDomainAssociations")]
		DescribeCustomDomainAssociations = 0,
	}
	
	public enum GET_DescribeCustomDomainAssociationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeCustomDomainAssociationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeDataSharesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDataShares")]
		DescribeDataShares = 0,
	}
	
	public enum GET_DescribeDataSharesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeDataSharesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeDataSharesForConsumerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDataSharesForConsumer")]
		DescribeDataSharesForConsumer = 0,
	}
	
	public enum GET_DescribeDataSharesForConsumerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeDataSharesForConsumerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeDataSharesForProducerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDataSharesForProducer")]
		DescribeDataSharesForProducer = 0,
	}
	
	public enum GET_DescribeDataSharesForProducerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeDataSharesForProducerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeDefaultClusterParametersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeDefaultClusterParameters")]
		DescribeDefaultClusterParameters = 0,
	}
	
	public enum GET_DescribeDefaultClusterParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeDefaultClusterParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeEndpointAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEndpointAccess")]
		DescribeEndpointAccess = 0,
	}
	
	public enum GET_DescribeEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeEndpointAuthorizationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEndpointAuthorization")]
		DescribeEndpointAuthorization = 0,
	}
	
	public enum GET_DescribeEndpointAuthorizationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeEndpointAuthorizationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeEventCategoriesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEventCategories")]
		DescribeEventCategories = 0,
	}
	
	public enum GET_DescribeEventCategoriesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeEventCategoriesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeEventSubscriptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEventSubscriptions")]
		DescribeEventSubscriptions = 0,
	}
	
	public enum GET_DescribeEventSubscriptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeEventSubscriptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeEventsSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster")]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-parameter-group")]
		clusterMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-security-group")]
		clusterMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cluster-snapshot")]
		clusterMinussnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled-action")]
		scheduledMinusaction = 4,
	}
	
	public enum GET_DescribeEventsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEvents")]
		DescribeEvents = 0,
	}
	
	public enum GET_DescribeEventsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeEventsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeHsmClientCertificatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeHsmClientCertificates")]
		DescribeHsmClientCertificates = 0,
	}
	
	public enum GET_DescribeHsmClientCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeHsmClientCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeHsmConfigurationsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeHsmConfigurations")]
		DescribeHsmConfigurations = 0,
	}
	
	public enum GET_DescribeHsmConfigurationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeHsmConfigurationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeLoggingStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeLoggingStatus")]
		DescribeLoggingStatus = 0,
	}
	
	public enum GET_DescribeLoggingStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeLoggingStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeNodeConfigurationOptionsActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="restore-cluster")]
		restoreMinuscluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recommend-node-config")]
		recommendMinusnodeMinusconfig = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resize-cluster")]
		resizeMinuscluster = 2,
	}
	
	public enum GET_DescribeNodeConfigurationOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeNodeConfigurationOptions")]
		DescribeNodeConfigurationOptions = 0,
	}
	
	public enum GET_DescribeNodeConfigurationOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeNodeConfigurationOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeOrderableClusterOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeOrderableClusterOptions")]
		DescribeOrderableClusterOptions = 0,
	}
	
	public enum GET_DescribeOrderableClusterOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeOrderableClusterOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribePartnersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribePartners")]
		DescribePartners = 0,
	}
	
	public enum GET_DescribePartnersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribePartnersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeReservedNodeExchangeStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedNodeExchangeStatus")]
		DescribeReservedNodeExchangeStatus = 0,
	}
	
	public enum GET_DescribeReservedNodeExchangeStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeReservedNodeExchangeStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeReservedNodeOfferingsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedNodeOfferings")]
		DescribeReservedNodeOfferings = 0,
	}
	
	public enum GET_DescribeReservedNodeOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeReservedNodeOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeReservedNodesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedNodes")]
		DescribeReservedNodes = 0,
	}
	
	public enum GET_DescribeReservedNodesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeReservedNodesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeResizeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeResize")]
		DescribeResize = 0,
	}
	
	public enum GET_DescribeResizeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeResizeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeScheduledActionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeScheduledActions")]
		DescribeScheduledActions = 0,
	}
	
	public enum GET_DescribeScheduledActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeScheduledActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeSnapshotCopyGrantsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeSnapshotCopyGrants")]
		DescribeSnapshotCopyGrants = 0,
	}
	
	public enum GET_DescribeSnapshotCopyGrantsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeSnapshotCopyGrantsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeSnapshotSchedulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeSnapshotSchedules")]
		DescribeSnapshotSchedules = 0,
	}
	
	public enum GET_DescribeSnapshotSchedulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeSnapshotSchedulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeStorageAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeStorage")]
		DescribeStorage = 0,
	}
	
	public enum GET_DescribeStorageVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeStorageVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeTableRestoreStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeTableRestoreStatus")]
		DescribeTableRestoreStatus = 0,
	}
	
	public enum GET_DescribeTableRestoreStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeTableRestoreStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeTags")]
		DescribeTags = 0,
	}
	
	public enum GET_DescribeTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeUsageLimitsFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spectrum")]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="concurrency-scaling")]
		concurrencyMinusscaling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-region-datasharing")]
		crossMinusregionMinusdatasharing = 2,
	}
	
	public enum GET_DescribeUsageLimitsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeUsageLimits")]
		DescribeUsageLimits = 0,
	}
	
	public enum GET_DescribeUsageLimitsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeUsageLimitsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DisableLoggingAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisableLogging")]
		DisableLogging = 0,
	}
	
	public enum GET_DisableLoggingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DisableLoggingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DisableSnapshotCopyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisableSnapshotCopy")]
		DisableSnapshotCopy = 0,
	}
	
	public enum GET_DisableSnapshotCopyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DisableSnapshotCopyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_DisassociateDataShareConsumerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisassociateDataShareConsumer")]
		DisassociateDataShareConsumer = 0,
	}
	
	public enum GET_DisassociateDataShareConsumerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_DisassociateDataShareConsumerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_EnableLoggingAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EnableLogging")]
		EnableLogging = 0,
	}
	
	public enum GET_EnableLoggingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_EnableLoggingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_EnableSnapshotCopyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EnableSnapshotCopy")]
		EnableSnapshotCopy = 0,
	}
	
	public enum GET_EnableSnapshotCopyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_EnableSnapshotCopyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_GetClusterCredentialsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetClusterCredentials")]
		GetClusterCredentials = 0,
	}
	
	public enum GET_GetClusterCredentialsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_GetClusterCredentialsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_GetClusterCredentialsWithIAMAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetClusterCredentialsWithIAM")]
		GetClusterCredentialsWithIAM = 0,
	}
	
	public enum GET_GetClusterCredentialsWithIAMVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_GetClusterCredentialsWithIAMVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_GetReservedNodeExchangeConfigurationOptionsActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="restore-cluster")]
		restoreMinuscluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resize-cluster")]
		resizeMinuscluster = 1,
	}
	
	public enum GET_GetReservedNodeExchangeConfigurationOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetReservedNodeExchangeConfigurationOptions")]
		GetReservedNodeExchangeConfigurationOptions = 0,
	}
	
	public enum GET_GetReservedNodeExchangeConfigurationOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_GetReservedNodeExchangeConfigurationOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_GetReservedNodeExchangeOfferingsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetReservedNodeExchangeOfferings")]
		GetReservedNodeExchangeOfferings = 0,
	}
	
	public enum GET_GetReservedNodeExchangeOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_GetReservedNodeExchangeOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyAquaConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyAquaConfiguration")]
		ModifyAquaConfiguration = 0,
	}
	
	public enum GET_ModifyAquaConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyAquaConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyAuthenticationProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyAuthenticationProfile")]
		ModifyAuthenticationProfile = 0,
	}
	
	public enum GET_ModifyAuthenticationProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyAuthenticationProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyCluster")]
		ModifyCluster = 0,
	}
	
	public enum GET_ModifyClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterDbRevisionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterDbRevision")]
		ModifyClusterDbRevision = 0,
	}
	
	public enum GET_ModifyClusterDbRevisionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterDbRevisionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterIamRolesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterIamRoles")]
		ModifyClusterIamRoles = 0,
	}
	
	public enum GET_ModifyClusterIamRolesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterIamRolesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterMaintenanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterMaintenance")]
		ModifyClusterMaintenance = 0,
	}
	
	public enum GET_ModifyClusterMaintenanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterMaintenanceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterParameterGroup")]
		ModifyClusterParameterGroup = 0,
	}
	
	public enum GET_ModifyClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterSnapshot")]
		ModifyClusterSnapshot = 0,
	}
	
	public enum GET_ModifyClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterSnapshotScheduleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterSnapshotSchedule")]
		ModifyClusterSnapshotSchedule = 0,
	}
	
	public enum GET_ModifyClusterSnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterSnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyClusterSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyClusterSubnetGroup")]
		ModifyClusterSubnetGroup = 0,
	}
	
	public enum GET_ModifyClusterSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyClusterSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyCustomDomainAssociationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyCustomDomainAssociation")]
		ModifyCustomDomainAssociation = 0,
	}
	
	public enum GET_ModifyCustomDomainAssociationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyCustomDomainAssociationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyEndpointAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyEndpointAccess")]
		ModifyEndpointAccess = 0,
	}
	
	public enum GET_ModifyEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyEventSubscriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyEventSubscription")]
		ModifyEventSubscription = 0,
	}
	
	public enum GET_ModifyEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyEventSubscriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public class GET_ModifyScheduledActionTargetAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResizeClusterMessage ResizeCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PauseClusterMessage PauseCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResumeClusterMessage ResumeCluster { get; set; }
	}
	
	public enum GET_ModifyScheduledActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyScheduledAction")]
		ModifyScheduledAction = 0,
	}
	
	public enum GET_ModifyScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifySnapshotCopyRetentionPeriodAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifySnapshotCopyRetentionPeriod")]
		ModifySnapshotCopyRetentionPeriod = 0,
	}
	
	public enum GET_ModifySnapshotCopyRetentionPeriodVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifySnapshotCopyRetentionPeriodVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifySnapshotScheduleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifySnapshotSchedule")]
		ModifySnapshotSchedule = 0,
	}
	
	public enum GET_ModifySnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifySnapshotScheduleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyUsageLimitBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="log")]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="emit-metric")]
		emitMinusmetric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disable")]
		disable = 2,
	}
	
	public enum GET_ModifyUsageLimitAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyUsageLimit")]
		ModifyUsageLimit = 0,
	}
	
	public enum GET_ModifyUsageLimitVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyUsageLimitVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_PauseClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PauseCluster")]
		PauseCluster = 0,
	}
	
	public enum GET_PauseClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_PauseClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_PurchaseReservedNodeOfferingAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PurchaseReservedNodeOffering")]
		PurchaseReservedNodeOffering = 0,
	}
	
	public enum GET_PurchaseReservedNodeOfferingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_PurchaseReservedNodeOfferingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RebootClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RebootCluster")]
		RebootCluster = 0,
	}
	
	public enum GET_RebootClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RebootClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RejectDataShareAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RejectDataShare")]
		RejectDataShare = 0,
	}
	
	public enum GET_RejectDataShareVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RejectDataShareVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ResetClusterParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResetClusterParameterGroup")]
		ResetClusterParameterGroup = 0,
	}
	
	public enum GET_ResetClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ResetClusterParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ResizeClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResizeCluster")]
		ResizeCluster = 0,
	}
	
	public enum GET_ResizeClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ResizeClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RestoreFromClusterSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RestoreFromClusterSnapshot")]
		RestoreFromClusterSnapshot = 0,
	}
	
	public enum GET_RestoreFromClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RestoreFromClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RestoreTableFromClusterSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RestoreTableFromClusterSnapshot")]
		RestoreTableFromClusterSnapshot = 0,
	}
	
	public enum GET_RestoreTableFromClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RestoreTableFromClusterSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_ResumeClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResumeCluster")]
		ResumeCluster = 0,
	}
	
	public enum GET_ResumeClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_ResumeClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RevokeClusterSecurityGroupIngressAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RevokeClusterSecurityGroupIngress")]
		RevokeClusterSecurityGroupIngress = 0,
	}
	
	public enum GET_RevokeClusterSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RevokeClusterSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RevokeEndpointAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RevokeEndpointAccess")]
		RevokeEndpointAccess = 0,
	}
	
	public enum GET_RevokeEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RevokeEndpointAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RevokeSnapshotAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RevokeSnapshotAccess")]
		RevokeSnapshotAccess = 0,
	}
	
	public enum GET_RevokeSnapshotAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RevokeSnapshotAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_RotateEncryptionKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RotateEncryptionKey")]
		RotateEncryptionKey = 0,
	}
	
	public enum GET_RotateEncryptionKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_RotateEncryptionKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum GET_UpdatePartnerStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdatePartnerStatus")]
		UpdatePartnerStatus = 0,
	}
	
	public enum GET_UpdatePartnerStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
	
	public enum POST_UpdatePartnerStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012-12-01")]
		_2012Minus12Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
