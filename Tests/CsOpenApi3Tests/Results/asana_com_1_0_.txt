//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddCustomFieldSettingRequest
	{
		
		/// <summary>
		/// The custom field to associate with this container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public string Custom_field { get; set; }
		
		/// <summary>
		/// A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_important")]
		public System.Nullable<System.Boolean> Is_important { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFollowersRequest
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string Followers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddMembersRequest
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsanaNamedResource : AsanaResource
	{
		
		/// <summary>
		/// The name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A generic Asana Resource, containing a globally unique identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsanaResource
	{
		
		/// <summary>
		/// Globally unique identifier of the resource, as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// The base type of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public string Resource_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentBase : AsanaResource
	{
		
		/// <summary>
		/// The name of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentRequest
	{
		
		/// <summary>
		/// *Optional*. Only relevant for external attachments with a parent task. A boolean indicating whether the current app should be connected with the attachment for the purposes of showing an app components widget. Requires the app to have been added to a project the parent task is in.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connect_to_app")]
		public System.Nullable<System.Boolean> Connect_to_app { get; set; }
		
		/// <summary>
		/// Required for `asana` attachments.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// The name of the external resource being attached. Required for attachments of type `external`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required identifier of the parent task, project, or project_brief, as a string.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public System.Nullable<AttachmentRequestResource_subtype> Resource_subtype { get; set; }
		
		/// <summary>
		/// The URL of the external resource being attached. Required for attachments of type `external`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AttachmentRequestResource_subtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asana = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dropbox = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gdrive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onedrive = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		box = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vimeo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentResponse : AttachmentCompact
	{
		
		/// <summary>
		/// Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the `resource_subtype` is `external` or `gdrive`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connected_to_app")]
		public System.Nullable<System.Boolean> Connected_to_app { get; set; }
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The URL containing the content of the attachment.
		///*Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		/// <summary>
		/// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public TaskCompact Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permanent_url")]
		public string Permanent_url { get; set; }
		
		/// <summary>
		/// The size of the attachment in bytes. Only present when the `resource_subtype` is `asana`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view_url")]
		public string View_url { get; set; }
	}
	
	/// <summary>
	/// An object representing a single event within an Asana domain.
	///
	///Every audit log event is comprised of an `event_type`, `actor`, `resource`, and `context`. Some events will include additional metadata about the event under `details`. See our [currently supported list of events](/docs/supported-auditlogevents) for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public AuditLogEventActor Actor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public AuditLogEventContext Context { get; set; }
		
		/// <summary>
		/// The time the event was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public AuditLogEventDetails Details { get; set; }
		
		/// <summary>
		/// The category that this `event_type` belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_category")]
		public string Event_category { get; set; }
		
		/// <summary>
		/// The type of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		/// <summary>
		/// Globally unique identifier of the `AuditLogEvent`, as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public AuditLogEventResource Resource { get; set; }
	}
	
	/// <summary>
	/// The entity that triggered the event. Will typically be a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogEventActor
	{
		
		/// <summary>
		/// The type of actor.
		///Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor_type")]
		public System.Nullable<AuditLogEventActorActor_type> Actor_type { get; set; }
		
		/// <summary>
		/// The email of the actor, if it is a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Globally unique identifier of the actor, if it is a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// The name of the actor, if it is a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuditLogEventActorActor_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asana = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asana_support = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anonymous = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external_administrator = 4,
	}
	
	/// <summary>
	/// The context from which this event originated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogEventContext
	{
		
		/// <summary>
		/// The authentication method used in the context of an API request.
		///Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_authentication_method")]
		public System.Nullable<AuditLogEventContextApi_authentication_method> Api_authentication_method { get; set; }
		
		/// <summary>
		/// The IP address of the client that initiated the event, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_ip_address")]
		public string Client_ip_address { get; set; }
		
		/// <summary>
		/// The type of context.
		///Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context_type")]
		public System.Nullable<AuditLogEventContextContext_type> Context_type { get; set; }
		
		/// <summary>
		/// The name of the OAuth App that initiated the event.
		///Only present if the `api_authentication_method` is `oauth`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_app_name")]
		public string Oauth_app_name { get; set; }
		
		/// <summary>
		/// The user agent of the client that initiated the event, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_agent")]
		public string User_agent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuditLogEventContextApi_authentication_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cookie = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oauth = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personal_access_token = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		service_account = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuditLogEventContextContext_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desktop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asana_support = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asana = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		api = 6,
	}
	
	/// <summary>
	/// Event specific details. The schema will vary depending on the `event_type`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogEventDetails
	{
	}
	
	/// <summary>
	/// The primary object that was affected by this event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogEventResource
	{
		
		/// <summary>
		/// The email of the resource, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Globally unique identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The subtype of resource. Most resources will not have a subtype.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The type of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public string Resource_type { get; set; }
	}
	
	/// <summary>
	/// A request object for use in a batch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public BatchRequestAction[] Actions { get; set; }
	}
	
	/// <summary>
	/// An action object for use in a batch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRequestAction
	{
		
		/// <summary>
		/// For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The HTTP method you wish to emulate for the action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public BatchRequestActionMethod Method { get; set; }
		
		/// <summary>
		/// Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public BatchRequestActionOptions Options { get; set; }
		
		/// <summary>
		/// The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relative_path")]
		public string Relative_path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchRequestActionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		get = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		post = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		put = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patch = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		head = 5,
	}
	
	public class BatchRequestActionOptions
	{
		
		/// <summary>
		/// The fields to retrieve in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		/// <summary>
		/// Pagination limit for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Pagination offset for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
	}
	
	/// <summary>
	/// A response object returned from a batch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchResponse
	{
		
		/// <summary>
		/// The JSON body that the invoked endpoint returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string Headers { get; set; }
		
		/// <summary>
		/// The HTTP status code that the invoked endpoint returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Int32> Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldBase : CustomFieldCompact
	{
		
		/// <summary>
		/// *Conditional*. A unique identifier to associate this field with the template source of truth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asana_created_field")]
		public System.Nullable<CustomFieldBaseAsana_created_field> Asana_created_field { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_label")]
		public string Custom_label { get; set; }
		
		/// <summary>
		/// Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_label_position")]
		public System.Nullable<CustomFieldBaseCustom_label_position> Custom_label_position { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The description of the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enum_options")]
		public EnumOption[] Enum_options { get; set; }
		
		/// <summary>
		/// The format of this custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<CustomFieldBaseFormat> Format { get; set; }
		
		/// <summary>
		/// *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_notifications_enabled")]
		public System.Nullable<System.Boolean> Has_notifications_enabled { get; set; }
		
		/// <summary>
		/// This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_global_to_workspace")]
		public System.Nullable<System.Boolean> Is_global_to_workspace { get; set; }
		
		/// <summary>
		/// Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
		///For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
		///The identifier format will always have a precision of 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomFieldBaseAsana_created_field
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a_v_requirements = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		account_name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		actionable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		align_shipping_link = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		align_status = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allotted_time = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appointment = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approval_stage = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approved = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		article_series = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		board_committee = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		browser = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		campaign_audience = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		campaign_project_status = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		campaign_regions = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channel_primary = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		client_topic_type = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		complete_by = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contact = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contact_email_address = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content_channels = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content_channels_needed = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content_stage = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		content_type = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contract = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contract_status = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cost = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creation_stage = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creative_channel = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creative_needed = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creative_needs = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		data_sensitivity = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deal_size = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivery_appt = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivery_appt_date = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		department = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		department_responsible = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		design_request_needed = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		design_request_type = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		discussion_category = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		do_this_task = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editorial_content_status = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editorial_content_tag = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editorial_content_type = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		effort = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		effort_level = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		est_completion_date = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		estimated_time = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		estimated_value = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expected_cost = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external_steps_needed = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		favorite_idea = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		feedback_type = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		financial = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		funding_amount = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		grant_application_process = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hiring_candidate_status = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idea_status = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ids_link = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ids_patient_link = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		implementation_stage = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insurance = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		interview_area = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		interview_question_score = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		itero_scan_link = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		job_s_applied_to = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lab = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launch_status = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lead_status = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		localization_language = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		localization_market_team = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		localization_status = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		meeting_minutes = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		meeting_needed = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minutes = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mrr = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		must_localize = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name_of_foundation = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		need_to_follow_up = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		next_appointment = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		next_steps_sales = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		num_people = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number_of_user_reports = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		office_location = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onboarding_activity = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		participants_needed = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient_date_of_birth = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient_email = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient_phone = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient_status = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phone_number = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		planning_category = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		point_of_contact = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		position = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		post_format = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prescription = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		priority = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		priority_level = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product_stage = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		progress = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project_size = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project_status = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		proposed_budget = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publish_status = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reason_for_scan = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		referral = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		request_type = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		research_status = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		responsible_department = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		responsible_team = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		risk_assessment_status = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		room_name = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sales_counterpart = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sentiment = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shipping_link = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		social_channels = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stage = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status_design = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status_of_initiative = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system_setup = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_progress = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		team = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		team_marketing = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		team_responsible = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		time_it_takes_to_complete_tasks = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeframe = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		treatment_type = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		type_work_requests_it = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		use_agency = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user_name = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vendor_category = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vendor_type = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		word_count = 135,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomFieldBaseCustom_label_position
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prefix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suffix = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnumOption : AsanaResource
	{
		
		/// <summary>
		/// The color of the enum option. Defaults to ‘none’.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Whether or not the enum option is a selectable value for the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The name of the enum option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomFieldBaseFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currency = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		identifier = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percentage = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldCompact : AsanaResource
	{
		
		/// <summary>
		/// *Conditional*. Only relevant for custom fields of type `date`. This object reflects the chosen date (and optionally, time) value of a `date` custom field. If no date is selected, the value of `date_value` will be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_value")]
		public CustomFieldCompactDate_value Date_value { get; set; }
		
		/// <summary>
		/// A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_value")]
		public string Display_value { get; set; }
		
		/// <summary>
		/// *Conditional*. Determines if the custom field is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enum_options")]
		public EnumOption[] Enum_options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enum_value")]
		public EnumOption Enum_value { get; set; }
		
		/// <summary>
		/// *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multi_enum_values")]
		public EnumOption[] Multi_enum_values { get; set; }
		
		/// <summary>
		/// The name of the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// *Conditional*. This number is the value of a `number` custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number_value")]
		public System.Nullable<System.Double> Number_value { get; set; }
		
		/// <summary>
		/// The type of the custom field. Must be one of the given values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public System.Nullable<CustomFieldCompactResource_subtype> Resource_subtype { get; set; }
		
		/// <summary>
		/// *Conditional*. This string is the value of a `text` custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text_value")]
		public string Text_value { get; set; }
		
		/// <summary>
		/// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomFieldCompactType> Type { get; set; }
	}
	
	public class CustomFieldCompactDate_value
	{
		
		/// <summary>
		/// A string representing the date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// A string representing the date in ISO 8601 format. If no time value is selected, the value of `date-time` will be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_time")]
		public string Date_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomFieldCompactResource_subtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enum")]
		_enum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multi_enum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		people = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomFieldCompactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enum")]
		_enum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multi_enum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldRequest : CustomFieldBase
	{
		
		/// <summary>
		/// *Conditional*. Only relevant for custom fields of type `people`. This array of user GIDs reflects the users to be written to a `people` custom field. Note that *write* operations will replace existing users (if any) in the custom field with the users specified in this array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_value")]
		public string[] People_value { get; set; }
		
		/// <summary>
		/// *Create-Only* The workspace to create a custom field in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldResponse : CustomFieldBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public UserCompact Created_by { get; set; }
		
		/// <summary>
		/// *Conditional*. Only relevant for custom fields of type `people`. This array of [compact user](/docs/user-compact) objects reflects the values of a `people` custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_value")]
		public UserCompact[] People_value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCompact : AsanaResource
	{
		
		/// <summary>
		/// *Read-only except when same user as requester*. The user’s name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSettingBase : AsanaResource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSettingCompact : AsanaResource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSettingResponse : CustomFieldSettingCompact
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public CustomFieldResponse Custom_field { get; set; }
		
		/// <summary>
		/// `is_important` is used in the Asana web application to determine if this custom field is displayed in the list/grid view of a project or portfolio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_important")]
		public System.Nullable<System.Boolean> Is_important { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ProjectCompact Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectCompact Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateVariableCompact
	{
		
		/// <summary>
		/// The description of what the date variable is used for when instantiating a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Globally unique identifier of the date field in the project template. A value of `1` refers to the project start date, while `2` refers to the project due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// The name of the date variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateVariableRequest
	{
		
		/// <summary>
		/// Globally unique identifier of the date field in the project template. A value of `1` refers to the project start date, while `2` refers to the project due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		/// <summary>
		/// The date with which the date variable should be replaced when instantiating a project. This takes a date with `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.DateTimeOffset> Value { get; set; }
	}
	
	/// <summary>
	/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmptyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnumOptionBase : AsanaResource
	{
		
		/// <summary>
		/// The color of the enum option. Defaults to ‘none’.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Whether or not the enum option is a selectable value for the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The name of the enum option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnumOptionInsertRequest
	{
		
		/// <summary>
		/// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after_enum_option")]
		public string After_enum_option { get; set; }
		
		/// <summary>
		/// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before_enum_option")]
		public string Before_enum_option { get; set; }
		
		/// <summary>
		/// The gid of the enum option to relocate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enum_option")]
		public string Enum_option { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnumOptionRequest : EnumOption
	{
		
		/// <summary>
		/// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Additional information directing developers to resources on how to address and fix the problem, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="help")]
		public string Help { get; set; }
		
		/// <summary>
		/// Message providing more detail about the error that occurred, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// *500 errors only*. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana’s logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
	}
	
	/// <summary>
	/// Sadly, sometimes requests to the API are not successful. Failures can
	///occur for a wide range of reasons. In all cases, the API should return
	///an HTTP Status Code that indicates the nature of the failure,
	///with a response body in JSON format containing additional information.
	///
	///
	///In the event of a server error the response body will contain an error
	///phrase. These phrases are automatically generated using the
	///[node-asana-phrase
	///library](https://github.com/Asana/node-asana-phrase) and can be used by
	///Asana support to quickly look up the incident that caused the server
	///error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// An *event* is an object representing a change to a resource that was
	///observed by an event subscription or delivered asynchronously to
	///the target location of an active webhook.
	///
	///The event may be triggered by a different `user` than the
	///subscriber. For example, if user A subscribes to a task and user B
	///modified it, the event’s user will be user B. Note: Some events
	///are generated by the system, and will have `null` as the user. API
	///consumers should make sure to handle this case.
	///
	///The `resource` that triggered the event may be different from the one
	///that the events were requested for or the webhook is subscribed to. For
	///example, a subscription to a project will contain events for tasks
	///contained within the project.
	///
	///**Note:** pay close attention to the relationship between the fields
	///`Event.action` and `Event.change.action`.
	///`Event.action` represents the action taken on the resource
	///itself, and `Event.change.action` represents how the information
	///within the resource's fields have been modified.
	///
	///For instance, consider these scenarios:
	///
	///
	///* When at task is added to a project, `Event.action` will be
	///`added`, `Event.parent` will be an object with the `id` and
	///`type` of the project, and there will be no `change` field.
	///
	///
	///* When an assignee is set on the task, `Event.parent` will be
	///`null`, `Event.action` will be `changed`,
	///`Event.change.action` will be `changed`, and `new_value` will
	///be an object with the user's `id` and `type`.
	///
	///
	///* When a collaborator is added to the task, `Event.parent` will
	///be `null`, `Event.action` will be `changed`,
	///`Event.change.action` will be `added`, and `added_value` will be
	///an object with the user's `id` and `type`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventResponse
	{
		
		/// <summary>
		/// The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change")]
		public EventResponseChange Change { get; set; }
		
		/// <summary>
		/// The timestamp when the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public AsanaNamedResource Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public AsanaNamedResource Resource { get; set; }
		
		/// <summary>
		/// *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	public class EventResponseChange
	{
		
		/// <summary>
		/// The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// *Conditional.* This property is only present when the **field's** `action` is `added` _and_ the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_value")]
		public object Added_value { get; set; }
		
		/// <summary>
		/// The name of the field that has changed in the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// *Conditional.* This property is only present when the **field's** `action` is `changed` _and_ the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_value")]
		public object New_value { get; set; }
		
		/// <summary>
		/// *Conditional.* This property is only present when the **field's** `action` is `removed` _and_ the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removed_value")]
		public object Removed_value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalAddSubgoalRequest
	{
		
		/// <summary>
		/// An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The goal gid to add as subgoal to a parent goal
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subgoal")]
		public string Subgoal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalAddSupportingRelationshipRequest
	{
		
		/// <summary>
		/// The weight that the supporting resource's progress will contribute to the supported goal's progress. This can only be 0 or 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contribution_weight")]
		public System.Nullable<System.Double> Contribution_weight { get; set; }
		
		/// <summary>
		/// An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The gid of the supporting resource to add to the parent goal. Must be the gid of a goal, project, or portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supporting_resource")]
		public string Supporting_resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalAddSupportingWorkRequest
	{
		
		/// <summary>
		/// The project/portfolio gid to add as supporting work for a goal
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supporting_work")]
		public string Supporting_work { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalBase : AsanaResource
	{
		
		/// <summary>
		/// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_on")]
		public string Due_on { get; set; }
		
		/// <summary>
		/// The notes of the goal with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_notes")]
		public string Html_notes { get; set; }
		
		/// <summary>
		/// *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_workspace_level")]
		public System.Nullable<System.Boolean> Is_workspace_level { get; set; }
		
		/// <summary>
		/// True if the goal is liked by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liked")]
		public System.Nullable<System.Boolean> Liked { get; set; }
		
		/// <summary>
		/// The name of the goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Free-form textual information associated with the goal (i.e. its description).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public string Start_on { get; set; }
		
		/// <summary>
		/// The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
		///*Note* you can only write to this property if `metric` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalMembershipBase : AsanaResource
	{
		
		/// <summary>
		/// Describes if the user is comment only in goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_commenter")]
		public System.Nullable<System.Boolean> Is_commenter { get; set; }
		
		/// <summary>
		/// Describes if the user is editor in goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_editor")]
		public System.Nullable<System.Boolean> Is_editor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public UserCompact Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalMembershipCompact : AsanaResource
	{
		
		/// <summary>
		/// Describes if the user is comment only in goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_commenter")]
		public System.Nullable<System.Boolean> Is_commenter { get; set; }
		
		/// <summary>
		/// Describes if the user is editor in goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_editor")]
		public System.Nullable<System.Boolean> Is_editor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public UserCompact Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalMembershipResponse : AsanaResource
	{
		
		/// <summary>
		/// Describes if the user is comment only in goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_commenter")]
		public System.Nullable<System.Boolean> Is_commenter { get; set; }
		
		/// <summary>
		/// Describes if the user is editor in goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_editor")]
		public System.Nullable<System.Boolean> Is_editor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public UserCompact Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalMetricBase : AsanaResource
	{
		
		/// <summary>
		/// ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// This string is the current value of a goal metric of type string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_display_value")]
		public string Current_display_value { get; set; }
		
		/// <summary>
		/// This number is the current value of a goal metric of type number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_number_value")]
		public System.Nullable<System.Double> Current_number_value { get; set; }
		
		/// <summary>
		/// This number is the start value of a goal metric of type number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initial_number_value")]
		public System.Nullable<System.Double> Initial_number_value { get; set; }
		
		/// <summary>
		/// *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
		///For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
		
		/// <summary>
		/// This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress_source")]
		public System.Nullable<GoalMetricBaseProgress_source> Progress_source { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public System.Nullable<GoalMetricBaseResource_subtype> Resource_subtype { get; set; }
		
		/// <summary>
		/// This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_number_value")]
		public System.Nullable<System.Double> Target_number_value { get; set; }
		
		/// <summary>
		/// A supported unit of measure for the goal metric, or none.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<GoalMetricBaseUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoalMetricBaseProgress_source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subgoal_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project_task_completion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project_milestone_completion = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoalMetricBaseResource_subtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoalMetricBaseUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currency = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percentage = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalMetricCurrentValueRequest : AsanaResource
	{
		
		/// <summary>
		/// *Conditional*. This number is the current value of a goal metric of type number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_number_value")]
		public System.Nullable<System.Double> Current_number_value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalMetricRequest : AsanaResource
	{
		
		/// <summary>
		/// ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// This string is the current value of a goal metric of type string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_display_value")]
		public string Current_display_value { get; set; }
		
		/// <summary>
		/// This number is the current value of a goal metric of type number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_number_value")]
		public System.Nullable<System.Double> Current_number_value { get; set; }
		
		/// <summary>
		/// This number is the start value of a goal metric of type number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initial_number_value")]
		public System.Nullable<System.Double> Initial_number_value { get; set; }
		
		/// <summary>
		/// *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
		///For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
		
		/// <summary>
		/// This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress_source")]
		public GoalMetricBaseProgress_source Progress_source { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public GoalMetricBaseResource_subtype Resource_subtype { get; set; }
		
		/// <summary>
		/// This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_number_value")]
		public System.Nullable<System.Double> Target_number_value { get; set; }
		
		/// <summary>
		/// A supported unit of measure for the goal metric, or none.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public GoalMetricBaseUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRelationshipBase : GoalRelationshipCompact
	{
		
		[System.Runtime.Serialization.DataMember(Name="supported_goal")]
		public GoalCompact Supported_goal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRelationshipCompact : AsanaResource
	{
		
		/// <summary>
		/// The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contribution_weight")]
		public System.Nullable<System.Double> Contribution_weight { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public System.Nullable<GoalRelationshipCompactResource_subtype> Resource_subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supporting_resource")]
		public ProjectCompact Supporting_resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoalRelationshipCompactResource_subtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subgoal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supporting_work = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRelationshipRequest : GoalRelationshipBase
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRelationshipResponse : GoalRelationshipBase
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRemoveSubgoalRequest
	{
		
		/// <summary>
		/// The goal gid to remove as subgoal from the parent goal
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subgoal")]
		public string Subgoal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRemoveSupportingRelationshipRequest
	{
		
		/// <summary>
		/// The gid of the supporting resource to remove from the parent goal. Must be the gid of a goal, project, or portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supporting_resource")]
		public string Supporting_resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalRequest : GoalBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
		
		/// <summary>
		/// The `gid` of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// *Conditional*. This property is only present when the `workspace` provided is an organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
		
		/// <summary>
		/// The `gid` of a time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_period")]
		public string Time_period { get; set; }
		
		/// <summary>
		/// The `gid` of a workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoalResponse : GoalBase
	{
		
		/// <summary>
		/// The latest `status_update` posted to this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_status_update")]
		public StatusUpdateCompact Current_status_update { get; set; }
		
		/// <summary>
		/// Array of users who are members of this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public UserCompact[] Followers { get; set; }
		
		/// <summary>
		/// Array of likes for users who have liked this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public Like[] Likes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public GoalMetricBase Metric { get; set; }
		
		/// <summary>
		/// The number of users who have liked this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_likes")]
		public System.Nullable<System.Int32> Num_likes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// *Conditional*. This property is only present when the `workspace` provided is an organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public TeamCompact Team { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_period")]
		public TimePeriodCompact Time_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	/// <summary>
	/// An object to represent a user's like.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Like
	{
		
		/// <summary>
		/// Globally unique identifier of the object, as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobBase : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="new_project")]
		public ProjectCompact New_project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_project_template")]
		public ProjectTemplateCompact New_project_template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_task")]
		public TaskCompact New_task { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<JobBaseStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JobBaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobCompact : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="new_project")]
		public ProjectCompact New_project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_project_template")]
		public ProjectTemplateCompact New_project_template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_task")]
		public TaskCompact New_task { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobBaseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobResponse : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="new_project")]
		public ProjectCompact New_project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_project_template")]
		public ProjectTemplateCompact New_project_template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_task")]
		public TaskCompact New_task { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobBaseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDependenciesRequest
	{
		
		/// <summary>
		/// An array of task gids that a task depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public string[] Dependencies { get; set; }
	}
	
	/// <summary>
	/// A set of dependent tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyDependentsRequest
	{
		
		/// <summary>
		/// An array of task gids that are dependents of the given task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependents")]
		public string[] Dependents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationExportBase : AsanaResource
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Download this URL to retreive the full export of the organization
		///in JSON format. It will be compressed in a gzip (.gz) container.
		///
		///*Note: May be null if the export is still in progress or
		///failed.  If present, this URL may only be valid for 1 hour from
		///the time of retrieval. You should avoid persisting this URL
		///somewhere and rather refresh on demand to ensure you do not keep
		///stale URLs.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public WorkspaceCompact Organization { get; set; }
		
		/// <summary>
		/// The current state of the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<OrganizationExportBaseState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationExportBaseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationExportCompact : AsanaResource
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Download this URL to retreive the full export of the organization
		///in JSON format. It will be compressed in a gzip (.gz) container.
		///
		///*Note: May be null if the export is still in progress or
		///failed.  If present, this URL may only be valid for 1 hour from
		///the time of retrieval. You should avoid persisting this URL
		///somewhere and rather refresh on demand to ensure you do not keep
		///stale URLs.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public WorkspaceCompact Organization { get; set; }
		
		/// <summary>
		/// The current state of the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public OrganizationExportBaseState State { get; set; }
	}
	
	/// <summary>
	/// An *organization_export* request starts a job to export the complete data of the given Organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationExportRequest
	{
		
		/// <summary>
		/// Globally unique identifier for the workspace or organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationExportResponse : AsanaResource
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Download this URL to retreive the full export of the organization
		///in JSON format. It will be compressed in a gzip (.gz) container.
		///
		///*Note: May be null if the export is still in progress or
		///failed.  If present, this URL may only be valid for 1 hour from
		///the time of retrieval. You should avoid persisting this URL
		///somewhere and rather refresh on demand to ensure you do not keep
		///stale URLs.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public WorkspaceCompact Organization { get; set; }
		
		/// <summary>
		/// The current state of the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public OrganizationExportBaseState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioAddItemRequest
	{
		
		/// <summary>
		/// An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The item to add to the portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioBase : PortfolioCompact
	{
		
		/// <summary>
		/// Color of the portfolio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public System.Nullable<PortfolioBaseColor> Color { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PortfolioBaseColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-pink")]
		darkMinuspink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-green")]
		darkMinusgreen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-blue")]
		darkMinusblue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-red")]
		darkMinusred = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-teal")]
		darkMinusteal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-brown")]
		darkMinusbrown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-orange")]
		darkMinusorange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-purple")]
		darkMinuspurple = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-warm-gray")]
		darkMinuswarmMinusgray = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-pink")]
		lightMinuspink = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-green")]
		lightMinusgreen = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-blue")]
		lightMinusblue = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-red")]
		lightMinusred = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-teal")]
		lightMinusteal = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-brown")]
		lightMinusbrown = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-orange")]
		lightMinusorange = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-purple")]
		lightMinuspurple = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-warm-gray")]
		lightMinuswarmMinusgray = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the portfolio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioMembershipBase : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="portfolio")]
		public PortfolioCompact Portfolio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioMembershipCompact : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="portfolio")]
		public PortfolioCompact Portfolio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioMembershipResponse : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="portfolio")]
		public PortfolioCompact Portfolio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioRemoveItemRequest
	{
		
		/// <summary>
		/// The item to remove from the portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioRequest : PortfolioBase
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// True if the portfolio is public to its workspace members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// Gid of an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioResponse : PortfolioBase
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public UserCompact Created_by { get; set; }
		
		/// <summary>
		/// The latest `status_update` posted to this portfolio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_status_update")]
		public StatusUpdateCompact Current_status_update { get; set; }
		
		/// <summary>
		/// Array of custom field settings applied to the portfolio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_field_settings")]
		public CustomFieldSettingResponse[] Custom_field_settings { get; set; }
		
		/// <summary>
		/// Array of Custom Fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomFieldCompact[] Custom_fields { get; set; }
		
		/// <summary>
		/// The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_on")]
		public System.Nullable<System.DateTimeOffset> Due_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public UserCompact[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// A url that points directly to the object within Asana.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink_url")]
		public string Permalink_url { get; set; }
		
		/// <summary>
		/// True if the portfolio is public to its workspace members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public System.Nullable<System.DateOnly> Start_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	/// <summary>
	/// A collection of rich text that will be displayed as a preview to another app.
	///
	///This is read-only except for a small group of whitelisted apps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Preview
	{
		
		/// <summary>
		/// Some fallback text to display if unable to display the full preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallback")]
		public string Fallback { get; set; }
		
		/// <summary>
		/// Text to display in the footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footer")]
		public string Footer { get; set; }
		
		/// <summary>
		/// Text to display in the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// Where the header will link to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header_link")]
		public string Header_link { get; set; }
		
		/// <summary>
		/// HTML formatted text for the body of the preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// Text for the body of the preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Text to display as the title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Where to title will link to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title_link")]
		public string Title_link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBase : ProjectCompact
	{
		
		/// <summary>
		/// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Color of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public System.Nullable<ProjectBaseColor> Color { get; set; }
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// *Deprecated: new integrations should prefer the `current_status_update` resource.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_status")]
		public ProjectStatusResponse Current_status { get; set; }
		
		/// <summary>
		/// The latest `status_update` posted to this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_status_update")]
		public StatusUpdateCompact Current_status_update { get; set; }
		
		/// <summary>
		/// Array of Custom Field Settings (in compact form).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_field_settings")]
		public CustomFieldSettingResponse[] Custom_field_settings { get; set; }
		
		/// <summary>
		/// The default view (list, board, calendar, or timeline) of a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_view")]
		public System.Nullable<ProjectBaseDefault_view> Default_view { get; set; }
		
		/// <summary>
		/// *Deprecated: new integrations should prefer the `due_on` field.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_date")]
		public System.Nullable<System.DateTimeOffset> Due_date { get; set; }
		
		/// <summary>
		/// The day on which this project is due. This takes a date with format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_on")]
		public System.Nullable<System.DateTimeOffset> Due_on { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_notes")]
		public string Html_notes { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_template")]
		public System.Nullable<System.Boolean> Is_template { get; set; }
		
		/// <summary>
		/// Array of users who are members of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public UserCompact[] Members { get; set; }
		
		/// <summary>
		/// The time at which this project was last modified.
		///*Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified_at")]
		public System.Nullable<System.DateTimeOffset> Modified_at { get; set; }
		
		/// <summary>
		/// Free-form textual information associated with the project (ie., its description).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// True if the project is public to its team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public System.Nullable<System.DateOnly> Start_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectBaseColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-pink")]
		darkMinuspink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-green")]
		darkMinusgreen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-blue")]
		darkMinusblue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-red")]
		darkMinusred = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-teal")]
		darkMinusteal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-brown")]
		darkMinusbrown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-orange")]
		darkMinusorange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-purple")]
		darkMinuspurple = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-warm-gray")]
		darkMinuswarmMinusgray = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-pink")]
		lightMinuspink = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-green")]
		lightMinusgreen = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-blue")]
		lightMinusblue = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-red")]
		lightMinusred = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-teal")]
		lightMinusteal = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-brown")]
		lightMinusbrown = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-orange")]
		lightMinusorange = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-purple")]
		lightMinuspurple = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-warm-gray")]
		lightMinuswarmMinusgray = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectBaseDefault_view
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		list = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		board = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		calendar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeline = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBriefBase : ProjectBriefCompact
	{
		
		/// <summary>
		/// HTML formatted text for the project brief.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// The title of the project brief.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBriefCompact : AsanaResource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBriefRequest : ProjectBriefBase
	{
		
		/// <summary>
		/// The plain text of the project brief. When writing to a project brief, you can specify either `html_text` (preferred) or `text`, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBriefResponse : ProjectBriefBase
	{
		
		/// <summary>
		/// A url that points directly to the object within Asana.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink_url")]
		public string Permalink_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectCompact Project { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The plain text of the project brief.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCompact : AsanaResource
	{
		
		/// <summary>
		/// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectDuplicateRequest
	{
		
		/// <summary>
		/// The elements that will be duplicated to the new project. Tasks are always included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include")]
		public System.Nullable<ProjectDuplicateRequestInclude> Include { get; set; }
		
		/// <summary>
		/// The name of the new project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule_dates")]
		public ProjectDuplicateRequestSchedule_dates Schedule_dates { get; set; }
		
		/// <summary>
		/// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectDuplicateRequestInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		members = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forms = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_notes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_assignee = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_subtasks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_attachments = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_dates = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_dependencies = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_followers = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_tags = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task_projects = 11,
	}
	
	public class ProjectDuplicateRequestSchedule_dates
	{
		
		/// <summary>
		/// Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_on")]
		public string Due_on { get; set; }
		
		/// <summary>
		/// Determines if the auto-shifted dates should skip weekends.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="should_skip_weekends")]
		public bool Should_skip_weekends { get; set; }
		
		/// <summary>
		/// Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public string Start_on { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMembershipBase : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMembershipCompact : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMembershipResponse : ProjectMembershipCompact
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectCompact Project { get; set; }
		
		/// <summary>
		/// Whether the user has full access to the project or has comment-only access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="write_access")]
		public System.Nullable<ProjectMembershipResponseWrite_access> Write_access { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectMembershipResponseWrite_access
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full_write = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comment_only = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectRequest : ProjectBase
	{
		
		/// <summary>
		/// An object where each key is a Custom Field GID and each value is an enum GID, string, number, or object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public System.Collections.Generic.Dictionary<string, string> Custom_fields { get; set; }
		
		/// <summary>
		/// *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string Followers { get; set; }
		
		/// <summary>
		/// The current owner of the project, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// The team that this project is shared with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectResponse : ProjectBase
	{
		
		/// <summary>
		/// True if the project is currently marked complete, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// The time at which this project was completed, or null if the project is not completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_by")]
		public UserCompact Completed_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_from_template")]
		public ProjectTemplateCompact Created_from_template { get; set; }
		
		/// <summary>
		/// Array of Custom Fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomFieldCompact[] Custom_fields { get; set; }
		
		/// <summary>
		/// Array of users following this project. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public UserCompact[] Followers { get; set; }
		
		/// <summary>
		/// The icon for a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<ProjectResponseIcon> Icon { get; set; }
		
		/// <summary>
		/// The current owner of the project, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// A url that points directly to the object within Asana.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink_url")]
		public string Permalink_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_brief")]
		public ProjectBriefCompact Project_brief { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="team")]
		public TeamCompact Team { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectResponseIcon
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		list = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		board = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeline = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		calendar = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rocket = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		people = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		graph = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		star = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bug = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		light_bulb = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		globe = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gear = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notebook = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		computer = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		check = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		target = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		html = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		megaphone = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chat_bubbles = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		briefcase = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		page_layout = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mountain_flag = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		puzzle = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		presentation = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line_and_symbols = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		speed_dial = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ribbon = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shoe = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shopping_basket = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		map = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ticket = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coins = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSaveAsTemplateRequest
	{
		
		/// <summary>
		/// The name of the new project template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Sets the project template to public to its team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public")]
		public bool Public { get; set; }
		
		/// <summary>
		/// Sets the team of the new project template. If the project exists in an organization, specify team and not workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
		
		/// <summary>
		/// Sets the workspace of the new project template. Only specify workspace if the project exists in a workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSectionInsertRequest
	{
		
		/// <summary>
		/// Insert the given section immediately after the section specified by this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after_section")]
		public string After_section { get; set; }
		
		/// <summary>
		/// Insert the given section immediately before the section specified by this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before_section")]
		public string Before_section { get; set; }
		
		/// <summary>
		/// The project in which to reorder the given section.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// The section to reorder.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="section")]
		public string Section { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectStatusBase : ProjectStatusCompact
	{
		
		/// <summary>
		/// The color associated with the status update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="color")]
		public ProjectStatusBaseColor Color { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// The text content of the status update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectStatusBaseColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		green = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yellow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		red = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blue = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectStatusCompact : AsanaResource
	{
		
		/// <summary>
		/// The title of the project status update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectStatusRequest : ProjectStatusCompact
	{
		
		/// <summary>
		/// The color associated with the status update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="color")]
		public ProjectStatusBaseColor Color { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// The text content of the status update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectStatusResponse : ProjectStatusBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserCompact Author { get; set; }
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public UserCompact Created_by { get; set; }
		
		/// <summary>
		/// The time at which this project status was last modified.
		///*Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified_at")]
		public System.Nullable<System.DateTimeOffset> Modified_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTemplateBase : ProjectTemplateCompact
	{
		
		/// <summary>
		/// Color of the project template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public System.Nullable<ProjectTemplateBaseColor> Color { get; set; }
		
		/// <summary>
		/// Free-form textual information associated with the project template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The description of the project template with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		/// <summary>
		/// The current owner of the project template, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// True if the project template is public to its team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requested_dates")]
		public DateVariableCompact[] Requested_dates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="team")]
		public TeamCompact Team { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectTemplateBaseColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-pink")]
		darkMinuspink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-green")]
		darkMinusgreen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-blue")]
		darkMinusblue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-red")]
		darkMinusred = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-teal")]
		darkMinusteal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-brown")]
		darkMinusbrown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-orange")]
		darkMinusorange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-purple")]
		darkMinuspurple = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-warm-gray")]
		darkMinuswarmMinusgray = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-pink")]
		lightMinuspink = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-green")]
		lightMinusgreen = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-blue")]
		lightMinusblue = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-red")]
		lightMinusred = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-teal")]
		lightMinusteal = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-brown")]
		lightMinusbrown = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-orange")]
		lightMinusorange = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-purple")]
		lightMinuspurple = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-warm-gray")]
		lightMinuswarmMinusgray = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTemplateCompact : AsanaResource
	{
		
		/// <summary>
		/// Name of the project template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTemplateInstantiateProjectRequest
	{
		
		/// <summary>
		/// *Optional*. If set to `true`, the endpoint returns an "Unprocessable Entity" error if you fail to provide a calendar date value for any date variable. If set to `false`, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_strict")]
		public System.Nullable<System.Boolean> Is_strict { get; set; }
		
		/// <summary>
		/// The name of the new project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Sets the project to public to its team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public")]
		public bool Public { get; set; }
		
		/// <summary>
		/// Array of mappings of date variables to calendar dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requested_dates")]
		public DateVariableRequest[] Requested_dates { get; set; }
		
		/// <summary>
		/// *Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for `team` and not `workspace`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
		
		/// <summary>
		/// *Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for `workspace` and not `team`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveCustomFieldSettingRequest
	{
		
		/// <summary>
		/// The custom field to remove from this portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public string Custom_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFollowersRequest
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string Followers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveMembersRequest
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionBase : AsanaResource
	{
		
		/// <summary>
		/// The name of the section (i.e. the text displayed as the section header).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the section (i.e. the text displayed as the section header).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionRequest
	{
		
		/// <summary>
		/// An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The text to be displayed as the section name. This cannot be an empty string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionResponse : SectionCompact
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectCompact Project { get; set; }
		
		/// <summary>
		/// *Deprecated - please use project instead*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public ProjectCompact[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SectionTaskInsertRequest
	{
		
		/// <summary>
		/// An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The task to add to this section.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="task")]
		public string Task { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusUpdateBase : StatusUpdateCompact
	{
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// The type associated with the status update. This represents the current state of the object this object is on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_type")]
		public StatusUpdateBaseStatus_type Status_type { get; set; }
		
		/// <summary>
		/// The text content of the status update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusUpdateBaseStatus_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on_track = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		at_risk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		off_track = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on_hold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		complete = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		achieved = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@partial = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		missed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dropped = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusUpdateCompact : AsanaResource
	{
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		///The `resource_subtype`s for `status` objects represent the type of their parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public System.Nullable<StatusUpdateCompactResource_subtype> Resource_subtype { get; set; }
		
		/// <summary>
		/// The title of the status update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusUpdateCompactResource_subtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project_status_update = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		portfolio_status_update = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		goal_status_update = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusUpdateRequest : StatusUpdateBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusUpdateResponse : StatusUpdateBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserCompact Author { get; set; }
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public UserCompact Created_by { get; set; }
		
		/// <summary>
		/// *Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearted")]
		public System.Nullable<System.Boolean> Hearted { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead* Array of likes for users who have hearted this status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearts")]
		public Like[] Hearts { get; set; }
		
		/// <summary>
		/// True if the status is liked by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liked")]
		public System.Nullable<System.Boolean> Liked { get; set; }
		
		/// <summary>
		/// Array of likes for users who have liked this status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public Like[] Likes { get; set; }
		
		/// <summary>
		/// The time at which this project status was last modified.
		///*Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified_at")]
		public System.Nullable<System.DateTimeOffset> Modified_at { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead* The number of users who have hearted this status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_hearts")]
		public System.Nullable<System.Int32> Num_hearts { get; set; }
		
		/// <summary>
		/// The number of users who have liked this status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_likes")]
		public System.Nullable<System.Int32> Num_likes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ProjectCompact Parent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoryBase : AsanaResource
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// *Conditional*. Whether the story should be pinned on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_pinned")]
		public System.Nullable<System.Boolean> Is_pinned { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The name of the sticker in this story. `null` if there is no sticker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sticker_name")]
		public System.Nullable<StoryBaseSticker_name> Sticker_name { get; set; }
		
		/// <summary>
		/// The plain text of the comment to add. Cannot be used with html_text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StoryBaseSticker_name
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		green_checkmark = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		people_dancing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dancing_unicorn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heart = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		party_popper = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		people_waving_flags = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		splashing_narwhal = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trophy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yeti_riding_unicorn = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		celebrating_people = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		determined_climbers = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoenix_spreading_love = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoryCompact : AsanaResource
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public UserCompact Created_by { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// *Create-only*. Human-readable text for the story or comment.
		///This will not include the name of the creator.
		///*Note: This is not guaranteed to be stable for a given type of story. For example, text for a reassignment may not always say “assigned to …” as the text for a story can both be edited and change based on the language settings of the user making the request.*
		///Use the `resource_subtype` property to discover the action that created the story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoryRequest : AsanaResource
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_text")]
		public string Html_text { get; set; }
		
		/// <summary>
		/// *Conditional*. Whether the story should be pinned on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_pinned")]
		public System.Nullable<System.Boolean> Is_pinned { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The name of the sticker in this story. `null` if there is no sticker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sticker_name")]
		public StoryBaseSticker_name Sticker_name { get; set; }
		
		/// <summary>
		/// The plain text of the comment to add. Cannot be used with html_text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoryResponse : StoryBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public UserCompact Assignee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public UserCompact Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public CustomFieldCompact Custom_field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependency")]
		public TaskCompact Dependency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duplicate_of")]
		public TaskCompact Duplicate_of { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duplicated_from")]
		public TaskCompact Duplicated_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="follower")]
		public UserCompact Follower { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead*
		///*Conditional*. True if the story is hearted by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearted")]
		public System.Nullable<System.Boolean> Hearted { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead*
		///
		///*Conditional*. Array of likes for users who have hearted this story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearts")]
		public Like[] Hearts { get; set; }
		
		/// <summary>
		/// *Conditional*. Whether the text of the story can be edited after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_editable")]
		public System.Nullable<System.Boolean> Is_editable { get; set; }
		
		/// <summary>
		/// *Conditional*. Whether the text of the story has been edited after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_edited")]
		public System.Nullable<System.Boolean> Is_edited { get; set; }
		
		/// <summary>
		/// *Conditional*. True if the story is liked by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liked")]
		public System.Nullable<System.Boolean> Liked { get; set; }
		
		/// <summary>
		/// *Conditional*. Array of likes for users who have liked this story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public Like[] Likes { get; set; }
		
		/// <summary>
		/// *Conditional*. The new value of approval status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_approval_status")]
		public string New_approval_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_date_value")]
		public StoryResponseDates New_date_value { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_dates")]
		public StoryResponseDates New_dates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_enum_value")]
		public EnumOption New_enum_value { get; set; }
		
		/// <summary>
		/// *Conditional*. The new value of a multi-enum custom field story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_multi_enum_values")]
		public EnumOption[] New_multi_enum_values { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_name")]
		public string New_name { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_number_value")]
		public System.Nullable<System.Int32> New_number_value { get; set; }
		
		/// <summary>
		/// *Conditional*. The new value of a people custom field story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_people_value")]
		public UserCompact[] New_people_value { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_resource_subtype")]
		public string New_resource_subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_section")]
		public SectionCompact New_section { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new_text_value")]
		public string New_text_value { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead*
		///
		///*Conditional*. The number of users who have hearted this story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_hearts")]
		public System.Nullable<System.Int32> Num_hearts { get; set; }
		
		/// <summary>
		/// *Conditional*. The number of users who have liked this story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_likes")]
		public System.Nullable<System.Int32> Num_likes { get; set; }
		
		/// <summary>
		/// *Conditional*. The old value of approval status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_approval_status")]
		public string Old_approval_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old_date_value")]
		public StoryResponseDates Old_date_value { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_dates")]
		public StoryResponseDates Old_dates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old_enum_value")]
		public EnumOption Old_enum_value { get; set; }
		
		/// <summary>
		/// *Conditional*. The old value of a multi-enum custom field story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_multi_enum_values")]
		public EnumOption[] Old_multi_enum_values { get; set; }
		
		/// <summary>
		/// *Conditional*'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_name")]
		public string Old_name { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_number_value")]
		public System.Nullable<System.Int32> Old_number_value { get; set; }
		
		/// <summary>
		/// *Conditional*. The old value of a people custom field story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_people_value")]
		public UserCompact[] Old_people_value { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_resource_subtype")]
		public string Old_resource_subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old_section")]
		public SectionCompact Old_section { get; set; }
		
		/// <summary>
		/// *Conditional*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="old_text_value")]
		public string Old_text_value { get; set; }
		
		/// <summary>
		/// *Conditional*. A collection of previews to be displayed in the story.
		///
		///*Note: This property only exists for comment stories.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previews")]
		public Preview[] Previews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectCompact Project { get; set; }
		
		/// <summary>
		/// The component of the Asana product the user used to trigger the story.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<StoryResponseSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="story")]
		public StoryCompact Story { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public TagCompact Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public TaskCompact Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task")]
		public TaskCompact Task { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StoryResponseType> Type { get; set; }
	}
	
	/// <summary>
	/// *Conditional*
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoryResponseDates
	{
		
		/// <summary>
		/// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_at")]
		public System.Nullable<System.DateTimeOffset> Due_at { get; set; }
		
		/// <summary>
		/// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_on")]
		public System.Nullable<System.DateOnly> Due_on { get; set; }
		
		/// <summary>
		/// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public System.Nullable<System.DateOnly> Start_on { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StoryResponseSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		api = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StoryResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagBase : TagCompact
	{
		
		/// <summary>
		/// Color of the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public System.Nullable<TagBaseColor> Color { get; set; }
		
		/// <summary>
		/// Free-form textual information associated with the tag (i.e. its description).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TagBaseColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-pink")]
		darkMinuspink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-green")]
		darkMinusgreen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-blue")]
		darkMinusblue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-red")]
		darkMinusred = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-teal")]
		darkMinusteal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-brown")]
		darkMinusbrown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-orange")]
		darkMinusorange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-purple")]
		darkMinuspurple = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dark-warm-gray")]
		darkMinuswarmMinusgray = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-pink")]
		lightMinuspink = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-green")]
		lightMinusgreen = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-blue")]
		lightMinusblue = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-red")]
		lightMinusred = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-teal")]
		lightMinusteal = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-brown")]
		lightMinusbrown = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-orange")]
		lightMinusorange = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-purple")]
		lightMinuspurple = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light-warm-gray")]
		lightMinuswarmMinusgray = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagCompact : AsanaResource
	{
		
		/// <summary>
		/// Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagRequest : TagBase
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
		
		/// <summary>
		/// Gid of an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResponse : TagBase
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Array of users following this tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public UserCompact[] Followers { get; set; }
		
		/// <summary>
		/// A url that points directly to the object within Asana.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink_url")]
		public string Permalink_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskAddFollowersRequest
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskAddProjectRequest
	{
		
		/// <summary>
		/// A task in the project to insert the task after, or `null` to insert at the beginning of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// A task in the project to insert the task before, or `null` to insert at the end of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The project to add the task to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// A section in the project to insert the task into. The task will be inserted at the bottom of the section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section")]
		public string Section { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskAddTagRequest
	{
		
		/// <summary>
		/// The tag to add to the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskBase : TaskCompact
	{
		
		/// <summary>
		/// This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_time_minutes")]
		public System.Nullable<System.Double> Actual_time_minutes { get; set; }
		
		/// <summary>
		/// *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approval_status")]
		public System.Nullable<TaskBaseApproval_status> Approval_status { get; set; }
		
		/// <summary>
		/// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee_status")]
		public System.Nullable<TaskBaseAssignee_status> Assignee_status { get; set; }
		
		/// <summary>
		/// True if the task is currently marked complete, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// The time at which this task was completed, or null if the task is incomplete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed_by")]
		public UserCompact Completed_by { get; set; }
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public AsanaResource[] Dependencies { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependents")]
		public AsanaResource[] Dependents { get; set; }
		
		/// <summary>
		/// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_at")]
		public System.Nullable<System.DateOnly> Due_at { get; set; }
		
		/// <summary>
		/// The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_on")]
		public System.Nullable<System.DateOnly> Due_on { get; set; }
		
		/// <summary>
		/// *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).
		///The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external")]
		public TaskBaseExternal External { get; set; }
		
		/// <summary>
		/// *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearted")]
		public System.Nullable<System.Boolean> Hearted { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearts")]
		public Like[] Hearts { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_notes")]
		public string Html_notes { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_rendered_as_separator")]
		public System.Nullable<System.Boolean> Is_rendered_as_separator { get; set; }
		
		/// <summary>
		/// True if the task is liked by the authorized user, false if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liked")]
		public System.Nullable<System.Boolean> Liked { get; set; }
		
		/// <summary>
		/// Array of likes for users who have liked this task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public Like[] Likes { get; set; }
		
		/// <summary>
		/// *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberships")]
		public TaskBaseMemberships[] TaskBaseMemberships { get; set; }
		
		/// <summary>
		/// The time at which this task was last modified.
		///
		///*Note: This does not currently reflect any changes in
		///associations such as projects or comments that may have been
		///added or removed from the task.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified_at")]
		public System.Nullable<System.DateTimeOffset> Modified_at { get; set; }
		
		/// <summary>
		/// Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Free-form textual information associated with the task (i.e. its description).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// *Deprecated - please use likes instead* The number of users who have hearted this task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_hearts")]
		public System.Nullable<System.Int32> Num_hearts { get; set; }
		
		/// <summary>
		/// The number of users who have liked this task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_likes")]
		public System.Nullable<System.Int32> Num_likes { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The number of subtasks on this task.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_subtasks")]
		public System.Nullable<System.Int32> Num_subtasks { get; set; }
		
		/// <summary>
		/// Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.
		///*Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		public System.Nullable<System.DateOnly> Start_at { get; set; }
		
		/// <summary>
		/// The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.
		///*Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public System.Nullable<System.DateOnly> Start_on { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TaskBaseApproval_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		changes_requested = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TaskBaseAssignee_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		today = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upcoming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		later = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="new")]
		_new = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbox = 4,
	}
	
	public class TaskBaseExternal
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public string Gid { get; set; }
	}
	
	public class TaskBaseMemberships
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectCompact Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section")]
		public SectionCompact Section { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
		///The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public System.Nullable<TaskCompactResource_subtype> Resource_subtype { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TaskCompactResource_subtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		default_task = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		milestone = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		section = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approval = 3,
	}
	
	/// <summary>
	/// A response object returned from the task count endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskCountResponse
	{
		
		/// <summary>
		/// The number of completed milestones in a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_completed_milestones")]
		public System.Nullable<System.Int32> Num_completed_milestones { get; set; }
		
		/// <summary>
		/// The number of completed tasks in a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_completed_tasks")]
		public System.Nullable<System.Int32> Num_completed_tasks { get; set; }
		
		/// <summary>
		/// The number of incomplete milestones in a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_incomplete_milestones")]
		public System.Nullable<System.Int32> Num_incomplete_milestones { get; set; }
		
		/// <summary>
		/// The number of incomplete tasks in a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_incomplete_tasks")]
		public System.Nullable<System.Int32> Num_incomplete_tasks { get; set; }
		
		/// <summary>
		/// The number of milestones in a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_milestones")]
		public System.Nullable<System.Int32> Num_milestones { get; set; }
		
		/// <summary>
		/// The number of tasks in a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_tasks")]
		public System.Nullable<System.Int32> Num_tasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskDuplicateRequest
	{
		
		/// <summary>
		/// The fields that will be duplicated to the new task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include")]
		public System.Nullable<TaskDuplicateRequestInclude> Include { get; set; }
		
		/// <summary>
		/// The name of the new task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TaskDuplicateRequestInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		assignee = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subtasks = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attachments = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tags = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		followers = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projects = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dates = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dependencies = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		parent = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskRemoveFollowersRequest
	{
		
		/// <summary>
		/// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskRemoveProjectRequest
	{
		
		/// <summary>
		/// The project to remove the task from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskRemoveTagRequest
	{
		
		/// <summary>
		/// The tag to remove from the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskRequest : TaskBase
	{
		
		/// <summary>
		/// Gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public string Assignee { get; set; }
		
		/// <summary>
		/// The *assignee section* is a subdivision of a project that groups tasks together in the assignee's "My Tasks" list. It can either be a header above a list of tasks in a list view or a column in a board view of "My Tasks."
		///The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's "My Tasks" list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee_section")]
		public string Assignee_section { get; set; }
		
		/// <summary>
		/// An object where each key is a Custom Field GID and each value is an enum GID, string, number, object, or array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public System.Collections.Generic.Dictionary<string, string> Custom_fields { get; set; }
		
		/// <summary>
		/// *Create-Only* An array of strings identifying users. These can either be the string "me", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
		
		/// <summary>
		/// Gid of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
		
		/// <summary>
		/// *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Gid of a workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskResponse : TaskBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public UserCompact Assignee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assignee_section")]
		public SectionCompact Assignee_section { get; set; }
		
		/// <summary>
		/// Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomFieldResponse[] Custom_fields { get; set; }
		
		/// <summary>
		/// Array of users following this task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public UserCompact[] Followers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public TaskCompact Parent { get; set; }
		
		/// <summary>
		/// A url that points directly to the object within Asana.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink_url")]
		public string Permalink_url { get; set; }
		
		/// <summary>
		/// *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public ProjectCompact[] Projects { get; set; }
		
		/// <summary>
		/// Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagCompact[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskSetParentRequest
	{
		
		/// <summary>
		/// A subtask of the parent to insert the task after, or `null` to insert at the beginning of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_after")]
		public string Insert_after { get; set; }
		
		/// <summary>
		/// A subtask of the parent to insert the task before, or `null` to insert at the end of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public string Insert_before { get; set; }
		
		/// <summary>
		/// The new parent of the task, or `null` for no parent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
	}
	
	/// <summary>
	/// A user identification object for specification with the addUser/removeUser endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamAddUserRequest
	{
		
		/// <summary>
		/// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamBase : AsanaResource
	{
		
		/// <summary>
		/// The name of the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMembershipBase : AsanaResource
	{
		
		/// <summary>
		/// Describes if the user is a guest in the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_guest")]
		public System.Nullable<System.Boolean> Is_guest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="team")]
		public TeamCompact Team { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMembershipCompact : AsanaResource
	{
		
		/// <summary>
		/// Describes if the user is a guest in the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_guest")]
		public System.Nullable<System.Boolean> Is_guest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="team")]
		public TeamCompact Team { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamMembershipResponse : AsanaResource
	{
		
		/// <summary>
		/// Describes if the user is a guest in the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_guest")]
		public System.Nullable<System.Boolean> Is_guest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="team")]
		public TeamCompact Team { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
	}
	
	/// <summary>
	/// A user identification object for specification with the addUser/removeUser endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamRemoveUserRequest
	{
		
		/// <summary>
		/// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamRequest : TeamCompact
	{
		
		/// <summary>
		/// The description of the team.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The description of the team with formatting as HTML.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		/// <summary>
		/// The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// The visibility of the team to users in the same organization
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<TeamRequestVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TeamRequestVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secret = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		request_to_join = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamResponse : TeamCompact
	{
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The description of the team.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Opt In](/docs/input-output-options). The description of the team with formatting as HTML.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public WorkspaceCompact Organization { get; set; }
		
		/// <summary>
		/// A url that points directly to the object within Asana.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink_url")]
		public string Permalink_url { get; set; }
		
		/// <summary>
		/// The visibility of the team to users in the same organization
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<TeamResponseVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TeamResponseVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secret = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		request_to_join = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriodBase : TimePeriodCompact
	{
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public TimePeriodCompact Parent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriodCompact : AsanaResource
	{
		
		/// <summary>
		/// A string representing the cadence code and the fiscal year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// The localized end date of the time period in `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_on")]
		public string End_on { get; set; }
		
		/// <summary>
		/// The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<TimePeriodCompactPeriod> Period { get; set; }
		
		/// <summary>
		/// The localized start date of the time period in `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public string Start_on { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TimePeriodCompactPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q4 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriodResponse : TimePeriodBase
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserBase : AsanaResource
	{
		
		/// <summary>
		/// *Read-only except when same user as requester*. The user’s name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserBaseResponse : UserCompact
	{
		
		/// <summary>
		/// The user's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public UserBaseResponsePhoto Photo { get; set; }
	}
	
	public class UserBaseResponsePhoto
	{
		
		[System.Runtime.Serialization.DataMember(Name="image_1024x1024")]
		public string Image_1024x1024 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_128x128")]
		public string Image_128x128 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_21x21")]
		public string Image_21x21 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_27x27")]
		public string Image_27x27 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_36x36")]
		public string Image_36x36 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_60x60")]
		public string Image_60x60 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserRequest : AsanaResource
	{
		
		/// <summary>
		/// *Read-only except when same user as requester*. The user’s name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserResponse : UserBaseResponse
	{
		
		/// <summary>
		/// Workspaces and organizations this user may access.
		///Note\: The API will only return workspaces and organizations that also contain the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public WorkspaceCompact[] Workspaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserTaskListBase : AsanaResource
	{
		
		/// <summary>
		/// The name of the user task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// The workspace in which the user task list is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserTaskListCompact : AsanaResource
	{
		
		/// <summary>
		/// The name of the user task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// The workspace in which the user task list is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserTaskListRequest : AsanaResource
	{
		
		/// <summary>
		/// The name of the user task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// The workspace in which the user task list is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserTaskListResponse : AsanaResource
	{
		
		/// <summary>
		/// The name of the user task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserCompact Owner { get; set; }
		
		/// <summary>
		/// The workspace in which the user task list is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookCompact : AsanaResource
	{
		
		/// <summary>
		/// If true, the webhook will send events - if false it is considered inactive and will not generate events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public AsanaNamedResource Resource { get; set; }
		
		/// <summary>
		/// The URL to receive the HTTP POST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookFilter
	{
		
		/// <summary>
		/// The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [Event](/docs/tocS_Event) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// *Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type `changed`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		/// <summary>
		/// The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_subtype")]
		public string Resource_subtype { get; set; }
		
		/// <summary>
		/// The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public string Resource_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookRequest
	{
		
		/// <summary>
		/// An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string[] Filters { get; set; }
		
		/// <summary>
		/// A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookResponse : WebhookCompact
	{
		
		/// <summary>
		/// The time at which this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string[] Filters { get; set; }
		
		/// <summary>
		/// The timestamp when the webhook last received an error when sending an event to the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_failure_at")]
		public System.Nullable<System.DateTimeOffset> Last_failure_at { get; set; }
		
		/// <summary>
		/// The contents of the last error response sent to the webhook when attempting to deliver events to the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_failure_content")]
		public string Last_failure_content { get; set; }
		
		/// <summary>
		/// The timestamp when the webhook last successfully sent an event to the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_success_at")]
		public System.Nullable<System.DateTimeOffset> Last_success_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookUpdateRequest
	{
		
		/// <summary>
		/// An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public string[] Filters { get; set; }
	}
	
	/// <summary>
	/// A user identification object for specification with the addUser/removeUser endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceAddUserRequest
	{
		
		/// <summary>
		/// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceBase : AsanaResource
	{
		
		/// <summary>
		/// The name of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceMembershipBase : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceMembershipCompact : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceMembershipRequest : AsanaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserCompact User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceCompact Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceMembershipResponse : WorkspaceMembershipCompact
	{
		
		/// <summary>
		/// Reflects if this user still a member of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		/// <summary>
		/// Reflects if this user is an admin of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_admin")]
		public System.Nullable<System.Boolean> Is_admin { get; set; }
		
		/// <summary>
		/// Reflects if this user is a guest of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_guest")]
		public System.Nullable<System.Boolean> Is_guest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_task_list")]
		public UserTaskListCompact User_task_list { get; set; }
		
		/// <summary>
		/// Contains keys `start_on` and `end_on` for the vacation dates for the user in this workspace. If `start_on` is null, the entire `vacation_dates` object will be null. If `end_on` is before today, the entire `vacation_dates` object will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacation_dates")]
		public WorkspaceMembershipResponseVacation_dates Vacation_dates { get; set; }
	}
	
	public class WorkspaceMembershipResponseVacation_dates
	{
		
		/// <summary>
		/// The day on which the user's vacation in this workspace ends, or null if there is no end date. This is a date with `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_on")]
		public string End_on { get; set; }
		
		/// <summary>
		/// The day on which the user's vacation in this workspace starts. This is a date with `YYYY-MM-DD` format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_on")]
		public string Start_on { get; set; }
	}
	
	/// <summary>
	/// A user identification object for specification with the addUser/removeUser endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceRemoveUserRequest
	{
		
		/// <summary>
		/// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceRequest : AsanaResource
	{
		
		/// <summary>
		/// The name of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceResponse : WorkspaceCompact
	{
		
		/// <summary>
		/// The email domains that are associated with this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_domains")]
		public string[] Email_domains { get; set; }
		
		/// <summary>
		/// Whether the workspace is an *organization*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_organization")]
		public System.Nullable<System.Boolean> Is_organization { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get attachments from an object
		/// Returns the compact records for all attachments on the object.
		/// 
		/// There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the "Key resources" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.
		/// GetAttachmentsForObject attachments
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="parent">Globally unique identifier for object to fetch statuses from. Must be a GID for a `project`, `project_brief`, or `task`.</param>
		/// <returns>Successfully retrieved the specified object's attachments.</returns>
		public async Task<GetAttachmentsForObjectReturn> GetAttachmentsForObjectAsync(int limit, string offset, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAttachmentsForObjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an attachment
		/// Deletes a specific, existing attachment.
		/// 
		/// Returns an empty data record.
		/// DeleteAttachment attachments/{attachment_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified attachment.</returns>
		public async Task<DeleteAttachmentReturn> DeleteAttachmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/{attachment_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAttachmentReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an attachment
		/// Get the full record for a single attachment.
		/// GetAttachment attachments/{attachment_gid}
		/// </summary>
		/// <returns>Successfully retrieved the record for a single attachment.</returns>
		public async Task<GetAttachmentReturn> GetAttachmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/{attachment_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAttachmentReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit parallel requests
		/// Make multiple requests in parallel to Asana's API.
		/// CreateBatchRequest batch
		/// </summary>
		/// <param name="requestBody">The requests to batch together via the Batch API.</param>
		/// <returns>Successfully completed the requested batch API operations.</returns>
		public async Task<CreateBatchRequestReturn> CreateBatchRequestAsync(CreateBatchRequestPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBatchRequestReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a custom field
		/// Creates a new custom field in a workspace. Every custom field is required
		/// to be created in a specific workspace, and this workspace cannot be
		/// changed once set.
		/// 
		/// A custom field’s name must be unique within a workspace and not conflict
		/// with names of existing task properties such as `Due Date` or `Assignee`.
		/// A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`,
		/// `date`, or `people`.
		/// 
		/// Returns the full record of the newly created custom field.
		/// CreateCustomField custom_fields
		/// </summary>
		/// <param name="requestBody">The custom field object to create.</param>
		public async Task CreateCustomFieldAsync(CreateCustomFieldPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a custom field
		/// A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.
		/// Locked custom fields can only be deleted by the user who locked the field.
		/// Returns an empty data record.
		/// DeleteCustomField custom_fields/{custom_field_gid}
		/// </summary>
		/// <returns>The custom field was successfully deleted.</returns>
		public async Task<DeleteCustomFieldReturn> DeleteCustomFieldAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/{custom_field_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomFieldReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a custom field
		/// Get the complete definition of a custom field’s metadata.
		/// 
		/// Since custom fields can be defined for one of a number of types, and
		/// these types have different data and behaviors, there are fields that are
		/// relevant to a particular type. For instance, as noted above, enum_options
		/// is only relevant for the enum type and defines the set of choices that
		/// the enum could represent. The examples below show some of these
		/// type-specific custom field definitions.
		/// GetCustomField custom_fields/{custom_field_gid}
		/// </summary>
		/// <returns>Successfully retrieved the complete definition of a custom field’s metadata.</returns>
		public async Task<GetCustomFieldReturn> GetCustomFieldAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/{custom_field_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomFieldReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a custom field
		/// A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged
		/// When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.
		/// A custom field’s `type` cannot be updated.
		/// An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.
		/// Locked custom fields can only be updated by the user who locked the field.
		/// Returns the complete updated custom field record.
		/// UpdateCustomField custom_fields/{custom_field_gid}
		/// </summary>
		/// <param name="requestBody">The custom field object with all updated properties.</param>
		/// <returns>The custom field was successfully updated.</returns>
		public async Task<UpdateCustomFieldReturn> UpdateCustomFieldAsync(UpdateCustomFieldPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/{custom_field_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCustomFieldReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create an enum option
		/// Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list.
		/// Locked custom fields can only have enum options added by the user who locked the field.
		/// Returns the full record of the newly created enum option.
		/// CreateEnumOptionForCustomField custom_fields/{custom_field_gid}/enum_options
		/// </summary>
		/// <param name="requestBody">The enum option object to create.</param>
		public async Task CreateEnumOptionForCustomFieldAsync(CreateEnumOptionForCustomFieldPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/{custom_field_gid}/enum_options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reorder a custom field's enum
		/// Moves a particular enum option to be either before or after another specified enum option in the custom field.
		/// Locked custom fields can only be reordered by the user who locked the field.
		/// InsertEnumOptionForCustomField custom_fields/{custom_field_gid}/enum_options/insert
		/// </summary>
		/// <param name="requestBody">The enum option object to create.</param>
		/// <returns>Custom field enum option successfully reordered.</returns>
		public async Task<InsertEnumOptionForCustomFieldReturn> InsertEnumOptionForCustomFieldAsync(InsertEnumOptionForCustomFieldPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/{custom_field_gid}/enum_options/insert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InsertEnumOptionForCustomFieldReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an enum option
		/// Updates an existing enum option. Enum custom fields require at least one enabled enum option.
		/// Locked custom fields can only be updated by the user who locked the field.
		/// Returns the full record of the updated enum option.
		/// UpdateEnumOption enum_options/{enum_option_gid}
		/// </summary>
		/// <param name="requestBody">The enum option object to update</param>
		/// <returns>Successfully updated the specified custom field enum.</returns>
		public async Task<UpdateEnumOptionReturn> UpdateEnumOptionAsync(UpdateEnumOptionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enum_options/{enum_option_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEnumOptionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get events on a resource
		/// Returns the full record for all events that have occurred since the sync
		/// token was created.
		/// 
		/// A `GET` request to the endpoint `/[path_to_resource]/events` can be made in
		/// lieu of including the resource ID in the data for the request.
		/// 
		/// Asana limits a single sync token to 100 events. If more than 100 events exist
		/// for a given resource, `has_more: true` will be returned in the response, indicating
		/// that there are more events to pull.
		/// 
		/// *Note: The resource returned will be the resource that triggered the
		/// event. This may be different from the one that the events were requested
		/// for. For example, a subscription to a project will contain events for
		/// tasks contained within the project.*
		/// GetEvents events
		/// </summary>
		/// <returns>Successfully retrieved events.</returns>
		public async Task<GetEventsReturn> GetEventsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEventsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get goal relationships
		/// Returns compact goal relationship records.
		/// GetGoalRelationships goal_relationships
		/// </summary>
		/// <param name="opt_pretty">Provides “pretty” output.
		///Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.</param>
		/// <param name="opt_fields">Defines fields to return.
		///Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
		///The id of included objects will always be returned, regardless of the field options.</param>
		/// <param name="supported_goal">Globally unique identifier for the supported goal in the goal relationship.</param>
		/// <param name="resource_subtype">If provided, filter to goal relationships with a given resource_subtype.</param>
		/// <returns>Successfully retrieved the requested goal relationships.</returns>
		public async Task<GetGoalRelationshipsReturn> GetGoalRelationshipsAsync(bool opt_pretty, string[] opt_fields, string supported_goal, string resource_subtype, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goal_relationships?opt_pretty="+opt_pretty+"&"+string.Join("&", opt_fields.Select(z => $"opt_fields={System.Uri.EscapeDataString(z.ToString())}"))+"&supported_goal=" + (supported_goal==null? "" : System.Uri.EscapeDataString(supported_goal))+"&resource_subtype=" + (resource_subtype==null? "" : System.Uri.EscapeDataString(resource_subtype));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGoalRelationshipsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a goal relationship
		/// Returns the complete updated goal relationship record for a single goal relationship.
		/// GetGoalRelationship goal_relationships/{goal_relationship_gid}
		/// </summary>
		/// <returns>Successfully retrieved the record for the goal relationship.</returns>
		public async Task<GetGoalRelationshipReturn> GetGoalRelationshipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goal_relationships/{goal_relationship_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGoalRelationshipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a goal relationship
		/// An existing goal relationship can be updated by making a PUT request on the URL for
		/// that goal relationship. Only the fields provided in the `data` block will be updated;
		/// any unspecified fields will remain unchanged.
		/// 
		/// Returns the complete updated goal relationship record.
		/// UpdateGoalRelationship goal_relationships/{goal_relationship_gid}
		/// </summary>
		/// <param name="requestBody">The updated fields for the goal relationship.</param>
		/// <returns>Successfully updated the goal relationship.</returns>
		public async Task<UpdateGoalRelationshipReturn> UpdateGoalRelationshipAsync(UpdateGoalRelationshipPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goal_relationships/{goal_relationship_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateGoalRelationshipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get goals
		/// Returns compact goal records.
		/// GetGoals goals
		/// </summary>
		/// <param name="portfolio">Globally unique identifier for supporting portfolio.</param>
		/// <param name="project">Globally unique identifier for supporting project.</param>
		/// <param name="is_workspace_level">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.</param>
		/// <param name="team">Globally unique identifier for the team.</param>
		/// <param name="workspace">Globally unique identifier for the workspace.</param>
		/// <param name="time_periods">Globally unique identifiers for the time periods.</param>
		/// <returns>Successfully retrieved the requested goals.</returns>
		public async Task<GetGoalsReturn> GetGoalsAsync(string portfolio, string project, bool is_workspace_level, string team, string workspace, string[] time_periods, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals?portfolio=" + (portfolio==null? "" : System.Uri.EscapeDataString(portfolio))+"&project=" + (project==null? "" : System.Uri.EscapeDataString(project))+"&is_workspace_level="+is_workspace_level+"&team=" + (team==null? "" : System.Uri.EscapeDataString(team))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&"+string.Join("&", time_periods.Select(z => $"time_periods={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGoalsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a goal
		/// Creates a new goal in a workspace or team.
		/// 
		/// Returns the full record of the newly created goal.
		/// CreateGoal goals
		/// </summary>
		/// <param name="requestBody">The goal to create.</param>
		public async Task CreateGoalAsync(CreateGoalPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a goal
		/// A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.
		/// 
		/// Returns an empty data record.
		/// DeleteGoal goals/{goal_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified goal.</returns>
		public async Task<DeleteGoalReturn> DeleteGoalAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteGoalReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a goal
		/// Returns the complete goal record for a single goal.
		/// GetGoal goals/{goal_gid}
		/// </summary>
		/// <returns>Successfully retrieved the record for a single goal.</returns>
		public async Task<GetGoalReturn> GetGoalAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGoalReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a goal
		/// An existing goal can be updated by making a PUT request on the URL for
		/// that goal. Only the fields provided in the `data` block will be updated;
		/// any unspecified fields will remain unchanged.
		/// 
		/// Returns the complete updated goal record.
		/// UpdateGoal goals/{goal_gid}
		/// </summary>
		/// <param name="requestBody">The updated fields for the goal.</param>
		/// <returns>Successfully updated the goal.</returns>
		public async Task<UpdateGoalReturn> UpdateGoalAsync(UpdateGoalPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateGoalReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a collaborator to a goal
		/// Adds followers to a goal. Returns the goal the followers were added to.
		/// Each goal can be associated with zero or more followers in the system.
		/// Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
		/// AddFollowers goals/{goal_gid}/addFollowers
		/// </summary>
		/// <param name="requestBody">The followers to be added as collaborators</param>
		/// <returns>Successfully added users as collaborators.</returns>
		public async Task<AddFollowersReturn> AddFollowersAsync(AddFollowersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/addFollowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddFollowersReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a supporting goal relationship
		/// Creates a goal relationship by adding a supporting resource to a given goal.
		/// 
		/// Returns the newly created goal relationship record.
		/// AddSupportingRelationship goals/{goal_gid}/addSupportingRelationship
		/// </summary>
		/// <param name="requestBody">The supporting resource to be added to the goal</param>
		/// <returns>Successfully created the goal relationship.</returns>
		public async Task<AddSupportingRelationshipReturn> AddSupportingRelationshipAsync(AddSupportingRelationshipPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/addSupportingRelationship";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddSupportingRelationshipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get parent goals from a goal
		/// Returns a compact representation of all of the parent goals of a goal.
		/// GetParentGoalsForGoal goals/{goal_gid}/parentGoals
		/// </summary>
		/// <returns>Successfully retrieved the specified goal's parent goals.</returns>
		public async Task<GetParentGoalsForGoalReturn> GetParentGoalsForGoalAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/parentGoals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetParentGoalsForGoalReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a collaborator from a goal
		/// Removes followers from a goal. Returns the goal the followers were removed from.
		/// Each goal can be associated with zero or more followers in the system.
		/// Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
		/// RemoveFollowers goals/{goal_gid}/removeFollowers
		/// </summary>
		/// <param name="requestBody">The followers to be removed as collaborators</param>
		/// <returns>Successfully removed users as collaborators.</returns>
		public async Task<RemoveFollowersReturn> RemoveFollowersAsync(RemoveFollowersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/removeFollowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveFollowersReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a supporting goal relationship
		/// Removes a goal relationship for a given parent goal.
		/// RemoveSupportingRelationship goals/{goal_gid}/removeSupportingRelationship
		/// </summary>
		/// <param name="requestBody">The supporting resource to be removed from the goal</param>
		/// <returns>Successfully removed the goal relationship.</returns>
		public async Task<RemoveSupportingRelationshipReturn> RemoveSupportingRelationshipAsync(RemoveSupportingRelationshipPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/removeSupportingRelationship";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveSupportingRelationshipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a goal metric
		/// Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
		/// CreateGoalMetric goals/{goal_gid}/setMetric
		/// </summary>
		/// <param name="requestBody">The goal metric to create.</param>
		/// <returns>Successfully created a new goal metric.</returns>
		public async Task<CreateGoalMetricReturn> CreateGoalMetricAsync(CreateGoalMetricPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/setMetric";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGoalMetricReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a goal metric
		/// Updates a goal's existing metric's `current_number_value` if one exists,
		/// otherwise responds with a 400 status code.
		/// 
		/// Returns the complete updated goal metric record.
		/// UpdateGoalMetric goals/{goal_gid}/setMetricCurrentValue
		/// </summary>
		/// <param name="requestBody">The updated fields for the goal metric.</param>
		/// <returns>Successfully updated the goal metric.</returns>
		public async Task<UpdateGoalMetricReturn> UpdateGoalMetricAsync(UpdateGoalMetricPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "goals/{goal_gid}/setMetricCurrentValue";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateGoalMetricReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a job by id
		/// Returns the full record for a job.
		/// GetJob jobs/{job_gid}
		/// </summary>
		/// <returns>Successfully retrieved Job.</returns>
		public async Task<GetJobReturn> GetJobAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/{job_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an organization export request
		/// This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
		/// CreateOrganizationExport organization_exports
		/// </summary>
		/// <param name="requestBody">The organization to export.</param>
		public async Task CreateOrganizationExportAsync(CreateOrganizationExportPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organization_exports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details on an org export request
		/// Returns details of a previously-requested Organization export.
		/// GetOrganizationExport organization_exports/{organization_export_gid}
		/// </summary>
		/// <returns>Successfully retrieved organization export object.</returns>
		public async Task<GetOrganizationExportReturn> GetOrganizationExportAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organization_exports/{organization_export_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrganizationExportReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple portfolio memberships
		/// Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
		/// GetPortfolioMemberships portfolio_memberships
		/// </summary>
		/// <returns>Successfully retrieved portfolio memberships.</returns>
		public async Task<GetPortfolioMembershipsReturn> GetPortfolioMembershipsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolio_memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfolioMembershipsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a portfolio membership
		/// Returns the complete portfolio record for a single portfolio membership.
		/// GetPortfolioMembership portfolio_memberships/{portfolio_membership_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested portfolio membership.</returns>
		public async Task<GetPortfolioMembershipReturn> GetPortfolioMembershipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolio_memberships/{portfolio_membership_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfolioMembershipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple portfolios
		/// Returns a list of the portfolios in compact representation that are owned by the current API user.
		/// GetPortfolios portfolios
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="workspace">The workspace or organization to filter portfolios on.</param>
		/// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own.</param>
		/// <returns>Successfully retrieved portfolios.</returns>
		public async Task<GetPortfoliosReturn> GetPortfoliosAsync(int limit, string offset, string workspace, string owner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&owner=" + (owner==null? "" : System.Uri.EscapeDataString(owner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfoliosReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a portfolio
		/// Creates a new portfolio in the given workspace with the supplied name.
		/// 
		/// Note that portfolios created in the Asana UI may have some state
		/// (like the “Priority” custom field) which is automatically added
		/// to the portfolio when it is created. Portfolios created via our
		/// API will *not* be created with the same initial state to allow
		/// integrations to create their own starting state on a portfolio.
		/// CreatePortfolio portfolios
		/// </summary>
		/// <param name="requestBody">The portfolio to create.</param>
		public async Task CreatePortfolioAsync(CreatePortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a portfolio
		/// An existing portfolio can be deleted by making a DELETE request on
		/// the URL for that portfolio.
		/// 
		/// Returns an empty data record.
		/// DeletePortfolio portfolios/{portfolio_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified portfolio.</returns>
		public async Task<DeletePortfolioReturn> DeletePortfolioAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a portfolio
		/// Returns the complete portfolio record for a single portfolio.
		/// GetPortfolio portfolios/{portfolio_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested portfolio.</returns>
		public async Task<GetPortfolioReturn> GetPortfolioAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a portfolio
		/// An existing portfolio can be updated by making a PUT request on the URL for
		/// that portfolio. Only the fields provided in the `data` block will be updated;
		/// any unspecified fields will remain unchanged.
		/// 
		/// Returns the complete updated portfolio record.
		/// UpdatePortfolio portfolios/{portfolio_gid}
		/// </summary>
		/// <param name="requestBody">The updated fields for the portfolio.</param>
		/// <returns>Successfully updated the portfolio.</returns>
		public async Task<UpdatePortfolioReturn> UpdatePortfolioAsync(UpdatePortfolioPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a custom field to a portfolio
		/// Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
		/// AddCustomFieldSettingForPortfolio portfolios/{portfolio_gid}/addCustomFieldSetting
		/// </summary>
		/// <param name="requestBody">Information about the custom field setting.</param>
		/// <returns>Successfully added the custom field to the portfolio.</returns>
		public async Task<AddCustomFieldSettingForPortfolioReturn> AddCustomFieldSettingForPortfolioAsync(AddCustomFieldSettingForPortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/addCustomFieldSetting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddCustomFieldSettingForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a portfolio item
		/// Add an item to a portfolio.
		/// Returns an empty data block.
		/// AddItemForPortfolio portfolios/{portfolio_gid}/addItem
		/// </summary>
		/// <param name="requestBody">Information about the item being inserted.</param>
		/// <returns>Successfully added the item to the portfolio.</returns>
		public async Task<AddItemForPortfolioReturn> AddItemForPortfolioAsync(AddItemForPortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/addItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddItemForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add users to a portfolio
		/// Adds the specified list of users as members of the portfolio.
		/// Returns the updated portfolio record.
		/// AddMembersForPortfolio portfolios/{portfolio_gid}/addMembers
		/// </summary>
		/// <param name="requestBody">Information about the members being added.</param>
		/// <returns>Successfully added members to the portfolio.</returns>
		public async Task<AddMembersForPortfolioReturn> AddMembersForPortfolioAsync(AddMembersForPortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/addMembers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddMembersForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a portfolio's custom fields
		/// Returns a list of all of the custom fields settings on a portfolio, in compact form.
		/// GetCustomFieldSettingsForPortfolio portfolios/{portfolio_gid}/custom_field_settings
		/// </summary>
		/// <returns>Successfully retrieved custom field settings objects for a portfolio.</returns>
		public async Task<GetCustomFieldSettingsForPortfolioReturn> GetCustomFieldSettingsForPortfolioAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/custom_field_settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomFieldSettingsForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get portfolio items
		/// Get a list of the items in compact form in a portfolio.
		/// GetItemsForPortfolio portfolios/{portfolio_gid}/items
		/// </summary>
		/// <returns>Successfully retrieved the requested portfolio's items.</returns>
		public async Task<GetItemsForPortfolioReturn> GetItemsForPortfolioAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/items";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetItemsForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get memberships from a portfolio
		/// Returns the compact portfolio membership records for the portfolio.
		/// GetPortfolioMembershipsForPortfolio portfolios/{portfolio_gid}/portfolio_memberships
		/// </summary>
		/// <returns>Successfully retrieved the requested portfolio's memberships.</returns>
		public async Task<GetPortfolioMembershipsForPortfolioReturn> GetPortfolioMembershipsForPortfolioAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/portfolio_memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfolioMembershipsForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a custom field from a portfolio
		/// Removes a custom field setting from a portfolio.
		/// RemoveCustomFieldSettingForPortfolio portfolios/{portfolio_gid}/removeCustomFieldSetting
		/// </summary>
		/// <param name="requestBody">Information about the custom field setting being removed.</param>
		/// <returns>Successfully removed the custom field from the portfolio.</returns>
		public async Task<RemoveCustomFieldSettingForPortfolioReturn> RemoveCustomFieldSettingForPortfolioAsync(RemoveCustomFieldSettingForPortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/removeCustomFieldSetting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveCustomFieldSettingForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a portfolio item
		/// Remove an item from a portfolio.
		/// Returns an empty data block.
		/// RemoveItemForPortfolio portfolios/{portfolio_gid}/removeItem
		/// </summary>
		/// <param name="requestBody">Information about the item being removed.</param>
		/// <returns>Successfully removed the item from the portfolio.</returns>
		public async Task<RemoveItemForPortfolioReturn> RemoveItemForPortfolioAsync(RemoveItemForPortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/removeItem";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveItemForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove users from a portfolio
		/// Removes the specified list of users from members of the portfolio.
		/// Returns the updated portfolio record.
		/// RemoveMembersForPortfolio portfolios/{portfolio_gid}/removeMembers
		/// </summary>
		/// <param name="requestBody">Information about the members being removed.</param>
		/// <returns>Successfully removed the members from the portfolio.</returns>
		public async Task<RemoveMembersForPortfolioReturn> RemoveMembersForPortfolioAsync(RemoveMembersForPortfolioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolios/{portfolio_gid}/removeMembers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveMembersForPortfolioReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project brief
		/// Deletes a specific, existing project brief.
		/// 
		/// Returns an empty data record.
		/// DeleteProjectBrief project_briefs/{project_brief_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified project brief.</returns>
		public async Task<DeleteProjectBriefReturn> DeleteProjectBriefAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_briefs/{project_brief_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProjectBriefReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a project brief
		/// Get the full record for a project brief.
		/// GetProjectBrief project_briefs/{project_brief_gid}
		/// </summary>
		/// <returns>Successfully retrieved the record for a project brief.</returns>
		public async Task<GetProjectBriefReturn> GetProjectBriefAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_briefs/{project_brief_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectBriefReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a project brief
		/// An existing project brief can be updated by making a PUT request on the URL for
		/// that project brief. Only the fields provided in the `data` block will be updated;
		/// any unspecified fields will remain unchanged.
		/// 
		/// Returns the complete updated project brief record.
		/// UpdateProjectBrief project_briefs/{project_brief_gid}
		/// </summary>
		/// <param name="requestBody">The updated fields for the project brief.</param>
		/// <returns>Successfully updated the project brief.</returns>
		public async Task<UpdateProjectBriefReturn> UpdateProjectBriefAsync(UpdateProjectBriefPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_briefs/{project_brief_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectBriefReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a project membership
		/// Returns the complete project record for a single project membership.
		/// GetProjectMembership project_memberships/{project_membership_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested project membership.</returns>
		public async Task<GetProjectMembershipReturn> GetProjectMembershipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_memberships/{project_membership_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectMembershipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a project status
		/// *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
		/// 
		/// Deletes a specific, existing project status update.
		/// 
		/// Returns an empty data record.
		/// DeleteProjectStatus project_statuses/{project_status_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified project status.</returns>
		public async Task<DeleteProjectStatusReturn> DeleteProjectStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_statuses/{project_status_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProjectStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a project status
		/// *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
		/// 
		/// Returns the complete record for a single status update.
		/// GetProjectStatus project_statuses/{project_status_gid}
		/// </summary>
		/// <returns>Successfully retrieved the specified project's status updates.</returns>
		public async Task<GetProjectStatusReturn> GetProjectStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_statuses/{project_status_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple project templates
		/// Returns the compact project template records for all project templates in the given team or workspace.
		/// GetProjectTemplates project_templates
		/// </summary>
		/// <param name="workspace">The workspace to filter results on.</param>
		/// <param name="team">The team to filter projects on.</param>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the requested team's or workspace's project templates.</returns>
		public async Task<GetProjectTemplatesReturn> GetProjectTemplatesAsync(string workspace, string team, int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_templates?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&team=" + (team==null? "" : System.Uri.EscapeDataString(team))+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectTemplatesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a project template
		/// Returns the complete project template record for a single project template.
		/// GetProjectTemplate project_templates/{project_template_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested project template.</returns>
		public async Task<GetProjectTemplateReturn> GetProjectTemplateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_templates/{project_template_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectTemplateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Instantiate a project from a project template
		/// Creates and returns a job that will asynchronously handle the project instantiation.
		/// 
		/// To form this request, it is recommended to first make a request to [get a project template](/docs/get-a-project-template). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.
		/// 
		/// _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](/docs/workspace) parameter._
		/// InstantiateProject project_templates/{project_template_gid}/instantiateProject
		/// </summary>
		/// <param name="requestBody">Describes the inputs used for instantiating a project, such as the resulting project's name, which team it should be created in, and values for date variables.</param>
		public async Task InstantiateProjectAsync(InstantiateProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_templates/{project_template_gid}/instantiateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get multiple projects
		/// Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned.
		/// *Note: This endpoint may timeout for large domains. Try filtering by team!*
		/// GetProjects projects
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="workspace">The workspace or organization to filter projects on.</param>
		/// <param name="team">The team to filter projects on.</param>
		/// <param name="archived">Only return projects whose `archived` field takes on the value of this parameter.</param>
		/// <returns>Successfully retrieved projects.</returns>
		public async Task<GetProjectsReturn> GetProjectsAsync(int limit, string offset, string workspace, string team, bool archived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&team=" + (team==null? "" : System.Uri.EscapeDataString(team))+"&archived="+archived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a project
		/// Create a new project in a workspace or team.
		/// 
		/// Every project is required to be created in a specific workspace or
		/// organization, and this cannot be changed once set. Note that you can use
		/// the `workspace` parameter regardless of whether or not it is an
		/// organization.
		/// 
		/// If the workspace for your project is an organization, you must also
		/// supply a `team` to share the project with.
		/// 
		/// Returns the full record of the newly created project.
		/// CreateProject projects
		/// </summary>
		/// <param name="requestBody">The project to create.</param>
		public async Task CreateProjectAsync(CreateProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project
		/// A specific, existing project can be deleted by making a DELETE request on
		/// the URL for that project.
		/// 
		/// Returns an empty data record.
		/// DeleteProject projects/{project_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified project.</returns>
		public async Task<DeleteProjectReturn> DeleteProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a project
		/// Returns the complete project record for a single project.
		/// GetProject projects/{project_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested project.</returns>
		public async Task<GetProjectReturn> GetProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a project
		/// A specific, existing project can be updated by making a PUT request on
		/// the URL for that project. Only the fields provided in the `data` block
		/// will be updated; any unspecified fields will remain unchanged.
		/// 
		/// When using this method, it is best to specify only those fields you wish
		/// to change, or else you may overwrite changes made by another user since
		/// you last retrieved the task.
		/// 
		/// Returns the complete updated project record.
		/// UpdateProject projects/{project_gid}
		/// </summary>
		/// <param name="requestBody">The updated fields for the project.</param>
		/// <returns>Successfully updated the project.</returns>
		public async Task<UpdateProjectReturn> UpdateProjectAsync(UpdateProjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a custom field to a project
		/// Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
		/// AddCustomFieldSettingForProject projects/{project_gid}/addCustomFieldSetting
		/// </summary>
		/// <param name="requestBody">Information about the custom field setting.</param>
		/// <returns>Successfully added the custom field to the project.</returns>
		public async Task<AddCustomFieldSettingForProjectReturn> AddCustomFieldSettingForProjectAsync(AddCustomFieldSettingForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/addCustomFieldSetting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddCustomFieldSettingForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add followers to a project
		/// Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation.
		/// Returns the updated project record.
		/// AddFollowersForProject projects/{project_gid}/addFollowers
		/// </summary>
		/// <param name="requestBody">Information about the followers being added.</param>
		/// <returns>Successfully added followers to the project.</returns>
		public async Task<AddFollowersForProjectReturn> AddFollowersForProjectAsync(AddFollowersForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/addFollowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddFollowersForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add users to a project
		/// Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user's default notification settings (i.e., in the "Notifcations" tab of "My Profile Settings") will override this endpoint's default behavior of setting "Tasks added" notifications to `false`.
		/// Returns the updated project record.
		/// AddMembersForProject projects/{project_gid}/addMembers
		/// </summary>
		/// <param name="requestBody">Information about the members being added.</param>
		/// <returns>Successfully added members to the project.</returns>
		public async Task<AddMembersForProjectReturn> AddMembersForProjectAsync(AddMembersForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/addMembers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddMembersForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a project's custom fields
		/// Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://developers.asana.com/docs/#input-output-options) for more information.
		/// GetCustomFieldSettingsForProject projects/{project_gid}/custom_field_settings
		/// </summary>
		/// <returns>Successfully retrieved custom field settings objects for a project.</returns>
		public async Task<GetCustomFieldSettingsForProjectReturn> GetCustomFieldSettingsForProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/custom_field_settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomFieldSettingsForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Duplicate a project
		/// Creates and returns a job that will asynchronously handle the duplication.
		/// DuplicateProject projects/{project_gid}/duplicate
		/// </summary>
		/// <param name="requestBody">Describes the duplicate's name and the elements that will be duplicated.</param>
		public async Task DuplicateProjectAsync(DuplicateProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/duplicate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a project brief
		/// Creates a new project brief.
		/// 
		/// Returns the full record of the newly created project brief.
		/// CreateProjectBrief projects/{project_gid}/project_briefs
		/// </summary>
		/// <param name="requestBody">The project brief to create.</param>
		public async Task CreateProjectBriefAsync(CreateProjectBriefPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/project_briefs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get memberships from a project
		/// Returns the compact project membership records for the project.
		/// GetProjectMembershipsForProject projects/{project_gid}/project_memberships
		/// </summary>
		/// <returns>Successfully retrieved the requested project's memberships.</returns>
		public async Task<GetProjectMembershipsForProjectReturn> GetProjectMembershipsForProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/project_memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectMembershipsForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get statuses from a project
		/// *Deprecated: new integrations should prefer the `/status_updates` route.*
		/// 
		/// Returns the compact project status update records for all updates on the project.
		/// GetProjectStatusesForProject projects/{project_gid}/project_statuses
		/// </summary>
		/// <param name="project_gid">Globally unique identifier for the project.</param>
		/// <param name="opt_pretty">Provides “pretty” output.
		///Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.</param>
		/// <param name="opt_fields">Defines fields to return.
		///Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
		///The id of included objects will always be returned, regardless of the field options.</param>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the specified project's status updates.</returns>
		public async Task<GetProjectStatusesForProjectReturn> GetProjectStatusesForProjectAsync(string project_gid, bool opt_pretty, string[] opt_fields, int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_gid==null? "" : System.Uri.EscapeDataString(project_gid))+"/project_statuses&opt_pretty="+opt_pretty+"&"+string.Join("&", opt_fields.Select(z => $"opt_fields={System.Uri.EscapeDataString(z.ToString())}"))+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectStatusesForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a project status
		/// *Deprecated: new integrations should prefer the `/status_updates` route.*
		/// 
		/// Creates a new status update on the project.
		/// 
		/// Returns the full record of the newly created project status update.
		/// CreateProjectStatusForProject projects/{project_gid}/project_statuses
		/// </summary>
		/// <param name="requestBody">The project status to create.</param>
		public async Task CreateProjectStatusForProjectAsync(CreateProjectStatusForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/project_statuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a custom field from a project
		/// Removes a custom field setting from a project.
		/// RemoveCustomFieldSettingForProject projects/{project_gid}/removeCustomFieldSetting
		/// </summary>
		/// <param name="requestBody">Information about the custom field setting being removed.</param>
		/// <returns>Successfully removed the custom field from the project.</returns>
		public async Task<RemoveCustomFieldSettingForProjectReturn> RemoveCustomFieldSettingForProjectAsync(RemoveCustomFieldSettingForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/removeCustomFieldSetting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveCustomFieldSettingForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove followers from a project
		/// Removes the specified list of users from following the project, this will not affect project membership status.
		/// Returns the updated project record.
		/// RemoveFollowersForProject projects/{project_gid}/removeFollowers
		/// </summary>
		/// <param name="requestBody">Information about the followers being removed.</param>
		/// <returns>Successfully removed followers from the project.</returns>
		public async Task<RemoveFollowersForProjectReturn> RemoveFollowersForProjectAsync(RemoveFollowersForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/removeFollowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveFollowersForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove users from a project
		/// Removes the specified list of users from members of the project.
		/// Returns the updated project record.
		/// RemoveMembersForProject projects/{project_gid}/removeMembers
		/// </summary>
		/// <param name="requestBody">Information about the members being removed.</param>
		/// <returns>Successfully removed the members from the project.</returns>
		public async Task<RemoveMembersForProjectReturn> RemoveMembersForProjectAsync(RemoveMembersForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/removeMembers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveMembersForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a project template from a project
		/// Creates and returns a job that will asynchronously handle the project template creation. Note that
		/// while the resulting project template can be accessed with the API, it won't be visible in the Asana
		/// UI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).
		/// ProjectSaveAsTemplate projects/{project_gid}/saveAsTemplate
		/// </summary>
		/// <param name="requestBody">Describes the inputs used for creating a project template, such as the resulting project template's name, which team it should be created in.</param>
		public async Task ProjectSaveAsTemplateAsync(ProjectSaveAsTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/saveAsTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get sections in a project
		/// Returns the compact records for all sections in the specified project.
		/// GetSectionsForProject projects/{project_gid}/sections
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved sections in project.</returns>
		public async Task<GetSectionsForProjectReturn> GetSectionsForProjectAsync(int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/sections?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSectionsForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a section in a project
		/// Creates a new section in a project.
		/// Returns the full record of the newly created section.
		/// CreateSectionForProject projects/{project_gid}/sections
		/// </summary>
		/// <param name="requestBody">The section to create.</param>
		public async Task CreateSectionForProjectAsync(CreateSectionForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/sections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Move or Insert sections
		/// Move sections relative to each other. One of
		/// `before_section` or `after_section` is required.
		/// 
		/// Sections cannot be moved between projects.
		/// 
		/// Returns an empty data block.
		/// InsertSectionForProject projects/{project_gid}/sections/insert
		/// </summary>
		/// <param name="requestBody">The section's move action.</param>
		/// <returns>Successfully moved the specified section.</returns>
		public async Task<InsertSectionForProjectReturn> InsertSectionForProjectAsync(InsertSectionForProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/sections/insert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InsertSectionForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get task count of a project
		/// Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/input-output-options) using `opt_fields` to get any information from this endpoint.
		/// 
		/// This endpoint has an additional [rate limit](/docs/standard-rate-limits) and each field counts especially high against our [cost limits](/docs/cost-limits).
		/// 
		/// Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.
		/// GetTaskCountsForProject projects/{project_gid}/task_counts
		/// </summary>
		/// <returns>Successfully retrieved the requested project's task counts.</returns>
		public async Task<GetTaskCountsForProjectReturn> GetTaskCountsForProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/task_counts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTaskCountsForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tasks from a project
		/// Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
		/// GetTasksForProject projects/{project_gid}/tasks
		/// </summary>
		/// <returns>Successfully retrieved the requested project's tasks.</returns>
		public async Task<GetTasksForProjectReturn> GetTasksForProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{project_gid}/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTasksForProjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a section
		/// A specific, existing section can be deleted by making a DELETE request on
		/// the URL for that section.
		/// 
		/// Note that sections must be empty to be deleted.
		/// 
		/// The last remaining section cannot be deleted.
		/// 
		/// Returns an empty data block.
		/// DeleteSection sections/{section_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified section.</returns>
		public async Task<DeleteSectionReturn> DeleteSectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/{section_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a section
		/// Returns the complete record for a single section.
		/// GetSection sections/{section_gid}
		/// </summary>
		/// <returns>Successfully retrieved section.</returns>
		public async Task<GetSectionReturn> GetSectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/{section_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a section
		/// A specific, existing section can be updated by making a PUT request on
		/// the URL for that project. Only the fields provided in the `data` block
		/// will be updated; any unspecified fields will remain unchanged. (note that
		/// at this time, the only field that can be updated is the `name` field.)
		/// 
		/// When using this method, it is best to specify only those fields you wish
		/// to change, or else you may overwrite changes made by another user since
		/// you last retrieved the task.
		/// 
		/// Returns the complete updated section record.
		/// UpdateSection sections/{section_gid}
		/// </summary>
		/// <param name="requestBody">The section to create.</param>
		/// <returns>Successfully updated the specified section.</returns>
		public async Task<UpdateSectionReturn> UpdateSectionAsync(UpdateSectionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/{section_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add task to section
		/// Add a task to a specific, existing section. This will remove the task from other sections of the project.
		/// 
		/// The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.
		/// 
		/// This does not work for separators (tasks with the resource_subtype of section).
		/// AddTaskForSection sections/{section_gid}/addTask
		/// </summary>
		/// <param name="requestBody">The task and optionally the insert location.</param>
		/// <returns>Successfully added the task.</returns>
		public async Task<AddTaskForSectionReturn> AddTaskForSectionAsync(AddTaskForSectionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/{section_gid}/addTask";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddTaskForSectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get tasks from a section
		/// *Board view only*: Returns the compact section records for all tasks within the given section.
		/// GetTasksForSection sections/{section_gid}/tasks
		/// </summary>
		/// <returns>Successfully retrieved the section's tasks.</returns>
		public async Task<GetTasksForSectionReturn> GetTasksForSectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sections/{section_gid}/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTasksForSectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status updates from an object
		/// Returns the compact status update records for all updates on the object.
		/// GetStatusesForObject status_updates
		/// </summary>
		/// <param name="parent">Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal.</param>
		/// <param name="created_since">Only return statuses that have been created since the given time.</param>
		/// <returns>Successfully retrieved the specified object's status updates.</returns>
		public async Task<GetStatusesForObjectReturn> GetStatusesForObjectAsync(string parent, System.DateTimeOffset created_since, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status_updates?parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent))+"&created_since=" + created_since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStatusesForObjectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a status update
		/// Creates a new status update on an object.
		/// Returns the full record of the newly created status update.
		/// CreateStatusForObject status_updates
		/// </summary>
		/// <param name="requestBody">The status update to create.</param>
		public async Task CreateStatusForObjectAsync(CreateStatusForObjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status_updates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a status update
		/// Deletes a specific, existing status update.
		/// 
		/// Returns an empty data record.
		/// DeleteStatus status_updates/{status_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified status.</returns>
		public async Task<DeleteStatusReturn> DeleteStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status_updates/{status_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a status update
		/// Returns the complete record for a single status update.
		/// GetStatus status_updates/{status_gid}
		/// </summary>
		/// <returns>Successfully retrieved the specified object's status updates.</returns>
		public async Task<GetStatusReturn> GetStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status_updates/{status_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a story
		/// Deletes a story. A user can only delete stories they have created.
		/// 
		/// Returns an empty data record.
		/// DeleteStory stories/{story_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified story.</returns>
		public async Task<DeleteStoryReturn> DeleteStoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stories/{story_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteStoryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a story
		/// Returns the full record for a single story.
		/// GetStory stories/{story_gid}
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the specified story.</returns>
		public async Task<GetStoryReturn> GetStoryAsync(int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stories/{story_gid}?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStoryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a story
		/// Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
		/// UpdateStory stories/{story_gid}
		/// </summary>
		/// <param name="requestBody">The comment story to update.</param>
		/// <returns>Successfully retrieved the specified story.</returns>
		public async Task<UpdateStoryReturn> UpdateStoryAsync(UpdateStoryPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stories/{story_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateStoryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get multiple tags
		/// Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
		/// GetTags tags
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="workspace">The workspace to filter tags on.</param>
		/// <returns>Successfully retrieved the specified set of tags.</returns>
		public async Task<GetTagsReturn> GetTagsAsync(int limit, string offset, string workspace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTagsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a tag
		/// Creates a new tag in a workspace or organization.
		/// 
		/// Every tag is required to be created in a specific workspace or
		/// organization, and this cannot be changed once set. Note that you can use
		/// the workspace parameter regardless of whether or not it is an
		/// organization.
		/// 
		/// Returns the full record of the newly created tag.
		/// CreateTag tags
		/// </summary>
		/// <param name="requestBody">The tag to create.</param>
		public async Task CreateTagAsync(CreateTagPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a tag
		/// A specific, existing tag can be deleted by making a DELETE request on
		/// the URL for that tag.
		/// 
		/// Returns an empty data record.
		/// DeleteTag tags/{tag_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified tag.</returns>
		public async Task<DeleteTagReturn> DeleteTagAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{tag_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTagReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a tag
		/// Returns the complete tag record for a single tag.
		/// GetTag tags/{tag_gid}
		/// </summary>
		/// <returns>Successfully retrieved the specified tag.</returns>
		public async Task<GetTagReturn> GetTagAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{tag_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTagReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a tag
		/// Updates the properties of a tag. Only the fields provided in the `data`
		/// block will be updated; any unspecified fields will remain unchanged.
		/// 
		/// When using this method, it is best to specify only those fields you wish
		/// to change, or else you may overwrite changes made by another user since
		/// you last retrieved the tag.
		/// 
		/// Returns the complete updated tag record.
		/// UpdateTag tags/{tag_gid}
		/// </summary>
		/// <returns>Successfully updated the specified tag.</returns>
		public async Task<UpdateTagReturn> UpdateTagAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{tag_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTagReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tasks from a tag
		/// Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
		/// GetTasksForTag tags/{tag_gid}/tasks
		/// </summary>
		/// <returns>Successfully retrieved the tasks associated with the specified tag.</returns>
		public async Task<GetTasksForTagReturn> GetTasksForTagAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{tag_gid}/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTasksForTagReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple tasks
		/// Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.
		/// 
		/// For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
		/// GetTasks tasks
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="assignee">The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified.
		///*Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*</param>
		/// <param name="project">The project to filter tasks on.</param>
		/// <param name="section">The section to filter tasks on.
		///*Note: Currently, this is only supported in board views.*</param>
		/// <param name="workspace">The workspace to filter tasks on.
		///*Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*</param>
		/// <param name="completed_since">Only return tasks that are either incomplete or that have been completed since this time.</param>
		/// <param name="modified_since">Only return tasks that have been modified since the given time.
		///
		///*Note: A task is considered “modified” if any of its properties
		///change, or associations between it and other objects are modified
		///(e.g.  a task being added to a project). A task is not considered
		///modified just because another object it is associated with (e.g. a
		///subtask) is modified. Actions that count as modifying the task
		///include assigning, renaming, completing, and adding stories.*</param>
		/// <returns>Successfully retrieved requested tasks.</returns>
		public async Task<GetTasksReturn> GetTasksAsync(int limit, string offset, string assignee, string project, string section, string workspace, System.DateTimeOffset completed_since, System.DateTimeOffset modified_since, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&assignee=" + (assignee==null? "" : System.Uri.EscapeDataString(assignee))+"&project=" + (project==null? "" : System.Uri.EscapeDataString(project))+"&section=" + (section==null? "" : System.Uri.EscapeDataString(section))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&completed_since=" + completed_since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&modified_since=" + modified_since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTasksReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a task
		/// Creating a new task is as easy as POSTing to the `/tasks` endpoint with a
		/// data block containing the fields you’d like to set on the task. Any
		/// unspecified fields will take on default values.
		/// 
		/// Every task is required to be created in a specific workspace, and this
		/// workspace cannot be changed once set. The workspace need not be set
		/// explicitly if you specify `projects` or a `parent` task instead.
		/// CreateTask tasks
		/// </summary>
		/// <param name="requestBody">The task to create.</param>
		public async Task CreateTaskAsync(CreateTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a task
		/// A specific, existing task can be deleted by making a DELETE request on
		/// the URL for that task. Deleted tasks go into the “trash” of the user
		/// making the delete request. Tasks can be recovered from the trash within a
		/// period of 30 days; afterward they are completely removed from the system.
		/// 
		/// Returns an empty data record.
		/// DeleteTask tasks/{task_gid}
		/// </summary>
		/// <returns>Successfully deleted the specified task.</returns>
		public async Task<DeleteTaskReturn> DeleteTaskAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a task
		/// Returns the complete task record for a single task.
		/// GetTask tasks/{task_gid}
		/// </summary>
		/// <returns>Successfully retrieved the specified task.</returns>
		public async Task<GetTaskReturn> GetTaskAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a task
		/// A specific, existing task can be updated by making a PUT request on the
		/// URL for that task. Only the fields provided in the `data` block will be
		/// updated; any unspecified fields will remain unchanged.
		/// 
		/// When using this method, it is best to specify only those fields you wish
		/// to change, or else you may overwrite changes made by another user since
		/// you last retrieved the task.
		/// 
		/// Returns the complete updated task record.
		/// UpdateTask tasks/{task_gid}
		/// </summary>
		/// <param name="requestBody">The task to update.</param>
		/// <returns>Successfully updated the specified task.</returns>
		public async Task<UpdateTaskReturn> UpdateTaskAsync(UpdateTaskPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set dependencies for a task
		/// Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
		/// AddDependenciesForTask tasks/{task_gid}/addDependencies
		/// </summary>
		/// <param name="requestBody">The list of tasks to set as dependencies.</param>
		/// <returns>Successfully set the specified dependencies on the task.</returns>
		public async Task<AddDependenciesForTaskReturn> AddDependenciesForTaskAsync(AddDependenciesForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/addDependencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddDependenciesForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set dependents for a task
		/// Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
		/// AddDependentsForTask tasks/{task_gid}/addDependents
		/// </summary>
		/// <param name="requestBody">The list of tasks to add as dependents.</param>
		/// <returns>Successfully set the specified dependents on the given task.</returns>
		public async Task<AddDependentsForTaskReturn> AddDependentsForTaskAsync(AddDependentsForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/addDependents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddDependentsForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add followers to a task
		/// Adds followers to a task. Returns an empty data block.
		/// Each task can be associated with zero or more followers in the system.
		/// Requests to add/remove followers, if successful, will return the complete updated task record, described above.
		/// AddFollowersForTask tasks/{task_gid}/addFollowers
		/// </summary>
		/// <param name="requestBody">The followers to add to the task.</param>
		/// <returns>Successfully added the specified followers to the task.</returns>
		public async Task<AddFollowersForTaskReturn> AddFollowersForTaskAsync(AddFollowersForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/addFollowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddFollowersForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a project to a task
		/// Adds the task to the specified project, in the optional location
		/// specified. If no location arguments are given, the task will be added to
		/// the end of the project.
		/// 
		/// `addProject` can also be used to reorder a task within a project or
		/// section that already contains it.
		/// 
		/// At most one of `insert_before`, `insert_after`, or `section` should be
		/// specified. Inserting into a section in an non-order-dependent way can be
		/// done by specifying section, otherwise, to insert within a section in a
		/// particular place, specify `insert_before` or `insert_after` and a task
		/// within the section to anchor the position of this task.
		/// 
		/// Returns an empty data block.
		/// AddProjectForTask tasks/{task_gid}/addProject
		/// </summary>
		/// <param name="requestBody">The project to add the task to.</param>
		/// <returns>Successfully added the specified project to the task.</returns>
		public async Task<AddProjectForTaskReturn> AddProjectForTaskAsync(AddProjectForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/addProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddProjectForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a tag to a task
		/// Adds a tag to a task. Returns an empty data block.
		/// AddTagForTask tasks/{task_gid}/addTag
		/// </summary>
		/// <param name="requestBody">The tag to add to the task.</param>
		/// <returns>Successfully added the specified tag to the task.</returns>
		public async Task<AddTagForTaskReturn> AddTagForTaskAsync(AddTagForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/addTag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddTagForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get dependencies from a task
		/// Returns the compact representations of all of the dependencies of a task.
		/// GetDependenciesForTask tasks/{task_gid}/dependencies
		/// </summary>
		/// <returns>Successfully retrieved the specified task's dependencies.</returns>
		public async Task<GetDependenciesForTaskReturn> GetDependenciesForTaskAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/dependencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDependenciesForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get dependents from a task
		/// Returns the compact representations of all of the dependents of a task.
		/// GetDependentsForTask tasks/{task_gid}/dependents
		/// </summary>
		/// <returns>Successfully retrieved the specified dependents of the task.</returns>
		public async Task<GetDependentsForTaskReturn> GetDependentsForTaskAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/dependents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDependentsForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Duplicate a task
		/// Creates and returns a job that will asynchronously handle the duplication.
		/// DuplicateTask tasks/{task_gid}/duplicate
		/// </summary>
		/// <param name="requestBody">Describes the duplicate's name and the fields that will be duplicated.</param>
		public async Task DuplicateTaskAsync(DuplicateTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/duplicate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get projects a task is in
		/// Returns a compact representation of all of the projects the task is in.
		/// GetProjectsForTask tasks/{task_gid}/projects
		/// </summary>
		/// <returns>Successfully retrieved the projects for the given task.</returns>
		public async Task<GetProjectsForTaskReturn> GetProjectsForTaskAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectsForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unlink dependencies from a task
		/// Unlinks a set of dependencies from this task.
		/// RemoveDependenciesForTask tasks/{task_gid}/removeDependencies
		/// </summary>
		/// <param name="requestBody">The list of tasks to unlink as dependencies.</param>
		/// <returns>Successfully unlinked the dependencies from the specified task.</returns>
		public async Task<RemoveDependenciesForTaskReturn> RemoveDependenciesForTaskAsync(RemoveDependenciesForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/removeDependencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveDependenciesForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unlink dependents from a task
		/// Unlinks a set of dependents from this task.
		/// RemoveDependentsForTask tasks/{task_gid}/removeDependents
		/// </summary>
		/// <param name="requestBody">The list of tasks to remove as dependents.</param>
		/// <returns>Successfully unlinked the specified tasks as dependents.</returns>
		public async Task<RemoveDependentsForTaskReturn> RemoveDependentsForTaskAsync(RemoveDependentsForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/removeDependents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveDependentsForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove followers from a task
		/// Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
		/// RemoveFollowerForTask tasks/{task_gid}/removeFollowers
		/// </summary>
		/// <param name="requestBody">The followers to remove from the task.</param>
		/// <returns>Successfully removed the specified followers from the task.</returns>
		public async Task<RemoveFollowerForTaskReturn> RemoveFollowerForTaskAsync(RemoveFollowerForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/removeFollowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveFollowerForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a project from a task
		/// Removes the task from the specified project. The task will still exist in
		/// the system, but it will not be in the project anymore.
		/// 
		/// Returns an empty data block.
		/// RemoveProjectForTask tasks/{task_gid}/removeProject
		/// </summary>
		/// <param name="requestBody">The project to remove the task from.</param>
		/// <returns>Successfully removed the specified project from the task.</returns>
		public async Task<RemoveProjectForTaskReturn> RemoveProjectForTaskAsync(RemoveProjectForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/removeProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveProjectForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a task
		/// Removes a tag from a task. Returns an empty data block.
		/// RemoveTagForTask tasks/{task_gid}/removeTag
		/// </summary>
		/// <param name="requestBody">The tag to remove from the task.</param>
		/// <returns>Successfully removed the specified tag from the task.</returns>
		public async Task<RemoveTagForTaskReturn> RemoveTagForTaskAsync(RemoveTagForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/removeTag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveTagForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the parent of a task
		/// parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
		/// SetParentForTask tasks/{task_gid}/setParent
		/// </summary>
		/// <param name="requestBody">The new parent of the subtask.</param>
		/// <returns>Successfully changed the parent of the specified subtask.</returns>
		public async Task<SetParentForTaskReturn> SetParentForTaskAsync(SetParentForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/setParent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetParentForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get stories from a task
		/// Returns the compact records for all stories on the task.
		/// GetStoriesForTask tasks/{task_gid}/stories
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the specified task's stories.</returns>
		public async Task<GetStoriesForTaskReturn> GetStoriesForTaskAsync(int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/stories?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStoriesForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a story on a task
		/// Adds a story to a task. This endpoint currently only allows for comment
		/// stories to be created. The comment will be authored by the currently
		/// authenticated user, and timestamped when the server receives the request.
		/// 
		/// Returns the full record for the new story added to the task.
		/// CreateStoryForTask tasks/{task_gid}/stories
		/// </summary>
		/// <param name="requestBody">The story to create.</param>
		public async Task CreateStoryForTaskAsync(CreateStoryForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/stories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get subtasks from a task
		/// Returns a compact representation of all of the subtasks of a task.
		/// GetSubtasksForTask tasks/{task_gid}/subtasks
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the specified task's subtasks.</returns>
		public async Task<GetSubtasksForTaskReturn> GetSubtasksForTaskAsync(int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/subtasks?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSubtasksForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a subtask
		/// Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
		/// CreateSubtaskForTask tasks/{task_gid}/subtasks
		/// </summary>
		/// <param name="requestBody">The new subtask to create.</param>
		public async Task CreateSubtaskForTaskAsync(CreateSubtaskForTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/subtasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a task's tags
		/// Get a compact representation of all of the tags the task has.
		/// GetTagsForTask tasks/{task_gid}/tags
		/// </summary>
		/// <returns>Successfully retrieved the tags for the given task.</returns>
		public async Task<GetTagsForTaskReturn> GetTagsForTaskAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/{task_gid}/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTagsForTaskReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get team memberships
		/// Returns compact team membership records.
		/// GetTeamMemberships team_memberships
		/// </summary>
		/// <param name="team">Globally unique identifier for the team.</param>
		/// <param name="user">A string identifying a user. This can either be the string "me", an email, or the gid of a user. This parameter must be used with the workspace parameter.</param>
		/// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter.</param>
		/// <returns>Successfully retrieved the requested team memberships.</returns>
		public async Task<GetTeamMembershipsReturn> GetTeamMembershipsAsync(string team, string user, string workspace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team_memberships?team=" + (team==null? "" : System.Uri.EscapeDataString(team))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamMembershipsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team membership
		/// Returns the complete team membership record for a single team membership.
		/// GetTeamMembership team_memberships/{team_membership_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested team membership.</returns>
		public async Task<GetTeamMembershipReturn> GetTeamMembershipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team_memberships/{team_membership_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamMembershipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a team
		/// Creates a team within the current workspace.
		/// CreateTeam teams
		/// </summary>
		/// <param name="requestBody">The team to create.</param>
		public async Task CreateTeamAsync(CreateTeamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a team
		/// Updates a team within the current workspace.
		/// UpdateTeam teams
		/// </summary>
		/// <param name="requestBody">The team to update.</param>
		/// <returns>Successfully updated the team.</returns>
		public async Task<UpdateTeamReturn> UpdateTeamAsync(UpdateTeamPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a team
		/// Returns the full record for a single team.
		/// GetTeam teams/{team_gid}
		/// </summary>
		/// <returns>Successfully retrieved the record for a single team.</returns>
		public async Task<GetTeamReturn> GetTeamAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user to a team
		/// The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.
		/// 
		/// Returns the complete team membership record for the newly added user.
		/// AddUserForTeam teams/{team_gid}/addUser
		/// </summary>
		/// <param name="requestBody">The user to add to the team.</param>
		/// <returns>Successfully added user to the team.</returns>
		public async Task<AddUserForTeamReturn> AddUserForTeamAsync(AddUserForTeamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/addUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddUserForTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a team's project templates
		/// Returns the compact project template records for all project templates in the team.
		/// GetProjectTemplatesForTeam teams/{team_gid}/project_templates
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the requested team's project templates.</returns>
		public async Task<GetProjectTemplatesForTeamReturn> GetProjectTemplatesForTeamAsync(int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/project_templates?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectTemplatesForTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a team's projects
		/// Returns the compact project records for all projects in the team.
		/// GetProjectsForTeam teams/{team_gid}/projects
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="archived">Only return projects whose `archived` field takes on the value of this parameter.</param>
		/// <returns>Successfully retrieved the requested team's projects.</returns>
		public async Task<GetProjectsForTeamReturn> GetProjectsForTeamAsync(int limit, string offset, bool archived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/projects?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&archived="+archived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectsForTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a project in a team
		/// Creates a project shared with the given team.
		/// 
		/// Returns the full record of the newly created project.
		/// CreateProjectForTeam teams/{team_gid}/projects
		/// </summary>
		/// <param name="requestBody">The new project to create.</param>
		public async Task CreateProjectForTeamAsync(CreateProjectForTeamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a user from a team
		/// The user making this call must be a member of the team in order to remove themselves or others.
		/// RemoveUserForTeam teams/{team_gid}/removeUser
		/// </summary>
		/// <param name="requestBody">The user to remove from the team.</param>
		public async Task RemoveUserForTeamAsync(RemoveUserForTeamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/removeUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get memberships from a team
		/// Returns the compact team memberships for the team.
		/// GetTeamMembershipsForTeam teams/{team_gid}/team_memberships
		/// </summary>
		/// <returns>Successfully retrieved the requested team's memberships.</returns>
		public async Task<GetTeamMembershipsForTeamReturn> GetTeamMembershipsForTeamAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/team_memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamMembershipsForTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users in a team
		/// Returns the compact records for all users that are members of the team.
		/// Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
		/// GetUsersForTeam teams/{team_gid}/users
		/// </summary>
		/// <returns>Returns the user records for all the members of the team, including guests and limited access users</returns>
		public async Task<GetUsersForTeamReturn> GetUsersForTeamAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/{team_gid}/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUsersForTeamReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get time periods
		/// Returns compact time period records.
		/// GetTimePeriods time_periods
		/// </summary>
		/// <param name="start_on">ISO 8601 date string</param>
		/// <param name="end_on">ISO 8601 date string</param>
		/// <param name="workspace">Globally unique identifier for the workspace.</param>
		/// <returns>Successfully retrieved the requested time periods.</returns>
		public async Task<GetTimePeriodsReturn> GetTimePeriodsAsync(System.DateOnly start_on, System.DateOnly end_on, string workspace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_periods?start_on="+start_on+"&end_on="+end_on+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTimePeriodsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a time period
		/// Returns the full record for a single time period.
		/// GetTimePeriod time_periods/{time_period_gid}
		/// </summary>
		/// <returns>Successfully retrieved the record for a single time period.</returns>
		public async Task<GetTimePeriodReturn> GetTimePeriodAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_periods/{time_period_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTimePeriodReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user task list
		/// Returns the full record for a user task list.
		/// GetUserTaskList user_task_lists/{user_task_list_gid}
		/// </summary>
		/// <returns>Successfully retrieved the user task list.</returns>
		public async Task<GetUserTaskListReturn> GetUserTaskListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user_task_lists/{user_task_list_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserTaskListReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tasks from a user task list
		/// Returns the compact list of tasks in a user’s My Tasks list.
		/// *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.*
		/// *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
		/// GetTasksForUserTaskList user_task_lists/{user_task_list_gid}/tasks
		/// </summary>
		/// <returns>Successfully retrieved the user task list's tasks.</returns>
		public async Task<GetTasksForUserTaskListReturn> GetTasksForUserTaskListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user_task_lists/{user_task_list_gid}/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTasksForUserTaskListReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple users
		/// Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.
		/// Results are sorted by user ID.
		/// GetUsers users
		/// </summary>
		/// <returns>Successfully retrieved the requested user records.</returns>
		public async Task<GetUsersReturn> GetUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUsersReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user
		/// Returns the full user record for the single user with the provided ID.
		/// GetUser users/{user_gid}
		/// </summary>
		/// <returns>Returns the user specified.</returns>
		public async Task<GetUserReturn> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user's favorites
		/// Returns all of a user's favorites in the given workspace, of the given type.
		/// Results are given in order (The same order as Asana's sidebar).
		/// GetFavoritesForUser users/{user_gid}/favorites
		/// </summary>
		/// <returns>Returns the specified user's favorites.</returns>
		public async Task<GetFavoritesForUserReturn> GetFavoritesForUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_gid}/favorites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFavoritesForUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get memberships from a user
		/// Returns the compact team membership records for the user.
		/// GetTeamMembershipsForUser users/{user_gid}/team_memberships
		/// </summary>
		/// <param name="workspace">Globally unique identifier for the workspace.</param>
		/// <returns>Successfully retrieved the requested users's memberships.</returns>
		public async Task<GetTeamMembershipsForUserReturn> GetTeamMembershipsForUserAsync(string workspace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_gid}/team_memberships?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamMembershipsForUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get teams for a user
		/// Returns the compact records for all teams to which the given user is assigned.
		/// GetTeamsForUser users/{user_gid}/teams
		/// </summary>
		/// <returns>Returns the team records for all teams in the organization or workspace to which the given user is assigned.</returns>
		public async Task<GetTeamsForUserReturn> GetTeamsForUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_gid}/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamsForUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user's task list
		/// Returns the full record for a user's task list.
		/// GetUserTaskListForUser users/{user_gid}/user_task_list
		/// </summary>
		/// <returns>Successfully retrieved the user's task list.</returns>
		public async Task<GetUserTaskListForUserReturn> GetUserTaskListForUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_gid}/user_task_list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserTaskListForUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get workspace memberships for a user
		/// Returns the compact workspace membership records for the user.
		/// GetWorkspaceMembershipsForUser users/{user_gid}/workspace_memberships
		/// </summary>
		/// <returns>Successfully retrieved the requested user's workspace memberships.</returns>
		public async Task<GetWorkspaceMembershipsForUserReturn> GetWorkspaceMembershipsForUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_gid}/workspace_memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkspaceMembershipsForUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple webhooks
		/// Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
		/// GetWebhooks webhooks
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="workspace">The workspace to query for webhooks in.</param>
		/// <param name="resource">Only return webhooks for the given resource.</param>
		/// <returns>Successfully retrieved the requested webhooks.</returns>
		public async Task<GetWebhooksReturn> GetWebhooksAsync(int limit, string offset, string workspace, string resource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&resource=" + (resource==null? "" : System.Uri.EscapeDataString(resource));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWebhooksReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Establish a webhook
		/// Establishing a webhook is a two-part process. First, a simple HTTP POST
		/// request initiates the creation similar to creating any other resource.
		/// 
		/// Next, in the middle of this request comes the confirmation handshake.
		/// When a webhook is created, we will send a test POST to the target with an
		/// `X-Hook-Secret` header. The target must respond with a `200 OK` or `204
		/// No Content` and a matching `X-Hook-Secret` header to confirm that this
		/// webhook subscription is indeed expected. We strongly recommend storing
		/// this secret to be used to verify future webhook event signatures.
		/// 
		/// The POST request to create the webhook will then return with the status
		/// of the request. If you do not acknowledge the webhook’s confirmation
		/// handshake it will fail to setup, and you will receive an error in
		/// response to your attempt to create it. This means you need to be able to
		/// receive and complete the webhook *while* the POST request is in-flight
		/// (in other words, have a server that can handle requests asynchronously).
		/// 
		/// Invalid hostnames like localhost will recieve a 403 Forbidden status code.
		/// 
		/// ```
		/// # Request
		/// curl -H "Authorization: Bearer <personal_access_token>" \
		/// -X POST https://app.asana.com/api/1.0/webhooks \
		/// -d "resource=8675309" \
		/// -d "target=https://example.com/receive-webhook/7654"
		/// ```
		/// 
		/// ```
		/// # Handshake sent to https://example.com/
		/// POST /receive-webhook/7654
		/// X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
		/// ```
		/// 
		/// ```
		/// # Handshake response sent by example.com
		/// HTTP/1.1 200
		/// X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
		/// ```
		/// 
		/// ```
		/// # Response
		/// HTTP/1.1 201
		/// {
		/// "data": {
		/// "gid": "43214",
		/// "resource": {
		/// "gid": "8675309",
		/// "name": "Bugs"
		/// },
		/// "target": "https://example.com/receive-webhook/7654",
		/// "active": false,
		/// "last_success_at": null,
		/// "last_failure_at": null,
		/// "last_failure_content": null
		/// }
		/// }
		/// ```
		/// CreateWebhook webhooks
		/// </summary>
		/// <param name="requestBody">The webhook workspace and target.</param>
		public async Task CreateWebhookAsync(CreateWebhookPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a webhook
		/// This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
		/// DeleteWebhook webhooks/{webhook_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested webhook.</returns>
		public async Task<DeleteWebhookReturn> DeleteWebhookAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/{webhook_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWebhookReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a webhook
		/// Returns the full record for the given webhook.
		/// GetWebhook webhooks/{webhook_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested webhook.</returns>
		public async Task<GetWebhookReturn> GetWebhookAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/{webhook_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWebhookReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a webhook
		/// An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
		/// UpdateWebhook webhooks/{webhook_gid}
		/// </summary>
		/// <param name="requestBody">The updated filters for the webhook.</param>
		/// <returns>Successfully updated the webhook.</returns>
		public async Task<UpdateWebhookReturn> UpdateWebhookAsync(UpdateWebhookPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/{webhook_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWebhookReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a workspace membership
		/// Returns the complete workspace record for a single workspace membership.
		/// GetWorkspaceMembership workspace_memberships/{workspace_membership_gid}
		/// </summary>
		/// <returns>Successfully retrieved the requested workspace membership.</returns>
		public async Task<GetWorkspaceMembershipReturn> GetWorkspaceMembershipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspace_memberships/{workspace_membership_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkspaceMembershipReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple workspaces
		/// Returns the compact records for all workspaces visible to the authorized user.
		/// GetWorkspaces workspaces
		/// </summary>
		/// <returns>Return all workspaces visible to the authorized user.</returns>
		public async Task<GetWorkspacesReturn> GetWorkspacesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkspacesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a workspace
		/// Returns the full workspace record for a single workspace.
		/// GetWorkspace workspaces/{workspace_gid}
		/// </summary>
		/// <returns>Return the full workspace record.</returns>
		public async Task<GetWorkspaceReturn> GetWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a workspace
		/// A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.
		/// Currently the only field that can be modified for a workspace is its name.
		/// Returns the complete, updated workspace record.
		/// UpdateWorkspace workspaces/{workspace_gid}
		/// </summary>
		/// <param name="requestBody">The workspace object with all updated properties.</param>
		/// <returns>Update for the workspace was successful.</returns>
		public async Task<UpdateWorkspaceReturn> UpdateWorkspaceAsync(UpdateWorkspacePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a user to a workspace or organization
		/// Add a user to a workspace or organization.
		/// The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
		/// AddUserForWorkspace workspaces/{workspace_gid}/addUser
		/// </summary>
		/// <param name="requestBody">The user to add to the workspace.</param>
		/// <returns>The user was added successfully to the workspace or organization.</returns>
		public async Task<AddUserForWorkspaceReturn> AddUserForWorkspaceAsync(AddUserForWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/addUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddUserForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get audit log events
		/// Retrieve the audit log events that have been captured in your domain.
		/// 
		/// This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.
		/// 
		/// There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.
		/// 
		/// The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.
		/// 
		/// When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
		/// GetAuditLogEvents workspaces/{workspace_gid}/audit_log_events
		/// </summary>
		/// <returns>AuditLogEvents were successfully retrieved.</returns>
		public async Task<GetAuditLogEventsReturn> GetAuditLogEventsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/audit_log_events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuditLogEventsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a workspace's custom fields
		/// Returns a list of the compact representation of all of the custom fields in a workspace.
		/// GetCustomFieldsForWorkspace workspaces/{workspace_gid}/custom_fields
		/// </summary>
		/// <returns>Successfully retrieved all custom fields for the given workspace.</returns>
		public async Task<GetCustomFieldsForWorkspaceReturn> GetCustomFieldsForWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/custom_fields";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomFieldsForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all projects in a workspace
		/// Returns the compact project records for all projects in the workspace.
		/// *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*
		/// GetProjectsForWorkspace workspaces/{workspace_gid}/projects
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <param name="archived">Only return projects whose `archived` field takes on the value of this parameter.</param>
		/// <returns>Successfully retrieved the requested workspace's projects.</returns>
		public async Task<GetProjectsForWorkspaceReturn> GetProjectsForWorkspaceAsync(int limit, string offset, bool archived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/projects?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&archived="+archived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectsForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a project in a workspace
		/// Returns the compact project records for all projects in the workspace.
		/// 
		/// If the workspace for your project is an organization, you must also
		/// supply a team to share the project with.
		/// 
		/// Returns the full record of the newly created project.
		/// CreateProjectForWorkspace workspaces/{workspace_gid}/projects
		/// </summary>
		/// <param name="requestBody">The new project to create.</param>
		public async Task CreateProjectForWorkspaceAsync(CreateProjectForWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a user from a workspace or organization
		/// Remove a user from a workspace or organization.
		/// The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.
		/// Returns an empty data record.
		/// RemoveUserForWorkspace workspaces/{workspace_gid}/removeUser
		/// </summary>
		/// <param name="requestBody">The user to remove from the workspace.</param>
		public async Task RemoveUserForWorkspaceAsync(RemoveUserForWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/removeUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get tags in a workspace
		/// Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
		/// GetTagsForWorkspace workspaces/{workspace_gid}/tags
		/// </summary>
		/// <param name="limit">Results per page.
		///The number of objects to return per page. The value must be between 1 and 100.</param>
		/// <param name="offset">Offset token.
		///An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
		///'Note: You can only pass in an offset that was returned to you via a previously paginated request.'</param>
		/// <returns>Successfully retrieved the specified set of tags.</returns>
		public async Task<GetTagsForWorkspaceReturn> GetTagsForWorkspaceAsync(int limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/tags?limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTagsForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a tag in a workspace
		/// Creates a new tag in a workspace or organization.
		/// 
		/// Every tag is required to be created in a specific workspace or
		/// organization, and this cannot be changed once set. Note that you can use
		/// the workspace parameter regardless of whether or not it is an
		/// organization.
		/// 
		/// Returns the full record of the newly created tag.
		/// CreateTagForWorkspace workspaces/{workspace_gid}/tags
		/// </summary>
		/// <param name="requestBody">The tag to create.</param>
		public async Task CreateTagForWorkspaceAsync(CreateTagForWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search tasks in a workspace
		/// To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need.
		/// #### Premium access
		/// Like the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:
		/// 
		/// - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace
		/// 
		/// Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error.
		/// #### Pagination
		/// Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter.
		/// #### Eventual consistency
		/// Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product.
		/// #### Rate limits
		/// You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits).
		/// #### Custom field parameters
		/// | Parameter name | Custom field type | Accepted type |
		/// |---|---|---|
		/// | custom_fields.{gid}.is_set | All | Boolean |
		/// | custom_fields.{gid}.value | Text | String |
		/// | custom_fields.{gid}.value | Number | Number |
		/// | custom_fields.{gid}.value | Enum | Enum option ID |
		/// | custom_fields.{gid}.starts_with | Text only | String |
		/// | custom_fields.{gid}.ends_with | Text only | String |
		/// | custom_fields.{gid}.contains | Text only | String |
		/// | custom_fields.{gid}.less_than | Number only | Number |
		/// | custom_fields.{gid}.greater_than | Number only | Number |
		/// 
		/// 
		/// For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.
		/// 
		/// **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field
		/// 
		/// *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*
		/// SearchTasksForWorkspace workspaces/{workspace_gid}/tasks/search
		/// </summary>
		/// <returns>Successfully retrieved the section's tasks.</returns>
		public async Task<SearchTasksForWorkspaceReturn> SearchTasksForWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/tasks/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchTasksForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get teams in a workspace
		/// Returns the compact records for all teams in the workspace visible to the authorized user.
		/// GetTeamsForWorkspace workspaces/{workspace_gid}/teams
		/// </summary>
		/// <returns>Returns the team records for all teams in the organization or workspace accessible to the authenticated user.</returns>
		public async Task<GetTeamsForWorkspaceReturn> GetTeamsForWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTeamsForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get objects via typeahead
		/// Retrieves objects in the workspace based via an auto-completion/typeahead
		/// search algorithm. This feature is meant to provide results quickly, so do
		/// not rely on this API to provide extremely accurate search results. The
		/// result set is limited to a single page of results with a maximum size, so
		/// you won’t be able to fetch large numbers of results.
		/// 
		/// The typeahead search API provides search for objects from a single
		/// workspace. This endpoint should be used to query for objects when
		/// creating an auto-completion/typeahead search feature. This API is meant
		/// to provide results quickly and should not be relied upon for accurate or
		/// exhaustive search results. The results sets are limited in size and
		/// cannot be paginated.
		/// 
		/// Queries return a compact representation of each object which is typically
		/// the gid and name fields. Interested in a specific set of fields or all of
		/// the fields?! Of course you are. Use field selectors to manipulate what
		/// data is included in a response.
		/// 
		/// Resources with type `user` are returned in order of most contacted to
		/// least contacted. This is determined by task assignments, adding the user
		/// to projects, and adding the user as a follower to tasks, messages,
		/// etc.
		/// 
		/// Resources with type `project` are returned in order of recency. This is
		/// determined when the user visits the project, is added to the project, and
		/// completes tasks in the project.
		/// 
		/// Resources with type `task` are returned with priority placed on tasks
		/// the user is following, but no guarantee on the order of those tasks.
		/// 
		/// Resources with type `project_template` are returned with priority
		/// placed on favorited project templates.
		/// 
		/// Leaving the `query` string empty or omitted will give you results, still
		/// following the resource ordering above. This could be used to list users or
		/// projects that are relevant for the requesting user's api token.
		/// TypeaheadForWorkspace workspaces/{workspace_gid}/typeahead
		/// </summary>
		/// <returns>Successfully retrieved objects via a typeahead search algorithm.</returns>
		public async Task<TypeaheadForWorkspaceReturn> TypeaheadForWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/typeahead";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TypeaheadForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users in a workspace or organization
		/// Returns the compact records for all users in the specified workspace or organization.
		/// Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
		/// GetUsersForWorkspace workspaces/{workspace_gid}/users
		/// </summary>
		/// <returns>Return the users in the specified workspace or org.</returns>
		public async Task<GetUsersForWorkspaceReturn> GetUsersForWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUsersForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the workspace memberships for a workspace
		/// Returns the compact workspace membership records for the workspace.
		/// GetWorkspaceMembershipsForWorkspace workspaces/{workspace_gid}/workspace_memberships
		/// </summary>
		/// <returns>Successfully retrieved the requested workspace's memberships.</returns>
		public async Task<GetWorkspaceMembershipsForWorkspaceReturn> GetWorkspaceMembershipsForWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_gid}/workspace_memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkspaceMembershipsForWorkspaceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetAttachmentsForObjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AttachmentCompact[] Data { get; set; }
	}
	
	public class DeleteAttachmentReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetAttachmentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AttachmentResponse Data { get; set; }
	}
	
	public class CreateBatchRequestPostBody
	{
		
		/// <summary>
		/// A request object for use in a batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BatchRequest Data { get; set; }
	}
	
	public class CreateBatchRequestReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BatchResponse[] Data { get; set; }
	}
	
	public class CreateCustomFieldPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldRequest Data { get; set; }
	}
	
	public class DeleteCustomFieldReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetCustomFieldReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldResponse Data { get; set; }
	}
	
	public class UpdateCustomFieldPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldRequest Data { get; set; }
	}
	
	public class UpdateCustomFieldReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldResponse Data { get; set; }
	}
	
	public class CreateEnumOptionForCustomFieldPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EnumOptionRequest Data { get; set; }
	}
	
	public class InsertEnumOptionForCustomFieldPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EnumOptionInsertRequest Data { get; set; }
	}
	
	public class InsertEnumOptionForCustomFieldReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EnumOption Data { get; set; }
	}
	
	public class UpdateEnumOptionPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EnumOptionRequest Data { get; set; }
	}
	
	public class UpdateEnumOptionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EnumOption Data { get; set; }
	}
	
	public class GetEventsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EventResponse[] Data { get; set; }
		
		/// <summary>
		/// Indicates whether there are more events to pull.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_more")]
		public System.Nullable<System.Boolean> Has_more { get; set; }
		
		/// <summary>
		/// A sync token to be used with the next call to the /events endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sync")]
		public string Sync { get; set; }
	}
	
	public class GetGoalRelationshipsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRelationshipCompact[] Data { get; set; }
	}
	
	public class GetGoalRelationshipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRelationshipResponse Data { get; set; }
	}
	
	public class UpdateGoalRelationshipPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRelationshipRequest Data { get; set; }
	}
	
	public class UpdateGoalRelationshipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRelationshipResponse Data { get; set; }
	}
	
	public class GetGoalsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalCompact[] Data { get; set; }
	}
	
	public class CreateGoalPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRequest Data { get; set; }
	}
	
	public class DeleteGoalReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetGoalReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalResponse Data { get; set; }
	}
	
	public class UpdateGoalPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRequest Data { get; set; }
	}
	
	public class UpdateGoalReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalResponse Data { get; set; }
	}
	
	public class AddFollowersPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskAddFollowersRequest Data { get; set; }
	}
	
	public class AddFollowersReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalResponse Data { get; set; }
	}
	
	public class AddSupportingRelationshipPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalAddSupportingRelationshipRequest Data { get; set; }
	}
	
	public class AddSupportingRelationshipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRelationshipResponse Data { get; set; }
	}
	
	public class GetParentGoalsForGoalReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalCompact[] Data { get; set; }
	}
	
	public class RemoveFollowersPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskAddFollowersRequest Data { get; set; }
	}
	
	public class RemoveFollowersReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalResponse Data { get; set; }
	}
	
	public class RemoveSupportingRelationshipPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalRemoveSupportingRelationshipRequest Data { get; set; }
	}
	
	public class RemoveSupportingRelationshipReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class CreateGoalMetricPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalMetricBase Data { get; set; }
	}
	
	public class CreateGoalMetricReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalResponse Data { get; set; }
	}
	
	public class UpdateGoalMetricPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalMetricCurrentValueRequest Data { get; set; }
	}
	
	public class UpdateGoalMetricReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GoalResponse Data { get; set; }
	}
	
	public class GetJobReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public JobBase Data { get; set; }
	}
	
	public class CreateOrganizationExportPostBody
	{
		
		/// <summary>
		/// An *organization_export* request starts a job to export the complete data of the given Organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OrganizationExportRequest Data { get; set; }
	}
	
	public class GetOrganizationExportReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OrganizationExportBase Data { get; set; }
	}
	
	public class GetPortfolioMembershipsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioMembershipCompact[] Data { get; set; }
	}
	
	public class GetPortfolioMembershipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioMembershipBase Data { get; set; }
	}
	
	public class GetPortfoliosReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioCompact[] Data { get; set; }
	}
	
	public class CreatePortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioRequest Data { get; set; }
	}
	
	public class DeletePortfolioReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioResponse Data { get; set; }
	}
	
	public class UpdatePortfolioPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioRequest Data { get; set; }
	}
	
	public class UpdatePortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioResponse Data { get; set; }
	}
	
	public class AddCustomFieldSettingForPortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AddCustomFieldSettingRequest Data { get; set; }
	}
	
	public class AddCustomFieldSettingForPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldSettingResponse Data { get; set; }
	}
	
	public class AddItemForPortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioAddItemRequest Data { get; set; }
	}
	
	public class AddItemForPortfolioReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class AddMembersForPortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AddMembersRequest Data { get; set; }
	}
	
	public class AddMembersForPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioResponse Data { get; set; }
	}
	
	public class GetCustomFieldSettingsForPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldSettingResponse[] Data { get; set; }
	}
	
	public class GetItemsForPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectCompact[] Data { get; set; }
	}
	
	public class GetPortfolioMembershipsForPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioMembershipCompact[] Data { get; set; }
	}
	
	public class RemoveCustomFieldSettingForPortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RemoveCustomFieldSettingRequest Data { get; set; }
	}
	
	public class RemoveCustomFieldSettingForPortfolioReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class RemoveItemForPortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioRemoveItemRequest Data { get; set; }
	}
	
	public class RemoveItemForPortfolioReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class RemoveMembersForPortfolioPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RemoveMembersRequest Data { get; set; }
	}
	
	public class RemoveMembersForPortfolioReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PortfolioResponse Data { get; set; }
	}
	
	public class DeleteProjectBriefReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetProjectBriefReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectBriefResponse Data { get; set; }
	}
	
	public class UpdateProjectBriefPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectBriefRequest Data { get; set; }
	}
	
	public class UpdateProjectBriefReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectBriefResponse Data { get; set; }
	}
	
	public class GetProjectMembershipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectMembershipResponse Data { get; set; }
	}
	
	public class DeleteProjectStatusReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetProjectStatusReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectStatusResponse Data { get; set; }
	}
	
	public class GetProjectTemplatesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectTemplateCompact[] Data { get; set; }
	}
	
	public class GetProjectTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectTemplateResponse Data { get; set; }
	}
	
	public class InstantiateProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectTemplateInstantiateProjectRequest Data { get; set; }
	}
	
	public class GetProjectsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectCompact[] Data { get; set; }
	}
	
	public class CreateProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectRequest Data { get; set; }
	}
	
	public class DeleteProjectReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectResponse Data { get; set; }
	}
	
	public class UpdateProjectPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectRequest Data { get; set; }
	}
	
	public class UpdateProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectResponse Data { get; set; }
	}
	
	public class AddCustomFieldSettingForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AddCustomFieldSettingRequest Data { get; set; }
	}
	
	public class AddCustomFieldSettingForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldSettingResponse Data { get; set; }
	}
	
	public class AddFollowersForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AddFollowersRequest Data { get; set; }
	}
	
	public class AddFollowersForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectResponse Data { get; set; }
	}
	
	public class AddMembersForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AddMembersRequest Data { get; set; }
	}
	
	public class AddMembersForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectResponse Data { get; set; }
	}
	
	public class GetCustomFieldSettingsForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldSettingResponse[] Data { get; set; }
	}
	
	public class DuplicateProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectDuplicateRequest Data { get; set; }
	}
	
	public class CreateProjectBriefPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectBriefRequest Data { get; set; }
	}
	
	public class GetProjectMembershipsForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectMembershipCompact[] Data { get; set; }
	}
	
	public class GetProjectStatusesForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectStatusCompact[] Data { get; set; }
	}
	
	public class CreateProjectStatusForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectStatusBase Data { get; set; }
	}
	
	public class RemoveCustomFieldSettingForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RemoveCustomFieldSettingRequest Data { get; set; }
	}
	
	public class RemoveCustomFieldSettingForProjectReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class RemoveFollowersForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RemoveFollowersRequest Data { get; set; }
	}
	
	public class RemoveFollowersForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectResponse Data { get; set; }
	}
	
	public class RemoveMembersForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RemoveMembersRequest Data { get; set; }
	}
	
	public class RemoveMembersForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectResponse Data { get; set; }
	}
	
	public class ProjectSaveAsTemplatePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectSaveAsTemplateRequest Data { get; set; }
	}
	
	public class GetSectionsForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionCompact[] Data { get; set; }
	}
	
	public class CreateSectionForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionRequest Data { get; set; }
	}
	
	public class InsertSectionForProjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectSectionInsertRequest Data { get; set; }
	}
	
	public class InsertSectionForProjectReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetTaskCountsForProjectReturn
	{
		
		/// <summary>
		/// A response object returned from the task count endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCountResponse Data { get; set; }
	}
	
	public class GetTasksForProjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class DeleteSectionReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetSectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionResponse Data { get; set; }
	}
	
	public class UpdateSectionPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionRequest Data { get; set; }
	}
	
	public class UpdateSectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionResponse Data { get; set; }
	}
	
	public class AddTaskForSectionPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SectionTaskInsertRequest Data { get; set; }
	}
	
	public class AddTaskForSectionReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetTasksForSectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class GetStatusesForObjectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StatusUpdateCompact[] Data { get; set; }
	}
	
	public class CreateStatusForObjectPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StatusUpdateRequest Data { get; set; }
	}
	
	public class DeleteStatusReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetStatusReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StatusUpdateResponse Data { get; set; }
	}
	
	public class DeleteStoryReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetStoryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StoryResponse Data { get; set; }
	}
	
	public class UpdateStoryPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StoryBase Data { get; set; }
	}
	
	public class UpdateStoryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StoryResponse Data { get; set; }
	}
	
	public class GetTagsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagCompact[] Data { get; set; }
	}
	
	public class CreateTagPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagRequest Data { get; set; }
	}
	
	public class DeleteTagReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagResponse Data { get; set; }
	}
	
	public class UpdateTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagResponse Data { get; set; }
	}
	
	public class GetTasksForTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class GetTasksReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class CreateTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskRequest Data { get; set; }
	}
	
	public class DeleteTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskResponse Data { get; set; }
	}
	
	public class UpdateTaskPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskRequest Data { get; set; }
	}
	
	public class UpdateTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskResponse Data { get; set; }
	}
	
	public class AddDependenciesForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModifyDependenciesRequest Data { get; set; }
	}
	
	public class AddDependenciesForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class AddDependentsForTaskPostBody
	{
		
		/// <summary>
		/// A set of dependent tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModifyDependentsRequest Data { get; set; }
	}
	
	public class AddDependentsForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class AddFollowersForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskAddFollowersRequest Data { get; set; }
	}
	
	public class AddFollowersForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskResponse Data { get; set; }
	}
	
	public class AddProjectForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskAddProjectRequest Data { get; set; }
	}
	
	public class AddProjectForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class AddTagForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskAddTagRequest Data { get; set; }
	}
	
	public class AddTagForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetDependenciesForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class GetDependentsForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class DuplicateTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskDuplicateRequest Data { get; set; }
	}
	
	public class GetProjectsForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectCompact[] Data { get; set; }
	}
	
	public class RemoveDependenciesForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModifyDependenciesRequest Data { get; set; }
	}
	
	public class RemoveDependenciesForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class RemoveDependentsForTaskPostBody
	{
		
		/// <summary>
		/// A set of dependent tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModifyDependentsRequest Data { get; set; }
	}
	
	public class RemoveDependentsForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class RemoveFollowerForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskRemoveFollowersRequest Data { get; set; }
	}
	
	public class RemoveFollowerForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskResponse Data { get; set; }
	}
	
	public class RemoveProjectForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskRemoveProjectRequest Data { get; set; }
	}
	
	public class RemoveProjectForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class RemoveTagForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskRemoveTagRequest Data { get; set; }
	}
	
	public class RemoveTagForTaskReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class SetParentForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskSetParentRequest Data { get; set; }
	}
	
	public class SetParentForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskResponse Data { get; set; }
	}
	
	public class GetStoriesForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public object Data { get; set; }
	}
	
	public class CreateStoryForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StoryBase Data { get; set; }
	}
	
	public class GetSubtasksForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class CreateSubtaskForTaskPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskRequest Data { get; set; }
	}
	
	public class GetTagsForTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagCompact[] Data { get; set; }
	}
	
	public class GetTeamMembershipsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamMembershipCompact[] Data { get; set; }
	}
	
	public class GetTeamMembershipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamMembershipBase Data { get; set; }
	}
	
	public class CreateTeamPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamRequest Data { get; set; }
	}
	
	public class UpdateTeamPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamRequest Data { get; set; }
	}
	
	public class UpdateTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamResponse Data { get; set; }
	}
	
	public class GetTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamResponse Data { get; set; }
	}
	
	public class AddUserForTeamPostBody
	{
		
		/// <summary>
		/// A user identification object for specification with the addUser/removeUser endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamAddUserRequest Data { get; set; }
	}
	
	public class AddUserForTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamMembershipBase Data { get; set; }
	}
	
	public class GetProjectTemplatesForTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectTemplateCompact[] Data { get; set; }
	}
	
	public class GetProjectsForTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectCompact[] Data { get; set; }
	}
	
	public class CreateProjectForTeamPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectRequest Data { get; set; }
	}
	
	public class RemoveUserForTeamPostBody
	{
		
		/// <summary>
		/// A user identification object for specification with the addUser/removeUser endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamRemoveUserRequest Data { get; set; }
	}
	
	public class GetTeamMembershipsForTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamMembershipCompact[] Data { get; set; }
	}
	
	public class GetUsersForTeamReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserCompact[] Data { get; set; }
	}
	
	public class GetTimePeriodsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TimePeriodCompact[] Data { get; set; }
	}
	
	public class GetTimePeriodReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TimePeriodResponse Data { get; set; }
	}
	
	public class GetUserTaskListReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserTaskListBase Data { get; set; }
	}
	
	public class GetTasksForUserTaskListReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class GetUsersReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserCompact[] Data { get; set; }
	}
	
	public class GetUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserResponse Data { get; set; }
	}
	
	public class GetFavoritesForUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AsanaNamedResource[] Data { get; set; }
	}
	
	public class GetTeamMembershipsForUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamMembershipCompact[] Data { get; set; }
	}
	
	public class GetTeamsForUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamCompact[] Data { get; set; }
	}
	
	public class GetUserTaskListForUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserTaskListBase Data { get; set; }
	}
	
	public class GetWorkspaceMembershipsForUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceMembershipCompact[] Data { get; set; }
	}
	
	public class GetWebhooksReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookResponse[] Data { get; set; }
	}
	
	public class CreateWebhookPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookRequest Data { get; set; }
	}
	
	public class DeleteWebhookReturn
	{
		
		/// <summary>
		/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmptyResponse Data { get; set; }
	}
	
	public class GetWebhookReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookResponse Data { get; set; }
	}
	
	public class UpdateWebhookPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookUpdateRequest Data { get; set; }
	}
	
	public class UpdateWebhookReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookResponse Data { get; set; }
	}
	
	public class GetWorkspaceMembershipReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceMembershipResponse Data { get; set; }
	}
	
	public class GetWorkspacesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceCompact[] Data { get; set; }
	}
	
	public class GetWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceResponse Data { get; set; }
	}
	
	public class UpdateWorkspacePutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceBase Data { get; set; }
	}
	
	public class UpdateWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceResponse Data { get; set; }
	}
	
	public class AddUserForWorkspacePostBody
	{
		
		/// <summary>
		/// A user identification object for specification with the addUser/removeUser endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceAddUserRequest Data { get; set; }
	}
	
	public class AddUserForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserBaseResponse Data { get; set; }
	}
	
	public class GetAuditLogEventsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AuditLogEvent[] Data { get; set; }
	}
	
	public class GetCustomFieldsForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldResponse[] Data { get; set; }
	}
	
	public class GetProjectsForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectCompact[] Data { get; set; }
	}
	
	public class CreateProjectForWorkspacePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ProjectRequest Data { get; set; }
	}
	
	public class RemoveUserForWorkspacePostBody
	{
		
		/// <summary>
		/// A user identification object for specification with the addUser/removeUser endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceRemoveUserRequest Data { get; set; }
	}
	
	public class GetTagsForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagCompact[] Data { get; set; }
	}
	
	public class CreateTagForWorkspacePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagResponse Data { get; set; }
	}
	
	public class SearchTasksForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TaskCompact[] Data { get; set; }
	}
	
	public class GetTeamsForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TeamCompact[] Data { get; set; }
	}
	
	public class TypeaheadForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AsanaNamedResource[] Data { get; set; }
	}
	
	public class GetUsersForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserCompact[] Data { get; set; }
	}
	
	public class GetWorkspaceMembershipsForWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WorkspaceMembershipCompact[] Data { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
