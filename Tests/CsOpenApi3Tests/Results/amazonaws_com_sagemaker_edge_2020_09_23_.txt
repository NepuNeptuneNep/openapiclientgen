//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeployment[] Deployments { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment on an edge device that is registered with SageMaker Edge Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EdgeDeployment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailureHandlingPolicy FailureHandlingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Definition[] Definitions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Model = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailureHandlingPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLBACK_ON_FAILURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOTHING = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Definition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelHandle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Checksum Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelState State { get; set; }
	}
	
	/// <summary>
	/// Information about the checksum of a model deployed on a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Checksum
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChecksumType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChecksumType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModelState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDEPLOY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceRegistrationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceRegistration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheTTL { get; set; }
	}
	
	/// <summary>
	/// Information required for edge device metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EdgeMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Dimension { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// Information about a model deployed on an edge device that is registered with SageMaker Edge Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Model
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestSampleTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestInference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeMetric[] ModelMetrics { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelHandle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RollbackFailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 1,
	}
	
	/// <summary>
	/// Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeploymentStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeploymentEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentModel[] DeploymentModels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceRegistrationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendHeartbeatRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeMetric[] AgentMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Model[] Models { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentResult DeploymentResult { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Use to get the active deployments from a device.
		/// GetDeployments GetDeployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentsResult> GetDeploymentsAsync(GetDeploymentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetDeployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use to check if a device is registered with SageMaker Edge Manager.
		/// GetDeviceRegistration GetDeviceRegistration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceRegistrationResult> GetDeviceRegistrationAsync(GetDeviceRegistrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetDeviceRegistration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeviceRegistrationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use to get the current status of devices registered on SageMaker Edge Manager.
		/// SendHeartbeat SendHeartbeat
		/// </summary>
		/// <returns>Success</returns>
		public async Task SendHeartbeatAsync(SendHeartbeatPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SendHeartbeat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class GetDeploymentsPostBody
	{
		
		/// <summary>
		/// The unique name of the device you want to get the configuration of active deployments from.
		/// Required
		/// Min length: 1
		/// Max length: 63
		/// Pattern: ^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// The name of the fleet that the device belongs to.
		/// Required
		/// Min length: 1
		/// Max length: 63
		/// Pattern: ^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$")]
		public string DeviceFleetName { get; set; }
	}
	
	public class GetDeviceRegistrationPostBody
	{
		
		/// <summary>
		/// The unique name of the device you want to get the registration status from.
		/// Required
		/// Min length: 1
		/// Max length: 63
		/// Pattern: ^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// The name of the fleet that the device belongs to.
		/// Required
		/// Min length: 1
		/// Max length: 63
		/// Pattern: ^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$")]
		public string DeviceFleetName { get; set; }
	}
	
	public class SendHeartbeatPostBody
	{
		
		/// <summary>
		/// For internal use. Returns a list of SageMaker Edge Manager agent operating metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EdgeMetric[] AgentMetrics { get; set; }
		
		/// <summary>
		/// Returns a list of models deployed on the the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Model[] Models { get; set; }
		
		/// <summary>
		/// Returns the version of the agent.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [a-zA-Z0-9\ \_\.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9\ \_\.]+")]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// The unique name of the device.
		/// Required
		/// Min length: 1
		/// Max length: 63
		/// Pattern: ^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// The name of the fleet that the device belongs to.
		/// Required
		/// Min length: 1
		/// Max length: 63
		/// Pattern: ^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$")]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendHeartbeatPostBodyDeploymentResult DeploymentResult { get; set; }
	}
	
	public class SendHeartbeatPostBodyDeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeploymentStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeploymentEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentModel[] DeploymentModels { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
