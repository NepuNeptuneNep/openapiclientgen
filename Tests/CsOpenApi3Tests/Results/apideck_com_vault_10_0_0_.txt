//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Type of authorization used by the connector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth2")]
		oauth2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKey")]
		apiKey = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="basic")]
		basic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
		custom = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Connection
	{
		
		/// <summary>
		/// Type of authorization used by the connector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_type")]
		public AuthType Auth_type { get; set; }
		
		/// <summary>
		/// The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorize_url")]
		public string Authorize_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurable_resources")]
		public string[] Configurable_resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ConnectionConfiguration[] ConnectionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Double> Created_at { get; set; }
		
		/// <summary>
		/// List of custom mappings configured for this connection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMapping[] Custom_mappings { get; set; }
		
		/// <summary>
		/// Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The settings that are wanted to create a connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_fields")]
		public FormField[] Form_fields { get; set; }
		
		/// <summary>
		/// Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_guide")]
		public System.Nullable<System.Boolean> Has_guide { get; set; }
		
		/// <summary>
		/// A visual icon of the connection, that will be shown in the Vault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// The unique identifier of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The current state of the Integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integration_state")]
		public System.Nullable<ConnectionIntegration_state> Integration_state { get; set; }
		
		/// <summary>
		/// The logo of the connection, that will be shown in the Vault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Attach your own consumer specific metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The name of the connection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_grant_type")]
		public System.Nullable<ConnectionOauth_grant_type> Oauth_grant_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource_schema_support")]
		public string[] Resource_schema_support { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource_settings_support")]
		public string[] Resource_settings_support { get; set; }
		
		/// <summary>
		/// The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revoke_url")]
		public string Revoke_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema_support")]
		public System.Nullable<System.Boolean> Schema_support { get; set; }
		
		/// <summary>
		/// The ID of the service this connection belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// Connection settings. Values will persist to `form_fields` with corresponding id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
		
		/// <summary>
		/// List of settings that are required to be configured on integration before authorization can occur
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings_required_for_authorization")]
		public string[] Settings_required_for_authorization { get; set; }
		
		/// <summary>
		/// [Connection state flow](#section/Connection-state)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConnectionState> State { get; set; }
		
		/// <summary>
		/// Status of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ConnectionStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public WebhookSubscription[] Subscriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag_line")]
		public string Tag_line { get; set; }
		
		/// <summary>
		/// The unified API category where the connection belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unified_api")]
		public string Unified_api { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Double> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validation_support")]
		public System.Nullable<System.Boolean> Validation_support { get; set; }
		
		/// <summary>
		/// The website URL of the connection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	public class ConnectionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaults")]
		public ConnectionConfigurationDefaults[] ConnectionConfigurationDefaults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	public class ConnectionConfigurationDefaults
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public FormFieldOption[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public System.Nullable<ConnectionConfigurationDefaultsTarget> Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormFieldOption
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionConfigurationDefaultsTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom_fields")]
		custom_fields = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resource")]
		resource = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomMapping
	{
		
		/// <summary>
		/// Consumer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumer_id")]
		public string Consumer_id { get; set; }
		
		/// <summary>
		/// This mapping represents a finder for a custom field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public System.Nullable<System.Boolean> Custom_field { get; set; }
		
		/// <summary>
		/// Target Field description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Target Field ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Target Field Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Target Field name to use as a label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Target Field Mapping is required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Target Field Mapping value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormField
	{
		
		/// <summary>
		/// Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_custom_values")]
		public System.Nullable<System.Boolean> Allow_custom_values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public System.Nullable<System.Boolean> Custom_field { get; set; }
		
		/// <summary>
		/// The description of the form field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the form field is displayed in a “read-only” mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Indicates if the form field is not displayed but the value that is being stored on the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// The unique identifier of the form field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The label of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public FormFieldOption[] Options { get; set; }
		
		/// <summary>
		/// The placeholder for the form field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholder")]
		public string Placeholder { get; set; }
		
		/// <summary>
		/// Prefix to display in front of the form field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Indicates if the form field is required, which means it must be filled in before the form can be submitted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Indicates if the form field contains sensitive data, which will display the value as a masked input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitive")]
		public System.Nullable<System.Boolean> Sensitive { get; set; }
		
		/// <summary>
		/// Suffix to display next to the form field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FormFieldType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FormFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="checkbox")]
		checkbox = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tel")]
		tel = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="url")]
		url = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="textarea")]
		textarea = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="select")]
		select = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="filtered-select")]
		filteredMinusselect = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multi-select")]
		multiMinusselect = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="datetime")]
		datetime = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date")]
		date = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time")]
		time = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number")]
		number = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionIntegration_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="needs_configuration")]
		needs_configuration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configured")]
		configured = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionOauth_grant_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorization_code")]
		authorization_code = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client_credentials")]
		client_credentials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="password")]
		password = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="callable")]
		callable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="added")]
		added = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorized")]
		authorized = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid")]
		invalid = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upcoming")]
		upcoming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requested")]
		requested = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookSubscription
	{
		
		/// <summary>
		/// The date and time the webhook subscription was created downstream
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The list of downstream Events this connection is subscribed to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downstream_event_types")]
		public string[] Downstream_event_types { get; set; }
		
		/// <summary>
		/// The ID of the downstream service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downstream_id")]
		public string Downstream_id { get; set; }
		
		/// <summary>
		/// The URL the downstream is sending to when the event is triggered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="execute_url")]
		public string Execute_url { get; set; }
		
		/// <summary>
		/// The list of Unify Events this connection is subscribed to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unify_event_types")]
		public string[] Unify_event_types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public ConsumerConnection Entity { get; set; }
		
		/// <summary>
		/// The service provider's ID of the entity that triggered this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The type entity that triggered this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		/// <summary>
		/// Unique reference to this request event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_id")]
		public string Event_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public System.Nullable<ConnectionEventEvent_type> Event_type { get; set; }
		
		/// <summary>
		/// The current count this request event has been attempted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="execution_attempt")]
		public System.Nullable<System.Double> Execution_attempt { get; set; }
		
		/// <summary>
		/// ISO Datetime for when the original event occurred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurred_at")]
		public string Occurred_at { get; set; }
		
		/// <summary>
		/// Service provider identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsumerConnection
	{
		
		/// <summary>
		/// Type of authorization used by the connector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_type")]
		public AuthType Auth_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consumer_id")]
		public string Consumer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Attach your own consumer specific metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// Connection settings. Values will persist to `form_fields` with corresponding id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConsumerConnectionState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag_line")]
		public string Tag_line { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unified_api")]
		public string Unified_api { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConsumerConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="callable")]
		callable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="added")]
		added = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configured")]
		configured = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorized")]
		authorized = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionEventEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="*")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.created")]
		vault_connection_created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.updated")]
		vault_connection_updated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.disabled")]
		vault_connection_disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.deleted")]
		vault_connection_deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.callable")]
		vault_connection_callable = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.revoked")]
		vault_connection_revoked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.token_refresh.failed")]
		vault_connection_token_refresh_failed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionImportData
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public ConnectionImportDataCredentials Credentials { get; set; }
		
		/// <summary>
		/// Attach your own consumer specific metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Connection settings. Values will persist to `form_fields` with corresponding id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
	}
	
	public class ConnectionImportDataCredentials
	{
		
		/// <summary>
		/// Access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The number of seconds until the token expires. If omitted the token will be queued for refresh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		/// <summary>
		/// The datetime at which the token was issued. If omitted the token will be queued for refresh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issued_at")]
		public System.Nullable<System.DateTimeOffset> Issued_at { get; set; }
		
		/// <summary>
		/// The refresh token can be used to obtain a new access token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionWebhook
	{
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The delivery url of the webhook endpoint.
		/// Required
		/// Pattern: ^(https?)://
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delivery_url")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?)://")]
		public string Delivery_url { get; set; }
		
		/// <summary>
		/// A description of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled_reason")]
		public System.Nullable<ConnectionWebhookDisabled_reason> Disabled_reason { get; set; }
		
		/// <summary>
		/// The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public string[] Events { get; set; }
		
		/// <summary>
		/// The Unify Base URL events from connectors will be sent to after service id is appended.
		/// Required
		/// Pattern: ^(https?)://
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="execute_base_url")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(https?)://")]
		public string Execute_base_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of the webhook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConnectionWebhookStatus Status { get; set; }
		
		/// <summary>
		/// Name of Apideck Unified API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unified_api")]
		public ConnectionWebhookUnified_api Unified_api { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionWebhookDisabled_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="retry_limit")]
		retry_limit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="usage_limit")]
		usage_limit = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionWebhookStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionWebhookUnified_api
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accounting")]
		accounting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ats")]
		ats = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="calendar")]
		calendar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="crm")]
		crm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csp")]
		csp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer-support")]
		customerMinussupport = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecommerce")]
		ecommerce = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email-marketing")]
		emailMinusmarketing = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expense-management")]
		expenseMinusmanagement = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file-storage")]
		fileMinusstorage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form")]
		form = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hris")]
		hris = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lead")]
		lead = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payroll")]
		payroll = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pos")]
		pos = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="procurement")]
		procurement = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project-management")]
		projectMinusmanagement = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="script")]
		script = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spreadsheet")]
		spreadsheet = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="team-messaging")]
		teamMinusmessaging = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="issue-tracking")]
		issueMinustracking = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time-registration")]
		timeMinusregistration = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transactional-email")]
		transactionalMinusemail = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault")]
		vault = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="data-warehouse")]
		dataMinuswarehouse = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Consumer
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregated_request_count")]
		public System.Nullable<System.Double> Aggregated_request_count { get; set; }
		
		/// <summary>
		/// ID of your Apideck Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_id")]
		public string Application_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public ConsumerConnection[] Connections { get; set; }
		
		/// <summary>
		/// Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumer_id")]
		public string Consumer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ConsumerMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request_count_updated")]
		public string Request_count_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request_counts")]
		public RequestCountAllocation Request_counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	/// <summary>
	/// The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsumerMetadata
	{
		
		/// <summary>
		/// The name of the account as shown in the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// The email of the user as shown in the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The avatar of the user in the sidebar. Must be a valid URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The name of the user as shown in the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_name")]
		public string User_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestCountAllocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="proxy")]
		public System.Nullable<System.Double> Proxy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unify")]
		public System.Nullable<System.Double> Unify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vault")]
		public System.Nullable<System.Double> Vault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsumerRequestCountsInDateRangeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ConsumerRequestCountsInDateRangeResponseData Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	public class ConsumerRequestCountsInDateRangeResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregated_request_count")]
		public System.Nullable<System.Double> Aggregated_request_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="application_id")]
		public string Application_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consumer_id")]
		public string Consumer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_datetime")]
		public string End_datetime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request_counts")]
		public RequestCountAllocation Request_counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_datetime")]
		public string Start_datetime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Connection Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConsumerResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Consumer Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomMappingRequest
	{
		
		/// <summary>
		/// Target Field Mapping value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomMappingResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomMapping Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSessionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateSessionResponseData Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	public class CreateSessionResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="session_token")]
		public string Session_token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="session_uri")]
		public string Session_uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldFinder
	{
		
		/// <summary>
		/// More information about the custom field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// JSONPath finder for retrieving this value when mapping a response payload from downstream
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finder")]
		public string Finder { get; set; }
		
		/// <summary>
		/// Custom Field ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom Field name to use as a label if provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Custom Field value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConsumerResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public object Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormFieldOptionGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public SimpleFormFieldOption[] Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleFormFieldOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Connection Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Connection[] Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConsumerResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Consumer Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConsumersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetConsumersResponseData[] GetConsumersResponseData { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	public class GetConsumersResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregated_request_count")]
		public System.Nullable<System.Double> Aggregated_request_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="application_id")]
		public string Application_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consumer_id")]
		public string Consumer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ConsumerMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request_count_updated")]
		public string Request_count_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request_counts")]
		public RequestCountAllocation Request_counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	/// <summary>
	/// Links to navigate to previous or next pages through the API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		/// <summary>
		/// Link to navigate to the current page through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public string Current { get; set; }
		
		/// <summary>
		/// Link to navigate to the previous page through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Link to navigate to the previous page through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	/// <summary>
	/// Response metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		/// <summary>
		/// Cursors to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursors")]
		public MetaCursors Cursors { get; set; }
		
		/// <summary>
		/// Number of items returned in the data property of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_on_page")]
		public System.Nullable<System.Int32> Items_on_page { get; set; }
	}
	
	public class MetaCursors
	{
		
		/// <summary>
		/// Cursor to navigate to the current page of results through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public string Current { get; set; }
		
		/// <summary>
		/// Cursor to navigate to the next page of results through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Cursor to navigate to the previous page of results through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCustomFieldsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomFieldFinder[] Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCustomMappingResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomMapping Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLogsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Log[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Log
	{
		
		/// <summary>
		/// Indicates if the request was made via REST or Graphql endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_style")]
		public string Api_style { get; set; }
		
		/// <summary>
		/// The Apideck base URL the request was made to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="base_url")]
		public string Base_url { get; set; }
		
		/// <summary>
		/// Indicates whether or not this is a child or parent request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="child_request")]
		public bool Child_request { get; set; }
		
		/// <summary>
		/// The consumer Id associated with the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consumer_id")]
		public string Consumer_id { get; set; }
		
		/// <summary>
		/// The entire execution time in milliseconds it took to call the Apideck service provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public double Duration { get; set; }
		
		/// <summary>
		/// If error occurred, this is brief explanation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_message")]
		public string Error_message { get; set; }
		
		/// <summary>
		/// The entire execution time in milliseconds it took to make the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public int Execution { get; set; }
		
		/// <summary>
		/// When request is a parent request, this indicates if there are child requests associated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="has_children")]
		public bool Has_children { get; set; }
		
		/// <summary>
		/// HTTP Method of request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public string Http_method { get; set; }
		
		/// <summary>
		/// UUID acting as Request Identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Latency added by making this request via Unified Api.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public double Latency { get; set; }
		
		/// <summary>
		/// The request as defined in OpenApi Spec.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public LogOperation Operation { get; set; }
		
		/// <summary>
		/// When request is a child request, this UUID indicates it's parent request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		/// <summary>
		/// The path component of the URI the request was made to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Indicates whether the request was made using Apidecks sandbox credentials or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sandbox")]
		public bool Sandbox { get; set; }
		
		/// <summary>
		/// Apideck service provider associated with request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public LogService Service { get; set; }
		
		/// <summary>
		/// The IP address of the source of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_ip")]
		public string Source_ip { get; set; }
		
		/// <summary>
		/// HTTP Status code that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
		
		/// <summary>
		/// Whether or not the request was successful.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
		
		/// <summary>
		/// ISO Date and time when the request was made.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Which Unified Api request was made to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unified_api")]
		public LogUnified_api Unified_api { get; set; }
	}
	
	public class LogOperation
	{
		
		/// <summary>
		/// The OpenApi Operation Id associated with the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The OpenApi Operation name associated with the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class LogService
	{
		
		/// <summary>
		/// Apideck service provider id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Apideck service provider name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogUnified_api
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="crm")]
		crm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lead")]
		lead = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proxy")]
		proxy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault")]
		vault = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accounting")]
		accounting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hris")]
		hris = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ats")]
		ats = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecommerce")]
		ecommerce = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="issue-tracking")]
		issueMinustracking = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pos")]
		pos = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file-storage")]
		fileMinusstorage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourceExampleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceExample Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceExample
	{
		
		/// <summary>
		/// Example response from the downstream API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="example_response")]
		public string Example_response { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public LinkedConnectorResource Resource { get; set; }
		
		/// <summary>
		/// Service provider identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// Name of Apideck Unified API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unified_api")]
		public System.Nullable<ResourceExampleUnified_api> Unified_api { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedConnectorResource
	{
		
		/// <summary>
		/// ID of the resource in the Connector's API (downstream)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downstream_id")]
		public string Downstream_id { get; set; }
		
		/// <summary>
		/// Name of the resource in the Connector's API (downstream)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downstream_name")]
		public string Downstream_name { get; set; }
		
		/// <summary>
		/// ID of the resource, typically a lowercased version of name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource (plural)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Status of the resource. Resources with status live or beta are callable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<LinkedConnectorResourceStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LinkedConnectorResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="beta")]
		beta = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="development")]
		development = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upcoming")]
		upcoming = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="considering")]
		considering = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceExampleUnified_api
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accounting")]
		accounting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ats")]
		ats = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="calendar")]
		calendar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="crm")]
		crm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csp")]
		csp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer-support")]
		customerMinussupport = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecommerce")]
		ecommerce = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email-marketing")]
		emailMinusmarketing = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expense-management")]
		expenseMinusmanagement = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file-storage")]
		fileMinusstorage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form")]
		form = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hris")]
		hris = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lead")]
		lead = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payroll")]
		payroll = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pos")]
		pos = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="procurement")]
		procurement = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project-management")]
		projectMinusmanagement = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="script")]
		script = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spreadsheet")]
		spreadsheet = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="team-messaging")]
		teamMinusmessaging = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="issue-tracking")]
		issueMinustracking = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time-registration")]
		timeMinusregistration = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transactional-email")]
		transactionalMinusemail = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault")]
		vault = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="data-warehouse")]
		dataMinuswarehouse = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourceSchemaResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceSchema Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceSchema
	{
	}
	
	/// <summary>
	/// The current state of the Integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IntegrationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="needs_configuration")]
		needs_configuration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configured")]
		configured = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogsFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="connector_id")]
		public string Connector_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exclude_unified_apis")]
		public string Exclude_unified_apis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotImplementedResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	/// <summary>
	/// OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OAuthGrantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorization_code")]
		authorization_code = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client_credentials")]
		client_credentials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="password")]
		password = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentRequiredResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProxyRequest
	{
	}
	
	/// <summary>
	/// Status of the resource. Resources with status live or beta are callable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="beta")]
		beta = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="development")]
		development = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upcoming")]
		upcoming = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="considering")]
		considering = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Session
	{
		
		/// <summary>
		/// The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumer_metadata")]
		public ConsumerMetadata Consumer_metadata { get; set; }
		
		/// <summary>
		/// Custom consumer settings that are passed as part of the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_consumer_settings")]
		public string Custom_consumer_settings { get; set; }
		
		/// <summary>
		/// The URL to redirect the user to after the session has been configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_uri")]
		public string Redirect_uri { get; set; }
		
		/// <summary>
		/// Settings to change the way the Vault is displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public SessionSettings Settings { get; set; }
		
		/// <summary>
		/// Theming options to change the look and feel of Vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public SessionTheme Theme { get; set; }
	}
	
	public class SessionSettings
	{
		
		/// <summary>
		/// Hide actions from your users in [Vault](/apis/vault/reference#section/Get-Started). Actions in `allow_actions` will be shown on a connection in Vault.
		///Available actions are: `delete`, `disconnect`, `reauthorize` and `disable`.
		///Empty array will hide all actions. By default all actions are visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_actions")]
		public string[] Allow_actions { get; set; }
		
		/// <summary>
		/// Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_redirect")]
		public System.Nullable<System.Boolean> Auto_redirect { get; set; }
		
		/// <summary>
		/// Hide Apideck connection guides in [Vault](/apis/vault/reference#section/Get-Started). Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hide_guides")]
		public System.Nullable<System.Boolean> Hide_guides { get; set; }
		
		/// <summary>
		/// A boolean that controls the display of the configurable resources for an integration. When set to true, the resource configuration options will be hidden and not shown to the user. When set to false, the resource configuration options will be displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hide_resource_settings")]
		public System.Nullable<System.Boolean> Hide_resource_settings { get; set; }
		
		/// <summary>
		/// Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isolation_mode")]
		public System.Nullable<System.Boolean> Isolation_mode { get; set; }
		
		/// <summary>
		/// Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sandbox_mode")]
		public System.Nullable<System.Boolean> Sandbox_mode { get; set; }
		
		/// <summary>
		/// The duration of time the session is valid for (maximum 1 week).
		/// </summary>
		[System.ComponentModel.DefaultValue("1h")]
		[System.Runtime.Serialization.DataMember(Name="session_length")]
		public string Session_length { get; set; } = "1h";
		
		/// <summary>
		/// Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_logs")]
		public System.Nullable<System.Boolean> Show_logs { get; set; }
		
		/// <summary>
		/// Configure [Vault](/apis/vault/reference#section/Get-Started) to show the sidebar. Defaults to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_sidebar")]
		public System.Nullable<System.Boolean> Show_sidebar { get; set; }
		
		/// <summary>
		/// Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_suggestions")]
		public System.Nullable<System.Boolean> Show_suggestions { get; set; }
		
		/// <summary>
		/// Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omitting this field will show all Unified APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unified_apis")]
		public UnifiedApiId[] Unified_apis { get; set; }
	}
	
	/// <summary>
	/// Name of Apideck Unified API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UnifiedApiId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accounting")]
		accounting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ats")]
		ats = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="calendar")]
		calendar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="crm")]
		crm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csp")]
		csp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer-support")]
		customerMinussupport = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecommerce")]
		ecommerce = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email-marketing")]
		emailMinusmarketing = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expense-management")]
		expenseMinusmanagement = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file-storage")]
		fileMinusstorage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form")]
		form = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hris")]
		hris = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lead")]
		lead = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payroll")]
		payroll = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pos")]
		pos = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="procurement")]
		procurement = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project-management")]
		projectMinusmanagement = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="script")]
		script = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spreadsheet")]
		spreadsheet = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="team-messaging")]
		teamMinusmessaging = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="issue-tracking")]
		issueMinustracking = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time-registration")]
		timeMinusregistration = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transactional-email")]
		transactionalMinusemail = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault")]
		vault = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="data-warehouse")]
		dataMinuswarehouse = 26,
	}
	
	public class SessionTheme
	{
		
		/// <summary>
		/// The URL to the favicon to use for Vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favicon")]
		public string Favicon { get; set; }
		
		/// <summary>
		/// The URL to the logo to use for Vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The primary color to use for Vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary_color")]
		public string Primary_color { get; set; }
		
		/// <summary>
		/// The URL to the privacy policy that will be shown in the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacy_url")]
		public string Privacy_url { get; set; }
		
		/// <summary>
		/// The background color to use for the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sidepanel_background_color")]
		public string Sidepanel_background_color { get; set; }
		
		/// <summary>
		/// The text color to use for the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sidepanel_text_color")]
		public string Sidepanel_text_color { get; set; }
		
		/// <summary>
		/// The URL to the terms and conditions that will be shown in the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms_url")]
		public string Terms_url { get; set; }
		
		/// <summary>
		/// The name that will be shown in the sidebar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vault_name")]
		public string Vault_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnexpectedErrorResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessableResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Connection Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConsumerRequest
	{
		
		/// <summary>
		/// The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ConsumerMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConsumerResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Consumer Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomMappingRequest
	{
		
		/// <summary>
		/// Target Field Mapping value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomMappingResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomMapping Data { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VaultEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="*")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.created")]
		vault_connection_created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.updated")]
		vault_connection_updated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.disabled")]
		vault_connection_disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.deleted")]
		vault_connection_deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.callable")]
		vault_connection_callable = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.revoked")]
		vault_connection_revoked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vault.connection.token_refresh.failed")]
		vault_connection_token_refresh_failed = 7,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Authorize
		/// __In most cases the authorize link is provided in the ``/connections`` endpoint. Normally you don't need to manually generate these links.__
		/// 
		/// Use this endpoint to authenticate a user with a connector. It will return a 301 redirect to the downstream connector endpoints.
		/// 
		/// Auth links will have a state parameter included to verify the validity of the request. This is the url your users will use to activate OAuth supported integration providers.
		/// 
		/// Vault handles the complete Authorization Code Grant Type Flow for you and will redirect you to the dynamic redirect uri you have appended to the url in case this is missing the default redirect uri you have configured for your Unify application.
		/// 
		/// ConnectionsAuthorize vault/authorize/{service_id}/{application_id}
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="application_id">Application ID of the resource to return</param>
		/// <param name="state">An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.</param>
		/// <param name="redirect_uri">URL to redirect back to after authorization. When left empty the default configured redirect uri will be used.</param>
		/// <param name="scope">One or more OAuth scopes to request from the connector. OAuth scopes control the set of resources and operations that are allowed after authorization. Refer to the connector's documentation for the available scopes.</param>
		public async Task ConnectionsAuthorizeAsync(string service_id, string application_id, string state, string redirect_uri, string[] scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/authorize/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (application_id==null? "" : System.Uri.EscapeDataString(application_id))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&"+string.Join("&", scope.Select(z => $"scope={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Callback
		/// This endpoint gets called after the triggering the authorize flow.
		/// 
		/// Callback links need a state and code parameter to verify the validity of the request.
		/// 
		/// ConnectionsCallback vault/callback
		/// </summary>
		/// <param name="state">An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.</param>
		/// <param name="code">An authorization code from the connector which Apideck Vault will later exchange for an access token.</param>
		public async Task ConnectionsCallbackAsync(string state, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/callback?state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all connections
		/// This endpoint includes all the configured integrations and contains the required assets
		/// to build an integrations page where your users can install integrations.
		/// OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
		/// 
		/// ConnectionsAll vault/connections
		/// </summary>
		/// <param name="api">Scope results to Unified API</param>
		/// <param name="configured">Scopes results to connections that have been configured or not</param>
		/// <returns>Connections</returns>
		public async Task<GetConnectionsResponse> ConnectionsAllAsync(string api, bool configured, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections?api=" + (api==null? "" : System.Uri.EscapeDataString(api))+"&configured="+configured;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a connection
		/// Deletes a connection
		/// ConnectionsDelete vault/connections/{unified_api}/{service_id}
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		public async Task ConnectionsDeleteAsync(string service_id, string unified_api, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get connection
		/// Get a connection
		/// ConnectionsOne vault/connections/{unified_api}/{service_id}
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		/// <returns>Connection</returns>
		public async Task<GetConnectionResponse> ConnectionsOneAsync(string service_id, string unified_api, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update connection
		/// Update a connection
		/// ConnectionsUpdate vault/connections/{unified_api}/{service_id}
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		/// <param name="requestBody">Fields that need to be updated on the resource</param>
		/// <returns>Connection updated</returns>
		public async Task<UpdateConnectionResponse> ConnectionsUpdateAsync(string service_id, string unified_api, Connection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create connection
		/// Create an authorized connection
		/// 
		/// ConnectionsAdd vault/connections/{unified_api}/{service_id}
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		/// <param name="requestBody">Fields that need to be persisted on the resource</param>
		/// <returns>Connection created</returns>
		public async Task<CreateConnectionResponse> ConnectionsAddAsync(string service_id, string unified_api, Connection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import connection
		/// Import an authorized connection.
		/// 
		/// ConnectionsImport vault/connections/{unified_api}/{service_id}/import
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		/// <param name="requestBody">Fields that need to be persisted on the resource</param>
		/// <returns>Connection created</returns>
		public async Task<CreateConnectionResponse> ConnectionsImportAsync(string service_id, string unified_api, ConnectionImportData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Access Token
		/// Get an access token for a connection and store it in Vault. Currently only supported for connections with the client_credentials OAuth grant type.
		/// 
		/// Note that the access token will not be returned in the response. A 200 response code indicates a valid access token was stored on the connection.
		/// 
		/// ConnectionsToken vault/connections/{unified_api}/{service_id}/token
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		/// <returns>Connection</returns>
		public async Task<GetConnectionResponse> ConnectionsTokenAsync(string service_id, string unified_api, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get resource settings
		/// This endpoint returns custom settings and their defaults required by connection for a given resource.
		/// 
		/// ConnectionSettingsAll vault/connections/{unified_api}/{service_id}/{resource}/config
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="resource">Name of the resource (plural)</param>
		/// <returns>Connection</returns>
		public async Task<GetConnectionResponse> ConnectionSettingsAllAsync(string unified_api, string service_id, string resource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update settings
		/// Update default values for a connection's resource settings
		/// ConnectionSettingsUpdate vault/connections/{unified_api}/{service_id}/{resource}/config
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="unified_api">Unified API</param>
		/// <param name="resource">Name of the resource (plural)</param>
		/// <param name="requestBody">Fields that need to be updated on the resource</param>
		/// <returns>Connection updated</returns>
		public async Task<UpdateConnectionResponse> ConnectionSettingsUpdateAsync(string service_id, string unified_api, string resource, Connection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get resource custom fields
		/// This endpoint returns an custom fields on a connection resource.
		/// 
		/// CustomFieldsAll vault/connections/{unified_api}/{service_id}/{resource}/custom-fields
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="resource">Name of the resource (plural)</param>
		/// <returns>Custom mapping</returns>
		public async Task<GetCustomFieldsResponse> CustomFieldsAllAsync(string unified_api, string service_id, string resource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/custom-fields";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomFieldsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get resource example
		/// This endpoint returns a downstream example of a given resource.
		/// 
		/// ConnectionsExample vault/connections/{unified_api}/{service_id}/{resource}/example
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="resource">Name of the resource (plural)</param>
		/// <returns>Resource Schema</returns>
		public async Task<GetResourceExampleResponse> ConnectionsExampleAsync(string unified_api, string service_id, string resource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/example";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourceExampleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get resource schema
		/// This endpoint returns an approximate JSONSchema of a given resource.
		/// 
		/// ConnectionsSchema vault/connections/{unified_api}/{service_id}/{resource}/schema
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="resource">Name of the resource (plural)</param>
		/// <returns>Resource Schema</returns>
		public async Task<GetResourceSchemaResponse> ConnectionsSchemaAsync(string unified_api, string service_id, string resource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/connections/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/schema";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourceSchemaResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all consumers
		/// This endpoint includes all application consumers, along with an aggregated count of requests made.
		/// 
		/// ConsumersAll vault/consumers
		/// </summary>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20</param>
		/// <returns>Consumers</returns>
		public async Task<GetConsumersResponse> ConsumersAllAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/consumers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConsumersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create consumer
		/// Create a consumer
		/// ConsumersAdd vault/consumers
		/// </summary>
		/// <returns>Consumer created</returns>
		public async Task<CreateConsumerResponse> ConsumersAddAsync(Consumer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/consumers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConsumerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete consumer
		/// Delete consumer and all their connections, including credentials.
		/// ConsumersDelete vault/consumers/{consumer_id}
		/// </summary>
		/// <param name="consumer_id">ID of the consumer to return</param>
		/// <returns>Consumer deleted</returns>
		public async Task<DeleteConsumerResponse> ConsumersDeleteAsync(string consumer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/consumers/"+ (consumer_id==null? "" : System.Uri.EscapeDataString(consumer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteConsumerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get consumer
		/// Consumer detail including their aggregated counts with the connections they have authorized.
		/// 
		/// ConsumersOne vault/consumers/{consumer_id}
		/// </summary>
		/// <param name="consumer_id">ID of the consumer to return</param>
		/// <returns>Consumer</returns>
		public async Task<GetConsumerResponse> ConsumersOneAsync(string consumer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/consumers/"+ (consumer_id==null? "" : System.Uri.EscapeDataString(consumer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConsumerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update consumer
		/// Update consumer metadata such as name and email.
		/// ConsumersUpdate vault/consumers/{consumer_id}
		/// </summary>
		/// <param name="consumer_id">ID of the consumer to return</param>
		/// <returns>Consumer updated</returns>
		public async Task<UpdateConsumerResponse> ConsumersUpdateAsync(string consumer_id, UpdateConsumerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/consumers/"+ (consumer_id==null? "" : System.Uri.EscapeDataString(consumer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConsumerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Consumer request counts
		/// Get consumer request counts within a given datetime range.
		/// 
		/// ConsumerRequestCountsAll vault/consumers/{consumer_id}/stats
		/// </summary>
		/// <param name="consumer_id">ID of the consumer to return</param>
		/// <param name="start_datetime">Scopes results to requests that happened after datetime</param>
		/// <param name="end_datetime">Scopes results to requests that happened before datetime</param>
		/// <returns>Consumers Request Counts within Date Range</returns>
		public async Task<ConsumerRequestCountsInDateRangeResponse> ConsumerRequestCountsAllAsync(string consumer_id, string start_datetime, string end_datetime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/consumers/"+ (consumer_id==null? "" : System.Uri.EscapeDataString(consumer_id))+"/stats&start_datetime=" + (start_datetime==null? "" : System.Uri.EscapeDataString(start_datetime))+"&end_datetime=" + (end_datetime==null? "" : System.Uri.EscapeDataString(end_datetime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConsumerRequestCountsInDateRangeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a custom mapping
		/// Deletes a custom mapping
		/// CustomMappingsDelete vault/custom-mappings/{unified_api}/{service_id}/{target_field_id}
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="target_field_id">ID of the target field to return as a custom mapping.</param>
		public async Task CustomMappingsDeleteAsync(string unified_api, string service_id, string target_field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/custom-mappings/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (target_field_id==null? "" : System.Uri.EscapeDataString(target_field_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get custom mapping
		/// Get a custom mapping
		/// CustomMappingsOne vault/custom-mappings/{unified_api}/{service_id}/{target_field_id}
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="target_field_id">ID of the target field to return as a custom mapping.</param>
		/// <returns>Custom mapping</returns>
		public async Task<GetCustomMappingResponse> CustomMappingsOneAsync(string unified_api, string service_id, string target_field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/custom-mappings/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (target_field_id==null? "" : System.Uri.EscapeDataString(target_field_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomMappingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update custom mapping
		/// Update a custom mapping
		/// CustomMappingsUpdate vault/custom-mappings/{unified_api}/{service_id}/{target_field_id}
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="target_field_id">ID of the target field to return as a custom mapping.</param>
		/// <param name="requestBody">Fields that need to be updated on the resource</param>
		/// <returns>Custom mapping updated</returns>
		public async Task<UpdateCustomMappingResponse> CustomMappingsUpdateAsync(string unified_api, string service_id, string target_field_id, UpdateCustomMappingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/custom-mappings/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (target_field_id==null? "" : System.Uri.EscapeDataString(target_field_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCustomMappingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create custom mapping
		/// Create a custom mapping
		/// CustomMappingsAdd vault/custom-mappings/{unified_api}/{service_id}/{target_field_id}
		/// </summary>
		/// <param name="unified_api">Unified API</param>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="target_field_id">ID of the target field to return as a custom mapping.</param>
		/// <param name="requestBody">Fields that need to be updated on the resource</param>
		/// <returns>Custom mapping created</returns>
		public async Task<CreateCustomMappingResponse> CustomMappingsAddAsync(string unified_api, string service_id, string target_field_id, CreateCustomMappingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/custom-mappings/"+ (unified_api==null? "" : System.Uri.EscapeDataString(unified_api))+"/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (target_field_id==null? "" : System.Uri.EscapeDataString(target_field_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomMappingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all consumer request logs
		/// This endpoint includes all consumer request logs.
		/// 
		/// LogsAll vault/logs
		/// </summary>
		/// <param name="filter">Filter results</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20</param>
		/// <returns>Logs</returns>
		public async Task<GetLogsResponse> LogsAllAsync(LogsFilter filter, string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/logs?filter=" + filter+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke connection
		/// __In most cases the authorize link is provided in the ``/connections`` endpoint. Normally you don't need to manually generate these links.__
		/// 
		/// Use this endpoint to revoke an existing OAuth connector.
		/// 
		/// Auth links will have a state parameter included to verify the validity of the request. This is the url your users will use to activate OAuth supported integration providers.
		/// 
		/// Vault handles the complete revoke flow for you and will redirect you to the dynamic redirect uri you have appended to the url in case this is missing the default redirect uri you have configured for your Unify application.
		/// 
		/// ConnectionsRevoke vault/revoke/{service_id}/{application_id}
		/// </summary>
		/// <param name="service_id">Service ID of the resource to return</param>
		/// <param name="application_id">Application ID of the resource to return</param>
		/// <param name="state">An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.</param>
		/// <param name="redirect_uri">URL to redirect back to after authorization. When left empty the default configured redirect uri will be used.</param>
		public async Task ConnectionsRevokeAsync(string service_id, string application_id, string state, string redirect_uri, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/revoke/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id))+"/"+ (application_id==null? "" : System.Uri.EscapeDataString(application_id))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Session
		/// Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
		/// URL to allow temporary access to manage their integrations and settings.
		/// 
		/// Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
		/// 
		/// SessionsCreate vault/sessions
		/// </summary>
		/// <param name="requestBody">Additional redirect uri and/or consumer metadata</param>
		/// <returns>Session created</returns>
		public async Task<CreateSessionResponse> SessionsCreateAsync(Session requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vault/sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
