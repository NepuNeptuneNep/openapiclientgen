//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateLicenseResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceDescription Workspace { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about an Amazon Managed Grafana workspace in your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountAccessType")]
		public AccountAccessType AccountAccessType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public AuthenticationSummary Authentication { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public DataSourceType[] DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeTrialConsumed")]
		public System.Nullable<System.Boolean> FreeTrialConsumed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeTrialExpiration")]
		public System.DateTimeOffset FreeTrialExpiration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		public string GrafanaVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseExpiration")]
		public System.DateTimeOffset LicenseExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public LicenseType LicenseType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.DateTimeOffset Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkAccessControl")]
		public NetworkAccessConfiguration NetworkAccessControl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationDestinations")]
		public NotificationDestinationType[] NotificationDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationRoleName")]
		public string OrganizationRoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationalUnits")]
		public string[] OrganizationalUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public PermissionType PermissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackSetName")]
		public string StackSetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkspaceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcConfiguration VpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceRoleArn")]
		public string WorkspaceRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT_ACCOUNT")]
		CURRENT_ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATION")]
		ORGANIZATION = 1,
	}
	
	/// <summary>
	/// A structure that describes whether the workspace uses SAML, IAM Identity Center, or both methods for user authentication, and whether that authentication is fully configured.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public AuthenticationProviderTypes[] Providers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samlConfigurationStatus")]
		public SamlConfigurationStatus SamlConfigurationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthenticationProviderTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_SSO")]
		AWS_SSO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAML")]
		SAML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SamlConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURED")]
		CONFIGURED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CONFIGURED")]
		NOT_CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMAZON_OPENSEARCH_SERVICE")]
		AMAZON_OPENSEARCH_SERVICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUDWATCH")]
		CLOUDWATCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROMETHEUS")]
		PROMETHEUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XRAY")]
		XRAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMESTREAM")]
		TIMESTREAM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITEWISE")]
		SITEWISE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATHENA")]
		ATHENA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDSHIFT")]
		REDSHIFT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TWINMAKER")]
		TWINMAKER = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTERPRISE")]
		ENTERPRISE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTERPRISE_FREE_TRIAL")]
		ENTERPRISE_FREE_TRIAL = 1,
	}
	
	/// <summary>
	/// <p>The configuration settings for in-bound network access to your workspace.</p> <p>When this is configured, only listed IP addresses and VPC endpoints will be able to access your workspace. Standard Grafana authentication and authorization are still required.</p> <p>Access is granted to a caller that is in either the IP address list or the VPC endpoint list - they do not need to be in both.</p> <p>If this is not configured, or is removed, then all IP addresses and VPC endpoints are allowed. Standard Grafana authentication and authorization are still required.</p> <note> <p>While both <code>prefixListIds</code> and <code>vpceIds</code> are required, you can pass in an empty array of strings for either parameter if you do not want to allow any of that type.</p> <p>If both are passed as empty arrays, no traffic is allowed to the workspace, because only <i>explicitly</i> allowed connections are accepted.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkAccessConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefixListIds")]
		public string[] PrefixListIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpceIds")]
		public string[] VpceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NotificationDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNS")]
		SNS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_MANAGED")]
		CUSTOMER_MANAGED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_MANAGED")]
		SERVICE_MANAGED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkspaceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPGRADING")]
		UPGRADING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETION_FAILED")]
		DELETION_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATION_FAILED")]
		CREATION_FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_FAILED")]
		UPDATE_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPGRADE_FAILED")]
		UPGRADE_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LICENSE_REMOVAL_FAILED")]
		LICENSE_REMOVAL_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERSION_UPDATING")]
		VERSION_UPDATING = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERSION_UPDATE_FAILED")]
		VERSION_UPDATE_FAILED = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	/// <summary>
	/// <p>The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.</p> <note> <p>Provided <code>securityGroupIds</code> and <code>subnetIds</code> must be part of the same VPC.</p> <p>Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceDescription Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkspaceApiKeyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceDescription Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkspaceApiKeyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceDescription Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkspaceAuthenticationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public AuthenticationDescription Authentication { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about the user authentication methods used by the workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsSso")]
		public AwsSsoAuthentication AwsSso { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public AuthenticationProviderTypes[] Providers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saml")]
		public SamlAuthentication Saml { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about how this workspace works with IAM Identity Center. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsSsoAuthentication
	{
		
		[System.Runtime.Serialization.DataMember(Name="ssoClientId")]
		public string SsoClientId { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about how this workspace works with SAML. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SamlAuthentication
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public SamlConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SamlConfigurationStatus Status { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about how this workspace works with SAML. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SamlConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowedOrganizations")]
		public string[] AllowedOrganizations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assertionAttributes")]
		public AssertionAttributes AssertionAttributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idpMetadata")]
		public IdpMetadata IdpMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loginValidityDuration")]
		public System.Nullable<System.Int32> LoginValidityDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleValues")]
		public RoleValues RoleValues { get; set; }
	}
	
	/// <summary>
	/// A structure that defines which attributes in the IdP assertion are to be used to define information about the users authenticated by the IdP to use the workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssertionAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// A structure containing the identity provider (IdP) metadata used to integrate the identity provider with this workspace. You can specify the metadata either by providing a URL to its location in the <code>url</code> parameter, or by specifying the full metadata in XML format in the <code>xml</code> parameter. Specifying both will cause an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdpMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xml")]
		public string Xml { get; set; }
	}
	
	/// <summary>
	/// This structure defines which groups defined in the SAML assertion attribute are to be mapped to the Grafana <code>Admin</code> and <code>Editor</code> roles in the workspace. SAML authenticated users not part of <code>Admin</code> or <code>Editor</code> role groups have <code>Viewer</code> permission over the workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public string[] Admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editor")]
		public string[] Editor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkspaceConfigurationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		public string GrafanaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateLicenseResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceDescription Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public PermissionEntry[] Permissions { get; set; }
	}
	
	/// <summary>
	/// A structure containing the identity of one user or group and the <code>Admin</code>, <code>Editor</code>, or <code>Viewer</code> role that they have.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public Role Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Role
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADMIN")]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDITOR")]
		EDITOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIEWER")]
		VIEWER = 2,
	}
	
	/// <summary>
	/// A structure that specifies one user or group in the workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSO_USER")]
		SSO_USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSO_GROUP")]
		SSO_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="grafanaVersions")]
		public string[] GrafanaVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkspacesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public WorkspaceSummary[] Workspaces { get; set; }
	}
	
	/// <summary>
	/// A structure that contains some information about one workspace in the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public AuthenticationSummary Authentication { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		public string GrafanaVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.DateTimeOffset Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationDestinations")]
		public NotificationDestinationType[] NotificationDestinations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkspaceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePermissionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public UpdateError[] Errors { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about one error encountered while performing an <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causedBy")]
		public UpdateInstruction CausedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Contains the instructions for one Grafana role permission update in a <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInstruction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public UpdateAction Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public Role Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADD")]
		ADD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKE")]
		REVOKE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public WorkspaceDescription Workspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkspaceAuthenticationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public AuthenticationDescription Authentication { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkspaceConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateLicenseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkspaceApiKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyRole")]
		public string KeyRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secondsToLive")]
		public int SecondsToLive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkspaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountAccessType")]
		public AccountAccessType AccountAccessType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationProviders")]
		public AuthenticationProviderTypes[] AuthenticationProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		public string GrafanaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkAccessControl")]
		public NetworkAccessConfiguration NetworkAccessControl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationRoleName")]
		public string OrganizationRoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public PermissionType PermissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackSetName")]
		public string StackSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcConfiguration VpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceDataSources")]
		public DataSourceType[] WorkspaceDataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceDescription")]
		public string WorkspaceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceName")]
		public string WorkspaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceNotificationDestinations")]
		public NotificationDestinationType[] WorkspaceNotificationDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceOrganizationalUnits")]
		public string[] WorkspaceOrganizationalUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceRoleArn")]
		public string WorkspaceRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkspaceApiKeyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkspaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkspaceAuthenticationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkspaceConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkspaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateLicenseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPermissionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkspacesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePermissionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateInstructionBatch")]
		public UpdateInstruction[] UpdateInstructionBatch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkspaceAuthenticationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationProviders")]
		public AuthenticationProviderTypes[] AuthenticationProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samlConfiguration")]
		public SamlConfiguration SamlConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkspaceConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		public string GrafanaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkspaceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountAccessType")]
		public AccountAccessType AccountAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkAccessControl")]
		public NetworkAccessConfiguration NetworkAccessControl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationRoleName")]
		public string OrganizationRoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public PermissionType PermissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeNetworkAccessConfiguration")]
		public System.Nullable<System.Boolean> RemoveNetworkAccessConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeVpcConfiguration")]
		public System.Nullable<System.Boolean> RemoveVpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackSetName")]
		public string StackSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcConfiguration VpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceDataSources")]
		public DataSourceType[] WorkspaceDataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceDescription")]
		public string WorkspaceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceName")]
		public string WorkspaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceNotificationDestinations")]
		public NotificationDestinationType[] WorkspaceNotificationDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceOrganizationalUnits")]
		public string[] WorkspaceOrganizationalUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceRoleArn")]
		public string WorkspaceRoleArn { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Assigns a Grafana Enterprise license to a workspace. Upgrading to Grafana Enterprise incurs additional fees. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/upgrade-to-Grafana-Enterprise.html">Upgrade a workspace to Grafana Enterprise</a>.
		/// AssociateLicense workspaces/{workspaceId}/licenses/{licenseType}
		/// </summary>
		/// <param name="licenseType">The type of license to associate with the workspace.</param>
		/// <param name="workspaceId">The ID of the workspace to associate the license with.</param>
		public async Task AssociateLicenseAsync(LicenseType licenseType, string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/licenses/"+licenseType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the Grafana Enterprise license from a workspace.
		/// DisassociateLicense workspaces/{workspaceId}/licenses/{licenseType}
		/// </summary>
		/// <param name="licenseType">The type of license to remove from the workspace.</param>
		/// <param name="workspaceId">The ID of the workspace to remove the Grafana Enterprise license from.</param>
		public async Task DisassociateLicenseAsync(LicenseType licenseType, string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/licenses/"+licenseType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <i>workspace</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces. You don't have to build, package, or deploy any hardware to run the Grafana server.</p> <p>Don't use <code>CreateWorkspace</code> to modify an existing workspace. Instead, use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspace.html">UpdateWorkspace</a>.</p>
		/// CreateWorkspace workspaces
		/// </summary>
		public async Task CreateWorkspaceAsync(CreateWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Amazon Managed Grafana workspaces in the account, with some information about each workspace. For more complete information about one workspace, use <a href="https://docs.aws.amazon.com/AAMG/latest/APIReference/API_DescribeWorkspace.html">DescribeWorkspace</a>.
		/// ListWorkspaces workspaces
		/// </summary>
		/// <param name="maxResults">The maximum number of workspaces to include in the results.</param>
		/// <param name="nextToken">The token for the next set of workspaces to return. (You receive this token from a previous <code>ListWorkspaces</code> operation.)</param>
		/// <returns>Success</returns>
		public async Task<ListWorkspacesResponse> ListWorkspacesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkspacesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Grafana API key for the workspace. This key can be used to authenticate requests sent to the workspace's HTTP API. See <a href="https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html">https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html</a> for available APIs and example requests.
		/// CreateWorkspaceApiKey workspaces/{workspaceId}/apikeys
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to create an API key.</param>
		/// <returns>Success</returns>
		public async Task<CreateWorkspaceApiKeyResponse> CreateWorkspaceApiKeyAsync(string workspaceId, CreateWorkspaceApiKeyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/apikeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkspaceApiKeyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Managed Grafana workspace.
		/// DeleteWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to delete.</param>
		public async Task DeleteWorkspaceAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays information about one Amazon Managed Grafana workspace.
		/// DescribeWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to display information about.</param>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceResponse> DescribeWorkspaceAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeWorkspaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any optional parameters, the existing values of those parameters are not changed.</p> <p>To modify the user authentication methods that the workspace uses, such as SAML or IAM Identity Center, use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspaceAuthentication.html">UpdateWorkspaceAuthentication</a>.</p> <p>To modify which users in the workspace have the <code>Admin</code> and <code>Editor</code> Grafana roles, use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a>.</p>
		/// UpdateWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to update.</param>
		public async Task UpdateWorkspaceAsync(string workspaceId, UpdateWorkspacePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Grafana API key for the workspace.
		/// DeleteWorkspaceApiKey workspaces/{workspaceId}/apikeys/{keyName}
		/// </summary>
		/// <param name="keyName">The name of the API key to delete.</param>
		/// <param name="workspaceId">The ID of the workspace to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteWorkspaceApiKeyResponse> DeleteWorkspaceApiKeyAsync(string keyName, string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/apikeys/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWorkspaceApiKeyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays information about the authentication methods used in one Amazon Managed Grafana workspace.
		/// DescribeWorkspaceAuthentication workspaces/{workspaceId}/authentication
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to return authentication information about.</param>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceAuthenticationResponse> DescribeWorkspaceAuthenticationAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/authentication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeWorkspaceAuthenticationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Use this operation to define the identity provider (IdP) that this workspace authenticates users from, using SAML. You can also map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p> <note> <p>Changes to the authentication method for a workspace may take a few minutes to take effect.</p> </note>
		/// UpdateWorkspaceAuthentication workspaces/{workspaceId}/authentication
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to update the authentication for.</param>
		/// <returns>Success</returns>
		public async Task<UpdateWorkspaceAuthenticationResponse> UpdateWorkspaceAuthenticationAsync(string workspaceId, UpdateWorkspaceAuthenticationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/authentication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkspaceAuthenticationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the current configuration string for the given workspace.
		/// DescribeWorkspaceConfiguration workspaces/{workspaceId}/configuration
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to get configuration information for.</param>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceConfigurationResponse> DescribeWorkspaceConfigurationAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeWorkspaceConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration string for the given workspace
		/// UpdateWorkspaceConfiguration workspaces/{workspaceId}/configuration
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to update.</param>
		public async Task UpdateWorkspaceConfigurationAsync(string workspaceId, UpdateWorkspaceConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the users and groups who have the Grafana <code>Admin</code> and <code>Editor</code> roles in this workspace. If you use this operation without specifying <code>userId</code> or <code>groupId</code>, the operation returns the roles of all users and groups. If you specify a <code>userId</code> or a <code>groupId</code>, only the roles for that user or group are returned. If you do this, you can specify only one <code>userId</code> or one <code>groupId</code>.
		/// ListPermissions workspaces/{workspaceId}/permissions
		/// </summary>
		/// <param name="groupId">(Optional) Limits the results to only the group that matches this ID.</param>
		/// <param name="maxResults">The maximum number of results to include in the response.</param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You received this token from a previous <code>ListPermissions</code> operation.</param>
		/// <param name="userId">(Optional) Limits the results to only the user that matches this ID.</param>
		/// <param name="userType">(Optional) If you specify <code>SSO_USER</code>, then only the permissions of IAM Identity Center users are returned. If you specify <code>SSO_GROUP</code>, only the permissions of IAM Identity Center groups are returned.</param>
		/// <param name="workspaceId">The ID of the workspace to list permissions for. This parameter is required.</param>
		/// <returns>Success</returns>
		public async Task<ListPermissionsResponse> ListPermissionsAsync(string groupId, int maxResults, string nextToken, string userId, UserType userType, string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/permissions?groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&userType=" + userType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates which users in a workspace have the Grafana <code>Admin</code> or <code>Editor</code> roles.
		/// UpdatePermissions workspaces/{workspaceId}/permissions
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePermissionsResponse> UpdatePermissionsAsync(string workspaceId, UpdatePermissionsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The <code>ListTagsForResource</code> operation returns the tags that are associated with the Amazon Managed Service for Grafana resource specified by the <code>resourceArn</code>. Currently, the only resource that can be tagged is a workspace.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource the list of tags are associated with.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The <code>TagResource</code> operation associates tags with an Amazon Managed Grafana resource. Currently, the only resource that can be tagged is workspaces. </p> <p>If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p>
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource the tag is associated with.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists available versions of Grafana. These are available when calling <code>CreateWorkspace</code>. Optionally, include a workspace to list the versions to which it can be upgraded.
		/// ListVersions versions
		/// </summary>
		/// <param name="maxResults">The maximum number of results to include in the response.</param>
		/// <param name="nextToken">The token to use when requesting the next set of results. You receive this token from a previous <code>ListVersions</code> operation.</param>
		/// <param name="workspace_id">The ID of the workspace to list the available upgrade versions. If not included, lists all versions of Grafana that are supported for <code>CreateWorkspace</code>.</param>
		/// <returns>Success</returns>
		public async Task<ListVersionsResponse> ListVersionsAsync(int maxResults, string nextToken, string workspace_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "versions?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&workspace-id=" + (workspace_id==null? "" : System.Uri.EscapeDataString(workspace_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The <code>UntagResource</code> operation removes the association of the tag with the Amazon Managed Grafana resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource the tag association is removed from. </param>
		/// <param name="tagKeys">The key values of the tag to be removed from the resource.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateWorkspacePostBody
	{
		
		/// <summary>
		/// Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountAccessType")]
		public AccountAccessType AccountAccessType { get; set; }
		
		/// <summary>
		/// Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationProviders")]
		public AuthenticationProviderTypes[] AuthenticationProviders { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
		/// Pattern: ^[!-~]{1,64}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[!-~]{1,64}$")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The configuration string for the workspace that you create. For more information about the format and configuration options available, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html">Working in your Grafana workspace</a>.
		/// Max length: 65536
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Configuration { get; set; }
		
		/// <summary>
		/// <p>Specifies the version of Grafana to support in the new workspace.</p> <p>To get a list of supported version, use the <code>ListVersions</code> operation.</p>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GrafanaVersion { get; set; }
		
		/// <summary>
		/// <p>The configuration settings for in-bound network access to your workspace.</p> <p>When this is configured, only listed IP addresses and VPC endpoints will be able to access your workspace. Standard Grafana authentication and authorization are still required.</p> <p>Access is granted to a caller that is in either the IP address list or the VPC endpoint list - they do not need to be in both.</p> <p>If this is not configured, or is removed, then all IP addresses and VPC endpoints are allowed. Standard Grafana authentication and authorization are still required.</p> <note> <p>While both <code>prefixListIds</code> and <code>vpceIds</code> are required, you can pass in an empty array of strings for either parameter if you do not want to allow any of that type.</p> <p>If both are passed as empty arrays, no traffic is allowed to the workspace, because only <i>explicitly</i> allowed connections are accepted.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAccessControl")]
		public CreateWorkspacePostBodyNetworkAccessControl NetworkAccessControl { get; set; }
		
		/// <summary>
		/// The name of an IAM role that already exists to use with Organizations to access Amazon Web Services data sources and notification channels in other accounts in an organization.
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationRoleName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string OrganizationRoleName { get; set; }
		
		/// <summary>
		/// <p>When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p> <p>You must also specify a <code>workspaceRoleArn</code> for a role that you will manage for the workspace to use when accessing those datasources and notification channels.</p> <p>The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to <code>SERVICE_MANAGED</code>.</p> <note> <p>Use only the <code>CUSTOMER_MANAGED</code> permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. </p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a>.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public PermissionType PermissionType { get; set; }
		
		/// <summary>
		/// The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackSetName")]
		public string StackSetName { get; set; }
		
		/// <summary>
		/// The list of tags associated with the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// <p>The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.</p> <note> <p>Provided <code>securityGroupIds</code> and <code>subnetIds</code> must be part of the same VPC.</p> <p>Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public CreateWorkspacePostBodyVpcConfiguration VpcConfiguration { get; set; }
		
		/// <summary>
		/// This parameter is for internal use only, and should not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceDataSources")]
		public DataSourceType[] WorkspaceDataSources { get; set; }
		
		/// <summary>
		/// <p>A description for the workspace. This is used only to help you identify this workspace.</p> <p>Pattern: <code>^[\\p{L}\\p{Z}\\p{N}\\p{P}]{0,2048}$</code> </p>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string WorkspaceDescription { get; set; }
		
		/// <summary>
		/// The name for the workspace. It does not have to be unique.
		/// Pattern: ^[a-zA-Z0-9-._~]{1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-._~]{1,255}$")]
		public string WorkspaceName { get; set; }
		
		/// <summary>
		/// Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceNotificationDestinations")]
		public NotificationDestinationType[] WorkspaceNotificationDestinations { get; set; }
		
		/// <summary>
		/// Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceOrganizationalUnits")]
		public string[] WorkspaceOrganizationalUnits { get; set; }
		
		/// <summary>
		/// Specified the IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from, including both data sources and notification channels. You are responsible for managing the permissions for this role as new data sources or notification channels are added. 
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string WorkspaceRoleArn { get; set; }
	}
	
	public class CreateWorkspacePostBodyNetworkAccessControl
	{
		
		[System.Runtime.Serialization.DataMember(Name="prefixListIds")]
		public string[] PrefixListIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceIds")]
		public string[] VpceIds { get; set; }
	}
	
	public class CreateWorkspacePostBodyVpcConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
	}
	
	public class CreateWorkspaceApiKeyPostBody
	{
		
		/// <summary>
		/// Specifies the name of the key. Keynames must be unique to the workspace.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string KeyName { get; set; }
		
		/// <summary>
		/// <p>Specifies the permission level of the key.</p> <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyRole")]
		public string KeyRole { get; set; }
		
		/// <summary>
		/// Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.
		/// Required
		/// Minimum: 1
		/// Maximum: 2592000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secondsToLive")]
		[System.ComponentModel.DataAnnotations.Range(1, 2592000)]
		public int SecondsToLive { get; set; }
	}
	
	public class UpdateWorkspacePutBody
	{
		
		/// <summary>
		/// Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountAccessType")]
		public AccountAccessType AccountAccessType { get; set; }
		
		/// <summary>
		/// <p>The configuration settings for in-bound network access to your workspace.</p> <p>When this is configured, only listed IP addresses and VPC endpoints will be able to access your workspace. Standard Grafana authentication and authorization are still required.</p> <p>Access is granted to a caller that is in either the IP address list or the VPC endpoint list - they do not need to be in both.</p> <p>If this is not configured, or is removed, then all IP addresses and VPC endpoints are allowed. Standard Grafana authentication and authorization are still required.</p> <note> <p>While both <code>prefixListIds</code> and <code>vpceIds</code> are required, you can pass in an empty array of strings for either parameter if you do not want to allow any of that type.</p> <p>If both are passed as empty arrays, no traffic is allowed to the workspace, because only <i>explicitly</i> allowed connections are accepted.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAccessControl")]
		public UpdateWorkspacePutBodyNetworkAccessControl NetworkAccessControl { get; set; }
		
		/// <summary>
		/// The name of an IAM role that already exists to use to access resources through Organizations. This can only be used with a workspace that has the <code>permissionType</code> set to <code>CUSTOMER_MANAGED</code>.
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationRoleName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string OrganizationRoleName { get; set; }
		
		/// <summary>
		/// <p>Use this parameter if you want to change a workspace from <code>SERVICE_MANAGED</code> to <code>CUSTOMER_MANAGED</code>. This allows you to manage the permissions that the workspace uses to access datasources and notification channels. If the workspace is in a member Amazon Web Services account of an organization, and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p> <p>If you specify this as <code>CUSTOMER_MANAGED</code>, you must also specify a <code>workspaceRoleArn</code> that the workspace will use for accessing Amazon Web Services resources.</p> <p>For more information on the role and permissions needed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p> <note> <p>Do not use this to convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code>. Do not include this parameter if you want to leave the workspace as <code>SERVICE_MANAGED</code>.</p> <p>You can convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code> using the Amazon Managed Grafana console. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public PermissionType PermissionType { get; set; }
		
		/// <summary>
		/// <p>Whether to remove the network access configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>networkAccessControl</code> to set will return an error.</p> <p>If you remove this configuration by setting this to <code>true</code>, then all IP addresses and VPC endpoints will be allowed. Standard Grafana authentication and authorization will still be required.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeNetworkAccessConfiguration")]
		public System.Nullable<System.Boolean> RemoveNetworkAccessConfiguration { get; set; }
		
		/// <summary>
		/// <p>Whether to remove the VPC configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>vpcConfiguration</code> to set will return an error.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeVpcConfiguration")]
		public System.Nullable<System.Boolean> RemoveVpcConfiguration { get; set; }
		
		/// <summary>
		/// The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackSetName")]
		public string StackSetName { get; set; }
		
		/// <summary>
		/// <p>The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.</p> <note> <p>Provided <code>securityGroupIds</code> and <code>subnetIds</code> must be part of the same VPC.</p> <p>Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public UpdateWorkspacePutBodyVpcConfiguration VpcConfiguration { get; set; }
		
		/// <summary>
		/// This parameter is for internal use only, and should not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceDataSources")]
		public DataSourceType[] WorkspaceDataSources { get; set; }
		
		/// <summary>
		/// A description for the workspace. This is used only to help you identify this workspace.
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string WorkspaceDescription { get; set; }
		
		/// <summary>
		/// A new name for the workspace to update.
		/// Pattern: ^[a-zA-Z0-9-._~]{1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-._~]{1,255}$")]
		public string WorkspaceName { get; set; }
		
		/// <summary>
		/// Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceNotificationDestinations")]
		public NotificationDestinationType[] WorkspaceNotificationDestinations { get; set; }
		
		/// <summary>
		/// Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceOrganizationalUnits")]
		public string[] WorkspaceOrganizationalUnits { get; set; }
		
		/// <summary>
		/// Specifies an IAM role that grants permissions to Amazon Web Services resources that the workspace accesses, such as data sources and notification channels. If this workspace has <code>permissionType</code> <code>CUSTOMER_MANAGED</code>, then this role is required.
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string WorkspaceRoleArn { get; set; }
	}
	
	public class UpdateWorkspacePutBodyNetworkAccessControl
	{
		
		[System.Runtime.Serialization.DataMember(Name="prefixListIds")]
		public string[] PrefixListIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceIds")]
		public string[] VpceIds { get; set; }
	}
	
	public class UpdateWorkspacePutBodyVpcConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
	}
	
	public class UpdateWorkspaceAuthenticationPostBody
	{
		
		/// <summary>
		/// Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationProviders")]
		public AuthenticationProviderTypes[] AuthenticationProviders { get; set; }
		
		/// <summary>
		/// A structure containing information about how this workspace works with SAML. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samlConfiguration")]
		public UpdateWorkspaceAuthenticationPostBodySamlConfiguration SamlConfiguration { get; set; }
	}
	
	public class UpdateWorkspaceAuthenticationPostBodySamlConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowedOrganizations")]
		public string[] AllowedOrganizations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assertionAttributes")]
		public AssertionAttributes AssertionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idpMetadata")]
		public IdpMetadata IdpMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loginValidityDuration")]
		public System.Nullable<System.Int32> LoginValidityDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleValues")]
		public RoleValues RoleValues { get; set; }
	}
	
	public class UpdateWorkspaceConfigurationPutBody
	{
		
		/// <summary>
		/// The new configuration string for the workspace. For more information about the format and configuration options available, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html">Working in your Grafana workspace</a>.
		/// Required
		/// Max length: 65536
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Configuration { get; set; }
		
		/// <summary>
		/// <p>Specifies the version of Grafana to support in the new workspace.</p> <p>Can only be used to upgrade (for example, from 8.4 to 9.4), not downgrade (for example, from 9.4 to 8.4).</p> <p>To know what versions are available to upgrade to for a specific workspace, see the <code>ListVersions</code> operation.</p>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grafanaVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GrafanaVersion { get; set; }
	}
	
	public class UpdatePermissionsPatchBody
	{
		
		/// <summary>
		/// An array of structures that contain the permission updates to make.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateInstructionBatch")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public UpdateInstruction[] UpdateInstructionBatch { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The list of tag keys and values to associate with the resource. You can associate tag keys only, tags (key and values) only or a combination of tag keys and tags.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
