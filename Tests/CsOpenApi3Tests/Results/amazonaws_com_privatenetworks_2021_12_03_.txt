//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcknowledgeOrderReceiptResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Information about an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember(Name="acknowledgmentStatus")]
		public AcknowledgmentStatus AcknowledgmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		public string NetworkSiteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderArn")]
		public string OrderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderedResources")]
		public OrderedResourceDefinition[] OrderedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingInformation")]
		public TrackingInformation[] TrackingInformation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AcknowledgmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNACKNOWLEDGED = 2,
	}
	
	/// <summary>
	/// Details of the network resources in the order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderedResourceDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitmentConfiguration")]
		public CommitmentConfiguration CommitmentConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NetworkResourceDefinitionType Type { get; set; }
	}
	
	/// <summary>
	/// <p>Determines the duration and renewal status of the commitment period for a radio unit.</p> <p>For pricing, see <a href="http://aws.amazon.com/private5g/pricing">Amazon Web Services Private 5G Pricing</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitmentConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="automaticRenewal")]
		public bool AutomaticRenewal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitmentLength")]
		public CommitmentLength CommitmentLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommitmentLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEARS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkResourceDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIO_UNIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_IDENTIFIER = 1,
	}
	
	/// <summary>
	/// Information about an address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateOrProvince")]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street1")]
		public string Street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street2")]
		public string Street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street3")]
		public string Street3 { get; set; }
	}
	
	/// <summary>
	/// Information about tracking a shipment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackingInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateDeviceIdentifierResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a subscriber of a device that can use a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifierArn")]
		public string DeviceIdentifierArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iccid")]
		public string Iccid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imsi")]
		public string Imsi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderArn")]
		public string OrderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DeviceIdentifierStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trafficGroupArn")]
		public string TrafficGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceIdentifierStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateNetworkSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSite")]
		public NetworkSite NetworkSite { get; set; }
	}
	
	/// <summary>
	/// Information about a network site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkSite
	{
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentPlan")]
		public SitePlan CurrentPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		public string NetworkSiteArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteName")]
		public string NetworkSiteName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingPlan")]
		public SitePlan PendingPlan { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NetworkSiteStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	/// <summary>
	/// Information about a site plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SitePlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public NameValuePair[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDefinitions")]
		public NetworkResourceDefinition[] ResourceDefinitions { get; set; }
	}
	
	/// <summary>
	/// Information about a name/value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NameValuePair
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Information about a network resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkResourceDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public NameValuePair[] Options { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NetworkResourceDefinitionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkSiteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPROVISIONING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigureAccessPointResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessPoint")]
		public NetworkResource AccessPoint { get; set; }
	}
	
	/// <summary>
	/// Information about a network resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public NameValuePair[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitmentInformation")]
		public CommitmentInformation CommitmentInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="health")]
		public HealthStatus Health { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkResourceArn")]
		public string NetworkResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		public string NetworkSiteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderArn")]
		public string OrderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnInformation")]
		public ReturnInformation ReturnInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NetworkResourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NetworkResourceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	/// <summary>
	/// Shows the duration, the date and time that the contract started and ends, and the renewal status of the commitment period for the radio unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitmentInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitmentConfiguration")]
		public CommitmentConfiguration CommitmentConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresOn")]
		public System.DateTimeOffset ExpiresOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAt")]
		public System.DateTimeOffset StartAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 2,
	}
	
	/// <summary>
	/// Information about a position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Position
	{
		
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public System.Nullable<System.Double> Elevation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elevationReference")]
		public ElevationReference ElevationReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elevationUnit")]
		public ElevationUnit ElevationUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ElevationReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMSL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ElevationUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEET = 0,
	}
	
	/// <summary>
	/// Information about a request to return a network resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="replacementOrderArn")]
		public string ReplacementOrderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnReason")]
		public string ReturnReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingLabel")]
		public string ShippingLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_RETURN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING_SHIPPING_LABEL = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIO_UNIT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Network
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkName")]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NetworkSiteStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSite")]
		public NetworkSite NetworkSite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateDeviceIdentifierResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSite")]
		public NetworkSite NetworkSite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceIdentifierResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkResource")]
		public NetworkResource NetworkResource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSite")]
		public NetworkSite NetworkSite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetOrderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceIdentifiersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifiers")]
		public DeviceIdentifier[] DeviceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkResources")]
		public NetworkResource[] NetworkResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkSitesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSites")]
		public NetworkSite[] NetworkSites { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public Network[] Networks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOrdersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public Order[] Orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartNetworkResourceUpdateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkResource")]
		public NetworkResource NetworkResource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkSite")]
		public NetworkSite NetworkSite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcknowledgeOrderReceiptRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderArn")]
		public string OrderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateDeviceIdentifierRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifierArn")]
		public string DeviceIdentifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateNetworkSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitmentConfiguration")]
		public CommitmentConfiguration CommitmentConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		public string NetworkSiteArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigureAccessPointRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessPointArn")]
		public string AccessPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpiSecretKey")]
		public string CpiSecretKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpiUserId")]
		public string CpiUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpiUserPassword")]
		public string CpiUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpiUsername")]
		public string CpiUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkName")]
		public string NetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteName")]
		public string NetworkSiteName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingPlan")]
		public SitePlan PendingPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateDeviceIdentifierRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifierArn")]
		public string DeviceIdentifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkSiteRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceIdentifierFilterKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAFFIC_GROUP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceIdentifierFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceIdentifierRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkSiteRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetOrderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceIdentifiersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DeviceIdentifierFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkResourceFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkResourcesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public NetworkResourceFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkSiteFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkSitesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public NetworkSiteFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworksRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public NetworkFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOrdersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public OrderFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		public string NetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPROVISIONING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkFilterKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkResourceFilterKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkSiteFilterKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderFilterKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_SITE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMITMENT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartNetworkResourceUpdateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitmentConfiguration")]
		public CommitmentConfiguration CommitmentConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkResourceArn")]
		public string NetworkResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnReason")]
		public string ReturnReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public UpdateType UpdateType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkSitePlanRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		public string NetworkSiteArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pendingPlan")]
		public SitePlan PendingPlan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		public string NetworkSiteArn { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Acknowledges that the specified network order was received.
		/// AcknowledgeOrderReceipt v1/orders/acknowledge
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcknowledgeOrderReceiptResponse> AcknowledgeOrderReceiptAsync(AcknowledgeOrderReceiptPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/orders/acknowledge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AcknowledgeOrderReceiptResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates the specified device identifier.
		/// ActivateDeviceIdentifier v1/device-identifiers/activate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivateDeviceIdentifierResponse> ActivateDeviceIdentifierAsync(ActivateDeviceIdentifierPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/device-identifiers/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivateDeviceIdentifierResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates the specified network site.
		/// ActivateNetworkSite v1/network-sites/activate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivateNetworkSiteResponse> ActivateNetworkSiteAsync(ActivateNetworkSitePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivateNetworkSiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Configures the specified network resource. </p> <p> Use this action to specify the geographic position of the hardware. You must provide Certified Professional Installer (CPI) credentials in the request so that we can obtain spectrum grants. For more information, see <a href="https://docs.aws.amazon.com/private-networks/latest/userguide/radio-units.html">Radio units</a> in the <i>Amazon Web Services Private 5G User Guide</i>. </p>
		/// ConfigureAccessPoint v1/network-resources/configure
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfigureAccessPointResponse> ConfigureAccessPointAsync(ConfigureAccessPointPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-resources/configure";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigureAccessPointResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a network.
		/// CreateNetwork v1/networks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkResponse> CreateNetworkAsync(CreateNetworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/networks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateNetworkResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a network site.
		/// CreateNetworkSite v1/network-sites
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkSiteResponse> CreateNetworkSiteAsync(CreateNetworkSitePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateNetworkSiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deactivates the specified device identifier.
		/// DeactivateDeviceIdentifier v1/device-identifiers/deactivate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeactivateDeviceIdentifierResponse> DeactivateDeviceIdentifierAsync(DeactivateDeviceIdentifierPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/device-identifiers/deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeactivateDeviceIdentifierResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified network. You must delete network sites before you delete the network. For more information, see <a href="https://docs.aws.amazon.com/private-networks/latest/APIReference/API_DeleteNetworkSite.html">DeleteNetworkSite</a> in the <i>API Reference for Amazon Web Services Private 5G</i>.
		/// DeleteNetwork v1/networks/{networkArn}
		/// </summary>
		/// <param name="clientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="networkArn">The Amazon Resource Name (ARN) of the network.</param>
		/// <returns>Success</returns>
		public async Task<DeleteNetworkResponse> DeleteNetworkAsync(string clientToken, string networkArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/networks/"+ (networkArn==null? "" : System.Uri.EscapeDataString(networkArn))+"?clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteNetworkResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified network.
		/// GetNetwork v1/networks/{networkArn}
		/// </summary>
		/// <param name="networkArn">The Amazon Resource Name (ARN) of the network.</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkResponse> GetNetworkAsync(string networkArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/networks/"+ (networkArn==null? "" : System.Uri.EscapeDataString(networkArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetNetworkResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified network site. Return the hardware after you delete the network site. You are responsible for minimum charges. For more information, see <a href="https://docs.aws.amazon.com/private-networks/latest/userguide/hardware-maintenance.html">Hardware returns</a> in the <i>Amazon Web Services Private 5G User Guide</i>.
		/// DeleteNetworkSite v1/network-sites/{networkSiteArn}
		/// </summary>
		/// <param name="clientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="networkSiteArn">The Amazon Resource Name (ARN) of the network site.</param>
		/// <returns>Success</returns>
		public async Task<DeleteNetworkSiteResponse> DeleteNetworkSiteAsync(string clientToken, string networkSiteArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites/"+ (networkSiteArn==null? "" : System.Uri.EscapeDataString(networkSiteArn))+"?clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteNetworkSiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified network site.
		/// GetNetworkSite v1/network-sites/{networkSiteArn}
		/// </summary>
		/// <param name="networkSiteArn">The Amazon Resource Name (ARN) of the network site.</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkSiteResponse> GetNetworkSiteAsync(string networkSiteArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites/"+ (networkSiteArn==null? "" : System.Uri.EscapeDataString(networkSiteArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetNetworkSiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified device identifier.
		/// GetDeviceIdentifier v1/device-identifiers/{deviceIdentifierArn}
		/// </summary>
		/// <param name="deviceIdentifierArn">The Amazon Resource Name (ARN) of the device identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetDeviceIdentifierResponse> GetDeviceIdentifierAsync(string deviceIdentifierArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/device-identifiers/"+ (deviceIdentifierArn==null? "" : System.Uri.EscapeDataString(deviceIdentifierArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDeviceIdentifierResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified network resource.
		/// GetNetworkResource v1/network-resources/{networkResourceArn}
		/// </summary>
		/// <param name="networkResourceArn">The Amazon Resource Name (ARN) of the network resource.</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkResourceResponse> GetNetworkResourceAsync(string networkResourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-resources/"+ (networkResourceArn==null? "" : System.Uri.EscapeDataString(networkResourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetNetworkResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified order.
		/// GetOrder v1/orders/{orderArn}
		/// </summary>
		/// <param name="orderArn">The Amazon Resource Name (ARN) of the order.</param>
		/// <returns>Success</returns>
		public async Task<GetOrderResponse> GetOrderAsync(string orderArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/orders/"+ (orderArn==null? "" : System.Uri.EscapeDataString(orderArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetOrderResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists device identifiers. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of an order, the status of device identifiers, or the ARN of the traffic group.</p> <p>If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.</p>
		/// ListDeviceIdentifiers v1/device-identifiers/list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="startToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceIdentifiersResponse> ListDeviceIdentifiersAsync(string maxResults, string startToken, ListDeviceIdentifiersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/device-identifiers/list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&startToken=" + (startToken==null? "" : System.Uri.EscapeDataString(startToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeviceIdentifiersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists network resources. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of an order or the status of network resources.</p> <p>If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.</p>
		/// ListNetworkResources v1/network-resources
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="startToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNetworkResourcesResponse> ListNetworkResourcesAsync(string maxResults, string startToken, ListNetworkResourcesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-resources?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&startToken=" + (startToken==null? "" : System.Uri.EscapeDataString(startToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNetworkResourcesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists network sites. Add filters to your request to return a more specific list of results. Use filters to match the status of the network site.
		/// ListNetworkSites v1/network-sites/list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="startToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNetworkSitesResponse> ListNetworkSitesAsync(string maxResults, string startToken, ListNetworkSitesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites/list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&startToken=" + (startToken==null? "" : System.Uri.EscapeDataString(startToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNetworkSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists networks. Add filters to your request to return a more specific list of results. Use filters to match the status of the network.
		/// ListNetworks v1/networks/list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="startToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNetworksResponse> ListNetworksAsync(string maxResults, string startToken, ListNetworksPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/networks/list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&startToken=" + (startToken==null? "" : System.Uri.EscapeDataString(startToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNetworksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists orders. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of the network site or the status of the order.</p> <p>If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.</p>
		/// ListOrders v1/orders/list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="startToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOrdersResponse> ListOrdersAsync(string maxResults, string startToken, ListOrdersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/orders/list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&startToken=" + (startToken==null? "" : System.Uri.EscapeDataString(startToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOrdersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds tags to the specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the resource. </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks the health of the service.
		/// Ping ping
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PingResponse> PingAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PingResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Use this action to do the following tasks:</p> <ul> <li> <p>Update the duration and renewal status of the commitment period for a radio unit. The update goes into effect immediately.</p> </li> <li> <p>Request a replacement for a network resource.</p> </li> <li> <p>Request that you return a network resource.</p> </li> </ul> <p>After you submit a request to replace or return a network resource, the status of the network resource changes to <code>CREATING_SHIPPING_LABEL</code>. The shipping label is available when the status of the network resource is <code>PENDING_RETURN</code>. After the network resource is successfully returned, its status changes to <code>DELETED</code>. For more information, see <a href="https://docs.aws.amazon.com/private-networks/latest/userguide/radio-units.html#return-radio-unit">Return a radio unit</a>.</p>
		/// StartNetworkResourceUpdate v1/network-resources/update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartNetworkResourceUpdateResponse> StartNetworkResourceUpdateAsync(StartNetworkResourceUpdatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-resources/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartNetworkResourceUpdateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes tags from the specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">The tag keys.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified network site.
		/// UpdateNetworkSite v1/network-sites/site
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkSiteResponse> UpdateNetworkSiteAsync(UpdateNetworkSitePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites/site";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateNetworkSiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified network site plan.
		/// UpdateNetworkSitePlan v1/network-sites/plan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkSiteResponse> UpdateNetworkSitePlanAsync(UpdateNetworkSitePlanPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/network-sites/plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateNetworkSiteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AcknowledgeOrderReceiptPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the order.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string OrderArn { get; set; }
	}
	
	public class ActivateDeviceIdentifierPostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the device identifier.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifierArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string DeviceIdentifierArn { get; set; }
	}
	
	public class ActivateNetworkSitePostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// <p>Determines the duration and renewal status of the commitment period for a radio unit.</p> <p>For pricing, see <a href="http://aws.amazon.com/private5g/pricing">Amazon Web Services Private 5G Pricing</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentConfiguration")]
		public ActivateNetworkSitePostBodyCommitmentConfiguration CommitmentConfiguration { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network site.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkSiteArn { get; set; }
		
		/// <summary>
		/// Information about an address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public ActivateNetworkSitePostBodyShippingAddress ShippingAddress { get; set; }
	}
	
	public class ActivateNetworkSitePostBodyCommitmentConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticRenewal")]
		public System.Nullable<System.Boolean> AutomaticRenewal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitmentLength")]
		public CommitmentLength CommitmentLength { get; set; }
	}
	
	public class ActivateNetworkSitePostBodyShippingAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateOrProvince")]
		public string StateOrProvince { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street1")]
		public string Street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street2")]
		public string Street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street3")]
		public string Street3 { get; set; }
	}
	
	public class ConfigureAccessPointPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network resource.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessPointArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string AccessPointArn { get; set; }
		
		/// <summary>
		/// A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. 
		/// Min length: 1
		/// Max length: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpiSecretKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100000)]
		public string CpiSecretKey { get; set; }
		
		/// <summary>
		/// The CPI user ID of the CPI user who is certifying the coordinates of the network resource. 
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpiUserId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string CpiUserId { get; set; }
		
		/// <summary>
		/// The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpiUserPassword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string CpiUserPassword { get; set; }
		
		/// <summary>
		/// The CPI user name of the CPI user who is certifying the coordinates of the radio unit.
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpiUsername")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string CpiUsername { get; set; }
		
		/// <summary>
		/// Information about a position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public ConfigureAccessPointPostBodyPosition Position { get; set; }
	}
	
	public class ConfigureAccessPointPostBodyPosition
	{
		
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public System.Nullable<System.Double> Elevation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elevationReference")]
		public ElevationReference ElevationReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elevationUnit")]
		public ElevationUnit ElevationUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class CreateNetworkPostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description of the network.
		/// Min length: 0
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the network. You can't change the name after you create the network.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[0-9a-zA-Z-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z-]*$")]
		public string NetworkName { get; set; }
		
		/// <summary>
		///  The tags to apply to the network. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateNetworkSitePostBody
	{
		
		/// <summary>
		/// The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description of the site.
		/// Min length: 0
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// The name of the site. You can't change the name after you create the site.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[0-9a-zA-Z-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z-]*$")]
		public string NetworkSiteName { get; set; }
		
		/// <summary>
		/// Information about a site plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingPlan")]
		public CreateNetworkSitePostBodyPendingPlan PendingPlan { get; set; }
		
		/// <summary>
		///  The tags to apply to the network site. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateNetworkSitePostBodyPendingPlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public NameValuePair[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDefinitions")]
		public NetworkResourceDefinition[] ResourceDefinitions { get; set; }
	}
	
	public class DeactivateDeviceIdentifierPostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the device identifier.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifierArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string DeviceIdentifierArn { get; set; }
	}
	
	public class ListDeviceIdentifiersPostBody
	{
		
		/// <summary>
		/// <p>The filters.</p> <ul> <li> <p> <code>ORDER</code> - The Amazon Resource Name (ARN) of the order.</p> </li> <li> <p> <code>STATUS</code> - The status (<code>ACTIVE</code> | <code>INACTIVE</code>).</p> </li> <li> <p> <code>TRAFFIC_GROUP</code> - The Amazon Resource Name (ARN) of the traffic group.</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public System.Collections.Generic.Dictionary<string, string[]> Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	public class ListNetworkResourcesPostBody
	{
		
		/// <summary>
		/// <p>The filters.</p> <ul> <li> <p> <code>ORDER</code> - The Amazon Resource Name (ARN) of the order.</p> </li> <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>DELETED</code> | <code>DELETING</code> | <code>PENDING</code> | <code>PENDING_RETURN</code> | <code>PROVISIONING</code> | <code>SHIPPED</code>).</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public System.Collections.Generic.Dictionary<string, string[]> Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	public class ListNetworkSitesPostBody
	{
		
		/// <summary>
		/// <p>The filters. Add filters to your request to return a more specific list of results. Use filters to match the status of the network sites.</p> <ul> <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public System.Collections.Generic.Dictionary<string, string[]> Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	public class ListNetworksPostBody
	{
		
		/// <summary>
		/// <p>The filters.</p> <ul> <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>CREATED</code> | <code>DELETED</code> | <code>DEPROVISIONING</code> | <code>PROVISIONING</code>).</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public System.Collections.Generic.Dictionary<string, string[]> Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	public class ListOrdersPostBody
	{
		
		/// <summary>
		/// <p>The filters.</p> <ul> <li> <p> <code>NETWORK_SITE</code> - The Amazon Resource Name (ARN) of the network site.</p> </li> <li> <p> <code>STATUS</code> - The status (<code>ACKNOWLEDGING</code> | <code>ACKNOWLEDGED</code> | <code>UNACKNOWLEDGED</code>).</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public System.Collections.Generic.Dictionary<string, string[]> Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkArn { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startToken")]
		public string StartToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to add to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartNetworkResourceUpdatePostBody
	{
		
		/// <summary>
		/// <p>Determines the duration and renewal status of the commitment period for a radio unit.</p> <p>For pricing, see <a href="http://aws.amazon.com/private5g/pricing">Amazon Web Services Private 5G Pricing</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentConfiguration")]
		public StartNetworkResourceUpdatePostBodyCommitmentConfiguration CommitmentConfiguration { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network resource.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkResourceArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkResourceArn { get; set; }
		
		/// <summary>
		/// The reason for the return. Providing a reason for a return is optional.
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnReason")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ReturnReason { get; set; }
		
		/// <summary>
		/// Information about an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public StartNetworkResourceUpdatePostBodyShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// <p>The update type.</p> <ul> <li> <p> <code>REPLACE</code> - Submits a request to replace a defective radio unit. We provide a shipping label that you can use for the return process and we ship a replacement radio unit to you.</p> </li> <li> <p> <code>RETURN</code> - Submits a request to return a radio unit that you no longer need. We provide a shipping label that you can use for the return process.</p> </li> <li> <p> <code>COMMITMENT</code> - Submits a request to change or renew the commitment period. If you choose this value, then you must set <a href="https://docs.aws.amazon.com/private-networks/latest/APIReference/API_StartNetworkResourceUpdate.html#privatenetworks-StartNetworkResourceUpdate-request-commitmentConfiguration"> <code>commitmentConfiguration</code> </a>.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public UpdateType UpdateType { get; set; }
	}
	
	public class StartNetworkResourceUpdatePostBodyCommitmentConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticRenewal")]
		public System.Nullable<System.Boolean> AutomaticRenewal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitmentLength")]
		public CommitmentLength CommitmentLength { get; set; }
	}
	
	public class StartNetworkResourceUpdatePostBodyShippingAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateOrProvince")]
		public string StateOrProvince { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street1")]
		public string Street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street2")]
		public string Street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street3")]
		public string Street3 { get; set; }
	}
	
	public class UpdateNetworkSitePutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description.
		/// Min length: 0
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network site.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkSiteArn { get; set; }
	}
	
	public class UpdateNetworkSitePlanPutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the network site.
		/// Required
		/// Pattern: ^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkSiteArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$")]
		public string NetworkSiteArn { get; set; }
		
		/// <summary>
		/// Information about a site plan.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pendingPlan")]
		public UpdateNetworkSitePlanPutBodyPendingPlan PendingPlan { get; set; }
	}
	
	public class UpdateNetworkSitePlanPutBodyPendingPlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public NameValuePair[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDefinitions")]
		public NetworkResourceDefinition[] ResourceDefinitions { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
