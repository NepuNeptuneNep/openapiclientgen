//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An achievement configuration resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AchievementConfiguration
	{
		
		/// <summary>
		/// The type of the achievement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="achievementType")]
		public System.Nullable<AchievementConfigurationAchievementType> AchievementType { get; set; }
		
		/// <summary>
		/// An achievement configuration detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draft")]
		public AchievementConfigurationDetail Draft { get; set; }
		
		/// <summary>
		/// The ID of the achievement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The initial state of the achievement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialState")]
		public System.Nullable<AchievementConfigurationInitialState> InitialState { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// An achievement configuration detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public AchievementConfigurationDetail Published { get; set; }
		
		/// <summary>
		/// Steps to unlock. Only applicable to incremental achievements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepsToUnlock")]
		public System.Nullable<System.Int32> StepsToUnlock { get; set; }
		
		/// <summary>
		/// The token for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AchievementConfigurationAchievementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACHIEVEMENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCREMENTAL = 2,
	}
	
	/// <summary>
	/// An achievement configuration detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AchievementConfigurationDetail
	{
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public LocalizedStringBundle Description { get; set; }
		
		/// <summary>
		/// The icon url of this achievement. Writes to this field are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfigurationDetail`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public LocalizedStringBundle Name { get; set; }
		
		/// <summary>
		/// Point value for the achievement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointValue")]
		public System.Nullable<System.Int32> PointValue { get; set; }
		
		/// <summary>
		/// The sort rank of this achievement. Writes to this field are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortRank")]
		public System.Nullable<System.Int32> SortRank { get; set; }
	}
	
	/// <summary>
	/// A localized string bundle resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizedStringBundle
	{
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#localizedStringBundle`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The locale strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public LocalizedString[] Translations { get; set; }
	}
	
	/// <summary>
	/// A localized string resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizedString
	{
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#localizedString`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The locale string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// The string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AchievementConfigurationInitialState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIDDEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVEALED = 2,
	}
	
	/// <summary>
	/// A ListConfigurations response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AchievementConfigurationListResponse
	{
		
		/// <summary>
		/// The achievement configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AchievementConfiguration[] Items { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfigurationListResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The pagination token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A number affix resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GamesNumberAffixConfiguration
	{
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="few")]
		public LocalizedStringBundle Few { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="many")]
		public LocalizedStringBundle Many { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="one")]
		public LocalizedStringBundle One { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public LocalizedStringBundle Other { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="two")]
		public LocalizedStringBundle Two { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zero")]
		public LocalizedStringBundle Zero { get; set; }
	}
	
	/// <summary>
	/// A number format resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GamesNumberFormatConfiguration
	{
		
		/// <summary>
		/// The curreny code string. Only used for CURRENCY format type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The number of decimal places for number. Only used for NUMERIC format type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numDecimalPlaces")]
		public System.Nullable<System.Int32> NumDecimalPlaces { get; set; }
		
		/// <summary>
		/// The formatting for the number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberFormatType")]
		public System.Nullable<GamesNumberFormatConfigurationNumberFormatType> NumberFormatType { get; set; }
		
		/// <summary>
		/// A number affix resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public GamesNumberAffixConfiguration Suffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GamesNumberFormatConfigurationNumberFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_FORMAT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_DURATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENCY = 3,
	}
	
	/// <summary>
	/// An leaderboard configuration resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LeaderboardConfiguration
	{
		
		/// <summary>
		/// A leaderboard configuration detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draft")]
		public LeaderboardConfigurationDetail Draft { get; set; }
		
		/// <summary>
		/// The ID of the leaderboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A leaderboard configuration detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public LeaderboardConfigurationDetail Published { get; set; }
		
		/// <summary>
		/// Maximum score that can be posted to this leaderboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreMax")]
		public string ScoreMax { get; set; }
		
		/// <summary>
		/// Minimum score that can be posted to this leaderboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreMin")]
		public string ScoreMin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoreOrder")]
		public System.Nullable<LeaderboardConfigurationScoreOrder> ScoreOrder { get; set; }
		
		/// <summary>
		/// The token for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// A leaderboard configuration detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LeaderboardConfigurationDetail
	{
		
		/// <summary>
		/// The icon url of this leaderboard. Writes to this field are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfigurationDetail`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A localized string bundle resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public LocalizedStringBundle Name { get; set; }
		
		/// <summary>
		/// A number format resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreFormat")]
		public GamesNumberFormatConfiguration ScoreFormat { get; set; }
		
		/// <summary>
		/// The sort rank of this leaderboard. Writes to this field are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortRank")]
		public System.Nullable<System.Int32> SortRank { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LeaderboardConfigurationScoreOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCORE_ORDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LARGER_IS_BETTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALLER_IS_BETTER = 2,
	}
	
	/// <summary>
	/// A ListConfigurations response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LeaderboardConfigurationListResponse
	{
		
		/// <summary>
		/// The leaderboard configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LeaderboardConfiguration[] Items { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfigurationListResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The pagination token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete the achievement configuration with the given ID.
		/// GamesConfiguration_achievementConfigurations_delete games/v1configuration/achievements/{achievementId}
		/// </summary>
		/// <param name="achievementId">The ID of the achievement used by this method.</param>
		/// <returns>Successful response</returns>
		public async Task GamesConfiguration_achievementConfigurations_deleteAsync(string achievementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/achievements/"+ (achievementId==null? "" : System.Uri.EscapeDataString(achievementId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the metadata of the achievement configuration with the given ID.
		/// GamesConfiguration_achievementConfigurations_get games/v1configuration/achievements/{achievementId}
		/// </summary>
		/// <param name="achievementId">The ID of the achievement used by this method.</param>
		/// <returns>Successful response</returns>
		public async Task<AchievementConfiguration> GamesConfiguration_achievementConfigurations_getAsync(string achievementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/achievements/"+ (achievementId==null? "" : System.Uri.EscapeDataString(achievementId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AchievementConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the metadata of the achievement configuration with the given ID.
		/// GamesConfiguration_achievementConfigurations_update games/v1configuration/achievements/{achievementId}
		/// </summary>
		/// <param name="achievementId">The ID of the achievement used by this method.</param>
		/// <returns>Successful response</returns>
		public async Task<AchievementConfiguration> GamesConfiguration_achievementConfigurations_updateAsync(string achievementId, AchievementConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/achievements/"+ (achievementId==null? "" : System.Uri.EscapeDataString(achievementId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AchievementConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the achievement configurations in this application.
		/// GamesConfiguration_achievementConfigurations_list games/v1configuration/applications/{applicationId}/achievements
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <param name="maxResults">The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified `maxResults`.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AchievementConfigurationListResponse> GamesConfiguration_achievementConfigurations_listAsync(string applicationId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/achievements&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AchievementConfigurationListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a new achievement configuration in this application.
		/// GamesConfiguration_achievementConfigurations_insert games/v1configuration/applications/{applicationId}/achievements
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <returns>Successful response</returns>
		public async Task<AchievementConfiguration> GamesConfiguration_achievementConfigurations_insertAsync(string applicationId, AchievementConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/achievements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AchievementConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the leaderboard configurations in this application.
		/// GamesConfiguration_leaderboardConfigurations_list games/v1configuration/applications/{applicationId}/leaderboards
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <param name="maxResults">The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified `maxResults`.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<LeaderboardConfigurationListResponse> GamesConfiguration_leaderboardConfigurations_listAsync(string applicationId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/leaderboards&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaderboardConfigurationListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a new leaderboard configuration in this application.
		/// GamesConfiguration_leaderboardConfigurations_insert games/v1configuration/applications/{applicationId}/leaderboards
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <returns>Successful response</returns>
		public async Task<LeaderboardConfiguration> GamesConfiguration_leaderboardConfigurations_insertAsync(string applicationId, LeaderboardConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/leaderboards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaderboardConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the leaderboard configuration with the given ID.
		/// GamesConfiguration_leaderboardConfigurations_delete games/v1configuration/leaderboards/{leaderboardId}
		/// </summary>
		/// <param name="leaderboardId">The ID of the leaderboard.</param>
		/// <returns>Successful response</returns>
		public async Task GamesConfiguration_leaderboardConfigurations_deleteAsync(string leaderboardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/leaderboards/"+ (leaderboardId==null? "" : System.Uri.EscapeDataString(leaderboardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the metadata of the leaderboard configuration with the given ID.
		/// GamesConfiguration_leaderboardConfigurations_get games/v1configuration/leaderboards/{leaderboardId}
		/// </summary>
		/// <param name="leaderboardId">The ID of the leaderboard.</param>
		/// <returns>Successful response</returns>
		public async Task<LeaderboardConfiguration> GamesConfiguration_leaderboardConfigurations_getAsync(string leaderboardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/leaderboards/"+ (leaderboardId==null? "" : System.Uri.EscapeDataString(leaderboardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaderboardConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the metadata of the leaderboard configuration with the given ID.
		/// GamesConfiguration_leaderboardConfigurations_update games/v1configuration/leaderboards/{leaderboardId}
		/// </summary>
		/// <param name="leaderboardId">The ID of the leaderboard.</param>
		/// <returns>Successful response</returns>
		public async Task<LeaderboardConfiguration> GamesConfiguration_leaderboardConfigurations_updateAsync(string leaderboardId, LeaderboardConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1configuration/leaderboards/"+ (leaderboardId==null? "" : System.Uri.EscapeDataString(leaderboardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeaderboardConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
