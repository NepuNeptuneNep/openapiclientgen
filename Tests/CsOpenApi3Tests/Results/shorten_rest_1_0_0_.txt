//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AliasModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.Int64> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public DestinationModel[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metatags")]
		public MetaTagModel[] Metatags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snippets")]
		public SnippetModel[] Snippets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.Int64> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DestinationModel
	{
		
		/// <summary>
		/// ISO alpha-2 [country code](//en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Please check the [supported OS list](#tag/OperatingSystems)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetaTagModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnippetModel
	{
		
		/// <summary>
		/// Please check the [supported snippets list](#tag/Snippets)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aliasId")]
		public string AliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browser")]
		public string Browser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.Int64> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referrer")]
		public string Referrer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickModelPg
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aliasId")]
		public string AliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browser")]
		public string Browser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.Int64> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referrer")]
		public string Referrer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClicksFilterModel
	{
		
		/// <summary>
		/// Alias Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasId")]
		public string AliasId { get; set; }
		
		/// <summary>
		/// date From
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateFrom")]
		public string DateFrom { get; set; }
		
		/// <summary>
		/// date To
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTo")]
		public string DateTo { get; set; }
		
		/// <summary>
		/// Domain name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// last Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastId")]
		public System.Nullable<System.Int32> LastId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAliasModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public DestinationModel[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metatags")]
		public MetaTagModel[] Metatags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snippets")]
		public SnippetModel[] Snippets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAliasResponseModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="aliasName")]
		public string AliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortUrl")]
		public string ShortUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAliasModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.Int64> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.Int64> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAliasesModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastId")]
		public string LastId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetClicksModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="clicks")]
		public ClickModel[] Clicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastId")]
		public string LastId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete alias
		/// Deletes a single alias by providing alias and domain. If no domain is provided the API will search for the matching alias within the Short.fyi domain
		/// DeleteAlias aliases
		/// </summary>
		/// <param name="domainName">domain which alias belongs to (string without `http/https` or `/`)</param>
		/// <param name="aliasName">alias (without `/` at the beginning)</param>
		/// <returns>Empty response</returns>
		public async Task DeleteAliasAsync(string domainName, string aliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aliases?domainName=" + (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&aliasName=" + (aliasName==null? "" : System.Uri.EscapeDataString(aliasName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get alias
		/// Get detailed information for a single alias by providing its alias and domain name
		/// GetAlias aliases
		/// </summary>
		/// <param name="domainName">domain which alias belongs to (string without `http/https` or `/`)</param>
		/// <param name="aliasName">alias value (without `/` at the beginning)</param>
		/// <returns>Alias model or **null**</returns>
		public async Task<AliasModel> GetAliasAsync(string domainName, string aliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aliases?domainName=" + (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&aliasName=" + (aliasName==null? "" : System.Uri.EscapeDataString(aliasName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AliasModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create alias
		/// This POST method creates a new alias under a specified domain. If no domain is specified in the request the alias will be attached to the default domain Short.fyi
		/// 
		/// **NOTE:** You can override the domain level Meta Tags and Tracking Snippets by specifying them for each URL. Any variables you add to a specific URL will always override domain level settings.
		/// CreateAlias aliases
		/// </summary>
		/// <param name="domainName">domain which alias will belong to (string without `http/https` or `/`)</param>
		/// <param name="aliasName">alias (without `/` at the beginning)</param>
		/// <param name="requestBody">alias properties</param>
		/// <returns>Response contains aliasName, domainName and full generated short link</returns>
		public async Task<CreateAliasResponseModel> CreateAliasAsync(string domainName, string aliasName, CreateAliasModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aliases?domainName=" + (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&aliasName=" + (aliasName==null? "" : System.Uri.EscapeDataString(aliasName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAliasResponseModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update alias
		/// Update a single short URL by providing its alias and domain as a parameter, and the data you wish to update in the body of the request. If no domain is provided you will receive the alias found attached to the Short.fyi domain (if it exists and is linked to your account!)
		/// 
		/// ### NOTE:
		/// 
		/// ( * )If you add a metatag or a snippet with a same name to an alias and the domain it's related to, the value will be taken from the alias and not the domain
		/// 
		/// ( ** ) When you update any array property (like destinations) the block is updated **completely** so you have to specify the old records to avoid deleting them
		/// 
		/// ( *** ) The method updates only the specified properties so if there was no change in one of them you don't have to send it.
		/// UpdateAlias aliases
		/// </summary>
		/// <param name="domainName">domain which alias belongs to (string without `http/https` or `/`)</param>
		/// <param name="aliasName">alias (without `/` at the beginning)</param>
		/// <param name="requestBody">alias properties you wish to be updated</param>
		/// <returns>Empty response</returns>
		public async Task UpdateAliasAsync(string domainName, string aliasName, CreateAliasModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aliases?domainName=" + (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&aliasName=" + (aliasName==null? "" : System.Uri.EscapeDataString(aliasName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get aliases by domain
		/// Obtain a list of all alias names associated with your account and given domain. Result array is in descending order by creation date.
		/// 
		/// If no domain is specified you will receive a list of all the alias names you have created using the Short.fyi domain.
		/// 
		/// If there are more results than the limit for the request the response will return you a value in lastId property you can specify it in the continueFrom query parameter to get the next batch of records.
		/// GetAliases aliases/all
		/// </summary>
		/// <param name="domainName">The domain name to get the aliases for (string without `http/https` or `/`)</param>
		/// <param name="continueFrom">An ID returned by a previous query to continue aliases retrieval (see lastId in response)</param>
		/// <param name="limit">Number of results to return per request
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>returns Array of aliases with lastId</returns>
		public async Task<GetAliasesModel> GetAliasesAsync(string domainName, string continueFrom, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aliases/all?domainName=" + (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"&continueFrom=" + (continueFrom==null? "" : System.Uri.EscapeDataString(continueFrom))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAliasesModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get clicks
		/// Retrieve the raw click data for your account. Clicks are retrieved by creation date in descending order.
		/// 
		/// If there are more results than the limit for the request the response will return you a value in lastId property you can specify it in the continueFrom query parameter to get the next batch of records.
		/// GetClicks clicks
		/// </summary>
		/// <param name="continueFrom">An ID returned by a previous query to continue clicks retrieval (see lastId in response)</param>
		/// <param name="limit">Number of results to return per request
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>returns Array of Click models, also returns lastId</returns>
		public async Task<GetClicksModel> GetClicksAsync(string continueFrom, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clicks?continueFrom=" + (continueFrom==null? "" : System.Uri.EscapeDataString(continueFrom))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetClicksModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get clicks statistics
		/// Retrieve the raw click statistics for your account. Clicks are retrieved by creation date in descending order.
		/// GetStatistics clicks/pg
		/// </summary>
		/// <param name="requestBody">Filter</param>
		/// <returns>returns Array of Click models, also returns lastId</returns>
		public async Task<ClickModelPg> GetStatisticsAsync(ClicksFilterModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clicks/pg";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClickModelPg>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
