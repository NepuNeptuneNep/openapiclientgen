//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferAlreadyCompletedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddThingToBillingGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddThingToThingGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTargetsWithJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachSecurityProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VersionConflictException
	{
	}
	
	/// <summary>
	/// The output from the AttachThingPrincipal operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachThingPrincipalResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelAuditMitigationActionsTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelAuditTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelDetectMitigationActionsTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidStateTransitionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClearDefaultAuthorizerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfirmTopicRuleDestinationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictingResourceUpdateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuditSuppressionResponse
	{
	}
	
	/// <summary>
	/// Information about the version of the policy associated with the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyVersionIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionId")]
		public string PolicyVersionId { get; set; }
	}
	
	/// <summary>
	/// The certificate issuer indentifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssuerCertificateIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateSubject")]
		public string IssuerCertificateSubject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerId")]
		public string IssuerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateSerialNumber")]
		public string IssuerCertificateSerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerArn")]
		public string AuthorizerArn { get; set; }
	}
	
	/// <summary>
	/// A set of key/value pairs that are used to manage the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBillingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupArn")]
		public string BillingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupId")]
		public string BillingGroupId { get; set; }
	}
	
	/// <summary>
	/// The output from the CreateCertificateFromCsr operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCertificateFromCsrResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomMetricResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricArn")]
		public string MetricArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDimensionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationName")]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationArn")]
		public string DomainConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDynamicThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupId")]
		public string ThingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	/// <summary>
	/// The attribute payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merge")]
		public System.Nullable<System.Boolean> Merge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attributes
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidQueryException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFleetMetricResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricArn")]
		public string MetricArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AggregationTypeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Statistics")]
		Statistics = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percentiles")]
		Percentiles = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cardinality")]
		Cardinality = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidAggregationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndexNotReadyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Allows you to create an exponential rate of rollout for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExponentialRolloutRate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseRatePerMinute")]
		public int BaseRatePerMinute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incrementFactor")]
		public double IncrementFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rateIncreaseCriteria")]
		public RateIncreaseCriteria RateIncreaseCriteria { get; set; }
	}
	
	/// <summary>
	/// Allows you to define a criteria to initiate the increase in rate of rollout for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RateIncreaseCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfNotifiedThings")]
		public System.Nullable<System.Int32> NumberOfNotifiedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfSucceededThings")]
		public System.Nullable<System.Int32> NumberOfSucceededThings { get; set; }
	}
	
	/// <summary>
	/// The criteria that determine when and how a job abort takes place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbortCriteria
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failureType")]
		public JobExecutionFailureType FailureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public AbortAction Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thresholdPercentage")]
		public double ThresholdPercentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minNumberOfExecutedThings")]
		public int MinNumberOfExecutedThings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobExecutionFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AbortAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCEL")]
		CANCEL = 0,
	}
	
	/// <summary>
	/// The criteria that determines how many retries are allowed for each failure type for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryCriteria
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failureType")]
		public RetryableFailureType FailureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfRetries")]
		public int NumberOfRetries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RetryableFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobEndBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOP_ROLLOUT")]
		STOP_ROLLOUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCEL")]
		CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORCE_CANCEL")]
		FORCE_CANCEL = 2,
	}
	
	/// <summary>
	/// An optional configuration within the <code>SchedulingConfig</code> to setup a recurring maintenance window with a predetermined start time and duration for the rollout of a job document to all devices in a target group for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceWindow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="durationInMinutes")]
		public int DurationInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateJobTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateArn")]
		public string JobTemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateId")]
		public string JobTemplateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	/// <summary>
	/// The output of the CreateKeysAndCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKeysAndCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public KeyPair KeyPair { get; set; }
	}
	
	/// <summary>
	/// Describes a key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyPair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMitigationActionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionArn")]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that changes the state of the device certificate to inactive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeviceCertificateParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public DeviceCertificateUpdateAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceCertificateUpdateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATE")]
		DEACTIVATE = 0,
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCACertificateParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public DeviceCertificateUpdateAction Action { get; set; }
	}
	
	/// <summary>
	/// Parameters used when defining a mitigation action that move a set of things to a thing group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddThingsToThingGroupParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingGroupNames")]
		public string[] ThingGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideDynamicGroups")]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that adds a blank policy to restrict permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplaceDefaultPolicyVersionParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public PolicyTemplateName TemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyTemplateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLANK_POLICY")]
		BLANK_POLICY = 0,
	}
	
	/// <summary>
	/// Parameters used when defining a mitigation action that enable Amazon Web Services IoT Core logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableIoTLoggingParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArnForLogging")]
		public string RoleArnForLogging { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEBUG")]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INFO")]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARN")]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishFindingToSnsParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topicArn")]
		public string TopicArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOTAUpdateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateId")]
		public string OtaUpdateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotJobId")]
		public string AwsIotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateArn")]
		public string OtaUpdateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotJobArn")]
		public string AwsIotJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateStatus")]
		public OTAUpdateStatus OtaUpdateStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OTAUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_PENDING")]
		CREATE_PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_IN_PROGRESS")]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_COMPLETE")]
		CREATE_COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_FAILED")]
		CREATE_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_IN_PROGRESS")]
		DELETE_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_FAILED")]
		DELETE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Protocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MQTT")]
		MQTT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP")]
		HTTP = 1,
	}
	
	/// <summary>
	/// The rate of increase for a job rollout. This parameter allows you to define an exponential rate increase for a job rollout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobExponentialRolloutRate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseRatePerMinute")]
		public int BaseRatePerMinute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incrementFactor")]
		public double IncrementFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rateIncreaseCriteria")]
		public AwsJobRateIncreaseCriteria RateIncreaseCriteria { get; set; }
	}
	
	/// <summary>
	/// The criteria to initiate the increase in rate of rollout for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobRateIncreaseCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfNotifiedThings")]
		public System.Nullable<System.Int32> NumberOfNotifiedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfSucceededThings")]
		public System.Nullable<System.Int32> NumberOfSucceededThings { get; set; }
	}
	
	/// <summary>
	/// The criteria that determine when and how a job abort takes place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobAbortCriteria
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failureType")]
		public JobExecutionFailureType FailureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public AbortAction Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thresholdPercentage")]
		public double ThresholdPercentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minNumberOfExecutedThings")]
		public int MinNumberOfExecutedThings { get; set; }
	}
	
	/// <summary>
	/// Describes a file to be associated with an OTA update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OTAUpdateFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public System.Nullable<System.Int32> FileType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileVersion")]
		public string FileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileLocation")]
		public FileLocation FileLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeSigning")]
		public CodeSigning CodeSigning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AttributesMap Attributes { get; set; }
	}
	
	/// <summary>
	/// The location of the OTA update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public Stream Stream { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// Describes a group of files that can be streamed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stream
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public System.Nullable<System.Int32> FileId { get; set; }
	}
	
	/// <summary>
	/// The S3 location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Describes the method to use when code signing a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeSigning
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsSignerJobId")]
		public string AwsSignerJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startSigningJobParameter")]
		public StartSigningJobParameter StartSigningJobParameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customCodeSigning")]
		public CustomCodeSigning CustomCodeSigning { get; set; }
	}
	
	/// <summary>
	/// Information required to start a signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartSigningJobParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="signingProfileParameter")]
		public SigningProfileParameter SigningProfileParameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingProfileName")]
		public string SigningProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Destination Destination { get; set; }
	}
	
	/// <summary>
	/// Describes the code-signing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SigningProfileParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatePathOnDevice")]
		public string CertificatePathOnDevice { get; set; }
	}
	
	/// <summary>
	/// Describes the location of the updated firmware.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public S3Destination S3Destination { get; set; }
	}
	
	/// <summary>
	/// Describes the location of updated firmware in S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Describes a custom method used to code sign a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomCodeSigning
	{
		
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public CodeSigningSignature Signature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateChain")]
		public CodeSigningCertificateChain CertificateChain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hashAlgorithm")]
		public string HashAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureAlgorithm")]
		public string SignatureAlgorithm { get; set; }
	}
	
	/// <summary>
	/// Describes the signature for a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeSigningSignature
	{
		
		[System.Runtime.Serialization.DataMember(Name="inlineDocument")]
		public string InlineDocument { get; set; }
	}
	
	/// <summary>
	/// Describes the certificate chain being used when code signing a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeSigningCertificateChain
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inlineDocument")]
		public string InlineDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePackageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageArn")]
		public string PackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePackageVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageVersionArn")]
		public string PackageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorReason")]
		public string ErrorReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAttributes
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PackageVersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DRAFT")]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLISHED")]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED")]
		DEPRECATED = 2,
	}
	
	/// <summary>
	/// The output from the CreatePolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyArn")]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionId")]
		public string PolicyVersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MalformedPolicyException
	{
	}
	
	/// <summary>
	/// The output of the CreatePolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyArn")]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionId")]
		public string PolicyVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultVersion")]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VersionsLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningClaimResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public KeyPair KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.DateTimeOffset Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateArn")]
		public string TemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionId")]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningTemplateVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateArn")]
		public string TemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public System.Nullable<System.Int32> VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultVersion")]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRoleAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleAlias")]
		public string RoleAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateScheduledAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditArn")]
		public string ScheduledAuditArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSecurityProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileArn")]
		public string SecurityProfileArn { get; set; }
	}
	
	/// <summary>
	/// A Device Defender security profile behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Behavior
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricDimension")]
		public MetricDimension MetricDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public BehaviorCriteria Criteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressAlerts")]
		public System.Nullable<System.Boolean> SuppressAlerts { get; set; }
	}
	
	/// <summary>
	/// The dimension of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDimension
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public DimensionValueOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DimensionValueOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN")]
		IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IN")]
		NOT_IN = 1,
	}
	
	/// <summary>
	/// The criteria by which the behavior is determined to be normal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BehaviorCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparisonOperator")]
		public ComparisonOperator ComparisonOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetricValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationSeconds")]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consecutiveDatapointsToAlarm")]
		public System.Nullable<System.Int32> ConsecutiveDatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consecutiveDatapointsToClear")]
		public System.Nullable<System.Int32> ConsecutiveDatapointsToClear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statisticalThreshold")]
		public StatisticalThreshold StatisticalThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mlDetectionConfig")]
		public MachineLearningDetectionConfig MlDetectionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="less-than")]
		lessMinusthan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="less-than-equals")]
		lessMinusthanMinusequals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="greater-than")]
		greaterMinusthan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="greater-than-equals")]
		greaterMinusthanMinusequals = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-cidr-set")]
		inMinuscidrMinusset = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-in-cidr-set")]
		notMinusinMinuscidrMinusset = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-port-set")]
		inMinusportMinusset = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-in-port-set")]
		notMinusinMinusportMinusset = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-set")]
		inMinusset = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-in-set")]
		notMinusinMinusset = 9,
	}
	
	/// <summary>
	/// The value to be compared with the <code>metric</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrs")]
		public string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public System.Nullable<System.Int32> Ports { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Double> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numbers")]
		public System.Nullable<System.Double> Numbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strings")]
		public string[] Strings { get; set; }
	}
	
	/// <summary>
	/// A statistical ranking (percentile) that indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatisticalThreshold
	{
		
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public string Statistic { get; set; }
	}
	
	/// <summary>
	///  The configuration of an ML Detect Security Profile. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MachineLearningDetectionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confidenceLevel")]
		public ConfidenceLevel ConfidenceLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConfidenceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 2,
	}
	
	/// <summary>
	/// A structure containing the alert target ARN and the role ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertTarget
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertTargetArn")]
		public string AlertTargetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The metric you want to retain. Dimensions are optional.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricToRetain
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricDimension")]
		public MetricDimension MetricDimension { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamArn")]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamVersion")]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
	}
	
	/// <summary>
	/// Represents a file to stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public System.Nullable<System.Int32> FileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// The output of the CreateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingId")]
		public string ThingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupId")]
		public string ThingGroupId { get; set; }
	}
	
	/// <summary>
	/// The output of the CreateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThingTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeArn")]
		public string ThingTypeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeId")]
		public string ThingTypeId { get; set; }
	}
	
	/// <summary>
	/// Describes the actions associated with a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Action
	{
		
		[System.Runtime.Serialization.DataMember(Name="dynamoDB")]
		public DynamoDBAction DynamoDB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dynamoDBv2")]
		public DynamoDBv2Action DynamoDBv2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaAction Lambda { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sns")]
		public SnsAction Sns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqs")]
		public SqsAction Sqs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kinesis")]
		public KinesisAction Kinesis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="republish")]
		public RepublishAction Republish { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3")]
		public S3Action S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firehose")]
		public FirehoseAction Firehose { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudwatchMetric")]
		public CloudwatchMetricAction CloudwatchMetric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudwatchAlarm")]
		public CloudwatchAlarmAction CloudwatchAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudwatchLogs")]
		public CloudwatchLogsAction CloudwatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elasticsearch")]
		public ElasticsearchAction Elasticsearch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesforce")]
		public SalesforceAction Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotAnalytics")]
		public IotAnalyticsAction IotAnalytics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotEvents")]
		public IotEventsAction IotEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotSiteWise")]
		public IotSiteWiseAction IotSiteWise { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepFunctions")]
		public StepFunctionsAction StepFunctions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestream")]
		public TimestreamAction Timestream { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http")]
		public HttpAction Http { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kafka")]
		public KafkaAction Kafka { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openSearch")]
		public OpenSearchAction OpenSearch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public LocationAction Location { get; set; }
	}
	
	/// <summary>
	/// <p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p> <code>"hashKeyValue": "${topic(3)}"</code> </p> <p>The following field uses the timestamp:</p> <p> <code>"rangeKeyValue": "${timestamp()}"</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamoDBAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hashKeyField")]
		public string HashKeyField { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hashKeyValue")]
		public string HashKeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hashKeyType")]
		public DynamoKeyType HashKeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangeKeyField")]
		public string RangeKeyField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangeKeyValue")]
		public string RangeKeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangeKeyType")]
		public DynamoKeyType RangeKeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payloadField")]
		public string PayloadField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DynamoKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER")]
		NUMBER = 1,
	}
	
	/// <summary>
	/// <p>Describes an action to write to a DynamoDB table.</p> <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamoDBv2Action
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="putItem")]
		public PutItemInput PutItem { get; set; }
	}
	
	/// <summary>
	/// The input for the DynamoActionVS action that specifies the DynamoDB table to which the message data will be written.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutItemInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// Describes an action to invoke a Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LambdaAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="functionArn")]
		public string FunctionArn { get; set; }
	}
	
	/// <summary>
	/// Describes an action to publish to an Amazon SNS topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnsAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageFormat")]
		public MessageFormat MessageFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MessageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAW")]
		RAW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JSON")]
		JSON = 1,
	}
	
	/// <summary>
	/// Describes an action to publish data to an Amazon SQS queue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SqsAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queueUrl")]
		public string QueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useBase64")]
		public System.Nullable<System.Boolean> UseBase64 { get; set; }
	}
	
	/// <summary>
	/// Describes an action to write data to an Amazon Kinesis stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KinesisAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamName")]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public string PartitionKey { get; set; }
	}
	
	/// <summary>
	/// Describes an action to republish to another topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepublishAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qos")]
		public System.Nullable<System.Int32> Qos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public MqttHeaders Headers { get; set; }
	}
	
	/// <summary>
	/// Specifies MQTT Version 5.0 headers information. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html"> MQTT</a> from Amazon Web Services IoT Core Developer Guide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MqttHeaders
	{
		
		[System.Runtime.Serialization.DataMember(Name="payloadFormatIndicator")]
		public string PayloadFormatIndicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseTopic")]
		public string ResponseTopic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="correlationData")]
		public string CorrelationData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageExpiry")]
		public string MessageExpiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userProperties")]
		public UserProperty[] UserProperties { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that you define in the header. Both the key and the value are either literal strings or valid <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html">substitution templates</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProperty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes an action to write data to an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Action
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cannedAcl")]
		public CannedAccessControlList CannedAcl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CannedAccessControlList
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read")]
		publicMinusread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public-read-write")]
		publicMinusreadMinuswrite = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws-exec-read")]
		awsMinusexecMinusread = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authenticated-read")]
		authenticatedMinusread = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-read")]
		bucketMinusownerMinusread = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bucket-owner-full-control")]
		bucketMinusownerMinusfullMinuscontrol = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="log-delivery-write")]
		logMinusdeliveryMinuswrite = 7,
	}
	
	/// <summary>
	/// Describes an action that writes data to an Amazon Kinesis Firehose stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirehoseAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryStreamName")]
		public string DeliveryStreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="separator")]
		public string Separator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchMode")]
		public System.Nullable<System.Boolean> BatchMode { get; set; }
	}
	
	/// <summary>
	/// Describes an action that captures a CloudWatch metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudwatchMetricAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricNamespace")]
		public string MetricNamespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricValue")]
		public string MetricValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricUnit")]
		public string MetricUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricTimestamp")]
		public string MetricTimestamp { get; set; }
	}
	
	/// <summary>
	/// Describes an action that updates a CloudWatch alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudwatchAlarmAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alarmName")]
		public string AlarmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateReason")]
		public string StateReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateValue")]
		public string StateValue { get; set; }
	}
	
	/// <summary>
	/// Describes an action that sends data to CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudwatchLogsAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logGroupName")]
		public string LogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchMode")]
		public System.Nullable<System.Boolean> BatchMode { get; set; }
	}
	
	/// <summary>
	/// <p>Describes an action that writes data to an Amazon OpenSearch Service domain.</p> <note> <p>The <code>Elasticsearch</code> action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the <code>OpenSearch</code> rule action instead. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_OpenSearchAction.html">OpenSearchAction</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElasticsearchAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Describes an action to write a message to a Salesforce IoT Cloud Input Stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesforceAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Sends message data to an IoT Analytics channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IotAnalyticsAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelArn")]
		public string ChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchMode")]
		public System.Nullable<System.Boolean> BatchMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Sends an input to an IoT Events detector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IotEventsAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputName")]
		public string InputName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchMode")]
		public System.Nullable<System.Boolean> BatchMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Describes an action to send data from an MQTT message that triggered the rule to IoT SiteWise asset properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IotSiteWiseAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="putAssetPropertyValueEntries")]
		public PutAssetPropertyValueEntry[] PutAssetPropertyValueEntries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// An asset property value entry containing the following information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAssetPropertyValueEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="entryId")]
		public string EntryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assetId")]
		public string AssetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyId")]
		public string PropertyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyAlias")]
		public string PropertyAlias { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyValues")]
		public AssetPropertyValue[] PropertyValues { get; set; }
	}
	
	/// <summary>
	/// An asset property value entry containing the following information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetPropertyValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AssetPropertyVariant Value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public AssetPropertyTimestamp Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quality")]
		public string Quality { get; set; }
	}
	
	/// <summary>
	/// Contains an asset property value (of a single type).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetPropertyVariant
	{
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public string IntegerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public string DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public string BooleanValue { get; set; }
	}
	
	/// <summary>
	/// An asset property timestamp entry containing the following information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetPropertyTimestamp
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeInSeconds")]
		public string TimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsetInNanos")]
		public string OffsetInNanos { get; set; }
	}
	
	/// <summary>
	/// Starts execution of a Step Functions state machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepFunctionsAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionNamePrefix")]
		public string ExecutionNamePrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateMachineName")]
		public string StateMachineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a> topic rule action documentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimestreamAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public TimestreamDimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public TimestreamTimestamp Timestamp { get; set; }
	}
	
	/// <summary>
	/// Metadata attributes of the time series that are written in each measure record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimestreamDimension
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes how to interpret an application-defined timestamp value from an MQTT message payload and the precision of that value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimestreamTimestamp
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Send data to an HTTPS endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationUrl")]
		public string ConfirmationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public HttpActionHeader[] Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public HttpAuthorization Auth { get; set; }
	}
	
	/// <summary>
	/// The HTTP action header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpActionHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The authorization method used to send messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpAuthorization
	{
		
		[System.Runtime.Serialization.DataMember(Name="sigv4")]
		public SigV4Authorization Sigv4 { get; set; }
	}
	
	/// <summary>
	/// For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 signing process</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SigV4Authorization
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signingRegion")]
		public string SigningRegion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KafkaAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientProperties")]
		public ClientProperties ClientProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientProperties
	{
	}
	
	/// <summary>
	/// Describes an action that writes data to an Amazon OpenSearch Service domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenSearchAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The Amazon Location rule action sends device location updates from an MQTT message to an Amazon Location tracker resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackerName")]
		public string TrackerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public LocationTimestamp Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	/// <summary>
	/// Describes how to interpret an application-defined timestamp value from an MQTT message payload and the precision of that value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationTimestamp
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SqlParseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTopicRuleDestinationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="topicRuleDestination")]
		public TopicRuleDestination TopicRuleDestination { get; set; }
	}
	
	/// <summary>
	/// A topic rule destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicRuleDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TopicRuleDestinationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpUrlProperties")]
		public HttpUrlDestinationProperties HttpUrlProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcProperties")]
		public VpcDestinationProperties VpcProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TopicRuleDestinationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 4,
	}
	
	/// <summary>
	/// HTTP URL destination properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpUrlDestinationProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmationUrl")]
		public string ConfirmationUrl { get; set; }
	}
	
	/// <summary>
	/// The properties of a virtual private cloud (VPC) destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcDestinationProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroups")]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// HTTP URL destination configuration used by the topic rule's HTTP action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpUrlDestinationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confirmationUrl")]
		public string ConfirmationUrl { get; set; }
	}
	
	/// <summary>
	/// The configuration information for a virtual private cloud (VPC) destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcDestinationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroups")]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccountAuditConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuditSuppressionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuthorizerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBillingGroupResponse
	{
	}
	
	/// <summary>
	/// The output for the DeleteCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCACertificateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomMetricResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDimensionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDynamicThingGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMitigationActionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOTAUpdateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePackageResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePackageVersionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisioningTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisioningTemplateVersionResponse
	{
	}
	
	/// <summary>
	/// The output for the DeleteRegistrationCode operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRegistrationCodeResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRoleAliasResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScheduledAuditResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSecurityProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteStreamResponse
	{
	}
	
	/// <summary>
	/// The output of the DeleteThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThingGroupResponse
	{
	}
	
	/// <summary>
	/// The output for the DeleteThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThingTypeResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTopicRuleDestinationResponse
	{
	}
	
	/// <summary>
	/// The output for the DeprecateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecateThingTypeResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountAuditConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditNotificationTargetConfigurations")]
		public AuditNotificationTargetConfigurations AuditNotificationTargetConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditCheckConfigurations")]
		public AuditCheckConfigurations AuditCheckConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditNotificationTargetConfigurations
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCheckConfigurations
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditFindingResponse
	{
		
		/// <summary>
		/// The findings (results) of the audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finding")]
		public AuditFinding Finding { get; set; }
	}
	
	/// <summary>
	/// The findings (results) of the audit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditFinding
	{
		
		[System.Runtime.Serialization.DataMember(Name="findingId")]
		public string FindingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartTime")]
		public System.DateTimeOffset TaskStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingTime")]
		public System.DateTimeOffset FindingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AuditFindingSeverity Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonCompliantResource")]
		public NonCompliantResource NonCompliantResource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedResources")]
		public RelatedResource[] RelatedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonForNonCompliance")]
		public string ReasonForNonCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonForNonComplianceCode")]
		public string ReasonForNonComplianceCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSuppressed")]
		public System.Nullable<System.Boolean> IsSuppressed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditFindingSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRITICAL")]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 3,
	}
	
	/// <summary>
	/// Information about the resource that was noncompliant with the audit check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonCompliantResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public StringMap AdditionalInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_CERTIFICATE")]
		DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_CERTIFICATE")]
		CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IOT_POLICY")]
		IOT_POLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COGNITO_IDENTITY_POOL")]
		COGNITO_IDENTITY_POOL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLIENT_ID")]
		CLIENT_ID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCOUNT_SETTINGS")]
		ACCOUNT_SETTINGS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROLE_ALIAS")]
		ROLE_ALIAS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IAM_ROLE")]
		IAM_ROLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISSUER_CERTIFICATE")]
		ISSUER_CERTIFICATE = 8,
	}
	
	/// <summary>
	/// Information that identifies the noncompliant resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringMap
	{
	}
	
	/// <summary>
	/// Information about a related resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelatedResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public StringMap AdditionalInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditMitigationActionsTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public AuditMitigationActionsTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStatistics")]
		public AuditMitigationActionsTaskStatistics TaskStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public AuditMitigationActionsTaskTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditCheckToActionsMapping")]
		public AuditCheckToActionsMapping AuditCheckToActionsMapping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionsDefinition")]
		public MitigationAction[] ActionsDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditMitigationActionsTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditMitigationActionsTaskStatistics
	{
	}
	
	/// <summary>
	/// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditMitigationActionsTaskTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="auditTaskId")]
		public string AuditTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingIds")]
		public string[] FindingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditCheckToReasonCodeFilter")]
		public AuditCheckToReasonCodeFilter AuditCheckToReasonCodeFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCheckToReasonCodeFilter
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCheckToActionsMapping
	{
	}
	
	/// <summary>
	/// Describes which changes should be applied as part of a mitigation action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MitigationAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionParams")]
		public MitigationActionParams ActionParams { get; set; }
	}
	
	/// <summary>
	/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MitigationActionParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="updateDeviceCertificateParams")]
		public UpdateDeviceCertificateParams UpdateDeviceCertificateParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateCACertificateParams")]
		public UpdateCACertificateParams UpdateCACertificateParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addThingsToThingGroupParams")]
		public AddThingsToThingGroupParams AddThingsToThingGroupParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replaceDefaultPolicyVersionParams")]
		public ReplaceDefaultPolicyVersionParams ReplaceDefaultPolicyVersionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableIoTLoggingParams")]
		public EnableIoTLoggingParams EnableIoTLoggingParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishFindingToSnsParams")]
		public PublishFindingToSnsParams PublishFindingToSnsParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditSuppressionResponse
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressIndefinitely")]
		public System.Nullable<System.Boolean> SuppressIndefinitely { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public AuditMitigationActionsTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public AuditTaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartTime")]
		public System.DateTimeOffset TaskStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStatistics")]
		public TaskStatistics TaskStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditName")]
		public string ScheduledAuditName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditDetails")]
		public AuditDetails AuditDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON_DEMAND_AUDIT_TASK")]
		ON_DEMAND_AUDIT_TASK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULED_AUDIT_TASK")]
		SCHEDULED_AUDIT_TASK = 1,
	}
	
	/// <summary>
	/// Statistics for the checks performed during the audit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalChecks")]
		public System.Nullable<System.Int32> TotalChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inProgressChecks")]
		public System.Nullable<System.Int32> InProgressChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waitingForDataCollectionChecks")]
		public System.Nullable<System.Int32> WaitingForDataCollectionChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compliantChecks")]
		public System.Nullable<System.Int32> CompliantChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonCompliantChecks")]
		public System.Nullable<System.Int32> NonCompliantChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedChecks")]
		public System.Nullable<System.Int32> FailedChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canceledChecks")]
		public System.Nullable<System.Int32> CanceledChecks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditDetails
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerDescription")]
		public AuthorizerDescription AuthorizerDescription { get; set; }
	}
	
	/// <summary>
	/// The authorizer description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizerDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerArn")]
		public string AuthorizerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerFunctionArn")]
		public string AuthorizerFunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenKeyName")]
		public string TokenKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenSigningPublicKeys")]
		public PublicKeyMap TokenSigningPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingDisabled")]
		public System.Nullable<System.Boolean> SigningDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableCachingForHttp")]
		public System.Nullable<System.Boolean> EnableCachingForHttp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicKeyMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthorizerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeBillingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupId")]
		public string BillingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupArn")]
		public string BillingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupProperties")]
		public BillingGroupProperties BillingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupMetadata")]
		public BillingGroupMetadata BillingGroupMetadata { get; set; }
	}
	
	/// <summary>
	/// The properties of a billing group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupDescription")]
		public string BillingGroupDescription { get; set; }
	}
	
	/// <summary>
	/// Additional information about the billing group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingGroupMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	/// <summary>
	/// The output from the DescribeCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCACertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateDescription")]
		public CACertificateDescription CertificateDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationConfig")]
		public RegistrationConfig RegistrationConfig { get; set; }
	}
	
	/// <summary>
	/// Describes a CA certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CACertificateDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRegistrationStatus")]
		public AutoRegistrationStatus AutoRegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerVersion")]
		public System.Nullable<System.Int32> CustomerVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generationId")]
		public string GenerationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public CertificateValidity Validity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateMode")]
		public CertificateMode CertificateMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutoRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLE")]
		ENABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLE")]
		DISABLE = 1,
	}
	
	/// <summary>
	/// When the certificate is valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateValidity
	{
		
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.DateTimeOffset NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notAfter")]
		public System.DateTimeOffset NotAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNI_ONLY")]
		SNI_ONLY = 1,
	}
	
	/// <summary>
	/// The registration configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegistrationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
	}
	
	/// <summary>
	/// The output of the DescribeCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateDescription")]
		public CertificateDescription CertificateDescription { get; set; }
	}
	
	/// <summary>
	/// Describes a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousOwnedBy")]
		public string PreviousOwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerVersion")]
		public System.Nullable<System.Int32> CustomerVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferData")]
		public TransferData TransferData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generationId")]
		public string GenerationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public CertificateValidity Validity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateMode")]
		public CertificateMode CertificateMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_TRANSFER")]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_INACTIVE")]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_ACTIVATION")]
		PENDING_ACTIVATION = 5,
	}
	
	/// <summary>
	/// Data used to transfer a certificate to an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferData
	{
		
		[System.Runtime.Serialization.DataMember(Name="transferMessage")]
		public string TransferMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectReason")]
		public string RejectReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferDate")]
		public System.DateTimeOffset TransferDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acceptDate")]
		public System.DateTimeOffset AcceptDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectDate")]
		public System.DateTimeOffset RejectDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCustomMetricResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricArn")]
		public string MetricArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricType")]
		public CustomMetricType MetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string-list")]
		stringMinuslist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ip-address-list")]
		ipMinusaddressMinuslist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number-list")]
		numberMinuslist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number")]
		number = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDefaultAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerDescription")]
		public AuthorizerDescription AuthorizerDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDetectMitigationActionsTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskSummary")]
		public DetectMitigationActionsTaskSummary TaskSummary { get; set; }
	}
	
	/// <summary>
	///  The summary of the mitigation action tasks. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectMitigationActionsTaskSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public DetectMitigationActionsTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartTime")]
		public System.DateTimeOffset TaskStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskEndTime")]
		public System.DateTimeOffset TaskEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public DetectMitigationActionsTaskTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationEventOccurrenceRange")]
		public ViolationEventOccurrenceRange ViolationEventOccurrenceRange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlyActiveViolationsIncluded")]
		public System.Nullable<System.Boolean> OnlyActiveViolationsIncluded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressedAlertsIncluded")]
		public System.Nullable<System.Boolean> SuppressedAlertsIncluded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionsDefinition")]
		public MitigationAction[] ActionsDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStatistics")]
		public DetectMitigationActionsTaskStatistics TaskStatistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DetectMitigationActionsTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFUL")]
		SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
	}
	
	/// <summary>
	///  The target of a mitigation action task. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectMitigationActionsTaskTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="violationIds")]
		public string[] ViolationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviorName")]
		public string BehaviorName { get; set; }
	}
	
	/// <summary>
	///  Specifies the time period of which violation events occurred between. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViolationEventOccurrenceRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	/// <summary>
	///  The statistics of a mitigation action task. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectMitigationActionsTaskStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionsExecuted")]
		public System.Nullable<System.Int32> ActionsExecuted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionsSkipped")]
		public System.Nullable<System.Int32> ActionsSkipped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionsFailed")]
		public System.Nullable<System.Int32> ActionsFailed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDimensionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DimensionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DimensionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOPIC_FILTER")]
		TOPIC_FILTER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDomainConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationName")]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationArn")]
		public string DomainConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverCertificates")]
		public ServerCertificateSummary[] ServerCertificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerConfig")]
		public AuthorizerConfig AuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationStatus")]
		public DomainConfigurationStatus DomainConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public ServiceType ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainType")]
		public DomainType DomainType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusChangeDate")]
		public System.DateTimeOffset LastStatusChangeDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public TlsConfig TlsConfig { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about a server certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerCertificateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverCertificateArn")]
		public string ServerCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverCertificateStatus")]
		public ServerCertificateStatus ServerCertificateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverCertificateStatusDetail")]
		public string ServerCertificateStatusDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServerCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID")]
		INVALID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALID")]
		VALID = 1,
	}
	
	/// <summary>
	/// An object that specifies the authorization service for a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizerConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultAuthorizerName")]
		public string DefaultAuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowAuthorizerOverride")]
		public System.Nullable<System.Boolean> AllowAuthorizerOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DomainConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA")]
		DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDENTIAL_PROVIDER")]
		CREDENTIAL_PROVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOBS")]
		JOBS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DomainType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENDPOINT")]
		ENDPOINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_MANAGED")]
		AWS_MANAGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_MANAGED")]
		CUSTOMER_MANAGED = 2,
	}
	
	/// <summary>
	/// An object that specifies the TLS configuration for a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TlsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityPolicy")]
		public string SecurityPolicy { get; set; }
	}
	
	/// <summary>
	/// The output from the DescribeEndpoint operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="endpointAddress")]
		public string EndpointAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventConfigurations")]
		public EventConfigurations EventConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventConfigurations
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFleetMetricResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public AggregationType AggregationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public FleetMetricUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricArn")]
		public string MetricArn { get; set; }
	}
	
	/// <summary>
	/// The type of aggregation queries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregationType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AggregationTypeName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FleetMetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexStatus")]
		public IndexStatus IndexStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IndexStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUILDING")]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REBUILDING")]
		REBUILDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentSource")]
		public string DocumentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// The <code>Job</code> object contains details about a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceCanceled")]
		public System.Nullable<System.Boolean> ForceCanceled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public AbortConfig AbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobProcessDetails")]
		public JobProcessDetails JobProcessDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public TimeoutConfig TimeoutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespaceId")]
		public string NamespaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateArn")]
		public string JobTemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public JobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentParameters")]
		public ParameterMap DocumentParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isConcurrent")]
		public System.Nullable<System.Boolean> IsConcurrent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedulingConfig")]
		public SchedulingConfig SchedulingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledJobRollouts")]
		public ScheduledJobRollout[] ScheduledJobRollouts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationPackageVersions")]
		public string[] DestinationPackageVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTINUOUS")]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNAPSHOT")]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETION_IN_PROGRESS")]
		DELETION_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULED")]
		SCHEDULED = 4,
	}
	
	/// <summary>
	/// Configuration for pre-signed S3 URLs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresInSec")]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	/// <summary>
	/// Allows you to create a staged rollout of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public ExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	/// <summary>
	/// The criteria that determine when and how a job abort takes place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbortConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public AbortCriteria[] CriteriaList { get; set; }
	}
	
	/// <summary>
	/// The job process details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobProcessDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="processingTargets")]
		public string[] ProcessingTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfCanceledThings")]
		public System.Nullable<System.Int32> NumberOfCanceledThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfSucceededThings")]
		public System.Nullable<System.Int32> NumberOfSucceededThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfFailedThings")]
		public System.Nullable<System.Int32> NumberOfFailedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRejectedThings")]
		public System.Nullable<System.Int32> NumberOfRejectedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfQueuedThings")]
		public System.Nullable<System.Int32> NumberOfQueuedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfInProgressThings")]
		public System.Nullable<System.Int32> NumberOfInProgressThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRemovedThings")]
		public System.Nullable<System.Int32> NumberOfRemovedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfTimedOutThings")]
		public System.Nullable<System.Int32> NumberOfTimedOutThings { get; set; }
	}
	
	/// <summary>
	/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	/// <summary>
	/// The configuration that determines how many retries are allowed for each failure type for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionsRetryConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public RetryCriteria[] CriteriaList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterMap
	{
	}
	
	/// <summary>
	/// Specifies the date and time that a job will begin the rollout of the job document to all devices in the target group. Additionally, you can specify the end behavior for each job execution when it reaches the scheduled end time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SchedulingConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endBehavior")]
		public JobEndBehavior EndBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindows")]
		public MaintenanceWindow[] MaintenanceWindows { get; set; }
	}
	
	/// <summary>
	/// Displays the next seven maintenance window occurrences and their start times.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledJobRollout
	{
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public JobExecution Execution { get; set; }
	}
	
	/// <summary>
	/// The job execution object represents the execution of a job on a particular device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceCanceled")]
		public System.Nullable<System.Boolean> ForceCanceled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public JobExecutionStatusDetails StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedAt")]
		public System.DateTimeOffset QueuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionNumber")]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approximateSecondsBeforeTimedOut")]
		public System.Nullable<System.Int32> ApproximateSecondsBeforeTimedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUEUED")]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVED")]
		REMOVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 7,
	}
	
	/// <summary>
	/// Details of the job execution status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionStatusDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detailsMap")]
		public DetailsMap DetailsMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetailsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateArn")]
		public string JobTemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateId")]
		public string JobTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentSource")]
		public string DocumentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// The criteria that determine when and how a job abort takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public AbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public TimeoutConfig TimeoutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public JobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindows")]
		public MaintenanceWindow[] MaintenanceWindows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationPackageVersions")]
		public string[] DestinationPackageVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeManagedJobTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateArn")]
		public string TemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateVersion")]
		public string TemplateVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string[] Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentParameters")]
		public DocumentParameter[] DocumentParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
	}
	
	/// <summary>
	/// <p>A map of key-value pairs containing the patterns that need to be replaced in a managed template job document schema. You can use the description of each key as a guidance to specify the inputs during runtime when creating a job.</p> <note> <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="example")]
		public string Example { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMitigationActionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public MitigationActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionArn")]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionParams")]
		public MitigationActionParams ActionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MitigationActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_DEVICE_CERTIFICATE")]
		UPDATE_DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_CA_CERTIFICATE")]
		UPDATE_CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADD_THINGS_TO_THING_GROUP")]
		ADD_THINGS_TO_THING_GROUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPLACE_DEFAULT_POLICY_VERSION")]
		REPLACE_DEFAULT_POLICY_VERSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLE_IOT_LOGGING")]
		ENABLE_IOT_LOGGING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLISH_FINDING_TO_SNS")]
		PUBLISH_FINDING_TO_SNS = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateArn")]
		public string TemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionId")]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningRoleArn")]
		public string ProvisioningRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preProvisioningHook")]
		public ProvisioningHook PreProvisioningHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TemplateType Type { get; set; }
	}
	
	/// <summary>
	/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="payloadVersion")]
		public string PayloadVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TemplateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLEET_PROVISIONING")]
		FLEET_PROVISIONING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JITP")]
		JITP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningTemplateVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public System.Nullable<System.Int32> VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultVersion")]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRoleAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasDescription")]
		public RoleAliasDescription RoleAliasDescription { get; set; }
	}
	
	/// <summary>
	/// Role alias description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleAliasDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleAlias")]
		public string RoleAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialDurationSeconds")]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScheduledAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AuditFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public DayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditName")]
		public string ScheduledAuditName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditArn")]
		public string ScheduledAuditArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAILY")]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEKLY")]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIWEEKLY")]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHLY")]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUN")]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MON")]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TUE")]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WED")]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THU")]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRI")]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAT")]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSecurityProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileArn")]
		public string SecurityProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileDescription")]
		public string SecurityProfileDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alertTargets")]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetain")]
		public string[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetainV2")]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertTargets
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamInfo")]
		public StreamInfo StreamInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamArn")]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamVersion")]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public StreamFile[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The output from the DescribeThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultClientId")]
		public string DefaultClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingId")]
		public string ThingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		public string BillingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupId")]
		public string ThingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupMetadata")]
		public ThingGroupMetadata ThingGroupMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IndexStatus Status { get; set; }
	}
	
	/// <summary>
	/// Thing group properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupDescription")]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
	}
	
	/// <summary>
	/// Thing group metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingGroupMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="parentGroupName")]
		public string ParentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootToParentThingGroups")]
		public GroupNameAndArn[] RootToParentThingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	/// <summary>
	/// The name and ARN of a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupNameAndArn
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupArn")]
		public string GroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingRegistrationTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputFileBucket")]
		public string InputFileBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputFileKey")]
		public string InputFileKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successCount")]
		public System.Nullable<System.Int32> SuccessCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCount")]
		public System.Nullable<System.Int32> FailureCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentageProgress")]
		public System.Nullable<System.Int32> PercentageProgress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Completed")]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelling")]
		Cancelling = 4,
	}
	
	/// <summary>
	/// The output for the DescribeThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeId")]
		public string ThingTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeArn")]
		public string ThingTypeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeProperties")]
		public ThingTypeProperties ThingTypeProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeMetadata")]
		public ThingTypeMetadata ThingTypeMetadata { get; set; }
	}
	
	/// <summary>
	/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingTypeProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeDescription")]
		public string ThingTypeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchableAttributes")]
		public string[] SearchableAttributes { get; set; }
	}
	
	/// <summary>
	/// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingTypeMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deprecationDate")]
		public System.DateTimeOffset DeprecationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachSecurityProfileResponse
	{
	}
	
	/// <summary>
	/// The output from the DetachThingPrincipal operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachThingPrincipalResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBehaviorModelTrainingSummariesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="summaries")]
		public BehaviorModelTrainingSummary[] Summaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The summary of an ML Detect behavior model. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BehaviorModelTrainingSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviorName")]
		public string BehaviorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trainingDataCollectionStartDate")]
		public System.DateTimeOffset TrainingDataCollectionStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelStatus")]
		public ModelStatus ModelStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointsCollectionPercentage")]
		public System.Nullable<System.Double> DatapointsCollectionPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModelRefreshDate")]
		public System.DateTimeOffset LastModelRefreshDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_BUILD")]
		PENDING_BUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketsAggregationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public Bucket[] Buckets { get; set; }
	}
	
	/// <summary>
	/// A count of documents that meets a specific aggregation criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bucket
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public string KeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Performs an aggregation that will return a list of buckets. The list of buckets is a ranked list of the number of occurrences of an aggregation field value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TermsAggregation
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxBuckets")]
		public System.Nullable<System.Int32> MaxBuckets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCardinalityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="cardinality")]
		public System.Nullable<System.Int32> Cardinality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEffectivePoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="effectivePolicies")]
		public EffectivePolicy[] EffectivePolicies { get; set; }
	}
	
	/// <summary>
	/// The policy that has the effect on the authorization results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EffectivePolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyArn")]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIndexingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingIndexingConfiguration")]
		public ThingIndexingConfiguration ThingIndexingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupIndexingConfiguration")]
		public ThingGroupIndexingConfiguration ThingGroupIndexingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingIndexingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingIndexingMode")]
		public ThingIndexingMode ThingIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingConnectivityIndexingMode")]
		public ThingConnectivityIndexingMode ThingConnectivityIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceDefenderIndexingMode")]
		public DeviceDefenderIndexingMode DeviceDefenderIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namedShadowIndexingMode")]
		public NamedShadowIndexingMode NamedShadowIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managedFields")]
		public Field[] ManagedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public Field[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public IndexingFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThingIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTRY")]
		REGISTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTRY_AND_SHADOW")]
		REGISTRY_AND_SHADOW = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThingConnectivityIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS")]
		STATUS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceDefenderIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIOLATIONS")]
		VIOLATIONS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NamedShadowIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON")]
		ON = 1,
	}
	
	/// <summary>
	/// Describes the name and data type at a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Field
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Number")]
		Number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="String")]
		String = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Boolean")]
		Boolean = 2,
	}
	
	/// <summary>
	/// Provides additional filters for specific data sources. Named shadow is the only data source that currently supports and requires a filter. To add named shadows to your fleet indexing configuration, set <code>namedShadowIndexingMode</code> to be <code>ON</code> and specify your shadow names in <code>filter</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndexingFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="namedShadowNames")]
		public string[] NamedShadowNames { get; set; }
	}
	
	/// <summary>
	/// Thing group indexing configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingGroupIndexingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingGroupIndexingMode")]
		public NamedShadowIndexingMode ThingGroupIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managedFields")]
		public Field[] ManagedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public Field[] CustomFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobDocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
	}
	
	/// <summary>
	/// The output from the GetLoggingOptions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoggingOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOTAUpdateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateInfo")]
		public OTAUpdateInfo OtaUpdateInfo { get; set; }
	}
	
	/// <summary>
	/// Information about an OTA update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OTAUpdateInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateId")]
		public string OtaUpdateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateArn")]
		public string OtaUpdateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		public Protocol[] Protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsJobExecutionsRolloutConfig")]
		public AwsJobExecutionsRolloutConfig AwsJobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsJobPresignedUrlConfig")]
		public AwsJobPresignedUrlConfig AwsJobPresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateFiles")]
		public OTAUpdateFile[] OtaUpdateFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateStatus")]
		public OTAUpdateStatus OtaUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotJobId")]
		public string AwsIotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotJobArn")]
		public string AwsIotJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalParameters")]
		public AdditionalParameterMap AdditionalParameters { get; set; }
	}
	
	/// <summary>
	/// Configuration for the rollout of OTA updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public AwsJobExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	/// <summary>
	/// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobPresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiresInSec")]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	/// <summary>
	/// Error information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalParameterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPackageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageArn")]
		public string PackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionName")]
		public string DefaultVersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPackageConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionUpdateByJobsConfig")]
		public VersionUpdateByJobsConfig VersionUpdateByJobsConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Configuration to manage IoT Job's package version reporting. If configured, Jobs updates the thing's reserved named shadow with the package version information up on successful job completion.</p> <p> <b>Note:</b> For each job, the destinationPackageVersions attribute has to be set with the correct data for Jobs to report to the thing shadow. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VersionUpdateByJobsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPackageVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageVersionArn")]
		public string PackageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorReason")]
		public string ErrorReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPercentilesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="percentiles")]
		public PercentPair[] Percentiles { get; set; }
	}
	
	/// <summary>
	/// Describes the percentile and percentile value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PercentPair
	{
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Double> Percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// The output from the GetPolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyArn")]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionId")]
		public string DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generationId")]
		public string GenerationId { get; set; }
	}
	
	/// <summary>
	/// The output from the GetPolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyArn")]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionId")]
		public string PolicyVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultVersion")]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generationId")]
		public string GenerationId { get; set; }
	}
	
	/// <summary>
	/// The output from the GetRegistrationCode operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRegistrationCodeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="registrationCode")]
		public string RegistrationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStatisticsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public Statistics Statistics { get; set; }
	}
	
	/// <summary>
	/// A map of key-value pairs for all supported statistics. For issues with missing or unexpected values for this API, consult <a href="https://docs.aws.amazon.com/iot/latest/developerguide/fleet-indexing-troubleshooting.html"> Fleet indexing troubleshooting guide</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Double> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public System.Nullable<System.Double> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sumOfSquares")]
		public System.Nullable<System.Double> SumOfSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variance")]
		public System.Nullable<System.Double> Variance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stdDeviation")]
		public System.Nullable<System.Double> StdDeviation { get; set; }
	}
	
	/// <summary>
	/// The output from the GetTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTopicRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ruleArn")]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public TopicRule Rule { get; set; }
	}
	
	/// <summary>
	/// Describes a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sql")]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleDisabled")]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotSqlVersion")]
		public string AwsIotSqlVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorAction")]
		public Action ErrorAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTopicRuleDestinationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="topicRuleDestination")]
		public TopicRuleDestination TopicRuleDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetV2LoggingOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLogLevel")]
		public LogLevel DefaultLogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableAllLogs")]
		public System.Nullable<System.Boolean> DisableAllLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotConfiguredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActiveViolationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeViolations")]
		public ActiveViolation[] ActiveViolations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about an active Device Defender security profile behavior violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveViolation
	{
		
		[System.Runtime.Serialization.DataMember(Name="violationId")]
		public string ViolationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behavior")]
		public Behavior Behavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastViolationValue")]
		public MetricValue LastViolationValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationEventAdditionalInfo")]
		public ViolationEventAdditionalInfo ViolationEventAdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationState")]
		public VerificationState VerificationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationStateDescription")]
		public string VerificationStateDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastViolationTime")]
		public System.DateTimeOffset LastViolationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationStartTime")]
		public System.DateTimeOffset ViolationStartTime { get; set; }
	}
	
	/// <summary>
	///  The details of a violation event. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViolationEventAdditionalInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="confidenceLevel")]
		public ConfidenceLevel ConfidenceLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VerificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FALSE_POSITIVE")]
		FALSE_POSITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BENIGN_POSITIVE")]
		BENIGN_POSITIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRUE_POSITIVE")]
		TRUE_POSITIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// Describes an IoT policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyArn")]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditFindingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="findings")]
		public AuditFinding[] Findings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditMitigationActionsExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionsExecutions")]
		public AuditMitigationActionExecutionMetadata[] ActionsExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returned by ListAuditMitigationActionsTask, this object contains information that describes a mitigation action that has been started.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditMitigationActionExecutionMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingId")]
		public string FindingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuditMitigationActionsExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditMitigationActionsExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIPPED")]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditMitigationActionsTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public AuditMitigationActionsTaskMetadata[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about an audit mitigation actions task that is returned by <code>ListAuditMitigationActionsTasks</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditMitigationActionsTaskMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public AuditMitigationActionsTaskStatus TaskStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditSuppressionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suppressions")]
		public AuditSuppression[] Suppressions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Filters out specific findings of a Device Defender audit. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditSuppression
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressIndefinitely")]
		public System.Nullable<System.Boolean> SuppressIndefinitely { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public AuditTaskMetadata[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The audits that were performed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditTaskMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public AuditMitigationActionsTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public AuditTaskType TaskType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuthorizersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizers")]
		public AuthorizerSummary[] Authorizers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The authorizer summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizerSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerArn")]
		public string AuthorizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBillingGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroups")]
		public GroupNameAndArn[] BillingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListCACertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCACertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public CACertificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// A CA certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CACertificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	/// <summary>
	/// The output of the ListCertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// Information about a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateMode")]
		public CertificateMode CertificateMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	/// <summary>
	/// The output of the ListCertificatesByCA operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificatesByCAResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricNames")]
		public string[] MetricNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDetectMitigationActionsExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionsExecutions")]
		public DetectMitigationActionExecution[] ActionsExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Describes which mitigation actions should be executed. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectMitigationActionExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationId")]
		public string ViolationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartDate")]
		public System.DateTimeOffset ExecutionStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionEndDate")]
		public System.DateTimeOffset ExecutionEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DetectMitigationActionExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DetectMitigationActionExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFUL")]
		SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIPPED")]
		SKIPPED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDetectMitigationActionsTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public DetectMitigationActionsTaskSummary[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDimensionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dimensionNames")]
		public string[] DimensionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurations")]
		public DomainConfigurationSummary[] DomainConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// <p>The summary of a domain configuration. A domain configuration specifies custom IoT-specific information about a domain. A domain configuration can be associated with an Amazon Web Services-managed domain (for example, dbc123defghijk.iot.us-west-2.amazonaws.com), a customer managed domain, or a default endpoint.</p> <ul> <li> <p>Data</p> </li> <li> <p>Jobs</p> </li> <li> <p>CredentialProvider</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainConfigurationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationName")]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationArn")]
		public string DomainConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public ServiceType ServiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFleetMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="fleetMetrics")]
		public FleetMetricNameAndArn[] FleetMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The name and ARN of a fleet metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FleetMetricNameAndArn
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricArn")]
		public string MetricArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListIndicesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexNames")]
		public string[] IndexNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobExecutionsForJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionSummaries")]
		public JobExecutionSummaryForJob[] ExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains a summary of information about job executions for a specific job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionSummaryForJob
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionSummary")]
		public JobExecutionSummary JobExecutionSummary { get; set; }
	}
	
	/// <summary>
	/// The job execution summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedAt")]
		public System.DateTimeOffset QueuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionNumber")]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryAttempt")]
		public System.Nullable<System.Int32> RetryAttempt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobExecutionsForThingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionSummaries")]
		public JobExecutionSummaryForThing[] ExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The job execution summary for a thing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionSummaryForThing
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionSummary")]
		public JobExecutionSummary JobExecutionSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplates")]
		public JobTemplateSummary[] JobTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the job template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobTemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateArn")]
		public string JobTemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateId")]
		public string JobTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public JobSummary[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The job summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupId")]
		public string ThingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isConcurrent")]
		public System.Nullable<System.Boolean> IsConcurrent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListManagedJobTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="managedJobTemplates")]
		public ManagedJobTemplateSummary[] ManagedJobTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the managed template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedJobTemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateArn")]
		public string TemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string[] Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateVersion")]
		public string TemplateVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMetricValuesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricDatumList")]
		public MetricDatum[] MetricDatumList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDatum
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetricValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMitigationActionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionIdentifiers")]
		public MitigationActionIdentifier[] ActionIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information that identifies a mitigation action. This information is returned by ListMitigationActions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MitigationActionIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionArn")]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOTAUpdatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdates")]
		public OTAUpdateSummary[] OtaUpdates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An OTA update summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OTAUpdateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateId")]
		public string OtaUpdateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otaUpdateArn")]
		public string OtaUpdateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	/// <summary>
	/// The output from the ListOutgoingCertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOutgoingCertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="outgoingCertificates")]
		public OutgoingCertificate[] OutgoingCertificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// A certificate that has been transferred but not yet accepted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutgoingCertificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferredTo")]
		public string TransferredTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferDate")]
		public System.DateTimeOffset TransferDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferMessage")]
		public string TransferMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPackageVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageVersionSummaries")]
		public PackageVersionSummary[] PackageVersionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a package version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageVersionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPackagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageSummaries")]
		public PackageSummary[] PackageSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a software package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionName")]
		public string DefaultVersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPolicies operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPolicyPrincipals operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyPrincipalsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="principals")]
		public string[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPolicyVersions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyVersions")]
		public PolicyVersion[] PolicyVersions { get; set; }
	}
	
	/// <summary>
	/// Describes a policy version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultVersion")]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.DateTimeOffset CreateDate { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPrincipalPolicies operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrincipalPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPrincipalThings operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrincipalThingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="things")]
		public string[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningTemplateVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public ProvisioningTemplateVersionSummary[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a fleet provision template version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningTemplateVersionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public System.Nullable<System.Int32> VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultVersion")]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="templates")]
		public ProvisioningTemplateSummary[] Templates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a provisioning template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningTemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateArn")]
		public string TemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TemplateType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRelatedResourcesForAuditFindingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="relatedResources")]
		public RelatedResource[] RelatedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRoleAliasesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleAliases")]
		public string[] RoleAliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListScheduledAuditsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAudits")]
		public ScheduledAuditMetadata[] ScheduledAudits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the scheduled audit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledAuditMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditName")]
		public string ScheduledAuditName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditArn")]
		public string ScheduledAuditArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AuditFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public DayOfWeek DayOfWeek { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSecurityProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileIdentifiers")]
		public SecurityProfileIdentifier[] SecurityProfileIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Identifying information for a Device Defender security profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityProfileIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSecurityProfilesForTargetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileTargetMappings")]
		public SecurityProfileTargetMapping[] SecurityProfileTargetMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a security profile and the target associated with it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityProfileTargetMapping
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileIdentifier")]
		public SecurityProfileIdentifier SecurityProfileIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public SecurityProfileTarget Target { get; set; }
	}
	
	/// <summary>
	/// A target to which an alert is sent when a security profile behavior is violated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityProfileTarget
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStreamsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streams")]
		public StreamSummary[] Streams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamArn")]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamVersion")]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTargetsForPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextMarker")]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTargetsForSecurityProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileTargets")]
		public SecurityProfileTarget[] SecurityProfileTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroups")]
		public GroupNameAndArn[] ThingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingGroupsForThingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroups")]
		public GroupNameAndArn[] ThingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListThingPrincipals operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingPrincipalsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="principals")]
		public string[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingRegistrationTaskReportsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceLinks")]
		public string[] ResourceLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public ReportType ReportType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERRORS")]
		ERRORS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESULTS")]
		RESULTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingRegistrationTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskIds")]
		public string[] TaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output for the ListThingTypes operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypes")]
		public ThingTypeDefinition[] ThingTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The definition of the thing type, including thing type name and description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingTypeDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeArn")]
		public string ThingTypeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeProperties")]
		public ThingTypeProperties ThingTypeProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeMetadata")]
		public ThingTypeMetadata ThingTypeMetadata { get; set; }
	}
	
	/// <summary>
	/// The output from the ListThings operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="things")]
		public ThingAttribute[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The properties of the thing, including thing name, thing type name, and a list of thing attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingAttribute
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingsInBillingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="things")]
		public string[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingsInThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="things")]
		public string[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTopicRuleDestinationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationSummaries")]
		public TopicRuleDestinationSummary[] DestinationSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the topic rule destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicRuleDestinationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TopicRuleDestinationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpUrlSummary")]
		public HttpUrlDestinationSummary HttpUrlSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcDestinationSummary")]
		public VpcDestinationSummary VpcDestinationSummary { get; set; }
	}
	
	/// <summary>
	/// Information about an HTTP URL destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpUrlDestinationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmationUrl")]
		public string ConfirmationUrl { get; set; }
	}
	
	/// <summary>
	/// The summary of a virtual private cloud (VPC) destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcDestinationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroups")]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The output from the ListTopicRules operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTopicRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public TopicRuleListItem[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicRuleListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="ruleArn")]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicPattern")]
		public string TopicPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleDisabled")]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListV2LoggingLevelsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="logTargetConfigurations")]
		public LogTargetConfiguration[] LogTargetConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The target configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogTargetConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="logTarget")]
		public LogTarget LogTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	/// <summary>
	/// A log target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogTarget
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public LogTargetType TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetName")]
		public string TargetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING_GROUP")]
		THING_GROUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLIENT_ID")]
		CLIENT_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_IP")]
		SOURCE_IP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRINCIPAL_ID")]
		PRINCIPAL_ID = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListViolationEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="violationEvents")]
		public ViolationEvent[] ViolationEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a Device Defender security profile behavior violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViolationEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="violationId")]
		public string ViolationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behavior")]
		public Behavior Behavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricValue")]
		public MetricValue MetricValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationEventAdditionalInfo")]
		public ViolationEventAdditionalInfo ViolationEventAdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationEventType")]
		public ViolationEventType ViolationEventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationState")]
		public VerificationState VerificationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationStateDescription")]
		public string VerificationStateDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationEventTime")]
		public System.DateTimeOffset ViolationEventTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ViolationEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-alarm")]
		inMinusalarm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alarm-cleared")]
		alarmMinuscleared = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alarm-invalidated")]
		alarmMinusinvalidated = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVerificationStateOnViolationResponse
	{
	}
	
	/// <summary>
	/// The output from the RegisterCACertificateResponse operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterCACertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegistrationCodeValidationException
	{
	}
	
	/// <summary>
	/// The output from the RegisterCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterCertificateWithoutCAResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterThingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArns")]
		public ResourceArns ResourceArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceArns
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceRegistrationFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveThingFromBillingGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveThingFromThingGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="things")]
		public ThingDocument[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroups")]
		public ThingGroupDocument[] ThingGroups { get; set; }
	}
	
	/// <summary>
	/// The thing search index document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingId")]
		public string ThingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupNames")]
		public string[] ThingGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shadow")]
		public string Shadow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceDefender")]
		public string DeviceDefender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectivity")]
		public ThingConnectivity Connectivity { get; set; }
	}
	
	/// <summary>
	/// The connectivity status of the thing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingConnectivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="connected")]
		public System.Nullable<System.Boolean> Connected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnectReason")]
		public string DisconnectReason { get; set; }
	}
	
	/// <summary>
	/// The thing group search index document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThingGroupDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupId")]
		public string ThingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupDescription")]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGroupNames")]
		public string[] ParentGroupNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerArn")]
		public string AuthorizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAuditMitigationActionsTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartDetectMitigationActionsTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOnDemandAuditTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartThingRegistrationTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopThingRegistrationTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestAuthorizationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authResults")]
		public AuthResult[] AuthResults { get; set; }
	}
	
	/// <summary>
	/// The authorizer result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="authInfo")]
		public AuthInfo AuthInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowed")]
		public Allowed Allowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="denied")]
		public Denied Denied { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authDecision")]
		public AuthDecision AuthDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missingContextValues")]
		public string[] MissingContextValues { get; set; }
	}
	
	/// <summary>
	/// A collection of authorization information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public ActionType ActionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLISH")]
		PUBLISH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBSCRIBE")]
		SUBSCRIBE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVE")]
		RECEIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECT")]
		CONNECT = 3,
	}
	
	/// <summary>
	/// Contains information that allowed the authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Allowed
	{
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// Contains information that denied the authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Denied
	{
		
		[System.Runtime.Serialization.DataMember(Name="implicitDeny")]
		public ImplicitDeny ImplicitDeny { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="explicitDeny")]
		public ExplicitDeny ExplicitDeny { get; set; }
	}
	
	/// <summary>
	/// Information that implicitly denies authorization. When policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImplicitDeny
	{
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// Information that explicitly denies authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExplicitDeny
	{
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOWED")]
		ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPLICIT_DENY")]
		EXPLICIT_DENY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPLICIT_DENY")]
		IMPLICIT_DENY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestInvokeAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="isAuthenticated")]
		public System.Nullable<System.Boolean> IsAuthenticated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyDocuments")]
		public string[] PolicyDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshAfterInSeconds")]
		public System.Nullable<System.Int32> RefreshAfterInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnectAfterInSeconds")]
		public System.Nullable<System.Int32> DisconnectAfterInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpHeaders
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidResponseException
	{
	}
	
	/// <summary>
	/// The output from the TransferCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transferredCertificateArn")]
		public string TransferredCertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccountAuditConfigurationResponse
	{
	}
	
	/// <summary>
	/// Information about the targets to which audit notifications are sent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditNotificationTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Which audit checks are enabled and disabled for this account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCheckConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAuditSuppressionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerArn")]
		public string AuthorizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBillingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomMetricResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricArn")]
		public string MetricArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricType")]
		public CustomMetricType MetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDimensionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DimensionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationName")]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationArn")]
		public string DomainConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDynamicThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEventConfigurationsResponse
	{
	}
	
	/// <summary>
	/// Configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Configuration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIndexingConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThingGroupIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON")]
		ON = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMitigationActionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionArn")]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePackageResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePackageConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePackageVersionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisioningTemplateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRoleAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleAlias")]
		public string RoleAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateScheduledAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAuditArn")]
		public string ScheduledAuditArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSecurityProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileArn")]
		public string SecurityProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileDescription")]
		public string SecurityProfileDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alertTargets")]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetain")]
		public string[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetainV2")]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamArn")]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamVersion")]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
	}
	
	/// <summary>
	/// The output from the UpdateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThingGroupsForThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTopicRuleDestinationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateSecurityProfileBehaviorsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationErrors")]
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	/// <summary>
	/// Information about an error found in a behavior specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// The input for the AcceptCertificateTransfer operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptCertificateTransferRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddThingToBillingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupArn")]
		public string BillingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddThingToThingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideDynamicGroups")]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	/// <summary>
	/// The type of alert target: one of "SNS".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNS")]
		SNS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTargetsWithJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The input for the AttachPrincipalPolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachPrincipalPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachSecurityProfileRequest
	{
	}
	
	/// <summary>
	/// The input for the AttachThingPrincipal operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachThingPrincipalRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditCheckRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WAITING_FOR_DATA_COLLECTION")]
		WAITING_FOR_DATA_COLLECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED_COMPLIANT")]
		COMPLETED_COMPLIANT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED_NON_COMPLIANT")]
		COMPLETED_NON_COMPLIANT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 5,
	}
	
	/// <summary>
	/// Information about the audit check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCheckDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="checkRunStatus")]
		public AuditCheckRunStatus CheckRunStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checkCompliant")]
		public System.Nullable<System.Boolean> CheckCompliant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResourcesCount")]
		public System.Nullable<System.Int32> TotalResourcesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonCompliantResourcesCount")]
		public System.Nullable<System.Int32> NonCompliantResourcesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressedNonCompliantResourcesCount")]
		public System.Nullable<System.Int32> SuppressedNonCompliantResourcesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Provides summary counts of how many tasks for findings are in a particular state. This information is included in the response from DescribeAuditMitigationActionsTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskStatisticsForAuditCheck
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalFindingsCount")]
		public System.Nullable<System.Int32> TotalFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedFindingsCount")]
		public System.Nullable<System.Int32> FailedFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="succeededFindingsCount")]
		public System.Nullable<System.Int32> SucceededFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skippedFindingsCount")]
		public System.Nullable<System.Int32> SkippedFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canceledFindingsCount")]
		public System.Nullable<System.Int32> CanceledFindingsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNS")]
		SNS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
	}
	
	/// <summary>
	/// The criteria that determine when and how a job abort takes place.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobAbortConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="abortCriteriaList")]
		public AwsJobAbortCriteria[] AbortCriteriaList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AwsJobAbortCriteriaFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AwsJobAbortCriteriaAbortAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCEL")]
		CANCEL = 0,
	}
	
	/// <summary>
	/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsJobTimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BehaviorCriteriaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATIC")]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATISTICAL")]
		STATISTICAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MACHINE_LEARNING")]
		MACHINE_LEARNING = 2,
	}
	
	/// <summary>
	/// The type of bucketed aggregation performed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BucketsAggregationType
	{
		
		[System.Runtime.Serialization.DataMember(Name="termsAggregation")]
		public TermsAggregation TermsAggregation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CACertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CACertificateUpdateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATE")]
		DEACTIVATE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelAuditMitigationActionsTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelAuditTaskRequest
	{
	}
	
	/// <summary>
	/// The input for the CancelCertificateTransfer operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelCertificateTransferRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelDetectMitigationActionsTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelJobExecutionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public DetailsMap StatusDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelJobRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClearDefaultAuthorizerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfirmTopicRuleDestinationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuditSuppressionRequest
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressIndefinitely")]
		public System.Nullable<System.Boolean> SuppressIndefinitely { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuthorizerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizerFunctionArn")]
		public string AuthorizerFunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenKeyName")]
		public string TokenKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenSigningPublicKeys")]
		public PublicKeyMap TokenSigningPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingDisabled")]
		public System.Nullable<System.Boolean> SigningDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableCachingForHttp")]
		public System.Nullable<System.Boolean> EnableCachingForHttp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBillingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupProperties")]
		public BillingGroupProperties BillingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateCertificateFromCsr operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCertificateFromCsrRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateSigningRequest")]
		public string CertificateSigningRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomMetricRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricType")]
		public CustomMetricType MetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDimensionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DimensionType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverCertificateArns")]
		public string[] ServerCertificateArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationCertificateArn")]
		public string ValidationCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizerConfig")]
		public AuthorizerConfig AuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public ServiceType ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDynamicThingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFleetMetricRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public AggregationType AggregationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public FleetMetricUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentSource")]
		public string DocumentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public AbortConfig AbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public TimeoutConfig TimeoutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespaceId")]
		public string NamespaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTemplateArn")]
		public string JobTemplateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public JobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentParameters")]
		public ParameterMap DocumentParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedulingConfig")]
		public SchedulingConfig SchedulingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationPackageVersions")]
		public string[] DestinationPackageVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateJobTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentSource")]
		public string DocumentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// The criteria that determine when and how a job abort takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public AbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public TimeoutConfig TimeoutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public JobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindows")]
		public MaintenanceWindow[] MaintenanceWindows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationPackageVersions")]
		public string[] DestinationPackageVersions { get; set; }
	}
	
	/// <summary>
	/// <p>The input for the CreateKeysAndCertificate operation.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateKeysAndCertificateRequest</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKeysAndCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMitigationActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionParams")]
		public MitigationActionParams ActionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOTAUpdateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		public Protocol[] Protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsJobExecutionsRolloutConfig")]
		public AwsJobExecutionsRolloutConfig AwsJobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsJobPresignedUrlConfig")]
		public AwsJobPresignedUrlConfig AwsJobPresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsJobAbortConfig")]
		public AwsJobAbortConfig AwsJobAbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsJobTimeoutConfig")]
		public AwsJobTimeoutConfig AwsJobTimeoutConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public OTAUpdateFile[] Files { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalParameters")]
		public AdditionalParameterMap AdditionalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePackageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePackageVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreatePolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreatePolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningClaimRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provisioningRoleArn")]
		public string ProvisioningRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preProvisioningHook")]
		public ProvisioningHook PreProvisioningHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TemplateType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningTemplateVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRoleAliasRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialDurationSeconds")]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateScheduledAuditRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AuditFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public DayOfWeek DayOfWeek { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSecurityProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileDescription")]
		public string SecurityProfileDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alertTargets")]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetain")]
		public string[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetainV2")]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStreamRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="parentGroupName")]
		public string ParentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThingRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		public string BillingGroupName { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateThingTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeProperties")]
		public ThingTypeProperties ThingTypeProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration of the topic rule destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicRuleDestinationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpUrlConfiguration")]
		public HttpUrlDestinationConfiguration HttpUrlConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcDestinationConfiguration VpcConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTopicRuleDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationConfiguration")]
		public TopicRuleDestinationConfiguration DestinationConfiguration { get; set; }
	}
	
	/// <summary>
	/// Describes a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopicRulePayload
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sql")]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleDisabled")]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotSqlVersion")]
		public string AwsIotSqlVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorAction")]
		public Action ErrorAction { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTopicRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topicRulePayload")]
		public TopicRulePayload TopicRulePayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccountAuditConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuditSuppressionRequest
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuthorizerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBillingGroupRequest
	{
	}
	
	/// <summary>
	/// Input for the DeleteCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCACertificateRequest
	{
	}
	
	/// <summary>
	/// The input for the DeleteCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomMetricRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDimensionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDynamicThingGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFleetMetricRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMitigationActionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOTAUpdateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePackageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePackageVersionRequest
	{
	}
	
	/// <summary>
	/// The input for the DeletePolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePolicyRequest
	{
	}
	
	/// <summary>
	/// The input for the DeletePolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePolicyVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisioningTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisioningTemplateVersionRequest
	{
	}
	
	/// <summary>
	/// The input for the DeleteRegistrationCode operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRegistrationCodeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRoleAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScheduledAuditRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSecurityProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteStreamRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThingGroupRequest
	{
	}
	
	/// <summary>
	/// The input for the DeleteThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThingRequest
	{
	}
	
	/// <summary>
	/// The input for the DeleteThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteThingTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTopicRuleDestinationRequest
	{
	}
	
	/// <summary>
	/// The input for the DeleteTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTopicRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteV2LoggingLevelRequest
	{
	}
	
	/// <summary>
	/// The input for the DeprecateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecateThingTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="undoDeprecate")]
		public System.Nullable<System.Boolean> UndoDeprecate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountAuditConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditFindingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditMitigationActionsTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditSuppressionRequest
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuditTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAuthorizerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeBillingGroupRequest
	{
	}
	
	/// <summary>
	/// The input for the DescribeCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCACertificateRequest
	{
	}
	
	/// <summary>
	/// The input for the DescribeCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCustomMetricRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDefaultAuthorizerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDetectMitigationActionsTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDimensionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDomainConfigurationRequest
	{
	}
	
	/// <summary>
	/// The input for the DescribeEndpoint operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFleetMetricRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeIndexRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeManagedJobTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMitigationActionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningTemplateVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRoleAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScheduledAuditRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSecurityProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeStreamRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DynamicGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUILDING")]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REBUILDING")]
		REBUILDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingRegistrationTaskRequest
	{
	}
	
	/// <summary>
	/// The input for the DescribeThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingRequest
	{
	}
	
	/// <summary>
	/// The input for the DescribeThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeThingTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The input for the DetachPrincipalPolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachPrincipalPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachSecurityProfileRequest
	{
	}
	
	/// <summary>
	/// The input for the DetachThingPrincipal operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachThingPrincipalRequest
	{
	}
	
	/// <summary>
	/// The input for the DisableTopicRuleRequest operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableTopicRuleRequest
	{
	}
	
	/// <summary>
	/// The input for the EnableTopicRuleRequest operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableTopicRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING")]
		THING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING_GROUP")]
		THING_GROUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING_TYPE")]
		THING_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING_GROUP_MEMBERSHIP")]
		THING_GROUP_MEMBERSHIP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING_GROUP_HIERARCHY")]
		THING_GROUP_HIERARCHY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THING_TYPE_ASSOCIATION")]
		THING_TYPE_ASSOCIATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOB")]
		JOB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOB_EXECUTION")]
		JOB_EXECUTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POLICY")]
		POLICY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERTIFICATE")]
		CERTIFICATE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_CERTIFICATE")]
		CA_CERTIFICATE = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBehaviorModelTrainingSummariesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketsAggregationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketsAggregationType")]
		public BucketsAggregationType BucketsAggregationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCardinalityRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEffectivePoliciesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIndexingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobDocumentRequest
	{
	}
	
	/// <summary>
	/// The input for the GetLoggingOptions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoggingOptionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOTAUpdateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPackageConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPackageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPackageVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPercentilesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percents")]
		public System.Nullable<System.Double> Percents { get; set; }
	}
	
	/// <summary>
	/// The input for the GetPolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyRequest
	{
	}
	
	/// <summary>
	/// The input for the GetPolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyVersionRequest
	{
	}
	
	/// <summary>
	/// The input to the GetRegistrationCode operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRegistrationCodeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStatisticsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTopicRuleDestinationRequest
	{
	}
	
	/// <summary>
	/// The input for the GetTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTopicRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetV2LoggingOptionsRequest
	{
	}
	
	/// <summary>
	/// Specifies the HTTP context to use for the test authorizer request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public HttpHeaders Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActiveViolationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedPoliciesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditFindingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listSuppressedFindings")]
		public System.Nullable<System.Boolean> ListSuppressedFindings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditMitigationActionsExecutionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditMitigationActionsTasksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditSuppressionsRequest
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ascendingOrder")]
		public System.Nullable<System.Boolean> AscendingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuditTasksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuthorizersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBillingGroupsRequest
	{
	}
	
	/// <summary>
	/// Input for the ListCACertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCACertificatesRequest
	{
	}
	
	/// <summary>
	/// The input to the ListCertificatesByCA operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificatesByCARequest
	{
	}
	
	/// <summary>
	/// The input for the ListCertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomMetricsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDetectMitigationActionsExecutionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDetectMitigationActionsTasksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDimensionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFleetMetricsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListIndicesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobExecutionsForJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobExecutionsForThingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobTemplatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListManagedJobTemplatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMetricValuesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMitigationActionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOTAUpdatesRequest
	{
	}
	
	/// <summary>
	/// The input to the ListOutgoingCertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOutgoingCertificatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPackageVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPackagesRequest
	{
	}
	
	/// <summary>
	/// The input for the ListPolicies operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesRequest
	{
	}
	
	/// <summary>
	/// The input for the ListPolicyPrincipals operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyPrincipalsRequest
	{
	}
	
	/// <summary>
	/// The input for the ListPolicyVersions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyVersionsRequest
	{
	}
	
	/// <summary>
	/// The input for the ListPrincipalPolicies operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrincipalPoliciesRequest
	{
	}
	
	/// <summary>
	/// The input for the ListPrincipalThings operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrincipalThingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningTemplateVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningTemplatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRelatedResourcesForAuditFindingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRoleAliasesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListScheduledAuditsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSecurityProfilesForTargetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSecurityProfilesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStreamsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTargetsForPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTargetsForSecurityProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingGroupsForThingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingGroupsRequest
	{
	}
	
	/// <summary>
	/// The input for the ListThingPrincipal operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingPrincipalsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingRegistrationTaskReportsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingRegistrationTasksRequest
	{
	}
	
	/// <summary>
	/// The input for the ListThingTypes operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingsInBillingGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingsInThingGroupRequest
	{
	}
	
	/// <summary>
	/// The input for the ListThings operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTopicRuleDestinationsRequest
	{
	}
	
	/// <summary>
	/// The input for the ListTopicRules operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTopicRulesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListV2LoggingLevelsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListViolationEventsRequest
	{
	}
	
	/// <summary>
	/// Describes the logging options payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingOptionsPayload
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	/// <summary>
	/// Specifies the MQTT context to use for the test authorizer request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MqttContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PackageVersionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLISH")]
		PUBLISH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATE")]
		DEPRECATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVerificationStateOnViolationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verificationState")]
		public VerificationState VerificationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationStateDescription")]
		public string VerificationStateDescription { get; set; }
	}
	
	/// <summary>
	/// The input to the RegisterCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterCACertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caCertificate")]
		public string CaCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationCertificate")]
		public string VerificationCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationConfig")]
		public RegistrationConfig RegistrationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateMode")]
		public CertificateMode CertificateMode { get; set; }
	}
	
	/// <summary>
	/// The input to the RegisterCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificatePem")]
		public string CaCertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterCertificateWithoutCARequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterThingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public Parameters Parameters { get; set; }
	}
	
	/// <summary>
	/// The input for the RejectCertificateTransfer operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectCertificateTransferRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="rejectReason")]
		public string RejectReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveThingFromBillingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupArn")]
		public string BillingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveThingFromThingGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
	}
	
	/// <summary>
	/// The input for the ReplaceTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplaceTopicRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topicRulePayload")]
		public TopicRulePayload TopicRulePayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchIndexRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultAuthorizerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		public string AuthorizerName { get; set; }
	}
	
	/// <summary>
	/// The input for the SetDefaultPolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultPolicyVersionRequest
	{
	}
	
	/// <summary>
	/// The input for the SetLoggingOptions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetLoggingOptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loggingOptionsPayload")]
		public LoggingOptionsPayload LoggingOptionsPayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetV2LoggingLevelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logTarget")]
		public LogTarget LogTarget { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetV2LoggingOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLogLevel")]
		public LogLevel DefaultLogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableAllLogs")]
		public System.Nullable<System.Boolean> DisableAllLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAuditMitigationActionsTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public AuditMitigationActionsTaskTarget Target { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auditCheckToActionsMapping")]
		public AuditCheckToActionsMapping AuditCheckToActionsMapping { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartDetectMitigationActionsTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public DetectMitigationActionsTaskTarget Target { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violationEventOccurrenceRange")]
		public ViolationEventOccurrenceRange ViolationEventOccurrenceRange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeOnlyActiveViolations")]
		public System.Nullable<System.Boolean> IncludeOnlyActiveViolations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeSuppressedAlerts")]
		public System.Nullable<System.Boolean> IncludeSuppressedAlerts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOnDemandAuditTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartThingRegistrationTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputFileBucket")]
		public string InputFileBucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputFileKey")]
		public string InputFileKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopThingRegistrationTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestAuthorizationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authInfos")]
		public AuthInfo[] AuthInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyNamesToAdd")]
		public string[] PolicyNamesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyNamesToSkip")]
		public string[] PolicyNamesToSkip { get; set; }
	}
	
	/// <summary>
	/// Specifies the TLS context to use for the test authorizer request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TlsContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestInvokeAuthorizerRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenSignature")]
		public string TokenSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpContext")]
		public HttpContext HttpContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mqttContext")]
		public MqttContext MqttContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsContext")]
		public TlsContext TlsContext { get; set; }
	}
	
	/// <summary>
	/// The input for the TransferCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferCertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="transferMessage")]
		public string TransferMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccountAuditConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditNotificationTargetConfigurations")]
		public AuditNotificationTargetConfigurations AuditNotificationTargetConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditCheckConfigurations")]
		public AuditCheckConfigurations AuditCheckConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAuditSuppressionRequest
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressIndefinitely")]
		public System.Nullable<System.Boolean> SuppressIndefinitely { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAuthorizerRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerFunctionArn")]
		public string AuthorizerFunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenKeyName")]
		public string TokenKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenSigningPublicKeys")]
		public PublicKeyMap TokenSigningPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableCachingForHttp")]
		public System.Nullable<System.Boolean> EnableCachingForHttp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBillingGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingGroupProperties")]
		public BillingGroupProperties BillingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	/// <summary>
	/// The input to the UpdateCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCACertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="registrationConfig")]
		public RegistrationConfig RegistrationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeAutoRegistration")]
		public System.Nullable<System.Boolean> RemoveAutoRegistration { get; set; }
	}
	
	/// <summary>
	/// The input for the UpdateCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCustomMetricRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDimensionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizerConfig")]
		public AuthorizerConfig AuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationStatus")]
		public DomainConfigurationStatus DomainConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeAuthorizerConfig")]
		public System.Nullable<System.Boolean> RemoveAuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDynamicThingGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEventConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventConfigurations")]
		public EventConfigurations EventConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFleetMetricRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public AggregationType AggregationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public FleetMetricUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIndexingConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingIndexingConfiguration")]
		public ThingIndexingConfiguration ThingIndexingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupIndexingConfiguration")]
		public ThingGroupIndexingConfiguration ThingGroupIndexingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public AbortConfig AbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public TimeoutConfig TimeoutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public JobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMitigationActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionParams")]
		public MitigationActionParams ActionParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePackageConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionUpdateByJobsConfig")]
		public VersionUpdateByJobsConfig VersionUpdateByJobsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePackageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionName")]
		public string DefaultVersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsetDefaultVersion")]
		public System.Nullable<System.Boolean> UnsetDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePackageVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public PackageVersionAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisioningTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultVersionId")]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningRoleArn")]
		public string ProvisioningRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preProvisioningHook")]
		public ProvisioningHook PreProvisioningHook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removePreProvisioningHook")]
		public System.Nullable<System.Boolean> RemovePreProvisioningHook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRoleAliasRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialDurationSeconds")]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateScheduledAuditRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AuditFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public DayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSecurityProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileDescription")]
		public string SecurityProfileDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alertTargets")]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetain")]
		public string[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetainV2")]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteBehaviors")]
		public System.Nullable<System.Boolean> DeleteBehaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteAlertTargets")]
		public System.Nullable<System.Boolean> DeleteAlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteAdditionalMetricsToRetain")]
		public System.Nullable<System.Boolean> DeleteAdditionalMetricsToRetain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateStreamRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public StreamFile[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThingGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThingGroupsForThingRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupsToAdd")]
		public string[] ThingGroupsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupsToRemove")]
		public string[] ThingGroupsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideDynamicGroups")]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	/// <summary>
	/// The input for the UpdateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateThingRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeThingType")]
		public System.Nullable<System.Boolean> RemoveThingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTopicRuleDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TopicRuleDestinationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateSecurityProfileBehaviorsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		public Behavior[] Behaviors { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AcceptCertificateTransfer</a> action.</p>
		/// AcceptCertificateTransfer accept-certificate-transfer/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="setAsActive">Specifies whether the certificate is active.</param>
		/// <returns>Success</returns>
		public async Task AcceptCertificateTransferAsync(string certificateId, bool setAsActive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accept-certificate-transfer/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId))+"&setAsActive="+setAsActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds a thing to a billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AddThingToBillingGroup</a> action.</p>
		/// AddThingToBillingGroup billing-groups/addThingToBillingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddThingToBillingGroupResponse> AddThingToBillingGroupAsync(AddThingToBillingGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/addThingToBillingGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddThingToBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds a thing to a thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AddThingToThingGroup</a> action.</p>
		/// AddThingToThingGroup thing-groups/addThingToThingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddThingToThingGroupResponse> AddThingToThingGroupAsync(AddThingToThingGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/addThingToThingGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddThingToThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AssociateTargetsWithJob</a> action.</p>
		/// AssociateTargetsWithJob jobs/{jobId}/targets
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="namespaceId"><p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note></param>
		/// <returns>Success</returns>
		public async Task<AssociateTargetsWithJobResponse> AssociateTargetsWithJobAsync(string jobId, string namespaceId, AssociateTargetsWithJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/targets&namespaceId=" + (namespaceId==null? "" : System.Uri.EscapeDataString(namespaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateTargetsWithJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AttachPolicy</a> action.</p>
		/// AttachPolicy target-policies/{policyName}
		/// </summary>
		/// <param name="policyName">The name of the policy to attach.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task AttachPolicyAsync(string policyName, AttachPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "target-policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches a policy from the specified target.</p> <note> <p>Because of the distributed nature of Amazon Web Services, it can take up to five minutes after a policy is detached before it's ready to be deleted.</p> </note> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DetachPolicy</a> action.</p>
		/// DetachPolicy target-policies/{policyName}
		/// </summary>
		/// <param name="policyName">The policy to detach.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task DetachPolicyAsync(string policyName, DetachPolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "target-policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This action is deprecated and works as expected for backward compatibility, but we won't add enhancements. Use <a>AttachPolicy</a> instead.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AttachPrincipalPolicy</a> action.</p>
		/// AttachPrincipalPolicy principal-policies/{policyName}#x-amzn-iot-principal
		/// </summary>
		/// <param name="policyName">The policy name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task AttachPrincipalPolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "principal-policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"#x-amzn-iot-principal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This action is deprecated and works as expected for backward compatibility, but we won't add enhancements. Use <a>DetachPolicy</a> instead.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DetachPrincipalPolicy</a> action.</p>
		/// DetachPrincipalPolicy principal-policies/{policyName}#x-amzn-iot-principal
		/// </summary>
		/// <param name="policyName">The name of the policy to detach.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task DetachPrincipalPolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "principal-policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"#x-amzn-iot-principal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AttachSecurityProfile</a> action.</p>
		/// AttachSecurityProfile security-profiles/{securityProfileName}/targets#securityProfileTargetArn
		/// </summary>
		/// <param name="securityProfileName">The security profile that is attached.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="securityProfileTargetArn">The ARN of the target (thing group) to which the security profile is attached.</param>
		/// <returns>Success</returns>
		public async Task<AttachSecurityProfileResponse> AttachSecurityProfileAsync(string securityProfileName, string securityProfileTargetArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"/targets#securityProfileTargetArn&securityProfileTargetArn=" + (securityProfileTargetArn==null? "" : System.Uri.EscapeDataString(securityProfileTargetArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a Device Defender security profile from a thing group or from this account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DetachSecurityProfile</a> action.</p>
		/// DetachSecurityProfile security-profiles/{securityProfileName}/targets#securityProfileTargetArn
		/// </summary>
		/// <param name="securityProfileName">The security profile that is detached.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="securityProfileTargetArn">The ARN of the thing group from which the security profile is detached.</param>
		/// <returns>Success</returns>
		public async Task<DetachSecurityProfileResponse> DetachSecurityProfileAsync(string securityProfileName, string securityProfileTargetArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"/targets#securityProfileTargetArn&securityProfileTargetArn=" + (securityProfileTargetArn==null? "" : System.Uri.EscapeDataString(securityProfileTargetArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetachSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified principal to the specified thing. A principal can be X.509 certificates, Amazon Cognito identities or federated identities.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">AttachThingPrincipal</a> action.</p>
		/// AttachThingPrincipal things/{thingName}/principals#x-amzn-principal
		/// </summary>
		/// <param name="thingName">The name of the thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<AttachThingPrincipalResponse> AttachThingPrincipalAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/principals#x-amzn-principal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachThingPrincipalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DetachThingPrincipal</a> action.</p>
		/// DetachThingPrincipal things/{thingName}/principals#x-amzn-principal
		/// </summary>
		/// <param name="thingName">The name of the thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DetachThingPrincipalResponse> DetachThingPrincipalAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/principals#x-amzn-principal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetachThingPrincipalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CancelAuditMitigationActionsTask</a> action.</p>
		/// CancelAuditMitigationActionsTask audit/mitigationactions/tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId">The unique identifier for the task that you want to cancel. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CancelAuditMitigationActionsTaskResponse> CancelAuditMitigationActionsTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/mitigationactions/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelAuditMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels an audit that is in progress. The audit can be either scheduled or on demand. If the audit isn't in progress, an "InvalidRequestException" occurs.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CancelAuditTask</a> action.</p>
		/// CancelAuditTask audit/tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId">The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".
		/// Min length: 1
		/// Max length: 40
		// </param>
		/// <returns>Success</returns>
		public async Task<CancelAuditTaskResponse> CancelAuditTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelAuditTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CancelCertificateTransfer</a> action.</p>
		/// CancelCertificateTransfer cancel-certificate-transfer/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task CancelCertificateTransferAsync(string certificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cancel-certificate-transfer/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Cancels a Device Defender ML Detect mitigation action. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CancelDetectMitigationActionsTask</a> action.</p>
		/// CancelDetectMitigationActionsTask detect/mitigationactions/tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId"> The unique identifier of the task. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CancelDetectMitigationActionsTaskResponse> CancelDetectMitigationActionsTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detect/mitigationactions/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelDetectMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels a job.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CancelJob</a> action.</p>
		/// CancelJob jobs/{jobId}/cancel
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="force"><p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p></param>
		/// <returns>Success</returns>
		public async Task<CancelJobResponse> CancelJobAsync(string jobId, bool force, CancelJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/cancel&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the execution of a job for a given thing.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CancelJobExecution</a> action.</p>
		/// CancelJobExecution things/{thingName}/jobs/{jobId}/cancel
		/// </summary>
		/// <param name="jobId">The ID of the job to be canceled.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="thingName">The name of the thing whose execution of the job will be canceled.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="force"><p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p></param>
		/// <returns>Success</returns>
		public async Task CancelJobExecutionAsync(string jobId, string thingName, bool force, CancelJobExecutionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/cancel&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Clears the default authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ClearDefaultAuthorizer</a> action.</p>
		/// ClearDefaultAuthorizer default-authorizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ClearDefaultAuthorizerResponse> ClearDefaultAuthorizerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "default-authorizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClearDefaultAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeDefaultAuthorizer</a> action.</p>
		/// DescribeDefaultAuthorizer default-authorizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDefaultAuthorizerResponse> DescribeDefaultAuthorizerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "default-authorizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDefaultAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SetDefaultAuthorizer</a> action.</p>
		/// SetDefaultAuthorizer default-authorizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetDefaultAuthorizerResponse> SetDefaultAuthorizerAsync(SetDefaultAuthorizerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "default-authorizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetDefaultAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Confirms a topic rule destination. When you create a rule requiring a destination, IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ConfirmTopicRuleDestination</a> action.</p>
		/// ConfirmTopicRuleDestination confirmdestination/{confirmationToken}
		/// </summary>
		/// <param name="confirmationToken">The token used to confirm ownership or access to the topic rule confirmation URL.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ConfirmTopicRuleDestinationResponse> ConfirmTopicRuleDestinationAsync(string confirmationToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "confirmdestination/"+ (confirmationToken==null? "" : System.Uri.EscapeDataString(confirmationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfirmTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Creates a Device Defender audit suppression. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateAuditSuppression</a> action.</p>
		/// CreateAuditSuppression audit/suppressions/create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAuditSuppressionResponse> CreateAuditSuppressionAsync(CreateAuditSuppressionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/suppressions/create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAuditSuppressionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateAuthorizer</a> action.</p>
		/// CreateAuthorizer authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The authorizer name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateAuthorizerResponse> CreateAuthorizerAsync(string authorizerName, CreateAuthorizerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizer/"+ (authorizerName==null? "" : System.Uri.EscapeDataString(authorizerName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteAuthorizer</a> action.</p>
		/// DeleteAuthorizer authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The name of the authorizer to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteAuthorizerResponse> DeleteAuthorizerAsync(string authorizerName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizer/"+ (authorizerName==null? "" : System.Uri.EscapeDataString(authorizerName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes an authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeAuthorizer</a> action.</p>
		/// DescribeAuthorizer authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The name of the authorizer to describe.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAuthorizerResponse> DescribeAuthorizerAsync(string authorizerName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizer/"+ (authorizerName==null? "" : System.Uri.EscapeDataString(authorizerName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an authorizer.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateAuthorizer</a> action.</p>
		/// UpdateAuthorizer authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The authorizer name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAuthorizerResponse> UpdateAuthorizerAsync(string authorizerName, UpdateAuthorizerPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizer/"+ (authorizerName==null? "" : System.Uri.EscapeDataString(authorizerName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateBillingGroup</a> action.</p>
		/// CreateBillingGroup billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name you wish to give to the billing group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateBillingGroupResponse> CreateBillingGroupAsync(string billingGroupName, CreateBillingGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/"+ (billingGroupName==null? "" : System.Uri.EscapeDataString(billingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteBillingGroup</a> action.</p>
		/// DeleteBillingGroup billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>DeleteBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBillingGroupResponse> DeleteBillingGroupAsync(string billingGroupName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/"+ (billingGroupName==null? "" : System.Uri.EscapeDataString(billingGroupName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeBillingGroup</a> action.</p>
		/// DescribeBillingGroup billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeBillingGroupResponse> DescribeBillingGroupAsync(string billingGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/"+ (billingGroupName==null? "" : System.Uri.EscapeDataString(billingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates information about the billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateBillingGroup</a> action.</p>
		/// UpdateBillingGroup billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateBillingGroupResponse> UpdateBillingGroupAsync(string billingGroupName, UpdateBillingGroupPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/"+ (billingGroupName==null? "" : System.Uri.EscapeDataString(billingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an X.509 certificate using the specified certificate signing request. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateCertificateFromCsr</a> action. </p> <note> <p>The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. For supported certificates, consult <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html#x509-cert-algorithms"> Certificate signing algorithms supported by IoT</a>. </p> </note> <note> <p>Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> </note> <p>You can create multiple certificates in a batch by creating a directory, copying multiple <code>.csr</code> files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs. In the following commands, we assume that a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is: </p> <p> <code>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</code> </p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the <code>aws iot create-certificate-from-csr</code> Amazon Web Services CLI command to create a certificate for the corresponding CSR. </p> <p>You can also run the <code>aws iot create-certificate-from-csr</code> part of the command in parallel to speed up the certificate creation process:</p> <p> <code>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{} </code> </p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p> <code>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_} </code> </p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p> <code>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path" </code> </p>
		/// CreateCertificateFromCsr certificates
		/// </summary>
		/// <param name="setAsActive">Specifies whether the certificate is active.</param>
		/// <returns>Success</returns>
		public async Task<CreateCertificateFromCsrResponse> CreateCertificateFromCsrAsync(bool setAsActive, CreateCertificateFromCsrPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates?setAsActive="+setAsActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCertificateFromCsrResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the certificates registered in your Amazon Web Services account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListCertificates</a> action.</p>
		/// ListCertificates certificates
		/// </summary>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="isAscendingOrder">Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</param>
		/// <returns>Success</returns>
		public async Task<ListCertificatesResponse> ListCertificatesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates?pageSize="+pageSize+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Use this API to define a Custom Metric published by your devices to Device Defender. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateCustomMetric</a> action.</p>
		/// CreateCustomMetric custom-metric/{metricName}
		/// </summary>
		/// <param name="metricName"> The name of the custom metric. This will be used in the metric report submitted from the device/thing. The name can't begin with <code>aws:</code>. You can't change the name after you define it.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateCustomMetricResponse> CreateCustomMetricAsync(string metricName, CreateCustomMetricPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomMetricResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes a Device Defender detect custom metric. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteCustomMetric</a> action.</p> <note> <p>Before you can delete a custom metric, you must first remove the custom metric from all security profiles it's a part of. The security profile associated with the custom metric can be found using the <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_ListSecurityProfiles.html">ListSecurityProfiles</a> API with <code>metricName</code> set to your custom metric name.</p> </note>
		/// DeleteCustomMetric custom-metric/{metricName}
		/// </summary>
		/// <param name="metricName"> The name of the custom metric. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomMetricResponse> DeleteCustomMetricAsync(string metricName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomMetricResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Gets information about a Device Defender detect custom metric. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeCustomMetric</a> action.</p>
		/// DescribeCustomMetric custom-metric/{metricName}
		/// </summary>
		/// <param name="metricName"> The name of the custom metric. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeCustomMetricResponse> DescribeCustomMetricAsync(string metricName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCustomMetricResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a Device Defender detect custom metric. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateCustomMetric</a> action.</p>
		/// UpdateCustomMetric custom-metric/{metricName}
		/// </summary>
		/// <param name="metricName"> The name of the custom metric. Cannot be updated. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateCustomMetricResponse> UpdateCustomMetricAsync(string metricName, UpdateCustomMetricPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCustomMetricResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Create a dimension that you can use to limit the scope of a metric used in a security profile for IoT Device Defender. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric only to MQTT topics whose name match the pattern specified in the dimension.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateDimension</a> action.</p>
		/// CreateDimension dimensions/{name}
		/// </summary>
		/// <param name="name">A unique identifier for the dimension. Choose something that describes the type and value to make it easy to remember what it does.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDimensionResponse> CreateDimensionAsync(string name, CreateDimensionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dimensions/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified dimension from your Amazon Web Services accounts.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteDimension</a> action.</p>
		/// DeleteDimension dimensions/{name}
		/// </summary>
		/// <param name="name">The unique identifier for the dimension that you want to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDimensionResponse> DeleteDimensionAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dimensions/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provides details about a dimension that is defined in your Amazon Web Services accounts.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeDimension</a> action.</p>
		/// DescribeDimension dimensions/{name}
		/// </summary>
		/// <param name="name">The unique identifier for the dimension.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDimensionResponse> DescribeDimensionAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dimensions/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the definition for a dimension. You cannot change the type of a dimension after it is created (you can delete it and recreate it).</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateDimension</a> action.</p>
		/// UpdateDimension dimensions/{name}
		/// </summary>
		/// <param name="name">A unique identifier for the dimension. Choose something that describes the type and value to make it easy to remember what it does.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDimensionResponse> UpdateDimensionAsync(string name, UpdateDimensionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dimensions/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a domain configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateDomainConfiguration</a> action.</p>
		/// CreateDomainConfiguration domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration. This value must be unique to a region.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDomainConfigurationResponse> CreateDomainConfigurationAsync(string domainConfigurationName, CreateDomainConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainConfigurations/"+ (domainConfigurationName==null? "" : System.Uri.EscapeDataString(domainConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified domain configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteDomainConfiguration</a> action.</p>
		/// DeleteDomainConfiguration domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration to be deleted.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainConfigurationResponse> DeleteDomainConfigurationAsync(string domainConfigurationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainConfigurations/"+ (domainConfigurationName==null? "" : System.Uri.EscapeDataString(domainConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets summary information about a domain configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeDomainConfiguration</a> action.</p>
		/// DescribeDomainConfiguration domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDomainConfigurationResponse> DescribeDomainConfigurationAsync(string domainConfigurationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainConfigurations/"+ (domainConfigurationName==null? "" : System.Uri.EscapeDataString(domainConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateDomainConfiguration</a> action.</p>
		/// UpdateDomainConfiguration domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration to be updated.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDomainConfigurationResponse> UpdateDomainConfigurationAsync(string domainConfigurationName, UpdateDomainConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainConfigurations/"+ (domainConfigurationName==null? "" : System.Uri.EscapeDataString(domainConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a dynamic thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateDynamicThingGroup</a> action.</p>
		/// CreateDynamicThingGroup dynamic-thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The dynamic thing group name to create.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDynamicThingGroupResponse> CreateDynamicThingGroupAsync(string thingGroupName, CreateDynamicThingGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dynamic-thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDynamicThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a dynamic thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteDynamicThingGroup</a> action.</p>
		/// DeleteDynamicThingGroup dynamic-thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the dynamic thing group to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the dynamic thing group to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDynamicThingGroupResponse> DeleteDynamicThingGroupAsync(string thingGroupName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dynamic-thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDynamicThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a dynamic thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateDynamicThingGroup</a> action.</p>
		/// UpdateDynamicThingGroup dynamic-thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the dynamic thing group to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDynamicThingGroupResponse> UpdateDynamicThingGroupAsync(string thingGroupName, UpdateDynamicThingGroupPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dynamic-thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDynamicThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a fleet metric.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateFleetMetric</a> action.</p>
		/// CreateFleetMetric fleet-metric/{metricName}
		/// </summary>
		/// <param name="metricName">The name of the fleet metric to create.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateFleetMetricResponse> CreateFleetMetricAsync(string metricName, CreateFleetMetricPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fleet-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateFleetMetricResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified fleet metric. Returns successfully with no error if the deletion is successful or you specify a fleet metric that doesn't exist.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteFleetMetric</a> action.</p>
		/// DeleteFleetMetric fleet-metric/{metricName}
		/// </summary>
		/// <param name="metricName">The name of the fleet metric to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the fleet metric to delete.</param>
		/// <returns>Success</returns>
		public async Task DeleteFleetMetricAsync(string metricName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fleet-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified fleet metric.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeFleetMetric</a> action.</p>
		/// DescribeFleetMetric fleet-metric/{metricName}
		/// </summary>
		/// <param name="metricName">The name of the fleet metric to describe.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeFleetMetricResponse> DescribeFleetMetricAsync(string metricName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fleet-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFleetMetricResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the data for a fleet metric.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateFleetMetric</a> action.</p>
		/// UpdateFleetMetric fleet-metric/{metricName}
		/// </summary>
		/// <param name="metricName">The name of the fleet metric to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateFleetMetricAsync(string metricName, UpdateFleetMetricPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fleet-metric/"+ (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a job.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateJob</a> action.</p>
		/// CreateJob jobs/{jobId}
		/// </summary>
		/// <param name="jobId">A job identifier which must be unique for your Amazon Web Services account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateJobResponse> CreateJobAsync(string jobId, CreateJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteJob</a> action.</p>
		/// DeleteJob jobs/{jobId}
		/// </summary>
		/// <param name="jobId"><p>The ID of the job to be deleted.</p> <p>After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.</p>
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="force"><p>(Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state.</p> </note></param>
		/// <param name="namespaceId"><p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note></param>
		/// <returns>Success</returns>
		public async Task DeleteJobAsync(string jobId, bool force, string namespaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&force="+force+"&namespaceId=" + (namespaceId==null? "" : System.Uri.EscapeDataString(namespaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a job.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeJob</a> action.</p>
		/// DescribeJob jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeJobResponse> DescribeJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates supported fields of the specified job.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateJob</a> action.</p>
		/// UpdateJob jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The ID of the job to be updated.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="namespaceId"><p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note></param>
		/// <returns>Success</returns>
		public async Task UpdateJobAsync(string jobId, string namespaceId, UpdateJobPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&namespaceId=" + (namespaceId==null? "" : System.Uri.EscapeDataString(namespaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a job template.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateJobTemplate</a> action.</p>
		/// CreateJobTemplate job-templates/{jobTemplateId}
		/// </summary>
		/// <param name="jobTemplateId">A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateJobTemplateResponse> CreateJobTemplateAsync(string jobTemplateId, CreateJobTemplatePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "job-templates/"+ (jobTemplateId==null? "" : System.Uri.EscapeDataString(jobTemplateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateJobTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified job template.
		/// DeleteJobTemplate job-templates/{jobTemplateId}
		/// </summary>
		/// <param name="jobTemplateId">The unique identifier of the job template to delete.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteJobTemplateAsync(string jobTemplateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "job-templates/"+ (jobTemplateId==null? "" : System.Uri.EscapeDataString(jobTemplateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a job template.
		/// DescribeJobTemplate job-templates/{jobTemplateId}
		/// </summary>
		/// <param name="jobTemplateId">The unique identifier of the job template.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeJobTemplateResponse> DescribeJobTemplateAsync(string jobTemplateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "job-templates/"+ (jobTemplateId==null? "" : System.Uri.EscapeDataString(jobTemplateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateKeysAndCertificate</a> action.</p>
		/// CreateKeysAndCertificate keys-and-certificate
		/// </summary>
		/// <param name="setAsActive">Specifies whether the certificate is active.</param>
		/// <returns>Success</returns>
		public async Task<CreateKeysAndCertificateResponse> CreateKeysAndCertificateAsync(bool setAsActive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keys-and-certificate?setAsActive="+setAsActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKeysAndCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Only certain types of mitigation actions can be applied to specific check names. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-mitigation-actions.html">Mitigation actions</a>. Each mitigation action can apply only one type of change.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateMitigationAction</a> action.</p>
		/// CreateMitigationAction mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateMitigationActionResponse> CreateMitigationActionAsync(string actionName, CreateMitigationActionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mitigationactions/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a defined mitigation action from your Amazon Web Services accounts.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteMitigationAction</a> action.</p>
		/// DeleteMitigationAction mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">The name of the mitigation action that you want to delete.
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteMitigationActionResponse> DeleteMitigationActionAsync(string actionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mitigationactions/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a mitigation action.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeMitigationAction</a> action.</p>
		/// DescribeMitigationAction mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">The friendly name that uniquely identifies the mitigation action.
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeMitigationActionResponse> DescribeMitigationActionAsync(string actionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mitigationactions/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the definition for the specified mitigation action.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateMitigationAction</a> action.</p>
		/// UpdateMitigationAction mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">The friendly name for the mitigation action. You cannot change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and recreate the mitigation action with the new name.
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateMitigationActionResponse> UpdateMitigationActionAsync(string actionName, UpdateMitigationActionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mitigationactions/actions/"+ (actionName==null? "" : System.Uri.EscapeDataString(actionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IoT OTA update on a target group of things or groups.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateOTAUpdate</a> action.</p>
		/// CreateOTAUpdate otaUpdates/{otaUpdateId}
		/// </summary>
		/// <param name="otaUpdateId">The ID of the OTA update to be created.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateOTAUpdateResponse> CreateOTAUpdateAsync(string otaUpdateId, CreateOTAUpdatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "otaUpdates/"+ (otaUpdateId==null? "" : System.Uri.EscapeDataString(otaUpdateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOTAUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Delete an OTA update.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteOTAUpdate</a> action.</p>
		/// DeleteOTAUpdate otaUpdates/{otaUpdateId}
		/// </summary>
		/// <param name="otaUpdateId">The ID of the OTA update to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="deleteStream">When true, the stream created by the OTAUpdate process is deleted when the OTA update is deleted. Ignored if the stream specified in the OTAUpdate is supplied by the user.</param>
		/// <param name="forceDeleteAWSJob">When true, deletes the IoT job created by the OTAUpdate process even if it is "IN_PROGRESS". Otherwise, if the job is not in a terminal state ("COMPLETED" or "CANCELED") an exception will occur. The default is false.</param>
		/// <returns>Success</returns>
		public async Task<DeleteOTAUpdateResponse> DeleteOTAUpdateAsync(string otaUpdateId, bool deleteStream, bool forceDeleteAWSJob, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "otaUpdates/"+ (otaUpdateId==null? "" : System.Uri.EscapeDataString(otaUpdateId))+"&deleteStream="+deleteStream+"&forceDeleteAWSJob="+forceDeleteAWSJob;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOTAUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets an OTA update.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetOTAUpdate</a> action.</p>
		/// GetOTAUpdate otaUpdates/{otaUpdateId}
		/// </summary>
		/// <param name="otaUpdateId">The OTA update ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetOTAUpdateResponse> GetOTAUpdateAsync(string otaUpdateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "otaUpdates/"+ (otaUpdateId==null? "" : System.Uri.EscapeDataString(otaUpdateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOTAUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IoT software package that can be deployed to your fleet.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreatePackage</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetIndexingConfiguration</a> actions.</p>
		/// CreatePackage packages/{packageName}
		/// </summary>
		/// <param name="packageName">The name of the new package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreatePackageResponse> CreatePackageAsync(string packageName, string clientToken, CreatePackagePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePackageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific version from a software package.</p> <p> <b>Note:</b> All package versions must be deleted before deleting the software package.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeletePackageVersion</a> action.</p>
		/// DeletePackage packages/{packageName}
		/// </summary>
		/// <param name="packageName">The name of the target package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePackageResponse> DeletePackageAsync(string packageName, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePackageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified software package.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetPackage</a> action.</p>
		/// GetPackage packages/{packageName}
		/// </summary>
		/// <param name="packageName">The name of the target package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPackageResponse> GetPackageAsync(string packageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPackageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the supported fields for a specific package.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdatePackage</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetIndexingConfiguration</a> actions.</p>
		/// UpdatePackage packages/{packageName}
		/// </summary>
		/// <param name="packageName">The name of the target package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePackageResponse> UpdatePackageAsync(string packageName, string clientToken, UpdatePackagePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePackageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version for an existing IoT software package.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreatePackageVersion</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetIndexingConfiguration</a> actions.</p>
		/// CreatePackageVersion packages/{packageName}/versions/{versionName}
		/// </summary>
		/// <param name="packageName">The name of the associated package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="versionName">The name of the new package version.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreatePackageVersionResponse> CreatePackageVersionAsync(string packageName, string versionName, string clientToken, CreatePackageVersionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePackageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific version from a software package.</p> <p> <b>Note:</b> If a package version is designated as default, you must remove the designation from the package using the <a>UpdatePackage</a> action.</p>
		/// DeletePackageVersion packages/{packageName}/versions/{versionName}
		/// </summary>
		/// <param name="packageName">The name of the associated package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="versionName">The name of the target package version.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePackageVersionResponse> DeletePackageVersionAsync(string packageName, string versionName, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePackageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified package version. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetPackageVersion</a> action.</p>
		/// GetPackageVersion packages/{packageName}/versions/{versionName}
		/// </summary>
		/// <param name="packageName">The name of the associated package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="versionName">The name of the target package version.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPackageVersionResponse> GetPackageVersionAsync(string packageName, string versionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPackageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the supported fields for a specific package version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdatePackageVersion</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetIndexingConfiguration</a> actions.</p>
		/// UpdatePackageVersion packages/{packageName}/versions/{versionName}
		/// </summary>
		/// <param name="packageName">The name of the associated software package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="versionName">The name of the target package version.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePackageVersionResponse> UpdatePackageVersionAsync(string packageName, string versionName, string clientToken, UpdatePackageVersionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePackageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreatePolicy</a> action.</p>
		/// CreatePolicy policies/{policyName}
		/// </summary>
		/// <param name="policyName">The policy name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreatePolicyResponse> CreatePolicyAsync(string policyName, CreatePolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the <a>DeletePolicyVersion</a> action to delete all non-default versions of the policy; use the <a>DetachPolicy</a> action to detach the policy from any certificate; and then use the DeletePolicy action to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p> <note> <p>Because of the distributed nature of Amazon Web Services, it can take up to five minutes after a policy is detached before it's ready to be deleted.</p> </note> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeletePolicy</a> action.</p>
		/// DeletePolicy policies/{policyName}
		/// </summary>
		/// <param name="policyName">The name of the policy to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task DeletePolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified policy with the policy document of the default version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetPolicy</a> action.</p>
		/// GetPolicy policies/{policyName}
		/// </summary>
		/// <param name="policyName">The name of the policy.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPolicyResponse> GetPolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of the specified IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreatePolicyVersion</a> action.</p>
		/// CreatePolicyVersion policies/{policyName}/version
		/// </summary>
		/// <param name="policyName">The policy name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="setAsDefault">Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</param>
		/// <returns>Success</returns>
		public async Task<CreatePolicyVersionResponse> CreatePolicyVersionAsync(string policyName, bool setAsDefault, CreatePolicyVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/version&setAsDefault="+setAsDefault;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePolicyVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the versions of the specified policy and identifies the default version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPolicyVersions</a> action.</p>
		/// ListPolicyVersions policies/{policyName}/version
		/// </summary>
		/// <param name="policyName">The policy name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPolicyVersionsResponse> ListPolicyVersionsAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPolicyVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a provisioning claim.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateProvisioningClaim</a> action.</p>
		/// CreateProvisioningClaim provisioning-templates/{templateName}/provisioning-claim
		/// </summary>
		/// <param name="templateName">The name of the provisioning template to use.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningClaimResponse> CreateProvisioningClaimAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"/provisioning-claim";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProvisioningClaimResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a provisioning template.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateProvisioningTemplate</a> action.</p>
		/// CreateProvisioningTemplate provisioning-templates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningTemplateResponse> CreateProvisioningTemplateAsync(CreateProvisioningTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the provisioning templates in your Amazon Web Services account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListProvisioningTemplates</a> action.</p>
		/// ListProvisioningTemplates provisioning-templates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">A token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListProvisioningTemplatesResponse> ListProvisioningTemplatesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProvisioningTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of a provisioning template.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateProvisioningTemplateVersion</a> action.</p>
		/// CreateProvisioningTemplateVersion provisioning-templates/{templateName}/versions
		/// </summary>
		/// <param name="templateName">The name of the provisioning template.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="setAsDefault">Sets a fleet provision template version as the default version.</param>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningTemplateVersionResponse> CreateProvisioningTemplateVersionAsync(string templateName, bool setAsDefault, CreateProvisioningTemplateVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"/versions&setAsDefault="+setAsDefault;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProvisioningTemplateVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A list of provisioning template versions.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListProvisioningTemplateVersions</a> action.</p>
		/// ListProvisioningTemplateVersions provisioning-templates/{templateName}/versions
		/// </summary>
		/// <param name="templateName">The name of the provisioning template.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">A token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListProvisioningTemplateVersionsResponse> ListProvisioningTemplateVersionsAsync(string templateName, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"/versions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProvisioningTemplateVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a role alias.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateRoleAlias</a> action.</p>
		/// CreateRoleAlias role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias that points to a role ARN. This allows you to change the role without having to update the device.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateRoleAliasResponse> CreateRoleAliasAsync(string roleAlias, CreateRoleAliasPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "role-aliases/"+ (roleAlias==null? "" : System.Uri.EscapeDataString(roleAlias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a role alias</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteRoleAlias</a> action.</p>
		/// DeleteRoleAlias role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteRoleAliasResponse> DeleteRoleAliasAsync(string roleAlias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "role-aliases/"+ (roleAlias==null? "" : System.Uri.EscapeDataString(roleAlias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a role alias.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeRoleAlias</a> action.</p>
		/// DescribeRoleAlias role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias to describe.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeRoleAliasResponse> DescribeRoleAliasAsync(string roleAlias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "role-aliases/"+ (roleAlias==null? "" : System.Uri.EscapeDataString(roleAlias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a role alias.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateRoleAlias</a> action.</p>
		/// UpdateRoleAlias role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRoleAliasResponse> UpdateRoleAliasAsync(string roleAlias, UpdateRoleAliasPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "role-aliases/"+ (roleAlias==null? "" : System.Uri.EscapeDataString(roleAlias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a scheduled audit that is run at a specified time interval.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateScheduledAudit</a> action.</p>
		/// CreateScheduledAudit audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name you want to give to the scheduled audit. (Max. 128 chars)
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateScheduledAuditResponse> CreateScheduledAuditAsync(string scheduledAuditName, CreateScheduledAuditPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/scheduledaudits/"+ (scheduledAuditName==null? "" : System.Uri.EscapeDataString(scheduledAuditName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a scheduled audit.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteScheduledAudit</a> action.</p>
		/// DeleteScheduledAudit audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name of the scheduled audit you want to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteScheduledAuditResponse> DeleteScheduledAuditAsync(string scheduledAuditName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/scheduledaudits/"+ (scheduledAuditName==null? "" : System.Uri.EscapeDataString(scheduledAuditName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a scheduled audit.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeScheduledAudit</a> action.</p>
		/// DescribeScheduledAudit audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name of the scheduled audit whose information you want to get.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeScheduledAuditResponse> DescribeScheduledAuditAsync(string scheduledAuditName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/scheduledaudits/"+ (scheduledAuditName==null? "" : System.Uri.EscapeDataString(scheduledAuditName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a scheduled audit, including which checks are performed and how often the audit takes place.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateScheduledAudit</a> action.</p>
		/// UpdateScheduledAudit audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name of the scheduled audit. (Max. 128 chars)
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateScheduledAuditResponse> UpdateScheduledAuditAsync(string scheduledAuditName, UpdateScheduledAuditPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/scheduledaudits/"+ (scheduledAuditName==null? "" : System.Uri.EscapeDataString(scheduledAuditName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Device Defender security profile.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateSecurityProfile</a> action.</p>
		/// CreateSecurityProfile security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name you are giving to the security profile.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateSecurityProfileResponse> CreateSecurityProfileAsync(string securityProfileName, CreateSecurityProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a Device Defender security profile.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteSecurityProfile</a> action.</p>
		/// DeleteSecurityProfile security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name of the security profile to be deleted.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSecurityProfileResponse> DeleteSecurityProfileAsync(string securityProfileName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a Device Defender security profile.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeSecurityProfile</a> action.</p>
		/// DescribeSecurityProfile security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name of the security profile whose information you want to get.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeSecurityProfileResponse> DescribeSecurityProfileAsync(string securityProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a Device Defender security profile.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateSecurityProfile</a> action.</p>
		/// UpdateSecurityProfile security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name of the security profile you want to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.</param>
		/// <returns>Success</returns>
		public async Task<UpdateSecurityProfileResponse> UpdateSecurityProfileAsync(string securityProfileName, int expectedVersion, UpdateSecurityProfilePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateStream</a> action.</p>
		/// CreateStream streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateStreamResponse> CreateStreamAsync(string streamId, CreateStreamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "streams/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a stream.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteStream</a> action.</p>
		/// DeleteStream streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteStreamResponse> DeleteStreamAsync(string streamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "streams/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a stream.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeStream</a> action.</p>
		/// DescribeStream streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeStreamResponse> DescribeStreamAsync(string streamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "streams/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an existing stream. The stream version will be incremented by one.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateStream</a> action.</p>
		/// UpdateStream streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateStreamResponse> UpdateStreamAsync(string streamId, UpdateStreamPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "streams/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateThing</a> action.</p>
		/// CreateThing things/{thingName}
		/// </summary>
		/// <param name="thingName"><p>The name of the thing to create.</p> <p>You can't change a thing's name after you create it. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateThingResponse> CreateThingAsync(string thingName, CreateThingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteThing</a> action.</p>
		/// DeleteThing things/{thingName}
		/// </summary>
		/// <param name="thingName">The name of the thing to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThingResponse> DeleteThingAsync(string thingName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified thing.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeThing</a> action.</p>
		/// DescribeThing things/{thingName}
		/// </summary>
		/// <param name="thingName">The name of the thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeThingResponse> DescribeThingAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the data for a thing.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateThing</a> action.</p>
		/// UpdateThing things/{thingName}
		/// </summary>
		/// <param name="thingName"><p>The name of the thing to update.</p> <p>You can't change a thing's name. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p>
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateThingResponse> UpdateThingAsync(string thingName, UpdateThingPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateThingGroup</a> action.</p>
		/// CreateThingGroup thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The thing group name to create.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateThingGroupResponse> CreateThingGroupAsync(string thingGroupName, CreateThingGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteThingGroup</a> action.</p>
		/// DeleteThingGroup thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the thing group to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="expectedVersion">The expected version of the thing group to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThingGroupResponse> DeleteThingGroupAsync(string thingGroupName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName))+"&expectedVersion="+expectedVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describe a thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeThingGroup</a> action.</p>
		/// DescribeThingGroup thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the thing group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeThingGroupResponse> DescribeThingGroupAsync(string thingGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Update a thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateThingGroup</a> action.</p>
		/// UpdateThingGroup thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The thing group to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateThingGroupResponse> UpdateThingGroupAsync(string thingGroupName, UpdateThingGroupPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new thing type.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateThingType</a> action.</p>
		/// CreateThingType thing-types/{thingTypeName}
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateThingTypeResponse> CreateThingTypeAsync(string thingTypeName, CreateThingTypePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-types/"+ (thingTypeName==null? "" : System.Uri.EscapeDataString(thingTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteThingType</a> action.</p>
		/// DeleteThingType thing-types/{thingTypeName}
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteThingTypeResponse> DeleteThingTypeAsync(string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-types/"+ (thingTypeName==null? "" : System.Uri.EscapeDataString(thingTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified thing type.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeThingType</a> action.</p>
		/// DescribeThingType thing-types/{thingTypeName}
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeThingTypeResponse> DescribeThingTypeAsync(string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-types/"+ (thingTypeName==null? "" : System.Uri.EscapeDataString(thingTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateTopicRule</a> action.</p>
		/// CreateTopicRule rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task CreateTopicRuleAsync(string ruleName, CreateTopicRulePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the rule.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteTopicRule</a> action.</p>
		/// DeleteTopicRule rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the rule.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetTopicRule</a> action.</p>
		/// GetTopicRule rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTopicRuleResponse> GetTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTopicRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ReplaceTopicRule</a> action.</p>
		/// ReplaceTopicRule rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task ReplaceTopicRuleAsync(string ruleName, ReplaceTopicRulePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a topic rule destination. The destination must be confirmed prior to use.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateTopicRuleDestination</a> action.</p>
		/// CreateTopicRuleDestination destinations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTopicRuleDestinationResponse> CreateTopicRuleDestinationAsync(CreateTopicRuleDestinationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all the topic rule destinations in your Amazon Web Services account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTopicRuleDestinations</a> action.</p>
		/// ListTopicRuleDestinations destinations
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListTopicRuleDestinationsResponse> ListTopicRuleDestinationsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTopicRuleDestinationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateTopicRuleDestination</a> action.</p>
		/// UpdateTopicRuleDestination destinations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTopicRuleDestinationResponse> UpdateTopicRuleDestinationAsync(UpdateTopicRuleDestinationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteAccountAuditConfiguration</a> action.</p>
		/// DeleteAccountAuditConfiguration audit/configuration
		/// </summary>
		/// <param name="deleteScheduledAudits">If true, all scheduled audits are deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteAccountAuditConfigurationResponse> DeleteAccountAuditConfigurationAsync(bool deleteScheduledAudits, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/configuration?deleteScheduledAudits="+deleteScheduledAudits;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAccountAuditConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeAccountAuditConfiguration</a> action.</p>
		/// DescribeAccountAuditConfiguration audit/configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAccountAuditConfigurationResponse> DescribeAccountAuditConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAccountAuditConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateAccountAuditConfiguration</a> action.</p>
		/// UpdateAccountAuditConfiguration audit/configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAccountAuditConfigurationResponse> UpdateAccountAuditConfigurationAsync(UpdateAccountAuditConfigurationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAccountAuditConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes a Device Defender audit suppression. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteAuditSuppression</a> action.</p>
		/// DeleteAuditSuppression audit/suppressions/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAuditSuppressionResponse> DeleteAuditSuppressionAsync(DeleteAuditSuppressionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/suppressions/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAuditSuppressionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a registered CA certificate.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteCACertificate</a> action.</p>
		/// DeleteCACertificate cacertificate/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteCACertificateResponse> DeleteCACertificateAsync(string caCertificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cacertificate/"+ (caCertificateId==null? "" : System.Uri.EscapeDataString(caCertificateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCACertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a registered CA certificate.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeCACertificate</a> action.</p>
		/// DescribeCACertificate cacertificate/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The CA certificate identifier.
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeCACertificateResponse> DescribeCACertificateAsync(string caCertificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cacertificate/"+ (caCertificateId==null? "" : System.Uri.EscapeDataString(caCertificateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCACertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a registered CA certificate.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateCACertificate</a> action.</p>
		/// UpdateCACertificate cacertificate/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The CA certificate identifier.
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="newStatus"><p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p></param>
		/// <param name="newAutoRegistrationStatus">The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".</param>
		/// <returns>Success</returns>
		public async Task UpdateCACertificateAsync(string caCertificateId, AuthorizerStatus newStatus, AutoRegistrationStatus newAutoRegistrationStatus, UpdateCACertificatePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cacertificate/"+ (caCertificateId==null? "" : System.Uri.EscapeDataString(caCertificateId))+"&newStatus=" + newStatus+"&newAutoRegistrationStatus=" + newAutoRegistrationStatus;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPolicy</a> action to detach all policies. Next, use the <a>UpdateCertificate</a> action to set the certificate to the INACTIVE status.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteCertificate</a> action.</p>
		/// DeleteCertificate certificates/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="forceDelete">Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.</param>
		/// <returns>Success</returns>
		public async Task DeleteCertificateAsync(string certificateId, bool forceDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId))+"&forceDelete="+forceDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified certificate.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeCertificate</a> action.</p>
		/// DescribeCertificate certificates/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeCertificateResponse> DescribeCertificateAsync(string certificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a job execution.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteJobExecution</a> action.</p>
		/// DeleteJobExecution things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}
		/// </summary>
		/// <param name="jobId">The ID of the job whose execution on a particular device will be deleted.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="thingName">The name of the thing whose job execution will be deleted.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="executionNumber"><p>The ID of the job execution to be deleted. The <code>executionNumber</code> refers to the execution of a particular job on a particular device.</p> <p>Note that once a job execution is deleted, the <code>executionNumber</code> may be reused by IoT, so be sure you get and use the correct value here.</p></param>
		/// <param name="force"><p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note></param>
		/// <param name="namespaceId"><p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note></param>
		/// <returns>Success</returns>
		public async Task DeleteJobExecutionAsync(string jobId, string thingName, int executionNumber, bool force, string namespaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/executionNumber/"+executionNumber+"&force="+force+"&namespaceId=" + (namespaceId==null? "" : System.Uri.EscapeDataString(namespaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this action. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeletePolicyVersion</a> action.</p>
		/// DeletePolicyVersion policies/{policyName}/version/{policyVersionId}
		/// </summary>
		/// <param name="policyName">The name of the policy.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="policyVersionId">The policy version ID.</param>
		/// <returns>Success</returns>
		public async Task DeletePolicyVersionAsync(string policyName, string policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/version/"+ (policyVersionId==null? "" : System.Uri.EscapeDataString(policyVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified policy version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetPolicyVersion</a> action.</p>
		/// GetPolicyVersion policies/{policyName}/version/{policyVersionId}
		/// </summary>
		/// <param name="policyName">The name of the policy.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="policyVersionId">The policy version ID.</param>
		/// <returns>Success</returns>
		public async Task<GetPolicyVersionResponse> GetPolicyVersionAsync(string policyName, string policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/version/"+ (policyVersionId==null? "" : System.Uri.EscapeDataString(policyVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPolicyVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the <a>ListPrincipalPolicies</a> action.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SetDefaultPolicyVersion</a> action.</p>
		/// SetDefaultPolicyVersion policies/{policyName}/version/{policyVersionId}
		/// </summary>
		/// <param name="policyName">The policy name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="policyVersionId">The policy version ID.</param>
		/// <returns>Success</returns>
		public async Task SetDefaultPolicyVersionAsync(string policyName, string policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"/version/"+ (policyVersionId==null? "" : System.Uri.EscapeDataString(policyVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a provisioning template.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteProvisioningTemplate</a> action.</p>
		/// DeleteProvisioningTemplate provisioning-templates/{templateName}
		/// </summary>
		/// <param name="templateName">The name of the fleet provision template to delete.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProvisioningTemplateResponse> DeleteProvisioningTemplateAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a provisioning template.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeProvisioningTemplate</a> action.</p>
		/// DescribeProvisioningTemplate provisioning-templates/{templateName}
		/// </summary>
		/// <param name="templateName">The name of the provisioning template.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeProvisioningTemplateResponse> DescribeProvisioningTemplateAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a provisioning template.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateProvisioningTemplate</a> action.</p>
		/// UpdateProvisioningTemplate provisioning-templates/{templateName}
		/// </summary>
		/// <param name="templateName">The name of the provisioning template.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProvisioningTemplateResponse> UpdateProvisioningTemplateAsync(string templateName, UpdateProvisioningTemplatePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a provisioning template version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteProvisioningTemplateVersion</a> action.</p>
		/// DeleteProvisioningTemplateVersion provisioning-templates/{templateName}/versions/{versionId}
		/// </summary>
		/// <param name="templateName">The name of the provisioning template version to delete.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="versionId">The provisioning template version ID to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteProvisioningTemplateVersionResponse> DeleteProvisioningTemplateVersionAsync(string templateName, int versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"/versions/"+versionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProvisioningTemplateVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a provisioning template version.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeProvisioningTemplateVersion</a> action.</p>
		/// DescribeProvisioningTemplateVersion provisioning-templates/{templateName}/versions/{versionId}
		/// </summary>
		/// <param name="templateName">The template name.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <param name="versionId">The provisioning template version ID.</param>
		/// <returns>Success</returns>
		public async Task<DescribeProvisioningTemplateVersionResponse> DescribeProvisioningTemplateVersionAsync(string templateName, int versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioning-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"/versions/"+versionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProvisioningTemplateVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a CA certificate registration code.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteRegistrationCode</a> action.</p>
		/// DeleteRegistrationCode registrationcode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRegistrationCodeResponse> DeleteRegistrationCodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrationcode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRegistrationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a registration code used to register a CA certificate with IoT.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetRegistrationCode</a> action.</p>
		/// GetRegistrationCode registrationcode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRegistrationCodeResponse> GetRegistrationCodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "registrationcode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRegistrationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a topic rule destination.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteTopicRuleDestination</a> action.</p>
		/// DeleteTopicRuleDestination destinations/{arn}
		/// </summary>
		/// <param name="arn">The ARN of the topic rule destination to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteTopicRuleDestinationResponse> DeleteTopicRuleDestinationAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations/"+ (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a topic rule destination.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetTopicRuleDestination</a> action.</p>
		/// GetTopicRuleDestination destinations/{arn}
		/// </summary>
		/// <param name="arn">The ARN of the topic rule destination.</param>
		/// <returns>Success</returns>
		public async Task<GetTopicRuleDestinationResponse> GetTopicRuleDestinationAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations/"+ (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a logging level.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteV2LoggingLevel</a> action.</p>
		/// DeleteV2LoggingLevel v2LoggingLevel#targetType&targetName
		/// </summary>
		/// <param name="targetType">The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.</param>
		/// <param name="targetName">The name of the resource for which you are configuring logging.</param>
		/// <returns>Success</returns>
		public async Task DeleteV2LoggingLevelAsync(LogTargetType targetType, string targetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2LoggingLevel#targetType&targetName?targetType=" + targetType+"&targetName=" + (targetName==null? "" : System.Uri.EscapeDataString(targetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates a thing type. You can not associate new things with deprecated thing type.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeprecateThingType</a> action.</p>
		/// DeprecateThingType thing-types/{thingTypeName}/deprecate
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type to deprecate.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeprecateThingTypeResponse> DeprecateThingTypeAsync(string thingTypeName, DeprecateThingTypePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-types/"+ (thingTypeName==null? "" : System.Uri.EscapeDataString(thingTypeName))+"/deprecate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeprecateThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and the start time when the audit that returned the finding.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeAuditFinding</a> action.</p>
		/// DescribeAuditFinding audit/findings/{findingId}
		/// </summary>
		/// <param name="findingId">A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAuditFindingResponse> DescribeAuditFindingAsync(string findingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/findings/"+ (findingId==null? "" : System.Uri.EscapeDataString(findingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAuditFindingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
		/// DescribeAuditMitigationActionsTask audit/mitigationactions/tasks/{taskId}
		/// </summary>
		/// <param name="taskId">The unique identifier for the audit mitigation task.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAuditMitigationActionsTaskResponse> DescribeAuditMitigationActionsTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/mitigationactions/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAuditMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a task that applies a set of mitigation actions to the specified target.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartAuditMitigationActionsTask</a> action.</p>
		/// StartAuditMitigationActionsTask audit/mitigationactions/tasks/{taskId}
		/// </summary>
		/// <param name="taskId">A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<StartAuditMitigationActionsTaskResponse> StartAuditMitigationActionsTaskAsync(string taskId, StartAuditMitigationActionsTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/mitigationactions/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartAuditMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a Device Defender audit suppression.
		/// DescribeAuditSuppression audit/suppressions/describe
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAuditSuppressionResponse> DescribeAuditSuppressionAsync(DescribeAuditSuppressionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/suppressions/describe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAuditSuppressionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a Device Defender audit.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeAuditTask</a> action.</p>
		/// DescribeAuditTask audit/tasks/{taskId}
		/// </summary>
		/// <param name="taskId">The ID of the audit whose information you want to get.
		/// Min length: 1
		/// Max length: 40
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAuditTaskResponse> DescribeAuditTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAuditTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Gets information about a Device Defender ML Detect mitigation action. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeDetectMitigationActionsTask</a> action.</p>
		/// DescribeDetectMitigationActionsTask detect/mitigationactions/tasks/{taskId}
		/// </summary>
		/// <param name="taskId"> The unique identifier of the task. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDetectMitigationActionsTaskResponse> DescribeDetectMitigationActionsTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detect/mitigationactions/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDetectMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Starts a Device Defender ML Detect mitigation actions task. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartDetectMitigationActionsTask</a> action.</p>
		/// StartDetectMitigationActionsTask detect/mitigationactions/tasks/{taskId}
		/// </summary>
		/// <param name="taskId"> The unique identifier of the task. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<StartDetectMitigationActionsTaskResponse> StartDetectMitigationActionsTaskAsync(string taskId, StartDetectMitigationActionsTaskPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detect/mitigationactions/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartDetectMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a unique endpoint specific to the Amazon Web Services account making the call.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeEndpoint</a> action.</p>
		/// DescribeEndpoint endpoint
		/// </summary>
		/// <param name="endpointType"><p>The endpoint type. Valid endpoint types include:</p> <ul> <li> <p> <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:CredentialProvider</code> - Returns an IoT credentials provider API endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Jobs</code> - Returns an IoT device management Jobs API endpoint.</p> </li> </ul> <p>We strongly recommend that customers use the newer <code>iot:Data-ATS</code> endpoint type to avoid issues related to the widespread distrust of Symantec certificate authorities.</p>
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeEndpointResponse> DescribeEndpointAsync(string endpointType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "endpoint?endpointType=" + (endpointType==null? "" : System.Uri.EscapeDataString(endpointType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes event configurations.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeEventConfigurations</a> action.</p>
		/// DescribeEventConfigurations event-configurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEventConfigurationsResponse> DescribeEventConfigurationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEventConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the event configurations.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateEventConfigurations</a> action.</p>
		/// UpdateEventConfigurations event-configurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateEventConfigurationsResponse> UpdateEventConfigurationsAsync(UpdateEventConfigurationsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEventConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a search index.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeIndex</a> action.</p>
		/// DescribeIndex indices/{indexName}
		/// </summary>
		/// <param name="indexName">The index name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeIndexResponse> DescribeIndexAsync(string indexName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices/"+ (indexName==null? "" : System.Uri.EscapeDataString(indexName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a job execution.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeJobExecution</a> action.</p>
		/// DescribeJobExecution things/{thingName}/jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="thingName">The name of the thing on which the job execution is running.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="executionNumber">A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobExecutionResponse> DescribeJobExecutionAsync(string jobId, string thingName, int executionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&executionNumber="+executionNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View details of a managed job template.
		/// DescribeManagedJobTemplate managed-job-templates/{templateName}
		/// </summary>
		/// <param name="templateName">The unique name of a managed job template, which is required.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="templateVersion">An optional parameter to specify version of a managed template. If not specified, the pre-defined default version is returned.</param>
		/// <returns>Success</returns>
		public async Task<DescribeManagedJobTemplateResponse> DescribeManagedJobTemplateAsync(string templateName, string templateVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "managed-job-templates/"+ (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"&templateVersion=" + (templateVersion==null? "" : System.Uri.EscapeDataString(templateVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeManagedJobTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a bulk thing provisioning task.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeThingRegistrationTask</a> action.</p>
		/// DescribeThingRegistrationTask thing-registration-tasks/{taskId}
		/// </summary>
		/// <param name="taskId">The task ID.
		/// Max length: 40
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeThingRegistrationTaskResponse> DescribeThingRegistrationTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-registration-tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeThingRegistrationTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables the rule.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DisableTopicRule</a> action.</p>
		/// DisableTopicRule rules/{ruleName}/disable
		/// </summary>
		/// <param name="ruleName">The name of the rule to disable.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task DisableTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables the rule.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">EnableTopicRule</a> action.</p>
		/// EnableTopicRule rules/{ruleName}/enable
		/// </summary>
		/// <param name="ruleName">The name of the topic rule to enable.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task EnableTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Returns a Device Defender's ML Detect Security Profile training model's status. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetBehaviorModelTrainingSummaries</a> action.</p>
		/// GetBehaviorModelTrainingSummaries behavior-model-training/summaries
		/// </summary>
		/// <param name="securityProfileName"> The name of the security profile. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults"> The maximum number of results to return at one time. The default is 10. 
		/// Minimum: 1
		/// Maximum: 10
		// </param>
		/// <param name="nextToken"> The token for the next set of results. </param>
		/// <returns>Success</returns>
		public async Task<GetBehaviorModelTrainingSummariesResponse> GetBehaviorModelTrainingSummariesAsync(string securityProfileName, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "behavior-model-training/summaries?securityProfileName=" + (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBehaviorModelTrainingSummariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Aggregates on indexed data with search queries pertaining to particular fields. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetBucketsAggregation</a> action.</p>
		/// GetBucketsAggregation indices/buckets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBucketsAggregationResponse> GetBucketsAggregationAsync(GetBucketsAggregationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices/buckets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBucketsAggregationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the approximate count of unique values that match the query.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetCardinality</a> action.</p>
		/// GetCardinality indices/cardinality
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCardinalityResponse> GetCardinalityAsync(GetCardinalityPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices/cardinality";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCardinalityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the IoT device gateway.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetEffectivePolicies</a> action.</p>
		/// GetEffectivePolicies effective-policies
		/// </summary>
		/// <param name="thingName">The thing name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEffectivePoliciesResponse> GetEffectivePoliciesAsync(string thingName, GetEffectivePoliciesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "effective-policies?thingName=" + (thingName==null? "" : System.Uri.EscapeDataString(thingName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEffectivePoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the indexing configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetIndexingConfiguration</a> action.</p>
		/// GetIndexingConfiguration indexing/config
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetIndexingConfigurationResponse> GetIndexingConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indexing/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIndexingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the search configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateIndexingConfiguration</a> action.</p>
		/// UpdateIndexingConfiguration indexing/config
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateIndexingConfigurationResponse> UpdateIndexingConfigurationAsync(UpdateIndexingConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indexing/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateIndexingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a job document.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetJobDocument</a> action.</p>
		/// GetJobDocument jobs/{jobId}/job-document
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetJobDocumentResponse> GetJobDocumentAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/job-document";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobDocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetLoggingOptions</a> action.</p>
		/// GetLoggingOptions loggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoggingOptionsResponse> GetLoggingOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "loggingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLoggingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SetLoggingOptions</a> action.</p>
		/// SetLoggingOptions loggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetLoggingOptionsAsync(SetLoggingOptionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "loggingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified software package's configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetPackageConfiguration</a> action.</p>
		/// GetPackageConfiguration package-configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPackageConfigurationResponse> GetPackageConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "package-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPackageConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the package configuration.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdatePackageConfiguration</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html">iam:PassRole</a> actions.</p>
		/// UpdatePackageConfiguration package-configuration
		/// </summary>
		/// <param name="clientToken">A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
		/// Min length: 36
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePackageConfigurationResponse> UpdatePackageConfigurationAsync(string clientToken, UpdatePackageConfigurationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "package-configuration?clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePackageConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetPercentiles</a> action.</p>
		/// GetPercentiles indices/percentiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPercentilesResponse> GetPercentilesAsync(GetPercentilesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices/percentiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPercentilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetStatistics</a> action.</p>
		/// GetStatistics indices/statistics
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStatisticsResponse> GetStatisticsAsync(GetStatisticsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStatisticsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the fine grained logging options.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetV2LoggingOptions</a> action.</p>
		/// GetV2LoggingOptions v2LoggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetV2LoggingOptionsResponse> GetV2LoggingOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2LoggingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetV2LoggingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the logging options for the V2 logging service.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SetV2LoggingOptions</a> action.</p>
		/// SetV2LoggingOptions v2LoggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetV2LoggingOptionsAsync(SetV2LoggingOptionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2LoggingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the active violations for a given Device Defender security profile.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListActiveViolations</a> action.</p>
		/// ListActiveViolations active-violations
		/// </summary>
		/// <param name="thingName">The name of the thing whose active violations are listed.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="securityProfileName">The name of the Device Defender security profile for which violations are listed.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="behaviorCriteriaType"> The criteria for a behavior. </param>
		/// <param name="listSuppressedAlerts"> A list of all suppressed alerts. </param>
		/// <param name="verificationState">The verification state of the violation (detect alarm).</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListActiveViolationsResponse> ListActiveViolationsAsync(string thingName, string securityProfileName, BehaviorCriteriaType behaviorCriteriaType, bool listSuppressedAlerts, VerificationState verificationState, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "active-violations?thingName=" + (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"&securityProfileName=" + (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"&behaviorCriteriaType=" + behaviorCriteriaType+"&listSuppressedAlerts="+listSuppressedAlerts+"&verificationState=" + verificationState+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListActiveViolationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the policies attached to the specified thing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAttachedPolicies</a> action.</p>
		/// ListAttachedPolicies attached-policies/{target}
		/// </summary>
		/// <param name="target">The group or principal for which the policies will be listed. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</param>
		/// <param name="recursive">When true, recursively list attached policies.</param>
		/// <param name="marker">The token to retrieve the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="pageSize">The maximum number of results to be returned per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAttachedPoliciesResponse> ListAttachedPoliciesAsync(string target, bool recursive, string marker, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attached-policies/"+ (target==null? "" : System.Uri.EscapeDataString(target))+"&recursive="+recursive+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAttachedPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 90 days.)</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditFindings</a> action.</p>
		/// ListAuditFindings audit/findings
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAuditFindingsResponse> ListAuditFindingsAsync(string maxResults, string nextToken, ListAuditFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/findings?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuditFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the status of audit mitigation action tasks that were executed.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditMitigationActionsExecutions</a> action.</p>
		/// ListAuditMitigationActionsExecutions audit/mitigationactions/executions#taskId&findingId
		/// </summary>
		/// <param name="taskId">Specify this filter to limit results to actions for a specific audit mitigation actions task.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="actionStatus">Specify this filter to limit results to those with a specific status.</param>
		/// <param name="findingId">Specify this filter to limit results to those that were applied to a specific audit finding.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListAuditMitigationActionsExecutionsResponse> ListAuditMitigationActionsExecutionsAsync(string taskId, AuditMitigationActionsExecutionStatus actionStatus, string findingId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/mitigationactions/executions#taskId&findingId?taskId=" + (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"&actionStatus=" + actionStatus+"&findingId=" + (findingId==null? "" : System.Uri.EscapeDataString(findingId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuditMitigationActionsExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of audit mitigation action tasks that match the specified filters.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditMitigationActionsTasks</a> action.</p>
		/// ListAuditMitigationActionsTasks audit/mitigationactions/tasks#startTime&endTime
		/// </summary>
		/// <param name="auditTaskId">Specify this filter to limit results to tasks that were applied to results for a specific audit.
		/// Min length: 1
		/// Max length: 40
		// </param>
		/// <param name="findingId">Specify this filter to limit results to tasks that were applied to a specific audit finding.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="taskStatus">Specify this filter to limit results to tasks that are in a specific state.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="startTime">Specify this filter to limit results to tasks that began on or after a specific date and time.</param>
		/// <param name="endTime">Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.</param>
		/// <returns>Success</returns>
		public async Task<ListAuditMitigationActionsTasksResponse> ListAuditMitigationActionsTasksAsync(string auditTaskId, string findingId, AuditMitigationActionsTaskStatus taskStatus, int maxResults, string nextToken, System.DateTimeOffset startTime, System.DateTimeOffset endTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/mitigationactions/tasks#startTime&endTime?auditTaskId=" + (auditTaskId==null? "" : System.Uri.EscapeDataString(auditTaskId))+"&findingId=" + (findingId==null? "" : System.Uri.EscapeDataString(findingId))+"&taskStatus=" + taskStatus+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuditMitigationActionsTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Lists your Device Defender audit listings. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditSuppressions</a> action.</p>
		/// ListAuditSuppressions audit/suppressions/list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAuditSuppressionsResponse> ListAuditSuppressionsAsync(string maxResults, string nextToken, ListAuditSuppressionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/suppressions/list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuditSuppressionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the Device Defender audits that have been performed during a given time period.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuditTasks</a> action.</p>
		/// ListAuditTasks audit/tasks#startTime&endTime
		/// </summary>
		/// <param name="startTime">The beginning of the time period. Audit information is retained for a limited time (90 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".</param>
		/// <param name="endTime">The end of the time period.</param>
		/// <param name="taskType">A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".</param>
		/// <param name="taskStatus">A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAuditTasksResponse> ListAuditTasksAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, AuditTaskType taskType, AuditMitigationActionsTaskStatus taskStatus, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/tasks#startTime&endTime?startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&taskType=" + taskType+"&taskStatus=" + taskStatus+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuditTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the authorizers registered in your account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuthorizers</a> action.</p>
		/// ListAuthorizers authorizers/
		/// </summary>
		/// <param name="pageSize">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="marker">A marker used to get the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="isAscendingOrder">Return the list of authorizers in ascending alphabetical order.</param>
		/// <param name="status">The status of the list authorizers request.</param>
		/// <returns>Success</returns>
		public async Task<ListAuthorizersResponse> ListAuthorizersAsync(int pageSize, string marker, bool isAscendingOrder, AuthorizerStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizers/?pageSize="+pageSize+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuthorizersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the billing groups you have created.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListBillingGroups</a> action.</p>
		/// ListBillingGroups billing-groups
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="namePrefixFilter">Limit the results to billing groups whose names have the given prefix.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<ListBillingGroupsResponse> ListBillingGroupsAsync(string nextToken, int maxResults, string namePrefixFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&namePrefixFilter=" + (namePrefixFilter==null? "" : System.Uri.EscapeDataString(namePrefixFilter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBillingGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the CA certificates registered for your Amazon Web Services account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListCACertificates</a> action.</p>
		/// ListCACertificates cacertificates
		/// </summary>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="isAscendingOrder">Determines the order of the results.</param>
		/// <param name="templateName">The name of the provisioning template.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ListCACertificatesResponse> ListCACertificatesAsync(int pageSize, string marker, bool isAscendingOrder, string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cacertificates?pageSize="+pageSize+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder+"&templateName=" + (templateName==null? "" : System.Uri.EscapeDataString(templateName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCACertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List the device certificates signed by the specified CA certificate.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListCertificatesByCA</a> action.</p>
		/// ListCertificatesByCA certificates-by-ca/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="isAscendingOrder">Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</param>
		/// <returns>Success</returns>
		public async Task<ListCertificatesByCAResponse> ListCertificatesByCAAsync(string caCertificateId, int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates-by-ca/"+ (caCertificateId==null? "" : System.Uri.EscapeDataString(caCertificateId))+"&pageSize="+pageSize+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCertificatesByCAResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Lists your Device Defender detect custom metrics. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListCustomMetrics</a> action.</p>
		/// ListCustomMetrics custom-metrics
		/// </summary>
		/// <param name="nextToken"> The token for the next set of results. </param>
		/// <param name="maxResults"> The maximum number of results to return at one time. The default is 25. 
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListCustomMetricsResponse> ListCustomMetricsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom-metrics?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomMetricsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Lists mitigation actions executions for a Device Defender ML Detect Security Profile. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListDetectMitigationActionsExecutions</a> action.</p>
		/// ListDetectMitigationActionsExecutions detect/mitigationactions/executions
		/// </summary>
		/// <param name="taskId"> The unique identifier of the task. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="violationId"> The unique identifier of the violation. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="thingName"> The name of the thing whose mitigation actions are listed. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="startTime"> A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both. </param>
		/// <param name="endTime"> The end of the time period for which ML Detect mitigation actions executions are returned. </param>
		/// <param name="maxResults"> The maximum number of results to return at one time. The default is 25. 
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken"> The token for the next set of results. </param>
		/// <returns>Success</returns>
		public async Task<ListDetectMitigationActionsExecutionsResponse> ListDetectMitigationActionsExecutionsAsync(string taskId, string violationId, string thingName, System.DateTimeOffset startTime, System.DateTimeOffset endTime, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detect/mitigationactions/executions?taskId=" + (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"&violationId=" + (violationId==null? "" : System.Uri.EscapeDataString(violationId))+"&thingName=" + (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDetectMitigationActionsExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> List of Device Defender ML Detect mitigation actions tasks. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListDetectMitigationActionsTasks</a> action.</p>
		/// ListDetectMitigationActionsTasks detect/mitigationactions/tasks#startTime&endTime
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken"> The token for the next set of results. </param>
		/// <param name="startTime"> A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both. </param>
		/// <param name="endTime"> The end of the time period for which ML Detect mitigation actions tasks are returned. </param>
		/// <returns>Success</returns>
		public async Task<ListDetectMitigationActionsTasksResponse> ListDetectMitigationActionsTasksAsync(int maxResults, string nextToken, System.DateTimeOffset startTime, System.DateTimeOffset endTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detect/mitigationactions/tasks#startTime&endTime?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDetectMitigationActionsTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List the set of dimensions that are defined for your Amazon Web Services accounts.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListDimensions</a> action.</p>
		/// ListDimensions dimensions
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to retrieve at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDimensionsResponse> ListDimensionsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dimensions?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDimensionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListDomainConfigurations</a> action.</p>
		/// ListDomainConfigurations domainConfigurations
		/// </summary>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="serviceType">The type of service delivered by the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<ListDomainConfigurationsResponse> ListDomainConfigurationsAsync(string marker, int pageSize, ServiceType serviceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainConfigurations?marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&serviceType=" + serviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDomainConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all your fleet metrics. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListFleetMetrics</a> action.</p>
		/// ListFleetMetrics fleet-metrics
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListFleetMetricsResponse> ListFleetMetricsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fleet-metrics?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFleetMetricsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the search indices.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListIndices</a> action.</p>
		/// ListIndices indices
		/// </summary>
		/// <param name="nextToken">The token used to get the next set of results, or <code>null</code> if there are no additional results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <returns>Success</returns>
		public async Task<ListIndicesResponse> ListIndicesAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListIndicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the job executions for a job.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListJobExecutionsForJob</a> action.</p>
		/// ListJobExecutionsForJob jobs/{jobId}/things
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="status">The status of the job.</param>
		/// <param name="maxResults">The maximum number of results to be returned per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListJobExecutionsForJobResponse> ListJobExecutionsForJobAsync(string jobId, JobExecutionStatus status, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/things&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobExecutionsForJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the job executions for the specified thing.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListJobExecutionsForThing</a> action.</p>
		/// ListJobExecutionsForThing things/{thingName}/jobs
		/// </summary>
		/// <param name="thingName">The thing name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="status">An optional filter that lets you search for jobs that have the specified status.</param>
		/// <param name="namespaceId"><p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note></param>
		/// <param name="maxResults">The maximum number of results to be returned per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<ListJobExecutionsForThingResponse> ListJobExecutionsForThingAsync(string thingName, JobExecutionStatus status, string namespaceId, int maxResults, string nextToken, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs&status=" + status+"&namespaceId=" + (namespaceId==null? "" : System.Uri.EscapeDataString(namespaceId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&jobId=" + (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobExecutionsForThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of job templates.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListJobTemplates</a> action.</p>
		/// ListJobTemplates job-templates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in the list.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token to use to return the next set of results in the list.</param>
		/// <returns>Success</returns>
		public async Task<ListJobTemplatesResponse> ListJobTemplatesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "job-templates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists jobs.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListJobs</a> action.</p>
		/// ListJobs jobs
		/// </summary>
		/// <param name="status">An optional filter that lets you search for jobs that have the specified status.</param>
		/// <param name="targetSelection"><p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. </p> <note> <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p> </note></param>
		/// <param name="maxResults">The maximum number of results to return per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="thingGroupName">A filter that limits the returned jobs to those for the specified group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="thingGroupId">A filter that limits the returned jobs to those for the specified group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="namespaceId"><p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note></param>
		/// <returns>Success</returns>
		public async Task<ListJobsResponse> ListJobsAsync(JobStatus status, TargetSelection targetSelection, int maxResults, string nextToken, string thingGroupName, string thingGroupId, string namespaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs?status=" + status+"&targetSelection=" + targetSelection+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&thingGroupName=" + (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName))+"&thingGroupId=" + (thingGroupId==null? "" : System.Uri.EscapeDataString(thingGroupId))+"&namespaceId=" + (namespaceId==null? "" : System.Uri.EscapeDataString(namespaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of managed job templates.
		/// ListManagedJobTemplates managed-job-templates
		/// </summary>
		/// <param name="templateName">An optional parameter for template name. If specified, only the versions of the managed job templates that have the specified template name will be returned.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="maxResults">Maximum number of entries that can be returned.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListManagedJobTemplatesResponse> ListManagedJobTemplatesAsync(string templateName, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "managed-job-templates?templateName=" + (templateName==null? "" : System.Uri.EscapeDataString(templateName))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListManagedJobTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the values reported for an IoT Device Defender metric (device-side metric, cloud-side metric, or custom metric) by the given thing during the specified time period.
		/// ListMetricValues metric-values#thingName&metricName&startTime&endTime
		/// </summary>
		/// <param name="thingName">The name of the thing for which security profile metric values are returned.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="metricName">The name of the security profile metric for which values are returned.</param>
		/// <param name="dimensionName">The dimension name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="dimensionValueOperator">The dimension value operator.</param>
		/// <param name="startTime">The start of the time period for which metric values are returned.</param>
		/// <param name="endTime">The end of the time period for which metric values are returned.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListMetricValuesResponse> ListMetricValuesAsync(string thingName, string metricName, string dimensionName, DimensionValueOperator dimensionValueOperator, System.DateTimeOffset startTime, System.DateTimeOffset endTime, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metric-values#thingName&metricName&startTime&endTime?thingName=" + (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"&metricName=" + (metricName==null? "" : System.Uri.EscapeDataString(metricName))+"&dimensionName=" + (dimensionName==null? "" : System.Uri.EscapeDataString(dimensionName))+"&dimensionValueOperator=" + dimensionValueOperator+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMetricValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of all mitigation actions that match the specified filter criteria.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListMitigationActions</a> action.</p>
		/// ListMitigationActions mitigationactions/actions
		/// </summary>
		/// <param name="actionType">Specify a value to limit the result to mitigation actions with a specific action type.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListMitigationActionsResponse> ListMitigationActionsAsync(MitigationActionType actionType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mitigationactions/actions?actionType=" + actionType+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMitigationActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists OTA updates.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListOTAUpdates</a> action.</p>
		/// ListOTAUpdates otaUpdates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">A token used to retrieve the next set of results.</param>
		/// <param name="otaUpdateStatus">The OTA update job status.</param>
		/// <returns>Success</returns>
		public async Task<ListOTAUpdatesResponse> ListOTAUpdatesAsync(int maxResults, string nextToken, OTAUpdateStatus otaUpdateStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "otaUpdates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&otaUpdateStatus=" + otaUpdateStatus;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOTAUpdatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists certificates that are being transferred but not yet accepted.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListOutgoingCertificates</a> action.</p>
		/// ListOutgoingCertificates certificates-out-going
		/// </summary>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="isAscendingOrder">Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</param>
		/// <returns>Success</returns>
		public async Task<ListOutgoingCertificatesResponse> ListOutgoingCertificatesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates-out-going?pageSize="+pageSize+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOutgoingCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the software package versions associated to the account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPackageVersions</a> action.</p>
		/// ListPackageVersions packages/{packageName}/versions
		/// </summary>
		/// <param name="packageName">The name of the target package.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="status">The status of the package version. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListPackageVersionsResponse> ListPackageVersionsAsync(string packageName, PackageVersionStatus status, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/versions&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPackageVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the software packages associated to the account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPackages</a> action.</p>
		/// ListPackages packages
		/// </summary>
		/// <param name="maxResults">The maximum number of results returned at one time.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListPackagesResponse> ListPackagesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "packages?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPackagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists your policies.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPolicies</a> action.</p>
		/// ListPolicies policies
		/// </summary>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="isAscendingOrder">Specifies the order for results. If true, the results are returned in ascending creation order.</param>
		/// <returns>Success</returns>
		public async Task<ListPoliciesResponse> ListPoliciesAsync(string marker, int pageSize, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policies?marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This action is deprecated and works as expected for backward compatibility, but we won't add enhancements. Use <a>ListTargetsForPolicy</a> instead.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPolicyPrincipals</a> action.</p>
		/// ListPolicyPrincipals policy-principals#x-amzn-iot-policy
		/// </summary>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="isAscendingOrder">Specifies the order for results. If true, the results are returned in ascending creation order.</param>
		/// <returns>Success</returns>
		public async Task<ListPolicyPrincipalsResponse> ListPolicyPrincipalsAsync(string marker, int pageSize, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy-principals#x-amzn-iot-policy?marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPolicyPrincipalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This action is deprecated and works as expected for backward compatibility, but we won't add enhancements. Use <a>ListAttachedPolicies</a> instead.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPrincipalPolicies</a> action.</p>
		/// ListPrincipalPolicies principal-policies#x-amzn-iot-principal
		/// </summary>
		/// <param name="marker">The marker for the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="pageSize">The result page size.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="isAscendingOrder">Specifies the order for results. If true, results are returned in ascending creation order.</param>
		/// <returns>Success</returns>
		public async Task<ListPrincipalPoliciesResponse> ListPrincipalPoliciesAsync(string marker, int pageSize, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "principal-policies#x-amzn-iot-principal?marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPrincipalPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListPrincipalThings</a> action.</p>
		/// ListPrincipalThings principals/things#x-amzn-principal
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPrincipalThingsResponse> ListPrincipalThingsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "principals/things#x-amzn-principal?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPrincipalThingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The related resources of an Audit finding. The following resources can be returned from calling this API:</p> <ul> <li> <p>DEVICE_CERTIFICATE</p> </li> <li> <p>CA_CERTIFICATE</p> </li> <li> <p>IOT_POLICY</p> </li> <li> <p>COGNITO_IDENTITY_POOL</p> </li> <li> <p>CLIENT_ID</p> </li> <li> <p>ACCOUNT_SETTINGS</p> </li> <li> <p>ROLE_ALIAS</p> </li> <li> <p>IAM_ROLE</p> </li> <li> <p>ISSUER_CERTIFICATE</p> </li> </ul> <note> <p>This API is similar to DescribeAuditFinding's <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DescribeAuditFinding.html">RelatedResources</a> but provides pagination and is not limited to 10 resources. When calling <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DescribeAuditFinding.html">DescribeAuditFinding</a> for the intermediate CA revoked for active device certificates check, RelatedResources will not be populated. You must use this API, ListRelatedResourcesForAuditFinding, to list the certificates.</p> </note>
		/// ListRelatedResourcesForAuditFinding audit/relatedResources#findingId
		/// </summary>
		/// <param name="findingId">The finding Id.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="nextToken">A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRelatedResourcesForAuditFindingResponse> ListRelatedResourcesForAuditFindingAsync(string findingId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/relatedResources#findingId?findingId=" + (findingId==null? "" : System.Uri.EscapeDataString(findingId))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRelatedResourcesForAuditFindingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the role aliases registered in your account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListRoleAliases</a> action.</p>
		/// ListRoleAliases role-aliases
		/// </summary>
		/// <param name="pageSize">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="marker">A marker used to get the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="isAscendingOrder">Return the list of role aliases in ascending alphabetical order.</param>
		/// <returns>Success</returns>
		public async Task<ListRoleAliasesResponse> ListRoleAliasesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "role-aliases?pageSize="+pageSize+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRoleAliasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all of your scheduled audits.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListScheduledAudits</a> action.</p>
		/// ListScheduledAudits audit/scheduledaudits
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListScheduledAuditsResponse> ListScheduledAuditsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/scheduledaudits?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListScheduledAuditsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the Device Defender security profiles you've created. You can filter security profiles by dimension or custom metric.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSecurityProfiles</a> action.</p> <note> <p> <code>dimensionName</code> and <code>metricName</code> cannot be used in the same request.</p> </note>
		/// ListSecurityProfiles security-profiles
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="dimensionName">A filter to limit results to the security profiles that use the defined dimension. Cannot be used with <code>metricName</code> 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="metricName"> The name of the custom metric. Cannot be used with <code>dimensionName</code>. 
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSecurityProfilesResponse> ListSecurityProfilesAsync(string nextToken, int maxResults, string dimensionName, string metricName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&dimensionName=" + (dimensionName==null? "" : System.Uri.EscapeDataString(dimensionName))+"&metricName=" + (metricName==null? "" : System.Uri.EscapeDataString(metricName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSecurityProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the Device Defender security profiles attached to a target (thing group).</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSecurityProfilesForTarget</a> action.</p>
		/// ListSecurityProfilesForTarget security-profiles-for-target#securityProfileTargetArn
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="recursive">If true, return child groups too.</param>
		/// <param name="securityProfileTargetArn">The ARN of the target (thing group) whose attached security profiles you want to get.</param>
		/// <returns>Success</returns>
		public async Task<ListSecurityProfilesForTargetResponse> ListSecurityProfilesForTargetAsync(string nextToken, int maxResults, bool recursive, string securityProfileTargetArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles-for-target#securityProfileTargetArn?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&recursive="+recursive+"&securityProfileTargetArn=" + (securityProfileTargetArn==null? "" : System.Uri.EscapeDataString(securityProfileTargetArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSecurityProfilesForTargetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all of the streams in your Amazon Web Services account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListStreams</a> action.</p>
		/// ListStreams streams
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at a time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">A token used to get the next set of results.</param>
		/// <param name="isAscendingOrder">Set to true to return the list of streams in ascending order.</param>
		/// <returns>Success</returns>
		public async Task<ListStreamsResponse> ListStreamsAsync(int maxResults, string nextToken, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "streams?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&isAscendingOrder="+isAscendingOrder;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStreamsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the tags (metadata) you have assigned to the resource.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTagsForResource</a> action.</p>
		/// ListTagsForResource tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource.</param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List targets for the specified policy.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTargetsForPolicy</a> action.</p>
		/// ListTargetsForPolicy policy-targets/{policyName}
		/// </summary>
		/// <param name="policyName">The policy name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="marker">A marker used to get the next set of results.
		/// Max length: 1024
		// </param>
		/// <param name="pageSize">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTargetsForPolicyResponse> ListTargetsForPolicyAsync(string policyName, string marker, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "policy-targets/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker))+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTargetsForPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the targets (thing groups) associated with a given Device Defender security profile.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTargetsForSecurityProfile</a> action.</p>
		/// ListTargetsForSecurityProfile security-profiles/{securityProfileName}/targets
		/// </summary>
		/// <param name="securityProfileName">The security profile.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTargetsForSecurityProfileResponse> ListTargetsForSecurityProfileAsync(string securityProfileName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profiles/"+ (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"/targets&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTargetsForSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List the thing groups in your account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingGroups</a> action.</p>
		/// ListThingGroups thing-groups
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="parentGroup">A filter that limits the results to those with the specified parent group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="namePrefixFilter">A filter that limits the results to those with the specified name prefix.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="recursive">If true, return child groups as well.</param>
		/// <returns>Success</returns>
		public async Task<ListThingGroupsResponse> ListThingGroupsAsync(string nextToken, int maxResults, string parentGroup, string namePrefixFilter, bool recursive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&parentGroup=" + (parentGroup==null? "" : System.Uri.EscapeDataString(parentGroup))+"&namePrefixFilter=" + (namePrefixFilter==null? "" : System.Uri.EscapeDataString(namePrefixFilter))+"&recursive="+recursive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List the thing groups to which the specified thing belongs.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingGroupsForThing</a> action.</p>
		/// ListThingGroupsForThing things/{thingName}/thing-groups
		/// </summary>
		/// <param name="thingName">The thing name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListThingGroupsForThingResponse> ListThingGroupsForThingAsync(string thingName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/thing-groups&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingGroupsForThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingPrincipals</a> action.</p>
		/// ListThingPrincipals things/{thingName}/principals
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="thingName">The name of the thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<ListThingPrincipalsResponse> ListThingPrincipalsAsync(string nextToken, int maxResults, string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/principals?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingPrincipalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Information about the thing registration tasks.
		/// ListThingRegistrationTaskReports thing-registration-tasks/{taskId}/reports#reportType
		/// </summary>
		/// <param name="taskId">The id of the task.
		/// Max length: 40
		// </param>
		/// <param name="reportType">The type of task report.</param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListThingRegistrationTaskReportsResponse> ListThingRegistrationTaskReportsAsync(string taskId, ReportType reportType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-registration-tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/reports#reportType&reportType=" + reportType+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingRegistrationTaskReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List bulk thing provisioning tasks.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingRegistrationTasks</a> action.</p>
		/// ListThingRegistrationTasks thing-registration-tasks
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="status">The status of the bulk thing provisioning task.</param>
		/// <returns>Success</returns>
		public async Task<ListThingRegistrationTasksResponse> ListThingRegistrationTasksAsync(string nextToken, int maxResults, Status status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-registration-tasks?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingRegistrationTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a bulk thing provisioning task.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartThingRegistrationTask</a> action.</p>
		/// StartThingRegistrationTask thing-registration-tasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartThingRegistrationTaskResponse> StartThingRegistrationTaskAsync(StartThingRegistrationTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-registration-tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartThingRegistrationTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the existing thing types.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingTypes</a> action.</p>
		/// ListThingTypes thing-types
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="thingTypeName">The name of the thing type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<ListThingTypesResponse> ListThingTypesAsync(string nextToken, int maxResults, string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-types?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&thingTypeName=" + (thingTypeName==null? "" : System.Uri.EscapeDataString(thingTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/thing-registry.html#list-things">List Things</a> from the <i>Amazon Web Services IoT Core Developer Guide</i>.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThings</a> action.</p> <note> <p>You will not be charged for calling this API if an <code>Access denied</code> error is returned. You will also not be charged if no attributes or pagination token was provided in request and no pagination token and no results were returned.</p> </note>
		/// ListThings things
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="attributeName">The attribute name used to search for things.
		/// Max length: 128
		// </param>
		/// <param name="attributeValue">The attribute value used to search for things.
		/// Max length: 800
		// </param>
		/// <param name="thingTypeName">The name of the thing type used to search for things.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="usePrefixAttributeValue"><p>When <code>true</code>, the action returns the thing resources with attribute values that start with the <code>attributeValue</code> provided.</p> <p>When <code>false</code>, or not present, the action returns only the thing resources with attribute values that match the entire <code>attributeValue</code> provided. </p></param>
		/// <returns>Success</returns>
		public async Task<ListThingsResponse> ListThingsAsync(string nextToken, int maxResults, string attributeName, string attributeValue, string thingTypeName, bool usePrefixAttributeValue, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&attributeName=" + (attributeName==null? "" : System.Uri.EscapeDataString(attributeName))+"&attributeValue=" + (attributeValue==null? "" : System.Uri.EscapeDataString(attributeValue))+"&thingTypeName=" + (thingTypeName==null? "" : System.Uri.EscapeDataString(thingTypeName))+"&usePrefixAttributeValue="+usePrefixAttributeValue;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provisions a thing in the device registry. RegisterThing calls other IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">Amazon Web Services Customer Support</a> to raise your throttling limits if necessary.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RegisterThing</a> action.</p>
		/// RegisterThing things
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterThingResponse> RegisterThingAsync(RegisterThingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the things you have added to the given billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingsInBillingGroup</a> action.</p>
		/// ListThingsInBillingGroup billing-groups/{billingGroupName}/things
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return per request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListThingsInBillingGroupResponse> ListThingsInBillingGroupAsync(string billingGroupName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/"+ (billingGroupName==null? "" : System.Uri.EscapeDataString(billingGroupName))+"/things&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingsInBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the things in the specified group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListThingsInThingGroup</a> action.</p>
		/// ListThingsInThingGroup thing-groups/{thingGroupName}/things
		/// </summary>
		/// <param name="thingGroupName">The thing group name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="recursive">When true, list things in this thing group and in all child groups as well.</param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListThingsInThingGroupResponse> ListThingsInThingGroupAsync(string thingGroupName, bool recursive, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/"+ (thingGroupName==null? "" : System.Uri.EscapeDataString(thingGroupName))+"/things&recursive="+recursive+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThingsInThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the rules for the specific topic.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTopicRules</a> action.</p>
		/// ListTopicRules rules
		/// </summary>
		/// <param name="topic">The topic.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 10000
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="ruleDisabled">Specifies whether the rule is disabled.</param>
		/// <returns>Success</returns>
		public async Task<ListTopicRulesResponse> ListTopicRulesAsync(string topic, int maxResults, string nextToken, bool ruleDisabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rules?topic=" + (topic==null? "" : System.Uri.EscapeDataString(topic))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&ruleDisabled="+ruleDisabled;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTopicRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists logging levels.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListV2LoggingLevels</a> action.</p>
		/// ListV2LoggingLevels v2LoggingLevel
		/// </summary>
		/// <param name="targetType">The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.</param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListV2LoggingLevelsResponse> ListV2LoggingLevelsAsync(LogTargetType targetType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2LoggingLevel?targetType=" + targetType+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListV2LoggingLevelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the logging level.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SetV2LoggingLevel</a> action.</p>
		/// SetV2LoggingLevel v2LoggingLevel
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetV2LoggingLevelAsync(SetV2LoggingLevelPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2LoggingLevel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListViolationEvents</a> action.</p>
		/// ListViolationEvents violation-events#startTime&endTime
		/// </summary>
		/// <param name="startTime">The start time for the alerts to be listed.</param>
		/// <param name="endTime">The end time for the alerts to be listed.</param>
		/// <param name="thingName">A filter to limit results to those alerts caused by the specified thing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="securityProfileName">A filter to limit results to those alerts generated by the specified security profile.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="behaviorCriteriaType"> The criteria for a behavior. </param>
		/// <param name="listSuppressedAlerts"> A list of all suppressed alerts. </param>
		/// <param name="verificationState">The verification state of the violation (detect alarm).</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListViolationEventsResponse> ListViolationEventsAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, string thingName, string securityProfileName, BehaviorCriteriaType behaviorCriteriaType, bool listSuppressedAlerts, VerificationState verificationState, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "violation-events#startTime&endTime?startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&thingName=" + (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"&securityProfileName=" + (securityProfileName==null? "" : System.Uri.EscapeDataString(securityProfileName))+"&behaviorCriteriaType=" + behaviorCriteriaType+"&listSuppressedAlerts="+listSuppressedAlerts+"&verificationState=" + verificationState+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListViolationEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a verification state and provide a description of that verification state on a violation (detect alarm).
		/// PutVerificationStateOnViolation violations/verification-state/{violationId}
		/// </summary>
		/// <param name="violationId">The violation ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<PutVerificationStateOnViolationResponse> PutVerificationStateOnViolationAsync(string violationId, PutVerificationStateOnViolationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "violations/verification-state/"+ (violationId==null? "" : System.Uri.EscapeDataString(violationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVerificationStateOnViolationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a CA certificate with Amazon Web Services IoT Core. There is no limit to the number of CA certificates you can register in your Amazon Web Services account. You can register up to 10 CA certificates with the same <code>CA subject field</code> per Amazon Web Services account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RegisterCACertificate</a> action.</p>
		/// RegisterCACertificate cacertificate
		/// </summary>
		/// <param name="setAsActive"><p>A boolean value that specifies if the CA certificate is set to active.</p> <p>Valid values: <code>ACTIVE | INACTIVE</code> </p></param>
		/// <param name="allowAutoRegistration">Allows this CA certificate to be used for auto registration of device certificates.</param>
		/// <returns>Success</returns>
		public async Task<RegisterCACertificateResponse> RegisterCACertificateAsync(bool setAsActive, bool allowAutoRegistration, RegisterCACertificatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cacertificate?setAsActive="+setAsActive+"&allowAutoRegistration="+allowAutoRegistration;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterCACertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a device certificate with IoT in the same <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode">certificate mode</a> as the signing CA. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RegisterCertificate</a> action.</p>
		/// RegisterCertificate certificate/register
		/// </summary>
		/// <param name="setAsActive"><p>A boolean value that specifies if the certificate is set to active.</p> <p>Valid values: <code>ACTIVE | INACTIVE</code> </p></param>
		/// <returns>Success</returns>
		public async Task<RegisterCertificateResponse> RegisterCertificateAsync(bool setAsActive, RegisterCertificatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificate/register?setAsActive="+setAsActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register a certificate that does not have a certificate authority (CA). For supported certificates, consult <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html#x509-cert-algorithms"> Certificate signing algorithms supported by IoT</a>.
		/// RegisterCertificateWithoutCA certificate/register-no-ca
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterCertificateWithoutCAResponse> RegisterCertificateWithoutCAAsync(RegisterCertificateWithoutCAPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificate/register-no-ca";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterCertificateWithoutCAResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Rejects a pending certificate transfer. After IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RejectCertificateTransfer</a> action.</p>
		/// RejectCertificateTransfer reject-certificate-transfer/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task RejectCertificateTransferAsync(string certificateId, RejectCertificateTransferPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reject-certificate-transfer/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the given thing from the billing group.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RemoveThingFromBillingGroup</a> action.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
		/// RemoveThingFromBillingGroup billing-groups/removeThingFromBillingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveThingFromBillingGroupResponse> RemoveThingFromBillingGroupAsync(RemoveThingFromBillingGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billing-groups/removeThingFromBillingGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveThingFromBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Remove the specified thing from the specified group.</p> <p>You must specify either a <code>thingGroupArn</code> or a <code>thingGroupName</code> to identify the thing group and either a <code>thingArn</code> or a <code>thingName</code> to identify the thing to remove from the thing group. </p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RemoveThingFromThingGroup</a> action.</p>
		/// RemoveThingFromThingGroup thing-groups/removeThingFromThingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveThingFromThingGroupResponse> RemoveThingFromThingGroupAsync(RemoveThingFromThingGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/removeThingFromThingGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveThingFromThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>The query search index.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SearchIndex</a> action.</p>
		/// SearchIndex indices/search
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SearchIndexResponse> SearchIndexAsync(SearchIndexPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "indices/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an on-demand Device Defender audit.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartOnDemandAuditTask</a> action.</p>
		/// StartOnDemandAuditTask audit/tasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOnDemandAuditTaskResponse> StartOnDemandAuditTaskAsync(StartOnDemandAuditTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartOnDemandAuditTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels a bulk thing provisioning task.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StopThingRegistrationTask</a> action.</p>
		/// StopThingRegistrationTask thing-registration-tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId">The bulk thing provisioning task ID.
		/// Max length: 40
		// </param>
		/// <returns>Success</returns>
		public async Task<StopThingRegistrationTaskResponse> StopThingRegistrationTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-registration-tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopThingRegistrationTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TagResource</a> action.</p>
		/// TagResource tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Tests if a specified principal is authorized to perform an IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the IoT device gateway.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TestAuthorization</a> action.</p>
		/// TestAuthorization test-authorization
		/// </summary>
		/// <param name="clientId">The MQTT client ID.</param>
		/// <returns>Success</returns>
		public async Task<TestAuthorizationResponse> TestAuthorizationAsync(string clientId, TestAuthorizationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test-authorization?clientId=" + (clientId==null? "" : System.Uri.EscapeDataString(clientId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAuthorizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the IoT device gateway.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TestInvokeAuthorizer</a> action.</p>
		/// TestInvokeAuthorizer authorizer/{authorizerName}/test
		/// </summary>
		/// <param name="authorizerName">The custom authorizer name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<TestInvokeAuthorizerResponse> TestInvokeAuthorizerAsync(string authorizerName, TestInvokeAuthorizerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizer/"+ (authorizerName==null? "" : System.Uri.EscapeDataString(authorizerName))+"/test";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestInvokeAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Transfers the specified certificate to the specified Amazon Web Services account.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TransferCertificate</a> action.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the <a>UpdateCertificate</a> action to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the <a>DetachPolicy</a> action to detach them.</p>
		/// TransferCertificate transfer-certificate/{certificateId}#targetAwsAccount
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="targetAwsAccount">The Amazon Web Services account.
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <returns>Success</returns>
		public async Task<TransferCertificateResponse> TransferCertificateAsync(string certificateId, string targetAwsAccount, TransferCertificatePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transfer-certificate/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId))+"#targetAwsAccount&targetAwsAccount=" + (targetAwsAccount==null? "" : System.Uri.EscapeDataString(targetAwsAccount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the given tags (metadata) from the resource.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UntagResource</a> action.</p>
		/// UntagResource untag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "untag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a Device Defender audit suppression.
		/// UpdateAuditSuppression audit/suppressions/update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAuditSuppressionResponse> UpdateAuditSuppressionAsync(UpdateAuditSuppressionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/suppressions/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAuditSuppressionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateCertificate</a> action.</p> <p>Certificates must be in the ACTIVE state to authenticate devices that use a certificate to connect to IoT.</p> <p>Within a few minutes of updating a certificate from the ACTIVE state to any other state, IoT disconnects all devices that used that certificate to connect. Devices cannot use a certificate that is not in the ACTIVE state to reconnect.</p>
		/// UpdateCertificate certificates/{certificateId}#newStatus
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
		/// Min length: 64
		/// Max length: 64
		// </param>
		/// <param name="newStatus"><p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER or PENDING_ACTIVATION will result in an exception being thrown. PENDING_TRANSFER and PENDING_ACTIVATION are statuses used internally by IoT. They are not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p></param>
		/// <returns>Success</returns>
		public async Task UpdateCertificateAsync(string certificateId, CertificateStatus newStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates/"+ (certificateId==null? "" : System.Uri.EscapeDataString(certificateId))+"#newStatus&newStatus=" + newStatus;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the groups to which the thing belongs.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateThingGroupsForThing</a> action.</p>
		/// UpdateThingGroupsForThing thing-groups/updateThingGroupsForThing
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateThingGroupsForThingResponse> UpdateThingGroupsForThingAsync(UpdateThingGroupsForThingPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "thing-groups/updateThingGroupsForThing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateThingGroupsForThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Validates a Device Defender security profile behaviors specification.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ValidateSecurityProfileBehaviors</a> action.</p>
		/// ValidateSecurityProfileBehaviors security-profile-behaviors/validate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ValidateSecurityProfileBehaviorsResponse> ValidateSecurityProfileBehaviorsAsync(ValidateSecurityProfileBehaviorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "security-profile-behaviors/validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ValidateSecurityProfileBehaviorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AddThingToBillingGroupPutBody
	{
		
		/// <summary>
		/// <p>The name of the billing group.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string BillingGroupName { get; set; }
		
		/// <summary>
		/// The ARN of the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingGroupArn")]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to be added to the billing group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to be added to the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
	}
	
	public class AddThingToThingGroupPutBody
	{
		
		/// <summary>
		/// The name of the group to which you are adding a thing.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingGroupName { get; set; }
		
		/// <summary>
		/// The ARN of the group to which you are adding a thing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to add to a group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to add to a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		/// <summary>
		/// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideDynamicGroups")]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	public class AssociateTargetsWithJobPostBody
	{
		
		/// <summary>
		/// A list of thing group ARNs that define the targets of the job.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Targets { get; set; }
		
		/// <summary>
		/// An optional comment string describing why the job was associated with the targets.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Comment { get; set; }
	}
	
	public class AttachPolicyPutBody
	{
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/iot/latest/developerguide/security-iam.html">identity</a> to which the policy is attached. For example, a thing group or a certificate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	public class DetachPolicyPostBody
	{
		
		/// <summary>
		/// The target from which the policy will be detached.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	public class CancelJobPutBody
	{
		
		/// <summary>
		/// (Optional)A reason code string that explains why the job was canceled.
		/// Max length: 128
		/// Pattern: [\p{Upper}\p{Digit}_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Upper}\p{Digit}_]+")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// An optional comment string describing why the job was canceled.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Comment { get; set; }
	}
	
	public class CancelJobExecutionPutBody
	{
		
		/// <summary>
		/// (Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		/// <summary>
		/// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public System.Collections.Generic.Dictionary<string, string> StatusDetails { get; set; }
	}
	
	public class SetDefaultAuthorizerPostBody
	{
		
		/// <summary>
		/// The authorizer name.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizerName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w=,@-]+")]
		public string AuthorizerName { get; set; }
	}
	
	public class CreateAuditSuppressionPostBody
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public CreateAuditSuppressionPostBodyResourceIdentifier ResourceIdentifier { get; set; }
		
		/// <summary>
		///  The epoch timestamp in seconds at which this suppression expires. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		///  Indicates whether a suppression should exist indefinitely or not. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressIndefinitely")]
		public System.Nullable<System.Boolean> SuppressIndefinitely { get; set; }
		
		/// <summary>
		///  The description of the audit suppression. 
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string Description { get; set; }
		
		/// <summary>
		///  Each audit supression must have a unique client request token. If you try to create a new audit suppression with the same token as one that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateAuditSuppressionPostBodyResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	public class CreateAuthorizerPostBody
	{
		
		/// <summary>
		/// The ARN of the authorizer's Lambda function.
		/// Required
		/// Max length: 2048
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizerFunctionArn")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// The name of the token key used to extract the token from the HTTP headers.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenKeyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9_-]+")]
		public string TokenKeyName { get; set; }
		
		/// <summary>
		/// The public keys used to verify the digital signature returned by your custom authentication service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenSigningPublicKeys")]
		public System.Collections.Generic.Dictionary<string, string> TokenSigningPublicKeys { get; set; }
		
		/// <summary>
		/// The status of the create authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the custom authorizer.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Specifies whether IoT validates the token signature in an authorization request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingDisabled")]
		public System.Nullable<System.Boolean> SigningDisabled { get; set; }
		
		/// <summary>
		/// <p>When <code>true</code>, the result from the authorizer’s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in <code>refreshAfterInSeconds</code>. This value does not affect authorization of clients that use MQTT connections.</p> <p>The default value is <code>false</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCachingForHttp")]
		public System.Nullable<System.Boolean> EnableCachingForHttp { get; set; }
	}
	
	public class UpdateAuthorizerPutBody
	{
		
		/// <summary>
		/// The ARN of the authorizer's Lambda function.
		/// Max length: 2048
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerFunctionArn")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// The key used to extract the token from the HTTP headers. 
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenKeyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9_-]+")]
		public string TokenKeyName { get; set; }
		
		/// <summary>
		/// The public keys used to verify the token signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenSigningPublicKeys")]
		public System.Collections.Generic.Dictionary<string, string> TokenSigningPublicKeys { get; set; }
		
		/// <summary>
		/// The status of the update authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizerStatus Status { get; set; }
		
		/// <summary>
		/// When <code>true</code>, the result from the authorizer’s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCachingForHttp")]
		public System.Nullable<System.Boolean> EnableCachingForHttp { get; set; }
	}
	
	public class CreateBillingGroupPostBody
	{
		
		/// <summary>
		/// The properties of a billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingGroupProperties")]
		public CreateBillingGroupPostBodyBillingGroupProperties BillingGroupProperties { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateBillingGroupPostBodyBillingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupDescription")]
		public string BillingGroupDescription { get; set; }
	}
	
	public class UpdateBillingGroupPatchBody
	{
		
		/// <summary>
		/// The properties of a billing group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingGroupProperties")]
		public UpdateBillingGroupPatchBodyBillingGroupProperties BillingGroupProperties { get; set; }
		
		/// <summary>
		/// The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>UpdateBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	public class UpdateBillingGroupPatchBodyBillingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingGroupDescription")]
		public string BillingGroupDescription { get; set; }
	}
	
	public class CreateCertificateFromCsrPostBody
	{
		
		/// <summary>
		/// The certificate signing request (CSR).
		/// Required
		/// Min length: 1
		/// Max length: 4096
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateSigningRequest")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CertificateSigningRequest { get; set; }
	}
	
	public class CreateCustomMetricPostBody
	{
		
		/// <summary>
		///  The friendly name in the console for the custom metric. This name doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. You can update the friendly name after you define it.
		/// Max length: 128
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// <p> The type of the custom metric. </p> <important> <p>The type <code>number</code> only takes a single metric value as an input, but when you submit the metrics value in the DeviceMetrics report, you must pass it as an array with a single value.</p> </important>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricType")]
		public CreateCustomMetricPostBodyMetricType MetricType { get; set; }
		
		/// <summary>
		///  Metadata that can be used to manage the custom metric. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each custom metric must have a unique client request token. If you try to create a new custom metric that already exists with a different token, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request. 
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateCustomMetricPostBodyMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string-list")]
		stringMinuslist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ip-address-list")]
		ipMinusaddressMinuslist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number-list")]
		numberMinuslist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number")]
		number = 3,
	}
	
	public class UpdateCustomMetricPatchBody
	{
		
		/// <summary>
		///  Field represents a friendly name in the console for the custom metric, it doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. Can be updated. 
		/// Required
		/// Max length: 128
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string DisplayName { get; set; }
	}
	
	public class CreateDimensionPostBody
	{
		
		/// <summary>
		/// Specifies the type of dimension. Supported types: <code>TOPIC_FILTER.</code> 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DimensionType Type { get; set; }
		
		/// <summary>
		/// Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] StringValues { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each dimension must have a unique client request token. If you try to create a new dimension with the same token as a dimension that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class UpdateDimensionPatchBody
	{
		
		/// <summary>
		/// Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] StringValues { get; set; }
	}
	
	public class CreateDomainConfigurationPostBody
	{
		
		/// <summary>
		/// The name of the domain.
		/// Min length: 1
		/// Max length: 253
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(253)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCertificateArns")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] ServerCertificateArns { get; set; }
		
		/// <summary>
		/// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
		/// Min length: 1
		/// Max length: 2048
		/// Pattern: arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationCertificateArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+")]
		public string ValidationCertificateArn { get; set; }
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerConfig")]
		public CreateDomainConfigurationPostBodyAuthorizerConfig AuthorizerConfig { get; set; }
		
		/// <summary>
		/// <p>The type of service delivered by the endpoint.</p> <note> <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceType")]
		public ServiceType ServiceType { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the domain configuration.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// An object that specifies the TLS configuration for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public CreateDomainConfigurationPostBodyTlsConfig TlsConfig { get; set; }
	}
	
	public class CreateDomainConfigurationPostBodyAuthorizerConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultAuthorizerName")]
		public string DefaultAuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowAuthorizerOverride")]
		public System.Nullable<System.Boolean> AllowAuthorizerOverride { get; set; }
	}
	
	public class CreateDomainConfigurationPostBodyTlsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityPolicy")]
		public string SecurityPolicy { get; set; }
	}
	
	public class UpdateDomainConfigurationPutBody
	{
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerConfig")]
		public UpdateDomainConfigurationPutBodyAuthorizerConfig AuthorizerConfig { get; set; }
		
		/// <summary>
		/// The status to which the domain configuration should be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainConfigurationStatus")]
		public DomainConfigurationStatus DomainConfigurationStatus { get; set; }
		
		/// <summary>
		/// Removes the authorization configuration from a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeAuthorizerConfig")]
		public System.Nullable<System.Boolean> RemoveAuthorizerConfig { get; set; }
		
		/// <summary>
		/// An object that specifies the TLS configuration for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public UpdateDomainConfigurationPutBodyTlsConfig TlsConfig { get; set; }
	}
	
	public class UpdateDomainConfigurationPutBodyAuthorizerConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultAuthorizerName")]
		public string DefaultAuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowAuthorizerOverride")]
		public System.Nullable<System.Boolean> AllowAuthorizerOverride { get; set; }
	}
	
	public class UpdateDomainConfigurationPutBodyTlsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="securityPolicy")]
		public string SecurityPolicy { get; set; }
	}
	
	public class CreateDynamicThingGroupPostBody
	{
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public CreateDynamicThingGroupPostBodyThingGroupProperties ThingGroupProperties { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group index name.</p> <note> <p>Currently one index is supported: <code>AWS_Things</code>.</p> </note>
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group search query string.</p> <p>See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query Syntax</a> for information about query string syntax.</p>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group query version.</p> <note> <p>Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the dynamic thing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateDynamicThingGroupPostBodyThingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupDescription")]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
	}
	
	public class UpdateDynamicThingGroupPatchBody
	{
		
		/// <summary>
		/// Thing group properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public UpdateDynamicThingGroupPatchBodyThingGroupProperties ThingGroupProperties { get; set; }
		
		/// <summary>
		/// The expected version of the dynamic thing group to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group index to update.</p> <note> <p>Currently one index is supported: <code>AWS_Things</code>.</p> </note>
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The dynamic thing group search query string to update.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group query version to update.</p> <note> <p>Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	public class UpdateDynamicThingGroupPatchBodyThingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupDescription")]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
	}
	
	public class CreateFleetMetricPutBody
	{
		
		/// <summary>
		/// The search query string.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The type of aggregation queries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public CreateFleetMetricPutBodyAggregationType AggregationType { get; set; }
		
		/// <summary>
		/// The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1 day)] and must be multiple of 60.
		/// Required
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int Period { get; set; }
		
		/// <summary>
		/// The field to aggregate.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The fleet metric description.
		/// Max length: 1024
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// The name of the index to search.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Used to support unit transformation such as milliseconds to seconds. The unit must be supported by <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html">CW metric</a>. Default to null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<CreateFleetMetricPutBodyUnit> Unit { get; set; }
		
		/// <summary>
		/// Metadata, which can be used to manage the fleet metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateFleetMetricPutBodyAggregationType
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AggregationTypeName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateFleetMetricPutBodyUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	public class UpdateFleetMetricPatchBody
	{
		
		/// <summary>
		/// The search query string.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The type of aggregation queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public UpdateFleetMetricPatchBodyAggregationType AggregationType { get; set; }
		
		/// <summary>
		/// The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1 day)] and must be multiple of 60.
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public System.Nullable<System.Int32> Period { get; set; }
		
		/// <summary>
		/// The field to aggregate.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The description of the fleet metric.
		/// Max length: 1024
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The version of the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// The name of the index to search.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Used to support unit transformation such as milliseconds to seconds. The unit must be supported by <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html">CW metric</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<UpdateFleetMetricPatchBodyUnit> Unit { get; set; }
		
		/// <summary>
		/// The expected version of the fleet metric record in the registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	public class UpdateFleetMetricPatchBodyAggregationType
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AggregationTypeName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateFleetMetricPatchBodyUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	public class CreateJobPutBody
	{
		
		/// <summary>
		/// A list of things and thing groups to which the job should be sent.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Targets { get; set; }
		
		/// <summary>
		/// <p>An S3 link, or S3 object URL, to the job document. The link is an Amazon S3 object URL and is required if you don't specify a value for <code>document</code>.</p> <p>For example, <code>--document-source https://s3.<i>region-code</i>.amazonaws.com/example-firmware/device-firmware.1.0</code> </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html">Methods for accessing a bucket</a>.</p>
		/// Min length: 1
		/// Max length: 1350
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentSource")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1350)]
		public string DocumentSource { get; set; }
		
		/// <summary>
		/// The job document. Required if you don't specify a value for <code>documentSource</code>.
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		[System.ComponentModel.DataAnnotations.MaxLength(32768)]
		public string Document { get; set; }
		
		/// <summary>
		/// A short text description of the job.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public CreateJobPutBodyPresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.</p> <note> <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public CreateJobPutBodyJobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// The criteria that determine when and how a job abort takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public CreateJobPutBodyAbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public CreateJobPutBodyTimeoutConfig TimeoutConfig { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// <p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note>
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9_-]+")]
		public string NamespaceId { get; set; }
		
		/// <summary>
		/// The ARN of the job template used to create the job.
		/// Min length: 1
		/// Max length: 1600
		/// Pattern: ^arn:[!-~]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTemplateArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[!-~]+$")]
		public string JobTemplateArn { get; set; }
		
		/// <summary>
		/// The configuration that determines how many retries are allowed for each failure type for a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public CreateJobPutBodyJobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
		
		/// <summary>
		/// <p>Parameters of an Amazon Web Services managed template that you can specify to create the job document.</p> <note> <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentParameters")]
		public System.Collections.Generic.Dictionary<string, string> DocumentParameters { get; set; }
		
		/// <summary>
		/// Specifies the date and time that a job will begin the rollout of the job document to all devices in the target group. Additionally, you can specify the end behavior for each job execution when it reaches the scheduled end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingConfig")]
		public CreateJobPutBodySchedulingConfig SchedulingConfig { get; set; }
		
		/// <summary>
		/// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p> <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationPackageVersions")]
		public string[] DestinationPackageVersions { get; set; }
	}
	
	public class CreateJobPutBodyPresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresInSec")]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	public class CreateJobPutBodyJobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public ExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	public class CreateJobPutBodyAbortConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public AbortCriteria[] CriteriaList { get; set; }
	}
	
	public class CreateJobPutBodyTimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	public class CreateJobPutBodyJobExecutionsRetryConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public RetryCriteria[] CriteriaList { get; set; }
	}
	
	public class CreateJobPutBodySchedulingConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endBehavior")]
		public JobEndBehavior EndBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindows")]
		public MaintenanceWindow[] MaintenanceWindows { get; set; }
	}
	
	public class UpdateJobPatchBody
	{
		
		/// <summary>
		/// A short text description of the job.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public UpdateJobPatchBodyPresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public UpdateJobPatchBodyJobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// The criteria that determine when and how a job abort takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public UpdateJobPatchBodyAbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public UpdateJobPatchBodyTimeoutConfig TimeoutConfig { get; set; }
		
		/// <summary>
		/// The configuration that determines how many retries are allowed for each failure type for a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public UpdateJobPatchBodyJobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
	}
	
	public class UpdateJobPatchBodyPresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresInSec")]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	public class UpdateJobPatchBodyJobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public ExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	public class UpdateJobPatchBodyAbortConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public AbortCriteria[] CriteriaList { get; set; }
	}
	
	public class UpdateJobPatchBodyTimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	public class UpdateJobPatchBodyJobExecutionsRetryConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public RetryCriteria[] CriteriaList { get; set; }
	}
	
	public class CreateJobTemplatePutBody
	{
		
		/// <summary>
		/// The ARN of the job to use as the basis for the job template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		/// <summary>
		/// <p>An S3 link to the job document to use in the template. Required if you don't specify a value for <code>document</code>.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>
		/// Min length: 1
		/// Max length: 1350
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentSource")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1350)]
		public string DocumentSource { get; set; }
		
		/// <summary>
		/// The job document. Required if you don't specify a value for <code>documentSource</code>.
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		[System.ComponentModel.DataAnnotations.MaxLength(32768)]
		public string Document { get; set; }
		
		/// <summary>
		/// A description of the job document.
		/// Required
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presignedUrlConfig")]
		public CreateJobTemplatePutBodyPresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRolloutConfig")]
		public CreateJobTemplatePutBodyJobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// The criteria that determine when and how a job abort takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortConfig")]
		public CreateJobTemplatePutBodyAbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutConfig")]
		public CreateJobTemplatePutBodyTimeoutConfig TimeoutConfig { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the job template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The configuration that determines how many retries are allowed for each failure type for a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExecutionsRetryConfig")]
		public CreateJobTemplatePutBodyJobExecutionsRetryConfig JobExecutionsRetryConfig { get; set; }
		
		/// <summary>
		/// Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindows")]
		public MaintenanceWindow[] MaintenanceWindows { get; set; }
		
		/// <summary>
		/// <p>The package version Amazon Resource Names (ARNs) that are installed on the device when the job successfully completes. </p> <p> <b>Note:</b>The following Length Constraints relates to a single string. Up to five strings are allowed.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationPackageVersions")]
		public string[] DestinationPackageVersions { get; set; }
	}
	
	public class CreateJobTemplatePutBodyPresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresInSec")]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	public class CreateJobTemplatePutBodyJobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public ExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	public class CreateJobTemplatePutBodyAbortConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public AbortCriteria[] CriteriaList { get; set; }
	}
	
	public class CreateJobTemplatePutBodyTimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	public class CreateJobTemplatePutBodyJobExecutionsRetryConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="criteriaList")]
		public RetryCriteria[] CriteriaList { get; set; }
	}
	
	public class CreateMitigationActionPostBody
	{
		
		/// <summary>
		/// The ARN of the IAM role that is used to apply the mitigation action.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionParams")]
		public CreateMitigationActionPostBodyActionParams ActionParams { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the mitigation action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateMitigationActionPostBodyActionParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="updateDeviceCertificateParams")]
		public UpdateDeviceCertificateParams UpdateDeviceCertificateParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateCACertificateParams")]
		public UpdateCACertificateParams UpdateCACertificateParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addThingsToThingGroupParams")]
		public AddThingsToThingGroupParams AddThingsToThingGroupParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replaceDefaultPolicyVersionParams")]
		public ReplaceDefaultPolicyVersionParams ReplaceDefaultPolicyVersionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableIoTLoggingParams")]
		public EnableIoTLoggingParams EnableIoTLoggingParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishFindingToSnsParams")]
		public PublishFindingToSnsParams PublishFindingToSnsParams { get; set; }
	}
	
	public class UpdateMitigationActionPatchBody
	{
		
		/// <summary>
		/// The ARN of the IAM role that is used to apply the mitigation action.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionParams")]
		public UpdateMitigationActionPatchBodyActionParams ActionParams { get; set; }
	}
	
	public class UpdateMitigationActionPatchBodyActionParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="updateDeviceCertificateParams")]
		public UpdateDeviceCertificateParams UpdateDeviceCertificateParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateCACertificateParams")]
		public UpdateCACertificateParams UpdateCACertificateParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addThingsToThingGroupParams")]
		public AddThingsToThingGroupParams AddThingsToThingGroupParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replaceDefaultPolicyVersionParams")]
		public ReplaceDefaultPolicyVersionParams ReplaceDefaultPolicyVersionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableIoTLoggingParams")]
		public EnableIoTLoggingParams EnableIoTLoggingParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishFindingToSnsParams")]
		public PublishFindingToSnsParams PublishFindingToSnsParams { get; set; }
	}
	
	public class CreateOTAUpdatePostBody
	{
		
		/// <summary>
		/// The description of the OTA update.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// The devices targeted to receive OTA updates.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Targets { get; set; }
		
		/// <summary>
		/// The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are specified, the target device can choose the protocol.
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Protocol[] Protocols { get; set; }
		
		/// <summary>
		/// Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSelection")]
		public TargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Configuration for the rollout of OTA updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsJobExecutionsRolloutConfig")]
		public CreateOTAUpdatePostBodyAwsJobExecutionsRolloutConfig AwsJobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsJobPresignedUrlConfig")]
		public CreateOTAUpdatePostBodyAwsJobPresignedUrlConfig AwsJobPresignedUrlConfig { get; set; }
		
		/// <summary>
		/// The criteria that determine when and how a job abort takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsJobAbortConfig")]
		public CreateOTAUpdatePostBodyAwsJobAbortConfig AwsJobAbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsJobTimeoutConfig")]
		public CreateOTAUpdatePostBodyAwsJobTimeoutConfig AwsJobTimeoutConfig { get; set; }
		
		/// <summary>
		/// The files to be streamed by the OTA update.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OTAUpdateFile[] Files { get; set; }
		
		/// <summary>
		/// The IAM role that grants Amazon Web Services IoT Core access to the Amazon S3, IoT jobs and Amazon Web Services Code Signing resources to create an OTA update job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A list of additional OTA update parameters which are name-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalParameters")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalParameters { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateOTAUpdatePostBodyAwsJobExecutionsRolloutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumPerMinute")]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exponentialRate")]
		public AwsJobExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	public class CreateOTAUpdatePostBodyAwsJobPresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiresInSec")]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	public class CreateOTAUpdatePostBodyAwsJobAbortConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="abortCriteriaList")]
		public AwsJobAbortCriteria[] AbortCriteriaList { get; set; }
	}
	
	public class CreateOTAUpdatePostBodyAwsJobTimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressTimeoutInMinutes")]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	public class CreatePackagePutBody
	{
		
		/// <summary>
		/// A summary of the package being created. This can be used to outline the package's contents or purpose.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdatePackagePatchBody
	{
		
		/// <summary>
		/// The package description.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The name of the default package version.</p> <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [a-zA-Z0-9-_.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVersionName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_.]+")]
		public string DefaultVersionName { get; set; }
		
		/// <summary>
		/// <p>Indicates whether you want to remove the named default package version from the software package. Set as <code>true</code> to remove the default package version. </p> <p> <b>Note:</b> You cannot name a <code>defaultVersion</code> and set <code>unsetDefaultVersion</code> equal to <code>true</code> at the same time.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsetDefaultVersion")]
		public System.Nullable<System.Boolean> UnsetDefaultVersion { get; set; }
	}
	
	public class CreatePackageVersionPutBody
	{
		
		/// <summary>
		/// A summary of the package version being created. This can be used to outline the package's contents or purpose.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>Metadata that can be used to define a package version’s configuration. For example, the S3 file location, configuration options that are being sent to the device or fleet.</p> <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the package version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdatePackageVersionPatchBody
	{
		
		/// <summary>
		/// The package version description.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>Metadata that can be used to define a package version’s configuration. For example, the S3 file location, configuration options that are being sent to the device or fleet. </p> <p> <b>Note:</b> Attributes can be updated only when the package version is in a draft state.</p> <p>The combined size of all the attributes on a package version is limited to 3KB.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// The status that the package version should be assigned. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle">Package version lifecycle</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public PackageVersionAction Action { get; set; }
	}
	
	public class CreatePolicyPostBody
	{
		
		/// <summary>
		/// The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.
		/// Required
		/// Min length: 0
		/// Max length: 404600
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(404600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the policy.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreatePolicyVersionPostBody
	{
		
		/// <summary>
		/// The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace.
		/// Required
		/// Min length: 0
		/// Max length: 404600
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(404600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string PolicyDocument { get; set; }
	}
	
	public class CreateProvisioningTemplatePostBody
	{
		
		/// <summary>
		/// The name of the provisioning template.
		/// Required
		/// Min length: 1
		/// Max length: 36
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9A-Za-z_-]+$")]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// The description of the provisioning template.
		/// Min length: 0
		/// Max length: 500
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The JSON formatted contents of the provisioning template.
		/// Required
		/// Min length: 0
		/// Max length: 10240
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10240)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// True to enable the provisioning template, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provisioningRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ProvisioningRoleArn { get; set; }
		
		/// <summary>
		/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preProvisioningHook")]
		public CreateProvisioningTemplatePostBodyPreProvisioningHook PreProvisioningHook { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the provisioning template.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TemplateType Type { get; set; }
	}
	
	public class CreateProvisioningTemplatePostBodyPreProvisioningHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="payloadVersion")]
		public string PayloadVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
	}
	
	public class CreateProvisioningTemplateVersionPostBody
	{
		
		/// <summary>
		/// The JSON formatted contents of the provisioning template.
		/// Required
		/// Min length: 0
		/// Max length: 10240
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10240)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TemplateBody { get; set; }
	}
	
	public class CreateRoleAliasPostBody
	{
		
		/// <summary>
		/// The role ARN.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// <p>How long (in seconds) the credentials will be valid. The default value is 3,600 seconds.</p> <p>This value must be less than or equal to the maximum session duration of the IAM role that the role alias references.</p>
		/// Minimum: 900
		/// Maximum: 43200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(900, 43200)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the role alias.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateRoleAliasPutBody
	{
		
		/// <summary>
		/// The role ARN.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// <p>The number of seconds the credential will be valid.</p> <p>This value must be less than or equal to the maximum session duration of the IAM role that the role alias references.</p>
		/// Minimum: 900
		/// Maximum: 43200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(900, 43200)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
	}
	
	public class CreateScheduledAuditPostBody
	{
		
		/// <summary>
		/// How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code> or <code>MONTHLY</code>. The start time of each audit is determined by the system.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AuditFrequency Frequency { get; set; }
		
		/// <summary>
		/// The day of the month on which the scheduled audit takes place. This can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to <code>MONTHLY</code>. If days 29 to 31 are specified, and the month doesn't have that many days, the audit takes place on the <code>LAST</code> day of the month.
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([1-9]|[12][0-9]|3[01])$|^LAST$")]
		public string DayOfMonth { get; set; }
		
		/// <summary>
		/// The day of the week on which the scheduled audit takes place, either <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the <code>frequency</code> parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public DayOfWeek DayOfWeek { get; set; }
		
		/// <summary>
		/// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the scheduled audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateScheduledAuditPatchBody
	{
		
		/// <summary>
		/// How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code>, or <code>MONTHLY</code>. The start time of each audit is determined by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AuditFrequency Frequency { get; set; }
		
		/// <summary>
		/// The day of the month on which the scheduled audit takes place. This can be <code>1</code> through <code>31</code> or <code>LAST</code>. This field is required if the <code>frequency</code> parameter is set to <code>MONTHLY</code>. If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([1-9]|[12][0-9]|3[01])$|^LAST$")]
		public string DayOfMonth { get; set; }
		
		/// <summary>
		/// The day of the week on which the scheduled audit takes place. This can be one of <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the "frequency" parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public DayOfWeek DayOfWeek { get; set; }
		
		/// <summary>
		/// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
	}
	
	public class CreateSecurityProfilePostBody
	{
		
		/// <summary>
		/// A description of the security profile.
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityProfileDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Specifies the behaviors that, when violated by a device (thing), cause an alert.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		/// <summary>
		/// Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertTargets")]
		public System.Collections.Generic.Dictionary<string, AlertTarget> AlertTargets { get; set; }
		
		/// <summary>
		/// <p> <i>Please use <a>CreateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</i> </p> <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetain")]
		public string[] AdditionalMetricsToRetain { get; set; }
		
		/// <summary>
		/// A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetainV2")]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the security profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateSecurityProfilePatchBody
	{
		
		/// <summary>
		/// A description of the security profile.
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityProfileDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Specifies the behaviors that, when violated by a device (thing), cause an alert.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		/// <summary>
		/// Where the alerts are sent. (Alerts are always sent to the console.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertTargets")]
		public System.Collections.Generic.Dictionary<string, AlertTarget> AlertTargets { get; set; }
		
		/// <summary>
		/// <p> <i>Please use <a>UpdateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</i> </p> <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetain")]
		public string[] AdditionalMetricsToRetain { get; set; }
		
		/// <summary>
		/// A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's behaviors, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalMetricsToRetainV2")]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		/// <summary>
		/// If true, delete all <code>behaviors</code> defined for this security profile. If any <code>behaviors</code> are defined in the current invocation, an exception occurs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteBehaviors")]
		public System.Nullable<System.Boolean> DeleteBehaviors { get; set; }
		
		/// <summary>
		/// If true, delete all <code>alertTargets</code> defined for this security profile. If any <code>alertTargets</code> are defined in the current invocation, an exception occurs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteAlertTargets")]
		public System.Nullable<System.Boolean> DeleteAlertTargets { get; set; }
		
		/// <summary>
		/// If true, delete all <code>additionalMetricsToRetain</code> defined for this security profile. If any <code>additionalMetricsToRetain</code> are defined in the current invocation, an exception occurs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteAdditionalMetricsToRetain")]
		public System.Nullable<System.Boolean> DeleteAdditionalMetricsToRetain { get; set; }
	}
	
	public class CreateStreamPostBody
	{
		
		/// <summary>
		/// A description of the stream.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// The files to stream.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// An IAM role that allows the IoT service principal to access your S3 files.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateStreamPutBody
	{
		
		/// <summary>
		/// The description of the stream.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2028)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// The files associated with the stream.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// An IAM role that allows the IoT service principal assumes to access your S3 files.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
	}
	
	public class CreateThingPostBody
	{
		
		/// <summary>
		/// The name of the thing type associated with the new thing.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingTypeName { get; set; }
		
		/// <summary>
		/// The attribute payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public CreateThingPostBodyAttributePayload AttributePayload { get; set; }
		
		/// <summary>
		/// The name of the billing group the thing will be added to.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string BillingGroupName { get; set; }
	}
	
	public class CreateThingPostBodyAttributePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merge")]
		public System.Nullable<System.Boolean> Merge { get; set; }
	}
	
	public class UpdateThingPatchBody
	{
		
		/// <summary>
		/// The name of the thing type.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingTypeName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingTypeName { get; set; }
		
		/// <summary>
		/// The attribute payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public UpdateThingPatchBodyAttributePayload AttributePayload { get; set; }
		
		/// <summary>
		/// The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		/// <summary>
		/// Remove a thing type association. If <b>true</b>, the association is removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeThingType")]
		public System.Nullable<System.Boolean> RemoveThingType { get; set; }
	}
	
	public class UpdateThingPatchBodyAttributePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merge")]
		public System.Nullable<System.Boolean> Merge { get; set; }
	}
	
	public class CreateThingGroupPostBody
	{
		
		/// <summary>
		/// The name of the parent thing group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ParentGroupName { get; set; }
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public CreateThingGroupPostBodyThingGroupProperties ThingGroupProperties { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the thing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateThingGroupPostBodyThingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupDescription")]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
	}
	
	public class UpdateThingGroupPatchBody
	{
		
		/// <summary>
		/// Thing group properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingGroupProperties")]
		public UpdateThingGroupPatchBodyThingGroupProperties ThingGroupProperties { get; set; }
		
		/// <summary>
		/// The expected version of the thing group. If this does not match the version of the thing group being updated, the update will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	public class UpdateThingGroupPatchBodyThingGroupProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupDescription")]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributePayload")]
		public AttributePayload AttributePayload { get; set; }
	}
	
	public class CreateThingTypePostBody
	{
		
		/// <summary>
		/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingTypeProperties")]
		public CreateThingTypePostBodyThingTypeProperties ThingTypeProperties { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the thing type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateThingTypePostBodyThingTypeProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingTypeDescription")]
		public string ThingTypeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchableAttributes")]
		public string[] SearchableAttributes { get; set; }
	}
	
	public class CreateTopicRulePostBody
	{
		
		/// <summary>
		/// Describes a rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topicRulePayload")]
		public CreateTopicRulePostBodyTopicRulePayload TopicRulePayload { get; set; }
	}
	
	public class CreateTopicRulePostBodyTopicRulePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="sql")]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleDisabled")]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotSqlVersion")]
		public string AwsIotSqlVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorAction")]
		public Action ErrorAction { get; set; }
	}
	
	public class ReplaceTopicRulePatchBody
	{
		
		/// <summary>
		/// Describes a rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topicRulePayload")]
		public ReplaceTopicRulePatchBodyTopicRulePayload TopicRulePayload { get; set; }
	}
	
	public class ReplaceTopicRulePatchBodyTopicRulePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="sql")]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleDisabled")]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsIotSqlVersion")]
		public string AwsIotSqlVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorAction")]
		public Action ErrorAction { get; set; }
	}
	
	public class CreateTopicRuleDestinationPostBody
	{
		
		/// <summary>
		/// Configuration of the topic rule destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationConfiguration")]
		public CreateTopicRuleDestinationPostBodyDestinationConfiguration DestinationConfiguration { get; set; }
	}
	
	public class CreateTopicRuleDestinationPostBodyDestinationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpUrlConfiguration")]
		public HttpUrlDestinationConfiguration HttpUrlConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcDestinationConfiguration VpcConfiguration { get; set; }
	}
	
	public class UpdateTopicRuleDestinationPatchBody
	{
		
		/// <summary>
		/// The ARN of the topic rule destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// <p>The status of the topic rule destination. Valid values are:</p> <dl> <dt>IN_PROGRESS</dt> <dd> <p>A topic rule destination was created but has not been confirmed. You can set <code>status</code> to <code>IN_PROGRESS</code> by calling <code>UpdateTopicRuleDestination</code>. Calling <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to be sent to your confirmation endpoint.</p> </dd> <dt>ENABLED</dt> <dd> <p>Confirmation was completed, and traffic to this destination is allowed. You can set <code>status</code> to <code>DISABLED</code> by calling <code>UpdateTopicRuleDestination</code>.</p> </dd> <dt>DISABLED</dt> <dd> <p>Confirmation was completed, and traffic to this destination is not allowed. You can set <code>status</code> to <code>ENABLED</code> by calling <code>UpdateTopicRuleDestination</code>.</p> </dd> <dt>ERROR</dt> <dd> <p>Confirmation could not be completed, for example if the confirmation timed out. You can call <code>GetTopicRuleDestination</code> for details about the error. You can set <code>status</code> to <code>IN_PROGRESS</code> by calling <code>UpdateTopicRuleDestination</code>. Calling <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to be sent to your confirmation endpoint.</p> </dd> </dl>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TopicRuleDestinationStatus Status { get; set; }
	}
	
	public class UpdateAccountAuditConfigurationPatchBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the role that grants permission to IoT to access information about your devices, policies, certificates, and other items as required when performing an audit.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Information about the targets to which audit notifications are sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditNotificationTargetConfigurations")]
		public System.Collections.Generic.Dictionary<string, AuditNotificationTarget> AuditNotificationTargetConfigurations { get; set; }
		
		/// <summary>
		/// <p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are currently enabled.</p> <p>Some data collection might start immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p> <p>You cannot disable a check if it's used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p> <p>On the first call to <code>UpdateAccountAuditConfiguration</code>, this parameter is required and must specify at least one enabled check.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditCheckConfigurations")]
		public System.Collections.Generic.Dictionary<string, AuditCheckConfiguration> AuditCheckConfigurations { get; set; }
	}
	
	public class DeleteAuditSuppressionPostBody
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public DeleteAuditSuppressionPostBodyResourceIdentifier ResourceIdentifier { get; set; }
	}
	
	public class DeleteAuditSuppressionPostBodyResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	public class UpdateCACertificatePutBody
	{
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationConfig")]
		public UpdateCACertificatePutBodyRegistrationConfig RegistrationConfig { get; set; }
		
		/// <summary>
		/// If true, removes auto registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeAutoRegistration")]
		public System.Nullable<System.Boolean> RemoveAutoRegistration { get; set; }
	}
	
	public class UpdateCACertificatePutBodyRegistrationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
	}
	
	public class UpdateProvisioningTemplatePatchBody
	{
		
		/// <summary>
		/// The description of the provisioning template.
		/// Min length: 0
		/// Max length: 500
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{C}]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// True to enable the provisioning template, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The ID of the default provisioning template version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVersionId")]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
		
		/// <summary>
		/// The ARN of the role associated with the provisioning template. This IoT role grants permission to provision a device.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ProvisioningRoleArn { get; set; }
		
		/// <summary>
		/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preProvisioningHook")]
		public UpdateProvisioningTemplatePatchBodyPreProvisioningHook PreProvisioningHook { get; set; }
		
		/// <summary>
		/// Removes pre-provisioning hook template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removePreProvisioningHook")]
		public System.Nullable<System.Boolean> RemovePreProvisioningHook { get; set; }
	}
	
	public class UpdateProvisioningTemplatePatchBodyPreProvisioningHook
	{
		
		[System.Runtime.Serialization.DataMember(Name="payloadVersion")]
		public string PayloadVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
	}
	
	public class DeprecateThingTypePostBody
	{
		
		/// <summary>
		/// Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undoDeprecate")]
		public System.Nullable<System.Boolean> UndoDeprecate { get; set; }
	}
	
	public class StartAuditMitigationActionsTaskPostBody
	{
		
		/// <summary>
		/// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public StartAuditMitigationActionsTaskPostBodyTarget Target { get; set; }
		
		/// <summary>
		/// For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auditCheckToActionsMapping")]
		public System.Collections.Generic.Dictionary<string, string[]> AuditCheckToActionsMapping { get; set; }
		
		/// <summary>
		/// Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class StartAuditMitigationActionsTaskPostBodyTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="auditTaskId")]
		public string AuditTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="findingIds")]
		public string[] FindingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditCheckToReasonCodeFilter")]
		public AuditCheckToReasonCodeFilter AuditCheckToReasonCodeFilter { get; set; }
	}
	
	public class DescribeAuditSuppressionPostBody
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public DescribeAuditSuppressionPostBodyResourceIdentifier ResourceIdentifier { get; set; }
	}
	
	public class DescribeAuditSuppressionPostBodyResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	public class StartDetectMitigationActionsTaskPutBody
	{
		
		/// <summary>
		///  The target of a mitigation action task. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public StartDetectMitigationActionsTaskPutBodyTarget Target { get; set; }
		
		/// <summary>
		///  The actions to be performed when a device has unexpected behavior. 
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] Actions { get; set; }
		
		/// <summary>
		///  Specifies the time period of which violation events occurred between. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="violationEventOccurrenceRange")]
		public StartDetectMitigationActionsTaskPutBodyViolationEventOccurrenceRange ViolationEventOccurrenceRange { get; set; }
		
		/// <summary>
		///  Specifies to list only active violations. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeOnlyActiveViolations")]
		public System.Nullable<System.Boolean> IncludeOnlyActiveViolations { get; set; }
		
		/// <summary>
		///  Specifies to include suppressed alerts. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeSuppressedAlerts")]
		public System.Nullable<System.Boolean> IncludeSuppressedAlerts { get; set; }
		
		/// <summary>
		///  Each mitigation action task must have a unique client request token. If you try to create a new task with the same token as a task that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request. 
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class StartDetectMitigationActionsTaskPutBodyTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="violationIds")]
		public string[] ViolationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityProfileName")]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behaviorName")]
		public string BehaviorName { get; set; }
	}
	
	public class StartDetectMitigationActionsTaskPutBodyViolationEventOccurrenceRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	public class UpdateEventConfigurationsPatchBody
	{
		
		/// <summary>
		/// The new event configuration values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventConfigurations")]
		public System.Collections.Generic.Dictionary<string, Configuration> EventConfigurations { get; set; }
	}
	
	public class GetBucketsAggregationPostBody
	{
		
		/// <summary>
		/// The name of the index to search.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The search query string.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The aggregation field.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The version of the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// The type of bucketed aggregation performed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketsAggregationType")]
		public GetBucketsAggregationPostBodyBucketsAggregationType BucketsAggregationType { get; set; }
	}
	
	public class GetBucketsAggregationPostBodyBucketsAggregationType
	{
		
		[System.Runtime.Serialization.DataMember(Name="termsAggregation")]
		public TermsAggregation TermsAggregation { get; set; }
	}
	
	public class GetCardinalityPostBody
	{
		
		/// <summary>
		/// The name of the index to search.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The search query string.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The field to aggregate.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	public class GetEffectivePoliciesPostBody
	{
		
		/// <summary>
		/// The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The Cognito identity pool ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
	}
	
	public class UpdateIndexingConfigurationPostBody
	{
		
		/// <summary>
		/// The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingIndexingConfiguration")]
		public UpdateIndexingConfigurationPostBodyThingIndexingConfiguration ThingIndexingConfiguration { get; set; }
		
		/// <summary>
		/// Thing group indexing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupIndexingConfiguration")]
		public UpdateIndexingConfigurationPostBodyThingGroupIndexingConfiguration ThingGroupIndexingConfiguration { get; set; }
	}
	
	public class UpdateIndexingConfigurationPostBodyThingIndexingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingIndexingMode")]
		public ThingIndexingMode ThingIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingConnectivityIndexingMode")]
		public ThingConnectivityIndexingMode ThingConnectivityIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceDefenderIndexingMode")]
		public DeviceDefenderIndexingMode DeviceDefenderIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namedShadowIndexingMode")]
		public NamedShadowIndexingMode NamedShadowIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managedFields")]
		public Field[] ManagedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public Field[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public IndexingFilter Filter { get; set; }
	}
	
	public class UpdateIndexingConfigurationPostBodyThingGroupIndexingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingGroupIndexingMode")]
		public NamedShadowIndexingMode ThingGroupIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managedFields")]
		public Field[] ManagedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public Field[] CustomFields { get; set; }
	}
	
	public class SetLoggingOptionsPostBody
	{
		
		/// <summary>
		/// Describes the logging options payload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loggingOptionsPayload")]
		public SetLoggingOptionsPostBodyLoggingOptionsPayload LoggingOptionsPayload { get; set; }
	}
	
	public class SetLoggingOptionsPostBodyLoggingOptionsPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	public class UpdatePackageConfigurationPatchBody
	{
		
		/// <summary>
		/// <p>Configuration to manage IoT Job's package version reporting. If configured, Jobs updates the thing's reserved named shadow with the package version information up on successful job completion.</p> <p> <b>Note:</b> For each job, the destinationPackageVersions attribute has to be set with the correct data for Jobs to report to the thing shadow. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionUpdateByJobsConfig")]
		public UpdatePackageConfigurationPatchBodyVersionUpdateByJobsConfig VersionUpdateByJobsConfig { get; set; }
	}
	
	public class UpdatePackageConfigurationPatchBodyVersionUpdateByJobsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	public class GetPercentilesPostBody
	{
		
		/// <summary>
		/// The name of the index to search.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The search query string.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The field to aggregate.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// The percentile groups returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percents")]
		public double[] Percents { get; set; }
	}
	
	public class GetStatisticsPostBody
	{
		
		/// <summary>
		/// The name of the index to search. The default value is <code>AWS_Things</code>.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The query used to search. You can specify "*" for the query string to get the count of all indexed things in your Amazon Web Services account.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The aggregation field name.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationField")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The version of the query used to search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	public class SetV2LoggingOptionsPostBody
	{
		
		/// <summary>
		/// The ARN of the role that allows IoT to write to Cloudwatch logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The default logging level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLogLevel")]
		public LogLevel DefaultLogLevel { get; set; }
		
		/// <summary>
		/// If true all logs are disabled. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableAllLogs")]
		public System.Nullable<System.Boolean> DisableAllLogs { get; set; }
	}
	
	public class ListAuditFindingsPostBody
	{
		
		/// <summary>
		/// A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.
		/// Min length: 1
		/// Max length: 40
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9\-]+")]
		public string TaskId { get; set; }
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ListAuditFindingsPostBodyResourceIdentifier ResourceIdentifier { get; set; }
		
		/// <summary>
		/// The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		///  Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listSuppressedFindings")]
		public System.Nullable<System.Boolean> ListSuppressedFindings { get; set; }
	}
	
	public class ListAuditFindingsPostBodyResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	public class ListAuditSuppressionsPostBody
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public ListAuditSuppressionsPostBodyResourceIdentifier ResourceIdentifier { get; set; }
		
		/// <summary>
		///  Determines whether suppressions are listed in ascending order by expiration date or not. If parameter isn't provided, <code>ascendingOrder=true</code>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ascendingOrder")]
		public System.Nullable<System.Boolean> AscendingOrder { get; set; }
		
		/// <summary>
		///  The token for the next set of results. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		///  The maximum number of results to return at one time. The default is 25. 
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListAuditSuppressionsPostBodyResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	public class StartThingRegistrationTaskPostBody
	{
		
		/// <summary>
		/// The provisioning template.
		/// Required
		/// Min length: 0
		/// Max length: 10240
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10240)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// The S3 bucket that contains the input file.
		/// Required
		/// Min length: 3
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputFileBucket")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9._-]+")]
		public string InputFileBucket { get; set; }
		
		/// <summary>
		/// The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: [a-zA-Z0-9!_.*'()-\/]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputFileKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9!_.*'()-\/]+")]
		public string InputFileKey { get; set; }
		
		/// <summary>
		/// The IAM role ARN that grants permission the input file.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
	}
	
	public class RegisterThingPostBody
	{
		
		/// <summary>
		/// The provisioning template. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-w-cert.html">Provisioning Devices That Have Device Certificates</a> for more information.
		/// Required
		/// Min length: 0
		/// Max length: 10240
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10240)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// The parameters for provisioning a thing. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning Templates</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	public class SetV2LoggingLevelPostBody
	{
		
		/// <summary>
		/// A log target.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logTarget")]
		public SetV2LoggingLevelPostBodyLogTarget LogTarget { get; set; }
		
		/// <summary>
		/// The log level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public LogLevel LogLevel { get; set; }
	}
	
	public class SetV2LoggingLevelPostBodyLogTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public LogTargetType TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetName")]
		public string TargetName { get; set; }
	}
	
	public class PutVerificationStateOnViolationPostBody
	{
		
		/// <summary>
		/// The verification state of the violation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verificationState")]
		public VerificationState VerificationState { get; set; }
		
		/// <summary>
		/// The description of the verification state of the violation (detect alarm).
		/// Max length: 1000
		/// Pattern: [^\p{Cntrl}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStateDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\p{Cntrl}]*")]
		public string VerificationStateDescription { get; set; }
	}
	
	public class RegisterCACertificatePostBody
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caCertificate")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Min length: 1
		/// Max length: 65536
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCertificate")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string VerificationCertificate { get; set; }
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationConfig")]
		public RegisterCACertificatePostBodyRegistrationConfig RegistrationConfig { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the CA certificate.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Describes the certificate mode in which the Certificate Authority (CA) will be registered. If the <code>verificationCertificate</code> field is not provided, set <code>certificateMode</code> to be <code>SNI_ONLY</code>. If the <code>verificationCertificate</code> field is provided, set <code>certificateMode</code> to be <code>DEFAULT</code>. When <code>certificateMode</code> is not provided, it defaults to <code>DEFAULT</code>. All the device certificates that are registered using this CA will be registered in the same certificate mode as the CA. For more information about certificate mode for device certificates, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode"> certificate mode</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateMode")]
		public CertificateMode CertificateMode { get; set; }
	}
	
	public class RegisterCACertificatePostBodyRegistrationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateBody")]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
	}
	
	public class RegisterCertificatePostBody
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Min length: 1
		/// Max length: 65536
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificatePem")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CaCertificatePem { get; set; }
		
		/// <summary>
		/// The status of the register certificate request. Valid values that you can use include <code>ACTIVE</code>, <code>INACTIVE</code>, and <code>REVOKED</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
	}
	
	public class RegisterCertificateWithoutCAPostBody
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificatePem")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// The status of the register certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
	}
	
	public class RejectCertificateTransferPatchBody
	{
		
		/// <summary>
		/// The reason the certificate transfer was rejected.
		/// Max length: 128
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectReason")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string RejectReason { get; set; }
	}
	
	public class RemoveThingFromBillingGroupPutBody
	{
		
		/// <summary>
		/// The name of the billing group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string BillingGroupName { get; set; }
		
		/// <summary>
		/// The ARN of the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingGroupArn")]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to be removed from the billing group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to be removed from the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
	}
	
	public class RemoveThingFromThingGroupPutBody
	{
		
		/// <summary>
		/// The group name.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingGroupName { get; set; }
		
		/// <summary>
		/// The group ARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupArn")]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to remove from the group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to remove from the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
	}
	
	public class SearchIndexPostBody
	{
		
		/// <summary>
		/// The search index name.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The search query string. For more information about the search query syntax, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query syntax</a>.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The token used to get the next set of results, or <code>null</code> if there are no additional results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryVersion")]
		public string QueryVersion { get; set; }
	}
	
	public class StartOnDemandAuditTaskPostBody
	{
		
		/// <summary>
		/// Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetCheckNames")]
		public string[] TargetCheckNames { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The new or modified tags for the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	public class TestAuthorizationPostBody
	{
		
		/// <summary>
		/// The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The Cognito identity pool ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		/// <summary>
		/// A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authInfos")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AuthInfo[] AuthInfos { get; set; }
		
		/// <summary>
		/// When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyNamesToAdd")]
		public string[] PolicyNamesToAdd { get; set; }
		
		/// <summary>
		/// When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyNamesToSkip")]
		public string[] PolicyNamesToSkip { get; set; }
	}
	
	public class TestInvokeAuthorizerPostBody
	{
		
		/// <summary>
		/// The token returned by your custom authentication service.
		/// Min length: 1
		/// Max length: 6144
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6144)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Token { get; set; }
		
		/// <summary>
		/// The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.
		/// Min length: 1
		/// Max length: 2560
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenSignature")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2560)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9+/]+={0,2}")]
		public string TokenSignature { get; set; }
		
		/// <summary>
		/// Specifies the HTTP context to use for the test authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpContext")]
		public TestInvokeAuthorizerPostBodyHttpContext HttpContext { get; set; }
		
		/// <summary>
		/// Specifies the MQTT context to use for the test authorizer request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mqttContext")]
		public TestInvokeAuthorizerPostBodyMqttContext MqttContext { get; set; }
		
		/// <summary>
		/// Specifies the TLS context to use for the test authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsContext")]
		public TestInvokeAuthorizerPostBodyTlsContext TlsContext { get; set; }
	}
	
	public class TestInvokeAuthorizerPostBodyHttpContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public HttpHeaders Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
	}
	
	public class TestInvokeAuthorizerPostBodyMqttContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
	}
	
	public class TestInvokeAuthorizerPostBodyTlsContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
	}
	
	public class TransferCertificatePatchBody
	{
		
		/// <summary>
		/// The transfer message.
		/// Max length: 128
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferMessage")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TransferMessage { get; set; }
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// A list of the keys of the tags to be removed from the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	public class UpdateAuditSuppressionPatchBody
	{
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkName")]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public UpdateAuditSuppressionPatchBodyResourceIdentifier ResourceIdentifier { get; set; }
		
		/// <summary>
		///  The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		///  Indicates whether a suppression should exist indefinitely or not. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressIndefinitely")]
		public System.Nullable<System.Boolean> SuppressIndefinitely { get; set; }
		
		/// <summary>
		///  The description of the audit suppression. 
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{Graph}\x20]*")]
		public string Description { get; set; }
	}
	
	public class UpdateAuditSuppressionPatchBodyResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateId")]
		public string DeviceCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateId")]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cognitoIdentityPoolId")]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyVersionIdentifier")]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRoleArn")]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleAliasArn")]
		public string RoleAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateIdentifier")]
		public IssuerCertificateIdentifier IssuerCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceCertificateArn")]
		public string DeviceCertificateArn { get; set; }
	}
	
	public class UpdateThingGroupsForThingPutBody
	{
		
		/// <summary>
		/// The thing whose group memberships will be updated.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9:_-]+")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The groups to which the thing will be added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupsToAdd")]
		public string[] ThingGroupsToAdd { get; set; }
		
		/// <summary>
		/// The groups from which the thing will be removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thingGroupsToRemove")]
		public string[] ThingGroupsToRemove { get; set; }
		
		/// <summary>
		/// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideDynamicGroups")]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	public class ValidateSecurityProfileBehaviorsPostBody
	{
		
		/// <summary>
		/// Specifies the behaviors that, when violated by a device (thing), cause an alert.
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="behaviors")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
