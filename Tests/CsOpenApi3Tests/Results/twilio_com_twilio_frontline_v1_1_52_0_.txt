//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Frontlinev1user
	{
		
		/// <summary>
		/// The avatar URL which will be shown in Frontline application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avatar")]
		public string Avatar { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The application-defined string that uniquely identifies the resource's User. This value is often a username or an email address, and is case-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// Whether the User is available for new conversations. Defaults to `false` for new users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_available")]
		public System.Nullable<System.Boolean> Is_available { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the User resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^US[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^US[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<Frontlinev1userState> State { get; set; }
		
		/// <summary>
		/// An absolute API resource URL for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Frontlinev1userState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deactivated")]
		deactivated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum User_enum_state_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deactivated")]
		deactivated = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetch a frontline user
		/// FetchUser v1/Users/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the User resource to fetch. This value can be either the `sid` or the `identity` of the User resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Frontlinev1user> FetchUserAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Users/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Frontlinev1user>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
