//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Associates `members` with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalAssignment
	{
		
		/// <summary>
		/// The identities the role is assigned to. It can have the following values: * `{user_email}`: An email address that represents a specific Google account. For example: `alice@gmail.com`. * `{group_email}`: An email address that represents a Google group. For example, `viewers@gmail.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Required. Role that is assigned to `members`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// The channel with score.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalChannelWithScore
	{
		
		/// <summary>
		/// Frequency range from `low_frequency` to `high_frequency`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyRange")]
		public SasPortalFrequencyRange FrequencyRange { get; set; }
		
		/// <summary>
		/// The channel score, normalized to be in the range [0,100].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	/// <summary>
	/// Frequency range from `low_frequency` to `high_frequency`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalFrequencyRange
	{
		
		/// <summary>
		/// The highest frequency of the frequency range in MHz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highFrequencyMhz")]
		public System.Nullable<System.Double> HighFrequencyMhz { get; set; }
		
		/// <summary>
		/// The lowest frequency of the frequency range in MHz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowFrequencyMhz")]
		public System.Nullable<System.Double> LowFrequencyMhz { get; set; }
	}
	
	/// <summary>
	/// Response for [CheckHasProvisionedDeployment]. [spectrum.sas.portal.v1alpha1.Provisioning.CheckHasProvisionedDeployment].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalCheckHasProvisionedDeploymentResponse
	{
		
		/// <summary>
		/// Whether a SAS deployment for the authentication context exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasProvisionedDeployment")]
		public System.Nullable<System.Boolean> HasProvisionedDeployment { get; set; }
	}
	
	/// <summary>
	/// Request for CreateSignedDevice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalCreateSignedDeviceRequest
	{
		
		/// <summary>
		/// Required. JSON Web Token signed using a CPI private key. Payload must be the JSON encoding of the device. The user_id field must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedDevice")]
		public string EncodedDevice { get; set; }
		
		/// <summary>
		/// Required. Unique installer id (CPI ID) from the Certified Professional Installers database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installerId")]
		public string InstallerId { get; set; }
	}
	
	/// <summary>
	/// Entity representing a SAS customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalCustomer
	{
		
		/// <summary>
		/// Required. Name of the organization that the customer entity represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User IDs used by the devices belonging to this customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasUserIds")]
		public string[] SasUserIds { get; set; }
	}
	
	/// <summary>
	/// The Deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeployment
	{
		
		/// <summary>
		/// The deployment's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The FCC Registration Numbers (FRNs) copied from its direct parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frns")]
		public string[] Frns { get; set; }
		
		/// <summary>
		/// Output only. Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User ID used by the devices belonging to this deployment. Each deployment should be associated with one unique user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasUserIds")]
		public string[] SasUserIds { get; set; }
	}
	
	/// <summary>
	/// Association between a gcp project and a SAS user id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeploymentAssociation
	{
		
		/// <summary>
		/// GCP project id of the associated project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpProjectId")]
		public string GcpProjectId { get; set; }
		
		/// <summary>
		/// User id of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDevice
	{
		
		/// <summary>
		/// Information about the device configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeConfig")]
		public SasPortalDeviceConfig ActiveConfig { get; set; }
		
		/// <summary>
		/// Output only. Current channels with scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentChannels")]
		public SasPortalChannelWithScore[] CurrentChannels { get; set; }
		
		/// <summary>
		/// Device data overridable by both SAS Portal and registration requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public SasPortalDeviceMetadata DeviceMetadata { get; set; }
		
		/// <summary>
		/// Device display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The FCC identifier of the device. Refer to https://www.fcc.gov/oet/ea/fccid for FccID format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fccId")]
		public string FccId { get; set; }
		
		/// <summary>
		/// Only ranges that are within the allowlists are available for new grants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantRangeAllowlists")]
		public SasPortalFrequencyRange[] GrantRangeAllowlists { get; set; }
		
		/// <summary>
		/// Output only. Grants held by the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grants")]
		public SasPortalDeviceGrant[] Grants { get; set; }
		
		/// <summary>
		/// Output only. The resource path name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information about the device configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preloadedConfig")]
		public SasPortalDeviceConfig PreloadedConfig { get; set; }
		
		/// <summary>
		/// A serial number assigned to the device by the device manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Output only. Device state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SasPortalDeviceState> State { get; set; }
	}
	
	/// <summary>
	/// Information about the device configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeviceConfig
	{
		
		/// <summary>
		/// Information about the device's air interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airInterface")]
		public SasPortalDeviceAirInterface AirInterface { get; set; }
		
		/// <summary>
		/// The call sign of the device operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callSign")]
		public string CallSign { get; set; }
		
		/// <summary>
		/// FCC category of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<SasPortalDeviceConfigCategory> Category { get; set; }
		
		/// <summary>
		/// Information about the device installation parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installationParams")]
		public SasPortalInstallationParams InstallationParams { get; set; }
		
		/// <summary>
		/// Output only. Whether the configuration has been signed by a CPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSigned")]
		public System.Nullable<System.Boolean> IsSigned { get; set; }
		
		/// <summary>
		/// Measurement reporting capabilities of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementCapabilities")]
		public string[] MeasurementCapabilities { get; set; }
		
		/// <summary>
		/// Information about the model of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public SasPortalDeviceModel Model { get; set; }
		
		/// <summary>
		/// State of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SasPortalDeviceConfigState> State { get; set; }
		
		/// <summary>
		/// Output only. The last time the device configuration was edited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The identifier of a device user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Information about the device's air interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeviceAirInterface
	{
		
		/// <summary>
		/// Conditional. This field specifies the radio access technology that is used for the CBSD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radioTechnology")]
		public System.Nullable<SasPortalDeviceAirInterfaceRadioTechnology> RadioTechnology { get; set; }
		
		/// <summary>
		/// Optional. This field is related to the `radioTechnology` and provides the air interface specification that the CBSD is compliant with at the time of registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedSpec")]
		public string SupportedSpec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalDeviceAirInterfaceRadioTechnology
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIO_TECHNOLOGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E_UTRA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMBIUM_NETWORKS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOUR_G_BBW_SAA_1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOODLE_CBRS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDLINE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARANA_WIRELESS = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalDeviceConfigCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CATEGORY_A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CATEGORY_B = 2,
	}
	
	/// <summary>
	/// Information about the device installation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalInstallationParams
	{
		
		/// <summary>
		/// Boresight direction of the horizontal plane of the antenna in degrees with respect to true north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A value of 0 degrees means true north; a value of 90 degrees means east. This parameter is optional for Category A devices and conditional for Category B devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antennaAzimuth")]
		public System.Nullable<System.Int32> AntennaAzimuth { get; set; }
		
		/// <summary>
		/// 3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for Category A devices and conditional for Category B devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antennaBeamwidth")]
		public System.Nullable<System.Int32> AntennaBeamwidth { get; set; }
		
		/// <summary>
		/// Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a negative value means the antenna is tilted up (above horizontal). This parameter is optional for Category A devices and conditional for Category B devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antennaDowntilt")]
		public System.Nullable<System.Int32> AntennaDowntilt { get; set; }
		
		/// <summary>
		/// Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi) inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antennaGain")]
		public System.Nullable<System.Int32> AntennaGain { get; set; }
		
		/// <summary>
		/// If an external antenna is used, the antenna model is optionally provided in this field. The string has a maximum length of 128 octets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antennaModel")]
		public string AntennaModel { get; set; }
		
		/// <summary>
		/// If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeCbsdIndication")]
		public System.Nullable<System.Boolean> CpeCbsdIndication { get; set; }
		
		/// <summary>
		/// This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum allowable EIRP in units of dBm/10MHz for device category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eirpCapability")]
		public System.Nullable<System.Int32> EirpCapability { get; set; }
		
		/// <summary>
		/// Device antenna height in meters. When the `heightType` parameter value is "AGL", the antenna height should be given relative to ground level. When the `heightType` parameter value is "AMSL", it is given with respect to WGS84 datum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// Specifies how the height is measured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightType")]
		public System.Nullable<SasPortalInstallationParamsHeightType> HeightType { get; set; }
		
		/// <summary>
		/// A positive number in meters to indicate accuracy of the device antenna horizontal location. This optional parameter should only be present if its value is less than the FCC requirement of 50 meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAccuracy")]
		public System.Nullable<System.Double> HorizontalAccuracy { get; set; }
		
		/// <summary>
		/// Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorDeployment")]
		public System.Nullable<System.Boolean> IndoorDeployment { get; set; }
		
		/// <summary>
		/// Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -90.000000 to +90.000000. Positive values represent latitudes north of the equator; negative values south of the equator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -180.000000 to +180.000000. Positive values represent longitudes east of the prime meridian; negative values west of the prime meridian.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// A positive number in meters to indicate accuracy of the device antenna vertical location. This optional parameter should only be present if its value is less than the FCC requirement of 3 meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalAccuracy")]
		public System.Nullable<System.Double> VerticalAccuracy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalInstallationParamsHeightType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEIGHT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEIGHT_TYPE_AGL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEIGHT_TYPE_AMSL = 2,
	}
	
	/// <summary>
	/// Information about the model of the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeviceModel
	{
		
		/// <summary>
		/// The firmware version of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareVersion")]
		public string FirmwareVersion { get; set; }
		
		/// <summary>
		/// The hardware version of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareVersion")]
		public string HardwareVersion { get; set; }
		
		/// <summary>
		/// The name of the device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The software version of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareVersion")]
		public string SoftwareVersion { get; set; }
		
		/// <summary>
		/// The name of the device vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalDeviceConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CONFIG_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINAL = 2,
	}
	
	/// <summary>
	/// Device data overridable by both SAS Portal and registration requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeviceMetadata
	{
		
		/// <summary>
		/// If populated, the Antenna Model Pattern to use. Format is: `RecordCreatorId:PatternId`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antennaModel")]
		public string AntennaModel { get; set; }
		
		/// <summary>
		/// Common Channel Group (CCG). A group of CBSDs in the same ICG requesting a common primary channel assignment. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonChannelGroup")]
		public string CommonChannelGroup { get; set; }
		
		/// <summary>
		/// Interference Coordination Group (ICG). A group of CBSDs that manage their own interference with the group. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interferenceCoordinationGroup")]
		public string InterferenceCoordinationGroup { get; set; }
		
		/// <summary>
		/// Output only. Set to `true` if a CPI has validated that they have coordinated with the National Quiet Zone office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nrqzValidated")]
		public System.Nullable<System.Boolean> NrqzValidated { get; set; }
		
		/// <summary>
		/// Information about National Radio Quiet Zone validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nrqzValidation")]
		public SasPortalNrqzValidation NrqzValidation { get; set; }
	}
	
	/// <summary>
	/// Information about National Radio Quiet Zone validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalNrqzValidation
	{
		
		/// <summary>
		/// Validation case ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		public string CaseId { get; set; }
		
		/// <summary>
		/// CPI who signed the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpiId")]
		public string CpiId { get; set; }
		
		/// <summary>
		/// Device latitude that's associated with the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Device longitude that's associated with the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// State of the NRQZ validation info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SasPortalNrqzValidationState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalNrqzValidationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINAL = 2,
	}
	
	/// <summary>
	/// Device grant. It is an authorization provided by the Spectrum Access System to a device to transmit using specified operating parameters after a successful heartbeat by the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDeviceGrant
	{
		
		/// <summary>
		/// Type of channel used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public System.Nullable<SasPortalDeviceGrantChannelType> ChannelType { get; set; }
		
		/// <summary>
		/// The expiration time of the grant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Frequency range from `low_frequency` to `high_frequency`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyRange")]
		public SasPortalFrequencyRange FrequencyRange { get; set; }
		
		/// <summary>
		/// Grant Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantId")]
		public string GrantId { get; set; }
		
		/// <summary>
		/// The transmit expiration time of the last heartbeat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHeartbeatTransmitExpireTime")]
		public string LastHeartbeatTransmitExpireTime { get; set; }
		
		/// <summary>
		/// Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of `maxEirp` represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxEirp")]
		public System.Nullable<System.Double> MaxEirp { get; set; }
		
		/// <summary>
		/// The DPA move lists on which this grant appears.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moveList")]
		public SasPortalDpaMoveList[] MoveList { get; set; }
		
		/// <summary>
		/// State of the grant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SasPortalDeviceGrantState> State { get; set; }
		
		/// <summary>
		/// If the grant is suspended, the reason(s) for suspension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspensionReason")]
		public string[] SuspensionReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalDeviceGrantChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL_TYPE_GAA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL_TYPE_PAL = 2,
	}
	
	/// <summary>
	/// An entry in a DPA's move list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalDpaMoveList
	{
		
		/// <summary>
		/// The ID of the DPA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dpaId")]
		public string DpaId { get; set; }
		
		/// <summary>
		/// Frequency range from `low_frequency` to `high_frequency`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyRange")]
		public SasPortalFrequencyRange FrequencyRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalDeviceGrantState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_STATE_GRANTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_STATE_TERMINATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_STATE_SUSPENDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_STATE_AUTHORIZED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_STATE_EXPIRED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalDeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERED = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalEmpty
	{
	}
	
	/// <summary>
	/// Request for GenerateSecret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalGenerateSecretRequest
	{
	}
	
	/// <summary>
	/// Response for GenerateSecret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalGenerateSecretResponse
	{
		
		/// <summary>
		/// The secret generated by the string and used by ValidateInstaller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
	}
	
	/// <summary>
	/// Request message for `GetPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalGetPolicyRequest
	{
		
		/// <summary>
		/// Required. The resource for which the policy is being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Response for `ListCustomers`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalListCustomersResponse
	{
		
		/// <summary>
		/// The list of customers that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public SasPortalCustomer[] Customers { get; set; }
		
		/// <summary>
		/// A pagination token returned from a previous call to ListCustomers that indicates from where listing should continue. If the field is missing or empty, it means there are no more customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for ListDeployments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalListDeploymentsResponse
	{
		
		/// <summary>
		/// The deployments that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public SasPortalDeployment[] Deployments { get; set; }
		
		/// <summary>
		/// A pagination token returned from a previous call to ListDeployments that indicates from where listing should continue. If the field is missing or empty, it means there are no more deployments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for ListDevices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalListDevicesResponse
	{
		
		/// <summary>
		/// The devices that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public SasPortalDevice[] Devices { get; set; }
		
		/// <summary>
		/// A pagination token returned from a previous call to ListDevices that indicates from where listing should continue. If the field is missing or empty, it means there is no more devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for [ListLegacyOrganizations]. [spectrum.sas.portal.v1alpha1.Provisioning.ListLegacyOrganizations].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalListLegacyOrganizationsResponse
	{
		
		/// <summary>
		/// Optional. Legacy SAS organizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizations")]
		public SasPortalOrganization[] Organizations { get; set; }
	}
	
	/// <summary>
	/// Organization details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalOrganization
	{
		
		/// <summary>
		/// Name of organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Id of organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Response for ListNodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalListNodesResponse
	{
		
		/// <summary>
		/// A pagination token returned from a previous call to ListNodes that indicates from where listing should continue. If the field is missing or empty, it means there is no more nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The nodes that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public SasPortalNode[] Nodes { get; set; }
	}
	
	/// <summary>
	/// The Node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalNode
	{
		
		/// <summary>
		/// The node's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User ids used by the devices belonging to this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasUserIds")]
		public string[] SasUserIds { get; set; }
	}
	
	/// <summary>
	/// Long-running operation metadata message returned by the MigrateOrganization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalMigrateOrganizationMetadata
	{
		
		/// <summary>
		/// Output only. Current operation state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public System.Nullable<SasPortalMigrateOrganizationMetadataOperationState> OperationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SasPortalMigrateOrganizationMetadataOperationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_STATE_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_STATE_RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_STATE_SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_STATE_FAILED = 4,
	}
	
	/// <summary>
	/// Request for [MigrateOrganization]. [spectrum.sas.portal.v1alpha1.Provisioning.MigrateOrganization]. GCP Project, Organization Info, and caller's GAIA ID should be retrieved from the RPC handler, and used to check authorization on SAS Portal organization and to create GCP Projects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalMigrateOrganizationRequest
	{
		
		/// <summary>
		/// Required. Id of the SAS organization to be migrated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	/// <summary>
	/// Response for [MigrateOrganization]. [spectrum.sas.portal.v1alpha1.Provisioning.MigrateOrganization].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalMigrateOrganizationResponse
	{
		
		/// <summary>
		/// Optional. A list of deployment association that were created for the migration, or current associations if they already exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentAssociation")]
		public SasPortalDeploymentAssociation[] DeploymentAssociation { get; set; }
	}
	
	/// <summary>
	/// Request for MoveDeployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalMoveDeploymentRequest
	{
		
		/// <summary>
		/// Required. The name of the new parent resource node or customer to reparent the deployment under.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	/// <summary>
	/// Request for MoveDevice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalMoveDeviceRequest
	{
		
		/// <summary>
		/// Required. The name of the new parent resource node or customer to reparent the device under.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	/// <summary>
	/// Request for MoveNode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalMoveNodeRequest
	{
		
		/// <summary>
		/// Required. The name of the new parent resource node or customer to reparent the node under.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalOperation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public SasPortalStatus Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Defines an access control policy to the resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalPolicy
	{
		
		/// <summary>
		/// List of assignments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignments")]
		public SasPortalAssignment[] Assignments { get; set; }
		
		/// <summary>
		/// The etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to GetPolicy, and systems are expected to put that etag in the request to SetPolicy to ensure that their change will be applied to the same version of the policy. If no etag is provided in the call to GetPolicy, then the existing policy is overwritten blindly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
	}
	
	/// <summary>
	/// Request for [ProvisionDeployment]. [spectrum.sas.portal.v1alpha1.Provisioning.ProvisionDeployment]. GCP Project, Organization Info, and caller’s GAIA ID should be retrieved from the RPC handler, and used as inputs to create a new SAS organization (if not exists) and a new SAS deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalProvisionDeploymentRequest
	{
		
		/// <summary>
		/// Optional. If this field is set, and a new SAS Portal Deployment needs to be created, its display name will be set to the value of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newDeploymentDisplayName")]
		public string NewDeploymentDisplayName { get; set; }
		
		/// <summary>
		/// Optional. If this field is set, and a new SAS Portal Organization needs to be created, its display name will be set to the value of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newOrganizationDisplayName")]
		public string NewOrganizationDisplayName { get; set; }
		
		/// <summary>
		/// Optional. If this field is set then a new deployment will be created under the organization specified by this id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	/// <summary>
	/// Response for [ProvisionDeployment]. [spectrum.sas.portal.v1alpha1.Provisioning.ProvisionDeployment].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalProvisionDeploymentResponse
	{
		
		/// <summary>
		/// Optional. Optional error message if the provisioning request is not successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalSetPolicyRequest
	{
		
		/// <summary>
		/// Optional. Set the field as `true` to disable the onboarding notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableNotification")]
		public System.Nullable<System.Boolean> DisableNotification { get; set; }
		
		/// <summary>
		/// Defines an access control policy to the resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public SasPortalPolicy Policy { get; set; }
		
		/// <summary>
		/// Required. The resource for which the policy is being specified. This policy replaces any existing policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Metadata returned by the long running operation for the SetupSasAnalytics rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalSetupSasAnalyticsMetadata
	{
	}
	
	/// <summary>
	/// Request for the SetupSasAnalytics rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalSetupSasAnalyticsRequest
	{
		
		/// <summary>
		/// Optional. User id to setup analytics for, if not provided the user id associated with the project is used. optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Response returned by the long running operation for the SetupSasAnalytics rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalSetupSasAnalyticsResponse
	{
	}
	
	/// <summary>
	/// Request for SignDevice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalSignDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public SasPortalDevice Device { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalTestPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// Required. The resource for which the permissions are being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalTestPermissionsResponse
	{
		
		/// <summary>
		/// A set of permissions that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Request for UpdateSignedDevice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalUpdateSignedDeviceRequest
	{
		
		/// <summary>
		/// Required. The JSON Web Token signed using a CPI private key. Payload must be the JSON encoding of the device. The user_id field must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedDevice")]
		public string EncodedDevice { get; set; }
		
		/// <summary>
		/// Required. Unique installer ID (CPI ID) from the Certified Professional Installers database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installerId")]
		public string InstallerId { get; set; }
	}
	
	/// <summary>
	/// Request for ValidateInstaller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalValidateInstallerRequest
	{
		
		/// <summary>
		/// Required. JSON Web Token signed using a CPI private key. Payload must include a "secret" claim whose value is the secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedSecret")]
		public string EncodedSecret { get; set; }
		
		/// <summary>
		/// Required. Unique installer id (CPI ID) from the Certified Professional Installers database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installerId")]
		public string InstallerId { get; set; }
		
		/// <summary>
		/// Required. Secret returned by the GenerateSecret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
	}
	
	/// <summary>
	/// Response for ValidateInstaller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SasPortalValidateInstallerResponse
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of requested customers.
		/// Prod_tt_sasportal_customers_list v1alpha1/customers
		/// </summary>
		/// <param name="pageSize">The maximum number of customers to return in the response.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to ListCustomers that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalListCustomersResponse> Prod_tt_sasportal_customers_listAsync(int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/customers?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalListCustomersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Checks whether a SAS deployment for the authentication context exists.
		/// Prod_tt_sasportal_customers_checkHasProvisionedDeployment v1alpha1/customers:checkHasProvisionedDeployment
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalCheckHasProvisionedDeploymentResponse> Prod_tt_sasportal_customers_checkHasProvisionedDeploymentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/customers:checkHasProvisionedDeployment";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalCheckHasProvisionedDeploymentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Checks whether account is legacy.
		/// Prod_tt_sasportal_customers_listLegacyOrganizations v1alpha1/customers:listLegacyOrganizations
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalListLegacyOrganizationsResponse> Prod_tt_sasportal_customers_listLegacyOrganizationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/customers:listLegacyOrganizations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalListLegacyOrganizationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Migrates a SAS organization to the cloud. This will create GCP projects for each deployment and associate them. The SAS Organization is linked to the gcp project that called the command. go/sas-legacy-customer-migration
		/// Prod_tt_sasportal_customers_migrateOrganization v1alpha1/customers:migrateOrganization
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalOperation> Prod_tt_sasportal_customers_migrateOrganizationAsync(SasPortalMigrateOrganizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/customers:migrateOrganization";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new SAS deployment through the GCP workflow. Creates a SAS organization if an organization match is not found.
		/// Prod_tt_sasportal_customers_provisionDeployment v1alpha1/customers:provisionDeployment
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalProvisionDeploymentResponse> Prod_tt_sasportal_customers_provisionDeploymentAsync(SasPortalProvisionDeploymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/customers:provisionDeployment";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalProvisionDeploymentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Setups the a GCP Project to receive SAS Analytics messages via GCP Pub/Sub with a subscription to BigQuery. All the Pub/Sub topics and BigQuery tables are created automatically as part of this service.
		/// Prod_tt_sasportal_customers_setupSasAnalytics v1alpha1/customers:setupSasAnalytics
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalOperation> Prod_tt_sasportal_customers_setupSasAnalyticsAsync(SasPortalSetupSasAnalyticsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/customers:setupSasAnalytics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a secret to be used with the ValidateInstaller.
		/// Prod_tt_sasportal_installer_generateSecret v1alpha1/installer:generateSecret
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalGenerateSecretResponse> Prod_tt_sasportal_installer_generateSecretAsync(SasPortalGenerateSecretRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/installer:generateSecret";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalGenerateSecretResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validates the identity of a Certified Professional Installer (CPI).
		/// Prod_tt_sasportal_installer_validate v1alpha1/installer:validate
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalValidateInstallerResponse> Prod_tt_sasportal_installer_validateAsync(SasPortalValidateInstallerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/installer:validate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalValidateInstallerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Prod_tt_sasportal_policies_get v1alpha1/policies:get
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalPolicy> Prod_tt_sasportal_policies_getAsync(SasPortalGetPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/policies:get";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy.
		/// Prod_tt_sasportal_policies_set v1alpha1/policies:set
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalPolicy> Prod_tt_sasportal_policies_setAsync(SasPortalSetPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/policies:set";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource.
		/// Prod_tt_sasportal_policies_test v1alpha1/policies:test
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SasPortalTestPermissionsResponse> Prod_tt_sasportal_policies_testAsync(SasPortalTestPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/policies:test";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalTestPermissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a node.
		/// Prod_tt_sasportal_nodes_nodes_delete v1alpha1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the node.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalEmpty> Prod_tt_sasportal_nodes_nodes_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalEmpty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a requested node.
		/// Prod_tt_sasportal_nodes_nodes_get v1alpha1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the node.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalNode> Prod_tt_sasportal_nodes_nodes_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalNode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing node.
		/// Prod_tt_sasportal_nodes_nodes_patch v1alpha1/{name}
		/// </summary>
		/// <param name="name">Output only. Resource name.</param>
		/// <param name="updateMask">Fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalNode> Prod_tt_sasportal_nodes_nodes_patchAsync(string name, string updateMask, SasPortalNode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalNode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Moves a node under another node or customer.
		/// Prod_tt_sasportal_nodes_nodes_move v1alpha1/{name}:move
		/// </summary>
		/// <param name="name">Required. The name of the node to move.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalOperation> Prod_tt_sasportal_nodes_nodes_moveAsync(string name, SasPortalMoveNodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":move";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Signs a device.
		/// Prod_tt_sasportal_nodes_devices_signDevice v1alpha1/{name}:signDevice
		/// </summary>
		/// <param name="name">Output only. The resource path name.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalEmpty> Prod_tt_sasportal_nodes_devices_signDeviceAsync(string name, SasPortalSignDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":signDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalEmpty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a signed device.
		/// Prod_tt_sasportal_nodes_devices_updateSigned v1alpha1/{name}:updateSigned
		/// </summary>
		/// <param name="name">Required. The name of the device to update.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalDevice> Prod_tt_sasportal_nodes_devices_updateSignedAsync(string name, SasPortalUpdateSignedDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":updateSigned";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalDevice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists deployments.
		/// Prod_tt_sasportal_nodes_nodes_deployments_list v1alpha1/{parent}/deployments
		/// </summary>
		/// <param name="parent">Required. The parent resource name, for example, "nodes/1", customer/1/nodes/2.</param>
		/// <param name="filter">The filter expression. The filter should have the following format: "DIRECT_CHILDREN" or format: "direct_children". The filter is case insensitive. If empty, then no deployments are filtered.</param>
		/// <param name="pageSize">The maximum number of deployments to return in the response.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to ListDeployments that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalListDeploymentsResponse> Prod_tt_sasportal_nodes_nodes_deployments_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/deployments&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalListDeploymentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new deployment.
		/// Prod_tt_sasportal_nodes_nodes_deployments_create v1alpha1/{parent}/deployments
		/// </summary>
		/// <param name="parent">Required. The parent resource name where the deployment is to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalDeployment> Prod_tt_sasportal_nodes_nodes_deployments_createAsync(string parent, SasPortalDeployment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/deployments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists devices under a node or customer.
		/// Prod_tt_sasportal_nodes_nodes_devices_list v1alpha1/{parent}/devices
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource.</param>
		/// <param name="filter">The filter expression. The filter should have one of the following formats: "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of the device. The filter is case insensitive.</param>
		/// <param name="pageSize">The maximum number of devices to return in the response. If empty or zero, all devices will be listed. Must be in the range [0, 1000].</param>
		/// <param name="pageToken">A pagination token returned from a previous call to ListDevices that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalListDevicesResponse> Prod_tt_sasportal_nodes_nodes_devices_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalListDevicesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a device under a node or customer.
		/// Prod_tt_sasportal_nodes_nodes_devices_create v1alpha1/{parent}/devices
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalDevice> Prod_tt_sasportal_nodes_nodes_devices_createAsync(string parent, SasPortalDevice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalDevice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a signed device under a node or customer.
		/// Prod_tt_sasportal_nodes_nodes_devices_createSigned v1alpha1/{parent}/devices:createSigned
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalDevice> Prod_tt_sasportal_nodes_nodes_devices_createSignedAsync(string parent, SasPortalCreateSignedDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices:createSigned";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalDevice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists nodes.
		/// Prod_tt_sasportal_nodes_nodes_nodes_list v1alpha1/{parent}/nodes
		/// </summary>
		/// <param name="parent">Required. The parent resource name, for example, "nodes/1".</param>
		/// <param name="filter">The filter expression. The filter should have the following format: "DIRECT_CHILDREN" or format: "direct_children". The filter is case insensitive. If empty, then no nodes are filtered.</param>
		/// <param name="pageSize">The maximum number of nodes to return in the response.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to ListNodes that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalListNodesResponse> Prod_tt_sasportal_nodes_nodes_nodes_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nodes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalListNodesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new node.
		/// Prod_tt_sasportal_nodes_nodes_nodes_create v1alpha1/{parent}/nodes
		/// </summary>
		/// <param name="parent">Required. The parent resource name where the node is to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<SasPortalNode> Prod_tt_sasportal_nodes_nodes_nodes_createAsync(string parent, SasPortalNode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nodes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SasPortalNode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
