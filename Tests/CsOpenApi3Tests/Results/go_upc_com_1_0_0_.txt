//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The provided code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The type of code provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeType")]
		public object CodeType { get; set; }
		
		/// <summary>
		/// A human readable error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error1 { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve product info for a particular barcode number (UPC, EAN, or ISBN).
		/// GetProductInfo code/{code}
		/// </summary>
		/// <returns>The product corresponding to the provided `code`</returns>
		public async Task<GetProductInfoReturn> GetProductInfoAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "code/"+ (code==null? "" : System.Uri.EscapeDataString(code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProductInfoReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetProductInfoReturn
	{
		
		/// <summary>
		/// The URL to the scannable barcode image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barcodeUrl")]
		public string BarcodeUrl { get; set; }
		
		/// <summary>
		/// The type of product code (UPC/EAN/ISBN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeType")]
		public System.Nullable<GetProductInfoReturnCodeType> CodeType { get; set; }
		
		/// <summary>
		/// all matching product details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public GetProductInfoReturnProduct Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetProductInfoReturnCodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISBN = 2,
	}
	
	public class GetProductInfoReturnProduct
	{
		
		/// <summary>
		/// The brand of the product (if available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The category of the product (if available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// A description of the product (if available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The EAN code of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public System.Nullable<System.Int32> Ean { get; set; }
		
		/// <summary>
		/// The URL for the product image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The name of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The region of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// A list of additional item specifications (if available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public string[] Specs { get; set; }
		
		/// <summary>
		/// The UPC code of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upc")]
		public System.Nullable<System.Int32> Upc { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
