//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Text annotation with a set of attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Annotation
	{
		
		/// <summary>
		/// A set of attributes as key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public TruncatableString Description { get; set; }
	}
	
	/// <summary>
	/// A set of attributes as key-value pairs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attributes
	{
		
		/// <summary>
		/// A set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the boolean values `true` or `false`. For example: "/instance_id": { "string_value": { "value": "my-instance" } } "/http/request_bytes": { "int_value": 300 } "example.com/myattribute": { "bool_value": false }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeMap")]
		public System.Collections.Generic.Dictionary<string, AttributeValue> AttributeMap { get; set; }
		
		/// <summary>
		/// The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="droppedAttributesCount")]
		public System.Nullable<System.Int32> DroppedAttributesCount { get; set; }
	}
	
	/// <summary>
	/// The allowed types for `[VALUE]` in a `[KEY]:[VALUE]` attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeValue
	{
		
		/// <summary>
		/// A Boolean value represented by `true` or `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// A 64-bit signed integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public TruncatableString StringValue { get; set; }
	}
	
	/// <summary>
	/// Represents a string that might be shortened to a specified length.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TruncatableString
	{
		
		/// <summary>
		/// The number of bytes removed from the original string. If this value is 0, then the string was not shortened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truncatedByteCount")]
		public System.Nullable<System.Int32> TruncatedByteCount { get; set; }
		
		/// <summary>
		/// The shortened string. For example, if the original string is 500 bytes long and the limit of the string is 128 bytes, then `value` contains the first 128 bytes of the 500-byte string. Truncation always happens on a UTF8 character boundary. If there are multi-byte characters in the string, then the length of the shortened string might be less than the size limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The request message for the `BatchWriteSpans` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteSpansRequest
	{
		
		/// <summary>
		/// Required. A list of new spans. The span names must not match existing spans, otherwise the results are undefined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spans")]
		public Span[] Spans { get; set; }
	}
	
	/// <summary>
	/// A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous. There might be gaps or overlaps between spans in a trace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Span
	{
		
		/// <summary>
		/// A set of attributes as key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// Optional. The number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childSpanCount")]
		public System.Nullable<System.Int32> ChildSpanCount { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public TruncatableString DisplayName { get; set; }
		
		/// <summary>
		/// Required. The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// A collection of links, which are references from this span to a span in the same or different trace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Required. The resource name of the span in the following format: * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. It should not be zero. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The `[SPAN_ID]` of this span's parent span. If this is a root span, then this field must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentSpanId")]
		public string ParentSpanId { get; set; }
		
		/// <summary>
		/// Optional. Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Trace is unable to take advantage of this helpful information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sameProcessAsParentSpan")]
		public System.Nullable<System.Boolean> SameProcessAsParentSpan { get; set; }
		
		/// <summary>
		/// Required. The `[SPAN_ID]` portion of the span's resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanId")]
		public string SpanId { get; set; }
		
		/// <summary>
		/// Optional. Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanKind")]
		public System.Nullable<SpanSpanKind> SpanKind { get; set; }
		
		/// <summary>
		/// A call stack appearing in a trace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
		
		/// <summary>
		/// Required. The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeEvents")]
		public TimeEvents TimeEvents { get; set; }
	}
	
	/// <summary>
	/// A collection of links, which are references from this span to a span in the same or different trace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Links
	{
		
		/// <summary>
		/// The number of dropped links after the maximum size was enforced. If this value is 0, then no links were dropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="droppedLinksCount")]
		public System.Nullable<System.Int32> DroppedLinksCount { get; set; }
		
		/// <summary>
		/// A collection of links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link[] Link { get; set; }
	}
	
	/// <summary>
	/// A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		/// <summary>
		/// A set of attributes as key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// The `[SPAN_ID]` for a span within a trace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanId")]
		public string SpanId { get; set; }
		
		/// <summary>
		/// The `[TRACE_ID]` for a trace within a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traceId")]
		public string TraceId { get; set; }
		
		/// <summary>
		/// The relationship of the current span relative to the linked span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LinkType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_LINKED_SPAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENT_LINKED_SPAN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpanSpanKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPAN_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSUMER = 5,
	}
	
	/// <summary>
	/// A call stack appearing in a trace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StackTrace
	{
		
		/// <summary>
		/// A collection of stack frames, which can be truncated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackFrames")]
		public StackFrames StackFrames { get; set; }
		
		/// <summary>
		/// The hash ID is used to conserve network bandwidth for duplicate stack traces within a single trace. Often multiple spans will have identical stack traces. The first occurrence of a stack trace should contain both the `stackFrame` content and a value in `stackTraceHashId`. Subsequent spans within the same request can refer to that stack trace by only setting `stackTraceHashId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTraceHashId")]
		public string StackTraceHashId { get; set; }
	}
	
	/// <summary>
	/// A collection of stack frames, which can be truncated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StackFrames
	{
		
		/// <summary>
		/// The number of stack frames that were dropped because there were too many stack frames. If this value is 0, then no stack frames were dropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="droppedFramesCount")]
		public System.Nullable<System.Int32> DroppedFramesCount { get; set; }
		
		/// <summary>
		/// Stack frames in this call stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frame")]
		public StackFrame[] Frame { get; set; }
	}
	
	/// <summary>
	/// Represents a single stack frame in a stack trace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StackFrame
	{
		
		/// <summary>
		/// The column number where the function call appears, if available. This is important in JavaScript because of its anonymous functions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnNumber")]
		public string ColumnNumber { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public TruncatableString FileName { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionName")]
		public TruncatableString FunctionName { get; set; }
		
		/// <summary>
		/// The line number in `file_name` where the function call appears.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public string LineNumber { get; set; }
		
		/// <summary>
		/// Binary module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadModule")]
		public Module LoadModule { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalFunctionName")]
		public TruncatableString OriginalFunctionName { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public TruncatableString SourceVersion { get; set; }
	}
	
	/// <summary>
	/// Binary module.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Module
	{
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildId")]
		public TruncatableString BuildId { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="module")]
		public TruncatableString Module1 { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeEvents
	{
		
		/// <summary>
		/// The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="droppedAnnotationsCount")]
		public System.Nullable<System.Int32> DroppedAnnotationsCount { get; set; }
		
		/// <summary>
		/// The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="droppedMessageEventsCount")]
		public System.Nullable<System.Int32> DroppedMessageEventsCount { get; set; }
		
		/// <summary>
		/// A collection of `TimeEvent`s.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeEvent")]
		public TimeEvent[] TimeEvent { get; set; }
	}
	
	/// <summary>
	/// A time-stamped annotation or message event in the Span.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeEvent
	{
		
		/// <summary>
		/// Text annotation with a set of attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotation")]
		public Annotation Annotation { get; set; }
		
		/// <summary>
		/// An event describing a message sent/received between Spans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageEvent")]
		public MessageEvent MessageEvent { get; set; }
		
		/// <summary>
		/// The timestamp indicating the time the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// An event describing a message sent/received between Spans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageEvent
	{
		
		/// <summary>
		/// The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compressedSizeBytes")]
		public string CompressedSizeBytes { get; set; }
		
		/// <summary>
		/// An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of MessageEvent. Indicates whether the message was sent or received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MessageEventType> Type { get; set; }
		
		/// <summary>
		/// The number of uncompressed bytes sent or received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncompressedSizeBytes")]
		public string UncompressedSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVED = 2,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new span.
		/// Cloudtrace_projects_traces_spans_createSpan v2/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the span in the following format: * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. It should not be zero. .</param>
		/// <returns>Successful response</returns>
		public async Task<Span> Cloudtrace_projects_traces_spans_createSpanAsync(string name, Span requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Span>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch writes new spans to new or existing traces. You cannot update existing spans.
		/// Cloudtrace_projects_traces_batchWrite v2/{name}/traces:batchWrite
		/// </summary>
		/// <param name="name">Required. The name of the project where the spans belong. The format is `projects/[PROJECT_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudtrace_projects_traces_batchWriteAsync(string name, BatchWriteSpansRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/traces:batchWrite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
