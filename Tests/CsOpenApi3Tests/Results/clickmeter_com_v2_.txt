//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingConversionOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="hideComCost")]
		public System.Nullable<System.Boolean> HideComCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideCost")]
		public System.Nullable<System.Boolean> HideCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideCount")]
		public System.Nullable<System.Boolean> HideCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideParams")]
		public System.Nullable<System.Boolean> HideParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideValue")]
		public System.Nullable<System.Boolean> HideValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentCommission")]
		public System.Nullable<System.Int32> PercentCommission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentValue")]
		public System.Nullable<System.Int32> PercentValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingDomainWhitelistEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingExtendedGrants
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowAllGrants")]
		public System.Nullable<System.Boolean> AllowAllGrants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowGroupCreation")]
		public System.Nullable<System.Boolean> AllowGroupCreation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingGuest
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversionOptions")]
		public ApiCoreDtoAccountingConversionOptions ConversionOptions { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentGrant")]
		public ApiCoreDtoGrantsGrant CurrentGrant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		public string DateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decimalSeparator")]
		public string DecimalSeparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedGrants")]
		public ApiCoreDtoAccountingExtendedGrants ExtendedGrants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupGrants")]
		public System.Nullable<System.Int64> GroupGrants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hitOptions")]
		public ApiCoreDtoAccountingHitOptions HitOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loginCount")]
		public System.Nullable<System.Int32> LoginCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberGroupSeparator")]
		public string NumberGroupSeparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public System.Nullable<ApiCoreDtoAccountingGuestTimeFormat> TimeFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public System.Nullable<System.Int32> TimeZone { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeframeMinDate")]
		public string TimeframeMinDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezonename")]
		public string Timezonename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlGrants")]
		public System.Nullable<System.Int64> TlGrants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tpGrants")]
		public System.Nullable<System.Int64> TpGrants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoGrantsGrant
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatapointType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiCoreResponsesEntityUri_SystemInt64_ Entity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntityUri_SystemInt64_
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingHitOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="hideReferrer")]
		public System.Nullable<System.Boolean> HideReferrer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoAccountingGuestTimeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmPm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H24 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingIpBlacklistEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingPlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowedPersonalDomains")]
		public System.Nullable<System.Int32> AllowedPersonalDomains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowedPersonalUrls")]
		public System.Nullable<System.Int32> AllowedPersonalUrls { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodEnd")]
		public string BillingPeriodEnd { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodStart")]
		public string BillingPeriodStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bonusMonthlyEvents")]
		public System.Nullable<System.Int64> BonusMonthlyEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumDatapoints")]
		public System.Nullable<System.Int64> MaximumDatapoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumGuests")]
		public System.Nullable<System.Int64> MaximumGuests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthlyEvents")]
		public System.Nullable<System.Int64> MonthlyEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public System.Nullable<System.Int64> ProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurring")]
		public System.Nullable<System.Boolean> Recurring { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringPeriod")]
		public System.Nullable<System.Int32> RecurringPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usedDatapoints")]
		public System.Nullable<System.Int64> UsedDatapoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usedMonthlyEvents")]
		public System.Nullable<System.Int64> UsedMonthlyEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAccountingUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="boGoVal")]
		public string BoGoVal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bonusClicks")]
		public System.Nullable<System.Int64> BonusClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyRole")]
		public string CompanyRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectOnly")]
		public System.Nullable<System.Boolean> RedirectOnly { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationDate")]
		public string RegistrationDate { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeframeMinDate")]
		public string TimeframeMinDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public System.Nullable<System.Int32> Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezonename")]
		public string Timezonename { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAggregatedAggregatedResult
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityDay")]
		public string ActivityDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commissionsCost")]
		public System.Nullable<System.Double> CommissionsCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversionsCost")]
		public System.Nullable<System.Double> ConversionsCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversionsValue")]
		public System.Nullable<System.Double> ConversionsValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="convertedClicks")]
		public System.Nullable<System.Int64> ConvertedClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityData")]
		public SystemObject EntityData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromDay")]
		public string FromDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourlyBreakDown")]
		public System.Collections.Generic.Dictionary<string, ApiCoreDtoAggregatedAggregatedResult> HourlyBreakDown { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHitDate")]
		public string LastHitDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spiderHitsCount")]
		public System.Nullable<System.Int64> SpiderHitsCount { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toDay")]
		public string ToDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalClicks")]
		public System.Nullable<System.Int64> TotalClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalViews")]
		public System.Nullable<System.Int64> TotalViews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueClicks")]
		public System.Nullable<System.Int64> UniqueClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueConversions")]
		public System.Nullable<System.Int64> UniqueConversions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueViews")]
		public System.Nullable<System.Int64> UniqueViews { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoAggregatedAggregatedSummaryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int64> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ApiCoreDtoAggregatedAggregatedResult[] Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHit
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTime")]
		public string AccessTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browser")]
		public ApiCoreDtoClickStreamHitBrowserInfo Browser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientLanguage")]
		public string ClientLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversion1")]
		public ApiCoreDtoClickStreamHitConversionInfo Conversion1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversion2")]
		public ApiCoreDtoClickStreamHitConversionInfo Conversion2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversion3")]
		public ApiCoreDtoClickStreamHitConversionInfo Conversion3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversion4")]
		public ApiCoreDtoClickStreamHitConversionInfo Conversion4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversion5")]
		public ApiCoreDtoClickStreamHitConversionInfo Conversion5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversions")]
		public ApiCoreDtoClickStreamHitConversionInfo[] Conversions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public ApiCoreDtoClickStreamHitDatapointInfo Entity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProxy")]
		public string IsProxy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSpider")]
		public string IsSpider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUnique")]
		public string IsUnique { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ApiCoreDtoClickStreamHitLocationInfo Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public ApiCoreDtoClickStreamHitOsInfo Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryParams")]
		public string QueryParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realDestinationUrl")]
		public string RealDestinationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ApiCoreDtoClickStreamHitSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitBrowserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="browserType")]
		public string BrowserType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="familyId")]
		public System.Nullable<System.Int64> FamilyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitConversionInfo
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTime")]
		public string AccessTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comcost")]
		public System.Nullable<System.Double> Comcost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitDatapointInfo
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointFavourite")]
		public System.Nullable<System.Boolean> DatapointFavourite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointId")]
		public System.Nullable<System.Int64> DatapointId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointName")]
		public string DatapointName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointTitle")]
		public string DatapointTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointType")]
		public string DatapointType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationUrl")]
		public string DestinationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isABTest")]
		public System.Nullable<System.Boolean> IsABTest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrivateShared")]
		public System.Nullable<System.Boolean> IsPrivateShared { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ApiCoreDtoClickStreamHitDatapointInfoStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ApiCoreDtoTagsTag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingCode")]
		public string TrackingCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoClickStreamHitDatapointInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Abuse = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoTagsTag
	{
		
		[System.Runtime.Serialization.DataMember(Name="datapoints")]
		public int[] Datapoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public int[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitLocationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="areacode")]
		public string Areacode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metrocode")]
		public string Metrocode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalcode")]
		public string Postalcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitOsInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="familyId")]
		public System.Nullable<System.Int64> FamilyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="param")]
		public string Param { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoClickStreamHitListPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="hits")]
		public ApiCoreDtoClickStreamHit[] Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastKey")]
		public string LastKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoConversionsConversion
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<ApiCoreDtoConversionsConversionProtocol> Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoConversionsConversionProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Https = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsBrowserBaseDestinationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailDestinationUrl")]
		public string EmailDestinationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileDestinationUrl")]
		public string MobileDestinationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spidersDestinationUrl")]
		public string SpidersDestinationUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsDatapoint
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encodeIp")]
		public System.Nullable<System.Boolean> EncodeIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fifthConversionId")]
		public System.Nullable<System.Int64> FifthConversionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fifthConversionName")]
		public string FifthConversionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstConversionId")]
		public System.Nullable<System.Int64> FirstConversionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstConversionName")]
		public string FirstConversionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fourthConversionId")]
		public System.Nullable<System.Int64> FourthConversionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fourthConversionName")]
		public string FourthConversionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSecured")]
		public System.Nullable<System.Boolean> IsSecured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lightTracking")]
		public System.Nullable<System.Boolean> LightTracking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferred")]
		public System.Nullable<System.Boolean> Preferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectOnly")]
		public System.Nullable<System.Boolean> RedirectOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondConversionId")]
		public System.Nullable<System.Int64> SecondConversionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondConversionName")]
		public string SecondConversionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApiCoreDtoClickStreamHitDatapointInfoStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ApiCoreDtoTagsTag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thirdConversionId")]
		public System.Nullable<System.Int64> ThirdConversionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thirdConversionName")]
		public string ThirdConversionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingCode")]
		public string TrackingCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ApiCoreDtoDatapointsDatapointType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeTL")]
		public ApiCoreDtoDatapointsTrackingLinkSpecifics TypeTL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeTP")]
		public ApiCoreDtoDatapointsTrackingPixelSpecifics TypeTP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="writePermited")]
		public System.Nullable<System.Boolean> WritePermited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoDatapointsDatapointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrackingLink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrackingPixel = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsTrackingLinkSpecifics
	{
		
		[System.Runtime.Serialization.DataMember(Name="appendQuery")]
		public System.Nullable<System.Boolean> AppendQuery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserDestinationItem")]
		public ApiCoreDtoDatapointsBrowserBaseDestinationItem BrowserDestinationItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationMode")]
		public System.Nullable<ApiCoreDtoDatapointsTrackingLinkSpecificsDestinationMode> DestinationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainId")]
		public System.Nullable<System.Int32> DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encodeUrl")]
		public System.Nullable<System.Boolean> EncodeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationClicks")]
		public System.Nullable<System.Int64> ExpirationClicks { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstUrl")]
		public string FirstUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="goDomainId")]
		public System.Nullable<System.Int32> GoDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideUrl")]
		public System.Nullable<System.Boolean> HideUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideUrlTitle")]
		public string HideUrlTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isABTest")]
		public System.Nullable<System.Boolean> IsABTest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pauseAfterClicksExpiration")]
		public System.Nullable<System.Boolean> PauseAfterClicksExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pauseAfterDateExpiration")]
		public System.Nullable<System.Boolean> PauseAfterDateExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="randomDestinationItems")]
		public ApiCoreDtoDatapointsMultipleDestinationItem[] RandomDestinationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectType")]
		public System.Nullable<ApiCoreDtoDatapointsTrackingLinkSpecificsRedirectType> RedirectType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referrerClean")]
		public System.Nullable<ApiCoreDtoDatapointsTrackingLinkSpecificsReferrerClean> ReferrerClean { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scripts")]
		public ApiCoreDtoDatapointsDatapointRetargetingInfo[] Scripts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequentialDestinationItems")]
		public ApiCoreDtoDatapointsMultipleDestinationItem[] SequentialDestinationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spilloverDestinationItems")]
		public ApiCoreDtoDatapointsMultipleDestinationItem[] SpilloverDestinationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueDestinationItem")]
		public ApiCoreDtoDatapointsUniqueDestinationItem UniqueDestinationItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlAfterClicksExpiration")]
		public string UrlAfterClicksExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlAfterDateExpiration")]
		public string UrlAfterDateExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlsByLanguage")]
		public ApiCoreDtoDatapointsUrlByLanguageItem[] UrlsByLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlsByNation")]
		public ApiCoreDtoDatapointsUrlByNationItem[] UrlsByNation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weightedDestinationItems")]
		public ApiCoreDtoDatapointsWeightedDestinationItem[] WeightedDestinationItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoDatapointsTrackingLinkSpecificsDestinationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Simple = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RandomDestination = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DestinationByLanguage = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SpilloverDestination = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DynamicUrl = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BrowserDestination = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DestinationByNation = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UniqueDestination = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SequentialDestination = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WeightedDestination = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsMultipleDestinationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoDatapointsTrackingLinkSpecificsRedirectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermanentRedirect = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TemporaryRedirect = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoDatapointsTrackingLinkSpecificsReferrerClean
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Clean = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Myself = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsDatapointRetargetingInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsUniqueDestinationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstDestinationUrl")]
		public string FirstDestinationUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsUrlByLanguageItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsUrlByNationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="nation")]
		public string Nation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsWeightedDestinationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDatapointsTrackingPixelSpecifics
	{
		
		[System.Runtime.Serialization.DataMember(Name="parameterNote")]
		public string ParameterNote { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoDomainsDomain
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom404")]
		public string Custom404 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customHomepage")]
		public string CustomHomepage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ApiCoreDtoDomainsDomainType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiCoreDtoDomainsDomainType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System")]
		_System = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Go = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dedicated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Personal = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoEntityUriLong
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoGroupsGroup
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferred")]
		public System.Nullable<System.Boolean> Preferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectOnly")]
		public System.Nullable<System.Boolean> RedirectOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ApiCoreDtoTagsTag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="writePermited")]
		public System.Nullable<System.Boolean> WritePermited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoRetargetingRetargetingScript
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoTopsTop
	{
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ApiCoreDtoTopsTopItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreDtoTopsTopItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityData")]
		public SystemObject EntityData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		///  (A date in "YmdHis" format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHitDate")]
		public string LastHitDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spiderClicks")]
		public System.Nullable<System.Int64> SpiderClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spiderHits")]
		public System.Nullable<System.Int64> SpiderHits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spiderViews")]
		public System.Nullable<System.Int64> SpiderViews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalClicks")]
		public System.Nullable<System.Int64> TotalClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCommissionsCost")]
		public System.Nullable<System.Double> TotalCommissionsCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalConversions")]
		public System.Nullable<System.Int64> TotalConversions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalConversionsCost")]
		public System.Nullable<System.Double> TotalConversionsCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalConversionsValue")]
		public System.Nullable<System.Double> TotalConversionsValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalHits")]
		public System.Nullable<System.Int64> TotalHits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalViews")]
		public System.Nullable<System.Int64> TotalViews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueClicks")]
		public System.Nullable<System.Int64> UniqueClicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueHits")]
		public System.Nullable<System.Int64> UniqueHits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueViews")]
		public System.Nullable<System.Int64> UniqueViews { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsConversionPatchBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ReplaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsDatapointsBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApiCoreDtoDatapointsDatapoint[] List { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsDeleteBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApiCoreDtoEntityUriLong[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsGenericTextPatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsPatchBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsPatchBodyBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApiCoreRequestsPatchBody[] PatchRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreRequestsPermissionPatchRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Verb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesCountResponce
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntitiesResponse_ApiCoreDtoAccountingDomainWhitelistEntry_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ApiCoreDtoAccountingDomainWhitelistEntry[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntitiesResponse_ApiCoreDtoAccountingIpBlacklistEntry_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ApiCoreDtoAccountingIpBlacklistEntry[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ApiCoreDtoAggregatedAggregatedResult[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntitiesResponse_ApiCoreDtoClickStreamHit_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ApiCoreDtoClickStreamHit[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntitiesResponse_ApiCoreDtoGrantsGrant_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ApiCoreDtoGrantsGrant[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public ApiCoreResponsesEntityUri_SystemInt64_[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityData")]
		public ApiCoreDtoDatapointsDatapoint EntityData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ClickMeterInfrastructureValidationValidationFailure[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ApiCoreResponsesEntityUri_SystemInt64_ Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClickMeterInfrastructureValidationValidationFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public SystemObject Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorValue")]
		public SystemObject ErrorValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve current account data
		/// Account_Get account
		/// </summary>
		public async Task<ApiCoreDtoAccountingUser> Account_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update current account data
		/// Account_Post account
		/// </summary>
		public async Task<ApiCoreDtoAccountingUser> Account_PostAsync(ApiCoreDtoAccountingUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve list of a domains allowed to redirect in DDU mode
		/// Account_GetDomainWhitelist account/domainwhitelist
		/// </summary>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAccountingDomainWhitelistEntry_> Account_GetDomainWhitelistAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/domainwhitelist?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAccountingDomainWhitelistEntry_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an domain entry
		/// Account_PutDomainWhitelist account/domainwhitelist
		/// </summary>
		/// <param name="requestBody">The entry to add</param>
		public async Task<ApiCoreDtoAccountingDomainWhitelistEntry> Account_PutDomainWhitelistAsync(ApiCoreDtoAccountingDomainWhitelistEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/domainwhitelist";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingDomainWhitelistEntry>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an domain entry
		/// Account_DeleteDomainWhitelist account/domainwhitelist/{whitelistId}
		/// </summary>
		/// <param name="whitelistId">The id of the domain to delete</param>
		public async Task<ApiCoreDtoAccountingDomainWhitelistEntry> Account_DeleteDomainWhitelistAsync(string whitelistId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/domainwhitelist/"+ (whitelistId==null? "" : System.Uri.EscapeDataString(whitelistId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingDomainWhitelistEntry>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve list of a guest
		/// Account_GetGuests account/guests
		/// </summary>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Account_GetGuestsAsync(int offset, int limit, string sortBy, Account_GetGuestsSortDirection sortDirection, string textSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests?offset="+offset+"&limit="+limit+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a guest
		/// Account_PutGuest account/guests
		/// </summary>
		/// <param name="requestBody">Guest object to create</param>
		public async Task<ApiCoreDtoAccountingGuest> Account_PutGuestAsync(ApiCoreDtoAccountingGuest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingGuest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve count of guests
		/// Account_GetGuestsCount account/guests/count
		/// </summary>
		/// <param name="textSearch">Filter fields by this pattern</param>
		public async Task<ApiCoreResponsesCountResponce> Account_GetGuestsCountAsync(string textSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/count?textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a guest
		/// Account_DeleteGuest account/guests/{guestId}
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Account_DeleteGuestAsync(long guestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a guest
		/// Account_GetGuest account/guests/{guestId}
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		public async Task<ApiCoreDtoAccountingGuest> Account_GetGuestAsync(long guestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingGuest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a guest
		/// Account_PostGuest account/guests/{guestId}
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		/// <param name="requestBody">Guest object with field updated</param>
		public async Task<ApiCoreDtoAccountingGuest> Account_PostGuestAsync(long guestId, ApiCoreDtoAccountingGuest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingGuest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve permissions for a guest
		/// Account_GetPermissions account/guests/{guestId}/permissions
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		/// <param name="entityType">Can be "datapoint" or "group"</param>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="type">Can be "w" or "r"</param>
		/// <param name="entityId">Optional id of the datapoint/group entity to filter by</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoGrantsGrant_> Account_GetPermissionsAsync(long guestId, Account_GetPermissionsEntityType entityType, int offset, int limit, Account_GetPermissionsType type, long entityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId+"/permissions?entityType=" + entityType+"&offset="+offset+"&limit="+limit+"&type=" + type+"&entityId="+entityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoGrantsGrant_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve count of the permissions for a guest
		/// Account_GetPermissionsCount account/guests/{guestId}/permissions/count
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		/// <param name="entityType">Can be "datapoint" or "group"</param>
		/// <param name="type">Can be "w" or "r"</param>
		/// <param name="entityId">Optional id of the datapoint/group entity to filter by</param>
		public async Task<ApiCoreResponsesCountResponce> Account_GetPermissionsCountAsync(long guestId, Account_GetPermissionsEntityType entityType, Account_GetPermissionsType type, long entityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId+"/permissions/count?entityType=" + entityType+"&type=" + type+"&entityId="+entityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change the permission on a shared object
		/// AccountPostByGuestIdAndType account/guests/{guestId}/{type}/permissions/patch
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		/// <param name="type">Can be "datapoint" or "group"</param>
		/// <param name="requestBody">The patch permission request</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> AccountPostByGuestIdAndTypeAsync(long guestId, Account_GetPermissionsEntityType type, ApiCoreRequestsPermissionPatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId+"/"+type+"/permissions/patch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change the permission on a shared object
		/// Account_PatchPermissions account/guests/{guestId}/{type}/permissions/patch
		/// </summary>
		/// <param name="guestId">Id of the guest</param>
		/// <param name="type">Can be "datapoint" or "group"</param>
		/// <param name="requestBody">The patch permission request</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Account_PatchPermissionsAsync(long guestId, Account_GetPermissionsEntityType type, ApiCoreRequestsPermissionPatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/guests/"+guestId+"/"+type+"/permissions/patch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve list of a ip to exclude from event tracking
		/// Account_GetIpBlacklist account/ipblacklist
		/// </summary>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAccountingIpBlacklistEntry_> Account_GetIpBlacklistAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/ipblacklist?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAccountingIpBlacklistEntry_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an ip blacklist entry
		/// Account_PutIpBlacklist account/ipblacklist
		/// </summary>
		/// <param name="requestBody">The entry to add</param>
		public async Task<ApiCoreDtoAccountingIpBlacklistEntry> Account_PutIpBlacklistAsync(ApiCoreDtoAccountingIpBlacklistEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/ipblacklist";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingIpBlacklistEntry>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an ip blacklist entry
		/// Account_DeleteIpBlacklist account/ipblacklist/{blacklistId}
		/// </summary>
		/// <param name="blacklistId">The id of the ip to delete</param>
		public async Task<ApiCoreDtoAccountingIpBlacklistEntry> Account_DeleteIpBlacklistAsync(string blacklistId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/ipblacklist/"+ (blacklistId==null? "" : System.Uri.EscapeDataString(blacklistId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingIpBlacklistEntry>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve current account plan
		/// Account_GetPlan account/plan
		/// </summary>
		public async Task<ApiCoreDtoAccountingPlan> Account_GetPlanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingPlan>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this customer for a timeframe
		/// Aggregated_GetStatisticsSingle aggregated
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="hourly">If using "yesterday" or "today" timeframe you can ask for the hourly detail</param>
		public async Task<ApiCoreDtoAggregatedAggregatedResult> Aggregated_GetStatisticsSingleAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, bool hourly, string onlyFavorites, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aggregated?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&hourly="+hourly+"&onlyFavorites=" + (onlyFavorites==null? "" : System.Uri.EscapeDataString(onlyFavorites));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)
		/// Aggregated_GetStatisticsList aggregated/list
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> Aggregated_GetStatisticsListAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetStatisticsListGroupBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aggregated/list?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about a subset of conversions for a timeframe with conversions data
		/// Aggregated_GetConversionsSummary aggregated/summary/conversions
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of conversion ("deleted"/"active")</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		public async Task<ApiCoreDtoAggregatedAggregatedSummaryResult> Aggregated_GetConversionsSummaryAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetConversionsSummaryStatus status, string sortBy, Account_GetGuestsSortDirection sortDirection, int offset, int limit, string textSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aggregated/summary/conversions?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + status+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&offset="+offset+"&limit="+limit+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedSummaryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
		/// Aggregated_GetDatapointsSummary aggregated/summary/datapoints
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="type">Type of datapoint ("tl"/"tp")</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of datapoint ("deleted"/"active"/"paused"/"spam")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the datapoint marked as favourite</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="groupId">Filter by this group id</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		public async Task<ApiCoreDtoAggregatedAggregatedSummaryResult> Aggregated_GetDatapointsSummaryAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, Aggregated_GetDatapointsSummaryType type, string fromDay, string toDay, Aggregated_GetDatapointsSummaryStatus status, string tag, bool favourite, string sortBy, Account_GetGuestsSortDirection sortDirection, int offset, int limit, long groupId, string textSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aggregated/summary/datapoints?timeFrame=" + timeFrame+"&type=" + type+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + status+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&offset="+offset+"&limit="+limit+"&groupId="+groupId+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedSummaryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about a subset of groups for a timeframe with groups data
		/// Aggregated_GetGroupsSummary aggregated/summary/groups
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of group ("deleted"/"active")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the group marked as favourite</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		public async Task<ApiCoreDtoAggregatedAggregatedSummaryResult> Aggregated_GetGroupsSummaryAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetConversionsSummaryStatus status, string tag, bool favourite, string sortBy, Account_GetGuestsSortDirection sortDirection, int offset, int limit, string textSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "aggregated/summary/groups?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + status+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&offset="+offset+"&limit="+limit+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedSummaryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the latest list of events of this account. Limited to last 100.
		/// ClickStream_Get clickstream
		/// </summary>
		/// <param name="group">Filter by this group id (mutually exclusive with "datapoint" and "conversion")</param>
		/// <param name="datapoint">Filter by this datapoint id (mutually exclusive with "group" and "conversion")</param>
		/// <param name="conversion">Filter by this conversion id (mutually exclusive with "datapoint" and "group")</param>
		/// <param name="pageSize">Limit results to this number</param>
		/// <param name="filter">Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoClickStreamHit_> ClickStream_GetAsync(long group, long datapoint, long conversion, int pageSize, ClickStream_GetFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clickstream?group="+group+"&datapoint="+datapoint+"&conversion="+conversion+"&pageSize="+pageSize+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoClickStreamHit_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of conversions
		/// Conversions_Get conversions
		/// </summary>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="status">Status of conversion ("deleted"/"active")</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude conversions created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude conversions created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Conversions_GetAsync(int offset, int limit, Aggregated_GetConversionsSummaryStatus status, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions?offset="+offset+"&limit="+limit+"&status=" + status+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a conversion
		/// Conversions_Put conversions
		/// </summary>
		/// <param name="requestBody">The body of the conversion</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Conversions_PutAsync(ApiCoreDtoConversionsConversion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
		/// Conversions_GetStatisticsAllList conversions/aggregated/list
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of conversion ("deleted"/"active")</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> Conversions_GetStatisticsAllListAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetConversionsSummaryStatus status, Aggregated_GetStatisticsListGroupBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/aggregated/list?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + status+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a count of conversions
		/// Conversions_Count conversions/count
		/// </summary>
		/// <param name="status">Status of conversion ("deleted"/"active")</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude conversions created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude conversions created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> Conversions_CountAsync(Aggregated_GetConversionsSummaryStatus status, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/count?status=" + status+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete conversion specified by id
		/// Conversions_Delete conversions/{conversionId}
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Conversions_DeleteAsync(long conversionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve conversion specified by id
		/// ConversionsGetByConversionId conversions/{conversionId}
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		public async Task<ApiCoreDtoConversionsConversion> ConversionsGetByConversionIdAsync(long conversionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoConversionsConversion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update conversion specified by id
		/// Conversions_Post conversions/{conversionId}
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="requestBody">Updated body of the conversion</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Conversions_PostAsync(long conversionId, ApiCoreDtoConversionsConversion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this conversion for a timeframe
		/// Conversions_GetStatisticsSingle conversions/{conversionId}/aggregated
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="tag">Filter by this tag name</param>
		/// <param name="favourite">Is the datapoint marked as favourite</param>
		/// <param name="hourly">If using "yesterday" or "today" timeframe you can ask for the hourly detail</param>
		public async Task<ApiCoreDtoAggregatedAggregatedResult> Conversions_GetStatisticsSingleAsync(long conversionId, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, string tag, bool favourite, bool hourly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/aggregated?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite+"&hourly="+hourly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
		/// Conversions_GetStatisticsList conversions/{conversionId}/aggregated/list
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> Conversions_GetStatisticsListAsync(long conversionId, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetStatisticsListGroupBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/aggregated/list?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of datapoints connected to this conversion
		/// Conversions_GetDatapoints conversions/{conversionId}/datapoints
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="type">Type of datapoint ("tl"/"tp")</param>
		/// <param name="status">Status of datapoint ("deleted"/"active"/"paused"/"spam")</param>
		/// <param name="tags">Filter by this tag name</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Conversions_GetDatapointsAsync(long conversionId, int offset, int limit, Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/datapoints?offset="+offset+"&limit="+limit+"&type=" + type+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify the association between a conversion and multiple datapoints
		/// ConversionsPutByConversionId conversions/{conversionId}/datapoints/batch/patch
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="requestBody">Patch requests</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> ConversionsPutByConversionIdAsync(long conversionId, ApiCoreRequestsPatchBodyBatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/datapoints/batch/patch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a count of datapoints connected to this conversion
		/// Conversions_GetDatapointsCount conversions/{conversionId}/datapoints/count
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="type">Type of datapoint ("tl"/"tp")</param>
		/// <param name="status">Status of datapoint ("deleted"/"active"/"paused"/"spam")</param>
		/// <param name="tags">Filter by this tag name</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> Conversions_GetDatapointsCountAsync(long conversionId, string type, string status, string tags, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/datapoints/count?type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify the association between a conversion and a datapoint
		/// Conversions_Patch conversions/{conversionId}/datapoints/patch
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="requestBody">Patch request</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Conversions_PatchAsync(long conversionId, ApiCoreRequestsConversionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/datapoints/patch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of events related to this conversion.
		/// Conversions_GetHits conversions/{conversionId}/hits
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="timeframe">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="offset">Offset where to start from (it's the lastKey field in the response object)</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="filter">Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")</param>
		public async Task<ApiCoreDtoClickStreamHitListPage> Conversions_GetHitsAsync(long conversionId, Conversions_GetHitsTimeframe timeframe, int limit, string offset, string fromDay, string toDay, Conversions_GetHitsFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/hits?timeframe=" + timeframe+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoClickStreamHitListPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fast patch the "notes" field of a conversion
		/// Conversions_PatchNotes conversions/{conversionId}/notes
		/// </summary>
		/// <param name="conversionId">Id of the conversion</param>
		/// <param name="requestBody">Patch requests</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Conversions_PatchNotesAsync(long conversionId, ApiCoreRequestsGenericTextPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversions/"+conversionId+"/notes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the datapoints associated to the user
		/// DataPoints_Get datapoints
		/// </summary>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="type">Type of the datapoint ("tp"/"tl")</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="onlyFavorites">Filter fields by favourite status</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> DataPoints_GetAsync(int offset, int limit, Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, bool onlyFavorites, string sortBy, Account_GetGuestsSortDirection sortDirection, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints?offset="+offset+"&limit="+limit+"&type=" + type+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&onlyFavorites="+onlyFavorites+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a datapoint
		/// DataPoints_Put datapoints
		/// </summary>
		/// <param name="requestBody">The body of the datapoint</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> DataPoints_PutAsync(ApiCoreDtoDatapointsDatapoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this customer for a timeframe by groups
		/// DataPoints_GetStatisticsAggregatedSingle datapoints/aggregated
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="type">Type of datapoint ("tl"/"tp")</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="hourly">If using "yesterday" or "today" timeframe you can ask for the hourly detail</param>
		/// <param name="status">Status of datapoint ("deleted"/"active"/"paused"/"spam")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the datapoint is marked as favourite</param>
		public async Task<ApiCoreDtoAggregatedAggregatedResult> DataPoints_GetStatisticsAggregatedSingleAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, Aggregated_GetDatapointsSummaryType type, string fromDay, string toDay, bool hourly, Aggregated_GetDatapointsSummaryStatus status, string tag, bool favourite, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/aggregated?timeFrame=" + timeFrame+"&type=" + type+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&hourly="+hourly+"&status=" + status+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
		/// DataPoints_GetStatisticsAllList datapoints/aggregated/list
		/// </summary>
		/// <param name="type">Type of datapoint ("tl"/"tp")</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of datapoint ("deleted"/"active"/"paused"/"spam")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the datapoint is marked as favourite</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> DataPoints_GetStatisticsAllListAsync(Aggregated_GetDatapointsSummaryType type, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetDatapointsSummaryStatus status, string tag, bool favourite, Aggregated_GetStatisticsListGroupBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/aggregated/list?type=" + type+"&timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + status+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete multiple datapoints
		/// DataPoints_BatchDelete datapoints/batch
		/// </summary>
		public async Task<ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_> DataPoints_BatchDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update multiple datapoints
		/// DataPoints_BatchPost datapoints/batch
		/// </summary>
		/// <param name="requestBody">A json containing the datapoints to update.</param>
		public async Task<ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_> DataPoints_BatchPostAsync(ApiCoreRequestsDatapointsBatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple datapoints
		/// DataPoints_BatchPut datapoints/batch
		/// </summary>
		/// <param name="requestBody">A json containing the datapoints to create.</param>
		public async Task<ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_> DataPoints_BatchPutAsync(ApiCoreRequestsDatapointsBatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesModifyBatchItemResponce_ApiCoreDtoDatapointsDatapoint_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count the datapoints associated to the user
		/// DataPoints_Count datapoints/count
		/// </summary>
		/// <param name="type">Type of the datapoint ("tp"/"tl")</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="onlyFavorites">Filter fields by favourite status</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> DataPoints_CountAsync(Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, bool onlyFavorites, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/count?type=" + type+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&onlyFavorites="+onlyFavorites+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a datapoint
		/// DataPoints_Delete datapoints/{id}
		/// </summary>
		/// <param name="id">The id of the datapoint</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> DataPoints_DeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a datapoint
		/// DataPointsGetById datapoints/{id}
		/// </summary>
		/// <param name="id">The id of the datapoint</param>
		public async Task<ApiCoreDtoDatapointsDatapoint> DataPointsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoDatapointsDatapoint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a datapoint
		/// DataPoints_Post datapoints/{id}
		/// </summary>
		/// <param name="id">The id of the datapoint</param>
		/// <param name="requestBody">The body of the datapoint</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> DataPoints_PostAsync(long id, ApiCoreDtoDatapointsDatapoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this datapoint for a timeframe
		/// DataPoints_GetStatisticsSingle datapoints/{id}/aggregated
		/// </summary>
		/// <param name="id">Id of the datapoint</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="hourly">If using "yesterday" or "today" timeframe you can ask for the hourly detail</param>
		public async Task<ApiCoreDtoAggregatedAggregatedResult> DataPoints_GetStatisticsSingleAsync(long id, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, bool hourly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id+"/aggregated?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&hourly="+hourly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
		/// DataPoints_GetStatisticsList datapoints/{id}/aggregated/list
		/// </summary>
		/// <param name="id">Id of the datapoint</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> DataPoints_GetStatisticsListAsync(long id, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetStatisticsListGroupBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id+"/aggregated/list?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fast switch the "favourite" field of a datapoint
		/// DataPoints_PatchFavourite datapoints/{id}/favourite
		/// </summary>
		/// <param name="id">Id of the datapoint</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> DataPoints_PatchFavouriteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id+"/favourite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of events related to this datapoint.
		/// DataPoints_GetHits datapoints/{id}/hits
		/// </summary>
		/// <param name="id">Id of the datapoint</param>
		/// <param name="timeframe">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="offset">Offset where to start from (it's the lastKey field in the response object)</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="filter">Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")</param>
		public async Task<ApiCoreDtoClickStreamHitListPage> DataPoints_GetHitsAsync(long id, Conversions_GetHitsTimeframe timeframe, int limit, string offset, string fromDay, string toDay, Conversions_GetHitsFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id+"/hits?timeframe=" + timeframe+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoClickStreamHitListPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fast patch the "notes" field of a datapoint
		/// DataPoints_PatchNotes datapoints/{id}/notes
		/// </summary>
		/// <param name="id">Id of the datapoint</param>
		/// <param name="requestBody">Patch requests</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> DataPoints_PatchNotesAsync(long id, ApiCoreRequestsGenericTextPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datapoints/"+id+"/notes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of domains
		/// Domains_Get domains
		/// </summary>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="type">Type of domain ("system"/"go"/"personal"/"dedicated"). If not specified default is "system"</param>
		/// <param name="name">Filter domains with this anmen</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Domains_GetAsync(int offset, int limit, Domains_GetType type, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains?offset="+offset+"&limit="+limit+"&type=" + type+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a domain
		/// Domains_Put domains
		/// </summary>
		/// <param name="requestBody">The domain to create</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Domains_PutAsync(ApiCoreDtoDomainsDomain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve count of domains
		/// Domains_Count domains/count
		/// </summary>
		/// <param name="type">Type of domain ("system"/"go"/"personal"/"dedicated"). If not specified default is "system"</param>
		/// <param name="name">Filter domains with this anmen</param>
		public async Task<ApiCoreResponsesCountResponce> Domains_CountAsync(Domains_GetType type, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/count?type=" + type+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a domain
		/// Domains_Delete domains/{id}
		/// </summary>
		/// <param name="id">Id of domain</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Domains_DeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a domain
		/// DomainsGetById domains/{id}
		/// </summary>
		/// <param name="id">Id of domain</param>
		public async Task<ApiCoreDtoDomainsDomain> DomainsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoDomainsDomain>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a domain
		/// Domains_Update domains/{id}
		/// </summary>
		/// <param name="id">Id of domain</param>
		/// <param name="requestBody">The domain to update</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Domains_UpdateAsync(long id, ApiCoreDtoDomainsDomain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the groups associated to the user.
		/// Groups_Get groups
		/// </summary>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="status">Status of the group</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude groups created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude groups created after this date (YYYYMMDD)</param>
		/// <param name="write">Write permission</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Groups_GetAsync(int offset, int limit, Aggregated_GetConversionsSummaryStatus status, string tags, string textSearch, string createdAfter, string createdBefore, bool write, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups?offset="+offset+"&limit="+limit+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore))+"&write="+write;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a group
		/// Groups_Put groups
		/// </summary>
		/// <param name="requestBody">The body of the group</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Groups_PutAsync(ApiCoreDtoGroupsGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this customer for a timeframe by groups
		/// Groups_GetStatisticsAggregatedSingle groups/aggregated
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="hourly">If using "yesterday" or "today" timeframe you can ask for the hourly detail</param>
		/// <param name="status">Status of group ("deleted"/"active")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the group is marked as favourite</param>
		public async Task<ApiCoreDtoAggregatedAggregatedResult> Groups_GetStatisticsAggregatedSingleAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, bool hourly, Aggregated_GetConversionsSummaryStatus status, string tag, bool favourite, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/aggregated?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&hourly="+hourly+"&status=" + status+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
		/// Groups_GetStatisticsAllList groups/aggregated/list
		/// </summary>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of group ("deleted"/"active")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the group is marked as favourite</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> Groups_GetStatisticsAllListAsync(Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, string status, string tag, bool favourite, Aggregated_GetConversionsSummaryStatus groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/aggregated/list?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count the groups associated to the user.
		/// Groups_Count groups/count
		/// </summary>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude groups created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude groups created after this date (YYYYMMDD)</param>
		/// <param name="write">Write permission</param>
		public async Task<ApiCoreResponsesCountResponce> Groups_CountAsync(Aggregated_GetConversionsSummaryStatus status, string tags, string textSearch, string createdAfter, string createdBefore, bool write, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/count?status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore))+"&write="+write;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete group specified by id
		/// Groups_Delete groups/{id}
		/// </summary>
		/// <param name="id">Id of the group</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Groups_DeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a group
		/// GroupsGetById groups/{id}
		/// </summary>
		/// <param name="id">The id of the group</param>
		public async Task<ApiCoreDtoGroupsGroup> GroupsGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoGroupsGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a group
		/// Groups_Post groups/{id}
		/// </summary>
		/// <param name="id">The id of the group</param>
		/// <param name="requestBody">The body of the group</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Groups_PostAsync(long id, ApiCoreDtoGroupsGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this group for a timeframe
		/// Groups_GetStatisticsSingle groups/{id}/aggregated
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="hourly">If using "yesterday" or "today" timeframe you can ask for the hourly detail</param>
		public async Task<ApiCoreDtoAggregatedAggregatedResult> Groups_GetStatisticsSingleAsync(long id, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, bool hourly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/aggregated?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&hourly="+hourly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
		/// Groups_GetStatisticsList groups/{id}/aggregated/list
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="groupBy">The temporal entity you want to group by ("week"/"month"). If unspecified is "day".</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_> Groups_GetStatisticsListAsync(long id, Aggregated_GetStatisticsSingleTimeFrame timeFrame, string fromDay, string toDay, Aggregated_GetStatisticsListGroupBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/aggregated/list?timeFrame=" + timeFrame+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreDtoAggregatedAggregatedResult_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
		/// Groups_GetDatapointsSummary groups/{id}/aggregated/summary
		/// </summary>
		/// <param name="id">Filter by this group id</param>
		/// <param name="timeFrame">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="type">Type of datapoint ("tl"/"tp")</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="status">Status of datapoint ("deleted"/"active"/"paused"/"spam")</param>
		/// <param name="tag">A comma separated list of tags you want to filter with.</param>
		/// <param name="favourite">Is the datapoint marked as favourite</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="offset">Offset where to start from
		/// Min length: 0
		// </param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		public async Task<ApiCoreDtoAggregatedAggregatedSummaryResult> Groups_GetDatapointsSummaryAsync(long id, Aggregated_GetStatisticsSingleTimeFrame timeFrame, Aggregated_GetDatapointsSummaryType type, string fromDay, string toDay, Aggregated_GetConversionsSummaryStatus status, string tag, bool favourite, string sortBy, Account_GetGuestsSortDirection sortDirection, int offset, int limit, string textSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/aggregated/summary?timeFrame=" + timeFrame+"&type=" + type+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&status=" + status+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&favourite="+favourite+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&offset="+offset+"&limit="+limit+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAggregatedAggregatedSummaryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the datapoints associated to the user in this group.
		/// Groups_GetDatapoints groups/{id}/datapoints
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="type">Type of the datapoint ("tp"/"tl")</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="onlyFavorites">Filter fields by favourite status</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Groups_GetDatapointsAsync(long id, int offset, int limit, Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, bool onlyFavorites, string sortBy, Account_GetGuestsSortDirection sortDirection, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/datapoints?offset="+offset+"&limit="+limit+"&type=" + type+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&onlyFavorites="+onlyFavorites+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a datapoint in this group
		/// Groups_PutDatapoint groups/{id}/datapoints
		/// </summary>
		/// <param name="id">The id of the group</param>
		/// <param name="requestBody">The body of the datapoint</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Groups_PutDatapointAsync(long id, ApiCoreDtoDatapointsDatapoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/datapoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count the datapoints associated to the user in this group.
		/// Groups_GetDatapointsCount groups/{id}/datapoints/count
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="type">Type of the datapoint ("tp"/"tl")</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="onlyFavorites">Filter fields by favourite status</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> Groups_GetDatapointsCountAsync(long id, Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, bool onlyFavorites, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/datapoints/count?type=" + type+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&onlyFavorites="+onlyFavorites+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fast switch the "favourite" field of a group
		/// Groups_PatchFavourite groups/{id}/favourite
		/// </summary>
		/// <param name="id">Id of the group</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Groups_PatchFavouriteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/favourite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of events related to this group.
		/// Groups_GetHits groups/{id}/hits
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="timeframe">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="limit">Limit results to this number
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="offset">Offset where to start from (it's the lastKey field in the response object)</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="filter">Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")</param>
		public async Task<ApiCoreDtoClickStreamHitListPage> Groups_GetHitsAsync(long id, Conversions_GetHitsTimeframe timeframe, int limit, string offset, string fromDay, string toDay, Conversions_GetHitsFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/hits?timeframe=" + timeframe+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoClickStreamHitListPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fast patch the "notes" field of a group
		/// Groups_PatchNotes groups/{id}/notes
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="requestBody">Patch requests</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Groups_PatchNotesAsync(long id, ApiCoreRequestsGenericTextPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id+"/notes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of events related to this account.
		/// Hits_GetHits hits
		/// </summary>
		/// <param name="timeframe">Timeframe of the request. See list at $timeframeList</param>
		/// <param name="limit">Limit results to this number</param>
		/// <param name="offset">Offset where to start from (it's the lastKey field in the response object)</param>
		/// <param name="fromDay">If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)</param>
		/// <param name="toDay">If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)</param>
		/// <param name="filter">Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")</param>
		public async Task<ApiCoreDtoClickStreamHitListPage> Hits_GetHitsAsync(Conversions_GetHitsTimeframe timeframe, int limit, string offset, string fromDay, string toDay, Conversions_GetHitsFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hits?timeframe=" + timeframe+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&fromDay=" + (fromDay==null? "" : System.Uri.EscapeDataString(fromDay))+"&toDay=" + (toDay==null? "" : System.Uri.EscapeDataString(toDay))+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoClickStreamHitListPage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve current account data
		/// Me_GetMe me
		/// </summary>
		public async Task<ApiCoreDtoAccountingUser> Me_GetMeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve current account plan
		/// Me_GetMePlan me/plan
		/// </summary>
		public async Task<ApiCoreDtoAccountingPlan> Me_GetMePlanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoAccountingPlan>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the retargeting scripts associated to the user
		/// Retargeting_Get retargeting
		/// </summary>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Retargeting_GetAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a retargeting script
		/// Retargeting_Put retargeting
		/// </summary>
		/// <param name="requestBody">The body of the retargeting script</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Retargeting_PutAsync(ApiCoreDtoRetargetingRetargetingScript requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve count of retargeting scripts
		/// Retargeting_Count retargeting/count
		/// </summary>
		public async Task<ApiCoreResponsesCountResponce> Retargeting_CountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting/count";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a retargeting script (and remove associations)
		/// Retargeting_Delete retargeting/{id}
		/// </summary>
		/// <param name="id">The id of the retargeting script</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Retargeting_DeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a retargeting script object
		/// RetargetingGetById retargeting/{id}
		/// </summary>
		/// <param name="id">The id of the retargeting script</param>
		public async Task<ApiCoreDtoRetargetingRetargetingScript> RetargetingGetByIdAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoRetargetingRetargetingScript>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a retargeting script
		/// Retargeting_Post retargeting/{id}
		/// </summary>
		/// <param name="id">The id of the retargeting script</param>
		/// <param name="requestBody">The body of the retargeting script</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Retargeting_PostAsync(long id, ApiCoreDtoRetargetingRetargetingScript requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the datapoints associated to the retargeting script.
		/// Retargeting_GetDatapoints retargeting/{id}/datapoints
		/// </summary>
		/// <param name="id">Id of the retargeting script</param>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="onlyFavorites">Filter fields by favourite status</param>
		/// <param name="sortBy">Field to sort by</param>
		/// <param name="sortDirection">Direction of sort "asc" or "desc"</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Retargeting_GetDatapointsAsync(long id, int offset, int limit, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, bool onlyFavorites, string sortBy, Account_GetGuestsSortDirection sortDirection, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting/"+id+"/datapoints?offset="+offset+"&limit="+limit+"&status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&onlyFavorites="+onlyFavorites+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortDirection=" + sortDirection+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count the datapoints associated to the retargeting script.
		/// Retargeting_GetDatapointsCount retargeting/{id}/datapoints/count
		/// </summary>
		/// <param name="id">Id of the group</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="tags">A comma separated list of tags you want to filter with.</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="onlyFavorites">Filter fields by favourite status</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> Retargeting_GetDatapointsCountAsync(long id, Aggregated_GetDatapointsSummaryStatus status, string tags, string textSearch, bool onlyFavorites, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retargeting/"+id+"/datapoints/count?status=" + status+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&onlyFavorites="+onlyFavorites+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the groups associated to the user filtered by this tag.
		/// Tags_Get tags
		/// </summary>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="name">Name of the tag</param>
		/// <param name="datapoints">Comma separated list of datapoints id to filter by</param>
		/// <param name="groups">Comma separated list of groups id to filter by</param>
		/// <param name="type">Type of entity related to the tag</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Tags_GetAsync(int offset, int limit, string name, string datapoints, string groups, Tags_GetType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags?offset="+offset+"&limit="+limit+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&datapoints=" + (datapoints==null? "" : System.Uri.EscapeDataString(datapoints))+"&groups=" + (groups==null? "" : System.Uri.EscapeDataString(groups))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a tag
		/// Tags_Put tags
		/// </summary>
		/// <param name="requestBody">The body of the tag</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Tags_PutAsync(ApiCoreDtoTagsTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the groups associated to the user filtered by this tag.
		/// Tags_Count tags/count
		/// </summary>
		/// <param name="name">Name of the tag</param>
		/// <param name="datapoints">Comma separated list of datapoints id to filter by</param>
		/// <param name="groups">Comma separated list of groups id to filter by</param>
		/// <param name="type">Type of entity related to the tag</param>
		public async Task<SystemObject> Tags_CountAsync(string name, string datapoints, string groups, Tags_GetType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/count?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&datapoints=" + (datapoints==null? "" : System.Uri.EscapeDataString(datapoints))+"&groups=" + (groups==null? "" : System.Uri.EscapeDataString(groups))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a tag
		/// Tags_Delete tags/{tagId}
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		public async Task<SystemObject> Tags_DeleteAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a tag
		/// TagsGetByTagId tags/{tagId}
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		public async Task<ApiCoreDtoTagsTag> TagsGetByTagIdAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreDtoTagsTag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the association of this tag with all datapoints
		/// Tags_DeleteRelatedDatapoints tags/{tagId}/datapoints
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Tags_DeleteRelatedDatapointsAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/datapoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the datapoints associated to the user filtered by this tag
		/// Tags_GetDatapoints tags/{tagId}/datapoints
		/// </summary>
		/// <param name="tagId">Id of the tag.</param>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="type">Type of the datapoint ("tp"/"tl")</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Tags_GetDatapointsAsync(long tagId, int offset, int limit, Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/datapoints?offset="+offset+"&limit="+limit+"&type=" + type+"&status=" + status+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count the datapoints associated to the user filtered by this tag
		/// Tags_GetDatapointsCount tags/{tagId}/datapoints/count
		/// </summary>
		/// <param name="tagId">Id of the tag.</param>
		/// <param name="type">Type of the datapoint ("tp"/"tl")</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude datapoints created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude datapoints created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> Tags_GetDatapointsCountAsync(long tagId, Aggregated_GetDatapointsSummaryType type, Aggregated_GetDatapointsSummaryStatus status, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/datapoints/count?type=" + type+"&status=" + status+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associate/Deassociate a tag with a datapoint
		/// Tags_PatchDataPoint tags/{tagId}/datapoints/patch
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		/// <param name="requestBody">The body patch</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Tags_PatchDataPointAsync(long tagId, ApiCoreRequestsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/datapoints/patch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the association of this tag with all groups
		/// Tags_DeleteRelatedGroups tags/{tagId}/groups
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Tags_DeleteRelatedGroupsAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of all the groups associated to the user filtered by this tag.
		/// Tags_GetGroups tags/{tagId}/groups
		/// </summary>
		/// <param name="tagId">Id of the tag.</param>
		/// <param name="offset">Where to start when retrieving elements. Default is 0 if not specified.
		/// Min length: 0
		// </param>
		/// <param name="limit">Maximum elements to retrieve. Default to 20 if not specified.
		/// Min length: 0
		/// Max length: 0
		// </param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude groups created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude groups created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_> Tags_GetGroupsAsync(long tagId, int offset, int limit, Aggregated_GetConversionsSummaryStatus status, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/groups?offset="+offset+"&limit="+limit+"&status=" + status+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntitiesResponse_ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count the groups associated to the user filtered by this tag
		/// Tags_GetGroupsCount tags/{tagId}/groups/count
		/// </summary>
		/// <param name="tagId">Id of the tag.</param>
		/// <param name="status">Status of the datapoint</param>
		/// <param name="textSearch">Filter fields by this pattern</param>
		/// <param name="createdAfter">Exclude groups created before this date (YYYYMMDD)</param>
		/// <param name="createdBefore">Exclude groups created after this date (YYYYMMDD)</param>
		public async Task<ApiCoreResponsesCountResponce> Tags_GetGroupsCountAsync(long tagId, Aggregated_GetConversionsSummaryStatus status, string textSearch, string createdAfter, string createdBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/groups/count?status=" + status+"&textSearch=" + (textSearch==null? "" : System.Uri.EscapeDataString(textSearch))+"&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&createdBefore=" + (createdBefore==null? "" : System.Uri.EscapeDataString(createdBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesCountResponce>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associate/Deassociate a tag with a group
		/// Tags_PatchGroup tags/{tagId}/groups/patch
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		/// <param name="requestBody">The body patch</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Tags_PatchGroupAsync(long tagId, ApiCoreRequestsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/groups/patch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fast patch a tag name
		/// Tags_PatchTagName tags/{tagId}/name
		/// </summary>
		/// <param name="tagId">Id of the tag</param>
		/// <param name="requestBody">The body patch</param>
		public async Task<ApiCoreResponsesEntityUri_SystemInt64_> Tags_PatchTagNameAsync(long tagId, ApiCoreRequestsGenericTextPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+tagId+"/name";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApiCoreResponsesEntityUri_SystemInt64_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Account_GetGuestsSortDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum Account_GetPermissionsEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		datapoint = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
	}
	
	public enum Account_GetPermissionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		w = 1,
	}
	
	public enum Aggregated_GetStatisticsSingleTimeFrame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		today = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yesterday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last30 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastmonth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentmonth = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		previousmonth = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last90 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last120 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last180 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last12months = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastyear = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentyear = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		beginning = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 14,
	}
	
	public enum Aggregated_GetStatisticsListGroupBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		week = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		month = 1,
	}
	
	public enum Aggregated_GetConversionsSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
	}
	
	public enum Aggregated_GetDatapointsSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tl = 1,
	}
	
	public enum Aggregated_GetDatapointsSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paused = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spam = 3,
	}
	
	public enum ClickStream_GetFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spiders = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uniques = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonuniques = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conversions = 4,
	}
	
	public enum Conversions_GetHitsTimeframe
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yesterday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last7 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last30 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastmonth = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentmonth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		previousmonth = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last90 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last120 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last180 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 9,
	}
	
	public enum Conversions_GetHitsFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spiders = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uniques = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonuniques = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conversions = 3,
	}
	
	public enum Domains_GetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 3,
	}
	
	public enum Tags_GetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gr = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
