//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Action
	{
		
		/// <summary>
		/// [Required] Title of the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// [Optional] Url of the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents the settings for Cloud audit logging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLoggingSettings
	{
		
		/// <summary>
		/// Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logAdminReadActions")]
		public System.Nullable<System.Boolean> LogAdminReadActions { get; set; }
		
		/// <summary>
		/// Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logDataReadActions")]
		public System.Nullable<System.Boolean> LogDataReadActions { get; set; }
		
		/// <summary>
		/// Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logDataWriteActions")]
		public System.Nullable<System.Boolean> LogDataWriteActions { get; set; }
		
		/// <summary>
		/// The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackgroundColoredText
	{
		
		/// <summary>
		/// [Optional] Color of the background. The text color can change depending on the selected background color, and the client does not have control over this. If missing, the background will be WHITE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public System.Nullable<BackgroundColoredTextBackgroundColor> BackgroundColor { get; set; }
		
		/// <summary>
		/// [Required] The text to display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundColoredTextBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_COLOR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORANGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREY = 6,
	}
	
	/// <summary>
	/// Used to provide a search operator for boolean properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BooleanOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the boolean property. For example, if operatorName is *closed* and the property's name is *isClosed*, then queries like *closed:<value>* show results only where the value of the property named *isClosed* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for boolean properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BooleanPropertyOptions
	{
		
		/// <summary>
		/// Used to provide a search operator for boolean properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public BooleanOperatorOptions OperatorOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckAccessResponse
	{
		
		/// <summary>
		/// Returns true if principal has access. Returns false otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAccess")]
		public System.Nullable<System.Boolean> HasAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeFilter
	{
		
		/// <summary>
		/// The logic operator of the sub filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicOperator")]
		public System.Nullable<CompositeFilterLogicOperator> LogicOperator { get; set; }
		
		/// <summary>
		/// Sub filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subFilters")]
		public Filter[] SubFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompositeFilterLogicOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT = 2,
	}
	
	/// <summary>
	/// A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember(Name="compositeFilter")]
		public CompositeFilter CompositeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueFilter")]
		public ValueFilter ValueFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValueFilter
	{
		
		/// <summary>
		/// The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Definition of a single value with generic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Value Value { get; set; }
	}
	
	/// <summary>
	/// Definition of a single value with generic type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Value
	{
		
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateValue")]
		public Date DateValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public string IntegerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestampValue")]
		public string TimestampValue { get; set; }
	}
	
	/// <summary>
	/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of month. Must be from 1 to 31 and valid for the year and month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of date. Must be from 1 to 12.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of date. Must be from 1 to 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Content
	{
		
		/// <summary>
		/// [Optional] Actions for this card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public SafeHtmlProto Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public BackgroundColoredText Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public BackgroundColoredText Title { get; set; }
	}
	
	/// <summary>
	/// IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SafeHtmlProto
	{
		
		/// <summary>
		/// IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateDoNotAccessOrElseSafeHtmlWrappedValue")]
		public string PrivateDoNotAccessOrElseSafeHtmlWrappedValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Context
	{
		
		/// <summary>
		/// [Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app")]
		public string[] App { get; set; }
		
		/// <summary>
		/// [Optional] Day of week when the card should be shown, where 0 is Monday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public int[] DayOfWeek { get; set; }
		
		/// <summary>
		/// [Optional] Date (in seconds since epoch) when the card should stop being shown. If missing, end_date_sec will be set to Jan 1st, 2100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateSec")]
		public string EndDateSec { get; set; }
		
		/// <summary>
		/// [Optional] End time in seconds, within a day, when the card should stop being shown if it's within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600 sec/hour), i.e., midnight next day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDayOffsetSec")]
		public string EndDayOffsetSec { get; set; }
		
		/// <summary>
		/// [Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If missing, the card is going to show to clients regardless of their locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string[] Locale { get; set; }
		
		/// <summary>
		/// [Optional] Text-free locations where the card should be shown. This is expected to match the user's location in focus. If no location is specified, the card will be shown for any location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string[] Location { get; set; }
		
		/// <summary>
		/// [Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact case-insensitive queries that will trigger the Answer or RHS card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string[] Query { get; set; }
		
		/// <summary>
		/// [Optional] Date (in seconds since epoch) when the card should start being shown. If missing, start_date_sec will be Jan 1st, 1970 UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateSec")]
		public string StartDateSec { get; set; }
		
		/// <summary>
		/// [Optional] Start time in seconds, within a day, when the card should be shown if it's within [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDayOffsetSec")]
		public string StartDayOffsetSec { get; set; }
		
		/// <summary>
		/// [Optional] Surface where the card should be shown in. If missing, the card will be shown in any surface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface")]
		public string[] Surface { get; set; }
		
		/// <summary>
		/// [Required] Type of the card (homepage, Answer or RHS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string[] Type { get; set; }
	}
	
	/// <summary>
	/// A named attribute associated with an item which can be used for influencing the ranking of the item based on the context in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContextAttribute
	{
		
		/// <summary>
		/// The name of the attribute. It should not be empty. The maximum length is 32 characters. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The name will be normalized (lower-cased) before being matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Text values of the attribute. The maximum number of elements is 10. The maximum length of an element in the array is 32 characters. The value will be normalized (lower-cased) before being matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Aggregation of items by status code as of the specified date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerIndexStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Number of items aggregrated by status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCountByStatus")]
		public ItemCountByStatus[] ItemCountByStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemCountByStatus
	{
		
		/// <summary>
		/// Number of items matching the status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexedItemsCount")]
		public string IndexedItemsCount { get; set; }
		
		/// <summary>
		/// Status of the items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<ItemCountByStatusStatusCode> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemCountByStatusStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_ITEM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerQueryStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryCountByStatus")]
		public QueryCountByStatus[] QueryCountByStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryCountByStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// This represents the http status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	/// <summary>
	/// Search application stats for a customer for the given date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerSearchApplicationStats
	{
		
		/// <summary>
		/// The count of search applications for the date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerSessionStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The count of search sessions on the day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchSessionsCount")]
		public string SearchSessionsCount { get; set; }
	}
	
	/// <summary>
	/// Represents settings at a customer level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerSettings
	{
		
		/// <summary>
		/// Represents the settings for Cloud audit logging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLoggingSettings")]
		public AuditLoggingSettings AuditLoggingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcSettings")]
		public VPCSettings VpcSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VPCSettings
	{
		
		/// <summary>
		/// The resource name of the GCP Project to be used for VPC SC policy check. VPC security settings on this project will be honored for Cloud Search APIs after project_name has been updated through CustomerService. Format: projects/{project_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerUserStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The count of unique active users in the past one day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayActiveUsersCount")]
		public string OneDayActiveUsersCount { get; set; }
		
		/// <summary>
		/// The count of unique active users in the past seven days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sevenDaysActiveUsersCount")]
		public string SevenDaysActiveUsersCount { get; set; }
		
		/// <summary>
		/// The count of unique active users in the past thirty days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirtyDaysActiveUsersCount")]
		public string ThirtyDaysActiveUsersCount { get; set; }
	}
	
	/// <summary>
	/// Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSource
	{
		
		/// <summary>
		/// If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableModifications")]
		public System.Nullable<System.Boolean> DisableModifications { get; set; }
		
		/// <summary>
		/// Disable serving any search or assist results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableServing")]
		public System.Nullable<System.Boolean> DisableServing { get; set; }
		
		/// <summary>
		/// Required. Display name of the datasource The maximum length is 300 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// List of service accounts that have indexing access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexingServiceAccounts")]
		public string[] IndexingServiceAccounts { get; set; }
		
		/// <summary>
		/// This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsVisibility")]
		public GSuitePrincipal[] ItemsVisibility { get; set; }
		
		/// <summary>
		/// The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// IDs of the Long Running Operations (LROs) currently running for this schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationIds")]
		public string[] OperationIds { get; set; }
		
		/// <summary>
		/// Can a user request to get thumbnail URI for Items indexed in this data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnThumbnailUrls")]
		public System.Nullable<System.Boolean> ReturnThumbnailUrls { get; set; }
		
		/// <summary>
		/// A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *<value>* then queries like *source:<value>* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GSuitePrincipal
	{
		
		/// <summary>
		/// This principal represents all users of the Google Workspace domain of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gsuiteDomain")]
		public System.Nullable<System.Boolean> GsuiteDomain { get; set; }
		
		/// <summary>
		/// This principal references a Google Workspace group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gsuiteGroupEmail")]
		public string GsuiteGroupEmail { get; set; }
		
		/// <summary>
		/// This principal references a Google Workspace user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gsuiteUserEmail")]
		public string GsuiteUserEmail { get; set; }
	}
	
	/// <summary>
	/// Aggregation of items by status code as of the specified date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceIndexStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Number of items aggregrated by status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCountByStatus")]
		public ItemCountByStatus[] ItemCountByStatus { get; set; }
	}
	
	/// <summary>
	/// Restriction on Datasource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceRestriction
	{
		
		/// <summary>
		/// Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: "objecttype", "type" and "mimetype". For now, schema specific filters cannot be used to filter suggestions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterOptions")]
		public FilterOptions[] FilterOptions { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Filter options to be applied on query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterOptions
	{
		
		/// <summary>
		/// A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		/// <summary>
		/// If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
	}
	
	/// <summary>
	/// Defines sources for the suggest/search APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		/// <summary>
		/// Source name for content indexed by the Indexing API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Predefined content source for Google Apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedSource")]
		public System.Nullable<SourcePredefinedSource> PredefinedSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourcePredefinedSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_HISTORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_DRIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_GMAIL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_SITES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_GROUPS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_CALENDAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_KEEP = 8,
	}
	
	/// <summary>
	/// Optional. Provides a search operator for date properties. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the date property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:<value>* show results only where the value of the property named *closeDate* is later than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greaterThanOperatorName")]
		public string GreaterThanOperatorName { get; set; }
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the date property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:<value>* show results only where the value of the property named *closeDate* is earlier than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lessThanOperatorName")]
		public string LessThanOperatorName { get; set; }
		
		/// <summary>
		/// Indicates the actual string required in the query in order to isolate the date property. For example, suppose an issue tracking schema object has a property named *closeDate* that specifies an operator with an operatorName of *closedon*. For searches on that data, queries like *closedon:<value>* show results only where the value of the *closeDate* property matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the indexed datasource. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for date properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatePropertyOptions
	{
		
		/// <summary>
		/// Optional. Provides a search operator for date properties. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public DateOperatorOptions OperatorOptions { get; set; }
	}
	
	/// <summary>
	/// List of date values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Date[] Values { get; set; }
	}
	
	/// <summary>
	/// Shared request debug options for all cloudsearch RPC methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DebugOptions
	{
		
		/// <summary>
		/// If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableDebugging")]
		public System.Nullable<System.Boolean> EnableDebugging { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteQueueItemsRequest
	{
		
		/// <summary>
		/// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// The name of a queue to delete items from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
	}
	
	/// <summary>
	/// A reference to a top-level property within the object that should be displayed in search results. The values of the chosen properties is displayed in the search results along with the display label for that property if one is specified. If a display label is not specified, only the values is shown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisplayedProperty
	{
		
		/// <summary>
		/// The name of the top-level property as defined in a property definition for the object. If the name is not a defined property in the schema, an error is given when attempting to update the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
	}
	
	/// <summary>
	/// Used to provide a search operator for double properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to use the double property in sorting or as a facet. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for double properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoublePropertyOptions
	{
		
		/// <summary>
		/// Used to provide a search operator for double properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public DoubleOperatorOptions OperatorOptions { get; set; }
	}
	
	/// <summary>
	/// List of double values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	/// <summary>
	/// Drive follow-up search restricts (e.g. "followup:suggestions").
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveFollowUpRestrict
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DriveFollowUpRestrictType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DriveFollowUpRestrictType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOWUP_SUGGESTIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOWUP_ACTION_ITEMS = 2,
	}
	
	/// <summary>
	/// Drive location search restricts (e.g. "is:starred").
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveLocationRestrict
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DriveLocationRestrictType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DriveLocationRestrictType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRASHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARRED = 2,
	}
	
	/// <summary>
	/// Drive mime-type search restricts (e.g. "type:pdf").
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveMimeTypeRestrict
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DriveMimeTypeRestrictType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DriveMimeTypeRestrictType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENTATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPREADSHEET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAWING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCRIPT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLDER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE = 14,
	}
	
	/// <summary>
	/// The time span search restrict (e.g. "after:2017-09-11 before:2017-09-12").
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveTimeSpanRestrict
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DriveTimeSpanRestrictType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DriveTimeSpanRestrictType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TODAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YESTERDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_7_DAYS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_30_DAYS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_90_DAYS = 5,
	}
	
	/// <summary>
	/// A person's email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailAddress
	{
		
		/// <summary>
		/// If the value of type is custom, this property contains the custom type string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customType")]
		public string CustomType { get; set; }
		
		/// <summary>
		/// The email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress1 { get; set; }
		
		/// <summary>
		/// The URL to send email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailUrl")]
		public string EmailUrl { get; set; }
		
		/// <summary>
		/// Indicates if this is the user's primary email. Only one entry can be marked as primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// The type of the email account. Acceptable values are: "custom", "home", "other", "work".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazFrontendTeamsLink
	{
		
		/// <summary>
		/// The identifying link type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public SafeUrlProto Url { get; set; }
	}
	
	/// <summary>
	/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SafeUrlProto
	{
		
		/// <summary>
		/// IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateDoNotAccessOrElseSafeUrlWrappedValue")]
		public string PrivateDoNotAccessOrElseSafeUrlWrappedValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazFrontendTeamsPersonCorePhoneNumber
	{
		
		/// <summary>
		/// Phone number in no particular format (as comes from the Focus profile).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneUrl")]
		public SafeUrlProto PhoneUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EnterpriseTopazFrontendTeamsPersonCorePhoneNumberType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazFrontendTeamsPersonCorePhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 3,
	}
	
	/// <summary>
	/// An AgendaEntry, e.g., a Calendar Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAgendaEntry
	{
		
		/// <summary>
		/// URL of the agenda item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agendaItemUrl")]
		public string AgendaItemUrl { get; set; }
		
		/// <summary>
		/// The chronology from the present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chronology")]
		public System.Nullable<EnterpriseTopazSidekickAgendaEntryChronology> Chronology { get; set; }
		
		/// <summary>
		/// Person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public EnterpriseTopazSidekickPerson Creator { get; set; }
		
		/// <summary>
		/// Attendance status for the current user making the request. This is a convenience data member in order to avoid figuring out the same by iterating the invitee list above on the caller side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUserAttendingStatus")]
		public EnterpriseTopazSidekickPersonAttendingStatus CurrentUserAttendingStatus { get; set; }
		
		/// <summary>
		/// Description of the agenda item (i.e., typically, summary in calendar event).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Items related to the current AgendaEntry. E.g., related drive/mail/groups documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public EnterpriseTopazSidekickCommonDocument[] Document { get; set; }
		
		/// <summary>
		/// End date "Friday, August 26" in the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// End time (HH:mm) in the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// End time in milliseconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeMs")]
		public string EndTimeMs { get; set; }
		
		/// <summary>
		/// Event id provided by Calendar API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Whether the guests can invite other guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestsCanInviteOthers")]
		public System.Nullable<System.Boolean> GuestsCanInviteOthers { get; set; }
		
		/// <summary>
		/// Whether the guests can modify the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestsCanModify")]
		public System.Nullable<System.Boolean> GuestsCanModify { get; set; }
		
		/// <summary>
		/// Whether the guests of the event can be seen. If false, the user is going to be reported as the only attendee to the meeting, even though there may be more attendees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestsCanSeeGuests")]
		public System.Nullable<System.Boolean> GuestsCanSeeGuests { get; set; }
		
		/// <summary>
		/// Hangout meeting identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hangoutId")]
		public string HangoutId { get; set; }
		
		/// <summary>
		/// Absolute URL for the Hangout meeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hangoutUrl")]
		public string HangoutUrl { get; set; }
		
		/// <summary>
		/// People attending the meeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitee")]
		public EnterpriseTopazSidekickPerson[] Invitee { get; set; }
		
		/// <summary>
		/// Whether the entry lasts all day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAllDay")]
		public System.Nullable<System.Boolean> IsAllDay { get; set; }
		
		/// <summary>
		/// Last time the event was modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModificationTimeMs")]
		public string LastModificationTimeMs { get; set; }
		
		/// <summary>
		/// Agenda item location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Whether this should be notified to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyToUser")]
		public System.Nullable<System.Boolean> NotifyToUser { get; set; }
		
		/// <summary>
		/// Whether guest list is not returned because number of attendees is too large.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherAttendeesExcluded")]
		public System.Nullable<System.Boolean> OtherAttendeesExcluded { get; set; }
		
		/// <summary>
		/// Whether the requester is the owner of the agenda entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requesterIsOwner")]
		public System.Nullable<System.Boolean> RequesterIsOwner { get; set; }
		
		/// <summary>
		/// Whether the details of this entry should be displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showFullEventDetailsToUse")]
		public System.Nullable<System.Boolean> ShowFullEventDetailsToUse { get; set; }
		
		/// <summary>
		/// Start date "Friday, August 26" in the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// Start time (HH:mm) in the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Start time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeMs")]
		public string StartTimeMs { get; set; }
		
		/// <summary>
		/// User's calendar timezone;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// Title of the agenda item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickAgendaEntryChronology
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENTLY_PAST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEAR_FUTURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUTURE = 6,
	}
	
	/// <summary>
	/// Person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPerson
	{
		
		/// <summary>
		/// The level of affinity this person has with the requesting user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityLevel")]
		public System.Nullable<EnterpriseTopazSidekickPersonAffinityLevel> AffinityLevel { get; set; }
		
		/// <summary>
		/// Attendance status of the person when included in a meeting event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attendingStatus")]
		public System.Nullable<EnterpriseTopazSidekickPersonAttendingStatus> AttendingStatus { get; set; }
		
		/// <summary>
		/// Email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Gaia id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gaiaId")]
		public string GaiaId { get; set; }
		
		/// <summary>
		/// Whether the invitee is a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGroup")]
		public System.Nullable<System.Boolean> IsGroup { get; set; }
		
		/// <summary>
		/// Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Obfuscated Gaia id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedGaiaId")]
		public string ObfuscatedGaiaId { get; set; }
		
		/// <summary>
		/// Absolute URL to the profile photo of the person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickPersonAffinityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickPersonAttendingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAYBE = 3,
	}
	
	/// <summary>
	/// Representation of a document. NEXT_TAG: 15
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCommonDocument
	{
		
		/// <summary>
		/// Access type, i.e., whether the user has access to the document or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public System.Nullable<EnterpriseTopazSidekickCommonDocumentAccessType> AccessType { get; set; }
		
		/// <summary>
		/// Container of debugging information in all object levels. Extend as needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public EnterpriseTopazSidekickCommonDebugInfo DebugInfo { get; set; }
		
		/// <summary>
		/// Document id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		/// <summary>
		/// Meta data for drive documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveDocumentMetadata")]
		public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata DriveDocumentMetadata { get; set; }
		
		/// <summary>
		/// Generic Drive-based url in the format of drive.google.com/open to be used for deeplink
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericUrl")]
		public string GenericUrl { get; set; }
		
		/// <summary>
		/// Justification of why we are reporting the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justification")]
		public EnterpriseTopazSidekickCommonDocumentJustification Justification { get; set; }
		
		/// <summary>
		/// MIME type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Document provenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provenance")]
		public System.Nullable<EnterpriseTopazSidekickCommonDocumentProvenance> Provenance { get; set; }
		
		/// <summary>
		/// Justification of why this document is being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public EnterpriseTopazSidekickCommonDocumentJustificationReason Reason { get; set; }
		
		/// <summary>
		/// A sampling of the text from the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
		
		/// <summary>
		/// Thumbnail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Title of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Type of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EnterpriseTopazSidekickCommonDocumentType> Type { get; set; }
		
		/// <summary>
		/// Absolute URL of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCommonDocumentAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ACCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ALLOWED = 2,
	}
	
	/// <summary>
	/// Container of debugging information in all object levels. Extend as needed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCommonDebugInfo
	{
		
		/// <summary>
		/// Debug message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Meta data for drive documents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
	{
		
		/// <summary>
		/// The drive document cosmo id. Client could use the id to build a URL to open a document. Please use Document.document_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		/// <summary>
		/// Additional field to identify whether a document is private since scope set to LIMITED can mean both that the doc is private or that it's shared with others. is_private indicates whether the doc is not shared with anyone except for the owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrivate")]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		/// <summary>
		/// Timestamp of the most recent comment added to the document in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCommentTimeMs")]
		public string LastCommentTimeMs { get; set; }
		
		/// <summary>
		/// Timestamp of the most recent edit from the current user in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastEditTimeMs")]
		public string LastEditTimeMs { get; set; }
		
		/// <summary>
		/// Last modification time of the document (independent of the user that modified it).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModificationTimeMillis")]
		public string LastModificationTimeMillis { get; set; }
		
		/// <summary>
		/// Timestamp of the last updated time of the document in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimeMs")]
		public string LastUpdatedTimeMs { get; set; }
		
		/// <summary>
		/// Timestamp of the most recent view from the current user in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastViewTimeMs")]
		public string LastViewTimeMs { get; set; }
		
		/// <summary>
		/// Common representation of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public EnterpriseTopazSidekickCommonPerson Owner { get; set; }
		
		/// <summary>
		/// ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadataScope> Scope { get; set; }
	}
	
	/// <summary>
	/// Common representation of a person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCommonPerson
	{
		
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public EnterpriseTopazSidekickCommonPersonBirthday Birthday { get; set; }
		
		/// <summary>
		/// Cell phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellPhone")]
		public string CellPhone { get; set; }
		
		/// <summary>
		/// The department the person works in (e.g. Engineering).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// Desk location (e.g. US-MTV-PR55-5-5B1I).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deskLocation")]
		public string DeskLocation { get; set; }
		
		/// <summary>
		/// Work desk phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deskPhone")]
		public string DeskPhone { get; set; }
		
		/// <summary>
		/// The full name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The fully formatted address (e.g. 1255 Pear Avenue, Mountain View 94043, United States).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullAddress")]
		public string FullAddress { get; set; }
		
		/// <summary>
		/// This field is deprecated. The obfuscated_id should be used instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gaiaId")]
		public string GaiaId { get; set; }
		
		/// <summary>
		/// The first name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// The person's job title (e.g. Software Engineer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTitle")]
		public string JobTitle { get; set; }
		
		/// <summary>
		/// Common representation of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manager")]
		public EnterpriseTopazSidekickCommonPerson Manager { get; set; }
		
		/// <summary>
		/// The obfuscated GAIA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedId")]
		public string ObfuscatedId { get; set; }
		
		/// <summary>
		/// The URL for the Focus profile picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The street address (e.g. 1255 Pear Avenue).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCommonPersonBirthday
	{
		
		/// <summary>
		/// Unstructured birthday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadataScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_DOCUMENT_SCOPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASHER_DOMAIN_WITH_LINK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASHER_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_WITH_LINK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEAM_DRIVE = 6,
	}
	
	/// <summary>
	/// Justification of why we are reporting the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCommonDocumentJustification
	{
		
		/// <summary>
		/// A locale aware message that explains why this document was selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justification")]
		public string Justification { get; set; }
		
		/// <summary>
		/// Reason on why the document is selected. Populate for trending documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<EnterpriseTopazSidekickCommonDocumentJustificationReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCommonDocumentJustificationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRENDING_IN_COLLABORATORS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRENDING_IN_DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENTLY_VIEWED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENTLY_EDITED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_UPDATES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_COMMENTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_DESCRIPTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_ATTACHMENT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_METADATA_ATTACHMENT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINED_DOCUMENT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_MENTIONS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_SHARES = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCommonDocumentProvenance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_PROVENANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALENDAR_DESCRIPTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALENDAR_ATTACHMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALENDAR_ASSIST_ATTACHMENT = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCommonDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENTATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPREADSHEET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDF = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BINARY_BLOB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUSION_TABLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLDER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAWING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_URL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_GO = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_GOO_GL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_BIT_LY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_GMAIL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_MAILTO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_YOUTUBE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_LIVE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUPS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEWS = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITES = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANGOUT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_WORD = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_POWERPOINT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_EXCEL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_OUTLOOK = 28,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAgendaGroupCardProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="agendaItem")]
		public EnterpriseTopazSidekickAgendaItem[] AgendaItem { get; set; }
		
		/// <summary>
		/// The context that resulted in the generation of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public EnterpriseTopazSidekickAgendaGroupCardProtoContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentAgendaItem")]
		public EnterpriseTopazSidekickAgendaItem CurrentAgendaItem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAgendaItem
	{
		
		/// <summary>
		/// Conflicting meetings card proto.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictedGroup")]
		public EnterpriseTopazSidekickConflictingEventsCardProto ConflictedGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gapBefore")]
		public EnterpriseTopazSidekickGap GapBefore { get; set; }
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meeting")]
		public EnterpriseTopazSidekickAgendaEntry Meeting { get; set; }
	}
	
	/// <summary>
	/// Conflicting meetings card proto.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickConflictingEventsCardProto
	{
		
		/// <summary>
		/// All the events that conflict with main_event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictingEvent")]
		public EnterpriseTopazSidekickAgendaEntry[] ConflictingEvent { get; set; }
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainEvent")]
		public EnterpriseTopazSidekickAgendaEntry MainEvent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickGap
	{
		
		/// <summary>
		/// Localized time string in the format: 1 hour 15 minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayRemainingTime")]
		public string DisplayRemainingTime { get; set; }
		
		/// <summary>
		/// Localized time string in the format:(Locale CZ) 8:30 odp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTimeMs")]
		public string EndTimeMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingTime")]
		public string RemainingTime { get; set; }
		
		/// <summary>
		/// Localized time string in the format:(Locale CZ) 8:30 odp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTimeMs")]
		public string StartTimeMs { get; set; }
	}
	
	/// <summary>
	/// The context that resulted in the generation of the card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAgendaGroupCardProtoContext
	{
		
		/// <summary>
		/// User friendly free text that describes the context of the card (e.g. "Next meeting with Bob"). This is largely only applicable when the card is generated from a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		/// <summary>
		/// Localized free text that describes the dates represented by the card. Currently, the card will only represent a single day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Represents restrictions applied to the events requested in the user's query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventsRestrict")]
		public System.Nullable<EnterpriseTopazSidekickAgendaGroupCardProtoContextEventsRestrict> EventsRestrict { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickAgendaGroupCardProtoContextEventsRestrict
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_MEETING = 1,
	}
	
	/// <summary>
	/// A list of answers represented as free text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAnswerAnswerList
	{
		
		/// <summary>
		/// Answers that have a corresponding label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labeledAnswer")]
		public EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer[] LabeledAnswer { get; set; }
		
		/// <summary>
		/// Answer type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EnterpriseTopazSidekickAnswerAnswerListType> Type { get; set; }
	}
	
	/// <summary>
	/// An answer with a corresponding label.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer
	{
		
		/// <summary>
		/// The free text answer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
		
		/// <summary>
		/// A localized label for the answer (e.g. "Cell phone" vs "Desk phone").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickAnswerAnswerListType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_ADDRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_BIRTHDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_DEPARTMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_DESK_LOCATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_EMAIL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_JOB_TITLE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_PHONE = 7,
	}
	
	/// <summary>
	/// Contains a list of suggested queries. Allows the user to determine what natural language queries they can ask Cloud Search (e.g. "what can I search for?").
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard
	{
		
		/// <summary>
		/// A list of queries to suggest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedQueryCategory")]
		public EnterpriseTopazSidekickAnswerSuggestedQueryCategory[] SuggestedQueryCategory { get; set; }
	}
	
	/// <summary>
	/// Contains a list of suggested queries for a single category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAnswerSuggestedQueryCategory
	{
		
		/// <summary>
		/// The query list category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<EnterpriseTopazSidekickAnswerSuggestedQueryCategoryCategory> Category { get; set; }
		
		/// <summary>
		/// Whether this category is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// List of suggested queries to show the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string[] Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickAnswerSuggestedQueryCategoryCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALENDAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEOPLE = 3,
	}
	
	/// <summary>
	/// Wrapper proto for the Assist cards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickAssistCardProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="agendaGroupCardProto")]
		public EnterpriseTopazSidekickAgendaGroupCardProto AgendaGroupCardProto { get; set; }
		
		/// <summary>
		/// Card metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardMetadata")]
		public EnterpriseTopazSidekickCardMetadata CardMetadata { get; set; }
		
		/// <summary>
		/// Card type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardType")]
		public System.Nullable<EnterpriseTopazSidekickAssistCardProtoCardType> CardType { get; set; }
		
		/// <summary>
		/// Conflicting meetings card proto.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictingMeetingsCard")]
		public EnterpriseTopazSidekickConflictingEventsCardProto ConflictingMeetingsCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentListCard")]
		public EnterpriseTopazSidekickDocumentPerCategoryList DocumentListCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentsWithMentions")]
		public EnterpriseTopazSidekickDocumentPerCategoryList DocumentsWithMentions { get; set; }
		
		/// <summary>
		/// Response to find meeting time among a set of people.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findMeetingTimeCard")]
		public EnterpriseTopazSidekickFindMeetingTimeCardProto FindMeetingTimeCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genericAnswerCard")]
		public EnterpriseTopazSidekickGenericAnswerCard GenericAnswerCard { get; set; }
		
		/// <summary>
		/// Get and keep ahead card
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="getAndKeepAheadCard")]
		public EnterpriseTopazSidekickGetAndKeepAheadCardProto GetAndKeepAheadCard { get; set; }
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meeting")]
		public EnterpriseTopazSidekickAgendaEntry Meeting { get; set; }
		
		/// <summary>
		/// Information about the meeting notes created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingNotesCard")]
		public EnterpriseTopazSidekickMeetingNotesCardProto MeetingNotesCard { get; set; }
		
		/// <summary>
		/// Meeting notes card request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingNotesCardRequest")]
		public EnterpriseTopazSidekickMeetingNotesCardRequest MeetingNotesCardRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="peopleDisambiguationCard")]
		public EnterpriseTopazSidekickPeopleDisambiguationCard PeopleDisambiguationCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="peoplePromotionCard")]
		public PeoplePromotionCard PeoplePromotionCard { get; set; }
		
		/// <summary>
		/// An answer card for a single person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personAnswerCard")]
		public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard PersonAnswerCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personProfileCard")]
		public EnterpriseTopazSidekickPersonProfileCard PersonProfileCard { get; set; }
		
		/// <summary>
		/// Personalized docs card proto.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalizedDocsCard")]
		public EnterpriseTopazSidekickPersonalizedDocsCardProto PersonalizedDocsCard { get; set; }
		
		/// <summary>
		/// An answer card for a list of people that are related to the subject of the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedPeopleAnswerCard")]
		public EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard RelatedPeopleAnswerCard { get; set; }
		
		/// <summary>
		/// Share meeting docs card proto.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareMeetingDocsCard")]
		public EnterpriseTopazSidekickShareMeetingDocsCardProto ShareMeetingDocsCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharedDocuments")]
		public EnterpriseTopazSidekickDocumentPerCategoryList SharedDocuments { get; set; }
		
		/// <summary>
		/// Contains a list of suggested queries. Allows the user to determine what natural language queries they can ask Cloud Search (e.g. "what can I search for?").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedQueryAnswerCard")]
		public EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard SuggestedQueryAnswerCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thirdPartyAnswerCard")]
		public ThirdPartyGenericCard ThirdPartyAnswerCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workInProgressCardProto")]
		public EnterpriseTopazSidekickRecentDocumentsCardProto WorkInProgressCardProto { get; set; }
	}
	
	/// <summary>
	/// Card metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickCardMetadata
	{
		
		/// <summary>
		/// Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardCategory")]
		public System.Nullable<EnterpriseTopazSidekickCardMetadataCardCategory> CardCategory { get; set; }
		
		/// <summary>
		/// An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public string CardId { get; set; }
		
		/// <summary>
		/// Chronology.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chronology")]
		public System.Nullable<EnterpriseTopazSidekickCardMetadataChronology> Chronology { get; set; }
		
		/// <summary>
		/// Debug info (only reported if request's debug_level > 0).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public string DebugInfo { get; set; }
		
		/// <summary>
		/// Metadata about the NLP interpretation of the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nlpMetadata")]
		public EnterpriseTopazSidekickNlpMetadata NlpMetadata { get; set; }
		
		/// <summary>
		/// Ranking params.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rankingParams")]
		public EnterpriseTopazSidekickRankingParams RankingParams { get; set; }
		
		/// <summary>
		/// Render mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderMode")]
		public System.Nullable<EnterpriseTopazSidekickCardMetadataRenderMode> RenderMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCardMetadataCardCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANSWER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KNOWLEDGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOMEPAGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCardMetadataChronology
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENTLY_PAST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEAR_FUTURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUTURE = 5,
	}
	
	/// <summary>
	/// Metadata about the NLP interpretation of the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickNlpMetadata
	{
		
		/// <summary>
		/// Confidence of the interpretation that generated this card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
	}
	
	/// <summary>
	/// Ranking params.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickRankingParams
	{
		
		/// <summary>
		/// The end-time that this object will expect to occur. If the type is marked as FIXED, then this end-time will persist after bidding. If the type is marked as FLEXIBLE, this field is NOT expected to be filled and will be filled in after it has won a bid. Expected to be set when type is set to FIXED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeMs")]
		public string EndTimeMs { get; set; }
		
		/// <summary>
		/// The priority to determine between objects that have the same start_time_ms The lower-value of priority == ranked higher. Max-priority = 0. Expected to be set for all types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<EnterpriseTopazSidekickRankingParamsPriority> Priority { get; set; }
		
		/// <summary>
		/// The score of the card to be used to break priority-ties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// The span that this card will take in the stream Expected to be set when type is set to FLEXIBLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanMs")]
		public string SpanMs { get; set; }
		
		/// <summary>
		/// The start-time that this object will bid-for If the type is marked as FIXED, then this start-time will persist after bidding. If the type is marked as FLEXIBLE, then it will occur at the given time or sometime after the requested time. Expected to be set for all types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeMs")]
		public string StartTimeMs { get; set; }
		
		/// <summary>
		/// The packing type of this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EnterpriseTopazSidekickRankingParamsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickRankingParamsPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTANT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEST_EFFORT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickRankingParamsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEXIBLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickCardMetadataRenderMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_RENDER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLAPSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickAssistCardProtoCardType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENDA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGELISTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICTING_MEETINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_NOTES_FOR_MEETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_NOTES_FOR_MEETING_REQUEST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_NEWS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIND_MEETING_TIME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_MEETING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONALIZED_DOCS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRENDING_DOCS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCOMING_TRIP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUMMARY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEETINGS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOMEPAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARE_MEETING_DOCS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_PEOPLE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOMEPAGE_V3 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENDA_GROUP = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_IN_PROGRESS = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_AND_KEEP_AHEAD = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_ANSWER_CARD = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_ANSWER_CARD = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_TRENDING_DOCS = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEAM_TRENDING_DOCS = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT_LIST_ANSWER_CARD = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUGGESTED_QUERY_ANSWER_CARD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_ANSWER_CARD = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATED_PEOPLE_ANSWER_CARD = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON_KNOWLEDGE_CARD = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEOPLE_SEARCH_PROMOTION_CARD = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickDocumentPerCategoryList
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry[] Documents { get; set; }
		
		/// <summary>
		/// Localized message explaining how the documents were derived (e.g. from the last 30 days activity). This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpMessage")]
		public string HelpMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listType")]
		public System.Nullable<EnterpriseTopazSidekickDocumentPerCategoryListListType> ListType { get; set; }
		
		/// <summary>
		/// Description of the types of documents present in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listTypeDescription")]
		public string ListTypeDescription { get; set; }
		
		/// <summary>
		/// Response message in case no documents are present in the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseMessage")]
		public string ResponseMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntryCategory> Category { get; set; }
		
		/// <summary>
		/// Representation of a document. NEXT_TAG: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public EnterpriseTopazSidekickCommonDocument Document { get; set; }
		
		/// <summary>
		/// Reason this document was selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rationale")]
		public string Rationale { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntryCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIONABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLIED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENTION_VIEWED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENTION_REPLIED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENTION_NOT_VIEWED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED_AND_VIEWED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED_NOT_VIEWED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITED = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickDocumentPerCategoryListListType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_LIST_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENTIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEEDS_ATTENTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITS = 5,
	}
	
	/// <summary>
	/// Response to find meeting time among a set of people.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickFindMeetingTimeCardProto
	{
		
		/// <summary>
		/// Slots when all attendees have availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAvailableTimeSlots")]
		public EnterpriseTopazSidekickTimeSlot[] CommonAvailableTimeSlots { get; set; }
		
		/// <summary>
		/// Invitees to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitees")]
		public EnterpriseTopazSidekickPerson[] Invitees { get; set; }
		
		/// <summary>
		/// Person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requester")]
		public EnterpriseTopazSidekickPerson Requester { get; set; }
		
		/// <summary>
		/// Details about scheduled meetings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledMeeting")]
		public EnterpriseTopazSidekickScheduledMeeting ScheduledMeeting { get; set; }
		
		/// <summary>
		/// Invitees that have been skipped in the computation, most likely because they are groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedInvitees")]
		public EnterpriseTopazSidekickPerson[] SkippedInvitees { get; set; }
		
		/// <summary>
		/// Slot of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeBoundaries")]
		public EnterpriseTopazSidekickTimeSlot TimeBoundaries { get; set; }
		
		/// <summary>
		/// Timezone ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	/// <summary>
	/// Slot of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickTimeSlot
	{
		
		/// <summary>
		/// Day end time at the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeDay")]
		public string EndTimeDay { get; set; }
		
		/// <summary>
		/// Hour and minute of the end time at the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeHourAndMinute")]
		public string EndTimeHourAndMinute { get; set; }
		
		/// <summary>
		/// End time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeInMillis")]
		public string EndTimeInMillis { get; set; }
		
		/// <summary>
		/// Day start time at user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeDay")]
		public string StartTimeDay { get; set; }
		
		/// <summary>
		/// Hour and minute of the start time at the user's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeHourAndMinute")]
		public string StartTimeHourAndMinute { get; set; }
		
		/// <summary>
		/// Start time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeInMillis")]
		public string StartTimeInMillis { get; set; }
	}
	
	/// <summary>
	/// Details about scheduled meetings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickScheduledMeeting
	{
		
		/// <summary>
		/// The meeting location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingLocation")]
		public string MeetingLocation { get; set; }
		
		/// <summary>
		/// Slot of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingTime")]
		public EnterpriseTopazSidekickTimeSlot MeetingTime { get; set; }
		
		/// <summary>
		/// The meeting title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingTitle")]
		public string MeetingTitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickGenericAnswerCard
	{
		
		/// <summary>
		/// The answer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
		
		/// <summary>
		/// Title or header of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Get and keep ahead card
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickGetAndKeepAheadCardProto
	{
		
		/// <summary>
		/// A list of events where all guests declined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declinedEvents")]
		public EnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents DeclinedEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mentionedDocuments")]
		public EnterpriseTopazSidekickDocumentPerCategoryList MentionedDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharedDocuments")]
		public EnterpriseTopazSidekickDocumentPerCategoryList SharedDocuments { get; set; }
	}
	
	/// <summary>
	/// A list of events where all guests declined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public EnterpriseTopazSidekickAgendaEntry[] Events { get; set; }
	}
	
	/// <summary>
	/// Information about the meeting notes created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickMeetingNotesCardProto
	{
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public EnterpriseTopazSidekickAgendaEntry Event { get; set; }
		
		/// <summary>
		/// Google Drive ID (a.k.a. resource ID) of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// Title we want to show for meeting notes in the answer card
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// New URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Meeting notes card request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickMeetingNotesCardRequest
	{
		
		/// <summary>
		/// Who are the meeting notes created for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCreateFor")]
		public string[] CanCreateFor { get; set; }
		
		/// <summary>
		/// Errors in the creation of meeting notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public EnterpriseTopazSidekickMeetingNotesCardError Error { get; set; }
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public EnterpriseTopazSidekickAgendaEntry Event { get; set; }
	}
	
	/// <summary>
	/// Errors in the creation of meeting notes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickMeetingNotesCardError
	{
		
		/// <summary>
		/// The description of the reason why create-meeting-notes failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public EnterpriseTopazSidekickAgendaEntry Event { get; set; }
		
		/// <summary>
		/// The reason why create-meeting-notes failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<EnterpriseTopazSidekickMeetingNotesCardErrorReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickMeetingNotesCardErrorReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_OWNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPeopleDisambiguationCard
	{
		
		/// <summary>
		/// Candidate persons for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public EnterpriseTopazSidekickCommonPerson[] Person { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PeoplePromotionCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="people")]
		public PersonCore[] People { get; set; }
	}
	
	/// <summary>
	/// Information for rendering a person. NEXT ID: 37
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersonCore
	{
		
		/// <summary>
		/// Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressMeAs")]
		public string AddressMeAs { get; set; }
		
		/// <summary>
		/// People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminTo")]
		public PersonCore[] AdminTo { get; set; }
		
		/// <summary>
		/// The profile owner's admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admins")]
		public PersonCore[] Admins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityStatus")]
		public System.Nullable<PersonCoreAvailabilityStatus> AvailabilityStatus { get; set; }
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public Date Birthday { get; set; }
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarUrl")]
		public SafeUrlProto CalendarUrl { get; set; }
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chatUrl")]
		public SafeUrlProto ChatUrl { get; set; }
		
		/// <summary>
		/// Person's cost center as a string, e.g. "926: Googler Apps".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// The person's Organization department, e.g. "People Operations". For google.com this is usually called "area".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// A subset of the profile owner's direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person's reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directReports")]
		public PersonCore[] DirectReports { get; set; }
		
		/// <summary>
		/// The profile owner's direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dottedLineManagers")]
		public PersonCore[] DottedLineManagers { get; set; }
		
		/// <summary>
		/// A subset of the profile owner's dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dottedLineReports")]
		public PersonCore[] DottedLineReports { get; set; }
		
		/// <summary>
		/// E-mail addresses of the person. The primary or preferred email should be first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// Person's employee number (external ID of type "organization") For google.com this is the badge number (e.g. 2 for Larry Page).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeeId")]
		public string EmployeeId { get; set; }
		
		/// <summary>
		/// A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftePermille")]
		public string FtePermille { get; set; }
		
		/// <summary>
		/// Geo information used for rendering a map that shows the user's work location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoLocation")]
		public MapInfo GeoLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gmailUrl")]
		public string GmailUrl { get; set; }
		
		/// <summary>
		/// Profile owner's job title (e.g. "Software Engineer"). For google.com this is the Workday preferred job title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTitle")]
		public string JobTitle { get; set; }
		
		/// <summary>
		/// List of keys to use from the map 'keywords'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordTypes")]
		public string[] KeywordTypes { get; set; }
		
		/// <summary>
		/// Custom keywords the domain admin has added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public System.Collections.Generic.Dictionary<string, string> Keywords { get; set; }
		
		/// <summary>
		/// Custom links the profile owner has added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public EnterpriseTopazFrontendTeamsLink[] Links { get; set; }
		
		/// <summary>
		/// Detailed desk location within the company. For google.com this is the desk location code (e.g. "DE-MUC-ARP-6T2-6T2C0C") if the person has a desk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The profile owner's management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managers")]
		public PersonCore[] Managers { get; set; }
		
		/// <summary>
		/// Custom mission statement the profile owner has added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mission")]
		public string Mission { get; set; }
		
		/// <summary>
		/// Human-readable Unicode display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Office/building identifier within the company. For google.com this is the office code (e.g. "DE-MUC-ARP").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officeLocation")]
		public string OfficeLocation { get; set; }
		
		/// <summary>
		/// The person's obfuscated Gaia ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		public string PersonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumbers")]
		public EnterpriseTopazFrontendTeamsPersonCorePhoneNumber[] PhoneNumbers { get; set; }
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public SafeUrlProto PhotoUrl { get; set; }
		
		/// <summary>
		/// Postal address of office/building.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalAddress")]
		public string PostalAddress { get; set; }
		
		/// <summary>
		/// Total count of the profile owner's direct reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDirectReportsCount")]
		public System.Nullable<System.Int32> TotalDirectReportsCount { get; set; }
		
		/// <summary>
		/// Total count of the profile owner's dotted-line reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDlrCount")]
		public System.Nullable<System.Int32> TotalDlrCount { get; set; }
		
		/// <summary>
		/// The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalFteCount")]
		public string TotalFteCount { get; set; }
		
		/// <summary>
		/// External ID of type "login_id" for the profile. For google.com this is the username/LDAP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waldoComeBackTime")]
		public string WaldoComeBackTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PersonCoreAvailabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_OFFICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTSIDE_WORKING_HOURS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 3,
	}
	
	/// <summary>
	/// Geo information used for rendering a map that shows the user's work location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MapInfo
	{
		
		/// <summary>
		/// Latitude in degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationUrl")]
		public SafeUrlProto LocationUrl { get; set; }
		
		/// <summary>
		/// Longitude in degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="long")]
		public System.Nullable<System.Double> Long { get; set; }
		
		/// <summary>
		/// MapTiles for the area around a user's work location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapTile")]
		public MapTile[] MapTile { get; set; }
		
		/// <summary>
		/// The zoom level of the map. A constant zoom value of 18 is used for now to match the zoom of the map shown on a Moma Teams Profile page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoom")]
		public System.Nullable<System.Int32> Zoom { get; set; }
	}
	
	/// <summary>
	/// Information used to render a map tile image in the proper location on a map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MapTile
	{
		
		/// <summary>
		/// Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public SafeUrlProto ImageUrl { get; set; }
		
		/// <summary>
		/// Map tile x coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tileX")]
		public System.Nullable<System.Double> TileX { get; set; }
		
		/// <summary>
		/// Map tile y coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tileY")]
		public System.Nullable<System.Double> TileY { get; set; }
	}
	
	/// <summary>
	/// An answer card for a single person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard
	{
		
		/// <summary>
		/// List of answers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public SafeHtmlProto[] Answer { get; set; }
		
		/// <summary>
		/// A list of answers represented as free text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerText")]
		public EnterpriseTopazSidekickAnswerAnswerList AnswerText { get; set; }
		
		/// <summary>
		/// Metadata for disambiguation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disambiguationInfo")]
		public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo DisambiguationInfo { get; set; }
		
		/// <summary>
		/// Recommended header to display for the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader Header { get; set; }
		
		/// <summary>
		/// The response status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public System.Nullable<EnterpriseTopazSidekickPeopleAnswerPersonAnswerCardResponseStatus> ResponseStatus { get; set; }
		
		/// <summary>
		/// Localized user friendly message to display to the user in the case of missing data or an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Common representation of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public EnterpriseTopazSidekickCommonPerson Subject { get; set; }
	}
	
	/// <summary>
	/// Metadata for disambiguation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo
	{
		
		/// <summary>
		/// A list of people that also matched the query. This list is not complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disambiguation")]
		public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson[] Disambiguation { get; set; }
		
		/// <summary>
		/// The name that was extracted from the query. This may be in the form of the given name, last name, full name, LDAP, or email address. This name can be considered suitable for displaying to the user and can largely be considered to be normalized (e.g. "Bob's" -> "Bob").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A person that also matches the query, but was not selected due to a lower affinity with the requesting user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson
	{
		
		/// <summary>
		/// Common representation of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public EnterpriseTopazSidekickCommonPerson Person { get; set; }
		
		/// <summary>
		/// The query that can be used to produce an answer card with the same attribute, but for this person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	/// <summary>
	/// Recommended header to display for the card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader
	{
		
		/// <summary>
		/// The suggested title to display. This defaults to the user's query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickPeopleAnswerPersonAnswerCardResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_PERSON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_DATA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPersonProfileCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="relatedPeople")]
		public EnterpriseTopazSidekickPersonProfileCardRelatedPeople[] RelatedPeople { get; set; }
		
		/// <summary>
		/// Common representation of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public EnterpriseTopazSidekickCommonPerson Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPersonProfileCardRelatedPeople
	{
		
		/// <summary>
		/// Related people.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedPerson")]
		public EnterpriseTopazSidekickCommonPerson[] RelatedPerson { get; set; }
		
		/// <summary>
		/// Relation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relation")]
		public System.Nullable<EnterpriseTopazSidekickPersonProfileCardRelatedPeopleRelation> Relation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickPersonProfileCardRelatedPeopleRelation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_REPORT = 2,
	}
	
	/// <summary>
	/// Personalized docs card proto.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPersonalizedDocsCardProto
	{
		
		/// <summary>
		/// Document group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentGroup")]
		public EnterpriseTopazSidekickDocumentGroup[] DocumentGroup { get; set; }
	}
	
	/// <summary>
	/// Represents a mapping between a document type and its corresponding documents. Use for Work in Progress card in v1 homepage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickDocumentGroup
	{
		
		/// <summary>
		/// Document group type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<EnterpriseTopazSidekickDocumentGroupGroupType> GroupType { get; set; }
		
		/// <summary>
		/// The list of corresponding documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalizedDocument")]
		public EnterpriseTopazSidekickCommonDocument[] PersonalizedDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickDocumentGroupGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
	}
	
	/// <summary>
	/// An answer card for a list of people that are related to the subject of the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard
	{
		
		/// <summary>
		/// Metadata for disambiguation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disambiguationInfo")]
		public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo DisambiguationInfo { get; set; }
		
		/// <summary>
		/// Recommended header to display for the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader Header { get; set; }
		
		/// <summary>
		/// A list of people that are related to the query subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedPeople")]
		public EnterpriseTopazSidekickCommonPerson[] RelatedPeople { get; set; }
		
		/// <summary>
		/// Defines the type of relation the list of people have with the subject of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationType")]
		public System.Nullable<EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCardRelationType> RelationType { get; set; }
		
		/// <summary>
		/// The response status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCardResponseStatus ResponseStatus { get; set; }
		
		/// <summary>
		/// Localized user friendly message to display to the user in the case of missing data or an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Common representation of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public EnterpriseTopazSidekickCommonPerson Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCardRelationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_REPORTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEERS = 3,
	}
	
	/// <summary>
	/// Share meeting docs card proto.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickShareMeetingDocsCardProto
	{
		
		/// <summary>
		/// Documents to share for the given meeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public EnterpriseTopazSidekickCommonDocument[] Document { get; set; }
		
		/// <summary>
		/// An AgendaEntry, e.g., a Calendar Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public EnterpriseTopazSidekickAgendaEntry Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyGenericCard
	{
		
		/// <summary>
		/// Unique identifier for the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public string CardId { get; set; }
		
		/// <summary>
		/// Category that the card belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public Content Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public Context Context { get; set; }
		
		/// <summary>
		/// Whether the card can be dismissed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDismissible")]
		public System.Nullable<System.Boolean> IsDismissible { get; set; }
		
		/// <summary>
		/// Priority of the card, where 0 is the highest priority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseTopazSidekickRecentDocumentsCardProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public EnterpriseTopazSidekickCommonDocument[] Document { get; set; }
	}
	
	/// <summary>
	/// Used to provide a search operator for enum properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched. For example, if you provide no operator for a *priority* enum property with possible values *p0* and *p1*, a query that contains the term *p0* returns items that have *p0* as the value of the *priority* property, as well as any items that contain the string *p0* in other fields. If you provide an operator name for the enum, such as *priority*, then search users can use that operator to refine results to only items that have *p0* as this property's value, with the query *priority:p0*.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnumOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the enum property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:<value>* show results only where the value of the property named *priorityVal* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnumPropertyOptions
	{
		
		/// <summary>
		/// Used to provide a search operator for enum properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched. For example, if you provide no operator for a *priority* enum property with possible values *p0* and *p1*, a query that contains the term *p0* returns items that have *p0* as the value of the *priority* property, as well as any items that contain the string *p0* in other fields. If you provide an operator name for the enum, such as *priority*, then search users can use that operator to refine results to only items that have *p0* as this property's value, with the query *priority:p0*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public EnumOperatorOptions OperatorOptions { get; set; }
		
		/// <summary>
		/// Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderedRanking")]
		public System.Nullable<EnumPropertyOptionsOrderedRanking> OrderedRanking { get; set; }
		
		/// <summary>
		/// The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="possibleValues")]
		public EnumValuePair[] PossibleValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnumPropertyOptionsOrderedRanking
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ORDER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// The enumeration value pair defines two things: a required string value and an optional integer value. The string value defines the necessary query term required to retrieve that item, such as *p0* for a priority item. The integer value determines the ranking of that string value relative to other enumerated values for the same property. For example, you might associate *p0* with *0* and define another enum pair such as *p1* and *1*. You must use the integer value in combination with ordered ranking to set the ranking of a given value relative to other enumerated values for the same property name. Here, a ranking order of DESCENDING for *priority* properties results in a ranking boost for items indexed with a value of *p0* compared to items indexed with a value of *p1*. Without a specified ranking order, the integer value has no effect on item ranking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnumValuePair
	{
		
		/// <summary>
		/// The integer value of the EnumValuePair which must be non-negative. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public System.Nullable<System.Int32> IntegerValue { get; set; }
		
		/// <summary>
		/// The string value of the EnumValuePair. The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// List of enum values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnumValues
	{
		
		/// <summary>
		/// The maximum allowable length for string values is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Error information about the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessages")]
		public ErrorMessage[] ErrorMessages { get; set; }
	}
	
	/// <summary>
	/// Error message per source response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage1 { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// A bucket in a facet is the basic unit of operation. A bucket can comprise either a single value OR a contiguous range of values, depending on the type of the field bucketed. FacetBucket is currently used only for returning the response object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetBucket
	{
		
		/// <summary>
		/// Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are always returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		/// <summary>
		/// Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render percentages instead of counts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Int32> Percentage { get; set; }
		
		/// <summary>
		/// Definition of a single value with generic type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Value Value { get; set; }
	}
	
	/// <summary>
	/// Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetOptions
	{
		
		/// <summary>
		/// Used to specify integer faceting options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerFacetingOptions")]
		public IntegerFacetingOptions IntegerFacetingOptions { get; set; }
		
		/// <summary>
		/// Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numFacetBuckets")]
		public System.Nullable<System.Int32> NumFacetBuckets { get; set; }
		
		/// <summary>
		/// If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
	}
	
	/// <summary>
	/// Used to specify integer faceting options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerFacetingOptions
	{
		
		/// <summary>
		/// Buckets for given integer values should be in strictly ascending order. For example, if values supplied are (1,5,10,100), the following facet buckets will be formed {<1, [1,5), [5-10), [10-100), >=100}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerBuckets")]
		public string[] IntegerBuckets { get; set; }
	}
	
	/// <summary>
	/// Source specific facet response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetResult
	{
		
		/// <summary>
		/// FacetBuckets for values in response containing at least a single result with the corresponding filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public FacetBucket[] Buckets { get; set; }
		
		/// <summary>
		/// Object type for which facet results are returned. Can be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Source name for which facet results are returned. Will not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldViolation
	{
		
		/// <summary>
		/// The description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Path of field with violation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	/// <summary>
	/// Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreshnessOptions
	{
		
		/// <summary>
		/// The duration after which an object should be considered stale. The default value is 180 days (in seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshnessDuration")]
		public string FreshnessDuration { get; set; }
		
		/// <summary>
		/// This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshnessProperty")]
		public string FreshnessProperty { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCustomerIndexStatsResponse
	{
		
		/// <summary>
		/// Average item count for the given date range for which billing is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageIndexedItemCount")]
		public string AverageIndexedItemCount { get; set; }
		
		/// <summary>
		/// Summary of indexed item counts, one for each day in the requested range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public CustomerIndexStats[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCustomerQueryStatsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public CustomerQueryStats[] Stats { get; set; }
		
		/// <summary>
		/// Total successful query count (status code 200) for the given date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalQueryCount")]
		public string TotalQueryCount { get; set; }
	}
	
	/// <summary>
	/// Response format for search application stats for a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCustomerSearchApplicationStatsResponse
	{
		
		/// <summary>
		/// Average search application count for the given date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageSearchApplicationCount")]
		public string AverageSearchApplicationCount { get; set; }
		
		/// <summary>
		/// Search application stats by date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public CustomerSearchApplicationStats[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCustomerSessionStatsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public CustomerSessionStats[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCustomerUserStatsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public CustomerUserStats[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDataSourceIndexStatsResponse
	{
		
		/// <summary>
		/// Average item count for the given date range for which billing is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageIndexedItemCount")]
		public string AverageIndexedItemCount { get; set; }
		
		/// <summary>
		/// Summary of indexed item counts, one for each day in the requested range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public DataSourceIndexStats[] Stats { get; set; }
	}
	
	/// <summary>
	/// Response format for getting query stats for a search application between given dates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSearchApplicationQueryStatsResponse
	{
		
		/// <summary>
		/// Query stats per date for a search application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public SearchApplicationQueryStats[] Stats { get; set; }
		
		/// <summary>
		/// Total successful query count (status code 200) for the given date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalQueryCount")]
		public string TotalQueryCount { get; set; }
	}
	
	/// <summary>
	/// Search application level query stats per date
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchApplicationQueryStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryCountByStatus")]
		public QueryCountByStatus[] QueryCountByStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSearchApplicationSessionStatsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public SearchApplicationSessionStats[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchApplicationSessionStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The count of search sessions on the day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchSessionsCount")]
		public string SearchSessionsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSearchApplicationUserStatsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public SearchApplicationUserStats[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchApplicationUserStats
	{
		
		/// <summary>
		/// Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The count of unique active users in the past one day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneDayActiveUsersCount")]
		public string OneDayActiveUsersCount { get; set; }
		
		/// <summary>
		/// The count of unique active users in the past seven days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sevenDaysActiveUsersCount")]
		public string SevenDaysActiveUsersCount { get; set; }
		
		/// <summary>
		/// The count of unique active users in the past thirty days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirtyDaysActiveUsersCount")]
		public string ThirtyDaysActiveUsersCount { get; set; }
	}
	
	/// <summary>
	/// Used to provide a search operator for html properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HtmlOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the html property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator return all items where *<value>* matches the value of any html properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for html properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HtmlPropertyOptions
	{
		
		/// <summary>
		/// Used to provide a search operator for html properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public HtmlOperatorOptions OperatorOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retrievalImportance")]
		public RetrievalImportance RetrievalImportance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetrievalImportance
	{
		
		/// <summary>
		/// Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importance")]
		public System.Nullable<RetrievalImportanceImportance> Importance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RetrievalImportanceImportance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
	}
	
	/// <summary>
	/// List of html values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HtmlValues
	{
		
		/// <summary>
		/// The maximum allowable length for html values is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexItemOptions
	{
		
		/// <summary>
		/// Specifies if the index request should allow Google Workspace principals that do not exist or are deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnknownGsuitePrincipals")]
		public System.Nullable<System.Boolean> AllowUnknownGsuitePrincipals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexItemRequest
	{
		
		/// <summary>
		/// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexItemOptions")]
		public IndexItemOptions IndexItemOptions { get; set; }
		
		/// <summary>
		/// Represents a single object that is an item in the search index, such as a file, folder, or a database record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public Item Item { get; set; }
		
		/// <summary>
		/// Required. The RequestMode for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<IndexItemRequestMode> Mode { get; set; }
	}
	
	/// <summary>
	/// Represents a single object that is an item in the search index, such as a file, folder, or a database record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Item
	{
		
		/// <summary>
		/// Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public ItemAcl Acl { get; set; }
		
		/// <summary>
		/// Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public ItemContent Content { get; set; }
		
		/// <summary>
		/// The type for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemType")]
		public System.Nullable<ItemItemType> ItemType { get; set; }
		
		/// <summary>
		/// Available metadata fields for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ItemMetadata Metadata { get; set; }
		
		/// <summary>
		/// The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional state connector can store for this item. The maximum length is 10000 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Queue this item belongs to. The maximum length is 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		/// <summary>
		/// This contains item's status and any errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ItemStatus Status { get; set; }
		
		/// <summary>
		/// Available structured data fields for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredData")]
		public ItemStructuredData StructuredData { get; set; }
		
		/// <summary>
		/// Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemAcl
	{
		
		/// <summary>
		/// Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclInheritanceType")]
		public System.Nullable<ItemAclAclInheritanceType> AclInheritanceType { get; set; }
		
		/// <summary>
		/// List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deniedReaders")]
		public Principal[] DeniedReaders { get; set; }
		
		/// <summary>
		/// The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritAclFrom")]
		public string InheritAclFrom { get; set; }
		
		/// <summary>
		/// Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public Principal[] Owners { get; set; }
		
		/// <summary>
		/// List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readers")]
		public Principal[] Readers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemAclAclInheritanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_OVERRIDE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENT_OVERRIDE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH_PERMIT = 3,
	}
	
	/// <summary>
	/// Reference to a user, group, or domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Principal
	{
		
		/// <summary>
		/// This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupResourceName")]
		public string GroupResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gsuitePrincipal")]
		public GSuitePrincipal GsuitePrincipal { get; set; }
		
		/// <summary>
		/// This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userResourceName")]
		public string UserResourceName { get; set; }
	}
	
	/// <summary>
	/// Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemContent
	{
		
		/// <summary>
		/// Represents an upload session reference. This reference is created via upload method. This reference is valid for 30 days after its creation. Updating of item content may refer to this uploaded content via contentDataRef.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDataRef")]
		public UploadItemRef ContentDataRef { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentFormat")]
		public System.Nullable<ItemContentContentFormat> ContentFormat { get; set; }
		
		/// <summary>
		/// Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineContent")]
		public string InlineContent { get; set; }
	}
	
	/// <summary>
	/// Represents an upload session reference. This reference is created via upload method. This reference is valid for 30 days after its creation. Updating of item content may refer to this uploaded content via contentDataRef.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadItemRef
	{
		
		/// <summary>
		/// The name of the content reference. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemContentContentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_ITEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINER_ITEM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_CONTAINER_ITEM = 3,
	}
	
	/// <summary>
	/// Available metadata fields for the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemMetadata
	{
		
		/// <summary>
		/// The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The BCP-47 language code for the item, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextAttributes")]
		public ContextAttribute[] ContextAttributes { get; set; }
		
		/// <summary>
		/// The time when the item was created in the source repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public Interaction[] Interactions { get; set; }
		
		/// <summary>
		/// Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// Additional search quality metadata of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchQualityMetadata")]
		public SearchQualityMetadata SearchQualityMetadata { get; set; }
		
		/// <summary>
		/// Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRepositoryUrl")]
		public string SourceRepositoryUrl { get; set; }
		
		/// <summary>
		/// The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The time when the item was last modified in the source repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Represents an interaction between a user and an item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Interaction
	{
		
		/// <summary>
		/// The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionTime")]
		public string InteractionTime { get; set; }
		
		/// <summary>
		/// Reference to a user, group, or domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public Principal Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InteractionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InteractionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDIT = 2,
	}
	
	/// <summary>
	/// Additional search quality metadata of the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchQualityMetadata
	{
		
		/// <summary>
		/// An indication of the quality of the item, used to influence search quality. Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The default value is 0.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quality")]
		public System.Nullable<System.Double> Quality { get; set; }
	}
	
	/// <summary>
	/// This contains item's status and any errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemStatus
	{
		
		/// <summary>
		/// Status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ItemCountByStatusStatusCode Code { get; set; }
		
		/// <summary>
		/// Error details in case the item is in ERROR state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingErrors")]
		public ProcessingError[] ProcessingErrors { get; set; }
		
		/// <summary>
		/// Repository error reported by connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryErrors")]
		public RepositoryError[] RepositoryErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcessingError
	{
		
		/// <summary>
		/// Error code indicating the nature of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ProcessingErrorCode> Code { get; set; }
		
		/// <summary>
		/// The description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// In case the item fields are invalid, this field contains the details about the validation errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldViolations")]
		public FieldViolation[] FieldViolations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProcessingErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING_ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_CONTENT_FORMAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIRECT_BROKEN_ACL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACL_CYCLE = 4,
	}
	
	/// <summary>
	/// Errors when the connector is communicating to the source repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryError
	{
		
		/// <summary>
		/// Message that describes the error. The maximum allowable length of the message is 8192 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Error codes. Matches the definition of HTTP status codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
		
		/// <summary>
		/// The type of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RepositoryErrorType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RepositoryErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZATION_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTA_EXCEEDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_UNAVAILABLE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ERROR = 9,
	}
	
	/// <summary>
	/// Available structured data fields for the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemStructuredData
	{
		
		/// <summary>
		/// Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// A structured data object consisting of named properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public StructuredDataObject Object { get; set; }
	}
	
	/// <summary>
	/// A structured data object consisting of named properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructuredDataObject
	{
		
		/// <summary>
		/// The properties for the object. The maximum number of elements is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NamedProperty[] Properties { get; set; }
	}
	
	/// <summary>
	/// A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		/// <summary>
		/// List of date values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateValues")]
		public DateValues DateValues { get; set; }
		
		/// <summary>
		/// List of double values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValues")]
		public DoubleValues DoubleValues { get; set; }
		
		/// <summary>
		/// List of enum values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumValues")]
		public EnumValues EnumValues { get; set; }
		
		/// <summary>
		/// List of html values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlValues")]
		public HtmlValues HtmlValues { get; set; }
		
		/// <summary>
		/// List of integer values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerValues")]
		public IntegerValues IntegerValues { get; set; }
		
		/// <summary>
		/// The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of object values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectValues")]
		public ObjectValues ObjectValues { get; set; }
		
		/// <summary>
		/// List of text values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textValues")]
		public TextValues TextValues { get; set; }
		
		/// <summary>
		/// List of timestamp values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampValues")]
		public TimestampValues TimestampValues { get; set; }
	}
	
	/// <summary>
	/// List of integer values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// List of object values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public StructuredDataObject[] Values { get; set; }
	}
	
	/// <summary>
	/// List of text values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextValues
	{
		
		/// <summary>
		/// The maximum allowable length for text values is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// List of timestamp values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimestampValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexItemRequestMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCHRONOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASYNCHRONOUS = 2,
	}
	
	/// <summary>
	/// Request message for `InitializeCustomer` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitializeCustomerRequest
	{
	}
	
	/// <summary>
	/// Used to provide a search operator for integer properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the integer property using the greater-than operator. For example, if greaterThanOperatorName is *priorityabove* and the property's name is *priorityVal*, then queries like *priorityabove:<value>* show results only where the value of the property named *priorityVal* is greater than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greaterThanOperatorName")]
		public string GreaterThanOperatorName { get; set; }
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the integer property using the less-than operator. For example, if lessThanOperatorName is *prioritybelow* and the property's name is *priorityVal*, then queries like *prioritybelow:<value>* show results only where the value of the property named *priorityVal* is less than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lessThanOperatorName")]
		public string LessThanOperatorName { get; set; }
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the integer property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:<value>* show results only where the value of the property named *priorityVal* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for integer properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerPropertyOptions
	{
		
		/// <summary>
		/// Used to specify integer faceting options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerFacetingOptions")]
		public IntegerFacetingOptions IntegerFacetingOptions { get; set; }
		
		/// <summary>
		/// The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumValue")]
		public string MaximumValue { get; set; }
		
		/// <summary>
		/// The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumValue")]
		public string MinimumValue { get; set; }
		
		/// <summary>
		/// Used to provide a search operator for integer properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public IntegerOperatorOptions OperatorOptions { get; set; }
		
		/// <summary>
		/// Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderedRanking")]
		public EnumPropertyOptionsOrderedRanking OrderedRanking { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDataSourceResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public DataSource[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListItemNamesForUnmappedIdentityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemNames")]
		public string[] ItemNames { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListItemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// List sources response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListQuerySourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public QuerySource[] Sources { get; set; }
	}
	
	/// <summary>
	/// List of sources that the user can search using the query API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuerySource
	{
		
		/// <summary>
		/// Display name of the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// List of all operators applicable for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operators")]
		public QueryOperator[] Operators { get; set; }
		
		/// <summary>
		/// A short name or alias for the source. This value can be used with the 'source' operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// The definition of a operator that can be used in a Search/Suggest request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryOperator
	{
		
		/// <summary>
		/// Display name of the operator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumValues")]
		public string[] EnumValues { get; set; }
		
		/// <summary>
		/// Indicates the operator name that can be used to isolate the property using the greater-than operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greaterThanOperatorName")]
		public string GreaterThanOperatorName { get; set; }
		
		/// <summary>
		/// Can this operator be used to get facets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFacetable")]
		public System.Nullable<System.Boolean> IsFacetable { get; set; }
		
		/// <summary>
		/// Indicates if multiple values can be set for this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRepeatable")]
		public System.Nullable<System.Boolean> IsRepeatable { get; set; }
		
		/// <summary>
		/// Will the property associated with this facet be returned as part of search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReturnable")]
		public System.Nullable<System.Boolean> IsReturnable { get; set; }
		
		/// <summary>
		/// Can this operator be used to sort results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSortable")]
		public System.Nullable<System.Boolean> IsSortable { get; set; }
		
		/// <summary>
		/// Can get suggestions for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSuggestable")]
		public System.Nullable<System.Boolean> IsSuggestable { get; set; }
		
		/// <summary>
		/// Indicates the operator name that can be used to isolate the property using the less-than operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lessThanOperatorName")]
		public string LessThanOperatorName { get; set; }
		
		/// <summary>
		/// The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// The name of the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// The type of the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<QueryOperatorType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENUM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSearchApplicationsResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchApplications")]
		public SearchApplication[] SearchApplications { get; set; }
	}
	
	/// <summary>
	/// SearchApplication
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchApplication
	{
		
		/// <summary>
		/// Retrictions applied to the configurations. The maximum number of elements is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceRestrictions")]
		public DataSourceRestriction[] DataSourceRestrictions { get; set; }
		
		/// <summary>
		/// The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFacetOptions")]
		public FacetOptions[] DefaultFacetOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultSortOptions")]
		public SortOptions DefaultSortOptions { get; set; }
		
		/// <summary>
		/// Display name of the Search Application. The maximum length is 300 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether audit logging is on/off for requests made for the search application in query APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAuditLog")]
		public System.Nullable<System.Boolean> EnableAuditLog { get; set; }
		
		/// <summary>
		/// The name of the Search Application. Format: searchapplications/{application_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationIds")]
		public string[] OperationIds { get; set; }
		
		/// <summary>
		/// Default options to interpret user query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryInterpretationConfig")]
		public QueryInterpretationConfig QueryInterpretationConfig { get; set; }
		
		/// <summary>
		/// With each result we should return the URI for its thumbnail (when applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnResultThumbnailUrls")]
		public System.Nullable<System.Boolean> ReturnResultThumbnailUrls { get; set; }
		
		/// <summary>
		/// Scoring configurations for a source while processing a Search or Suggest request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoringConfig")]
		public ScoringConfig ScoringConfig { get; set; }
		
		/// <summary>
		/// Configuration for a sources specified in data_source_restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceConfig")]
		public SourceConfig[] SourceConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SortOptions
	{
		
		/// <summary>
		/// The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// Ascending is the default sort order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<SortOptionsSortOrder> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOptionsSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	/// <summary>
	/// Default options to interpret user query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryInterpretationConfig
	{
		
		/// <summary>
		/// Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for supplemental results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceDisableSupplementalResults")]
		public System.Nullable<System.Boolean> ForceDisableSupplementalResults { get; set; }
		
		/// <summary>
		/// Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for verbatim mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceVerbatimMode")]
		public System.Nullable<System.Boolean> ForceVerbatimMode { get; set; }
	}
	
	/// <summary>
	/// Scoring configurations for a source while processing a Search or Suggest request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScoringConfig
	{
		
		/// <summary>
		/// Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableFreshness")]
		public System.Nullable<System.Boolean> DisableFreshness { get; set; }
		
		/// <summary>
		/// Whether to personalize the results. By default, personal signals will be used to boost results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disablePersonalization")]
		public System.Nullable<System.Boolean> DisablePersonalization { get; set; }
	}
	
	/// <summary>
	/// Configurations for a source while processing a Search or Suggest request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceConfig
	{
		
		/// <summary>
		/// Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host "crowd out" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crowdingConfig")]
		public SourceCrowdingConfig CrowdingConfig { get; set; }
		
		/// <summary>
		/// Set the scoring configuration. This allows modifying the ranking of results for a source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoringConfig")]
		public SourceScoringConfig ScoringConfig { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host "crowd out" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceCrowdingConfig
	{
		
		/// <summary>
		/// Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResults")]
		public System.Nullable<System.Int32> NumResults { get; set; }
		
		/// <summary>
		/// Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numSuggestions")]
		public System.Nullable<System.Int32> NumSuggestions { get; set; }
	}
	
	/// <summary>
	/// Set the scoring configuration. This allows modifying the ranking of results for a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceScoringConfig
	{
		
		/// <summary>
		/// Importance of the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceImportance")]
		public System.Nullable<SourceScoringConfigSourceImportance> SourceImportance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceScoringConfigSourceImportance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUnmappedIdentitiesResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmappedIdentities")]
		public UnmappedIdentity[] UnmappedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnmappedIdentity
	{
		
		/// <summary>
		/// Reference to a user, group, or domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalIdentity")]
		public Principal ExternalIdentity { get; set; }
		
		/// <summary>
		/// The resolution status for the external identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionStatusCode")]
		public System.Nullable<UnmappedIdentityResolutionStatusCode> ResolutionStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UnmappedIdentityResolutionStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTITY_SOURCE_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTITY_SOURCE_MISCONFIGURED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_MAPPINGS_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 5,
	}
	
	/// <summary>
	/// Matched range of a snippet [start, end).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchRange
	{
		
		/// <summary>
		/// End of the match in the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		/// <summary>
		/// Starting position of the match in the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	/// <summary>
	/// Media resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media
	{
		
		/// <summary>
		/// Name of the media resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Metadata of a matched search result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		/// <summary>
		/// The creation time for this document or object in the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayOptions")]
		public ResultDisplayMetadata DisplayOptions { get; set; }
		
		/// <summary>
		/// Indexed fields in structured data, returned as a generic named property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public NamedProperty[] Fields { get; set; }
		
		/// <summary>
		/// Mime type of the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Object type of the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// Object to represent a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Person Owner { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// The thumbnail URL of the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultDisplayMetadata
	{
		
		/// <summary>
		/// The metalines content to be displayed with the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metalines")]
		public ResultDisplayLine[] Metalines { get; set; }
		
		/// <summary>
		/// The display label for the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectTypeLabel")]
		public string ObjectTypeLabel { get; set; }
	}
	
	/// <summary>
	/// The collection of fields that make up a displayed line
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultDisplayLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ResultDisplayField[] Fields { get; set; }
	}
	
	/// <summary>
	/// Display Fields for Search Results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultDisplayField
	{
		
		/// <summary>
		/// The display label for the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The operator name of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		/// <summary>
		/// A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public NamedProperty Property { get; set; }
	}
	
	/// <summary>
	/// Object to represent a person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Person
	{
		
		/// <summary>
		/// The person's email addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddresses")]
		public EmailAddress[] EmailAddresses { get; set; }
		
		/// <summary>
		/// The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Obfuscated ID of a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedId")]
		public string ObfuscatedId { get; set; }
		
		/// <summary>
		/// The person's name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personNames")]
		public Name[] PersonNames { get; set; }
		
		/// <summary>
		/// The person's phone numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumbers")]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		/// <summary>
		/// A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
	}
	
	/// <summary>
	/// A person's name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		/// <summary>
		/// The read-only display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// A person's Phone Number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneNumber
	{
		
		/// <summary>
		/// The phone number of the person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PhoneNumberType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFICE = 2,
	}
	
	/// <summary>
	/// A person's photo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Photo
	{
		
		/// <summary>
		/// The URL of the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A metaline is a list of properties that are displayed along with the search result to provide context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metaline
	{
		
		/// <summary>
		/// The list of displayed properties for the metaline. The maximum number of properties is 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DisplayedProperty[] Properties { get; set; }
	}
	
	/// <summary>
	/// The definition for an object within a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectDefinition
	{
		
		/// <summary>
		/// The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The options for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ObjectOptions Options { get; set; }
		
		/// <summary>
		/// The property definitions for the object. The maximum number of elements is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyDefinitions")]
		public PropertyDefinition[] PropertyDefinitions { get; set; }
	}
	
	/// <summary>
	/// The options for an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectOptions
	{
		
		/// <summary>
		/// The display options for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayOptions")]
		public ObjectDisplayOptions DisplayOptions { get; set; }
		
		/// <summary>
		/// Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshnessOptions")]
		public FreshnessOptions FreshnessOptions { get; set; }
		
		/// <summary>
		/// Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported. NOTE: "objecttype", "type" and "mimetype" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different object types, this option has to be set once for each object definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestionFilteringOperators")]
		public string[] SuggestionFilteringOperators { get; set; }
	}
	
	/// <summary>
	/// The display options for an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectDisplayOptions
	{
		
		/// <summary>
		/// Defines the properties that are displayed in the metalines of the search results. The property values are displayed in the order given here. If a property holds multiple values, all of the values are displayed before the next properties. For this reason, it is a good practice to specify singular properties before repeated properties in this list. All of the properties must set is_returnable to true. The maximum number of metalines is 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metalines")]
		public Metaline[] Metalines { get; set; }
		
		/// <summary>
		/// The user friendly label to display in the search result to indicate the type of the item. This is OPTIONAL; if not provided, an object label isn't displayed on the context line of the search results. The maximum length is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectDisplayLabel")]
		public string ObjectDisplayLabel { get; set; }
	}
	
	/// <summary>
	/// The definition of a property within an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyDefinition
	{
		
		/// <summary>
		/// The options for boolean properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanPropertyOptions")]
		public BooleanPropertyOptions BooleanPropertyOptions { get; set; }
		
		/// <summary>
		/// The options for date properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datePropertyOptions")]
		public DatePropertyOptions DatePropertyOptions { get; set; }
		
		/// <summary>
		/// The display options for a property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayOptions")]
		public PropertyDisplayOptions DisplayOptions { get; set; }
		
		/// <summary>
		/// The options for double properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doublePropertyOptions")]
		public DoublePropertyOptions DoublePropertyOptions { get; set; }
		
		/// <summary>
		/// The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumPropertyOptions")]
		public EnumPropertyOptions EnumPropertyOptions { get; set; }
		
		/// <summary>
		/// The options for html properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlPropertyOptions")]
		public HtmlPropertyOptions HtmlPropertyOptions { get; set; }
		
		/// <summary>
		/// The options for integer properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerPropertyOptions")]
		public IntegerPropertyOptions IntegerPropertyOptions { get; set; }
		
		/// <summary>
		/// Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFacetable")]
		public System.Nullable<System.Boolean> IsFacetable { get; set; }
		
		/// <summary>
		/// Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRepeatable")]
		public System.Nullable<System.Boolean> IsRepeatable { get; set; }
		
		/// <summary>
		/// Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReturnable")]
		public System.Nullable<System.Boolean> IsReturnable { get; set; }
		
		/// <summary>
		/// Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSortable")]
		public System.Nullable<System.Boolean> IsSortable { get; set; }
		
		/// <summary>
		/// Indicates that the property can be used for generating query suggestions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSuggestable")]
		public System.Nullable<System.Boolean> IsSuggestable { get; set; }
		
		/// <summary>
		/// Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isWildcardSearchable")]
		public System.Nullable<System.Boolean> IsWildcardSearchable { get; set; }
		
		/// <summary>
		/// The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The options for object properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectPropertyOptions")]
		public ObjectPropertyOptions ObjectPropertyOptions { get; set; }
		
		/// <summary>
		/// The options for text properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textPropertyOptions")]
		public TextPropertyOptions TextPropertyOptions { get; set; }
		
		/// <summary>
		/// The options for timestamp properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampPropertyOptions")]
		public TimestampPropertyOptions TimestampPropertyOptions { get; set; }
	}
	
	/// <summary>
	/// The display options for a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyDisplayOptions
	{
		
		/// <summary>
		/// The user friendly label for the property that is used if the property is specified to be displayed in ObjectDisplayOptions. If provided, the display label is shown in front of the property values when the property is part of the object display options. For example, if the property value is '1', the value by itself may not be useful context for the user. If the display name given was 'priority', then the user sees 'priority : 1' in the search results which provides clear context to search users. This is OPTIONAL; if not given, only the property values are displayed. The maximum length is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayLabel")]
		public string DisplayLabel { get; set; }
	}
	
	/// <summary>
	/// The options for object properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectPropertyOptions
	{
		
		/// <summary>
		/// The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named *street*, *city*, and *state*. The maximum number of elements is 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subobjectProperties")]
		public PropertyDefinition[] SubobjectProperties { get; set; }
	}
	
	/// <summary>
	/// The options for text properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextPropertyOptions
	{
		
		/// <summary>
		/// Used to provide a search operator for text properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public TextOperatorOptions OperatorOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retrievalImportance")]
		public RetrievalImportance RetrievalImportance { get; set; }
	}
	
	/// <summary>
	/// Used to provide a search operator for text properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextOperatorOptions
	{
		
		/// <summary>
		/// If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is "genre" and the value is "science-fiction" the query restrictions "genre:science" and "genre:fiction" doesn't match the item; "genre:science-fiction" does. Text value matching is case-sensitive and does not remove special characters. If false, the text is tokenized. For example, if the value is "science-fiction" the queries "genre:science" and "genre:fiction" matches the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exactMatchWithOperator")]
		public System.Nullable<System.Boolean> ExactMatchWithOperator { get; set; }
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// The options for timestamp properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimestampPropertyOptions
	{
		
		/// <summary>
		/// Used to provide a search operator for timestamp properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorOptions")]
		public TimestampOperatorOptions OperatorOptions { get; set; }
	}
	
	/// <summary>
	/// Used to provide a search operator for timestamp properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimestampOperatorOptions
	{
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the timestamp property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:<value>* show results only where the value of the property named *closeDate* is later than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greaterThanOperatorName")]
		public string GreaterThanOperatorName { get; set; }
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the timestamp property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:<value>* show results only where the value of the property named *closeDate* is earlier than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lessThanOperatorName")]
		public string LessThanOperatorName { get; set; }
		
		/// <summary>
		/// Indicates the operator name required in the query in order to isolate the timestamp property. For example, if operatorName is *closedon* and the property's name is *closeDate*, then queries like *closedon:<value>* show results only where the value of the property named *closeDate* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	/// <summary>
	/// This field contains information about the person being suggested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PeopleSuggestion
	{
		
		/// <summary>
		/// Object to represent a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollItemsRequest
	{
		
		/// <summary>
		/// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// Maximum number of items to return. The maximum value is 100 and the default value is 20.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		/// <summary>
		/// Limit the items polled to the ones with these statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCodes")]
		public ItemCountByStatusStatusCode[] StatusCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollItemsResponse
	{
		
		/// <summary>
		/// Set of items from the queue available for connector to process. These items have the following subset of fields populated: version metadata.hash structured_data.hash content.hash payload status queue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
	}
	
	/// <summary>
	/// Represents an item to be pushed to the indexing queue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PushItem
	{
		
		/// <summary>
		/// Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHash")]
		public string ContentHash { get; set; }
		
		/// <summary>
		/// The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataHash")]
		public string MetadataHash { get; set; }
		
		/// <summary>
		/// Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		/// <summary>
		/// Errors when the connector is communicating to the source repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryError")]
		public RepositoryError RepositoryError { get; set; }
		
		/// <summary>
		/// Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredDataHash")]
		public string StructuredDataHash { get; set; }
		
		/// <summary>
		/// The type of the push operation that defines the push behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PushItemType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PushItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_MODIFIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPOSITORY_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEUE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PushItemRequest
	{
		
		/// <summary>
		/// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// Represents an item to be pushed to the indexing queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public PushItem Item { get; set; }
	}
	
	/// <summary>
	/// Details about a user's query activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryActivity
	{
		
		/// <summary>
		/// User input query to be logged/removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryInterpretation
	{
		
		[System.Runtime.Serialization.DataMember(Name="interpretationType")]
		public System.Nullable<QueryInterpretationInterpretationType> InterpretationType { get; set; }
		
		/// <summary>
		/// The interpretation of the query used in search. For example, queries with natural language intent like "email from john" will be interpreted as "from:john source:mail". This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpretedQuery")]
		public string InterpretedQuery { get; set; }
		
		/// <summary>
		/// The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<QueryInterpretationReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryInterpretationInterpretationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryInterpretationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_HAS_NATURAL_LANGUAGE_INTENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY = 2,
	}
	
	/// <summary>
	/// Options to interpret user query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryInterpretationOptions
	{
		
		/// <summary>
		/// Flag to disable natural language (NL) interpretation of queries. Default is false, Set to true to disable natural language interpretation. NL interpretation only applies to predefined datasources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableNlInterpretation")]
		public System.Nullable<System.Boolean> DisableNlInterpretation { get; set; }
		
		/// <summary>
		/// Use this flag to disable supplemental results for a query. Supplemental results setting chosen at SearchApplication level will take precedence if set to True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableSupplementalResults")]
		public System.Nullable<System.Boolean> DisableSupplementalResults { get; set; }
		
		/// <summary>
		/// Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental result retrieval, and usage of synonyms including custom ones. Nl interpretation will be disabled if either one of the two flags is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableVerbatimMode")]
		public System.Nullable<System.Boolean> EnableVerbatimMode { get; set; }
	}
	
	/// <summary>
	/// Information relevant only to a query entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryItem
	{
		
		/// <summary>
		/// True if the text was generated by means other than a previous user search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSynthetic")]
		public System.Nullable<System.Boolean> IsSynthetic { get; set; }
	}
	
	/// <summary>
	/// This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuerySuggestion
	{
	}
	
	/// <summary>
	/// Remove Logged Activity Request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveActivityRequest
	{
		
		/// <summary>
		/// Shared request options for all RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOptions")]
		public RequestOptions RequestOptions { get; set; }
		
		/// <summary>
		/// User's single or bulk query activity. This can be a logging query or deletion query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userActivity")]
		public UserActivity UserActivity { get; set; }
	}
	
	/// <summary>
	/// Shared request options for all RPC methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestOptions
	{
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The Suggest API uses this field as a hint to make better third-party autocomplete predictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchApplicationId")]
		public string SearchApplicationId { get; set; }
		
		/// <summary>
		/// Current user's time zone id, such as "America/Los_Angeles" or "Australia/Sydney". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// User's single or bulk query activity. This can be a logging query or deletion query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserActivity
	{
		
		/// <summary>
		/// Details about a user's query activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryActivity")]
		public QueryActivity QueryActivity { get; set; }
	}
	
	/// <summary>
	/// Remove Logged Activity Response. will return an empty response for now. Will be revisited in later phases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveActivityResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetSearchApplicationRequest
	{
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
	}
	
	/// <summary>
	/// Debugging information about the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseDebugInfo
	{
		
		/// <summary>
		/// General debug info formatted for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedDebugInfo")]
		public string FormattedDebugInfo { get; set; }
	}
	
	/// <summary>
	/// Information relevant only to a restrict entry. NextId: 12
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestrictItem
	{
		
		/// <summary>
		/// Drive follow-up search restricts (e.g. "followup:suggestions").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveFollowUpRestrict")]
		public DriveFollowUpRestrict DriveFollowUpRestrict { get; set; }
		
		/// <summary>
		/// Drive location search restricts (e.g. "is:starred").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveLocationRestrict")]
		public DriveLocationRestrict DriveLocationRestrict { get; set; }
		
		/// <summary>
		/// Drive mime-type search restricts (e.g. "type:pdf").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveMimeTypeRestrict")]
		public DriveMimeTypeRestrict DriveMimeTypeRestrict { get; set; }
		
		/// <summary>
		/// The time span search restrict (e.g. "after:2017-09-11 before:2017-09-12").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveTimeSpanRestrict")]
		public DriveTimeSpanRestrict DriveTimeSpanRestrict { get; set; }
		
		/// <summary>
		/// The search restrict (e.g. "after:2017-09-11 before:2017-09-12").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchOperator")]
		public string SearchOperator { get; set; }
	}
	
	/// <summary>
	/// Result count information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultCounts
	{
		
		/// <summary>
		/// Result count information for each source with results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceResultCounts")]
		public SourceResultCount[] SourceResultCounts { get; set; }
	}
	
	/// <summary>
	/// Per source result count information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceResultCount
	{
		
		/// <summary>
		/// Whether there are more search results for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasMoreResults")]
		public System.Nullable<System.Boolean> HasMoreResults { get; set; }
		
		/// <summary>
		/// The estimated result count for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultCountEstimate")]
		public string ResultCountEstimate { get; set; }
		
		/// <summary>
		/// The exact result count for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultCountExact")]
		public string ResultCountExact { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Debugging information about the result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultDebugInfo
	{
		
		/// <summary>
		/// General debug info formatted for display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedDebugInfo")]
		public string FormattedDebugInfo { get; set; }
	}
	
	/// <summary>
	/// The schema definition for a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schema
	{
		
		/// <summary>
		/// The list of top-level objects for the data source. The maximum number of elements is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectDefinitions")]
		public ObjectDefinition[] ObjectDefinitions { get; set; }
		
		/// <summary>
		/// IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationIds")]
		public string[] OperationIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchItemsByViewUrlRequest
	{
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// The next_page_token value returned from a previous request, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Specify the full view URL to find the corresponding item. The maximum length is 2048 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUrl")]
		public string ViewUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchItemsByViewUrlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The search API request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchRequest
	{
		
		/// <summary>
		/// Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextAttributes")]
		public ContextAttribute[] ContextAttributes { get; set; }
		
		/// <summary>
		/// The sources to use for querying. If not specified, all data sources from the current search application are used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceRestrictions")]
		public DataSourceRestriction[] DataSourceRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facetOptions")]
		public FacetOptions[] FacetOptions { get; set; }
		
		/// <summary>
		/// Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Options to interpret user query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryInterpretationOptions")]
		public QueryInterpretationOptions QueryInterpretationOptions { get; set; }
		
		/// <summary>
		/// Shared request options for all RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOptions")]
		public RequestOptions RequestOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOptions")]
		public SortOptions SortOptions { get; set; }
		
		/// <summary>
		/// Starting index of the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	/// <summary>
	/// The search API response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchResponse
	{
		
		/// <summary>
		/// Debugging information about the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public ResponseDebugInfo DebugInfo { get; set; }
		
		/// <summary>
		/// Error information about the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ErrorInfo ErrorInfo { get; set; }
		
		/// <summary>
		/// Repeated facet results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facetResults")]
		public FacetResult[] FacetResults { get; set; }
		
		/// <summary>
		/// Whether there are more search results matching the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasMoreResults")]
		public System.Nullable<System.Boolean> HasMoreResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryInterpretation")]
		public QueryInterpretation QueryInterpretation { get; set; }
		
		/// <summary>
		/// The estimated result count for this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultCountEstimate")]
		public string ResultCountEstimate { get; set; }
		
		/// <summary>
		/// The exact result count for this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultCountExact")]
		public string ResultCountExact { get; set; }
		
		/// <summary>
		/// Result count information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultCounts")]
		public ResultCounts ResultCounts { get; set; }
		
		/// <summary>
		/// Results from a search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SearchResult[] Results { get; set; }
		
		/// <summary>
		/// Suggested spelling for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellResults")]
		public SpellResult[] SpellResults { get; set; }
		
		/// <summary>
		/// Structured results for the user query. These results are not counted against the page_size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredResults")]
		public StructuredResult[] StructuredResults { get; set; }
	}
	
	/// <summary>
	/// Results containing indexed information for a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchResult
	{
		
		/// <summary>
		/// If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusteredResults")]
		public SearchResult[] ClusteredResults { get; set; }
		
		/// <summary>
		/// Debugging information about the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public ResultDebugInfo DebugInfo { get; set; }
		
		/// <summary>
		/// Metadata of a matched search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// Snippet of the search result, which summarizes the content of the resulting page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public Snippet Snippet { get; set; }
		
		/// <summary>
		/// Title of the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Snippet of the search result, which summarizes the content of the resulting page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Snippet
	{
		
		/// <summary>
		/// The matched ranges in the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchRanges")]
		public MatchRange[] MatchRanges { get; set; }
		
		/// <summary>
		/// The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpellResult
	{
		
		/// <summary>
		/// The suggested spelling of the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedQuery")]
		public string SuggestedQuery { get; set; }
		
		/// <summary>
		/// IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedQueryHtml")]
		public SafeHtmlProto SuggestedQueryHtml { get; set; }
		
		/// <summary>
		/// Suggestion triggered for the current query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestionType")]
		public System.Nullable<SpellResultSuggestionType> SuggestionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpellResultSuggestionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUGGESTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_EMPTY_RESULTS_SPELL_SUGGESTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZERO_RESULTS_FULL_PAGE_REPLACEMENT = 2,
	}
	
	/// <summary>
	/// Structured results that are returned as part of search request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructuredResult
	{
		
		/// <summary>
		/// Object to represent a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
	}
	
	/// <summary>
	/// Start upload file request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartUploadItemRequest
	{
		
		/// <summary>
		/// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
	}
	
	/// <summary>
	/// Request of suggest API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestRequest
	{
		
		/// <summary>
		/// The sources to use for suggestions. If not specified, the data sources are taken from the current search application. NOTE: Suggestions are only supported for the following sources: * Third-party data sources * PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceRestrictions")]
		public DataSourceRestriction[] DataSourceRestrictions { get; set; }
		
		/// <summary>
		/// Partial query for which autocomplete suggestions will be shown. For example, if the query is "sea", then the server might return "season", "search", "seagull" and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Shared request options for all RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestOptions")]
		public RequestOptions RequestOptions { get; set; }
	}
	
	/// <summary>
	/// Response of the suggest API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestResponse
	{
		
		/// <summary>
		/// List of suggestions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestResults")]
		public SuggestResult[] SuggestResults { get; set; }
	}
	
	/// <summary>
	/// One suggestion result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestResult
	{
		
		/// <summary>
		/// This field contains information about the person being suggested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peopleSuggestion")]
		public PeopleSuggestion PeopleSuggestion { get; set; }
		
		/// <summary>
		/// This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="querySuggestion")]
		public QuerySuggestion QuerySuggestion { get; set; }
		
		/// <summary>
		/// Defines sources for the suggest/search APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// The suggested query that will be used for search, when the user clicks on the suggestion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedQuery")]
		public string SuggestedQuery { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnreserveItemsRequest
	{
		
		/// <summary>
		/// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// The name of a queue to unreserve items from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDataSourceRequest
	{
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public DataSource Source { get; set; }
		
		/// <summary>
		/// Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSchemaRequest
	{
		
		/// <summary>
		/// Shared request debug options for all cloudsearch RPC methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugOptions")]
		public DebugOptions DebugOptions { get; set; }
		
		/// <summary>
		/// The schema definition for a data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public Schema Schema { get; set; }
		
		/// <summary>
		/// If true, the schema will be checked for validity, but will not be registered with the data source, even if valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_debug_datasources_items_searchByViewUrl v1/debug/{name}/items:searchByViewUrl
		/// </summary>
		/// <param name="name">Source name, format: datasources/{source_id}</param>
		/// <returns>Successful response</returns>
		public async Task<SearchItemsByViewUrlResponse> Cloudsearch_debug_datasources_items_searchByViewUrlAsync(string name, SearchItemsByViewUrlRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/debug/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/items:searchByViewUrl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchItemsByViewUrlResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_debug_datasources_items_checkAccess v1/debug/{name}:checkAccess
		/// </summary>
		/// <param name="name">Item name, format: datasources/{source_id}/items/{item_id}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckAccessResponse> Cloudsearch_debug_datasources_items_checkAccessAsync(string name, bool debugOptions_enableDebugging, Principal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/debug/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":checkAccess&debugOptions.enableDebugging="+debugOptions_enableDebugging;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckAccessResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_debug_identitysources_items_listForunmappedidentity v1/debug/{parent}/items:forunmappedidentity
		/// </summary>
		/// <param name="parent">The name of the identity source, in the following format: identitysources/{source_id}}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="pageSize">Maximum number of items to fetch in a request. Defaults to 100.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListItemNamesForUnmappedIdentityResponse> Cloudsearch_debug_identitysources_items_listForunmappedidentityAsync(string parent, bool debugOptions_enableDebugging, string groupResourceName, int pageSize, string pageToken, string userResourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/debug/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/items:forunmappedidentity&debugOptions.enableDebugging="+debugOptions_enableDebugging+"&groupResourceName=" + (groupResourceName==null? "" : System.Uri.EscapeDataString(groupResourceName))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&userResourceName=" + (userResourceName==null? "" : System.Uri.EscapeDataString(userResourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListItemNamesForUnmappedIdentityResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_debug_identitysources_unmappedids_list v1/debug/{parent}/unmappedids
		/// </summary>
		/// <param name="parent">The name of the identity source, in the following format: identitysources/{source_id}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="pageSize">Maximum number of items to fetch in a request. Defaults to 100.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <param name="resolutionStatusCode">Limit users selection to this status.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUnmappedIdentitiesResponse> Cloudsearch_debug_identitysources_unmappedids_listAsync(string parent, bool debugOptions_enableDebugging, int pageSize, string pageToken, UnmappedIdentityResolutionStatusCode resolutionStatusCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/debug/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/unmappedids&debugOptions.enableDebugging="+debugOptions_enableDebugging+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&resolutionStatusCode=" + resolutionStatusCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUnmappedIdentitiesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_delete v1/indexing/{name}
		/// </summary>
		/// <param name="name">Required. The name of the item to delete. Format: datasources/{source_id}/items/{item_id}</param>
		/// <param name="connectorName">The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="mode">Required. The RequestMode for this request.</param>
		/// <param name="version">Required. The incremented version of the item to delete from the index. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_indexing_datasources_items_deleteAsync(string name, string connectorName, bool debugOptions_enableDebugging, IndexItemRequestMode mode, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&connectorName=" + (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"&debugOptions.enableDebugging="+debugOptions_enableDebugging+"&mode=" + mode+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_get v1/indexing/{name}
		/// </summary>
		/// <param name="name">The name of the item to get info. Format: datasources/{source_id}/items/{item_id}</param>
		/// <param name="connectorName">The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Item> Cloudsearch_indexing_datasources_items_getAsync(string name, string connectorName, bool debugOptions_enableDebugging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&connectorName=" + (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"&debugOptions.enableDebugging="+debugOptions_enableDebugging;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Item>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_list v1/indexing/{name}/items
		/// </summary>
		/// <param name="name">The name of the Data Source to list Items. Format: datasources/{source_id}</param>
		/// <param name="brief">When set to true, the indexing system only populates the following fields: name, version, queue. metadata.hash, metadata.title, metadata.sourceRepositoryURL, metadata.objectType, metadata.createTime, metadata.updateTime, metadata.contentLanguage, metadata.mimeType, structured_data.hash, content.hash, itemType, itemStatus.code, itemStatus.processingError.code, itemStatus.repositoryError.type, If this value is false, then all the fields are populated in Item.</param>
		/// <param name="connectorName">The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="pageSize">Maximum number of items to fetch in a request. The max value is 1000 when brief is true. The max value is 10 if brief is false. The default value is 10</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListItemsResponse> Cloudsearch_indexing_datasources_items_listAsync(string name, bool brief, string connectorName, bool debugOptions_enableDebugging, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/items&brief="+brief+"&connectorName=" + (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"&debugOptions.enableDebugging="+debugOptions_enableDebugging+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_deleteQueueItems v1/indexing/{name}/items:deleteQueueItems
		/// </summary>
		/// <param name="name">The name of the Data Source to delete items in a queue. Format: datasources/{source_id}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_indexing_datasources_items_deleteQueueItemsAsync(string name, DeleteQueueItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/items:deleteQueueItems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4 hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_poll v1/indexing/{name}/items:poll
		/// </summary>
		/// <param name="name">The name of the Data Source to poll items. Format: datasources/{source_id}</param>
		/// <returns>Successful response</returns>
		public async Task<PollItemsResponse> Cloudsearch_indexing_datasources_items_pollAsync(string name, PollItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/items:poll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PollItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_unreserve v1/indexing/{name}/items:unreserve
		/// </summary>
		/// <param name="name">The name of the Data Source to unreserve all items. Format: datasources/{source_id}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_indexing_datasources_items_unreserveAsync(string name, UnreserveItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/items:unreserve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute.
		/// Cloudsearch_indexing_datasources_deleteSchema v1/indexing/{name}/schema
		/// </summary>
		/// <param name="name">The name of the data source to delete Schema. Format: datasources/{source_id}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_indexing_datasources_deleteSchemaAsync(string name, bool debugOptions_enableDebugging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/schema&debugOptions.enableDebugging="+debugOptions_enableDebugging;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the schema of a data source. **Note:** This API requires an admin or service account to execute.
		/// Cloudsearch_indexing_datasources_getSchema v1/indexing/{name}/schema
		/// </summary>
		/// <param name="name">The name of the data source to get Schema. Format: datasources/{source_id}</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Schema> Cloudsearch_indexing_datasources_getSchemaAsync(string name, bool debugOptions_enableDebugging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/schema&debugOptions.enableDebugging="+debugOptions_enableDebugging;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema. **Note:** This API requires an admin or service account to execute.
		/// Cloudsearch_indexing_datasources_updateSchema v1/indexing/{name}/schema
		/// </summary>
		/// <param name="name">The name of the data source to update Schema. Format: datasources/{source_id}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_indexing_datasources_updateSchemaAsync(string name, UpdateSchemaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/schema";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_index v1/indexing/{name}:index
		/// </summary>
		/// <param name="name">The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_indexing_datasources_items_indexAsync(string name, IndexItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":index";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_push v1/indexing/{name}:push
		/// </summary>
		/// <param name="name">The name of the item to push into the indexing queue. Format: datasources/{source_id}/items/{ID} This is a required field. The maximum length is 1536 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Item> Cloudsearch_indexing_datasources_items_pushAsync(string name, PushItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":push";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Item>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
		/// Cloudsearch_indexing_datasources_items_upload v1/indexing/{name}:upload
		/// </summary>
		/// <param name="name">The name of the Item to start a resumable upload. Format: datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes.</param>
		/// <returns>Successful response</returns>
		public async Task<UploadItemRef> Cloudsearch_indexing_datasources_items_uploadAsync(string name, StartUploadItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indexing/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":upload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadItemRef>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The Cloud Search Query API provides the search method, which returns the most relevant results from a user query. The results can come from Google Workspace apps, such as Gmail or Google Drive, or they can come from data that you have indexed from a third party. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
		/// Cloudsearch_query_search v1/query/search
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SearchResponse> Cloudsearch_query_searchAsync(SearchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/query/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns list of sources that user can use for Search and Suggest APIs. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
		/// Cloudsearch_query_sources_list v1/query/sources
		/// </summary>
		/// <param name="pageToken">Number of sources to return in the response.</param>
		/// <param name="requestOptions_debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="requestOptions_languageCode">The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The Suggest API uses this field as a hint to make better third-party autocomplete predictions.</param>
		/// <param name="requestOptions_searchApplicationId">The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).</param>
		/// <param name="requestOptions_timeZone">Current user's time zone id, such as "America/Los_Angeles" or "Australia/Sydney". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.</param>
		/// <returns>Successful response</returns>
		public async Task<ListQuerySourcesResponse> Cloudsearch_query_sources_listAsync(string pageToken, bool requestOptions_debugOptions_enableDebugging, string requestOptions_languageCode, string requestOptions_searchApplicationId, string requestOptions_timeZone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/query/sources?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&requestOptions.debugOptions.enableDebugging="+requestOptions_debugOptions_enableDebugging+"&requestOptions.languageCode=" + (requestOptions_languageCode==null? "" : System.Uri.EscapeDataString(requestOptions_languageCode))+"&requestOptions.searchApplicationId=" + (requestOptions_searchApplicationId==null? "" : System.Uri.EscapeDataString(requestOptions_searchApplicationId))+"&requestOptions.timeZone=" + (requestOptions_timeZone==null? "" : System.Uri.EscapeDataString(requestOptions_timeZone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListQuerySourcesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides suggestions for autocompleting the query. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
		/// Cloudsearch_query_suggest v1/query/suggest
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SuggestResponse> Cloudsearch_query_suggestAsync(SuggestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/query/suggest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SuggestResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides functionality to remove logged activity for a user. Currently to be used only for Chat 1p clients **Note:** This API requires a standard end user account to execute. A service account can't perform Remove Activity requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
		/// Cloudsearch_query_removeActivity v1/query:removeActivity
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RemoveActivityResponse> Cloudsearch_query_removeActivityAsync(RemoveActivityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/query:removeActivity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemoveActivityResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer settings. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_getCustomer v1/settings/customer
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CustomerSettings> Cloudsearch_settings_getCustomerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/customer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomerSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update customer settings. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_updateCustomer v1/settings/customer
		/// </summary>
		/// <param name="updateMask">Update mask to control which fields get updated. If you specify a field in the update_mask but don't specify its value here, that field will be cleared. If the mask is not present or empty, all fields will be updated. Currently supported field paths: vpc_settings and audit_logging_settings</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_updateCustomerAsync(string updateMask, CustomerSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/customer?updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists datasources. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_datasources_list v1/settings/datasources
		/// </summary>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="pageSize">Maximum number of datasources to fetch in a request. The max value is 1000. The default value is 1000.</param>
		/// <param name="pageToken">Starting index of the results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDataSourceResponse> Cloudsearch_settings_datasources_listAsync(bool debugOptions_enableDebugging, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/datasources?debugOptions.enableDebugging="+debugOptions_enableDebugging+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDataSourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a datasource. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_datasources_create v1/settings/datasources
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_datasources_createAsync(DataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/datasources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all search applications. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_list v1/settings/searchapplications
		/// </summary>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <param name="pageSize">The maximum number of items to return.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any. The default value is 10</param>
		/// <returns>Successful response</returns>
		public async Task<ListSearchApplicationsResponse> Cloudsearch_settings_searchapplications_listAsync(bool debugOptions_enableDebugging, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/searchapplications?debugOptions.enableDebugging="+debugOptions_enableDebugging+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSearchApplicationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a search application. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_create v1/settings/searchapplications
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_searchapplications_createAsync(SearchApplication requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/searchapplications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a search application. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_delete v1/settings/{name}
		/// </summary>
		/// <param name="name">The name of the search application to be deleted. Format: applications/{application_id}.</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_searchapplications_deleteAsync(string name, bool debugOptions_enableDebugging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&debugOptions.enableDebugging="+debugOptions_enableDebugging;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified search application. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_get v1/settings/{name}
		/// </summary>
		/// <param name="name">The name of the search application. Format: searchapplications/{application_id}.</param>
		/// <param name="debugOptions_enableDebugging">If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchApplication> Cloudsearch_settings_searchapplications_getAsync(string name, bool debugOptions_enableDebugging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&debugOptions.enableDebugging="+debugOptions_enableDebugging;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchApplication>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a search application. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_patch v1/settings/{name}
		/// </summary>
		/// <param name="name">The name of the Search Application. Format: searchapplications/{application_id}.</param>
		/// <param name="updateMask">Only applies to [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch). Update mask to control which fields to update. Example field paths: `search_application.name`, `search_application.displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the `search_application`, then that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_searchapplications_patchAsync(string name, string updateMask, SearchApplication requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a search application. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_update v1/settings/{name}
		/// </summary>
		/// <param name="name">The name of the Search Application. Format: searchapplications/{application_id}.</param>
		/// <param name="updateMask">Only applies to [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch). Update mask to control which fields to update. Example field paths: `search_application.name`, `search_application.displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the `search_application`, then that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_searchapplications_updateAsync(string name, string updateMask, SearchApplication requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_settings_searchapplications_reset v1/settings/{name}:reset
		/// </summary>
		/// <param name="name">The name of the search application to be reset. Format: applications/{application_id}.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_settings_searchapplications_resetAsync(string name, ResetSearchApplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_getIndex v1/stats/index
		/// </summary>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetCustomerIndexStatsResponse> Cloudsearch_stats_getIndexAsync(int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/index?fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCustomerIndexStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_index_datasources_get v1/stats/index/{name}
		/// </summary>
		/// <param name="name">The resource id of the data source to retrieve statistics for, in the following format: "datasources/{source_id}"</param>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetDataSourceIndexStatsResponse> Cloudsearch_stats_index_datasources_getAsync(string name, int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/index/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDataSourceIndexStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_getQuery v1/stats/query
		/// </summary>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetCustomerQueryStatsResponse> Cloudsearch_stats_getQueryAsync(int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/query?fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCustomerQueryStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_query_searchapplications_get v1/stats/query/{name}
		/// </summary>
		/// <param name="name">The resource id of the search application query stats, in the following format: searchapplications/{application_id}</param>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetSearchApplicationQueryStatsResponse> Cloudsearch_stats_query_searchapplications_getAsync(string name, int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/query/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSearchApplicationQueryStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get search application stats for customer. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_getSearchapplication v1/stats/searchapplication
		/// </summary>
		/// <param name="endDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="endDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="endDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="startDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="startDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="startDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetCustomerSearchApplicationStatsResponse> Cloudsearch_stats_getSearchapplicationAsync(int endDate_day, int endDate_month, int endDate_year, int startDate_day, int startDate_month, int startDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/searchapplication?endDate.day="+endDate_day+"&endDate.month="+endDate_month+"&endDate.year="+endDate_year+"&startDate.day="+startDate_day+"&startDate.month="+startDate_month+"&startDate.year="+startDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCustomerSearchApplicationStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_getSession v1/stats/session
		/// </summary>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetCustomerSessionStatsResponse> Cloudsearch_stats_getSessionAsync(int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/session?fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCustomerSessionStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_session_searchapplications_get v1/stats/session/{name}
		/// </summary>
		/// <param name="name">The resource id of the search application session stats, in the following format: searchapplications/{application_id}</param>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetSearchApplicationSessionStatsResponse> Cloudsearch_stats_session_searchapplications_getAsync(string name, int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/session/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSearchApplicationSessionStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the users statistics for customer. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_getUser v1/stats/user
		/// </summary>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetCustomerUserStatsResponse> Cloudsearch_stats_getUserAsync(int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/user?fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCustomerUserStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.
		/// Cloudsearch_stats_user_searchapplications_get v1/stats/user/{name}
		/// </summary>
		/// <param name="name">The resource id of the search application session stats, in the following format: searchapplications/{application_id}</param>
		/// <param name="fromDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="fromDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="fromDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <param name="toDate_day">Day of month. Must be from 1 to 31 and valid for the year and month.</param>
		/// <param name="toDate_month">Month of date. Must be from 1 to 12.</param>
		/// <param name="toDate_year">Year of date. Must be from 1 to 9999.</param>
		/// <returns>Successful response</returns>
		public async Task<GetSearchApplicationUserStatsResponse> Cloudsearch_stats_user_searchapplications_getAsync(string name, int fromDate_day, int fromDate_month, int fromDate_year, int toDate_day, int toDate_month, int toDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/stats/user/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fromDate.day="+fromDate_day+"&fromDate.month="+fromDate_month+"&fromDate.year="+fromDate_year+"&toDate.day="+toDate_day+"&toDate.month="+toDate_month+"&toDate.year="+toDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSearchApplicationUserStatsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Cloudsearch_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Cloudsearch_operations_lro_list v1/{name}/lro
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Cloudsearch_operations_lro_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/lro&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables `third party` support in Google Cloud Search. **Note:** This API requires an admin account to execute.
		/// Cloudsearch_initializeCustomer v1:initializeCustomer
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudsearch_initializeCustomerAsync(InitializeCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1:initializeCustomer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
