//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The entity analysis request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeEntitiesRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public System.Nullable<AnalyzeEntitiesRequestEncodingType> EncodingType { get; set; }
	}
	
	/// <summary>
	/// Represents the input to API methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		/// <summary>
		/// The content of the input in string format. Cloud audit logging exempt since it is based on user data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsContentUri")]
		public string GcsContentUri { get; set; }
		
		/// <summary>
		/// Optional. The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DocumentType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNSPECIFIED")]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAIN_TEXT")]
		PLAIN_TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTML")]
		HTML = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnalyzeEntitiesRequestEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF8")]
		UTF8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF16")]
		UTF16 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF32")]
		UTF32 = 3,
	}
	
	/// <summary>
	/// The entity analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeEntitiesResponse
	{
		
		/// <summary>
		/// The recognized entities in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageSupported")]
		public System.Nullable<System.Boolean> LanguageSupported { get; set; }
	}
	
	/// <summary>
	/// Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as probability and mentions, with entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entity
	{
		
		/// <summary>
		/// The mentions of this entity in the input document. The API currently supports proper noun mentions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentions")]
		public EntityMention[] Mentions { get; set; }
		
		/// <summary>
		/// Metadata associated with the entity. For the metadata associated with other entity types, see the Type table below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The representative name for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// The entity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EntityType> Type { get; set; }
	}
	
	/// <summary>
	/// Represents a mention for an entity in the text. Currently, proper noun mentions are supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityMention
	{
		
		/// <summary>
		/// Probability score associated with the entity. The score shows the probability of the entity mention being the entity type. The score is in (0, 1] range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Single> Probability { get; set; }
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// Represents a text span in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextSpan Text { get; set; }
		
		/// <summary>
		/// The type of the entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EntityMentionType> Type { get; set; }
	}
	
	/// <summary>
	/// Represents the feeling associated with the entire text or entities in the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sentiment
	{
		
		/// <summary>
		/// A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="magnitude")]
		public System.Nullable<System.Single> Magnitude { get; set; }
		
		/// <summary>
		/// Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	/// <summary>
	/// Represents a text span in the input document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextSpan
	{
		
		/// <summary>
		/// The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginOffset")]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		/// <summary>
		/// The content of the text span, which is a substring of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntityMentionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNKNOWN")]
		TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPER")]
		PROPER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON")]
		COMMON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSON")]
		PERSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION")]
		LOCATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATION")]
		ORGANIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT")]
		EVENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_OF_ART")]
		WORK_OF_ART = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONSUMER_GOOD")]
		CONSUMER_GOOD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE_NUMBER")]
		PHONE_NUMBER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDRESS")]
		ADDRESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATE")]
		DATE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER")]
		NUMBER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRICE")]
		PRICE = 12,
	}
	
	/// <summary>
	/// The sentiment analysis request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeSentimentRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate sentence offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public AnalyzeEntitiesRequestEncodingType EncodingType { get; set; }
	}
	
	/// <summary>
	/// The sentiment analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeSentimentResponse
	{
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentSentiment")]
		public Sentiment DocumentSentiment { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageSupported")]
		public System.Nullable<System.Boolean> LanguageSupported { get; set; }
		
		/// <summary>
		/// The sentiment for all the sentences in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public Sentence[] Sentences { get; set; }
	}
	
	/// <summary>
	/// Represents a sentence in the input document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sentence
	{
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// Represents a text span in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextSpan Text { get; set; }
	}
	
	/// <summary>
	/// The request message for the text annotation API, which can perform multiple analysis types in one call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnnotateTextRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public AnalyzeEntitiesRequestEncodingType EncodingType { get; set; }
		
		/// <summary>
		/// All available features. Setting each one to true will enable that specific analysis for the input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public Features Features { get; set; }
	}
	
	/// <summary>
	/// All available features. Setting each one to true will enable that specific analysis for the input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Features
	{
		
		/// <summary>
		/// Optional. Classify the full document into categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifyText")]
		public System.Nullable<System.Boolean> ClassifyText { get; set; }
		
		/// <summary>
		/// Optional. Extract document-level sentiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractDocumentSentiment")]
		public System.Nullable<System.Boolean> ExtractDocumentSentiment { get; set; }
		
		/// <summary>
		/// Optional. Extract entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractEntities")]
		public System.Nullable<System.Boolean> ExtractEntities { get; set; }
		
		/// <summary>
		/// Optional. Moderate the document for harmful and sensitive categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderateText")]
		public System.Nullable<System.Boolean> ModerateText { get; set; }
	}
	
	/// <summary>
	/// The text annotations response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnnotateTextResponse
	{
		
		/// <summary>
		/// Categories identified in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ClassificationCategory[] Categories { get; set; }
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentSentiment")]
		public Sentiment DocumentSentiment { get; set; }
		
		/// <summary>
		/// Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities or AnnotateTextRequest.Features.extract_entity_sentiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Whether the language is officially supported by all requested features. The API may still return a response when the language is not supported, but it is on a best effort basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageSupported")]
		public System.Nullable<System.Boolean> LanguageSupported { get; set; }
		
		/// <summary>
		/// Harmful and sensitive categories identified in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderationCategories")]
		public ClassificationCategory[] ModerationCategories { get; set; }
		
		/// <summary>
		/// Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public Sentence[] Sentences { get; set; }
	}
	
	/// <summary>
	/// Represents a category returned from the text classifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassificationCategory
	{
		
		/// <summary>
		/// The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
		
		/// <summary>
		/// The name of the category representing the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The document classification request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassifyTextRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
	}
	
	/// <summary>
	/// The document classification response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassifyTextResponse
	{
		
		/// <summary>
		/// Categories representing the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ClassificationCategory[] Categories { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageSupported")]
		public System.Nullable<System.Boolean> LanguageSupported { get; set; }
	}
	
	/// <summary>
	/// The document moderation request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerateTextRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
	}
	
	/// <summary>
	/// The document moderation response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerateTextResponse
	{
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageSupported")]
		public System.Nullable<System.Boolean> LanguageSupported { get; set; }
		
		/// <summary>
		/// Harmful and sensitive categories representing the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderationCategories")]
		public ClassificationCategory[] ModerationCategories { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Finds named entities (currently proper names and common nouns) in the text along with entity types, probability, mentions for each entity, and other properties.
		/// Language_documents_analyzeEntities v2/documents:analyzeEntities
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeEntitiesResponse> Language_documents_analyzeEntitiesAsync(AnalyzeEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/documents:analyzeEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Analyzes the sentiment of the provided text.
		/// Language_documents_analyzeSentiment v2/documents:analyzeSentiment
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeSentimentResponse> Language_documents_analyzeSentimentAsync(AnalyzeSentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/documents:analyzeSentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeSentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A convenience method that provides all features in one call.
		/// Language_documents_annotateText v2/documents:annotateText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnnotateTextResponse> Language_documents_annotateTextAsync(AnnotateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/documents:annotateText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnnotateTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Classifies a document into categories.
		/// Language_documents_classifyText v2/documents:classifyText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ClassifyTextResponse> Language_documents_classifyTextAsync(ClassifyTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/documents:classifyText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassifyTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moderates a document for harmful and sensitive categories.
		/// Language_documents_moderateText v2/documents:moderateText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ModerateTextResponse> Language_documents_moderateTextAsync(ModerateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/documents:moderateText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ModerateTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
