//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ActivationOptions for the class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivationOptions
	{
		
		/// <summary>
		/// HTTPS URL that supports REST semantics. Would be used for requesting activation from partners for given valuable, triggered by the users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationUrl")]
		public string ActivationUrl { get; set; }
		
		/// <summary>
		/// Flag to allow users to make activation call from different device. This allows client to render the activation button enabled even if the activationStatus is ACTIVATED but the requested device is different than the current device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowReactivation")]
		public System.Nullable<System.Boolean> AllowReactivation { get; set; }
	}
	
	/// <summary>
	/// The activation status of the object. This field includes activation status if valuable supports activation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivationStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ActivationStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActivationStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_STATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ACTIVATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_activated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		activated = 4,
	}
	
	/// <summary>
	/// Resource used when the AddMessage endpoints are called.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddMessageRequest
	{
		
		/// <summary>
		/// A message that will be displayed with a Valuable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	/// <summary>
	/// A message that will be displayed with a Valuable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Message
	{
		
		/// <summary>
		/// The message body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayInterval")]
		public TimeInterval DisplayInterval { get; set; }
		
		/// <summary>
		/// The message header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// The ID associated with a message. This field is here to enable ease of management of messages. Notice ID values could possibly duplicate across multiple messages in the same class/instance, and care must be taken to select a reasonable ID for each message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#walletObjectMessage"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedBody")]
		public LocalizedString LocalizedBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedHeader")]
		public LocalizedString LocalizedHeader { get; set; }
		
		/// <summary>
		/// The type of the message. Currently, this can only be set for offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public System.Nullable<MessageMessageType> MessageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeInterval
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public DateTime End { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#timeInterval"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public DateTime Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTime
	{
		
		/// <summary>
		/// An ISO 8601 extended format date/time. Offset may or may not be required (refer to the parent field's documentation). Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the date/time is intended for a physical location in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. Providing an offset makes this an absolute instant in time around the world. The date/time will be adjusted based on the user's time zone. For example, a time of `2018-06-19T18:30:00-04:00` will be 18:30:00 for a user in New York and 15:30:00 for a user in Los Angeles. Omitting the offset makes this a local date/time, representing several instants in time around the world. The date/time will always be in the user's current time zone. For example, a time of `2018-06-19T18:30:00` will be 18:30:00 for a user in New York and also 18:30:00 for a user in Los Angeles. This is useful when the same local date/time should apply to many physical locations across several time zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalizedString
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public TranslatedString DefaultValue { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#localizedString"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Contains the translations for the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translatedValues")]
		public TranslatedString[] TranslatedValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranslatedString
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#translatedString"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Represents the BCP 47 language tag. Example values are "en-US", "en-GB", "de", or "de-AT".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The UTF-8 encoded translated string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageMessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRATION_NOTIFICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expirationNotification = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AirportInfo
	{
		
		/// <summary>
		/// Three character IATA airport code. This is a required field for `origin` and `destination`. Eg: "SFO"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airportIataCode")]
		public string AirportIataCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airportNameOverride")]
		public LocalizedString AirportNameOverride { get; set; }
		
		/// <summary>
		/// A name of the gate. Eg: "B59" or "59"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gate")]
		public string Gate { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#airportInfo"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Terminal name. Eg: "INTL" or "I"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminal")]
		public string Terminal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppLinkData
	{
		
		[System.Runtime.Serialization.DataMember(Name="androidAppLinkInfo")]
		public AppLinkDataAppLinkInfo AndroidAppLinkInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iosAppLinkInfo")]
		public AppLinkDataAppLinkInfo IosAppLinkInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAppLinkInfo")]
		public AppLinkDataAppLinkInfo WebAppLinkInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppLinkDataAppLinkInfo
	{
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appLogoImage")]
		public Image AppLogoImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appTarget")]
		public AppLinkDataAppLinkInfoAppTarget AppTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public LocalizedString Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public LocalizedString Title { get; set; }
	}
	
	/// <summary>
	/// Wrapping type for Google hosted images. Next ID: 7
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentDescription")]
		public LocalizedString ContentDescription { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#image"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public ImageUri SourceUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageUri
	{
		
		/// <summary>
		/// Additional information about the image, which is unused and retained only for backward compatibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedDescription")]
		public LocalizedString LocalizedDescription { get; set; }
		
		/// <summary>
		/// The location of the image. URIs must have a scheme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppLinkDataAppLinkInfoAppTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetUri")]
		public Uri TargetUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Uri
	{
		
		/// <summary>
		/// The URI's title appearing in the app as text. Recommended maximum is 20 characters to ensure full string is displayed on smaller screens. Note that in some contexts this text is not used, such as when `description` is part of an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID associated with a uri. This field is here to enable ease of management of uris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#uri"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedDescription")]
		public LocalizedString LocalizedDescription { get; set; }
		
		/// <summary>
		/// The location of a web page, image, or other resource. URIs in the `LinksModuleData` module can have different prefixes indicating the type of URI (a link to a web page, a link to a map, a telephone number, or an email address). URIs must have a scheme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationKey
	{
		
		/// <summary>
		/// Available only to Smart Tap enabled partners. Contact support for additional guidance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Available only to Smart Tap enabled partners. Contact support for additional guidance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeyPem")]
		public string PublicKeyPem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Barcode
	{
		
		/// <summary>
		/// An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateText")]
		public string AlternateText { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#barcode"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderEncoding")]
		public System.Nullable<BarcodeRenderEncoding> RenderEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showCodeText")]
		public LocalizedString ShowCodeText { get; set; }
		
		/// <summary>
		/// The type of barcode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BarcodeType> Type { get; set; }
		
		/// <summary>
		/// The value encoded in the barcode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BarcodeRenderEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENDER_ENCODING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF_8 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BarcodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BARCODE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZTEC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aztec = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_39 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		code39 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_128 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		code128 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODABAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		codabar = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_MATRIX = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataMatrix = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAN_8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ean8 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAN_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ean13 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAN13 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITF_14 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		itf14 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDF_417 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pdf417 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDF417 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QR_CODE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qrCode = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qrcode = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPC_A = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upcA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_ONLY = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		textOnly = 27,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BarcodeSectionDetail
	{
		
		/// <summary>
		/// Custom field selector to use with field overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldSelector")]
		public FieldSelector FieldSelector { get; set; }
	}
	
	/// <summary>
	/// Custom field selector to use with field overrides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldSelector
	{
		
		/// <summary>
		/// If more than one reference is supplied, then the first one that references a non-empty field will be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldReference[] Fields { get; set; }
	}
	
	/// <summary>
	/// Reference definition to use with field overrides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldReference
	{
		
		/// <summary>
		/// Only valid if the `fieldPath` references a date field. Chooses how the date field will be formatted and displayed in the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		public System.Nullable<FieldReferenceDateFormat> DateFormat { get; set; }
		
		/// <summary>
		/// Path to the field being referenced, prefixed with "object" or "class" and separated with dots. For example, it may be the string "object.purchaseDetails.purchasePrice".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPath")]
		public string FieldPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FieldReferenceDateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateTime = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateOnly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ONLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeOnly = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_TIME_YEAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateTimeYear = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_YEAR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateYear = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_MONTH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_MONTH_DAY = 12,
	}
	
	/// <summary>
	/// Information to read/write to blobstore2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Blobstore2Info
	{
		
		/// <summary>
		/// The blob generation id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobGeneration")]
		public string BlobGeneration { get; set; }
		
		/// <summary>
		/// The blob id, e.g., /blobstore/prod/playground/scotty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		/// <summary>
		/// Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadReadHandle")]
		public string DownloadReadHandle { get; set; }
		
		/// <summary>
		/// The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readToken")]
		public string ReadToken { get; set; }
		
		/// <summary>
		/// Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadMetadataContainer")]
		public string UploadMetadataContainer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardingAndSeatingInfo
	{
		
		/// <summary>
		/// Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the `seatClass`. In those cases `boardingDoor` should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boardingDoor")]
		public System.Nullable<BoardingAndSeatingInfoBoardingDoor> BoardingDoor { get; set; }
		
		/// <summary>
		/// The value of boarding group (or zone) this passenger shall board with. eg: "B" The label for this value will be determined by the `boardingPolicy` field in the `flightClass` referenced by this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boardingGroup")]
		public string BoardingGroup { get; set; }
		
		/// <summary>
		/// The value of boarding position. eg: "76"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boardingPosition")]
		public string BoardingPosition { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boardingPrivilegeImage")]
		public Image BoardingPrivilegeImage { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#boardingAndSeatingInfo"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seatAssignment")]
		public LocalizedString SeatAssignment { get; set; }
		
		/// <summary>
		/// The value of the seat class. eg: "Economy" or "Economy Plus"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seatClass")]
		public string SeatClass { get; set; }
		
		/// <summary>
		/// The value of passenger seat. If there is no specific identifier, use `seatAssignment` instead. eg: "25A"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seatNumber")]
		public string SeatNumber { get; set; }
		
		/// <summary>
		/// The sequence number on the boarding pass. This usually matches the sequence in which the passengers checked in. Airline might use the number for manual boarding and bag tags. eg: "49"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceNumber")]
		public string SequenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BoardingAndSeatingInfoBoardingDoor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOARDING_DOOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		front = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		back = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BoardingAndSeatingPolicy
	{
		
		/// <summary>
		/// Indicates the policy the airline uses for boarding. If unset, Google will default to `zoneBased`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boardingPolicy")]
		public System.Nullable<BoardingAndSeatingPolicyBoardingPolicy> BoardingPolicy { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#boardingAndSeatingPolicy"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Seating policy which dictates how we display the seat class. If unset, Google will default to `cabinBased`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seatClassPolicy")]
		public System.Nullable<BoardingAndSeatingPolicySeatClassPolicy> SeatClassPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BoardingAndSeatingPolicyBoardingPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOARDING_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONE_BASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zoneBased = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP_BASED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groupBased = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOARDING_POLICY_OTHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boardingPolicyOther = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BoardingAndSeatingPolicySeatClassPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEAT_CLASS_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CABIN_BASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cabinBased = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASS_BASED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		classBased = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIER_BASED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tierBased = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEAT_CLASS_POLICY_OTHER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		seatClassPolicyOther = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallbackOptions
	{
		
		/// <summary>
		/// URL for the merchant endpoint that would be called to request updates. The URL should be hosted on HTTPS and robots.txt should allow the URL path to be accessible by UserAgent:Google-Valuables. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateRequestUrl")]
		public string UpdateRequestUrl { get; set; }
		
		/// <summary>
		/// The HTTPS url configured by the merchant. The URL should be hosted on HTTPS and robots.txt should allow the URL path to be accessible by UserAgent:Google-Valuables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardBarcodeSectionDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstBottomDetail")]
		public BarcodeSectionDetail FirstBottomDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstTopDetail")]
		public BarcodeSectionDetail FirstTopDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondTopDetail")]
		public BarcodeSectionDetail SecondTopDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardRowOneItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public TemplateItem Item { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateItem
	{
		
		/// <summary>
		/// Custom field selector to use with field overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstValue")]
		public FieldSelector FirstValue { get; set; }
		
		/// <summary>
		/// A predefined item to display. Only one of `firstValue` or `predefinedItem` may be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedItem")]
		public System.Nullable<TemplateItemPredefinedItem> PredefinedItem { get; set; }
		
		/// <summary>
		/// Custom field selector to use with field overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondValue")]
		public FieldSelector SecondValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateItemPredefinedItem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREDEFINED_ITEM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		frequentFlyerProgramNameAndNumber = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flightNumberAndOperatingFlightNumber = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardRowTemplateInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="oneItem")]
		public CardRowOneItem OneItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="threeItems")]
		public CardRowThreeItems ThreeItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twoItems")]
		public CardRowTwoItems TwoItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardRowThreeItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="endItem")]
		public TemplateItem EndItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleItem")]
		public TemplateItem MiddleItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startItem")]
		public TemplateItem StartItem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardRowTwoItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="endItem")]
		public TemplateItem EndItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startItem")]
		public TemplateItem StartItem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CardTemplateOverride
	{
		
		/// <summary>
		/// Template information for rows in the card view. At most three rows are allowed to be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardRowTemplateInfos")]
		public CardRowTemplateInfo[] CardRowTemplateInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassTemplateInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="cardBarcodeSectionDetails")]
		public CardBarcodeSectionDetails CardBarcodeSectionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardTemplateOverride")]
		public CardTemplateOverride CardTemplateOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailsTemplateOverride")]
		public DetailsTemplateOverride DetailsTemplateOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listTemplateOverride")]
		public ListTemplateOverride ListTemplateOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetailsTemplateOverride
	{
		
		/// <summary>
		/// Information for the "nth" item displayed in the details list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailsItemInfos")]
		public DetailsItemInfo[] DetailsItemInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetailsItemInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public TemplateItem Item { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateOverride
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstRowOption")]
		public FirstRowOption FirstRowOption { get; set; }
		
		/// <summary>
		/// Custom field selector to use with field overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondRowOption")]
		public FieldSelector SecondRowOption { get; set; }
		
		/// <summary>
		/// Custom field selector to use with field overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdRowOption")]
		public FieldSelector ThirdRowOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FirstRowOption
	{
		
		/// <summary>
		/// Custom field selector to use with field overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldOption")]
		public FieldSelector FieldOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitOption")]
		public System.Nullable<FirstRowOptionTransitOption> TransitOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FirstRowOptionTransitOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSIT_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGIN_AND_DESTINATION_NAMES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		originAndDestinationNames = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGIN_AND_DESTINATION_CODES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		originAndDestinationCodes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGIN_NAME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		originName = 6,
	}
	
	/// <summary>
	/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompositeMedia
	{
		
		/// <summary>
		/// Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRef")]
		public string BlobRef { get; set; }
		
		/// <summary>
		/// Information to read/write to blobstore2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobstore2Info")]
		public Blobstore2Info Blobstore2Info { get; set; }
		
		/// <summary>
		/// A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmoBinaryReference")]
		public string CosmoBinaryReference { get; set; }
		
		/// <summary>
		/// crc32.c hash for the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32cHash")]
		public System.Nullable<System.UInt32> Crc32cHash { get; set; }
		
		/// <summary>
		/// Media data, set if reference_type is INLINE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string Inline { get; set; }
		
		/// <summary>
		/// Size of the data, in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// MD5 hash for the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public ObjectId ObjectId { get; set; }
		
		/// <summary>
		/// Path to the data, set if reference_type is PATH
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Describes what the field reference contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public System.Nullable<CompositeMediaReferenceType> ReferenceType { get; set; }
		
		/// <summary>
		/// SHA-1 hash for the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Hash")]
		public string Sha1Hash { get; set; }
	}
	
	/// <summary>
	/// This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObjectId
	{
		
		/// <summary>
		/// The name of the bucket to which this object belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// The name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CompositeMediaReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGSTORE_REF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMO_BINARY_REFERENCE = 4,
	}
	
	/// <summary>
	/// Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentTypeInfo
	{
		
		/// <summary>
		/// Scotty's best guess of what the content type of the file is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestGuess")]
		public string BestGuess { get; set; }
		
		/// <summary>
		/// The content type of the file derived by looking at specific bytes (i.e. "magic bytes") of the actual file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromBytes")]
		public string FromBytes { get; set; }
		
		/// <summary>
		/// The content type of the file derived from the file extension of the original file name used by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromFileName")]
		public string FromFileName { get; set; }
		
		/// <summary>
		/// The content type of the file as specified in the request headers, multipart headers, or RUPIO start request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromHeader")]
		public string FromHeader { get; set; }
		
		/// <summary>
		/// The content type of the file derived from the file extension of the URL path. The URL path is assumed to represent a file name (which is typically only true for agents that are providing a REST API).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromUrlPath")]
		public string FromUrlPath { get; set; }
	}
	
	/// <summary>
	/// Device context associated with the object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceContext
	{
		
		/// <summary>
		/// If set, redemption information will only be returned to the given device upon activation of the object. This should not be used as a stable identifier to trace a user's device. It can change across different passes for the same device or even across different activations for the same device. When setting this, callers must also set has_linked_device on the object being activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceToken")]
		public string DeviceToken { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff get checksums response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiffChecksumsResponse
	{
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksumsLocation")]
		public CompositeMedia ChecksumsLocation { get; set; }
		
		/// <summary>
		/// The chunk size of checksums. Must be a multiple of 256KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chunkSizeBytes")]
		public string ChunkSizeBytes { get; set; }
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectLocation")]
		public CompositeMedia ObjectLocation { get; set; }
		
		/// <summary>
		/// The total size of the server object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSizeBytes")]
		public string ObjectSizeBytes { get; set; }
		
		/// <summary>
		/// The object version of the object the checksums are being returned for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff download response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiffDownloadResponse
	{
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectLocation")]
		public CompositeMedia ObjectLocation { get; set; }
	}
	
	/// <summary>
	/// A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiffUploadRequest
	{
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksumsInfo")]
		public CompositeMedia ChecksumsInfo { get; set; }
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectInfo")]
		public CompositeMedia ObjectInfo { get; set; }
		
		/// <summary>
		/// The object version of the object that is the base version the incoming diff script will be applied to. This field will always be filled in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiffUploadResponse
	{
		
		/// <summary>
		/// The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalObject")]
		public CompositeMedia OriginalObject { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff get version response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiffVersionResponse
	{
		
		/// <summary>
		/// The total size of the server object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSizeBytes")]
		public string ObjectSizeBytes { get; set; }
		
		/// <summary>
		/// The version of the object stored at the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// Information about how a class may be discovered and instantiated from within the Android Pay app. This is done by searching for a loyalty or gift card program and scanning or manually entering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscoverableProgram
	{
		
		/// <summary>
		/// Information about the merchant hosted signin flow for a program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantSigninInfo")]
		public DiscoverableProgramMerchantSigninInfo MerchantSigninInfo { get; set; }
		
		/// <summary>
		/// Information about the merchant hosted signup flow for a program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantSignupInfo")]
		public DiscoverableProgramMerchantSignupInfo MerchantSignupInfo { get; set; }
		
		/// <summary>
		/// Visibility state of the discoverable program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DiscoverableProgramState> State { get; set; }
	}
	
	/// <summary>
	/// Information about the merchant hosted signin flow for a program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscoverableProgramMerchantSigninInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="signinWebsite")]
		public Uri SigninWebsite { get; set; }
	}
	
	/// <summary>
	/// Information about the merchant hosted signup flow for a program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscoverableProgramMerchantSignupInfo
	{
		
		/// <summary>
		///  User data that is sent in a POST request to the signup website URL. This information is encoded and then shared so that the merchant's website can prefill fields used to enroll the user for the discoverable program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signupSharedDatas")]
		public string[] SignupSharedDatas { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signupWebsite")]
		public Uri SignupWebsite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DiscoverableProgramState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUSTED_TESTERS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trustedTesters = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		live = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 6,
	}
	
	/// <summary>
	/// Parameters specific to media downloads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadParameters
	{
		
		/// <summary>
		/// A boolean to be returned in the response to Scotty. Allows/disallows gzip encoding of the payload content when the server thinks it's advantageous (hence, does not guarantee compression) which allows Scotty to GZip the response to the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowGzipCompression")]
		public System.Nullable<System.Boolean> AllowGzipCompression { get; set; }
		
		/// <summary>
		/// Determining whether or not Apiary should skip the inclusion of any Content-Range header on its response to Scotty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreRange")]
		public System.Nullable<System.Boolean> IgnoreRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventDateTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="customDoorsOpenLabel")]
		public LocalizedString CustomDoorsOpenLabel { get; set; }
		
		/// <summary>
		/// The date/time when the doors open at the venue. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the "local date/time". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doorsOpen")]
		public string DoorsOpen { get; set; }
		
		/// <summary>
		/// The label to use for the doors open value (`doorsOpen`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `doorsOpenLabel` and `customDoorsOpenLabel` may not be set. If neither is set, the label will default to "Doors Open", localized. If the doors open field is unset, this label will not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doorsOpenLabel")]
		public System.Nullable<EventDateTimeDoorsOpenLabel> DoorsOpenLabel { get; set; }
		
		/// <summary>
		/// The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the "local date/time". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#eventDateTime"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the "local date/time". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventDateTimeDoorsOpenLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOORS_OPEN_LABEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOORS_OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		doorsOpen = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GATES_OPEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gatesOpen = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventReservationInfo
	{
		
		/// <summary>
		/// The confirmation code of the event reservation. This may also take the form of an "order number", "confirmation number", "reservation number", or other equivalent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationCode")]
		public string ConfirmationCode { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#eventReservationInfo"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSeat
	{
		
		[System.Runtime.Serialization.DataMember(Name="gate")]
		public LocalizedString Gate { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#eventSeat"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="row")]
		public LocalizedString Row { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seat")]
		public LocalizedString Seat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section")]
		public LocalizedString Section { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTicketClass
	{
		
		/// <summary>
		/// Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMultipleUsersPerObject")]
		public System.Nullable<System.Boolean> AllowMultipleUsersPerObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// The label to use for the confirmation code value (`eventTicketObject.reservationInfo.confirmationCode`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `confirmationCodeLabel` and `customConfirmationCodeLabel` may not be set. If neither is set, the label will default to "Confirmation Code", localized. If the confirmation code field is unset, this label will not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationCodeLabel")]
		public System.Nullable<EventTicketClassConfirmationCodeLabel> ConfirmationCodeLabel { get; set; }
		
		/// <summary>
		/// Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customConfirmationCodeLabel")]
		public LocalizedString CustomConfirmationCodeLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customGateLabel")]
		public LocalizedString CustomGateLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customRowLabel")]
		public LocalizedString CustomRowLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customSeatLabel")]
		public LocalizedString CustomSeatLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customSectionLabel")]
		public LocalizedString CustomSectionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public EventDateTime DateTime { get; set; }
		
		/// <summary>
		/// Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		/// <summary>
		/// The ID of the event. This ID should be unique for every event in an account. It is used to group tickets together if the user has saved multiple tickets for the same event. It can be at most 64 characters. If provided, the grouping will be stable. Be wary of unintentional collision to avoid grouping tickets that should not be grouped. If you use only one class per event, you can simply set this to the `classId` (with or without the issuer ID portion). If not provided, the platform will attempt to use other data to group tickets (potentially unstable).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public LocalizedString EventName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="finePrint")]
		public LocalizedString FinePrint { get; set; }
		
		/// <summary>
		/// The label to use for the gate value (`eventTicketObject.seatInfo.gate`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `gateLabel` and `customGateLabel` may not be set. If neither is set, the label will default to "Gate", localized. If the gate field is unset, this label will not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateLabel")]
		public System.Nullable<EventTicketClassGateLabel> GateLabel { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public Uri HomepageUri { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerName")]
		public string IssuerName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#eventTicketClass"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedIssuerName")]
		public LocalizedString LocalizedIssuerName { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public Image Logo { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public System.Nullable<EventTicketClassMultipleDevicesAndHoldersAllowedStatus> MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public System.Nullable<EventTicketClassReviewStatus> ReviewStatus { get; set; }
		
		/// <summary>
		/// The label to use for the row value (`eventTicketObject.seatInfo.row`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `rowLabel` and `customRowLabel` may not be set. If neither is set, the label will default to "Row", localized. If the row field is unset, this label will not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLabel")]
		public System.Nullable<EventTicketClassRowLabel> RowLabel { get; set; }
		
		/// <summary>
		/// The label to use for the seat value (`eventTicketObject.seatInfo.seat`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `seatLabel` and `customSeatLabel` may not be set. If neither is set, the label will default to "Seat", localized. If the seat field is unset, this label will not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seatLabel")]
		public System.Nullable<EventTicketClassSeatLabel> SeatLabel { get; set; }
		
		/// <summary>
		/// The label to use for the section value (`eventTicketObject.seatInfo.section`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `sectionLabel` and `customSectionLabel` may not be set. If neither is set, the label will default to "Section", localized. If the section field is unset, this label will not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionLabel")]
		public System.Nullable<EventTicketClassSectionLabel> SectionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venue")]
		public EventVenue Venue { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the event ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public System.Nullable<EventTicketClassViewUnlockRequirement> ViewUnlockRequirement { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideLogo")]
		public Image WideLogo { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordMark")]
		public Image WordMark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassConfirmationCodeLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMATION_CODE_LABEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMATION_CODE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirmationCode = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMATION_NUMBER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirmationNumber = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER_NUMBER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		orderNumber = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_NUMBER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reservationNumber = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassGateLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GATE_LABEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		door = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTRANCE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		entrance = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageModuleData
	{
		
		/// <summary>
		/// The ID associated with an image module. This field is here to enable ease of management of image modules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainImage")]
		public Image MainImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfoModuleData
	{
		
		/// <summary>
		/// A list of collections of labels and values. These will be displayed one after the other in a singular column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelValueRows")]
		public LabelValueRow[] LabelValueRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showLastUpdateTime")]
		public System.Nullable<System.Boolean> ShowLastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelValueRow
	{
		
		/// <summary>
		/// A list of labels and values. These will be displayed in a singular column, one after the other, not in multiple columns, despite the field name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public LabelValue[] Columns { get; set; }
	}
	
	/// <summary>
	/// A pair of text strings to be displayed in the details view. Note we no longer display LabelValue/LabelValueRow as a table, instead a list of items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelValue
	{
		
		/// <summary>
		/// The label for a specific row and column. Recommended maximum is 15 characters for a two-column layout and 30 characters for a one-column layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedLabel")]
		public LocalizedString LocalizedLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public LocalizedString LocalizedValue { get; set; }
		
		/// <summary>
		/// The value for a specific row and column. Recommended maximum is 15 characters for a two-column layout and 30 characters for a one-column layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksModuleData
	{
		
		/// <summary>
		/// The list of URIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public Uri[] Uris { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LatLongPoint
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#latLongPoint"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The latitude specified as any value in the range of -90.0 through +90.0, both inclusive. Values outside these bounds will be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude specified in the range -180.0 through +180.0, both inclusive. Values outside these bounds will be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassMultipleDevicesAndHoldersAllowedStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE_HOLDERS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_USER_ALL_DEVICES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_USER_ONE_DEVICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multipleHolders = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oneUserAllDevices = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oneUserOneDevice = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Review
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassReviewStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		underReview = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approved = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassRowLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROW_LABEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		row = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassSeatLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEAT_LABEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEAT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		seat = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassSectionLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_LABEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		section = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THEATER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		theater = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityAnimation
	{
		
		/// <summary>
		/// Type of animation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="animationType")]
		public System.Nullable<SecurityAnimationAnimationType> AnimationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SecurityAnimationAnimationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANIMATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOIL_SHIMMER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		foilShimmer = 2,
	}
	
	/// <summary>
	/// Data for Text module. All fields are optional. Header will be displayed if available, different types of bodies will be concatenated if they are defined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextModuleData
	{
		
		/// <summary>
		/// The body of the Text Module, which is defined as an uninterrupted string. Recommended maximum length is 500 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The header of the Text Module. Recommended maximum length is 35 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// The ID associated with a text module. This field is here to enable ease of management of text modules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedBody")]
		public LocalizedString LocalizedBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedHeader")]
		public LocalizedString LocalizedHeader { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventVenue
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public LocalizedString Address { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#eventVenue"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public LocalizedString Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketClassViewUnlockRequirement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNLOCK_NOT_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNLOCK_REQUIRED_TO_VIEW = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTicketClassAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public EventTicketClass Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTicketClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public EventTicketClass[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pagination
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#pagination"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Page token to send to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Number of results returned in this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsPerPage")]
		public System.Nullable<System.Int32> ResultsPerPage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTicketObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classReference")]
		public EventTicketClass ClassReference { get; set; }
		
		/// <summary>
		/// Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpirationNotification")]
		public System.Nullable<System.Boolean> DisableExpirationNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceValue")]
		public Money FaceValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinkedDevice")]
		public System.Nullable<System.Boolean> HasLinkedDevice { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#eventTicketObject"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A list of offer objects linked to this event ticket. The offer objects must already exist. Offer object IDs should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedOfferIds")]
		public string[] LinkedOfferIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservationInfo")]
		public EventReservationInfo ReservationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seatInfo")]
		public EventSeat SeatInfo { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<EventTicketObjectState> State { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		/// <summary>
		/// Name of the ticket holder, if the ticket is assigned to a person. E.g. "John Doe" or "Jane Doe".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketHolderName")]
		public string TicketHolderName { get; set; }
		
		/// <summary>
		/// The number of the ticket. This can be a unique identifier across all tickets in an issuer's system, all tickets for the event (e.g. XYZ1234512345), or all tickets in the order (1, 2, 3, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketNumber")]
		public string TicketNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketType")]
		public LocalizedString TicketType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Money
	{
		
		/// <summary>
		/// The currency code, such as "USD" or "EUR."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#money"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The unit of money amount in micros. For example, $1 USD would be represented as 1000000 micros.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="micros")]
		public string Micros { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupingInfo
	{
		
		/// <summary>
		/// Optional grouping ID for grouping the passes with the same ID visually together. Grouping with different types of passes is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupingId")]
		public string GroupingId { get; set; }
		
		/// <summary>
		/// Optional index for sorting the passes when they are grouped with other passes. Passes with lower sort index are shown before passes with higher sort index. If unspecified, the value is assumed to be INT_MAX. For two passes with the same sort index, the sorting behavior is undefined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortIndex")]
		public System.Nullable<System.Int32> SortIndex { get; set; }
	}
	
	/// <summary>
	/// Container for any constraints that may be placed on passes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PassConstraints
	{
		
		/// <summary>
		/// The NFC constraints for the pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfcConstraint")]
		public string[] NfcConstraint { get; set; }
		
		/// <summary>
		/// The screenshot eligibility for the pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshotEligibility")]
		public System.Nullable<PassConstraintsScreenshotEligibility> ScreenshotEligibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PassConstraintsScreenshotEligibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT_ELIGIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INELIGIBLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotatingBarcode
	{
		
		/// <summary>
		/// An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateText")]
		public string AlternateText { get; set; }
		
		/// <summary>
		/// A payload containing many barcode values and start date/time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialRotatingBarcodeValues")]
		public RotatingBarcodeValues InitialRotatingBarcodeValues { get; set; }
		
		/// <summary>
		/// The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderEncoding")]
		public BarcodeRenderEncoding RenderEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showCodeText")]
		public LocalizedString ShowCodeText { get; set; }
		
		/// <summary>
		/// Configuration for the time-based OTP substitutions. See https://tools.ietf.org/html/rfc6238
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totpDetails")]
		public RotatingBarcodeTotpDetails TotpDetails { get; set; }
		
		/// <summary>
		/// The type of this barcode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BarcodeType Type { get; set; }
		
		/// <summary>
		/// String encoded barcode value. This string supports the following substitutions: * {totp_value_n}: Replaced with the TOTP value (see TotpDetails.parameters). * {totp_timestamp_millis}: Replaced with the timestamp (millis since epoch) at which the barcode was generated. * {totp_timestamp_seconds}: Replaced with the timestamp (seconds since epoch) at which the barcode was generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuePattern")]
		public string ValuePattern { get; set; }
	}
	
	/// <summary>
	/// A payload containing many barcode values and start date/time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotatingBarcodeValues
	{
		
		/// <summary>
		/// Required. The amount of time each barcode is valid for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodMillis")]
		public string PeriodMillis { get; set; }
		
		/// <summary>
		/// Required. The date/time the first barcode is valid from. Barcodes will be rotated through using period_millis defined on the object's RotatingBarcodeValueInfo. This is an ISO 8601 extended format date/time, with an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		/// <summary>
		/// Required. The values to encode in the barcode. At least one value is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Configuration for the time-based OTP substitutions. See https://tools.ietf.org/html/rfc6238
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotatingBarcodeTotpDetails
	{
		
		/// <summary>
		/// The TOTP algorithm used to generate the OTP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public System.Nullable<RotatingBarcodeTotpDetailsAlgorithm> Algorithm { get; set; }
		
		/// <summary>
		/// The TOTP parameters for each of the {totp_value_*} substitutions. The TotpParameters at index n is used for the {totp_value_n} substitution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public RotatingBarcodeTotpDetailsTotpParameters[] Parameters { get; set; }
		
		/// <summary>
		/// The time interval used for the TOTP value generation, in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodMillis")]
		public string PeriodMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RotatingBarcodeTotpDetailsAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP_SHA1 = 1,
	}
	
	/// <summary>
	/// Configuration for the key and value length. See https://www.rfc-editor.org/rfc/rfc4226#section-5.3
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotatingBarcodeTotpDetailsTotpParameters
	{
		
		/// <summary>
		/// The secret key used for the TOTP value generation, encoded as a Base16 string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The length of the TOTP value in decimal digits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueLength")]
		public System.Nullable<System.Int32> ValueLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EventTicketObjectState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expired = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTicketObjectAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public EventTicketObject Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTicketObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public EventTicketObject[] Resources { get; set; }
	}
	
	/// <summary>
	/// Indicates that the issuer would like Google Wallet to send expiry notifications 2 days prior to the card expiration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExpiryNotification
	{
		
		/// <summary>
		/// Indicates if the object needs to have expiry notification enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightCarrier
	{
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airlineAllianceLogo")]
		public Image AirlineAllianceLogo { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airlineLogo")]
		public Image AirlineLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airlineName")]
		public LocalizedString AirlineName { get; set; }
		
		/// <summary>
		/// Two character IATA airline code of the marketing carrier (as opposed to operating carrier). Exactly one of this or `carrierIcaoCode` needs to be provided for `carrier` and `operatingCarrier`. eg: "LX" for Swiss Air
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierIataCode")]
		public string CarrierIataCode { get; set; }
		
		/// <summary>
		/// Three character ICAO airline code of the marketing carrier (as opposed to operating carrier). Exactly one of this or `carrierIataCode` needs to be provided for `carrier` and `operatingCarrier`. eg: "EZY" for Easy Jet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierIcaoCode")]
		public string CarrierIcaoCode { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#flightCarrier"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideAirlineLogo")]
		public Image WideAirlineLogo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightClass
	{
		
		/// <summary>
		/// Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMultipleUsersPerObject")]
		public System.Nullable<System.Boolean> AllowMultipleUsersPerObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="boardingAndSeatingPolicy")]
		public BoardingAndSeatingPolicy BoardingAndSeatingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public AirportInfo Destination { get; set; }
		
		/// <summary>
		/// Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flightHeader")]
		public FlightHeader FlightHeader { get; set; }
		
		/// <summary>
		/// Status of this flight. If unset, Google will compute status based on data from other sources, such as FlightStats, etc. Note: Google-computed status will not be returned in API responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightStatus")]
		public System.Nullable<FlightClassFlightStatus> FlightStatus { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public Uri HomepageUri { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerName")]
		public string IssuerName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#flightClass"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// If this field is present, boarding passes served to a user's device will always be in this language. Represents the BCP 47 language tag. Example values are "en-US", "en-GB", "de", or "de-AT".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageOverride")]
		public string LanguageOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// The boarding time as it would be printed on the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localBoardingDateTime")]
		public string LocalBoardingDateTime { get; set; }
		
		/// <summary>
		/// The estimated time the aircraft plans to reach the destination gate (not the runway) or the actual time it reached the gate. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already arrived at the gate. Google will use it to inform the user that the flight has arrived at the gate. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localEstimatedOrActualArrivalDateTime")]
		public string LocalEstimatedOrActualArrivalDateTime { get; set; }
		
		/// <summary>
		/// The estimated time the aircraft plans to pull from the gate or the actual time the aircraft already pulled from the gate. Note: This is not the runway time. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already pulled from the gate. Google will use it to inform the user when the flight actually departed. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localEstimatedOrActualDepartureDateTime")]
		public string LocalEstimatedOrActualDepartureDateTime { get; set; }
		
		/// <summary>
		/// The gate closing time as it would be printed on the boarding pass. Do not set this field if you do not want to print it in the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localGateClosingDateTime")]
		public string LocalGateClosingDateTime { get; set; }
		
		/// <summary>
		/// The scheduled time the aircraft plans to reach the destination gate (not the runway). Note: This field should not change too close to the flight time. For updates to departure times (delays, etc), please set `localEstimatedOrActualArrivalDateTime`. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localScheduledArrivalDateTime")]
		public string LocalScheduledArrivalDateTime { get; set; }
		
		/// <summary>
		/// Required. The scheduled date and time when the aircraft is expected to depart the gate (not the runway) Note: This field should not change too close to the departure time. For updates to departure times (delays, etc), please set `localEstimatedOrActualDepartureDateTime`. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localScheduledDepartureDateTime")]
		public string LocalScheduledDepartureDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedIssuerName")]
		public LocalizedString LocalizedIssuerName { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public EventTicketClassMultipleDevicesAndHoldersAllowedStatus MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public AirportInfo Origin { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public EventTicketClassReviewStatus ReviewStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the boarding pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public EventTicketClassViewUnlockRequirement ViewUnlockRequirement { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordMark")]
		public Image WordMark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightHeader
	{
		
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public FlightCarrier Carrier { get; set; }
		
		/// <summary>
		/// The flight number without IATA carrier code. This field should contain only digits. This is a required property of `flightHeader`. eg: "123"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightNumber")]
		public string FlightNumber { get; set; }
		
		/// <summary>
		/// Override value to use for flight number. The default value used for display purposes is carrier + flight_number. If a different value needs to be shown to passengers, use this field to override the default behavior. eg: "XX1234 / YY576"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightNumberDisplayOverride")]
		public string FlightNumberDisplayOverride { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#flightHeader"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operatingCarrier")]
		public FlightCarrier OperatingCarrier { get; set; }
		
		/// <summary>
		/// The flight number used by the operating carrier without IATA carrier code. This field should contain only digits. eg: "234"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingFlightNumber")]
		public string OperatingFlightNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FlightClassFlightStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLIGHT_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		landed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redirected = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVERTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		diverted = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightClassAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public FlightClass Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public FlightClass[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="boardingAndSeatingInfo")]
		public BoardingAndSeatingInfo BoardingAndSeatingInfo { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classReference")]
		public FlightClass ClassReference { get; set; }
		
		/// <summary>
		/// Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for Flights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpirationNotification")]
		public System.Nullable<System.Boolean> DisableExpirationNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinkedDevice")]
		public System.Nullable<System.Boolean> HasLinkedDevice { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#flightObject"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		/// <summary>
		/// Required. Passenger name as it would appear on the boarding pass. eg: "Dave M Gahan" or "Gahan/Dave" or "GAHAN/DAVEM"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passengerName")]
		public string PassengerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservationInfo")]
		public ReservationInfo ReservationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityProgramLogo")]
		public Image SecurityProgramLogo { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EventTicketObjectState State { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservationInfo
	{
		
		/// <summary>
		/// Confirmation code needed to check into this flight. This is the number that the passenger would enter into a kiosk at the airport to look up the flight and print a boarding pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationCode")]
		public string ConfirmationCode { get; set; }
		
		/// <summary>
		/// E-ticket number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eticketNumber")]
		public string EticketNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequentFlyerInfo")]
		public FrequentFlyerInfo FrequentFlyerInfo { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#reservationInfo"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrequentFlyerInfo
	{
		
		/// <summary>
		/// Frequent flyer number. Required for each nested object of kind `walletobjects#frequentFlyerInfo`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequentFlyerNumber")]
		public string FrequentFlyerNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequentFlyerProgramName")]
		public LocalizedString FrequentFlyerProgramName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#frequentFlyerInfo"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightObjectAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public FlightObject Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlightObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public FlightObject[] Resources { get; set; }
	}
	
	/// <summary>
	/// Generic Class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenericClass
	{
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// Available only to Smart Tap enabled partners. Contact support for additional guidance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for the class. This ID must be unique across all from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. If `imageModulesData` is also defined on the object, both will be displayed. Only one of the image from class and one from object level will be rendered when both set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public EventTicketClassMultipleDevicesAndHoldersAllowedStatus MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// Text module data. If `textModulesData` is also defined on the object, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the generic pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public EventTicketClassViewUnlockRequirement ViewUnlockRequirement { get; set; }
	}
	
	/// <summary>
	/// List response which contains the list of all generic classes for a given issuer ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenericClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public GenericClass[] Resources { get; set; }
	}
	
	/// <summary>
	/// Generic Object Next ID: 121
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenericObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardTitle")]
		public LocalizedString CardTitle { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		/// <summary>
		/// Specify which `GenericType` the card belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericType")]
		public System.Nullable<GenericObjectGenericType> GenericType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public LocalizedString Header { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set, the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used and if logo is not set, a color would be chosen by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. Only one of the image from class and one from object level will be rendered when both set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public Image Logo { get; set; }
		
		/// <summary>
		/// Indicates if the object needs to have notification enabled. We support only one of ExpiryNotification/UpcomingNotification. `expiryNotification` takes precedence over `upcomingNotification`. In other words if `expiryNotification` is set, we ignore the `upcomingNotification` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public Notifications Notifications { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section. If this is not provided, the object would be considered `ACTIVE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EventTicketObjectState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subheader")]
		public LocalizedString Subheader { get; set; }
		
		/// <summary>
		/// Text module data. If `textModulesData` is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideLogo")]
		public Image WideLogo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GenericObjectGenericType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_SEASON_PASS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_UTILITY_BILLS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_PARKING_PASS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_VOUCHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_GYM_MEMBERSHIP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_LIBRARY_MEMBERSHIP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_RESERVATIONS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_AUTO_INSURANCE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_HOME_INSURANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_ENTRY_TICKET = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_RECEIPT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_OTHER = 12,
	}
	
	/// <summary>
	/// Indicates if the object needs to have notification enabled. We support only one of ExpiryNotification/UpcomingNotification. `expiryNotification` takes precedence over `upcomingNotification`. In other words if `expiryNotification` is set, we ignore the `upcomingNotification` field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notifications
	{
		
		/// <summary>
		/// Indicates that the issuer would like Google Wallet to send expiry notifications 2 days prior to the card expiration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryNotification")]
		public ExpiryNotification ExpiryNotification { get; set; }
		
		/// <summary>
		/// Indicates that the issuer would like Google Wallet to send an upcoming card validity notification 1 day before card becomes valid/usable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upcomingNotification")]
		public UpcomingNotification UpcomingNotification { get; set; }
	}
	
	/// <summary>
	/// Indicates that the issuer would like Google Wallet to send an upcoming card validity notification 1 day before card becomes valid/usable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpcomingNotification
	{
		
		/// <summary>
		/// Indicates if the object needs to have upcoming notification enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
	}
	
	/// <summary>
	/// List response which contains the list of all generic objects for a given issuer ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenericObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public GenericObject[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardClass
	{
		
		/// <summary>
		/// Determines whether the merchant supports gift card redemption using barcode. If true, app displays a barcode for the gift card on the Gift card details screen. If false, a barcode is not displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowBarcodeRedemption")]
		public System.Nullable<System.Boolean> AllowBarcodeRedemption { get; set; }
		
		/// <summary>
		/// Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMultipleUsersPerObject")]
		public System.Nullable<System.Boolean> AllowMultipleUsersPerObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		/// <summary>
		/// The label to display for the card number, such as "Card Number".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardNumberLabel")]
		public string CardNumberLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		/// <summary>
		/// The label to display for event number, such as "Target Event #".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventNumberLabel")]
		public string EventNumberLabel { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public Uri HomepageUri { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerName")]
		public string IssuerName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#giftCardClass"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedCardNumberLabel")]
		public LocalizedString LocalizedCardNumberLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedEventNumberLabel")]
		public LocalizedString LocalizedEventNumberLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedIssuerName")]
		public LocalizedString LocalizedIssuerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedMerchantName")]
		public LocalizedString LocalizedMerchantName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedPinLabel")]
		public LocalizedString LocalizedPinLabel { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// Merchant name, such as "Adam's Apparel". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public EventTicketClassMultipleDevicesAndHoldersAllowedStatus MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		/// <summary>
		/// The label to display for the PIN, such as "4-digit PIN".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinLabel")]
		public string PinLabel { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programLogo")]
		public Image ProgramLogo { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public EventTicketClassReviewStatus ReviewStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the gift card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public EventTicketClassViewUnlockRequirement ViewUnlockRequirement { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideProgramLogo")]
		public Image WideProgramLogo { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordMark")]
		public Image WordMark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardClassAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public GiftCardClass Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public GiftCardClass[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balanceUpdateTime")]
		public DateTime BalanceUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		/// <summary>
		/// Required. The card's number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardNumber")]
		public string CardNumber { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classReference")]
		public GiftCardClass ClassReference { get; set; }
		
		/// <summary>
		/// Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpirationNotification")]
		public System.Nullable<System.Boolean> DisableExpirationNotification { get; set; }
		
		/// <summary>
		/// The card's event number, an optional field used by some gift cards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventNumber")]
		public string EventNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinkedDevice")]
		public System.Nullable<System.Boolean> HasLinkedDevice { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#giftCardObject"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		/// <summary>
		/// The card's PIN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EventTicketObjectState State { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardObjectAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public GiftCardObject Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GiftCardObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public GiftCardObject[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issuer
	{
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactInfo")]
		public IssuerContactInfo ContactInfo { get; set; }
		
		/// <summary>
		/// URL for the issuer's home page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepageUrl")]
		public string HomepageUrl { get; set; }
		
		/// <summary>
		/// The unique identifier for an issuer account. This is automatically generated when the issuer is inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerId")]
		public string IssuerId { get; set; }
		
		/// <summary>
		/// The account name of the issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smartTapMerchantData")]
		public SmartTapMerchantData SmartTapMerchantData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssuerContactInfo
	{
		
		/// <summary>
		/// Email addresses which will receive alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertsEmails")]
		public string[] AlertsEmails { get; set; }
		
		/// <summary>
		/// The primary contact email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The primary contact name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The primary contact phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SmartTapMerchantData
	{
		
		/// <summary>
		/// Available only to Smart Tap enabled partners. Contact support for additional guidance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationKeys")]
		public AuthenticationKey[] AuthenticationKeys { get; set; }
		
		/// <summary>
		/// Available only to Smart Tap enabled partners. Contact support for additional guidance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapMerchantId")]
		public string SmartTapMerchantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssuerListResponse
	{
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Issuer[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssuerToUserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<IssuerToUserInfoAction> Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signUpInfo")]
		public SignUpInfo SignUpInfo { get; set; }
		
		/// <summary>
		/// Currently not used, consider deprecating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// JSON web token for action S2AP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IssuerToUserInfoAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S2AP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s2ap = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN_UP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		signUp = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SignUpInfo
	{
		
		/// <summary>
		/// ID of the class the user can sign up for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JwtInsertResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Resources Resources { get; set; }
		
		/// <summary>
		/// A URI that, when opened, will allow the end user to save the object(s) identified in the JWT to their Google account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saveUri")]
		public string SaveUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Resources
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventTicketClasses")]
		public EventTicketClass[] EventTicketClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventTicketObjects")]
		public EventTicketObject[] EventTicketObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flightClasses")]
		public FlightClass[] FlightClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flightObjects")]
		public FlightObject[] FlightObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="giftCardClasses")]
		public GiftCardClass[] GiftCardClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="giftCardObjects")]
		public GiftCardObject[] GiftCardObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loyaltyClasses")]
		public LoyaltyClass[] LoyaltyClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loyaltyObjects")]
		public LoyaltyObject[] LoyaltyObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offerClasses")]
		public OfferClass[] OfferClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offerObjects")]
		public OfferObject[] OfferObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitClasses")]
		public TransitClass[] TransitClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitObjects")]
		public TransitObject[] TransitObjects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyClass
	{
		
		/// <summary>
		/// The account ID label, such as "Member ID." Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIdLabel")]
		public string AccountIdLabel { get; set; }
		
		/// <summary>
		/// The account name label, such as "Member Name." Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNameLabel")]
		public string AccountNameLabel { get; set; }
		
		/// <summary>
		/// Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMultipleUsersPerObject")]
		public System.Nullable<System.Boolean> AllowMultipleUsersPerObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Information about how a class may be discovered and instantiated from within the Android Pay app. This is done by searching for a loyalty or gift card program and scanning or manually entering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoverableProgram")]
		public DiscoverableProgram DiscoverableProgram { get; set; }
		
		/// <summary>
		/// Identifies whether this class supports Smart Tap. The `redemptionIssuers` and one of object level `smartTapRedemptionLevel`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public Uri HomepageUri { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerName")]
		public string IssuerName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#loyaltyClass"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedAccountIdLabel")]
		public LocalizedString LocalizedAccountIdLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedAccountNameLabel")]
		public LocalizedString LocalizedAccountNameLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedIssuerName")]
		public LocalizedString LocalizedIssuerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedProgramName")]
		public LocalizedString LocalizedProgramName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedRewardsTier")]
		public LocalizedString LocalizedRewardsTier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedRewardsTierLabel")]
		public LocalizedString LocalizedRewardsTierLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedSecondaryRewardsTier")]
		public LocalizedString LocalizedSecondaryRewardsTier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedSecondaryRewardsTierLabel")]
		public LocalizedString LocalizedSecondaryRewardsTierLabel { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public EventTicketClassMultipleDevicesAndHoldersAllowedStatus MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programLogo")]
		public Image ProgramLogo { get; set; }
		
		/// <summary>
		/// Required. The program name, such as "Adam's Apparel". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programName")]
		public string ProgramName { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and one of object level `smartTapRedemptionValue`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public EventTicketClassReviewStatus ReviewStatus { get; set; }
		
		/// <summary>
		/// The rewards tier, such as "Gold" or "Platinum." Recommended maximum length is 7 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardsTier")]
		public string RewardsTier { get; set; }
		
		/// <summary>
		/// The rewards tier label, such as "Rewards Tier." Recommended maximum length is 9 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardsTierLabel")]
		public string RewardsTierLabel { get; set; }
		
		/// <summary>
		/// The secondary rewards tier, such as "Gold" or "Platinum."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryRewardsTier")]
		public string SecondaryRewardsTier { get; set; }
		
		/// <summary>
		/// The secondary rewards tier label, such as "Rewards Tier."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryRewardsTierLabel")]
		public string SecondaryRewardsTierLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the loyalty card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public EventTicketClassViewUnlockRequirement ViewUnlockRequirement { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideProgramLogo")]
		public Image WideProgramLogo { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordMark")]
		public Image WordMark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyObject
	{
		
		/// <summary>
		/// The loyalty account identifier. Recommended maximum length is 20 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The loyalty account holder name, such as "John Smith." Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classReference")]
		public LoyaltyClass ClassReference { get; set; }
		
		/// <summary>
		/// Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpirationNotification")]
		public System.Nullable<System.Boolean> DisableExpirationNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinkedDevice")]
		public System.Nullable<System.Boolean> HasLinkedDevice { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#loyaltyObject"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A list of offer objects linked to this loyalty card. The offer objects must already exist. Offer object IDs should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedOfferIds")]
		public string[] LinkedOfferIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loyaltyPoints")]
		public LoyaltyPoints LoyaltyPoints { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryLoyaltyPoints")]
		public LoyaltyPoints SecondaryLoyaltyPoints { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported. If this value is not set but the class level fields `enableSmartTap` and `redemptionIssuers` are set up correctly, the `barcode.value` or the `accountId` fields are used as fallback if present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EventTicketObjectState State { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyPoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public LoyaltyPointsBalance Balance { get; set; }
		
		/// <summary>
		/// The loyalty points label, such as "Points". Recommended maximum length is 9 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedLabel")]
		public LocalizedString LocalizedLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyPointsBalance
	{
		
		/// <summary>
		/// The double form of a balance. Only one of these subtypes (string, int, double, money) should be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="double")]
		public System.Nullable<System.Double> Double { get; set; }
		
		/// <summary>
		/// The integer form of a balance. Only one of these subtypes (string, int, double, money) should be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="int")]
		public System.Nullable<System.Int32> Int { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="money")]
		public Money Money { get; set; }
		
		/// <summary>
		/// The string form of a balance. Only one of these subtypes (string, int, double, money) should be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="string")]
		public string String { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferClass
	{
		
		/// <summary>
		/// Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMultipleUsersPerObject")]
		public System.Nullable<System.Boolean> AllowMultipleUsersPerObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The details of the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		/// <summary>
		/// The fine print or terms of the offer, such as "20% off any t-shirt at Adam's Apparel."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finePrint")]
		public string FinePrint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="helpUri")]
		public Uri HelpUri { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public Uri HomepageUri { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerName")]
		public string IssuerName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#offerClass"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedDetails")]
		public LocalizedString LocalizedDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedFinePrint")]
		public LocalizedString LocalizedFinePrint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedIssuerName")]
		public LocalizedString LocalizedIssuerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedProvider")]
		public LocalizedString LocalizedProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedShortTitle")]
		public LocalizedString LocalizedShortTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedTitle")]
		public LocalizedString LocalizedTitle { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public EventTicketClassMultipleDevicesAndHoldersAllowedStatus MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		/// <summary>
		/// Required. The offer provider (either the aggregator name or merchant name). Recommended maximum length is 12 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required. The redemption channels applicable to this offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionChannel")]
		public System.Nullable<OfferClassRedemptionChannel> RedemptionChannel { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// Required. The status of the class. This field can be set to `draft` or The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public EventTicketClassReviewStatus ReviewStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// A shortened version of the title of the offer, such as "20% off," shown to users as a quick reference to the offer contents. Recommended maximum length is 20 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortTitle")]
		public string ShortTitle { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		/// <summary>
		/// Required. The title of the offer, such as "20% off any t-shirt." Recommended maximum length is 60 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleImage")]
		public Image TitleImage { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public EventTicketClassViewUnlockRequirement ViewUnlockRequirement { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideTitleImage")]
		public Image WideTitleImage { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordMark")]
		public Image WordMark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OfferClassRedemptionChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDEMPTION_CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		online = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		both = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_PRICE_REDUCTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		temporaryPriceReduction = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classReference")]
		public OfferClass ClassReference { get; set; }
		
		/// <summary>
		/// Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpirationNotification")]
		public System.Nullable<System.Boolean> DisableExpirationNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinkedDevice")]
		public System.Nullable<System.Boolean> HasLinkedDevice { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#offerObject"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EventTicketObjectState State { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitClass
	{
		
		/// <summary>
		/// ActivationOptions for the class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationOptions")]
		public ActivationOptions ActivationOptions { get; set; }
		
		/// <summary>
		/// Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMultipleUsersPerObject")]
		public System.Nullable<System.Boolean> AllowMultipleUsersPerObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callbackOptions")]
		public CallbackOptions CallbackOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classTemplateInfo")]
		public ClassTemplateInfo ClassTemplateInfo { get; set; }
		
		/// <summary>
		/// Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customCarriageLabel")]
		public LocalizedString CustomCarriageLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customCoachLabel")]
		public LocalizedString CustomCoachLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customConcessionCategoryLabel")]
		public LocalizedString CustomConcessionCategoryLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customConfirmationCodeLabel")]
		public LocalizedString CustomConfirmationCodeLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDiscountMessageLabel")]
		public LocalizedString CustomDiscountMessageLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFareClassLabel")]
		public LocalizedString CustomFareClassLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFareNameLabel")]
		public LocalizedString CustomFareNameLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customOtherRestrictionsLabel")]
		public LocalizedString CustomOtherRestrictionsLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customPlatformLabel")]
		public LocalizedString CustomPlatformLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customPurchaseFaceValueLabel")]
		public LocalizedString CustomPurchaseFaceValueLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customPurchasePriceLabel")]
		public LocalizedString CustomPurchasePriceLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customPurchaseReceiptNumberLabel")]
		public LocalizedString CustomPurchaseReceiptNumberLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customRouteRestrictionsDetailsLabel")]
		public LocalizedString CustomRouteRestrictionsDetailsLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customRouteRestrictionsLabel")]
		public LocalizedString CustomRouteRestrictionsLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customSeatLabel")]
		public LocalizedString CustomSeatLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customTicketNumberLabel")]
		public LocalizedString CustomTicketNumberLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customTimeRestrictionsLabel")]
		public LocalizedString CustomTimeRestrictionsLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customTransitTerminusNameLabel")]
		public LocalizedString CustomTransitTerminusNameLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customZoneLabel")]
		public LocalizedString CustomZoneLabel { get; set; }
		
		/// <summary>
		/// Controls the display of the single-leg itinerary for this class. By default, an itinerary will only display for multi-leg trips.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSingleLegItinerary")]
		public System.Nullable<System.Boolean> EnableSingleLegItinerary { get; set; }
		
		/// <summary>
		/// Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSmartTap")]
		public System.Nullable<System.Boolean> EnableSmartTap { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public Uri HomepageUri { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		/// <summary>
		/// Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerName")]
		public string IssuerName { get; set; }
		
		/// <summary>
		/// If this field is present, transit tickets served to a user's device will always be in this language. Represents the BCP 47 language tag. Example values are "en-US", "en-GB", "de", or "de-AT".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageOverride")]
		public string LanguageOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizedIssuerName")]
		public LocalizedString LocalizedIssuerName { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public Image Logo { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Identifies whether multiple users and devices will save the same object referencing this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleDevicesAndHoldersAllowedStatus")]
		public EventTicketClassMultipleDevicesAndHoldersAllowedStatus MultipleDevicesAndHoldersAllowedStatus { get; set; }
		
		/// <summary>
		/// Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionIssuers")]
		public string[] RedemptionIssuers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
		
		/// <summary>
		/// Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public EventTicketClassReviewStatus ReviewStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityAnimation")]
		public SecurityAnimation SecurityAnimation { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitOperatorName")]
		public LocalizedString TransitOperatorName { get; set; }
		
		/// <summary>
		/// Required. The type of transit this class represents, such as "bus".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitType")]
		public System.Nullable<TransitClassTransitType> TransitType { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// View Unlock Requirement options for the transit ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewUnlockRequirement")]
		public EventTicketClassViewUnlockRequirement ViewUnlockRequirement { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watermark")]
		public Image Watermark { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wideLogo")]
		public Image WideLogo { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wordMark")]
		public Image WordMark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransitClassTransitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSIT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAIL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rail = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tram = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FERRY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ferry = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitObject
	{
		
		/// <summary>
		/// The activation status of the object. This field includes activation status if valuable supports activation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationStatus")]
		public ActivationStatus ActivationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appLinkData")]
		public AppLinkData AppLinkData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public Barcode Barcode { get; set; }
		
		/// <summary>
		/// Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public string ClassId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classReference")]
		public TransitClass ClassReference { get; set; }
		
		/// <summary>
		/// The concession category for the ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concessionCategory")]
		public System.Nullable<TransitObjectConcessionCategory> ConcessionCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customConcessionCategory")]
		public LocalizedString CustomConcessionCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customTicketStatus")]
		public LocalizedString CustomTicketStatus { get; set; }
		
		/// <summary>
		/// Device context associated with the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceContext")]
		public DeviceContext DeviceContext { get; set; }
		
		/// <summary>
		/// Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpirationNotification")]
		public System.Nullable<System.Boolean> DisableExpirationNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupingInfo")]
		public GroupingInfo GroupingInfo { get; set; }
		
		/// <summary>
		/// Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinkedDevice")]
		public System.Nullable<System.Boolean> HasLinkedDevice { get; set; }
		
		/// <summary>
		/// Indicates if the object has users. This field is set by the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUsers")]
		public System.Nullable<System.Boolean> HasUsers { get; set; }
		
		/// <summary>
		/// Wrapping type for Google hosted images. Next ID: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heroImage")]
		public Image HeroImage { get; set; }
		
		/// <summary>
		/// The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexBackgroundColor")]
		public string HexBackgroundColor { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageModulesData")]
		public ImageModuleData[] ImageModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="infoModuleData")]
		public InfoModuleData InfoModuleData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linksModuleData")]
		public LinksModuleData LinksModuleData { get; set; }
		
		/// <summary>
		/// Note: This field is currently not supported to trigger geo notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LatLongPoint[] Locations { get; set; }
		
		/// <summary>
		/// An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Container for any constraints that may be placed on passes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passConstraints")]
		public PassConstraints PassConstraints { get; set; }
		
		/// <summary>
		/// The name(s) of the passengers the ticket is assigned to. The above `passengerType` field is meant to give Google context on this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passengerNames")]
		public string PassengerNames { get; set; }
		
		/// <summary>
		/// The number of passengers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passengerType")]
		public System.Nullable<TransitObjectPassengerType> PassengerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseDetails")]
		public PurchaseDetails PurchaseDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotatingBarcode")]
		public RotatingBarcode RotatingBarcode { get; set; }
		
		/// <summary>
		/// The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartTapRedemptionValue")]
		public string SmartTapRedemptionValue { get; set; }
		
		/// <summary>
		/// Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the "Expired passes" section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public EventTicketObjectState State { get; set; }
		
		/// <summary>
		/// Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textModulesData")]
		public TextModuleData[] TextModulesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketLeg")]
		public TicketLeg TicketLeg { get; set; }
		
		/// <summary>
		/// Each ticket may contain one or more legs. Each leg contains departure and arrival information along with boarding and seating information. If only one leg is to be specified then use the `ticketLeg` field instead. Both `ticketLeg` and `ticketLegs` may not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketLegs")]
		public TicketLeg[] TicketLegs { get; set; }
		
		/// <summary>
		/// The number of the ticket. This is a unique identifier for the ticket in the transit operator's system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketNumber")]
		public string TicketNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketRestrictions")]
		public TicketRestrictions TicketRestrictions { get; set; }
		
		/// <summary>
		/// The status of the ticket. For states which affect display, use the `state` field instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketStatus")]
		public System.Nullable<TransitObjectTicketStatus> TicketStatus { get; set; }
		
		/// <summary>
		/// This id is used to group tickets together if the user has saved multiple tickets for the same trip.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripId")]
		public string TripId { get; set; }
		
		/// <summary>
		/// Required. The type of trip this transit object represents. Used to determine the pass title and/or which symbol to use between the origin and destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripType")]
		public System.Nullable<TransitObjectTripType> TripType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validTimeInterval")]
		public TimeInterval ValidTimeInterval { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransitObjectConcessionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCESSION_CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		adult = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		child = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENIOR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		senior = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransitObjectPassengerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSENGER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASSENGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		singlePassenger = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE_PASSENGERS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multiplePassengers = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseDetails
	{
		
		/// <summary>
		/// ID of the account used to purchase the ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The confirmation code for the purchase. This may be the same for multiple different tickets and is used to group tickets together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmationCode")]
		public string ConfirmationCode { get; set; }
		
		/// <summary>
		/// The purchase date/time of the ticket. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. Without offset information, some rich features may not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseDateTime")]
		public string PurchaseDateTime { get; set; }
		
		/// <summary>
		/// Receipt number/identifier for tracking the ticket purchase via the body that sold the ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseReceiptNumber")]
		public string PurchaseReceiptNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketCost")]
		public TicketCost TicketCost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketCost
	{
		
		[System.Runtime.Serialization.DataMember(Name="discountMessage")]
		public LocalizedString DiscountMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceValue")]
		public Money FaceValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchasePrice")]
		public Money PurchasePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketLeg
	{
		
		/// <summary>
		/// The date/time of arrival. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the "local date/time". This should be the local date/time at the destination station. For example, if the event occurs at the 20th hour of June 5th, 2018 at the destination station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the destination station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrivalDateTime")]
		public string ArrivalDateTime { get; set; }
		
		/// <summary>
		/// The train or ship name/number that the passsenger needs to board.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carriage")]
		public string Carriage { get; set; }
		
		/// <summary>
		/// The date/time of departure. This is required if there is no validity time interval set on the transit object. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the "local date/time". This should be the local date/time at the origin station. For example, if the departure occurs at the 20th hour of June 5th, 2018 at the origin station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the origin station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureDateTime")]
		public string DepartureDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public LocalizedString DestinationName { get; set; }
		
		/// <summary>
		/// The destination station code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStationCode")]
		public string DestinationStationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fareName")]
		public LocalizedString FareName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originName")]
		public LocalizedString OriginName { get; set; }
		
		/// <summary>
		/// The origin station code. This is required if `destinationStationCode` is present or if `originName` is not present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originStationCode")]
		public string OriginStationCode { get; set; }
		
		/// <summary>
		/// The platform or gate where the passenger can board the carriage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketSeat")]
		public TicketSeat TicketSeat { get; set; }
		
		/// <summary>
		/// The reserved seat for the passenger(s). If only one seat is to be specified then use the `ticketSeat` field instead. Both `ticketSeat` and `ticketSeats` may not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketSeats")]
		public TicketSeat[] TicketSeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitOperatorName")]
		public LocalizedString TransitOperatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitTerminusName")]
		public LocalizedString TransitTerminusName { get; set; }
		
		/// <summary>
		/// The zone of boarding within the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketSeat
	{
		
		/// <summary>
		/// The identifier of the train car or coach in which the ticketed seat is located. Eg. "10"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coach")]
		public string Coach { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFareClass")]
		public LocalizedString CustomFareClass { get; set; }
		
		/// <summary>
		/// The fare class of the ticketed seat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fareClass")]
		public System.Nullable<TicketSeatFareClass> FareClass { get; set; }
		
		/// <summary>
		/// The identifier of where the ticketed seat is located. Eg. "42". If there is no specific identifier, use `seatAssigment` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seat")]
		public string Seat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seatAssignment")]
		public LocalizedString SeatAssignment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TicketSeatFareClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FARE_CLASS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECONOMY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		economy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		first = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		business = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketRestrictions
	{
		
		[System.Runtime.Serialization.DataMember(Name="otherRestrictions")]
		public LocalizedString OtherRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeRestrictions")]
		public LocalizedString RouteRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeRestrictionsDetails")]
		public LocalizedString RouteRestrictionsDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeRestrictions")]
		public LocalizedString TimeRestrictions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransitObjectTicketStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TICKET_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		used = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUNDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		refunded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exchanged = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransitObjectTripType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUND_TRIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		roundTrip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_WAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oneWay = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JwtResource
	{
		
		/// <summary>
		/// A string representing a JWT of the format described at https://developers.google.com/wallet/reference/rest/v1/Jwt
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwt")]
		public string Jwt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyClassAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public LoyaltyClass Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public LoyaltyClass[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyObjectAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public LoyaltyObject Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoyaltyObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public LoyaltyObject[] Resources { get; set; }
	}
	
	/// <summary>
	/// A reference to data stored on the filesystem, on GFS or in blobstore.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Media
	{
		
		/// <summary>
		/// Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, "MD5" is the only possible value for this field. New values may be added at any time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Use object_id instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigstoreObjectRef")]
		public string BigstoreObjectRef { get; set; }
		
		/// <summary>
		/// Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRef")]
		public string BlobRef { get; set; }
		
		/// <summary>
		/// Information to read/write to blobstore2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobstore2Info")]
		public Blobstore2Info Blobstore2Info { get; set; }
		
		/// <summary>
		/// A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeMedia")]
		public CompositeMedia[] CompositeMedia { get; set; }
		
		/// <summary>
		/// MIME type of the data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentTypeInfo")]
		public ContentTypeInfo ContentTypeInfo { get; set; }
		
		/// <summary>
		/// A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmoBinaryReference")]
		public string CosmoBinaryReference { get; set; }
		
		/// <summary>
		/// For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32cHash")]
		public System.Nullable<System.UInt32> Crc32cHash { get; set; }
		
		/// <summary>
		/// Backend response for a Diff get checksums response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffChecksumsResponse")]
		public DiffChecksumsResponse DiffChecksumsResponse { get; set; }
		
		/// <summary>
		/// Backend response for a Diff download response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffDownloadResponse")]
		public DiffDownloadResponse DiffDownloadResponse { get; set; }
		
		/// <summary>
		/// A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffUploadRequest")]
		public DiffUploadRequest DiffUploadRequest { get; set; }
		
		/// <summary>
		/// Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffUploadResponse")]
		public DiffUploadResponse DiffUploadResponse { get; set; }
		
		/// <summary>
		/// Backend response for a Diff get version response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffVersionResponse")]
		public DiffVersionResponse DiffVersionResponse { get; set; }
		
		/// <summary>
		/// Parameters specific to media downloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadParameters")]
		public DownloadParameters DownloadParameters { get; set; }
		
		/// <summary>
		/// Original file name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashVerified")]
		public System.Nullable<System.Boolean> HashVerified { get; set; }
		
		/// <summary>
		/// Media data, set if reference_type is INLINE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string Inline { get; set; }
		
		/// <summary>
		/// |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPotentialRetry")]
		public System.Nullable<System.Boolean> IsPotentialRetry { get; set; }
		
		/// <summary>
		/// Size of the data, in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// Scotty-provided MD5 hash for an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaId")]
		public string MediaId { get; set; }
		
		/// <summary>
		/// This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public ObjectId ObjectId { get; set; }
		
		/// <summary>
		/// Path to the data, set if reference_type is PATH
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Describes what the field reference contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public System.Nullable<MediaReferenceType> ReferenceType { get; set; }
		
		/// <summary>
		/// Scotty-provided SHA1 hash for an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Hash")]
		public string Sha1Hash { get; set; }
		
		/// <summary>
		/// Scotty-provided SHA256 hash for an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Hash")]
		public string Sha256Hash { get; set; }
		
		/// <summary>
		/// Time at which the media data was last updated, in milliseconds since UNIX epoch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// A unique fingerprint/version id for the media data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_MEDIA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPOSITE_MEDIA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGSTORE_REF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_VERSION_RESPONSE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_CHECKSUMS_RESPONSE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_DOWNLOAD_RESPONSE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_UPLOAD_REQUEST = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_UPLOAD_RESPONSE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMO_BINARY_REFERENCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARBITRARY_BYTES = 12,
	}
	
	/// <summary>
	/// Extra information added to operations that support Scotty media requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaRequestInfo
	{
		
		/// <summary>
		/// The number of current bytes uploaded or downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentBytes")]
		public string CurrentBytes { get; set; }
		
		/// <summary>
		/// Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffObjectVersion")]
		public string DiffObjectVersion { get; set; }
		
		/// <summary>
		/// The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalStatus")]
		public System.Nullable<System.Int32> FinalStatus { get; set; }
		
		/// <summary>
		/// The type of notification received from Scotty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<MediaRequestInfoNotificationType> NotificationType { get; set; }
		
		/// <summary>
		/// The Scotty request ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// The partition of the Scotty server handling this request. type is uploader_service.RequestReceivedParamsServingInfo LINT.IfChange(request_received_params_serving_info_annotations) LINT.ThenChange()
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestReceivedParamsServingInfo")]
		public string RequestReceivedParamsServingInfo { get; set; }
		
		/// <summary>
		/// The total size of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytes")]
		public string TotalBytes { get; set; }
		
		/// <summary>
		/// Whether the total bytes field contains an estimated data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesIsEstimated")]
		public System.Nullable<System.Boolean> TotalBytesIsEstimated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaRequestInfoNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_SENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyLinkedOfferObjects
	{
		
		/// <summary>
		/// The linked offer object ids to add to the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addLinkedOfferObjectIds")]
		public string[] AddLinkedOfferObjectIds { get; set; }
		
		/// <summary>
		/// The linked offer object ids to remove from the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLinkedOfferObjectIds")]
		public string[] RemoveLinkedOfferObjectIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyLinkedOfferObjectsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="linkedOfferObjectIds")]
		public ModifyLinkedOfferObjects LinkedOfferObjectIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferClassAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public OfferClass Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public OfferClass[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferObjectAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public OfferObject Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public OfferObject[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Permission
	{
		
		/// <summary>
		/// The email address of the user, group, or service account to which this permission refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The role granted by this permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<PermissionRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PermissionRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reader = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writer = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Permissions
	{
		
		/// <summary>
		/// ID of the issuer the list of permissions refer to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerId")]
		public string IssuerId { get; set; }
		
		/// <summary>
		/// The complete list of permissions for the issuer account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions1 { get; set; }
	}
	
	/// <summary>
	/// Private data for TextModule. This data will be rendered as a TextModule for a pass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateText
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public LocalizedString Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public LocalizedString Header { get; set; }
	}
	
	/// <summary>
	/// Private data for LinkModule. This data will be rendered as the LinkModule for a pass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateUri
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public LocalizedString Description { get; set; }
		
		/// <summary>
		/// The location of a web page, image, or other resource. URIs in the `LinksModuleData` can have different prefixes indicating the type of URI (a link to a web page, a link to a map, a telephone number, or an email address).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Request to send a private pass update notice information to Google, so that devices can then fetch the notice prompting the user to update a pass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetPassUpdateNoticeRequest
	{
	}
	
	/// <summary>
	/// A response to a request to notify Google of an awaiting update to a private pass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetPassUpdateNoticeResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SmartTap
	{
		
		/// <summary>
		/// The unique identifier for a smart tap. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is the Smart Tap id. The Smart Tap id is a Base64 encoded string which represents the id which was generated by the Google Pay app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Communication from merchant to user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infos")]
		public IssuerToUserInfo[] Infos { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"walletobjects#smartTap"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Smart Tap merchant ID of who engaged in the Smart Tap interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitClassAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public TransitClass Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitClassListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public TransitClass[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitObjectAddMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public TransitObject Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitObjectListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// Resources corresponding to the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public TransitObject[] Resources { get; set; }
	}
	
	/// <summary>
	/// Request to upload rotating barcode values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitObjectUploadRotatingBarcodeValuesRequest
	{
		
		/// <summary>
		/// A reference to data stored on the filesystem, on GFS or in blobstore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public Media Blob { get; set; }
		
		/// <summary>
		/// Extra information added to operations that support Scotty media requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaRequestInfo")]
		public MediaRequestInfo MediaRequestInfo { get; set; }
	}
	
	/// <summary>
	/// Response for uploading rotating barcode values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitObjectUploadRotatingBarcodeValuesResponse
	{
	}
	
	/// <summary>
	/// Request for sending user private Text or URI by the Issuer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadPrivateDataRequest
	{
		
		/// <summary>
		/// The ID of the issuer sending the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerId")]
		public string IssuerId { get; set; }
		
		/// <summary>
		/// Private data for TextModule. This data will be rendered as a TextModule for a pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public PrivateText Text { get; set; }
		
		/// <summary>
		/// Private data for LinkModule. This data will be rendered as the LinkModule for a pass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public PrivateUri Uri { get; set; }
	}
	
	/// <summary>
	/// Response for uploading user private data (text or URIs)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadPrivateDataResponse
	{
		
		/// <summary>
		/// A 64-bit content id for the private data that was uploaded by the Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateContentId")]
		public string PrivateContentId { get; set; }
	}
	
	/// <summary>
	/// Request to upload user's private images by Issuers to be used in passes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadPrivateImageRequest
	{
		
		/// <summary>
		/// A reference to data stored on the filesystem, on GFS or in blobstore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public Media Blob { get; set; }
		
		/// <summary>
		/// Extra information added to operations that support Scotty media requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaRequestInfo")]
		public MediaRequestInfo MediaRequestInfo { get; set; }
	}
	
	/// <summary>
	/// Response for uploading the private image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadPrivateImageResponse
	{
		
		/// <summary>
		/// A 64-bit content id for the image that was uploaded by the Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateContentId")]
		public string PrivateContentId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of all event ticket classes for a given issuer ID.
		/// Walletobjects_eventticketclass_list walletobjects/v1/eventTicketClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketClassListResponse> Walletobjects_eventticketclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an event ticket class with the given ID and properties.
		/// Walletobjects_eventticketclass_insert walletobjects/v1/eventTicketClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<EventTicketClass> Walletobjects_eventticketclass_insertAsync(EventTicketClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the event ticket class with the given class ID.
		/// Walletobjects_eventticketclass_get walletobjects/v1/eventTicketClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketClass> Walletobjects_eventticketclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the event ticket class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_eventticketclass_patch walletobjects/v1/eventTicketClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketClass> Walletobjects_eventticketclass_patchAsync(string resourceId, EventTicketClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the event ticket class referenced by the given class ID.
		/// Walletobjects_eventticketclass_update walletobjects/v1/eventTicketClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketClass> Walletobjects_eventticketclass_updateAsync(string resourceId, EventTicketClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the event ticket class referenced by the given class ID.
		/// Walletobjects_eventticketclass_addmessage walletobjects/v1/eventTicketClass/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketClassAddMessageResponse> Walletobjects_eventticketclass_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketClassAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all event ticket objects for a given issuer ID.
		/// Walletobjects_eventticketobject_list walletobjects/v1/eventTicketObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObjectListResponse> Walletobjects_eventticketobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an event ticket object with the given ID and properties.
		/// Walletobjects_eventticketobject_insert walletobjects/v1/eventTicketObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObject> Walletobjects_eventticketobject_insertAsync(EventTicketObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the event ticket object with the given object ID.
		/// Walletobjects_eventticketobject_get walletobjects/v1/eventTicketObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObject> Walletobjects_eventticketobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the event ticket object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_eventticketobject_patch walletobjects/v1/eventTicketObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObject> Walletobjects_eventticketobject_patchAsync(string resourceId, EventTicketObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the event ticket object referenced by the given object ID.
		/// Walletobjects_eventticketobject_update walletobjects/v1/eventTicketObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObject> Walletobjects_eventticketobject_updateAsync(string resourceId, EventTicketObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the event ticket object referenced by the given object ID.
		/// Walletobjects_eventticketobject_addmessage walletobjects/v1/eventTicketObject/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObjectAddMessageResponse> Walletobjects_eventticketobject_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObjectAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies linked offer objects for the event ticket object with the given ID.
		/// Walletobjects_eventticketobject_modifylinkedofferobjects walletobjects/v1/eventTicketObject/{resourceId}/modifyLinkedOfferObjects
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<EventTicketObject> Walletobjects_eventticketobject_modifylinkedofferobjectsAsync(string resourceId, ModifyLinkedOfferObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/eventTicketObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/modifyLinkedOfferObjects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventTicketObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all flight classes for a given issuer ID.
		/// Walletobjects_flightclass_list walletobjects/v1/flightClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightClassListResponse> Walletobjects_flightclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an flight class with the given ID and properties.
		/// Walletobjects_flightclass_insert walletobjects/v1/flightClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<FlightClass> Walletobjects_flightclass_insertAsync(FlightClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the flight class with the given class ID.
		/// Walletobjects_flightclass_get walletobjects/v1/flightClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightClass> Walletobjects_flightclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the flight class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_flightclass_patch walletobjects/v1/flightClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightClass> Walletobjects_flightclass_patchAsync(string resourceId, FlightClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the flight class referenced by the given class ID.
		/// Walletobjects_flightclass_update walletobjects/v1/flightClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightClass> Walletobjects_flightclass_updateAsync(string resourceId, FlightClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the flight class referenced by the given class ID.
		/// Walletobjects_flightclass_addmessage walletobjects/v1/flightClass/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightClassAddMessageResponse> Walletobjects_flightclass_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightClassAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all flight objects for a given issuer ID.
		/// Walletobjects_flightobject_list walletobjects/v1/flightObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightObjectListResponse> Walletobjects_flightobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an flight object with the given ID and properties.
		/// Walletobjects_flightobject_insert walletobjects/v1/flightObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<FlightObject> Walletobjects_flightobject_insertAsync(FlightObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the flight object with the given object ID.
		/// Walletobjects_flightobject_get walletobjects/v1/flightObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightObject> Walletobjects_flightobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the flight object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_flightobject_patch walletobjects/v1/flightObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightObject> Walletobjects_flightobject_patchAsync(string resourceId, FlightObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the flight object referenced by the given object ID.
		/// Walletobjects_flightobject_update walletobjects/v1/flightObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightObject> Walletobjects_flightobject_updateAsync(string resourceId, FlightObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the flight object referenced by the given object ID.
		/// Walletobjects_flightobject_addmessage walletobjects/v1/flightObject/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<FlightObjectAddMessageResponse> Walletobjects_flightobject_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/flightObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlightObjectAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all generic classes for a given issuer ID.
		/// Walletobjects_genericclass_list walletobjects/v1/genericClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericClassListResponse> Walletobjects_genericclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a generic class with the given ID and properties.
		/// Walletobjects_genericclass_insert walletobjects/v1/genericClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GenericClass> Walletobjects_genericclass_insertAsync(GenericClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the generic class with the given class ID.
		/// Walletobjects_genericclass_get walletobjects/v1/genericClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericClass> Walletobjects_genericclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the generic class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_genericclass_patch walletobjects/v1/genericClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericClass> Walletobjects_genericclass_patchAsync(string resourceId, GenericClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the Generic class referenced by the given class ID.
		/// Walletobjects_genericclass_update walletobjects/v1/genericClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericClass> Walletobjects_genericclass_updateAsync(string resourceId, GenericClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all generic objects for a given issuer ID.
		/// Walletobjects_genericobject_list walletobjects/v1/genericObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericObjectListResponse> Walletobjects_genericobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a generic object with the given ID and properties.
		/// Walletobjects_genericobject_insert walletobjects/v1/genericObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GenericObject> Walletobjects_genericobject_insertAsync(GenericObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the generic object with the given object ID.
		/// Walletobjects_genericobject_get walletobjects/v1/genericObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericObject> Walletobjects_genericobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the generic object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_genericobject_patch walletobjects/v1/genericObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericObject> Walletobjects_genericobject_patchAsync(string resourceId, GenericObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the generic object referenced by the given object ID.
		/// Walletobjects_genericobject_update walletobjects/v1/genericObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.</param>
		/// <returns>Successful response</returns>
		public async Task<GenericObject> Walletobjects_genericobject_updateAsync(string resourceId, GenericObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/genericObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all gift card classes for a given issuer ID.
		/// Walletobjects_giftcardclass_list walletobjects/v1/giftCardClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardClassListResponse> Walletobjects_giftcardclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an gift card class with the given ID and properties.
		/// Walletobjects_giftcardclass_insert walletobjects/v1/giftCardClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GiftCardClass> Walletobjects_giftcardclass_insertAsync(GiftCardClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the gift card class with the given class ID.
		/// Walletobjects_giftcardclass_get walletobjects/v1/giftCardClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardClass> Walletobjects_giftcardclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the gift card class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_giftcardclass_patch walletobjects/v1/giftCardClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardClass> Walletobjects_giftcardclass_patchAsync(string resourceId, GiftCardClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the gift card class referenced by the given class ID.
		/// Walletobjects_giftcardclass_update walletobjects/v1/giftCardClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardClass> Walletobjects_giftcardclass_updateAsync(string resourceId, GiftCardClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the gift card class referenced by the given class ID.
		/// Walletobjects_giftcardclass_addmessage walletobjects/v1/giftCardClass/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardClassAddMessageResponse> Walletobjects_giftcardclass_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardClassAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all gift card objects for a given issuer ID.
		/// Walletobjects_giftcardobject_list walletobjects/v1/giftCardObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardObjectListResponse> Walletobjects_giftcardobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an gift card object with the given ID and properties.
		/// Walletobjects_giftcardobject_insert walletobjects/v1/giftCardObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GiftCardObject> Walletobjects_giftcardobject_insertAsync(GiftCardObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the gift card object with the given object ID.
		/// Walletobjects_giftcardobject_get walletobjects/v1/giftCardObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardObject> Walletobjects_giftcardobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the gift card object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_giftcardobject_patch walletobjects/v1/giftCardObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardObject> Walletobjects_giftcardobject_patchAsync(string resourceId, GiftCardObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the gift card object referenced by the given object ID.
		/// Walletobjects_giftcardobject_update walletobjects/v1/giftCardObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardObject> Walletobjects_giftcardobject_updateAsync(string resourceId, GiftCardObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the gift card object referenced by the given object ID.
		/// Walletobjects_giftcardobject_addmessage walletobjects/v1/giftCardObject/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<GiftCardObjectAddMessageResponse> Walletobjects_giftcardobject_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/giftCardObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GiftCardObjectAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all issuers shared to the caller.
		/// Walletobjects_issuer_list walletobjects/v1/issuer
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<IssuerListResponse> Walletobjects_issuer_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/issuer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IssuerListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an issuer with the given ID and properties.
		/// Walletobjects_issuer_insert walletobjects/v1/issuer
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Issuer> Walletobjects_issuer_insertAsync(Issuer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/issuer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Issuer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the issuer with the given issuer ID.
		/// Walletobjects_issuer_get walletobjects/v1/issuer/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an issuer.</param>
		/// <returns>Successful response</returns>
		public async Task<Issuer> Walletobjects_issuer_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/issuer/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Issuer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the issuer referenced by the given issuer ID. This method supports patch semantics.
		/// Walletobjects_issuer_patch walletobjects/v1/issuer/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an issuer.</param>
		/// <returns>Successful response</returns>
		public async Task<Issuer> Walletobjects_issuer_patchAsync(string resourceId, Issuer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/issuer/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Issuer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the issuer referenced by the given issuer ID.
		/// Walletobjects_issuer_update walletobjects/v1/issuer/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an issuer.</param>
		/// <returns>Successful response</returns>
		public async Task<Issuer> Walletobjects_issuer_updateAsync(string resourceId, Issuer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/issuer/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Issuer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inserts the resources in the JWT.
		/// Walletobjects_jwt_insert walletobjects/v1/jwt
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<JwtInsertResponse> Walletobjects_jwt_insertAsync(JwtResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/jwt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JwtInsertResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all loyalty classes for a given issuer ID.
		/// Walletobjects_loyaltyclass_list walletobjects/v1/loyaltyClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyClassListResponse> Walletobjects_loyaltyclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an loyalty class with the given ID and properties.
		/// Walletobjects_loyaltyclass_insert walletobjects/v1/loyaltyClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyClass> Walletobjects_loyaltyclass_insertAsync(LoyaltyClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the loyalty class with the given class ID.
		/// Walletobjects_loyaltyclass_get walletobjects/v1/loyaltyClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyClass> Walletobjects_loyaltyclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the loyalty class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_loyaltyclass_patch walletobjects/v1/loyaltyClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyClass> Walletobjects_loyaltyclass_patchAsync(string resourceId, LoyaltyClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the loyalty class referenced by the given class ID.
		/// Walletobjects_loyaltyclass_update walletobjects/v1/loyaltyClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyClass> Walletobjects_loyaltyclass_updateAsync(string resourceId, LoyaltyClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the loyalty class referenced by the given class ID.
		/// Walletobjects_loyaltyclass_addmessage walletobjects/v1/loyaltyClass/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyClassAddMessageResponse> Walletobjects_loyaltyclass_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyClassAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all loyalty objects for a given issuer ID.
		/// Walletobjects_loyaltyobject_list walletobjects/v1/loyaltyObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObjectListResponse> Walletobjects_loyaltyobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an loyalty object with the given ID and properties.
		/// Walletobjects_loyaltyobject_insert walletobjects/v1/loyaltyObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObject> Walletobjects_loyaltyobject_insertAsync(LoyaltyObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the loyalty object with the given object ID.
		/// Walletobjects_loyaltyobject_get walletobjects/v1/loyaltyObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObject> Walletobjects_loyaltyobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the loyalty object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_loyaltyobject_patch walletobjects/v1/loyaltyObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObject> Walletobjects_loyaltyobject_patchAsync(string resourceId, LoyaltyObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the loyalty object referenced by the given object ID.
		/// Walletobjects_loyaltyobject_update walletobjects/v1/loyaltyObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObject> Walletobjects_loyaltyobject_updateAsync(string resourceId, LoyaltyObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the loyalty object referenced by the given object ID.
		/// Walletobjects_loyaltyobject_addmessage walletobjects/v1/loyaltyObject/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObjectAddMessageResponse> Walletobjects_loyaltyobject_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObjectAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies linked offer objects for the loyalty object with the given ID.
		/// Walletobjects_loyaltyobject_modifylinkedofferobjects walletobjects/v1/loyaltyObject/{resourceId}/modifyLinkedOfferObjects
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<LoyaltyObject> Walletobjects_loyaltyobject_modifylinkedofferobjectsAsync(string resourceId, ModifyLinkedOfferObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/loyaltyObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/modifyLinkedOfferObjects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LoyaltyObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all offer classes for a given issuer ID.
		/// Walletobjects_offerclass_list walletobjects/v1/offerClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferClassListResponse> Walletobjects_offerclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an offer class with the given ID and properties.
		/// Walletobjects_offerclass_insert walletobjects/v1/offerClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<OfferClass> Walletobjects_offerclass_insertAsync(OfferClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the offer class with the given class ID.
		/// Walletobjects_offerclass_get walletobjects/v1/offerClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferClass> Walletobjects_offerclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the offer class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_offerclass_patch walletobjects/v1/offerClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferClass> Walletobjects_offerclass_patchAsync(string resourceId, OfferClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the offer class referenced by the given class ID.
		/// Walletobjects_offerclass_update walletobjects/v1/offerClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferClass> Walletobjects_offerclass_updateAsync(string resourceId, OfferClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the offer class referenced by the given class ID.
		/// Walletobjects_offerclass_addmessage walletobjects/v1/offerClass/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferClassAddMessageResponse> Walletobjects_offerclass_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferClassAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all offer objects for a given issuer ID.
		/// Walletobjects_offerobject_list walletobjects/v1/offerObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferObjectListResponse> Walletobjects_offerobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an offer object with the given ID and properties.
		/// Walletobjects_offerobject_insert walletobjects/v1/offerObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<OfferObject> Walletobjects_offerobject_insertAsync(OfferObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the offer object with the given object ID.
		/// Walletobjects_offerobject_get walletobjects/v1/offerObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferObject> Walletobjects_offerobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the offer object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_offerobject_patch walletobjects/v1/offerObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferObject> Walletobjects_offerobject_patchAsync(string resourceId, OfferObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the offer object referenced by the given object ID.
		/// Walletobjects_offerobject_update walletobjects/v1/offerObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferObject> Walletobjects_offerobject_updateAsync(string resourceId, OfferObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the offer object referenced by the given object ID.
		/// Walletobjects_offerobject_addmessage walletobjects/v1/offerObject/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<OfferObjectAddMessageResponse> Walletobjects_offerobject_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/offerObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OfferObjectAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the permissions for the given issuer id.
		/// Walletobjects_permissions_get walletobjects/v1/permissions/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an issuer. This ID must be unique across all issuers.</param>
		/// <returns>Successful response</returns>
		public async Task<Permissions> Walletobjects_permissions_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/permissions/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permissions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the permissions for the given issuer.
		/// Walletobjects_permissions_update walletobjects/v1/permissions/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an issuer. This ID must be unique across all issuers.</param>
		/// <returns>Successful response</returns>
		public async Task<Permissions> Walletobjects_permissions_updateAsync(string resourceId, Permissions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/permissions/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permissions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provide Google with information about awaiting private pass update. This will allow Google to provide the update notification to the device that currently holds this pass.
		/// Walletobjects_walletobjects_v1_privateContent_setPassUpdateNotice walletobjects/v1/privateContent/setPassUpdateNotice
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SetPassUpdateNoticeResponse> Walletobjects_walletobjects_v1_privateContent_setPassUpdateNoticeAsync(SetPassUpdateNoticeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/privateContent/setPassUpdateNotice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetPassUpdateNoticeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Upload private data (text or URI) and returns an Id to be used in its place.
		/// Walletobjects_walletobjects_v1_privateContent_uploadPrivateData walletobjects/v1/privateContent/uploadPrivateData
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UploadPrivateDataResponse> Walletobjects_walletobjects_v1_privateContent_uploadPrivateDataAsync(UploadPrivateDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/privateContent/uploadPrivateData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UploadPrivateDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inserts the smart tap.
		/// Walletobjects_smarttap_insert walletobjects/v1/smartTap
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SmartTap> Walletobjects_smarttap_insertAsync(SmartTap requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/smartTap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SmartTap>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all transit classes for a given issuer ID.
		/// Walletobjects_transitclass_list walletobjects/v1/transitClass
		/// </summary>
		/// <param name="issuerId">The ID of the issuer authorized to list classes.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` classes are available in a list. For example, if you have a list of 200 classes and you call list with `maxResults` set to 20, list will return the first 20 classes and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 classes.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitClassListResponse> Walletobjects_transitclass_listAsync(string issuerId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitClass?issuerId=" + (issuerId==null? "" : System.Uri.EscapeDataString(issuerId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitClassListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a transit class with the given ID and properties.
		/// Walletobjects_transitclass_insert walletobjects/v1/transitClass
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<TransitClass> Walletobjects_transitclass_insertAsync(TransitClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitClass";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the transit class with the given class ID.
		/// Walletobjects_transitclass_get walletobjects/v1/transitClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitClass> Walletobjects_transitclass_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the transit class referenced by the given class ID. This method supports patch semantics.
		/// Walletobjects_transitclass_patch walletobjects/v1/transitClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitClass> Walletobjects_transitclass_patchAsync(string resourceId, TransitClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the transit class referenced by the given class ID.
		/// Walletobjects_transitclass_update walletobjects/v1/transitClass/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitClass> Walletobjects_transitclass_updateAsync(string resourceId, TransitClass requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the transit class referenced by the given class ID.
		/// Walletobjects_transitclass_addmessage walletobjects/v1/transitClass/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitClassAddMessageResponse> Walletobjects_transitclass_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitClass/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitClassAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all transit objects for a given issuer ID.
		/// Walletobjects_transitobject_list walletobjects/v1/transitObject
		/// </summary>
		/// <param name="classId">The ID of the class whose objects will be listed.</param>
		/// <param name="maxResults">Identifies the max number of results returned by a list. All results are returned if `maxResults` isn't defined.</param>
		/// <param name="token">Used to get the next set of results if `maxResults` is specified, but more than `maxResults` objects are available in a list. For example, if you have a list of 200 objects and you call list with `maxResults` set to 20, list will return the first 20 objects and a token. Call list again with `maxResults` set to 20 and the token to get the next 20 objects.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitObjectListResponse> Walletobjects_transitobject_listAsync(string classId, int maxResults, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject?classId=" + (classId==null? "" : System.Uri.EscapeDataString(classId))+"&maxResults="+maxResults+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitObjectListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts an transit object with the given ID and properties.
		/// Walletobjects_transitobject_insert walletobjects/v1/transitObject
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<TransitObject> Walletobjects_transitobject_insertAsync(TransitObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the transit object with the given object ID.
		/// Walletobjects_transitobject_get walletobjects/v1/transitObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitObject> Walletobjects_transitobject_getAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the transit object referenced by the given object ID. This method supports patch semantics.
		/// Walletobjects_transitobject_patch walletobjects/v1/transitObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitObject> Walletobjects_transitobject_patchAsync(string resourceId, TransitObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the transit object referenced by the given object ID.
		/// Walletobjects_transitobject_update walletobjects/v1/transitObject/{resourceId}
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitObject> Walletobjects_transitobject_updateAsync(string resourceId, TransitObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a message to the transit object referenced by the given object ID.
		/// Walletobjects_transitobject_addmessage walletobjects/v1/transitObject/{resourceId}/addMessage
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<TransitObjectAddMessageResponse> Walletobjects_transitobject_addmessageAsync(string resourceId, AddMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/addMessage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransitObjectAddMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Downloads rotating barcode values for the transit object referenced by the given object ID.
		/// Walletobjects_media_download walletobjects/v1/transitObject/{resourceId}/downloadRotatingBarcodeValues
		/// </summary>
		/// <param name="resourceId">The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.</param>
		/// <returns>Successful response</returns>
		public async Task<Media> Walletobjects_media_downloadAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "walletobjects/v1/transitObject/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/downloadRotatingBarcodeValues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Media>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
