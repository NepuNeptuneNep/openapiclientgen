//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AadharNumberRequestPayload
	{
		
		/// <summary>
		/// Pattern: ^(\d{12}|\d{16})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aadhaar")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{12}|\d{16})*$")]
		public string Aadhaar { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AadharOtpGenerateRequestPayLoad
	{
		
		/// <summary>
		/// Pattern: ^(\d{12}|\d{16})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aadhaar")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{12}|\d{16})*$")]
		public string Aadhaar { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthAccountAadhaarBioRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public System.Nullable<AuthAccountAadhaarBioRequestAuthType> AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bioType")]
		public string BioType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthAccountAadhaarBioRequestAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINGERSCAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthAccountAadhaarOTPRequest
	{
		
		/// <summary>
		/// Required
		/// Pattern: ^([1-9][0-9]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otp")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([1-9][0-9]*)$")]
		public string Otp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthAccountMobileOTPRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthAccountWithDemographicsRequest
	{
		
		/// <summary>
		/// Pattern: ^(M|F|O|U)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(M|F|O|U)$")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		/// <summary>
		/// Pattern: ^(\d{4})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{4})$")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthInitRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authMethod")]
		public AuthInitRequestAuthMethod AuthMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthid")]
		public string Healthid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthInitRequestAuthMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AADHAAR_OTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_OTP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEMOGRAPHICS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AADHAAR_BIO = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthMobileOTPRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthid")]
		public string Healthid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthWithMobileTxnAndUserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthWithPasswordRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BenefitDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkageDate")]
		public System.Nullable<System.DateTimeOffset> LinkageDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="programName")]
		public string ProgramName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public System.Nullable<System.DateOnly> Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ByteArrayResource
	{
		
		/// <summary>
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byteArray")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
		public string ByteArray { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public File File { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputStream")]
		public InputStream InputStream { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="open")]
		public System.Nullable<System.Boolean> Open { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readable")]
		public System.Nullable<System.Boolean> Readable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public URI Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public URL Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		[System.Runtime.Serialization.DataMember(Name="absolute")]
		public System.Nullable<System.Boolean> Absolute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absoluteFile")]
		public File AbsoluteFile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absolutePath")]
		public string AbsolutePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canonicalFile")]
		public File CanonicalFile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canonicalPath")]
		public string CanonicalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directory")]
		public System.Nullable<System.Boolean> Directory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public System.Nullable<System.Boolean> File1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeSpace")]
		public System.Nullable<System.Int64> FreeSpace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentFile")]
		public File ParentFile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalSpace")]
		public System.Nullable<System.Int64> TotalSpace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usableSpace")]
		public System.Nullable<System.Int64> UsableSpace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputStream
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class URI
	{
		
		[System.Runtime.Serialization.DataMember(Name="absolute")]
		public System.Nullable<System.Boolean> Absolute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public string Authority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fragment")]
		public string Fragment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="opaque")]
		public System.Nullable<System.Boolean> Opaque { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawAuthority")]
		public string RawAuthority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawFragment")]
		public string RawFragment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawPath")]
		public string RawPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawQuery")]
		public string RawQuery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawSchemeSpecificPart")]
		public string RawSchemeSpecificPart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawUserInfo")]
		public string RawUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public string Scheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemeSpecificPart")]
		public string SchemeSpecificPart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public string UserInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class URL
	{
		
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public string Authority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultPort")]
		public System.Nullable<System.Int32> DefaultPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public string UserInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CovinTxnResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccountByVerifiedMobileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Pattern: ^(0?[1-9]|[12][0-9]|3[01])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(0?[1-9]|[12][0-9]|3[01])$")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtCode")]
		public string DistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Pattern: ^(M|F|O|U)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(M|F|O|U)$")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Pattern: ^([1-9]|1[012])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([1-9]|1[012])$")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public System.Nullable<System.Int32> Pincode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public string Restrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdistrictCode")]
		public string SubdistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townCode")]
		public string TownCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageCode")]
		public string VillageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardCode")]
		public string WardCode { get; set; }
		
		/// <summary>
		/// Pattern: ^(\d{4})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{4})$")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccountJwtResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public AuthInitRequestAuthMethod[] AuthMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtCode")]
		public string DistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtName")]
		public string DistrictName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycPhoto")]
		public string KycPhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public System.Nullable<System.Boolean> New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		public string StateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccountWithAadhaarOtp
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public string Restrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccountWithPreVerifiedAadhaar
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHIdDemoAuthRequest
	{
		
		/// <summary>
		/// Pattern: ^(\d{12}|\d{16})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aadharNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{12}|\d{16})*$")]
		public string AadharNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGeneratedBenefitId")]
		public System.Nullable<System.Boolean> AutoGeneratedBenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentHealthId")]
		public System.Nullable<System.Boolean> ConsentHealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Pattern: ^(M|F|T)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(M|F|T)$")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public string Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHealthIdOptRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoGeneratedBenefitId")]
		public System.Nullable<System.Boolean> AutoGeneratedBenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentHealthId")]
		public System.Nullable<System.Boolean> ConsentHealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public string Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHidBiometricRequest
	{
		
		/// <summary>
		/// Pattern: ^(\d{12}|\d{16})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aadhaar")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{12}|\d{16})*$")]
		public string Aadhaar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGeneratedBenefitId")]
		public System.Nullable<System.Boolean> AutoGeneratedBenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bioType")]
		public string BioType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentHealthId")]
		public System.Nullable<System.Boolean> ConsentHealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public string Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHidMobileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoGeneratedBenefitId")]
		public System.Nullable<System.Boolean> AutoGeneratedBenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitDocType")]
		public System.Nullable<CreateHidMobileRequestBenefitDocType> BenefitDocType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentHealthId")]
		public System.Nullable<System.Boolean> ConsentHealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="docNumber")]
		public string DocNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public string FileType { get; set; }
		
		/// <summary>
		/// Pattern: ^(M|F|T)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(M|F|T)$")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadedDoc")]
		public string UploadedDoc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public string Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreateHidMobileRequestBenefitDocType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOTER_ID_CARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATION_CARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVING_LICENSE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENSIONER_PHOTO_CARD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KISSAN_PHOTO_PASSBOOK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREEDOM_FIGHTER_PHOTO_CARD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_IDENTIFY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABILITY_ID_CARD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MNREGA_JOB_CARD = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_CERTIFICATE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARRIAGE_CERTIFICATE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_GOVERNMENT_ID = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADOPTION_CERTIFICATE = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHidNotifyBenefitRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="aadharNumberOrUidToken")]
		public string AadharNumberOrUidToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGeneratedBenefitId")]
		public System.Nullable<System.Boolean> AutoGeneratedBenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentHealthId")]
		public System.Nullable<System.Boolean> ConsentHealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Pattern: ^(M|F|T)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(M|F|T)$")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public string Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DistrictDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateMobileOTPForTxnRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateMobileOTPRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthFacilityAuthenticationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="hfrUid")]
		public string HfrUid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthFacilityAuthenticationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changePassword")]
		public System.Nullable<System.Boolean> ChangePassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthFacilityChangedPasswordRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="hfrUid")]
		public string HfrUid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		public string OldPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthFacilityPasswordRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="hfrUid")]
		public string HfrUid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthFacilityPasswordResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidBenefitDelinkRequestPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uidToken")]
		public string UidToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidBenefitLinkedRequestPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uidToken")]
		public string UidToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public string Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidBenefitLinkedResponsePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidBenefitNameSearchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidBenefitRequestPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public AuthInitRequestAuthMethod[] AuthMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtCode")]
		public string DistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtName")]
		public string DistrictName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycPhoto")]
		public string KycPhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycVerified")]
		public System.Nullable<System.Boolean> KycVerified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public System.Nullable<System.Boolean> New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public string Pincode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		public string StateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subDistrictCode")]
		public string SubDistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdistrictName")]
		public string SubdistrictName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townCode")]
		public string TownCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townName")]
		public string TownName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageCode")]
		public string VillageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageName")]
		public string VillageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardCode")]
		public string WardCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardName")]
		public string WardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidBenefitSearchResponsePayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="benefitId")]
		public string BenefitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="benefitName")]
		public string BenefitName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidChangePasswordRequestPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		public string OldPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidOtpRequestPaylaod
	{
		
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidStatusRequestPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidUpdateAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtCode")]
		public string DistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public System.Nullable<System.Int32> Pincode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdistrictCode")]
		public string SubdistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townCode")]
		public string TownCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageCode")]
		public string VillageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardCode")]
		public string WardCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HidUpdateMobiletRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JwtRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JwtResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileVerificationToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResendOTPRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResponseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<ResponseEntityStatusCode> StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCodeValue")]
		public System.Nullable<System.Int32> StatusCodeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResponseEntityStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100 CONTINUE")]
		_100_CONTINUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101 SWITCHING_PROTOCOLS")]
		_101_SWITCHING_PROTOCOLS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102 PROCESSING")]
		_102_PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103 CHECKPOINT")]
		_103_CHECKPOINT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="200 OK")]
		_200_OK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="201 CREATED")]
		_201_CREATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="202 ACCEPTED")]
		_202_ACCEPTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="203 NON_AUTHORITATIVE_INFORMATION")]
		_203_NON_AUTHORITATIVE_INFORMATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="204 NO_CONTENT")]
		_204_NO_CONTENT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="205 RESET_CONTENT")]
		_205_RESET_CONTENT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="206 PARTIAL_CONTENT")]
		_206_PARTIAL_CONTENT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="207 MULTI_STATUS")]
		_207_MULTI_STATUS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="208 ALREADY_REPORTED")]
		_208_ALREADY_REPORTED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="226 IM_USED")]
		_226_IM_USED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="300 MULTIPLE_CHOICES")]
		_300_MULTIPLE_CHOICES = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="301 MOVED_PERMANENTLY")]
		_301_MOVED_PERMANENTLY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="302 FOUND")]
		_302_FOUND = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="302 MOVED_TEMPORARILY")]
		_302_MOVED_TEMPORARILY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="303 SEE_OTHER")]
		_303_SEE_OTHER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="304 NOT_MODIFIED")]
		_304_NOT_MODIFIED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="305 USE_PROXY")]
		_305_USE_PROXY = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="307 TEMPORARY_REDIRECT")]
		_307_TEMPORARY_REDIRECT = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="308 PERMANENT_REDIRECT")]
		_308_PERMANENT_REDIRECT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="400 BAD_REQUEST")]
		_400_BAD_REQUEST = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="401 UNAUTHORIZED")]
		_401_UNAUTHORIZED = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="402 PAYMENT_REQUIRED")]
		_402_PAYMENT_REQUIRED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="403 FORBIDDEN")]
		_403_FORBIDDEN = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="404 NOT_FOUND")]
		_404_NOT_FOUND = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="405 METHOD_NOT_ALLOWED")]
		_405_METHOD_NOT_ALLOWED = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="406 NOT_ACCEPTABLE")]
		_406_NOT_ACCEPTABLE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="407 PROXY_AUTHENTICATION_REQUIRED")]
		_407_PROXY_AUTHENTICATION_REQUIRED = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="408 REQUEST_TIMEOUT")]
		_408_REQUEST_TIMEOUT = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="409 CONFLICT")]
		_409_CONFLICT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="410 GONE")]
		_410_GONE = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="411 LENGTH_REQUIRED")]
		_411_LENGTH_REQUIRED = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="412 PRECONDITION_FAILED")]
		_412_PRECONDITION_FAILED = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="413 PAYLOAD_TOO_LARGE")]
		_413_PAYLOAD_TOO_LARGE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="413 REQUEST_ENTITY_TOO_LARGE")]
		_413_REQUEST_ENTITY_TOO_LARGE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="414 URI_TOO_LONG")]
		_414_URI_TOO_LONG = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="414 REQUEST_URI_TOO_LONG")]
		_414_REQUEST_URI_TOO_LONG = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="415 UNSUPPORTED_MEDIA_TYPE")]
		_415_UNSUPPORTED_MEDIA_TYPE = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="416 REQUESTED_RANGE_NOT_SATISFIABLE")]
		_416_REQUESTED_RANGE_NOT_SATISFIABLE = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="417 EXPECTATION_FAILED")]
		_417_EXPECTATION_FAILED = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="418 I_AM_A_TEAPOT")]
		_418_I_AM_A_TEAPOT = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="419 INSUFFICIENT_SPACE_ON_RESOURCE")]
		_419_INSUFFICIENT_SPACE_ON_RESOURCE = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="420 METHOD_FAILURE")]
		_420_METHOD_FAILURE = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="421 DESTINATION_LOCKED")]
		_421_DESTINATION_LOCKED = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="422 UNPROCESSABLE_ENTITY")]
		_422_UNPROCESSABLE_ENTITY = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="423 LOCKED")]
		_423_LOCKED = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="424 FAILED_DEPENDENCY")]
		_424_FAILED_DEPENDENCY = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="426 UPGRADE_REQUIRED")]
		_426_UPGRADE_REQUIRED = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="428 PRECONDITION_REQUIRED")]
		_428_PRECONDITION_REQUIRED = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="429 TOO_MANY_REQUESTS")]
		_429_TOO_MANY_REQUESTS = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="431 REQUEST_HEADER_FIELDS_TOO_LARGE")]
		_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="451 UNAVAILABLE_FOR_LEGAL_REASONS")]
		_451_UNAVAILABLE_FOR_LEGAL_REASONS = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500 INTERNAL_SERVER_ERROR")]
		_500_INTERNAL_SERVER_ERROR = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="501 NOT_IMPLEMENTED")]
		_501_NOT_IMPLEMENTED = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="502 BAD_GATEWAY")]
		_502_BAD_GATEWAY = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="503 SERVICE_UNAVAILABLE")]
		_503_SERVICE_UNAVAILABLE = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="504 GATEWAY_TIMEOUT")]
		_504_GATEWAY_TIMEOUT = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="505 HTTP_VERSION_NOT_SUPPORTED")]
		_505_HTTP_VERSION_NOT_SUPPORTED = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="506 VARIANT_ALSO_NEGOTIATES")]
		_506_VARIANT_ALSO_NEGOTIATES = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="507 INSUFFICIENT_STORAGE")]
		_507_INSUFFICIENT_STORAGE = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="508 LOOP_DETECTED")]
		_508_LOOP_DETECTED = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="509 BANDWIDTH_LIMIT_EXCEEDED")]
		_509_BANDWIDTH_LIMIT_EXCEEDED = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="510 NOT_EXTENDED")]
		_510_NOT_EXTENDED = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="511 NETWORK_AUTHENTICATION_REQUIRED")]
		_511_NETWORK_AUTHENTICATION_REQUIRED = 66,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveHealthIdPayloadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetriveHealthIdMobilePayLoad
	{
		
		/// <summary>
		/// Pattern: ^(0?[1-9]|[12][0-9]|3[01])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(0?[1-9]|[12][0-9]|3[01])$")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Pattern: ^(M|F|O|U)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(M|F|O|U)$")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Pattern: ^(0?[1-9]|1[012])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(0?[1-9]|1[012])$")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
		
		/// <summary>
		/// Pattern: ^(\d{4})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{4})$")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchByHealthIdRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchByMobileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResponseSingle
	{
		
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public AuthInitRequestAuthMethod[] AuthMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatesDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districts")]
		public DistrictDTO[] Districts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TxnResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtCode")]
		public string DistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public System.Nullable<System.Int32> Pincode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdistrictCode")]
		public string SubdistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townCode")]
		public string TownCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageCode")]
		public string VillageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardCode")]
		public string WardCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public AuthInitRequestAuthMethod[] AuthMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		public string DayOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtCode")]
		public string DistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="districtName")]
		public string DistrictName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycPhoto")]
		public string KycPhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycVerified")]
		public System.Nullable<System.Boolean> KycVerified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		public string MonthOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public System.Nullable<System.Boolean> New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public string Pincode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePhoto")]
		public string ProfilePhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		public string StateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subDistrictCode")]
		public string SubDistrictCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdistrictName")]
		public string SubdistrictName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townCode")]
		public string TownCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="townName")]
		public string TownName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageCode")]
		public string VillageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="villageName")]
		public string VillageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardCode")]
		public string WardCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wardName")]
		public string WardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public string YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateTokenRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authToken")]
		public string AuthToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifyAadhaarOtp
	{
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public string Restrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifyAadhaarWithBio
	{
		
		/// <summary>
		/// Pattern: ^(\d{12}|\d{16})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aadhaar")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d{12}|\d{16})*$")]
		public string Aadhaar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bioType")]
		public string BioType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public string Restrictions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifyMobileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Generate Aadhaar OTP on registrered for link account with aadhar number
		/// Generate Aadhaar OTP on registrered for link account with aadhar number
		/// GeneratereKycAadharOTPUsingPOST v1/account/aadhaar/generateOTP
		/// </summary>
		/// <returns>OK</returns>
		public async Task GeneratereKycAadharOTPUsingPOSTAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/aadhaar/generateOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify Aadhaar OTP to complete KYC/re-KYC verification.
		/// Verify Aadhaar OTP to complete KYC/re-KYC verification
		/// VerifyAadharOTPOnlyUsingPOST_1 v1/account/aadhaar/verifyOTP
		/// </summary>
		/// <param name="requestBody">verifyAadhaarOtp</param>
		/// <returns>OK</returns>
		public async Task VerifyAadharOTPOnlyUsingPOST_1Async(VerifyAadhaarOtp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/aadhaar/verifyOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get List of Benefits associated with HealthID.
		/// GetBenefitsUsingGET v1/account/benefits
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetBenefitsUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/benefits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change password via Aadhar for heath id.
		/// Change password via Aadhar for heath id.
		/// ChangePasswordViaAadharUsingPOST v1/account/change/passwd/byAadhaar
		/// </summary>
		/// <param name="requestBody">hidOtpRequestPaylaod</param>
		/// <returns>OK</returns>
		public async Task ChangePasswordViaAadharUsingPOSTAsync(HidOtpRequestPaylaod requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/change/passwd/byAadhaar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change password via mobile for heath id.
		/// Change password via mobile for heath id.
		/// ChangePasswordViaMobileUsingPOST v1/account/change/passwd/byMobile
		/// </summary>
		/// <param name="requestBody">hidOtpRequestPaylaod</param>
		/// <returns>OK</returns>
		public async Task ChangePasswordViaMobileUsingPOSTAsync(HidOtpRequestPaylaod requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/change/passwd/byMobile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Aadhaar OTP on registrered mobile number.
		/// Generate Aadhaar OTP on registrered mobile number.
		/// GenerateAadharOTPUsingGET v1/account/change/passwd/generateAadhaarOTP
		/// </summary>
		/// <returns>OK</returns>
		public async Task GenerateAadharOTPUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/change/passwd/generateAadhaarOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate Mobile OTP to start registration.
		/// Generate Mobile OTP to start registration.
		/// GenerateMobileOTPUsingGET v1/account/change/passwd/generateMobileOTP
		/// </summary>
		/// <returns>OK</returns>
		public async Task GenerateMobileOTPUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/change/passwd/generateMobileOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change password via password for heath id.
		/// Change password via password for heath id.
		/// ChangePasswordViaUsingPOST v1/account/change/password
		/// </summary>
		/// <param name="requestBody">healthFacilityPasswordRequest</param>
		/// <returns>OK</returns>
		public async Task ChangePasswordViaUsingPOSTAsync(HidChangePasswordRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/change/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Health ID card in PDF format
		/// GenerateCardUsingGET v1/account/getCard
		/// </summary>
		/// <returns>OK</returns>
		public async Task GenerateCardUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/getCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate Health ID card PNG
		/// GeneratePngCardUsingGET v1/account/getPngCard
		/// </summary>
		/// <returns>OK</returns>
		public async Task GeneratePngCardUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/getPngCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate Health ID card SVG
		/// GenerateSvgCardUsingGET v1/account/getSvgCard
		/// </summary>
		/// <returns>OK</returns>
		public async Task GenerateSvgCardUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/getSvgCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete account
		/// DeleteAccountUsingDELETE v1/account/profile
		/// </summary>
		/// <returns>OK</returns>
		public async Task DeleteAccountUsingDELETEAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get account information.
		/// GetAccountInformationUsingGET v1/account/profile
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetAccountInformationUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update account information
		/// UpdateAccountInformationUsingPOST v1/account/profile
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task UpdateAccountInformationUsingPOSTAsync(UpdateAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Quick Response code in PNG format for this account.
		/// GetQrCodeUsingGET v1/account/qrCode
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetQrCodeUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/qrCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validate auth token
		/// ValidateTokenUsingPOST v1/account/token
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task ValidateTokenUsingPOSTAsync(ValidateTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authenticate using Health ID number / Health ID and password
		/// AuthenticateWithPasswordUsingPOST v1/auth/authPassword
		/// </summary>
		/// <param name="requestBody">authenticationRequest</param>
		/// <returns>OK</returns>
		public async Task AuthenticateWithPasswordUsingPOSTAsync(JwtRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/authPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authenticate request to generate Mobile OTP using Health ID number / Health ID
		/// AuthenticateUserUsingPOST v1/auth/authWithMobile
		/// </summary>
		/// <param name="requestBody">authRequest</param>
		/// <returns>OK</returns>
		public async Task AuthenticateUserUsingPOSTAsync(AuthMobileOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/authWithMobile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authenticate using verified Mobile Number and user data
		/// AuthWithMobileTokenUsingPOST v1/auth/authWithMobileToken
		/// </summary>
		/// <param name="requestBody">authRequest</param>
		/// <returns>OK</returns>
		public async Task AuthWithMobileTokenUsingPOSTAsync(AuthWithMobileTxnAndUserData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/authWithMobileToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Auth token public key.
		/// CertUsingGET v1/auth/cert
		/// </summary>
		/// <returns>OK</returns>
		public async Task CertUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/cert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Authentication with Aadhaar Biometric based auth transaction.
		/// ConfirmWithAadhaarBioUsingPOST v1/auth/confirmWithAadhaarBio
		/// </summary>
		/// <param name="requestBody">authenticationRequest</param>
		/// <returns>OK</returns>
		public async Task ConfirmWithAadhaarBioUsingPOSTAsync(AuthAccountAadhaarBioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/confirmWithAadhaarBio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authentication with Aadhaar OTP based auth transaction.
		/// ConfirmWithAadhaarOtpUsingPOST v1/auth/confirmWithAadhaarOtp
		/// </summary>
		/// <param name="requestBody">authenticationRequest</param>
		/// <returns>OK</returns>
		public async Task ConfirmWithAadhaarOtpUsingPOSTAsync(AuthAccountAadhaarOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/confirmWithAadhaarOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authenticate using demographic data of user.
		/// ConfirmWithDemographicsUsingPOST v1/auth/confirmWithDemographics
		/// </summary>
		/// <param name="requestBody">authenticationRequest</param>
		/// <returns>OK</returns>
		public async Task ConfirmWithDemographicsUsingPOSTAsync(AuthAccountWithDemographicsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/confirmWithDemographics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authentication with Mobile OTP based auth transaction.
		/// ConfirmWithMobileUsingPOST v1/auth/confirmWithMobileOTP
		/// </summary>
		/// <param name="requestBody">authenticationRequest</param>
		/// <returns>OK</returns>
		public async Task ConfirmWithMobileUsingPOSTAsync(AuthAccountMobileOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/confirmWithMobileOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authentication with PASSWORD based auth transaction.
		/// AuthAccountPasswordRequestUsingPOST v1/auth/confirmWithPassword
		/// </summary>
		/// <param name="requestBody">authenticationRequest</param>
		/// <returns>OK</returns>
		public async Task AuthAccountPasswordRequestUsingPOSTAsync(AuthWithPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/confirmWithPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiate authentication process for given Health ID
		/// InitiateAuthUsingPOST v1/auth/init
		/// </summary>
		/// <param name="requestBody">authRequest</param>
		/// <returns>OK</returns>
		public async Task InitiateAuthUsingPOSTAsync(AuthInitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/init";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend Aadhaar/Mobile OTP for Authentication Transaction.
		/// ResendAuthMobileOTPUsingPOST v1/auth/resendAuthOTP
		/// </summary>
		/// <param name="requestBody">resendOtpRequest</param>
		/// <returns>OK</returns>
		public async Task ResendAuthMobileOTPUsingPOSTAsync(ResendOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/auth/resendAuthOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify aadhar OTP sent as part of forgetHealth id.
		/// Verify aadhar OTP sent as part of forgetHealth id.
		/// RetrievalHealthIdByAadharUsingPOST v1/forgot/healthId/aadhaar
		/// </summary>
		/// <param name="requestBody">authAccountAadhaarOTPRequest</param>
		/// <returns>OK</returns>
		public async Task RetrievalHealthIdByAadharUsingPOSTAsync(AuthAccountAadhaarOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forgot/healthId/aadhaar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Aadhaar OTP on registrered mobile number
		/// Generate Aadhaar OTP on registrered mobile number
		/// GenerateAadharOTPUsingPOST_1 v1/forgot/healthId/aadhaar/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateAadharOTPUsingPOST_1Async(AadharOtpGenerateRequestPayLoad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forgot/healthId/aadhaar/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Mobile OTP sent as  part of forgetHealth id.
		/// Verify Mobile OTP sent as  part of forgetHealth id.
		/// RetrievalHealthIdByMobileUsingPOST v1/forgot/healthId/mobile
		/// </summary>
		/// <param name="requestBody">retriveHealthIdMobilePayLoad</param>
		/// <returns>OK</returns>
		public async Task RetrievalHealthIdByMobileUsingPOSTAsync(RetriveHealthIdMobilePayLoad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forgot/healthId/mobile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Mobile OTP to start registration
		/// Generate Mobile OTP to start registration transaction.
		/// GenerateMobileOTPUsingPOST v1/forgot/healthId/mobile/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateMobileOTPUsingPOSTAsync(GenerateMobileOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forgot/healthId/mobile/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of districts in a given  State as per LGD.
		/// GetDistrictsInStateUsingGET v1/ha/lgd/districts
		/// </summary>
		/// <param name="stateCode">stateCode</param>
		/// <returns>OK</returns>
		public async Task GetDistrictsInStateUsingGETAsync(string stateCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ha/lgd/districts?stateCode=" + (stateCode==null? "" : System.Uri.EscapeDataString(stateCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of states as per LGD.
		/// GetStatesUsingGET v1/ha/lgd/states
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetStatesUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ha/lgd/states";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete tag against HealthId.
		/// DeleteTagUsingDELETE v1/ha/tags
		/// </summary>
		/// <returns>OK</returns>
		public async Task DeleteTagUsingDELETEAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ha/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of Tags against HealthID.
		/// GetTagsUsingGET v1/ha/tags
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetTagsUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ha/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add tag against HealthId.
		/// AddTagUsingPOST v1/ha/tags
		/// </summary>
		/// <param name="requestBody">tagRequest</param>
		/// <returns>OK</returns>
		public async Task AddTagUsingPOSTAsync(TagRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/ha/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate token for heath facility id.
		/// Generate token for heath facility id.
		/// AuthenticateHealthFacilityUsingPOST v1/health/facility/authenticate
		/// </summary>
		/// <param name="requestBody">healthFacilityAuthenticationRequest</param>
		/// <returns>OK</returns>
		public async Task AuthenticateHealthFacilityUsingPOSTAsync(HealthFacilityAuthenticationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/authenticate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change password for heath facility id.
		/// Change password for heath facility id.
		/// ChangePasswordUsingPOST v1/health/facility/change/password
		/// </summary>
		/// <param name="requestBody">healthFacilityPasswordRequest</param>
		/// <returns>OK</returns>
		public async Task ChangePasswordUsingPOSTAsync(HealthFacilityChangedPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/change/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Health ID card SVG
		/// CreateAadhaarAccountUsingPOST_1 v1/health/facility/createHealthIdWithPreVerified
		/// </summary>
		/// <param name="requestBody">accountRequest</param>
		/// <returns>OK</returns>
		public async Task CreateAadhaarAccountUsingPOST_1Async(CreateAccountWithPreVerifiedAadhaar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/createHealthIdWithPreVerified";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates password for heath facility id.
		/// Generates password for heath facility id.
		/// GeneratePasswordUsingPOST v1/health/facility/generate/password
		/// </summary>
		/// <param name="requestBody">healthFacilityPasswordRequest</param>
		/// <returns>OK</returns>
		public async Task GeneratePasswordUsingPOSTAsync(HealthFacilityPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/generate/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate health hacility OTP on registrered mobile number
		/// Generate health facility OTP on registrered mobile number
		/// GenerateFacilityOTPUsingPOST v1/health/facility/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateFacilityOTPUsingPOSTAsync(AadharOtpGenerateRequestPayLoad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// generateSvgCard
		/// GenerateSvgCardUsingGET_1 v1/health/facility/getSvgCard
		/// </summary>
		/// <returns>OK</returns>
		public async Task GenerateSvgCardUsingGET_1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/getSvgCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset password for heath facility id.
		/// Reset password for heath facility id.
		/// ResetPasswordUsingPOST v1/health/facility/reset/password
		/// </summary>
		/// <param name="requestBody">healthFacilityPasswordRequest</param>
		/// <returns>OK</returns>
		public async Task ResetPasswordUsingPOSTAsync(HealthFacilityPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/health/facility/reset/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Aadhaar OTP on registrered mobile number
		/// Generate Aadhaar OTP on registrered mobile number
		/// GenerateAadharOTPUsingPOST_2 v1/hid/benefit/aadhaar/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateAadharOTPUsingPOST_2Async(AadharOtpGenerateRequestPayLoad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/aadhaar/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create health id using Aadhaar Number Otp.
		/// Create health id using Aadhaar number opt
		/// VerifyAadharOtpUsingPOST v1/hid/benefit/aadhaar/verifyAadharOtp
		/// </summary>
		/// <param name="requestBody">createHealthIdOptRequest</param>
		/// <returns>OK</returns>
		public async Task VerifyAadharOtpUsingPOSTAsync(CreateHealthIdOptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/aadhaar/verifyAadharOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create health id using Biometric Authentication.
		/// Create health id using Biometric Authentication.
		/// VerifyBioUsingPOST v1/hid/benefit/aadhaar/verifyBio
		/// </summary>
		/// <param name="requestBody">createHidBiometricRequest</param>
		/// <returns>OK</returns>
		public async Task VerifyBioUsingPOSTAsync(CreateHidBiometricRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/aadhaar/verifyBio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create health id using Aadhaar Demo Auth.
		/// Create health id using Aadhaar Demo Auth.
		/// CreateHealthIdByDemoAuthUsingPOST v1/hid/benefit/createHealthId/demo/auth
		/// </summary>
		/// <param name="requestBody">createHIdDemoAuthRequest</param>
		/// <returns>OK</returns>
		public async Task CreateHealthIdByDemoAuthUsingPOSTAsync(CreateHIdDemoAuthRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/createHealthId/demo/auth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// De-Linked with hid.
		/// De-Linked with hid.
		/// DelinkHidBenefitUsingPOST v1/hid/benefit/delink
		/// </summary>
		/// <param name="requestBody">hidBenefitLinkedRequestPayload</param>
		/// <returns>OK</returns>
		public async Task DelinkHidBenefitUsingPOSTAsync(HidBenefitDelinkRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/delink";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Linked with hid.
		/// Linked with hid.
		/// LinkHidBenefitUsingPOST v1/hid/benefit/link
		/// </summary>
		/// <param name="requestBody">hidBenefitLinkedRequestPayload</param>
		/// <returns>OK</returns>
		public async Task LinkHidBenefitUsingPOSTAsync(HidBenefitLinkedRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/link";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create health id using mobile Authentication.
		/// Create health id using mobile Authentication.
		/// CreateHealthIdByMobileUsingPOST v1/hid/benefit/mobile/createHealthId
		/// </summary>
		/// <param name="requestBody">createHidMobileRequest</param>
		/// <returns>OK</returns>
		public async Task CreateHealthIdByMobileUsingPOSTAsync(CreateHidMobileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/mobile/createHealthId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate mobile OTP on registrered mobile number
		/// Generate mobile OTP on registrered mobile number
		/// GenerateMobileOtpUsingPOST v1/hid/benefit/mobile/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateMobileOtpUsingPOSTAsync(GenerateMobileOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/mobile/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create health id using notify Benefit.
		/// Create health id using notify Benefit.
		/// NotifyBenefitUsingPOST v1/hid/benefit/notify/benefit
		/// </summary>
		/// <param name="requestBody">createHidNotifyBenefitRequest</param>
		/// <returns>OK</returns>
		public async Task NotifyBenefitUsingPOSTAsync(CreateHidNotifyBenefitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/notify/benefit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search health id number using aadhar or aadhar token.
		/// Search health id number using aadhar or aadhar token.
		/// FindByAadharUsingPOST v1/hid/benefit/search/aadhaar
		/// </summary>
		/// <param name="requestBody">aadharNumberRequestPayload</param>
		/// <returns>OK</returns>
		public async Task FindByAadharUsingPOSTAsync(AadharNumberRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/search/aadhaar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search benefit using health id number.
		/// Search benefit using health id number
		/// FindByHealthIdUsingPOST v1/hid/benefit/search/healthIdNumber
		/// </summary>
		/// <param name="requestBody">searchRequest</param>
		/// <returns>OK</returns>
		public async Task FindByHealthIdUsingPOSTAsync(HidBenefitNameSearchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/search/healthIdNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update mobile number for account.
		/// UpdateMobileInformationUsingPOST v1/hid/benefit/update/mobile
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task UpdateMobileInformationUsingPOSTAsync(HidUpdateMobiletRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/update/mobile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update account information
		/// UpdateAccountInformationUsingPOST_1 v1/hid/benefit/update/profile
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task UpdateAccountInformationUsingPOST_1Async(HidUpdateAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/update/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update health id status .
		/// Update health id status.
		/// UpdateStatusUsingPOST v1/hid/benefit/update/status
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task UpdateStatusUsingPOSTAsync(HidStatusRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hid/benefit/update/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Aadhaar OTP on registrered mobile number to create Health ID.
		/// Verify Aadhar OTP received on registrered mobile number
		/// VerifyAadharOTPUsingPOST v1/registration/aadhaar/createHealthIdWithAadhaarOtp
		/// </summary>
		/// <param name="requestBody">verifyAadharOtpRequest</param>
		/// <returns>OK</returns>
		public async Task VerifyAadharOTPUsingPOSTAsync(CreateAccountWithAadhaarOtp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/createHealthIdWithAadhaarOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Health ID using pre-verified Aadhaar & Mobile.
		/// Create Health ID using pre-verified Aadhaar & Mobile.
		/// CreateAadhaarAccountUsingPOST v1/registration/aadhaar/createHealthIdWithPreVerified
		/// </summary>
		/// <param name="requestBody">accountRequest</param>
		/// <returns>OK</returns>
		public async Task CreateAadhaarAccountUsingPOSTAsync(CreateAccountWithPreVerifiedAadhaar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/createHealthIdWithPreVerified";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Mobile OTP for verification.
		/// Generate Mobile OTP to verify mobile number.
		/// GenerateMobileOTPForTxnUsingPOST v1/registration/aadhaar/generateMobileOTP
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task GenerateMobileOTPForTxnUsingPOSTAsync(GenerateMobileOTPForTxnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/generateMobileOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Aadhaar OTP on registrered mobile number
		/// Generate Aadhaar OTP on registrered mobile number
		/// GenerateAadharOTPUsingPOST v1/registration/aadhaar/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateAadharOTPUsingPOSTAsync(AadharOtpGenerateRequestPayLoad requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend Aadhaar OTP on registrered mobile number to create Health ID.
		/// Resend Aadhar OTP on registrered mobile number
		/// ResendAadharOTPUsingPOST v1/registration/aadhaar/resendAadhaarOtp
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task ResendAadharOTPUsingPOSTAsync(ResendOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/resendAadhaarOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search health id number using aadhar.
		/// Search health id number using aadhar.
		/// GetHealthIdNumbersByAadharUsingPOST v1/registration/aadhaar/search/aadhar
		/// </summary>
		/// <param name="requestBody">aadharNumberRequestPayload</param>
		/// <returns>OK</returns>
		public async Task GetHealthIdNumbersByAadharUsingPOSTAsync(AadharNumberRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/search/aadhar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Aadhaar using biometrics.
		/// Verify Aadhaar using biometrics
		/// VerifyAadharBioUsingPOST v1/registration/aadhaar/verifyBio
		/// </summary>
		/// <param name="requestBody">verifyAadharOtpRequest</param>
		/// <returns>OK</returns>
		public async Task VerifyAadharBioUsingPOSTAsync(VerifyAadhaarWithBio requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/verifyBio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Mobile OTP in an existing transaction.
		/// Verify Mobile OTP in an existing transaction.
		/// VerifyMobileOTPForTxnUsingPOST v1/registration/aadhaar/verifyMobileOTP
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>OK</returns>
		public async Task VerifyMobileOTPForTxnUsingPOSTAsync(VerifyMobileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/verifyMobileOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Aadhaar OTP and continue for mobile verification.
		/// Verify Aadhaar OTP received on registrered mobile number
		/// VerifyAadharOTPOnlyUsingPOST v1/registration/aadhaar/verifyOTP
		/// </summary>
		/// <param name="requestBody">verifyAadhaarOtp</param>
		/// <returns>OK</returns>
		public async Task VerifyAadharOTPOnlyUsingPOSTAsync(VerifyAadhaarOtp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/aadhaar/verifyOTP";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Health ID with verified mobile token
		/// VerifyUserViaMobileUsingPOST v1/registration/mobile/createHealthId
		/// </summary>
		/// <param name="requestBody">createAccountRequest</param>
		/// <returns>OK</returns>
		public async Task VerifyUserViaMobileUsingPOSTAsync(CreateAccountByVerifiedMobileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/mobile/createHealthId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate Mobile OTP to start registration
		/// Generate Mobile OTP to start registration transaction.
		/// GenerateMobileOTPUsingPOST_1 v1/registration/mobile/generateOtp
		/// </summary>
		/// <param name="requestBody">generateOtpRequest</param>
		/// <returns>OK</returns>
		public async Task GenerateMobileOTPUsingPOST_1Async(GenerateMobileOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/mobile/generateOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend Mobile OTP for Health ID registration
		/// Resend Mobile OTP in an existing transaction in case previous OTP is not received.
		/// ResentOtpUsingPOST v1/registration/mobile/resendOtp
		/// </summary>
		/// <param name="requestBody">resendRequest</param>
		/// <returns>OK</returns>
		public async Task ResentOtpUsingPOSTAsync(ResendOTPRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/mobile/resendOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Mobile OTP sent as part of registration transaction.
		/// Verify Mobile OTP in current registration transaction.
		/// VerifyMobileOTPUsingPOST v1/registration/mobile/verifyOtp
		/// </summary>
		/// <param name="requestBody">verifyOtpRequest</param>
		/// <returns>OK</returns>
		public async Task VerifyMobileOTPUsingPOSTAsync(VerifyMobileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registration/mobile/verifyOtp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search a user by Health IDs.
		/// SearchUserByUseridUsingPOST v1/search/existsByHealthId
		/// </summary>
		/// <param name="requestBody">searchDTO</param>
		/// <returns>OK</returns>
		public async Task SearchUserByUseridUsingPOSTAsync(SearchByHealthIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/search/existsByHealthId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search a user by Health ID Number.
		/// SearchUserByAccountUsingPOST v1/search/searchByHealthId
		/// </summary>
		/// <param name="requestBody">searchRequest</param>
		/// <returns>OK</returns>
		public async Task SearchUserByAccountUsingPOSTAsync(SearchByHealthIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/search/searchByHealthId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search users with a mobile number.
		/// SearchUserByMobileUsingPOST v1/search/searchByMobile
		/// </summary>
		/// <param name="requestBody">searchRequest</param>
		/// <returns>OK</returns>
		public async Task SearchUserByMobileUsingPOSTAsync(SearchByMobileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/search/searchByMobile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
